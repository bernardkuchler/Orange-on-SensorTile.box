
STM32H750B-DK-NevronskaMreza-Cas-NEAIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800d350  0800d350  0001d350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800dd88  0800dd88  0001dd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000044c  24000000  0800dd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e60  2400044c  0800e1dc  0002044c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240022ac  0800e1dc  000222ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001aa2e  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000037cb  00000000  00000000  0003aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000014c0  00000000  00000000  0003e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001338  00000000  00000000  0003fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c155  00000000  00000000  00040e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ea6f  00000000  00000000  0007cfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175b55  00000000  00000000  0009ba34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000c9  00000000  00000000  00211589  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005d9c  00000000  00000000  00211654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400044c 	.word	0x2400044c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d338 	.word	0x0800d338

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000450 	.word	0x24000450
 80002dc:	0800d338 	.word	0x0800d338

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 ffd7 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f83f 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f947 	bl	8000a48 <MX_GPIO_Init>
  MX_ADC3_Init();
 80007ba:	f000 f8bb 	bl	8000934 <MX_ADC3_Init>
  MX_TIM16_Init();
 80007be:	f000 f91d 	bl	80009fc <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 80007c2:	f00a ff59 	bl	800b678 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16);
 80007c6:	4816      	ldr	r0, [pc, #88]	; (8000820 <main+0x78>)
 80007c8:	f007 fb2e 	bl	8007e28 <HAL_TIM_Base_Start>

      enum neai_state error_code = neai_classification_init(knowledge);
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <main+0x7c>)
 80007ce:	f00b fc93 	bl	800c0f8 <neai_classification_init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
        if(error_code != NEAI_OK) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d010      	beq.n	80007fe <main+0x56>
      	  snprintf(SendBuffer,BUFSIZE,"Napaka pri inicializaciji znanja. \r\n");
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <main+0x80>)
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <main+0x84>)
 80007e4:	f00b ffce 	bl	800c784 <sniprintf>
      	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <main+0x84>)
 80007ea:	f7ff fd79 	bl	80002e0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <main+0x84>)
 80007f4:	f00b f800 	bl	800b7f8 <CDC_Transmit_FS>

      	  Error_Handler();
 80007f8:	f000 fdb4 	bl	8001364 <Error_Handler>
 80007fc:	e00d      	b.n	800081a <main+0x72>
        }
        else {
      	  snprintf(SendBuffer,BUFSIZE,"Opravljena inicializacija znanja. \r\n");
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <main+0x88>)
 8000800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <main+0x84>)
 8000806:	f00b ffbd 	bl	800c784 <sniprintf>
      	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <main+0x84>)
 800080c:	f7ff fd68 	bl	80002e0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <main+0x84>)
 8000816:	f00a ffef 	bl	800b7f8 <CDC_Transmit_FS>
        }

  while (1)
  {
	  Inference();
 800081a:	f000 fd2b 	bl	8001274 <Inference>
 800081e:	e7fc      	b.n	800081a <main+0x72>
 8000820:	240005ec 	.word	0x240005ec
 8000824:	0800d44c 	.word	0x0800d44c
 8000828:	0800d384 	.word	0x0800d384
 800082c:	24000478 	.word	0x24000478
 8000830:	0800d3ac 	.word	0x0800d3ac

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	; 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	224c      	movs	r2, #76	; 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00b ff96 	bl	800c774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00b ff90 	bl	800c774 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000854:	2002      	movs	r0, #2
 8000856:	f003 fd77 	bl	8004348 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <SystemClock_Config+0xf8>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <SystemClock_Config+0xf8>)
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <SystemClock_Config+0xf8>)
 800086c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <SystemClock_Config+0xfc>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800087c:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <SystemClock_Config+0xfc>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <SystemClock_Config+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SystemClock_Config+0xfc>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008a0:	2303      	movs	r3, #3
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 80008ba:	2316      	movs	r3, #22
 80008bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 80008be:	23a9      	movs	r3, #169	; 0xa9
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fd7c 	bl	80043dc <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008ea:	f000 fd3b 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	233f      	movs	r3, #63	; 0x3f
 80008f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f004 f9bc 	bl	8004c90 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800091e:	f000 fd21 	bl	8001364 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	; 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800

08000934 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_ADC3_Init+0xb8>)
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <MX_ADC3_Init+0xbc>)
 8000950:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_ADC3_Init+0xb8>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000960:	2204      	movs	r2, #4
 8000962:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ADC3_Init+0xb8>)
 800096c:	2200      	movs	r2, #0
 800096e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000972:	2201      	movs	r2, #1
 8000974:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC3_Init+0xb8>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_ADC3_Init+0xb8>)
 800098a:	2200      	movs	r2, #0
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000996:	2200      	movs	r2, #0
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_ADC3_Init+0xb8>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_ADC3_Init+0xb8>)
 80009a4:	f001 f940 	bl	8001c28 <HAL_ADC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80009ae:	f000 fcd9 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_ADC3_Init+0xc0>)
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b6:	2306      	movs	r3, #6
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_ADC3_Init+0xc4>)
 80009c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c2:	2304      	movs	r3, #4
 80009c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC3_Init+0xb8>)
 80009d4:	f001 faca 	bl	8001f6c <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 80009de:	f000 fcc1 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000588 	.word	0x24000588
 80009f0:	58026000 	.word	0x58026000
 80009f4:	04300002 	.word	0x04300002
 80009f8:	47ff0000 	.word	0x47ff0000

080009fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64 - 1;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a08:	223f      	movs	r2, #63	; 0x3f
 8000a0a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a18:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a2e:	f007 f9a3 	bl	8007d78 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000a38:	f000 fc94 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	240005ec 	.word	0x240005ec
 8000a44:	40014400 	.word	0x40014400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	; 0x40
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a5e:	4bbd      	ldr	r3, [pc, #756]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4abb      	ldr	r2, [pc, #748]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4bb9      	ldr	r3, [pc, #740]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4bb5      	ldr	r3, [pc, #724]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4ab4      	ldr	r2, [pc, #720]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4bb1      	ldr	r3, [pc, #708]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a9a:	4bae      	ldr	r3, [pc, #696]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4aac      	ldr	r2, [pc, #688]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4baa      	ldr	r3, [pc, #680]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab4:	623b      	str	r3, [r7, #32]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab8:	4ba6      	ldr	r3, [pc, #664]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	4aa5      	ldr	r2, [pc, #660]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac8:	4ba2      	ldr	r3, [pc, #648]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b9f      	ldr	r3, [pc, #636]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a9d      	ldr	r2, [pc, #628]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b9b      	ldr	r3, [pc, #620]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af4:	4b97      	ldr	r3, [pc, #604]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	4a96      	ldr	r2, [pc, #600]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b04:	4b93      	ldr	r3, [pc, #588]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b12:	4b90      	ldr	r3, [pc, #576]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a8e      	ldr	r2, [pc, #568]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b8c      	ldr	r3, [pc, #560]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b88      	ldr	r3, [pc, #544]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	4a87      	ldr	r2, [pc, #540]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b40:	4b84      	ldr	r3, [pc, #528]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4b81      	ldr	r3, [pc, #516]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a7f      	ldr	r2, [pc, #508]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b7d      	ldr	r3, [pc, #500]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b79      	ldr	r3, [pc, #484]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	4a78      	ldr	r2, [pc, #480]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7c:	4b75      	ldr	r3, [pc, #468]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	4b72      	ldr	r3, [pc, #456]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	4a70      	ldr	r2, [pc, #448]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bae:	486a      	ldr	r0, [pc, #424]	; (8000d58 <MX_GPIO_Init+0x310>)
 8000bb0:	f002 f8f8 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4868      	ldr	r0, [pc, #416]	; (8000d5c <MX_GPIO_Init+0x314>)
 8000bba:	f002 f8f3 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc4:	4866      	ldr	r0, [pc, #408]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000bc6:	f002 f8ed 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000bca:	23f0      	movs	r3, #240	; 0xf0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be2:	4619      	mov	r1, r3
 8000be4:	485c      	ldr	r0, [pc, #368]	; (8000d58 <MX_GPIO_Init+0x310>)
 8000be6:	f001 ff2d 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000bea:	f242 0320 	movw	r3, #8224	; 0x2020
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	4856      	ldr	r0, [pc, #344]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000c08:	f001 ff1c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000c0c:	23fc      	movs	r3, #252	; 0xfc
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c1c:	230e      	movs	r3, #14
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	484f      	ldr	r0, [pc, #316]	; (8000d64 <MX_GPIO_Init+0x31c>)
 8000c28:	f001 ff0c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c3e:	230a      	movs	r3, #10
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4847      	ldr	r0, [pc, #284]	; (8000d68 <MX_GPIO_Init+0x320>)
 8000c4a:	f001 fefb 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000c4e:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c60:	230c      	movs	r3, #12
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4840      	ldr	r0, [pc, #256]	; (8000d6c <MX_GPIO_Init+0x324>)
 8000c6c:	f001 feea 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000c70:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c82:	230e      	movs	r3, #14
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4832      	ldr	r0, [pc, #200]	; (8000d58 <MX_GPIO_Init+0x310>)
 8000c8e:	f001 fed9 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000c92:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4619      	mov	r1, r3
 8000cae:	4830      	ldr	r0, [pc, #192]	; (8000d70 <MX_GPIO_Init+0x328>)
 8000cb0:	f001 fec8 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4824      	ldr	r0, [pc, #144]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000cd0:	f001 feb8 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000cf0:	f001 fea8 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000cf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4815      	ldr	r0, [pc, #84]	; (8000d68 <MX_GPIO_Init+0x320>)
 8000d12:	f001 fe97 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000d16:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d28:	230e      	movs	r3, #14
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <MX_GPIO_Init+0x314>)
 8000d34:	f001 fe86 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	e00f      	b.n	8000d74 <MX_GPIO_Init+0x32c>
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58022000 	.word	0x58022000
 8000d5c:	58022400 	.word	0x58022400
 8000d60:	58020400 	.word	0x58020400
 8000d64:	58022800 	.word	0x58022800
 8000d68:	58021800 	.word	0x58021800
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58021000 	.word	0x58021000
 8000d74:	48bc      	ldr	r0, [pc, #752]	; (8001068 <MX_GPIO_Init+0x620>)
 8000d76:	f001 fe65 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	48b5      	ldr	r0, [pc, #724]	; (800106c <MX_GPIO_Init+0x624>)
 8000d96:	f001 fe55 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000dac:	2303      	movs	r3, #3
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db4:	4619      	mov	r1, r3
 8000db6:	48ae      	ldr	r0, [pc, #696]	; (8001070 <MX_GPIO_Init+0x628>)
 8000db8:	f001 fe44 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000dbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000dce:	2309      	movs	r3, #9
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	48a5      	ldr	r0, [pc, #660]	; (8001070 <MX_GPIO_Init+0x628>)
 8000dda:	f001 fe33 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000dde:	2304      	movs	r3, #4
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dee:	230b      	movs	r3, #11
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	489e      	ldr	r0, [pc, #632]	; (8001074 <MX_GPIO_Init+0x62c>)
 8000dfa:	f001 fe23 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4895      	ldr	r0, [pc, #596]	; (8001068 <MX_GPIO_Init+0x620>)
 8000e12:	f001 fe17 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000e16:	2330      	movs	r3, #48	; 0x30
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000e26:	230a      	movs	r3, #10
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4890      	ldr	r0, [pc, #576]	; (8001074 <MX_GPIO_Init+0x62c>)
 8000e32:	f001 fe07 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4889      	ldr	r0, [pc, #548]	; (8001078 <MX_GPIO_Init+0x630>)
 8000e54:	f001 fdf6 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000e58:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	4881      	ldr	r0, [pc, #516]	; (800107c <MX_GPIO_Init+0x634>)
 8000e76:	f001 fde5 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e92:	4619      	mov	r1, r3
 8000e94:	4874      	ldr	r0, [pc, #464]	; (8001068 <MX_GPIO_Init+0x620>)
 8000e96:	f001 fdd5 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000e9a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eac:	230c      	movs	r3, #12
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	486c      	ldr	r0, [pc, #432]	; (8001068 <MX_GPIO_Init+0x620>)
 8000eb8:	f001 fdc4 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	486b      	ldr	r0, [pc, #428]	; (8001080 <MX_GPIO_Init+0x638>)
 8000ed2:	f001 fdb7 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4866      	ldr	r0, [pc, #408]	; (8001084 <MX_GPIO_Init+0x63c>)
 8000eec:	f001 fdaa 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	485c      	ldr	r0, [pc, #368]	; (8001080 <MX_GPIO_Init+0x638>)
 8000f0e:	f001 fd99 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f24:	230b      	movs	r3, #11
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	484f      	ldr	r0, [pc, #316]	; (800106c <MX_GPIO_Init+0x624>)
 8000f30:	f001 fd88 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000f34:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f46:	230c      	movs	r3, #12
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	484d      	ldr	r0, [pc, #308]	; (8001088 <MX_GPIO_Init+0x640>)
 8000f52:	f001 fd77 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x624>)
 8000f70:	f001 fd68 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f74:	2304      	movs	r3, #4
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f86:	4619      	mov	r1, r3
 8000f88:	483c      	ldr	r0, [pc, #240]	; (800107c <MX_GPIO_Init+0x634>)
 8000f8a:	f001 fd5b 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483a      	ldr	r0, [pc, #232]	; (800108c <MX_GPIO_Init+0x644>)
 8000fa2:	f001 fd4f 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000fa6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4831      	ldr	r0, [pc, #196]	; (8001088 <MX_GPIO_Init+0x640>)
 8000fc4:	f001 fd3e 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482a      	ldr	r0, [pc, #168]	; (8001084 <MX_GPIO_Init+0x63c>)
 8000fdc:	f001 fd32 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4822      	ldr	r0, [pc, #136]	; (8001088 <MX_GPIO_Init+0x640>)
 8000ffe:	f001 fd21 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001002:	233e      	movs	r3, #62	; 0x3e
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001012:	230b      	movs	r3, #11
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	4619      	mov	r1, r3
 800101c:	4819      	ldr	r0, [pc, #100]	; (8001084 <MX_GPIO_Init+0x63c>)
 800101e:	f001 fd11 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001022:	230c      	movs	r3, #12
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_GPIO_Init+0x628>)
 800103e:	f001 fd01 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001042:	2386      	movs	r3, #134	; 0x86
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001052:	230b      	movs	r3, #11
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105a:	4619      	mov	r1, r3
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <MX_GPIO_Init+0x638>)
 800105e:	f001 fcf1 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001062:	23e0      	movs	r3, #224	; 0xe0
 8001064:	e014      	b.n	8001090 <MX_GPIO_Init+0x648>
 8001066:	bf00      	nop
 8001068:	58020c00 	.word	0x58020c00
 800106c:	58022000 	.word	0x58022000
 8001070:	58021c00 	.word	0x58021c00
 8001074:	58021000 	.word	0x58021000
 8001078:	58020400 	.word	0x58020400
 800107c:	58021800 	.word	0x58021800
 8001080:	58020000 	.word	0x58020000
 8001084:	58020800 	.word	0x58020800
 8001088:	58021400 	.word	0x58021400
 800108c:	58022800 	.word	0x58022800
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800109e:	230c      	movs	r3, #12
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a6:	4619      	mov	r1, r3
 80010a8:	4850      	ldr	r0, [pc, #320]	; (80011ec <MX_GPIO_Init+0x7a4>)
 80010aa:	f001 fccb 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c0:	2307      	movs	r3, #7
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4849      	ldr	r0, [pc, #292]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 80010cc:	f001 fcba 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80010d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	4841      	ldr	r0, [pc, #260]	; (80011ec <MX_GPIO_Init+0x7a4>)
 80010e8:	f001 fcac 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80010fc:	2309      	movs	r3, #9
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001104:	4619      	mov	r1, r3
 8001106:	483b      	ldr	r0, [pc, #236]	; (80011f4 <MX_GPIO_Init+0x7ac>)
 8001108:	f001 fc9c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111e:	230e      	movs	r3, #14
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4830      	ldr	r0, [pc, #192]	; (80011ec <MX_GPIO_Init+0x7a4>)
 800112a:	f001 fc8b 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800112e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001140:	2309      	movs	r3, #9
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	482b      	ldr	r0, [pc, #172]	; (80011f8 <MX_GPIO_Init+0x7b0>)
 800114c:	f001 fc7a 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001150:	2303      	movs	r3, #3
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	4821      	ldr	r0, [pc, #132]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 800116c:	f001 fc6a 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001170:	2304      	movs	r3, #4
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <MX_GPIO_Init+0x7b4>)
 8001188:	f001 fc5c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 80011a6:	f001 fc4d 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011bc:	2305      	movs	r3, #5
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c4:	4619      	mov	r1, r3
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 80011c8:	f001 fc3c 	bl	8002a44 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80011cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80011d0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80011d4:	f000 fb86 	bl	80018e4 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80011d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80011dc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80011e0:	f000 fb80 	bl	80018e4 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3740      	adds	r7, #64	; 0x40
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58021c00 	.word	0x58021c00
 80011f0:	58020400 	.word	0x58020400
 80011f4:	58020000 	.word	0x58020000
 80011f8:	58020c00 	.word	0x58020c00
 80011fc:	58022400 	.word	0x58022400

08001200 <FillBuffer>:

/* USER CODE BEGIN 4 */

void FillBuffer(float* buffer, uint32_t size)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t i = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  uint32_t step = AXIS_NUMBER;
 800120e:	2301      	movs	r3, #1
 8001210:	60bb      	str	r3, [r7, #8]

  if(counterOfTestData == 0) {
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <FillBuffer+0x64>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d119      	bne.n	800124e <FillBuffer+0x4e>
	  timestamp = htim16.Instance->CNT;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <FillBuffer+0x68>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <FillBuffer+0x6c>)
 8001222:	6013      	str	r3, [r2, #0]
  }

  while (i < size)
 8001224:	e013      	b.n	800124e <FillBuffer+0x4e>
  {
	  buffer[i] = testData[counterOfTestData];
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <FillBuffer+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	440b      	add	r3, r1
 8001232:	490f      	ldr	r1, [pc, #60]	; (8001270 <FillBuffer+0x70>)
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	440a      	add	r2, r1
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	601a      	str	r2, [r3, #0]

	  counterOfTestData++;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <FillBuffer+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <FillBuffer+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

	  i += step;
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  while (i < size)
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3e7      	bcc.n	8001226 <FillBuffer+0x26>
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	24000578 	.word	0x24000578
 8001268:	240005ec 	.word	0x240005ec
 800126c:	24000584 	.word	0x24000584
 8001270:	24000004 	.word	0x24000004

08001274 <Inference>:


void Inference(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af02      	add	r7, sp, #8
  uint16_t id_class;

  FillBuffer(input_user_buffer,SIGNAL_SIZE);
 800127a:	2101      	movs	r1, #1
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <Inference+0xc0>)
 800127e:	f7ff ffbf 	bl	8001200 <FillBuffer>
  neai_classification(input_user_buffer,output_class_buffer,&id_class);
 8001282:	1cbb      	adds	r3, r7, #2
 8001284:	461a      	mov	r2, r3
 8001286:	492c      	ldr	r1, [pc, #176]	; (8001338 <Inference+0xc4>)
 8001288:	482a      	ldr	r0, [pc, #168]	; (8001334 <Inference+0xc0>)
 800128a:	f00b f84b 	bl	800c324 <neai_classification>

  //snprintf(SendBuffer,BUFSIZE,"Class: %s [%u%%]\r\n",id2class[id_class],(uint)(output_class_buffer[id_class-1]*100));
  //CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));

  if(counterOfTestData == sizeOfTestData) {
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <Inference+0xc8>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <Inference+0xcc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d147      	bne.n	800132a <Inference+0xb6>
	  counterOfTestData = 0;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <Inference+0xc8>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

	  uint32_t duration = htim16.Instance->CNT;
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <Inference+0xd0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	607b      	str	r3, [r7, #4]

	  if(duration >= timestamp)
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <Inference+0xd4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d305      	bcc.n	80012be <Inference+0x4a>
	  	duration -= timestamp;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <Inference+0xd4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	e006      	b.n	80012cc <Inference+0x58>
	  else
	  	duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <Inference+0xd4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012ca:	607b      	str	r3, [r7, #4]

	  //snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: %lu mikrosekund. \r\n", duration);
	  //CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));

	  averageDurationValue += duration;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <Inference+0xd8>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <Inference+0xd8>)
 80012d6:	6013      	str	r3, [r2, #0]
	  countDurations++;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <Inference+0xdc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <Inference+0xdc>)
 80012e0:	6013      	str	r3, [r2, #0]

	  if(countDurations == numberOfDurations) {
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <Inference+0xdc>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <Inference+0xe0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d11d      	bne.n	800132a <Inference+0xb6>
	  	snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu mikrosekund. \r\n", averageDurationValue, averageDurationValue / 100);
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <Inference+0xd8>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <Inference+0xd8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4918      	ldr	r1, [pc, #96]	; (8001358 <Inference+0xe4>)
 80012f8:	fba1 1303 	umull	r1, r3, r1, r3
 80012fc:	095b      	lsrs	r3, r3, #5
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <Inference+0xe8>)
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	4815      	ldr	r0, [pc, #84]	; (8001360 <Inference+0xec>)
 800130a:	f00b fa3b 	bl	800c784 <sniprintf>
	  	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800130e:	4814      	ldr	r0, [pc, #80]	; (8001360 <Inference+0xec>)
 8001310:	f7fe ffe6 	bl	80002e0 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	4619      	mov	r1, r3
 8001318:	4811      	ldr	r0, [pc, #68]	; (8001360 <Inference+0xec>)
 800131a:	f00a fa6d 	bl	800b7f8 <CDC_Transmit_FS>

	  	countDurations = 0;
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <Inference+0xdc>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
	  	averageDurationValue = 0;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <Inference+0xd8>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
	  }
  }

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	24000468 	.word	0x24000468
 8001338:	2400046c 	.word	0x2400046c
 800133c:	24000578 	.word	0x24000578
 8001340:	240002e4 	.word	0x240002e4
 8001344:	240005ec 	.word	0x240005ec
 8001348:	24000584 	.word	0x24000584
 800134c:	2400057c 	.word	0x2400057c
 8001350:	24000580 	.word	0x24000580
 8001354:	24000000 	.word	0x24000000
 8001358:	51eb851f 	.word	0x51eb851f
 800135c:	0800d3d4 	.word	0x0800d3d4
 8001360:	24000478 	.word	0x24000478

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x30>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x30>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x30>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	58024400 	.word	0x58024400

080013a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0bc      	sub	sp, #240	; 0xf0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	22c0      	movs	r2, #192	; 0xc0
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00b f9d5 	bl	800c774 <memset>
  if(hadc->Instance==ADC3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a41      	ldr	r2, [pc, #260]	; (80014d4 <HAL_ADC_MspInit+0x130>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d17a      	bne.n	80014ca <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80013e4:	230c      	movs	r3, #12
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013f4:	23c0      	movs	r3, #192	; 0xc0
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013f8:	2320      	movs	r3, #32
 80013fa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	4618      	mov	r0, r3
 800140c:	f003 ffb6 	bl	800537c <HAL_RCCEx_PeriphCLKConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001416:	f7ff ffa5 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 8001422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_ADC_MspInit+0x134>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001478:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001488:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800148c:	4619      	mov	r1, r3
 800148e:	4813      	ldr	r0, [pc, #76]	; (80014dc <HAL_ADC_MspInit+0x138>)
 8001490:	f001 fad8 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001494:	2301      	movs	r3, #1
 8001496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <HAL_ADC_MspInit+0x13c>)
 80014ae:	f001 fac9 	bl	8002a44 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80014b2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80014b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80014ba:	f000 fa13 	bl	80018e4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80014be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80014c2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80014c6:	f000 fa0d 	bl	80018e4 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	37f0      	adds	r7, #240	; 0xf0
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	58026000 	.word	0x58026000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58021400 	.word	0x58021400
 80014e0:	58020800 	.word	0x58020800

080014e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_TIM_Base_MspInit+0x3c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10e      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_TIM_Base_MspInit+0x40>)
 80014f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0x40>)
 80014fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001502:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_TIM_Base_MspInit+0x40>)
 8001508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40014400 	.word	0x40014400
 8001524:	58024400 	.word	0x58024400

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 f966 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <OTG_FS_IRQHandler+0x10>)
 8001582:	f001 fd81 	bl	8003088 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	24001b20 	.word	0x24001b20

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f00b f8ae 	bl	800c720 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	24080000 	.word	0x24080000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	24000638 	.word	0x24000638
 80015f8:	240022b0 	.word	0x240022b0

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001600:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <SystemInit+0xe4>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001606:	4a36      	ldr	r2, [pc, #216]	; (80016e0 <SystemInit+0xe4>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <SystemInit+0xe8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	2b06      	cmp	r3, #6
 800161a:	d807      	bhi.n	800162c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <SystemInit+0xe8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 030f 	bic.w	r3, r3, #15
 8001624:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <SystemInit+0xe8>)
 8001626:	f043 0307 	orr.w	r3, r3, #7
 800162a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800162c:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <SystemInit+0xec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <SystemInit+0xec>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <SystemInit+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <SystemInit+0xec>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4929      	ldr	r1, [pc, #164]	; (80016e8 <SystemInit+0xec>)
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <SystemInit+0xf0>)
 8001646:	4013      	ands	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <SystemInit+0xe8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <SystemInit+0xe8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 030f 	bic.w	r3, r3, #15
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <SystemInit+0xe8>)
 8001660:	f043 0307 	orr.w	r3, r3, #7
 8001664:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <SystemInit+0xec>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <SystemInit+0xec>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <SystemInit+0xec>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <SystemInit+0xec>)
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <SystemInit+0xf4>)
 800167c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <SystemInit+0xec>)
 8001680:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <SystemInit+0xf8>)
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <SystemInit+0xec>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <SystemInit+0xfc>)
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <SystemInit+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <SystemInit+0xec>)
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <SystemInit+0xfc>)
 8001694:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <SystemInit+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <SystemInit+0xec>)
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <SystemInit+0xfc>)
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <SystemInit+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <SystemInit+0xec>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <SystemInit+0xec>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <SystemInit+0xec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <SystemInit+0x100>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <SystemInit+0x104>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016c6:	d202      	bcs.n	80016ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <SystemInit+0x108>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <SystemInit+0x10c>)
 80016d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	52002000 	.word	0x52002000
 80016e8:	58024400 	.word	0x58024400
 80016ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80016f0:	02020200 	.word	0x02020200
 80016f4:	01ff0000 	.word	0x01ff0000
 80016f8:	01010280 	.word	0x01010280
 80016fc:	5c001000 	.word	0x5c001000
 8001700:	ffff0000 	.word	0xffff0000
 8001704:	51008108 	.word	0x51008108
 8001708:	52004000 	.word	0x52004000

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001710:	f7ff ff74 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	; (800174c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	; (8001758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f00a fff7 	bl	800c72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff f833 	bl	80007a8 <main>
  bx  lr
 8001742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001748:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800174c:	2400044c 	.word	0x2400044c
  ldr r2, =_sidata
 8001750:	0800dd90 	.word	0x0800dd90
  ldr r2, =_sbss
 8001754:	2400044c 	.word	0x2400044c
  ldr r4, =_ebss
 8001758:	240022ac 	.word	0x240022ac

0800175c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC3_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001766:	2003      	movs	r0, #3
 8001768:	f001 f92c 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800176c:	f003 fc46 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_Init+0x68>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	4913      	ldr	r1, [pc, #76]	; (80017cc <HAL_Init+0x6c>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_Init+0x68>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_Init+0x6c>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_Init+0x70>)
 80017a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_Init+0x74>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f814 	bl	80017d8 <HAL_InitTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e002      	b.n	80017c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ba:	f7ff fdd9 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	58024400 	.word	0x58024400
 80017cc:	0800d4d0 	.word	0x0800d4d0
 80017d0:	240002ec 	.word	0x240002ec
 80017d4:	240002e8 	.word	0x240002e8

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_InitTick+0x60>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e021      	b.n	8001830 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_InitTick+0x64>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_InitTick+0x60>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f001 f911 	bl	8002a2a <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f001 f8db 	bl	80029da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x68>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	240002f4 	.word	0x240002f4
 800183c:	240002e8 	.word	0x240002e8
 8001840:	240002f0 	.word	0x240002f0

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	240002f4 	.word	0x240002f4
 8001868:	2400063c 	.word	0x2400063c

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2400063c 	.word	0x2400063c

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d005      	beq.n	80018aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_Delay+0x44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018aa:	bf00      	nop
 80018ac:	f7ff ffde 	bl	800186c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8f7      	bhi.n	80018ac <HAL_Delay+0x28>
  {
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	240002f4 	.word	0x240002f4

080018cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetREVID+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0c1b      	lsrs	r3, r3, #16
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	5c001000 	.word	0x5c001000

080018e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	401a      	ands	r2, r3
 80018f8:	4904      	ldr	r1, [pc, #16]	; (800190c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	58000400 	.word	0x58000400

08001910 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3360      	adds	r3, #96	; 0x60
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	431a      	orrs	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	611a      	str	r2, [r3, #16]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b087      	sub	sp, #28
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3360      	adds	r3, #96	; 0x60
 80019fa:	461a      	mov	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	601a      	str	r2, [r3, #0]
  }
}
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3330      	adds	r3, #48	; 0x30
 8001a30:	461a      	mov	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	211f      	movs	r1, #31
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	f003 011f 	and.w	r1, r3, #31
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3314      	adds	r3, #20
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0e5b      	lsrs	r3, r3, #25
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	0d1b      	lsrs	r3, r3, #20
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2107      	movs	r1, #7
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	401a      	ands	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	0d1b      	lsrs	r3, r3, #20
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0318 	and.w	r3, r3, #24
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001af4:	40d9      	lsrs	r1, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	400b      	ands	r3, r1
 8001afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	000fffff 	.word	0x000fffff

08001b18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6093      	str	r3, [r2, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	5fffffc0 	.word	0x5fffffc0

08001b3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	6fffffc0 	.word	0x6fffffc0

08001b8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <LL_ADC_IsEnabled+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_ADC_IsEnabled+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d101      	bne.n	8001c18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e18f      	b.n	8001f62 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fba7 	bl	80013a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff67 	bl	8001b3c <LL_ADC_IsDeepPowerDownEnabled>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff4d 	bl	8001b18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff82 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d114      	bne.n	8001cb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff66 	bl	8001b64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_ADC_Init+0x290>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	4a87      	ldr	r2, [pc, #540]	; (8001ebc <HAL_ADC_Init+0x294>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001caa:	e002      	b.n	8001cb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f9      	bne.n	8001cac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff65 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	f043 0210 	orr.w	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff76 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001cee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 8129 	bne.w	8001f50 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 8125 	bne.w	8001f50 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff4a 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d136      	bne.n	8001d94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a65      	ldr	r2, [pc, #404]	; (8001ec0 <HAL_ADC_Init+0x298>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_Init+0x112>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a63      	ldr	r2, [pc, #396]	; (8001ec4 <HAL_ADC_Init+0x29c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d10e      	bne.n	8001d58 <HAL_ADC_Init+0x130>
 8001d3a:	4861      	ldr	r0, [pc, #388]	; (8001ec0 <HAL_ADC_Init+0x298>)
 8001d3c:	f7ff ff3a 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d40:	4604      	mov	r4, r0
 8001d42:	4860      	ldr	r0, [pc, #384]	; (8001ec4 <HAL_ADC_Init+0x29c>)
 8001d44:	f7ff ff36 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4323      	orrs	r3, r4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e008      	b.n	8001d6a <HAL_ADC_Init+0x142>
 8001d58:	485b      	ldr	r0, [pc, #364]	; (8001ec8 <HAL_ADC_Init+0x2a0>)
 8001d5a:	f7ff ff2b 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a53      	ldr	r2, [pc, #332]	; (8001ec0 <HAL_ADC_Init+0x298>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d004      	beq.n	8001d82 <HAL_ADC_Init+0x15a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_ADC_Init+0x29c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Init+0x15e>
 8001d82:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_ADC_Init+0x2a4>)
 8001d84:	e000      	b.n	8001d88 <HAL_ADC_Init+0x160>
 8001d86:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <HAL_ADC_Init+0x2a8>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f7ff fdbe 	bl	8001910 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d94:	f7ff fd9a 	bl	80018cc <HAL_GetREVID>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d914      	bls.n	8001dcc <HAL_ADC_Init+0x1a4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d110      	bne.n	8001dcc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7d5b      	ldrb	r3, [r3, #21]
 8001dae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001db4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001dba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7f1b      	ldrb	r3, [r3, #28]
 8001dc0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001dc2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dc4:	f043 030c 	orr.w	r3, r3, #12
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	e00d      	b.n	8001de8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7d5b      	ldrb	r3, [r3, #21]
 8001dd0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dd6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ddc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7f1b      	ldrb	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	045b      	lsls	r3, r3, #17
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d009      	beq.n	8001e1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_ADC_Init+0x2ac>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	69b9      	ldr	r1, [r7, #24]
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fed1 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001e38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fede 	bl	8001c00 <LL_ADC_INJ_IsConversionOngoing>
 8001e44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d15f      	bne.n	8001f0c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d15c      	bne.n	8001f0c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7d1b      	ldrb	r3, [r3, #20]
 8001e56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_ADC_Init+0x2b0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d130      	bne.n	8001ee0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_ADC_Init+0x2b4>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e92:	3a01      	subs	r2, #1
 8001e94:	0411      	lsls	r1, r2, #16
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	e01c      	b.n	8001ef0 <HAL_ADC_Init+0x2c8>
 8001eb6:	bf00      	nop
 8001eb8:	240002e8 	.word	0x240002e8
 8001ebc:	053e2d63 	.word	0x053e2d63
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40022100 	.word	0x40022100
 8001ec8:	58026000 	.word	0x58026000
 8001ecc:	40022300 	.word	0x40022300
 8001ed0:	58026300 	.word	0x58026300
 8001ed4:	fff0c003 	.word	0xfff0c003
 8001ed8:	ffffbffc 	.word	0xffffbffc
 8001edc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fb80 	bl	800260c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10c      	bne.n	8001f2e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f023 010f 	bic.w	r1, r3, #15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	1e5a      	subs	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2c:	e007      	b.n	8001f3e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020f 	bic.w	r2, r2, #15
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f4e:	e007      	b.n	8001f60 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop

08001f6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b0a1      	sub	sp, #132	; 0x84
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a9d      	ldr	r2, [pc, #628]	; (80021fc <HAL_ADC_ConfigChannel+0x290>)
 8001f86:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x2a>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e321      	b.n	80025da <HAL_ADC_ConfigChannel+0x66e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fe19 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8306 	bne.w	80025bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x62>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	e016      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x90>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fde:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	69d1      	ldr	r1, [r2, #28]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	430b      	orrs	r3, r1
 8002008:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	f7ff fd02 	bl	8001a20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fdda 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8002026:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fde7 	bl	8001c00 <LL_ADC_INJ_IsConversionOngoing>
 8002032:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 80b3 	bne.w	80021a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800203c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 80af 	bne.w	80021a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	461a      	mov	r2, r3
 8002052:	f7ff fd11 	bl	8001a78 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002056:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_ADC_ConfigChannel+0x294>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800205e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002062:	d10b      	bne.n	800207c <HAL_ADC_ConfigChannel+0x110>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	e01d      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x14c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10b      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x136>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	e00a      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x14c>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d027      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d0:	f7ff fc52 	bl	8001978 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6919      	ldr	r1, [r3, #16]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	7e5b      	ldrb	r3, [r3, #25]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x17e>
 80020e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020e8:	e000      	b.n	80020ec <HAL_ADC_ConfigChannel+0x180>
 80020ea:	2300      	movs	r3, #0
 80020ec:	461a      	mov	r2, r3
 80020ee:	f7ff fc7c 	bl	80019ea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6919      	ldr	r1, [r3, #16]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	7e1b      	ldrb	r3, [r3, #24]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x19c>
 8002102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002106:	e000      	b.n	800210a <HAL_ADC_ConfigChannel+0x19e>
 8002108:	2300      	movs	r3, #0
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff fc54 	bl	80019b8 <LL_ADC_SetDataRightShift>
 8002110:	e047      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	069b      	lsls	r3, r3, #26
 8002122:	429a      	cmp	r2, r3
 8002124:	d107      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002134:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800213c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	069b      	lsls	r3, r3, #26
 8002146:	429a      	cmp	r2, r3
 8002148:	d107      	bne.n	800215a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002158:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	069b      	lsls	r3, r3, #26
 800216a:	429a      	cmp	r2, r3
 800216c:	d107      	bne.n	800217e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800217c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	069b      	lsls	r3, r3, #26
 800218e:	429a      	cmp	r2, r3
 8002190:	d107      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fd04 	bl	8001bb4 <LL_ADC_IsEnabled>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 820d 	bne.w	80025ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	461a      	mov	r2, r3
 80021c2:	f7ff fc85 	bl	8001ad0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_ADC_ConfigChannel+0x290>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f040 8133 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d110      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x298>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	bf94      	ite	ls
 80021f2:	2301      	movls	r3, #1
 80021f4:	2300      	movhi	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e01e      	b.n	8002238 <HAL_ADC_ConfigChannel+0x2cc>
 80021fa:	bf00      	nop
 80021fc:	47ff0000 	.word	0x47ff0000
 8002200:	5c001000 	.word	0x5c001000
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002214:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2b09      	cmp	r3, #9
 8002230:	bf94      	ite	ls
 8002232:	2301      	movls	r3, #1
 8002234:	2300      	movhi	r3, #0
 8002236:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002238:	2b00      	cmp	r3, #0
 800223a:	d079      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x2ec>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	e015      	b.n	8002284 <HAL_ADC_ConfigChannel+0x318>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002268:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800226a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x338>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	e017      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x368>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80022c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	ea42 0103 	orr.w	r1, r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x38e>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	051b      	lsls	r3, r3, #20
 80022f8:	e018      	b.n	800232c <HAL_ADC_ConfigChannel+0x3c0>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232c:	430b      	orrs	r3, r1
 800232e:	e07e      	b.n	800242e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x3e0>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	e015      	b.n	8002378 <HAL_ADC_ConfigChannel+0x40c>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x42c>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	e017      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x45c>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	61bb      	str	r3, [r7, #24]
  return result;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x488>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	3b1e      	subs	r3, #30
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f2:	e01b      	b.n	800242c <HAL_ADC_ConfigChannel+0x4c0>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	60fb      	str	r3, [r7, #12]
  return result;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e003      	b.n	8002418 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f003 021f 	and.w	r2, r3, #31
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	3b1e      	subs	r3, #30
 8002426:	051b      	lsls	r3, r3, #20
 8002428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242c:	430b      	orrs	r3, r1
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	4619      	mov	r1, r3
 8002434:	f7ff fb20 	bl	8001a78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f280 80c6 	bge.w	80025ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a67      	ldr	r2, [pc, #412]	; (80025e4 <HAL_ADC_ConfigChannel+0x678>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x4ea>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a65      	ldr	r2, [pc, #404]	; (80025e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x4ee>
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_ADC_ConfigChannel+0x680>)
 8002458:	e000      	b.n	800245c <HAL_ADC_ConfigChannel+0x4f0>
 800245a:	4b65      	ldr	r3, [pc, #404]	; (80025f0 <HAL_ADC_ConfigChannel+0x684>)
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fa7d 	bl	800195c <LL_ADC_GetCommonPathInternalCh>
 8002462:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <HAL_ADC_ConfigChannel+0x678>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x50c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a5d      	ldr	r2, [pc, #372]	; (80025e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d10e      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x52a>
 8002478:	485a      	ldr	r0, [pc, #360]	; (80025e4 <HAL_ADC_ConfigChannel+0x678>)
 800247a:	f7ff fb9b 	bl	8001bb4 <LL_ADC_IsEnabled>
 800247e:	4604      	mov	r4, r0
 8002480:	4859      	ldr	r0, [pc, #356]	; (80025e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002482:	f7ff fb97 	bl	8001bb4 <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	4323      	orrs	r3, r4
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	e008      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x53c>
 8002496:	4857      	ldr	r0, [pc, #348]	; (80025f4 <HAL_ADC_ConfigChannel+0x688>)
 8002498:	f7ff fb8c 	bl	8001bb4 <LL_ADC_IsEnabled>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d07d      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a51      	ldr	r2, [pc, #324]	; (80025f8 <HAL_ADC_ConfigChannel+0x68c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d130      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x5ac>
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d12b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <HAL_ADC_ConfigChannel+0x688>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f040 8081 	bne.w	80025ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a44      	ldr	r2, [pc, #272]	; (80025e4 <HAL_ADC_ConfigChannel+0x678>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x574>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a43      	ldr	r2, [pc, #268]	; (80025e8 <HAL_ADC_ConfigChannel+0x67c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x578>
 80024e0:	4a42      	ldr	r2, [pc, #264]	; (80025ec <HAL_ADC_ConfigChannel+0x680>)
 80024e2:	e000      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x57a>
 80024e4:	4a42      	ldr	r2, [pc, #264]	; (80025f0 <HAL_ADC_ConfigChannel+0x684>)
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f7ff fa21 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f4:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_ADC_ConfigChannel+0x690>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	4a41      	ldr	r2, [pc, #260]	; (8002600 <HAL_ADC_ConfigChannel+0x694>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	3301      	adds	r3, #1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002508:	e002      	b.n	8002510 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002516:	e05a      	b.n	80025ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a39      	ldr	r2, [pc, #228]	; (8002604 <HAL_ADC_ConfigChannel+0x698>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d11e      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x5f4>
 8002522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d119      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a30      	ldr	r2, [pc, #192]	; (80025f4 <HAL_ADC_ConfigChannel+0x688>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d14b      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2a      	ldr	r2, [pc, #168]	; (80025e4 <HAL_ADC_ConfigChannel+0x678>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_ADC_ConfigChannel+0x5de>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x5e2>
 800254a:	4a28      	ldr	r2, [pc, #160]	; (80025ec <HAL_ADC_ConfigChannel+0x680>)
 800254c:	e000      	b.n	8002550 <HAL_ADC_ConfigChannel+0x5e4>
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_ADC_ConfigChannel+0x684>)
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f7ff f9ec 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255e:	e036      	b.n	80025ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <HAL_ADC_ConfigChannel+0x69c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d131      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x662>
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12c      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_ADC_ConfigChannel+0x688>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d127      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_ADC_ConfigChannel+0x678>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x626>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <HAL_ADC_ConfigChannel+0x67c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x62a>
 8002592:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_ADC_ConfigChannel+0x680>)
 8002594:	e000      	b.n	8002598 <HAL_ADC_ConfigChannel+0x62c>
 8002596:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <HAL_ADC_ConfigChannel+0x684>)
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f7ff f9c8 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
 80025a6:	e012      	b.n	80025ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025ba:	e008      	b.n	80025ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3784      	adds	r7, #132	; 0x84
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40022100 	.word	0x40022100
 80025ec:	40022300 	.word	0x40022300
 80025f0:	58026300 	.word	0x58026300
 80025f4:	58026000 	.word	0x58026000
 80025f8:	cb840000 	.word	0xcb840000
 80025fc:	240002e8 	.word	0x240002e8
 8002600:	053e2d63 	.word	0x053e2d63
 8002604:	c7520000 	.word	0xc7520000
 8002608:	cfb80000 	.word	0xcfb80000

0800260c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <ADC_ConfigureBoostMode+0x1f8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <ADC_ConfigureBoostMode+0x1c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a79      	ldr	r2, [pc, #484]	; (8002808 <ADC_ConfigureBoostMode+0x1fc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d109      	bne.n	800263c <ADC_ConfigureBoostMode+0x30>
 8002628:	4b78      	ldr	r3, [pc, #480]	; (800280c <ADC_ConfigureBoostMode+0x200>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e008      	b.n	800264e <ADC_ConfigureBoostMode+0x42>
 800263c:	4b74      	ldr	r3, [pc, #464]	; (8002810 <ADC_ConfigureBoostMode+0x204>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01c      	beq.n	800268c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002652:	f002 fe4d 	bl	80052f0 <HAL_RCC_GetHCLKFreq>
 8002656:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002660:	d010      	beq.n	8002684 <ADC_ConfigureBoostMode+0x78>
 8002662:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002666:	d873      	bhi.n	8002750 <ADC_ConfigureBoostMode+0x144>
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d002      	beq.n	8002674 <ADC_ConfigureBoostMode+0x68>
 800266e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002672:	d16d      	bne.n	8002750 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	60fb      	str	r3, [r7, #12]
        break;
 8002682:	e068      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	60fb      	str	r3, [r7, #12]
        break;
 800268a:	e064      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800268c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	f004 f87c 	bl	8006790 <HAL_RCCEx_GetPeriphCLKFreq>
 8002698:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026a2:	d051      	beq.n	8002748 <ADC_ConfigureBoostMode+0x13c>
 80026a4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026a8:	d854      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026aa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026ae:	d047      	beq.n	8002740 <ADC_ConfigureBoostMode+0x134>
 80026b0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026b4:	d84e      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026b6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026ba:	d03d      	beq.n	8002738 <ADC_ConfigureBoostMode+0x12c>
 80026bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026c0:	d848      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c6:	d033      	beq.n	8002730 <ADC_ConfigureBoostMode+0x124>
 80026c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026cc:	d842      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026d2:	d029      	beq.n	8002728 <ADC_ConfigureBoostMode+0x11c>
 80026d4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026d8:	d83c      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026da:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80026de:	d01a      	beq.n	8002716 <ADC_ConfigureBoostMode+0x10a>
 80026e0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80026e4:	d836      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026e6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80026ea:	d014      	beq.n	8002716 <ADC_ConfigureBoostMode+0x10a>
 80026ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80026f0:	d830      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f6:	d00e      	beq.n	8002716 <ADC_ConfigureBoostMode+0x10a>
 80026f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026fc:	d82a      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 80026fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002702:	d008      	beq.n	8002716 <ADC_ConfigureBoostMode+0x10a>
 8002704:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002708:	d824      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x148>
 800270a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800270e:	d002      	beq.n	8002716 <ADC_ConfigureBoostMode+0x10a>
 8002710:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002714:	d11e      	bne.n	8002754 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0c9b      	lsrs	r3, r3, #18
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	60fb      	str	r3, [r7, #12]
        break;
 8002726:	e016      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
        break;
 800272e:	e012      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	60fb      	str	r3, [r7, #12]
        break;
 8002736:	e00e      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	099b      	lsrs	r3, r3, #6
 800273c:	60fb      	str	r3, [r7, #12]
        break;
 800273e:	e00a      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	09db      	lsrs	r3, r3, #7
 8002744:	60fb      	str	r3, [r7, #12]
        break;
 8002746:	e006      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	60fb      	str	r3, [r7, #12]
        break;
 800274e:	e002      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002750:	bf00      	nop
 8002752:	e000      	b.n	8002756 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002754:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002756:	f7ff f8b9 	bl	80018cc <HAL_GetREVID>
 800275a:	4603      	mov	r3, r0
 800275c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002760:	4293      	cmp	r3, r2
 8002762:	d815      	bhi.n	8002790 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <ADC_ConfigureBoostMode+0x208>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d908      	bls.n	800277e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800277c:	e03e      	b.n	80027fc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278c:	609a      	str	r2, [r3, #8]
}
 800278e:	e035      	b.n	80027fc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <ADC_ConfigureBoostMode+0x20c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d808      	bhi.n	80027b0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027ac:	609a      	str	r2, [r3, #8]
}
 80027ae:	e025      	b.n	80027fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <ADC_ConfigureBoostMode+0x210>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d80a      	bhi.n	80027ce <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ca:	609a      	str	r2, [r3, #8]
}
 80027cc:	e016      	b.n	80027fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a13      	ldr	r2, [pc, #76]	; (8002820 <ADC_ConfigureBoostMode+0x214>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d80a      	bhi.n	80027ec <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e8:	609a      	str	r2, [r3, #8]
}
 80027ea:	e007      	b.n	80027fc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40022000 	.word	0x40022000
 8002808:	40022100 	.word	0x40022100
 800280c:	40022300 	.word	0x40022300
 8002810:	58026300 	.word	0x58026300
 8002814:	01312d00 	.word	0x01312d00
 8002818:	005f5e10 	.word	0x005f5e10
 800281c:	00bebc20 	.word	0x00bebc20
 8002820:	017d7840 	.word	0x017d7840

08002824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <__NVIC_SetPriorityGrouping+0x40>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	4313      	orrs	r3, r2
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x40>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	05fa0000 	.word	0x05fa0000

0800286c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <__NVIC_GetPriorityGrouping+0x18>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002896:	2b00      	cmp	r3, #0
 8002898:	db0b      	blt.n	80028b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	4907      	ldr	r1, [pc, #28]	; (80028c0 <__NVIC_EnableIRQ+0x38>)
 80028a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2001      	movs	r0, #1
 80028aa:	fa00 f202 	lsl.w	r2, r0, r2
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002990:	d301      	bcc.n	8002996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <SysTick_Config+0x40>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299e:	210f      	movs	r1, #15
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f7ff ff8e 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SysTick_Config+0x40>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <SysTick_Config+0x40>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff29 	bl	8002824 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff40 	bl	800286c <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff90 	bl	8002918 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5f 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff33 	bl	8002888 <__NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffa4 	bl	8002980 <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a52:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_GPIO_Init+0x234>)
 8002a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a56:	e194      	b.n	8002d82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8186 	beq.w	8002d7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d005      	beq.n	8002a88 <HAL_GPIO_Init+0x44>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d130      	bne.n	8002aea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002abe:	2201      	movs	r2, #1
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 0201 	and.w	r2, r3, #1
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d017      	beq.n	8002b26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d123      	bne.n	8002b7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	220f      	movs	r2, #15
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	69b9      	ldr	r1, [r7, #24]
 8002b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2203      	movs	r2, #3
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80e0 	beq.w	8002d7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_GPIO_Init+0x238>)
 8002bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bc2:	4a2e      	ldr	r2, [pc, #184]	; (8002c7c <HAL_GPIO_Init+0x238>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_GPIO_Init+0x238>)
 8002bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bda:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <HAL_GPIO_Init+0x23c>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <HAL_GPIO_Init+0x240>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d052      	beq.n	8002cac <HAL_GPIO_Init+0x268>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_GPIO_Init+0x244>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d031      	beq.n	8002c72 <HAL_GPIO_Init+0x22e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_GPIO_Init+0x248>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d02b      	beq.n	8002c6e <HAL_GPIO_Init+0x22a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_GPIO_Init+0x24c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d025      	beq.n	8002c6a <HAL_GPIO_Init+0x226>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_GPIO_Init+0x250>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <HAL_GPIO_Init+0x222>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_GPIO_Init+0x254>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d019      	beq.n	8002c62 <HAL_GPIO_Init+0x21e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <HAL_GPIO_Init+0x258>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x21a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_GPIO_Init+0x25c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x216>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_GPIO_Init+0x260>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x212>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_GPIO_Init+0x264>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x20e>
 8002c4e:	2309      	movs	r3, #9
 8002c50:	e02d      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c52:	230a      	movs	r3, #10
 8002c54:	e02b      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c56:	2308      	movs	r3, #8
 8002c58:	e029      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e027      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c5e:	2306      	movs	r3, #6
 8002c60:	e025      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c62:	2305      	movs	r3, #5
 8002c64:	e023      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c66:	2304      	movs	r3, #4
 8002c68:	e021      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e01f      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e01d      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e01b      	b.n	8002cae <HAL_GPIO_Init+0x26a>
 8002c76:	bf00      	nop
 8002c78:	58000080 	.word	0x58000080
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58000400 	.word	0x58000400
 8002c84:	58020000 	.word	0x58020000
 8002c88:	58020400 	.word	0x58020400
 8002c8c:	58020800 	.word	0x58020800
 8002c90:	58020c00 	.word	0x58020c00
 8002c94:	58021000 	.word	0x58021000
 8002c98:	58021400 	.word	0x58021400
 8002c9c:	58021800 	.word	0x58021800
 8002ca0:	58021c00 	.word	0x58021c00
 8002ca4:	58022000 	.word	0x58022000
 8002ca8:	58022400 	.word	0x58022400
 8002cac:	2300      	movs	r3, #0
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	f002 0203 	and.w	r2, r2, #3
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cbe:	4938      	ldr	r1, [pc, #224]	; (8002da0 <HAL_GPIO_Init+0x35c>)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f ae63 	bne.w	8002a58 <HAL_GPIO_Init+0x14>
  }
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	3724      	adds	r7, #36	; 0x24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	58000400 	.word	0x58000400

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002dc0:	e003      	b.n	8002dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd8:	b08f      	sub	sp, #60	; 0x3c
 8002dda:	af0a      	add	r7, sp, #40	; 0x28
 8002ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e116      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f008 fe40 	bl	800ba88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f005 fa29 	bl	800827e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	687e      	ldr	r6, [r7, #4]
 8002e34:	466d      	mov	r5, sp
 8002e36:	f106 0410 	add.w	r4, r6, #16
 8002e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e4a:	1d33      	adds	r3, r6, #4
 8002e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f005 f8f4 	bl	800803c <USB_CoreInit>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0d7      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f005 fa17 	bl	80082a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	e04a      	b.n	8002f0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	333d      	adds	r3, #61	; 0x3d
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	b298      	uxth	r0, r3
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3356      	adds	r3, #86	; 0x56
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3340      	adds	r3, #64	; 0x40
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3344      	adds	r3, #68	; 0x44
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3348      	adds	r3, #72	; 0x48
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334c      	adds	r3, #76	; 0x4c
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3af      	bcc.n	8002e78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e044      	b.n	8002fa8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d3b5      	bcc.n	8002f1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	687e      	ldr	r6, [r7, #4]
 8002fba:	466d      	mov	r5, sp
 8002fbc:	f106 0410 	add.w	r4, r6, #16
 8002fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd0:	1d33      	adds	r3, r6, #4
 8002fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd4:	6838      	ldr	r0, [r7, #0]
 8002fd6:	f005 f9af 	bl	8008338 <USB_DevInit>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e014      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d102      	bne.n	800300a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f001 f96f 	bl	80042e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f006 f9f1 	bl	80093f6 <USB_DevDisconnect>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_Start+0x1c>
 8003036:	2302      	movs	r3, #2
 8003038:	e022      	b.n	8003080 <HAL_PCD_Start+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f005 f8f8 	bl	800825c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f006 f99f 	bl	80093b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08d      	sub	sp, #52	; 0x34
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f006 fa5d 	bl	800955e <USB_GetMode>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 84b7 	bne.w	8003a1a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f006 f9c1 	bl	8009438 <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 84ad 	beq.w	8003a18 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f006 f9ae 	bl	8009438 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d107      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f002 0202 	and.w	r2, r2, #2
 80030f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f006 f99c 	bl	8009438 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	d161      	bne.n	80031ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0210 	bic.w	r2, r2, #16
 8003118:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	3304      	adds	r3, #4
 8003138:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	0c5b      	lsrs	r3, r3, #17
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	2b02      	cmp	r3, #2
 8003144:	d124      	bne.n	8003190 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d035      	beq.n	80031be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800315c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003160:	b29b      	uxth	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	6a38      	ldr	r0, [r7, #32]
 8003166:	f005 ffd3 	bl	8009110 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003176:	441a      	add	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003188:	441a      	add	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	615a      	str	r2, [r3, #20]
 800318e:	e016      	b.n	80031be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	0c5b      	lsrs	r3, r3, #17
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2b06      	cmp	r3, #6
 800319a:	d110      	bne.n	80031be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a2:	2208      	movs	r2, #8
 80031a4:	4619      	mov	r1, r3
 80031a6:	6a38      	ldr	r0, [r7, #32]
 80031a8:	f005 ffb2 	bl	8009110 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b8:	441a      	add	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0210 	orr.w	r2, r2, #16
 80031cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f006 f930 	bl	8009438 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e2:	f040 80a7 	bne.w	8003334 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f006 f935 	bl	800945e <USB_ReadDevAllOutEpInterrupt>
 80031f4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031f6:	e099      	b.n	800332c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 808e 	beq.w	8003320 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f006 f959 	bl	80094c6 <USB_ReadDevOutEPInterrupt>
 8003214:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	2301      	movs	r3, #1
 8003230:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fed1 	bl	8003fdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00c      	beq.n	800325e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	2308      	movs	r3, #8
 8003254:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 ffa7 	bl	80041ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	2310      	movs	r3, #16
 8003278:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d030      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d109      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	78db      	ldrb	r3, [r3, #3]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d108      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f008 fd00 	bl	800bcd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	2302      	movs	r3, #2
 80032e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	2320      	movs	r3, #32
 8003300:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800331e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	3301      	adds	r3, #1
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	f47f af62 	bne.w	80031f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f006 f87d 	bl	8009438 <USB_ReadInterrupts>
 800333e:	4603      	mov	r3, r0
 8003340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003348:	f040 80db 	bne.w	8003502 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f006 f89e 	bl	8009492 <USB_ReadDevAllInEpInterrupt>
 8003356:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800335c:	e0cd      	b.n	80034fa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80c2 	beq.w	80034ee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f006 f8c4 	bl	8009502 <USB_ReadDevInEPInterrupt>
 800337a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d057      	beq.n	8003436 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2201      	movs	r2, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69f9      	ldr	r1, [r7, #28]
 80033a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033a6:	4013      	ands	r3, r2
 80033a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b6:	461a      	mov	r2, r3
 80033b8:	2301      	movs	r3, #1
 80033ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d132      	bne.n	800342a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3348      	adds	r3, #72	; 0x48
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4403      	add	r3, r0
 80033e4:	3344      	adds	r3, #68	; 0x44
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4419      	add	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4403      	add	r3, r0
 80033f8:	3348      	adds	r3, #72	; 0x48
 80033fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d113      	bne.n	800342a <HAL_PCD_IRQHandler+0x3a2>
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	334c      	adds	r3, #76	; 0x4c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003422:	461a      	mov	r2, r3
 8003424:	2101      	movs	r1, #1
 8003426:	f006 f8cd 	bl	80095c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	b2db      	uxtb	r3, r3
 800342e:	4619      	mov	r1, r3
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f008 fbca 	bl	800bbca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344c:	461a      	mov	r2, r3
 800344e:	2308      	movs	r3, #8
 8003450:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003468:	461a      	mov	r2, r3
 800346a:	2310      	movs	r3, #16
 800346c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003484:	461a      	mov	r2, r3
 8003486:	2340      	movs	r3, #64	; 0x40
 8003488:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003496:	6a38      	ldr	r0, [r7, #32]
 8003498:	f005 f8ac 	bl	80085f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	3338      	adds	r3, #56	; 0x38
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	78db      	ldrb	r3, [r3, #3]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d108      	bne.n	80034ca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f008 fc17 	bl	800bcf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	461a      	mov	r2, r3
 80034d8:	2302      	movs	r3, #2
 80034da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fcea 	bl	8003ec2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	085b      	lsrs	r3, r3, #1
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f af2e 	bne.w	800335e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f005 ff96 	bl	8009438 <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003516:	d122      	bne.n	800355e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003532:	2b01      	cmp	r3, #1
 8003534:	d108      	bne.n	8003548 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800353e:	2100      	movs	r1, #0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fef5 	bl	8004330 <HAL_PCDEx_LPM_Callback>
 8003546:	e002      	b.n	800354e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f008 fbb5 	bl	800bcb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800355c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f005 ff68 	bl	8009438 <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003572:	d112      	bne.n	800359a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d102      	bne.n	800358a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f008 fb71 	bl	800bc6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003598:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f005 ff4a 	bl	8009438 <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ae:	d121      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80035be:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d111      	bne.n	80035ee <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	f003 020f 	and.w	r2, r3, #15
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035e4:	2101      	movs	r1, #1
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fea2 	bl	8004330 <HAL_PCDEx_LPM_Callback>
 80035ec:	e002      	b.n	80035f4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f008 fb3c 	bl	800bc6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f005 ff1d 	bl	8009438 <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	f040 80b7 	bne.w	800377a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2110      	movs	r1, #16
 8003626:	4618      	mov	r0, r3
 8003628:	f004 ffe4 	bl	80085f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	e046      	b.n	80036c0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	461a      	mov	r2, r3
 8003640:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003644:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003656:	0151      	lsls	r1, r2, #5
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	440a      	add	r2, r1
 800365c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003660:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003664:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003678:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	440a      	add	r2, r1
 8003690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003698:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036aa:	0151      	lsls	r1, r2, #5
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	440a      	add	r2, r1
 80036b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	3301      	adds	r3, #1
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3b3      	bcc.n	8003632 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f6:	f043 030b 	orr.w	r3, r3, #11
 80036fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370c:	f043 030b 	orr.w	r3, r3, #11
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	e015      	b.n	8003740 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	4619      	mov	r1, r3
 8003724:	f242 032b 	movw	r3, #8235	; 0x202b
 8003728:	4313      	orrs	r3, r2
 800372a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373a:	f043 030b 	orr.w	r3, r3, #11
 800373e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003752:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003764:	461a      	mov	r2, r3
 8003766:	f005 ff2d 	bl	80095c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f005 fe5a 	bl	8009438 <USB_ReadInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378e:	d124      	bne.n	80037da <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f005 fef1 	bl	800957c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 ffa5 	bl	80086ee <USB_GetDevSpeed>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681c      	ldr	r4, [r3, #0]
 80037b0:	f001 fd9e 	bl	80052f0 <HAL_RCC_GetHCLKFreq>
 80037b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	4620      	mov	r0, r4
 80037c0:	f004 fcaa 	bl	8008118 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f008 fa28 	bl	800bc1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f005 fe2a 	bl	8009438 <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d10a      	bne.n	8003804 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f008 fa05 	bl	800bbfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f002 0208 	and.w	r2, r2, #8
 8003802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f005 fe15 	bl	8009438 <USB_ReadInterrupts>
 800380e:	4603      	mov	r3, r0
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d122      	bne.n	800385e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003824:	2301      	movs	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	e014      	b.n	8003854 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fb09 	bl	8003e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	3301      	adds	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	429a      	cmp	r2, r3
 800385c:	d3e5      	bcc.n	800382a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f005 fde8 	bl	8009438 <USB_ReadInterrupts>
 8003868:	4603      	mov	r3, r0
 800386a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003872:	d13b      	bne.n	80038ec <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003874:	2301      	movs	r3, #1
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e02b      	b.n	80038d2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3340      	adds	r3, #64	; 0x40
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d115      	bne.n	80038cc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da12      	bge.n	80038cc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	333f      	adds	r3, #63	; 0x3f
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 faca 	bl	8003e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	3301      	adds	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	429a      	cmp	r2, r3
 80038da:	d3ce      	bcc.n	800387a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f005 fda1 	bl	8009438 <USB_ReadInterrupts>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003900:	d155      	bne.n	80039ae <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003902:	2301      	movs	r3, #1
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	e045      	b.n	8003994 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d12e      	bne.n	800398e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003930:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	da2b      	bge.n	800398e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003942:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003946:	429a      	cmp	r2, r3
 8003948:	d121      	bne.n	800398e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800398a:	6053      	str	r3, [r2, #4]
            break;
 800398c:	e007      	b.n	800399e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	3301      	adds	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	429a      	cmp	r2, r3
 800399c:	d3b4      	bcc.n	8003908 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f005 fd40 	bl	8009438 <USB_ReadInterrupts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d10a      	bne.n	80039da <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f008 f9a9 	bl	800bd1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f005 fd2a 	bl	8009438 <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d115      	bne.n	8003a1a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f008 f999 	bl	800bd38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	e000      	b.n	8003a1a <HAL_PCD_IRQHandler+0x992>
      return;
 8003a18:	bf00      	nop
    }
  }
}
 8003a1a:	3734      	adds	r7, #52	; 0x34
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}

08003a20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_PCD_SetAddress+0x1a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e013      	b.n	8003a62 <HAL_PCD_SetAddress+0x42>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f005 fc88 	bl	8009368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	4608      	mov	r0, r1
 8003a74:	4611      	mov	r1, r2
 8003a76:	461a      	mov	r2, r3
 8003a78:	4603      	mov	r3, r0
 8003a7a:	70fb      	strb	r3, [r7, #3]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	803b      	strh	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da0f      	bge.n	8003ab0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3338      	adds	r3, #56	; 0x38
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	705a      	strb	r2, [r3, #1]
 8003aae:	e00f      	b.n	8003ad0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 020f 	and.w	r2, r3, #15
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003adc:	883a      	ldrh	r2, [r7, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	78ba      	ldrb	r2, [r7, #2]
 8003ae6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003afa:	78bb      	ldrb	r3, [r7, #2]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d102      	bne.n	8003b06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_PCD_EP_Open+0xaa>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e00e      	b.n	8003b32 <HAL_PCD_EP_Open+0xc8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68f9      	ldr	r1, [r7, #12]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fe08 	bl	8008738 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b30:	7afb      	ldrb	r3, [r7, #11]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da0f      	bge.n	8003b6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3338      	adds	r3, #56	; 0x38
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	705a      	strb	r2, [r3, #1]
 8003b6c:	e00f      	b.n	8003b8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4413      	add	r3, r2
 8003b84:	3304      	adds	r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_PCD_EP_Close+0x6e>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e00e      	b.n	8003bc6 <HAL_PCD_EP_Close+0x8c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 fe46 	bl	8008848 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bde:	7afb      	ldrb	r3, [r7, #11]
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2200      	movs	r2, #0
 8003c08:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c10:	7afb      	ldrb	r3, [r7, #11]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	f004 fee2 	bl	8008a00 <USB_EPStartXfer>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003c68:	681b      	ldr	r3, [r3, #0]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	460b      	mov	r3, r1
 8003c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	3338      	adds	r3, #56	; 0x38
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	f004 fe8f 	bl	8008a00 <USB_EPStartXfer>

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d901      	bls.n	8003d0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e050      	b.n	8003dac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da0f      	bge.n	8003d32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f003 020f 	and.w	r2, r3, #15
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3338      	adds	r3, #56	; 0x38
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	3304      	adds	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	705a      	strb	r2, [r3, #1]
 8003d30:	e00d      	b.n	8003d4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	3304      	adds	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_PCD_EP_SetStall+0x82>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e01e      	b.n	8003dac <HAL_PCD_EP_SetStall+0xc0>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f005 fa1f 	bl	80091c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	b2d9      	uxtb	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f005 fc11 	bl	80095c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d901      	bls.n	8003dd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e042      	b.n	8003e58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da0f      	bge.n	8003dfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3338      	adds	r3, #56	; 0x38
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	705a      	strb	r2, [r3, #1]
 8003df8:	e00f      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	3304      	adds	r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_PCD_EP_ClrStall+0x86>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e00e      	b.n	8003e58 <HAL_PCD_EP_ClrStall+0xa4>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f005 fa27 	bl	800929c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da0c      	bge.n	8003e8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	3338      	adds	r3, #56	; 0x38
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e00c      	b.n	8003ea8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	f003 020f 	and.w	r2, r3, #15
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 f846 	bl	8008f40 <USB_EPStopXfer>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08a      	sub	sp, #40	; 0x28
 8003ec6:	af02      	add	r7, sp, #8
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	3338      	adds	r3, #56	; 0x38
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d901      	bls.n	8003efa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06c      	b.n	8003fd4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d902      	bls.n	8003f16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3303      	adds	r3, #3
 8003f1a:	089b      	lsrs	r3, r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f1e:	e02b      	b.n	8003f78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d902      	bls.n	8003f3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	3303      	adds	r3, #3
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68d9      	ldr	r1, [r3, #12]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f005 f89a 	bl	8009094 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	441a      	add	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	441a      	add	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d809      	bhi.n	8003fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d203      	bcs.n	8003fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1be      	bne.n	8003f20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d811      	bhi.n	8003fd2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	6939      	ldr	r1, [r7, #16]
 8003fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fce:	4013      	ands	r3, r2
 8003fd0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	333c      	adds	r3, #60	; 0x3c
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d17b      	bne.n	800410a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4a61      	ldr	r2, [pc, #388]	; (80041a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	f240 80b9 	bls.w	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80b3 	beq.w	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	461a      	mov	r2, r3
 8004040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004044:	6093      	str	r3, [r2, #8]
 8004046:	e0a7      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	2320      	movs	r3, #32
 8004062:	6093      	str	r3, [r2, #8]
 8004064:	e098      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8093 	bne.w	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d90f      	bls.n	800409a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	e07e      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	3304      	adds	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	0159      	lsls	r1, r3, #5
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d114      	bne.n	80040fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040e4:	461a      	mov	r2, r3
 80040e6:	2101      	movs	r1, #1
 80040e8:	f005 fa6c 	bl	80095c4 <USB_EP0_OutStart>
 80040ec:	e006      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f007 fd46 	bl	800bb94 <HAL_PCD_DataOutStageCallback>
 8004108:	e046      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d124      	bne.n	800415c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	461a      	mov	r2, r3
 800412a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412e:	6093      	str	r3, [r2, #8]
 8004130:	e032      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	2320      	movs	r3, #32
 800414c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f007 fd1d 	bl	800bb94 <HAL_PCD_DataOutStageCallback>
 800415a:	e01d      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d114      	bne.n	800418c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004184:	461a      	mov	r2, r3
 8004186:	2100      	movs	r1, #0
 8004188:	f005 fa1c 	bl	80095c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f007 fcfe 	bl	800bb94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	4f54300a 	.word	0x4f54300a
 80041a8:	4f54310a 	.word	0x4f54310a

080041ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	333c      	adds	r3, #60	; 0x3c
 80041c4:	3304      	adds	r3, #4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <PCD_EP_OutSetupPacket_int+0x88>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d90e      	bls.n	8004200 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f007 fcb5 	bl	800bb70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <PCD_EP_OutSetupPacket_int+0x88>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d90c      	bls.n	8004228 <PCD_EP_OutSetupPacket_int+0x7c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d108      	bne.n	8004228 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004220:	461a      	mov	r2, r3
 8004222:	2101      	movs	r1, #1
 8004224:	f005 f9ce 	bl	80095c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	4f54300a 	.word	0x4f54300a

08004238 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
 8004244:	4613      	mov	r3, r2
 8004246:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004256:	883b      	ldrh	r3, [r7, #0]
 8004258:	0419      	lsls	r1, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	430a      	orrs	r2, r1
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e028      	b.n	80042b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4413      	add	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	e00d      	b.n	8004296 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	3340      	adds	r3, #64	; 0x40
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	3301      	adds	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	7bfa      	ldrb	r2, [r7, #15]
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	3b01      	subs	r3, #1
 800429c:	429a      	cmp	r2, r3
 800429e:	d3ec      	bcc.n	800427a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042a0:	883b      	ldrh	r3, [r7, #0]
 80042a2:	0418      	lsls	r0, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6819      	ldr	r1, [r3, #0]
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4302      	orrs	r2, r0
 80042b0:	3340      	adds	r3, #64	; 0x40
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_PCDEx_ActivateLPM+0x44>)
 8004318:	4313      	orrs	r3, r2
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	10000003 	.word	0x10000003

08004330 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d00a      	beq.n	8004372 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800435c:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <HAL_PWREx_ConfigSupply+0x70>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	429a      	cmp	r2, r3
 8004368:	d001      	beq.n	800436e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e01f      	b.n	80043ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e01d      	b.n	80043ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f023 0207 	bic.w	r2, r3, #7
 800437a:	490f      	ldr	r1, [pc, #60]	; (80043b8 <HAL_PWREx_ConfigSupply+0x70>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4313      	orrs	r3, r2
 8004380:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004382:	f7fd fa73 	bl	800186c <HAL_GetTick>
 8004386:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004388:	e009      	b.n	800439e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800438a:	f7fd fa6f 	bl	800186c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004398:	d901      	bls.n	800439e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e007      	b.n	80043ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_PWREx_ConfigSupply+0x70>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	d1ee      	bne.n	800438a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	58024800 	.word	0x58024800

080043bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80043c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	58024800 	.word	0x58024800

080043dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08c      	sub	sp, #48	; 0x30
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f000 bc48 	b.w	8004c80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8088 	beq.w	800450e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fe:	4b99      	ldr	r3, [pc, #612]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004408:	4b96      	ldr	r3, [pc, #600]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	2b10      	cmp	r3, #16
 8004412:	d007      	beq.n	8004424 <HAL_RCC_OscConfig+0x48>
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	2b18      	cmp	r3, #24
 8004418:	d111      	bne.n	800443e <HAL_RCC_OscConfig+0x62>
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d10c      	bne.n	800443e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	4b8f      	ldr	r3, [pc, #572]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d06d      	beq.n	800450c <HAL_RCC_OscConfig+0x130>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d169      	bne.n	800450c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f000 bc21 	b.w	8004c80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x7a>
 8004448:	4b86      	ldr	r3, [pc, #536]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a85      	ldr	r2, [pc, #532]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800444e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e02e      	b.n	80044b4 <HAL_RCC_OscConfig+0xd8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x9c>
 800445e:	4b81      	ldr	r3, [pc, #516]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a80      	ldr	r2, [pc, #512]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b7e      	ldr	r3, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7d      	ldr	r2, [pc, #500]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e01d      	b.n	80044b4 <HAL_RCC_OscConfig+0xd8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0xc0>
 8004482:	4b78      	ldr	r3, [pc, #480]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a77      	ldr	r2, [pc, #476]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b75      	ldr	r3, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a74      	ldr	r2, [pc, #464]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0xd8>
 800449c:	4b71      	ldr	r3, [pc, #452]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a70      	ldr	r2, [pc, #448]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b6e      	ldr	r3, [pc, #440]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a6d      	ldr	r2, [pc, #436]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80044ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fd f9d6 	bl	800186c <HAL_GetTick>
 80044c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fd f9d2 	bl	800186c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e3d4      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0xe8>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd f9c2 	bl	800186c <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd f9be 	bl	800186c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e3c0      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044fe:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x110>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80ca 	beq.w	80046b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451c:	4b51      	ldr	r3, [pc, #324]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004524:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004526:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <HAL_RCC_OscConfig+0x166>
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	2b18      	cmp	r3, #24
 8004536:	d156      	bne.n	80045e6 <HAL_RCC_OscConfig+0x20a>
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d151      	bne.n	80045e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004542:	4b48      	ldr	r3, [pc, #288]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_RCC_OscConfig+0x17e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e392      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800455a:	4b42      	ldr	r3, [pc, #264]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 0219 	bic.w	r2, r3, #25
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	493f      	ldr	r1, [pc, #252]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fd f97e 	bl	800186c <HAL_GetTick>
 8004570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004574:	f7fd f97a 	bl	800186c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e37c      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004592:	f7fd f99b 	bl	80018cc <HAL_GetREVID>
 8004596:	4603      	mov	r3, r0
 8004598:	f241 0203 	movw	r2, #4099	; 0x1003
 800459c:	4293      	cmp	r3, r2
 800459e:	d817      	bhi.n	80045d0 <HAL_RCC_OscConfig+0x1f4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d108      	bne.n	80045ba <HAL_RCC_OscConfig+0x1de>
 80045a8:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045b0:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b8:	e07a      	b.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	031b      	lsls	r3, r3, #12
 80045c8:	4926      	ldr	r1, [pc, #152]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ce:	e06f      	b.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	4921      	ldr	r1, [pc, #132]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e4:	e064      	b.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d047      	beq.n	800467e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 0219 	bic.w	r2, r3, #25
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	491a      	ldr	r1, [pc, #104]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f934 	bl	800186c <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004608:	f7fd f930 	bl	800186c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e332      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	f7fd f951 	bl	80018cc <HAL_GetREVID>
 800462a:	4603      	mov	r3, r0
 800462c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004630:	4293      	cmp	r3, r2
 8004632:	d819      	bhi.n	8004668 <HAL_RCC_OscConfig+0x28c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d108      	bne.n	800464e <HAL_RCC_OscConfig+0x272>
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004644:	4a07      	ldr	r2, [pc, #28]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464a:	6053      	str	r3, [r2, #4]
 800464c:	e030      	b.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	031b      	lsls	r3, r3, #12
 800465c:	4901      	ldr	r1, [pc, #4]	; (8004664 <HAL_RCC_OscConfig+0x288>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
 8004662:	e025      	b.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
 8004664:	58024400 	.word	0x58024400
 8004668:	4b9a      	ldr	r3, [pc, #616]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	4997      	ldr	r1, [pc, #604]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	e018      	b.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467e:	4b95      	ldr	r3, [pc, #596]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a94      	ldr	r2, [pc, #592]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd f8ef 	bl	800186c <HAL_GetTick>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004692:	f7fd f8eb 	bl	800186c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e2ed      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046a4:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f0      	bne.n	8004692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80a9 	beq.w	8004810 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046c8:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d007      	beq.n	80046e4 <HAL_RCC_OscConfig+0x308>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b18      	cmp	r3, #24
 80046d8:	d13a      	bne.n	8004750 <HAL_RCC_OscConfig+0x374>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d135      	bne.n	8004750 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046e4:	4b7b      	ldr	r3, [pc, #492]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_OscConfig+0x320>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e2c1      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046fc:	f7fd f8e6 	bl	80018cc <HAL_GetREVID>
 8004700:	4603      	mov	r3, r0
 8004702:	f241 0203 	movw	r2, #4099	; 0x1003
 8004706:	4293      	cmp	r3, r2
 8004708:	d817      	bhi.n	800473a <HAL_RCC_OscConfig+0x35e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2b20      	cmp	r3, #32
 8004710:	d108      	bne.n	8004724 <HAL_RCC_OscConfig+0x348>
 8004712:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800471a:	4a6e      	ldr	r2, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800471c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004720:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004722:	e075      	b.n	8004810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004724:	4b6b      	ldr	r3, [pc, #428]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	069b      	lsls	r3, r3, #26
 8004732:	4968      	ldr	r1, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004738:	e06a      	b.n	8004810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800473a:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	061b      	lsls	r3, r3, #24
 8004748:	4962      	ldr	r1, [pc, #392]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800474e:	e05f      	b.n	8004810 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d042      	beq.n	80047de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004758:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd f882 	bl	800186c <HAL_GetTick>
 8004768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800476c:	f7fd f87e 	bl	800186c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e280      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800477e:	4b55      	ldr	r3, [pc, #340]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800478a:	f7fd f89f 	bl	80018cc <HAL_GetREVID>
 800478e:	4603      	mov	r3, r0
 8004790:	f241 0203 	movw	r2, #4099	; 0x1003
 8004794:	4293      	cmp	r3, r2
 8004796:	d817      	bhi.n	80047c8 <HAL_RCC_OscConfig+0x3ec>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	2b20      	cmp	r3, #32
 800479e:	d108      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3d6>
 80047a0:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047a8:	4a4a      	ldr	r2, [pc, #296]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ae:	6053      	str	r3, [r2, #4]
 80047b0:	e02e      	b.n	8004810 <HAL_RCC_OscConfig+0x434>
 80047b2:	4b48      	ldr	r3, [pc, #288]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	069b      	lsls	r3, r3, #26
 80047c0:	4944      	ldr	r1, [pc, #272]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
 80047c6:	e023      	b.n	8004810 <HAL_RCC_OscConfig+0x434>
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	493f      	ldr	r1, [pc, #252]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	60cb      	str	r3, [r1, #12]
 80047dc:	e018      	b.n	8004810 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047de:	4b3d      	ldr	r3, [pc, #244]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a3c      	ldr	r2, [pc, #240]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80047e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fd f83f 	bl	800186c <HAL_GetTick>
 80047ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047f2:	f7fd f83b 	bl	800186c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e23d      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d036      	beq.n	800488a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d019      	beq.n	8004858 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004828:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd f81c 	bl	800186c <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004838:	f7fd f818 	bl	800186c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e21a      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800484a:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800484c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x45c>
 8004856:	e018      	b.n	800488a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485c:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd f802 	bl	800186c <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486c:	f7fc fffe 	bl	800186c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e200      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d039      	beq.n	800490a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048aa:	f7fc ffdf 	bl	800186c <HAL_GetTick>
 80048ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b2:	f7fc ffdb 	bl	800186c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e1dd      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_RCC_OscConfig+0x4f8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4d6>
 80048d0:	e01b      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048d8:	4b9b      	ldr	r3, [pc, #620]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a9a      	ldr	r2, [pc, #616]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 80048de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048e4:	f7fc ffc2 	bl	800186c <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ec:	f7fc ffbe 	bl	800186c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1c0      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048fe:	4b92      	ldr	r3, [pc, #584]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8081 	beq.w	8004a1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004918:	4b8c      	ldr	r3, [pc, #560]	; (8004b4c <HAL_RCC_OscConfig+0x770>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a8b      	ldr	r2, [pc, #556]	; (8004b4c <HAL_RCC_OscConfig+0x770>)
 800491e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004924:	f7fc ffa2 	bl	800186c <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492c:	f7fc ff9e 	bl	800186c <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e1a0      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493e:	4b83      	ldr	r3, [pc, #524]	; (8004b4c <HAL_RCC_OscConfig+0x770>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d106      	bne.n	8004960 <HAL_RCC_OscConfig+0x584>
 8004952:	4b7d      	ldr	r3, [pc, #500]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a7c      	ldr	r2, [pc, #496]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
 800495e:	e02d      	b.n	80049bc <HAL_RCC_OscConfig+0x5e0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10c      	bne.n	8004982 <HAL_RCC_OscConfig+0x5a6>
 8004968:	4b77      	ldr	r3, [pc, #476]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a76      	ldr	r2, [pc, #472]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	4b74      	ldr	r3, [pc, #464]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a73      	ldr	r2, [pc, #460]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 800497a:	f023 0304 	bic.w	r3, r3, #4
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
 8004980:	e01c      	b.n	80049bc <HAL_RCC_OscConfig+0x5e0>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b05      	cmp	r3, #5
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x5c8>
 800498a:	4b6f      	ldr	r3, [pc, #444]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a6e      	ldr	r2, [pc, #440]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
 8004996:	4b6c      	ldr	r3, [pc, #432]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4a6b      	ldr	r2, [pc, #428]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0x5e0>
 80049a4:	4b68      	ldr	r3, [pc, #416]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4a67      	ldr	r2, [pc, #412]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	6713      	str	r3, [r2, #112]	; 0x70
 80049b0:	4b65      	ldr	r3, [pc, #404]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a64      	ldr	r2, [pc, #400]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 80049b6:	f023 0304 	bic.w	r3, r3, #4
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fc ff52 	bl	800186c <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fc ff4e 	bl	800186c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e14e      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049e2:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0ee      	beq.n	80049cc <HAL_RCC_OscConfig+0x5f0>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fc ff3c 	bl	800186c <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fc ff38 	bl	800186c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e138      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a0e:	4b4e      	ldr	r3, [pc, #312]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ee      	bne.n	80049f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 812d 	beq.w	8004c7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a24:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a2c:	2b18      	cmp	r3, #24
 8004a2e:	f000 80bd 	beq.w	8004bac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	f040 809e 	bne.w	8004b78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3c:	4b42      	ldr	r3, [pc, #264]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a41      	ldr	r2, [pc, #260]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fc ff10 	bl	800186c <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fc ff0c 	bl	800186c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e10e      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a62:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a6e:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_OscConfig+0x774>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a7e:	0112      	lsls	r2, r2, #4
 8004a80:	430a      	orrs	r2, r1
 8004a82:	4931      	ldr	r1, [pc, #196]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	628b      	str	r3, [r1, #40]	; 0x28
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	3b01      	subs	r3, #1
 8004a98:	025b      	lsls	r3, r3, #9
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	061b      	lsls	r3, r3, #24
 8004ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ab8:	4923      	ldr	r1, [pc, #140]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004aca:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <HAL_RCC_OscConfig+0x778>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ad6:	00d2      	lsls	r2, r2, #3
 8004ad8:	491b      	ldr	r1, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f023 020c 	bic.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4917      	ldr	r1, [pc, #92]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f023 0202 	bic.w	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	4912      	ldr	r1, [pc, #72]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	4a07      	ldr	r2, [pc, #28]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_RCC_OscConfig+0x76c>)
 8004b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fe95 	bl	800186c <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b44:	e011      	b.n	8004b6a <HAL_RCC_OscConfig+0x78e>
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	58024800 	.word	0x58024800
 8004b50:	fffffc0c 	.word	0xfffffc0c
 8004b54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fc fe88 	bl	800186c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e08a      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b6a:	4b47      	ldr	r3, [pc, #284]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x77c>
 8004b76:	e082      	b.n	8004c7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b78:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a42      	ldr	r2, [pc, #264]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7fc fe72 	bl	800186c <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fc fe6e 	bl	800186c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e070      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9e:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x7b0>
 8004baa:	e068      	b.n	8004c7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bac:	4b36      	ldr	r3, [pc, #216]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bb2:	4b35      	ldr	r3, [pc, #212]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d031      	beq.n	8004c24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f003 0203 	and.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d12a      	bne.n	8004c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d122      	bne.n	8004c24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d11a      	bne.n	8004c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	0a5b      	lsrs	r3, r3, #9
 8004bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d111      	bne.n	8004c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d108      	bne.n	8004c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0e1b      	lsrs	r3, r3, #24
 8004c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e02b      	b.n	8004c80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c28:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	08db      	lsrs	r3, r3, #3
 8004c2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d01f      	beq.n	8004c7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c4a:	f7fc fe0f 	bl	800186c <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c50:	bf00      	nop
 8004c52:	f7fc fe0b 	bl	800186c <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d0f9      	beq.n	8004c52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c62:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <HAL_RCC_OscConfig+0x8b0>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c6a:	00d2      	lsls	r2, r2, #3
 8004c6c:	4906      	ldr	r1, [pc, #24]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <HAL_RCC_OscConfig+0x8ac>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3730      	adds	r7, #48	; 0x30
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	ffff0007 	.word	0xffff0007

08004c90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e19c      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b8a      	ldr	r3, [pc, #552]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d910      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b87      	ldr	r3, [pc, #540]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 020f 	bic.w	r2, r3, #15
 8004cba:	4985      	ldr	r1, [pc, #532]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b83      	ldr	r3, [pc, #524]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e184      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d010      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	4b7b      	ldr	r3, [pc, #492]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d908      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cf0:	4b78      	ldr	r3, [pc, #480]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	4975      	ldr	r1, [pc, #468]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d010      	beq.n	8004d30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	4b70      	ldr	r3, [pc, #448]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d908      	bls.n	8004d30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d1e:	4b6d      	ldr	r3, [pc, #436]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	496a      	ldr	r1, [pc, #424]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	4b64      	ldr	r3, [pc, #400]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d908      	bls.n	8004d5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d4c:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	495e      	ldr	r1, [pc, #376]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d010      	beq.n	8004d8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	4b59      	ldr	r3, [pc, #356]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d908      	bls.n	8004d8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d7a:	4b56      	ldr	r3, [pc, #344]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	4953      	ldr	r1, [pc, #332]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	4b4d      	ldr	r3, [pc, #308]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d908      	bls.n	8004dba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da8:	4b4a      	ldr	r3, [pc, #296]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f023 020f 	bic.w	r2, r3, #15
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4947      	ldr	r1, [pc, #284]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d055      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dc6:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4940      	ldr	r1, [pc, #256]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004de0:	4b3c      	ldr	r3, [pc, #240]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d121      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0f6      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d115      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0ea      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e10:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0de      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e20:	4b2c      	ldr	r3, [pc, #176]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0d6      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e30:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f023 0207 	bic.w	r2, r3, #7
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4925      	ldr	r1, [pc, #148]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fc fd13 	bl	800186c <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e48:	e00a      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4a:	f7fc fd0f 	bl	800186c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e0be      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e60:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d1eb      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d208      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f023 020f 	bic.w	r2, r3, #15
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	490e      	ldr	r1, [pc, #56]	; (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d214      	bcs.n	8004ed8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 020f 	bic.w	r2, r3, #15
 8004eb6:	4906      	ldr	r1, [pc, #24]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e086      	b.n	8004fde <HAL_RCC_ClockConfig+0x34e>
 8004ed0:	52002000 	.word	0x52002000
 8004ed4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d010      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d208      	bcs.n	8004f06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ef4:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	4939      	ldr	r1, [pc, #228]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d010      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d208      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f22:	4b31      	ldr	r3, [pc, #196]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	492e      	ldr	r1, [pc, #184]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d010      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d208      	bcs.n	8004f62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	4922      	ldr	r1, [pc, #136]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d208      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	4917      	ldr	r1, [pc, #92]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f90:	f000 f834 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	4912      	ldr	r1, [pc, #72]	; (8004fec <HAL_RCC_ClockConfig+0x35c>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fae:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <HAL_RCC_ClockConfig+0x358>)
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <HAL_RCC_ClockConfig+0x35c>)
 8004fb8:	5cd3      	ldrb	r3, [r2, r3]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x360>)
 8004fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fc8:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <HAL_RCC_ClockConfig+0x364>)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_RCC_ClockConfig+0x368>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc fc00 	bl	80017d8 <HAL_InitTick>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	0800d4d0 	.word	0x0800d4d0
 8004ff0:	240002ec 	.word	0x240002ec
 8004ff4:	240002e8 	.word	0x240002e8
 8004ff8:	240002f0 	.word	0x240002f0

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005002:	4bb3      	ldr	r3, [pc, #716]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800500a:	2b18      	cmp	r3, #24
 800500c:	f200 8155 	bhi.w	80052ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800507d 	.word	0x0800507d
 800501c:	080052bb 	.word	0x080052bb
 8005020:	080052bb 	.word	0x080052bb
 8005024:	080052bb 	.word	0x080052bb
 8005028:	080052bb 	.word	0x080052bb
 800502c:	080052bb 	.word	0x080052bb
 8005030:	080052bb 	.word	0x080052bb
 8005034:	080052bb 	.word	0x080052bb
 8005038:	080050a3 	.word	0x080050a3
 800503c:	080052bb 	.word	0x080052bb
 8005040:	080052bb 	.word	0x080052bb
 8005044:	080052bb 	.word	0x080052bb
 8005048:	080052bb 	.word	0x080052bb
 800504c:	080052bb 	.word	0x080052bb
 8005050:	080052bb 	.word	0x080052bb
 8005054:	080052bb 	.word	0x080052bb
 8005058:	080050a9 	.word	0x080050a9
 800505c:	080052bb 	.word	0x080052bb
 8005060:	080052bb 	.word	0x080052bb
 8005064:	080052bb 	.word	0x080052bb
 8005068:	080052bb 	.word	0x080052bb
 800506c:	080052bb 	.word	0x080052bb
 8005070:	080052bb 	.word	0x080052bb
 8005074:	080052bb 	.word	0x080052bb
 8005078:	080050af 	.word	0x080050af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800507c:	4b94      	ldr	r3, [pc, #592]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d009      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005088:	4b91      	ldr	r3, [pc, #580]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	08db      	lsrs	r3, r3, #3
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	4a90      	ldr	r2, [pc, #576]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
 8005098:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800509a:	e111      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800509c:	4b8d      	ldr	r3, [pc, #564]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800509e:	61bb      	str	r3, [r7, #24]
      break;
 80050a0:	e10e      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050a2:	4b8d      	ldr	r3, [pc, #564]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050a4:	61bb      	str	r3, [r7, #24]
      break;
 80050a6:	e10b      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050a8:	4b8c      	ldr	r3, [pc, #560]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050aa:	61bb      	str	r3, [r7, #24]
      break;
 80050ac:	e108      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ae:	4b88      	ldr	r3, [pc, #544]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050b8:	4b85      	ldr	r3, [pc, #532]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050c4:	4b82      	ldr	r3, [pc, #520]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050ce:	4b80      	ldr	r3, [pc, #512]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	08db      	lsrs	r3, r3, #3
 80050d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80e1 	beq.w	80052b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	f000 8083 	beq.w	8005200 <HAL_RCC_GetSysClockFreq+0x204>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	f200 80a1 	bhi.w	8005244 <HAL_RCC_GetSysClockFreq+0x248>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x114>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d056      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800510e:	e099      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005110:	4b6f      	ldr	r3, [pc, #444]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02d      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800511c:	4b6c      	ldr	r3, [pc, #432]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	08db      	lsrs	r3, r3, #3
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	4a6b      	ldr	r2, [pc, #428]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005146:	4b62      	ldr	r3, [pc, #392]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005156:	ed97 6a02 	vldr	s12, [r7, #8]
 800515a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005176:	e087      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518a:	4b51      	ldr	r3, [pc, #324]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519a:	ed97 6a02 	vldr	s12, [r7, #8]
 800519e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ba:	e065      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ce:	4b40      	ldr	r3, [pc, #256]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051de:	ed97 6a02 	vldr	s12, [r7, #8]
 80051e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051fe:	e043      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005212:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005222:	ed97 6a02 	vldr	s12, [r7, #8]
 8005226:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005242:	e021      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005266:	ed97 6a02 	vldr	s12, [r7, #8]
 800526a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800526e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005286:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	0a5b      	lsrs	r3, r3, #9
 800528e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005292:	3301      	adds	r3, #1
 8005294:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ac:	ee17 3a90 	vmov	r3, s15
 80052b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052b2:	e005      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
      break;
 80052b8:	e002      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052bc:	61bb      	str	r3, [r7, #24]
      break;
 80052be:	bf00      	nop
  }

  return sysclockfreq;
 80052c0:	69bb      	ldr	r3, [r7, #24]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3724      	adds	r7, #36	; 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	58024400 	.word	0x58024400
 80052d4:	03d09000 	.word	0x03d09000
 80052d8:	003d0900 	.word	0x003d0900
 80052dc:	017d7840 	.word	0x017d7840
 80052e0:	46000000 	.word	0x46000000
 80052e4:	4c742400 	.word	0x4c742400
 80052e8:	4a742400 	.word	0x4a742400
 80052ec:	4bbebc20 	.word	0x4bbebc20

080052f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052f6:	f7ff fe81 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <HAL_RCC_GetHCLKFreq+0x50>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	490f      	ldr	r1, [pc, #60]	; (8005344 <HAL_RCC_GetHCLKFreq+0x54>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_RCC_GetHCLKFreq+0x50>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	4a09      	ldr	r2, [pc, #36]	; (8005344 <HAL_RCC_GetHCLKFreq+0x54>)
 800531e:	5cd3      	ldrb	r3, [r2, r3]
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	fa22 f303 	lsr.w	r3, r2, r3
 800532a:	4a07      	ldr	r2, [pc, #28]	; (8005348 <HAL_RCC_GetHCLKFreq+0x58>)
 800532c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005334:	4b04      	ldr	r3, [pc, #16]	; (8005348 <HAL_RCC_GetHCLKFreq+0x58>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	58024400 	.word	0x58024400
 8005344:	0800d4d0 	.word	0x0800d4d0
 8005348:	240002ec 	.word	0x240002ec
 800534c:	240002e8 	.word	0x240002e8

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005354:	f7ff ffcc 	bl	80052f0 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4904      	ldr	r1, [pc, #16]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	58024400 	.word	0x58024400
 8005378:	0800d4d0 	.word	0x0800d4d0

0800537c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800537c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005380:	b0ca      	sub	sp, #296	; 0x128
 8005382:	af00      	add	r7, sp, #0
 8005384:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80053a0:	2500      	movs	r5, #0
 80053a2:	ea54 0305 	orrs.w	r3, r4, r5
 80053a6:	d049      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053b2:	d02f      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053b8:	d828      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053be:	d01a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c4:	d822      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ce:	d007      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053d0:	e01c      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d2:	4bb8      	ldr	r3, [pc, #736]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	4ab7      	ldr	r2, [pc, #732]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053de:	e01a      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e4:	3308      	adds	r3, #8
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 fb61 	bl	8007ab0 <RCCEx_PLL2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053f4:	e00f      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fa:	3328      	adds	r3, #40	; 0x28
 80053fc:	2102      	movs	r1, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	f002 fc08 	bl	8007c14 <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800540a:	e004      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800541e:	4ba5      	ldr	r3, [pc, #660]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005422:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800542c:	4aa1      	ldr	r2, [pc, #644]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800542e:	430b      	orrs	r3, r1
 8005430:	6513      	str	r3, [r2, #80]	; 0x50
 8005432:	e003      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800543c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005448:	f04f 0900 	mov.w	r9, #0
 800544c:	ea58 0309 	orrs.w	r3, r8, r9
 8005450:	d047      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	2b04      	cmp	r3, #4
 800545a:	d82a      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005479 	.word	0x08005479
 8005468:	08005487 	.word	0x08005487
 800546c:	0800549d 	.word	0x0800549d
 8005470:	080054bb 	.word	0x080054bb
 8005474:	080054bb 	.word	0x080054bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005478:	4b8e      	ldr	r3, [pc, #568]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	4a8d      	ldr	r2, [pc, #564]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800547e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005484:	e01a      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548a:	3308      	adds	r3, #8
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f002 fb0e 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800549a:	e00f      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a0:	3328      	adds	r3, #40	; 0x28
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f002 fbb5 	bl	8007c14 <RCCEx_PLL3_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054b0:	e004      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054c4:	4b7b      	ldr	r3, [pc, #492]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	f023 0107 	bic.w	r1, r3, #7
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	4a78      	ldr	r2, [pc, #480]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6513      	str	r3, [r2, #80]	; 0x50
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80054ee:	f04f 0b00 	mov.w	fp, #0
 80054f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80054f6:	d04c      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80054f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d030      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005508:	d829      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800550a:	2bc0      	cmp	r3, #192	; 0xc0
 800550c:	d02d      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800550e:	2bc0      	cmp	r3, #192	; 0xc0
 8005510:	d825      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005512:	2b80      	cmp	r3, #128	; 0x80
 8005514:	d018      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d821      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d007      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005522:	e01c      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005524:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4a62      	ldr	r2, [pc, #392]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800552a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005530:	e01c      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005536:	3308      	adds	r3, #8
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f002 fab8 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554c:	3328      	adds	r3, #40	; 0x28
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f002 fb5f 	bl	8007c14 <RCCEx_PLL3_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800555c:	e006      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005564:	e002      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800556a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005574:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005582:	4a4c      	ldr	r2, [pc, #304]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005584:	430b      	orrs	r3, r1
 8005586:	6513      	str	r3, [r2, #80]	; 0x50
 8005588:	e003      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800558e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800559e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055a2:	2300      	movs	r3, #0
 80055a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d053      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055be:	d035      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80055c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055c4:	d82e      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055ca:	d031      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80055cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055d0:	d828      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d6:	d01a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80055d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055dc:	d822      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80055e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e6:	d007      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80055e8:	e01c      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ea:	4b32      	ldr	r3, [pc, #200]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a31      	ldr	r2, [pc, #196]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055f6:	e01c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fc:	3308      	adds	r3, #8
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f002 fa55 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800560c:	e011      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005612:	3328      	adds	r3, #40	; 0x28
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f002 fafc 	bl	8007c14 <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005622:	e006      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800562a:	e002      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800563a:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800564a:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564c:	430b      	orrs	r3, r1
 800564e:	6593      	str	r3, [r2, #88]	; 0x58
 8005650:	e003      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005666:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005670:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005674:	460b      	mov	r3, r1
 8005676:	4313      	orrs	r3, r2
 8005678:	d056      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005686:	d038      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800568c:	d831      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800568e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005692:	d034      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005694:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005698:	d82b      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800569a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800569e:	d01d      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80056a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056a4:	d825      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80056aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056b0:	e01f      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b8:	4ba2      	ldr	r3, [pc, #648]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	4aa1      	ldr	r2, [pc, #644]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c4:	e01c      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ca:	3308      	adds	r3, #8
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f002 f9ee 	bl	8007ab0 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056da:	e011      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e0:	3328      	adds	r3, #40	; 0x28
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f002 fa95 	bl	8007c14 <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056f0:	e006      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056f8:	e002      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005708:	4b8e      	ldr	r3, [pc, #568]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005718:	4a8a      	ldr	r2, [pc, #552]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800571a:	430b      	orrs	r3, r1
 800571c:	6593      	str	r3, [r2, #88]	; 0x58
 800571e:	e003      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005734:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800573e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005742:	460b      	mov	r3, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	d03a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	2b30      	cmp	r3, #48	; 0x30
 8005750:	d01f      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005752:	2b30      	cmp	r3, #48	; 0x30
 8005754:	d819      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005756:	2b20      	cmp	r3, #32
 8005758:	d00c      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800575a:	2b20      	cmp	r3, #32
 800575c:	d815      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d019      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005762:	2b10      	cmp	r3, #16
 8005764:	d111      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005766:	4b77      	ldr	r3, [pc, #476]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	4a76      	ldr	r2, [pc, #472]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800576c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005772:	e011      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005778:	3308      	adds	r3, #8
 800577a:	2102      	movs	r1, #2
 800577c:	4618      	mov	r0, r3
 800577e:	f002 f997 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005788:	e006      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005790:	e002      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057a0:	4b68      	ldr	r3, [pc, #416]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ae:	4a65      	ldr	r2, [pc, #404]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057b4:	e003      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80057ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80057d8:	460b      	mov	r3, r1
 80057da:	4313      	orrs	r3, r2
 80057dc:	d051      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057e8:	d035      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80057ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ee:	d82e      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057f4:	d031      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80057f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057fa:	d828      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005800:	d01a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005806:	d822      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005810:	d007      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005812:	e01c      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005814:	4b4b      	ldr	r3, [pc, #300]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a4a      	ldr	r2, [pc, #296]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800581a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800581e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005820:	e01c      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005826:	3308      	adds	r3, #8
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f002 f940 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005836:	e011      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583c:	3328      	adds	r3, #40	; 0x28
 800583e:	2100      	movs	r1, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f002 f9e7 	bl	8007c14 <RCCEx_PLL3_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800584c:	e006      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005854:	e002      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800585a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005864:	4b37      	ldr	r3, [pc, #220]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005868:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005872:	4a34      	ldr	r2, [pc, #208]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005874:	430b      	orrs	r3, r1
 8005876:	6513      	str	r3, [r2, #80]	; 0x50
 8005878:	e003      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800587e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800588e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005892:	2300      	movs	r3, #0
 8005894:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005898:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800589c:	460b      	mov	r3, r1
 800589e:	4313      	orrs	r3, r2
 80058a0:	d056      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ac:	d033      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80058ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b2:	d82c      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058b8:	d02f      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80058ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058be:	d826      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058c4:	d02b      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80058c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058ca:	d820      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058d0:	d012      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80058d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058d6:	d81a      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d022      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e0:	d115      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e6:	3308      	adds	r3, #8
 80058e8:	2101      	movs	r1, #1
 80058ea:	4618      	mov	r0, r3
 80058ec:	f002 f8e0 	bl	8007ab0 <RCCEx_PLL2_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058f6:	e015      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fc:	3328      	adds	r3, #40	; 0x28
 80058fe:	2101      	movs	r1, #1
 8005900:	4618      	mov	r0, r3
 8005902:	f002 f987 	bl	8007c14 <RCCEx_PLL3_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800590c:	e00a      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005914:	e006      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005916:	bf00      	nop
 8005918:	e004      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800591a:	bf00      	nop
 800591c:	e002      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800591e:	bf00      	nop
 8005920:	e000      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10d      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800592e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005930:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800593a:	4a02      	ldr	r2, [pc, #8]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6513      	str	r3, [r2, #80]	; 0x50
 8005940:	e006      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800594c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800595c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005966:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d055      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800597c:	d033      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800597e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005982:	d82c      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d02f      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d826      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005990:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005994:	d02b      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800599a:	d820      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800599c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a0:	d012      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80059a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a6:	d81a      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d022      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80059ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b0:	d115      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b6:	3308      	adds	r3, #8
 80059b8:	2101      	movs	r1, #1
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 f878 	bl	8007ab0 <RCCEx_PLL2_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059c6:	e015      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059cc:	3328      	adds	r3, #40	; 0x28
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f002 f91f 	bl	8007c14 <RCCEx_PLL3_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059dc:	e00a      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059e4:	e006      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059e6:	bf00      	nop
 80059e8:	e004      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059ea:	bf00      	nop
 80059ec:	e002      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10b      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059fc:	4ba3      	ldr	r3, [pc, #652]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a0c:	4a9f      	ldr	r2, [pc, #636]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	6593      	str	r3, [r2, #88]	; 0x58
 8005a12:	e003      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d037      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a46:	d00e      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a4c:	d816      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d018      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a56:	d111      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b8c      	ldr	r3, [pc, #560]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	4a8b      	ldr	r2, [pc, #556]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a64:	e00f      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 f81e 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a7a:	e004      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a8e:	4b7f      	ldr	r3, [pc, #508]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	4a7b      	ldr	r2, [pc, #492]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6513      	str	r3, [r2, #80]	; 0x50
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ac2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d039      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d81c      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005b19 	.word	0x08005b19
 8005ae0:	08005aed 	.word	0x08005aed
 8005ae4:	08005afb 	.word	0x08005afb
 8005ae8:	08005b19 	.word	0x08005b19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4b67      	ldr	r3, [pc, #412]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a66      	ldr	r2, [pc, #408]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005af8:	e00f      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	3308      	adds	r3, #8
 8005b00:	2102      	movs	r1, #2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 ffd4 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b0e:	e004      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b16:	e000      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b22:	4b5a      	ldr	r3, [pc, #360]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	f023 0103 	bic.w	r1, r3, #3
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b30:	4a56      	ldr	r2, [pc, #344]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b32:	430b      	orrs	r3, r1
 8005b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b36:	e003      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f000 809f 	beq.w	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b62:	4b4b      	ldr	r3, [pc, #300]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a4a      	ldr	r2, [pc, #296]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b6e:	f7fb fe7d 	bl	800186c <HAL_GetTick>
 8005b72:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b76:	e00b      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b78:	f7fb fe78 	bl	800186c <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	; 0x64
 8005b86:	d903      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b8e:	e005      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b90:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0ed      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d179      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bb0:	4053      	eors	r3, r2
 8005bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d015      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bba:	4b34      	ldr	r3, [pc, #208]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bc6:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a30      	ldr	r2, [pc, #192]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bd2:	4b2e      	ldr	r3, [pc, #184]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a2d      	ldr	r2, [pc, #180]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bde:	4a2b      	ldr	r2, [pc, #172]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005be4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf2:	d118      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fb fe3a 	bl	800186c <HAL_GetTick>
 8005bf8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bfc:	e00d      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfe:	f7fb fe35 	bl	800186c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c08:	1ad2      	subs	r2, r2, r3
 8005c0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d903      	bls.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005c18:	e005      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c1a:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0eb      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d129      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c3e:	d10e      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c50:	091a      	lsrs	r2, r3, #4
 8005c52:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	4a0d      	ldr	r2, [pc, #52]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6113      	str	r3, [r2, #16]
 8005c5c:	e005      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c68:	6113      	str	r3, [r2, #16]
 8005c6a:	4b08      	ldr	r3, [pc, #32]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7a:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c80:	e00e      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005c8a:	e009      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	58024800 	.word	0x58024800
 8005c94:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f002 0301 	and.w	r3, r2, #1
 8005cac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f000 8089 	beq.w	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc8:	2b28      	cmp	r3, #40	; 0x28
 8005cca:	d86b      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005dad 	.word	0x08005dad
 8005cd8:	08005da5 	.word	0x08005da5
 8005cdc:	08005da5 	.word	0x08005da5
 8005ce0:	08005da5 	.word	0x08005da5
 8005ce4:	08005da5 	.word	0x08005da5
 8005ce8:	08005da5 	.word	0x08005da5
 8005cec:	08005da5 	.word	0x08005da5
 8005cf0:	08005da5 	.word	0x08005da5
 8005cf4:	08005d79 	.word	0x08005d79
 8005cf8:	08005da5 	.word	0x08005da5
 8005cfc:	08005da5 	.word	0x08005da5
 8005d00:	08005da5 	.word	0x08005da5
 8005d04:	08005da5 	.word	0x08005da5
 8005d08:	08005da5 	.word	0x08005da5
 8005d0c:	08005da5 	.word	0x08005da5
 8005d10:	08005da5 	.word	0x08005da5
 8005d14:	08005d8f 	.word	0x08005d8f
 8005d18:	08005da5 	.word	0x08005da5
 8005d1c:	08005da5 	.word	0x08005da5
 8005d20:	08005da5 	.word	0x08005da5
 8005d24:	08005da5 	.word	0x08005da5
 8005d28:	08005da5 	.word	0x08005da5
 8005d2c:	08005da5 	.word	0x08005da5
 8005d30:	08005da5 	.word	0x08005da5
 8005d34:	08005dad 	.word	0x08005dad
 8005d38:	08005da5 	.word	0x08005da5
 8005d3c:	08005da5 	.word	0x08005da5
 8005d40:	08005da5 	.word	0x08005da5
 8005d44:	08005da5 	.word	0x08005da5
 8005d48:	08005da5 	.word	0x08005da5
 8005d4c:	08005da5 	.word	0x08005da5
 8005d50:	08005da5 	.word	0x08005da5
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005da5 	.word	0x08005da5
 8005d5c:	08005da5 	.word	0x08005da5
 8005d60:	08005da5 	.word	0x08005da5
 8005d64:	08005da5 	.word	0x08005da5
 8005d68:	08005da5 	.word	0x08005da5
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005da5 	.word	0x08005da5
 8005d74:	08005dad 	.word	0x08005dad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	2101      	movs	r1, #1
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 fe95 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d8c:	e00f      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d92:	3328      	adds	r3, #40	; 0x28
 8005d94:	2101      	movs	r1, #1
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 ff3c 	bl	8007c14 <RCCEx_PLL3_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005da2:	e004      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005daa:	e000      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005db6:	4bbf      	ldr	r3, [pc, #764]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc4:	4abb      	ldr	r2, [pc, #748]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6553      	str	r3, [r2, #84]	; 0x54
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f002 0302 	and.w	r3, r2, #2
 8005de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005dea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005dee:	460b      	mov	r3, r1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d041      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d824      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e51 	.word	0x08005e51
 8005e08:	08005e1d 	.word	0x08005e1d
 8005e0c:	08005e33 	.word	0x08005e33
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e51 	.word	0x08005e51
 8005e18:	08005e51 	.word	0x08005e51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	3308      	adds	r3, #8
 8005e22:	2101      	movs	r1, #1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fe43 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e30:	e00f      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	3328      	adds	r3, #40	; 0x28
 8005e38:	2101      	movs	r1, #1
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 feea 	bl	8007c14 <RCCEx_PLL3_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e46:	e004      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e4e:	e000      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e5a:	4b96      	ldr	r3, [pc, #600]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5e:	f023 0107 	bic.w	r1, r3, #7
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e68:	4a92      	ldr	r2, [pc, #584]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	6553      	str	r3, [r2, #84]	; 0x54
 8005e6e:	e003      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f002 0304 	and.w	r3, r2, #4
 8005e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4313      	orrs	r3, r2
 8005e96:	d044      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea0:	2b05      	cmp	r3, #5
 8005ea2:	d825      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ef9 	.word	0x08005ef9
 8005eb0:	08005ec5 	.word	0x08005ec5
 8005eb4:	08005edb 	.word	0x08005edb
 8005eb8:	08005ef9 	.word	0x08005ef9
 8005ebc:	08005ef9 	.word	0x08005ef9
 8005ec0:	08005ef9 	.word	0x08005ef9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec8:	3308      	adds	r3, #8
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fdef 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ed8:	e00f      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ede:	3328      	adds	r3, #40	; 0x28
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fe96 	bl	8007c14 <RCCEx_PLL3_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005eee:	e004      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ef6:	e000      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f02:	4b6c      	ldr	r3, [pc, #432]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	f023 0107 	bic.w	r1, r3, #7
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f12:	4a68      	ldr	r2, [pc, #416]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6593      	str	r3, [r2, #88]	; 0x58
 8005f18:	e003      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f002 0320 	and.w	r3, r2, #32
 8005f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f32:	2300      	movs	r3, #0
 8005f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d055      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f4e:	d033      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f54:	d82c      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5a:	d02f      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f60:	d826      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f66:	d02b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005f68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f6c:	d820      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f72:	d012      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f78:	d81a      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d022      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f82:	d115      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fd8f 	bl	8007ab0 <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f98:	e015      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9e:	3328      	adds	r3, #40	; 0x28
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fe36 	bl	8007c14 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fb8:	bf00      	nop
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fce:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	4a35      	ldr	r2, [pc, #212]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6553      	str	r3, [r2, #84]	; 0x54
 8005fe4:	e003      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ffe:	2300      	movs	r3, #0
 8006000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006004:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006008:	460b      	mov	r3, r1
 800600a:	4313      	orrs	r3, r2
 800600c:	d058      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006016:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800601a:	d033      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800601c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006020:	d82c      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006026:	d02f      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602c:	d826      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800602e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006032:	d02b      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006038:	d820      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800603a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800603e:	d012      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006044:	d81a      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d022      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604e:	d115      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006054:	3308      	adds	r3, #8
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f001 fd29 	bl	8007ab0 <RCCEx_PLL2_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006064:	e015      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606a:	3328      	adds	r3, #40	; 0x28
 800606c:	2102      	movs	r1, #2
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fdd0 	bl	8007c14 <RCCEx_PLL3_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800607a:	e00a      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006082:	e006      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006084:	bf00      	nop
 8006086:	e004      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10e      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800609a:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060aa:	4a02      	ldr	r2, [pc, #8]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ac:	430b      	orrs	r3, r1
 80060ae:	6593      	str	r3, [r2, #88]	; 0x58
 80060b0:	e006      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80060b2:	bf00      	nop
 80060b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80060cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d055      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060ec:	d033      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80060ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060f2:	d82c      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	d02f      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80060fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fe:	d826      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006100:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006104:	d02b      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006106:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800610a:	d820      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800610c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006110:	d012      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006116:	d81a      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d022      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800611c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006120:	d115      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006126:	3308      	adds	r3, #8
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f001 fcc0 	bl	8007ab0 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006136:	e015      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	3328      	adds	r3, #40	; 0x28
 800613e:	2102      	movs	r1, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fd67 	bl	8007c14 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800614c:	e00a      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006156:	bf00      	nop
 8006158:	e004      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800616c:	4ba1      	ldr	r3, [pc, #644]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800617c:	4a9d      	ldr	r2, [pc, #628]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800617e:	430b      	orrs	r3, r1
 8006180:	6593      	str	r3, [r2, #88]	; 0x58
 8006182:	e003      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800618c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f002 0308 	and.w	r3, r2, #8
 8006198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80061a6:	460b      	mov	r3, r1
 80061a8:	4313      	orrs	r3, r2
 80061aa:	d01e      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d10c      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061be:	3328      	adds	r3, #40	; 0x28
 80061c0:	2102      	movs	r1, #2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fd26 	bl	8007c14 <RCCEx_PLL3_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061d4:	4b87      	ldr	r3, [pc, #540]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e4:	4a83      	ldr	r2, [pc, #524]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f002 0310 	and.w	r3, r2, #16
 80061f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061fa:	2300      	movs	r3, #0
 80061fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006200:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006204:	460b      	mov	r3, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	d01e      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d10c      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	3328      	adds	r3, #40	; 0x28
 800621e:	2102      	movs	r1, #2
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fcf7 	bl	8007c14 <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006232:	4b70      	ldr	r3, [pc, #448]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006242:	4a6c      	ldr	r2, [pc, #432]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006244:	430b      	orrs	r3, r1
 8006246:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006258:	2300      	movs	r3, #0
 800625a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800625e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006262:	460b      	mov	r3, r1
 8006264:	4313      	orrs	r3, r2
 8006266:	d03e      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006274:	d022      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800627a:	d81b      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006284:	d00b      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006286:	e015      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628c:	3308      	adds	r3, #8
 800628e:	2100      	movs	r1, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f001 fc0d 	bl	8007ab0 <RCCEx_PLL2_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800629c:	e00f      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a2:	3328      	adds	r3, #40	; 0x28
 80062a4:	2102      	movs	r1, #2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 fcb4 	bl	8007c14 <RCCEx_PLL3_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062b2:	e004      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062ba:	e000      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80062bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062c6:	4b4b      	ldr	r3, [pc, #300]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062d6:	4a47      	ldr	r2, [pc, #284]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6593      	str	r3, [r2, #88]	; 0x58
 80062dc:	e003      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80062f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80062f4:	2300      	movs	r3, #0
 80062f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80062fc:	460b      	mov	r3, r1
 80062fe:	4313      	orrs	r3, r2
 8006300:	d03b      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800630e:	d01f      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006310:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006314:	d818      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631a:	d003      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800631c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006320:	d007      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006322:	e011      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4b33      	ldr	r3, [pc, #204]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4a32      	ldr	r2, [pc, #200]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006330:	e00f      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006336:	3328      	adds	r3, #40	; 0x28
 8006338:	2101      	movs	r1, #1
 800633a:	4618      	mov	r0, r3
 800633c:	f001 fc6a 	bl	8007c14 <RCCEx_PLL3_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006346:	e004      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800634e:	e000      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800635a:	4b26      	ldr	r3, [pc, #152]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636a:	4a22      	ldr	r2, [pc, #136]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636c:	430b      	orrs	r3, r1
 800636e:	6553      	str	r3, [r2, #84]	; 0x54
 8006370:	e003      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006386:	673b      	str	r3, [r7, #112]	; 0x70
 8006388:	2300      	movs	r3, #0
 800638a:	677b      	str	r3, [r7, #116]	; 0x74
 800638c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006390:	460b      	mov	r3, r1
 8006392:	4313      	orrs	r3, r2
 8006394:	d034      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a4:	d007      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80063a6:	e011      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a8:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a11      	ldr	r2, [pc, #68]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063b4:	e00e      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	3308      	adds	r3, #8
 80063bc:	2102      	movs	r1, #2
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fb76 	bl	8007ab0 <RCCEx_PLL2_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063ca:	e003      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10d      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ea:	4a02      	ldr	r2, [pc, #8]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ec:	430b      	orrs	r3, r1
 80063ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063f0:	e006      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80063f2:	bf00      	nop
 80063f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800640c:	66bb      	str	r3, [r7, #104]	; 0x68
 800640e:	2300      	movs	r3, #0
 8006410:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006412:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d00c      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006420:	3328      	adds	r3, #40	; 0x28
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f001 fbf5 	bl	8007c14 <RCCEx_PLL3_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006442:	663b      	str	r3, [r7, #96]	; 0x60
 8006444:	2300      	movs	r3, #0
 8006446:	667b      	str	r3, [r7, #100]	; 0x64
 8006448:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d038      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800645e:	d018      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006464:	d811      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646a:	d014      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800646c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006470:	d80b      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d011      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647a:	d106      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647c:	4bc3      	ldr	r3, [pc, #780]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	4ac2      	ldr	r2, [pc, #776]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006488:	e008      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006490:	e004      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800649a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a4:	4bb9      	ldr	r3, [pc, #740]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b4:	4ab5      	ldr	r2, [pc, #724]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	6553      	str	r3, [r2, #84]	; 0x54
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80064d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064d2:	2300      	movs	r3, #0
 80064d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064e0:	4baa      	ldr	r3, [pc, #680]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ee:	4aa7      	ldr	r2, [pc, #668]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006500:	653b      	str	r3, [r7, #80]	; 0x50
 8006502:	2300      	movs	r3, #0
 8006504:	657b      	str	r3, [r7, #84]	; 0x54
 8006506:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d00a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006510:	4b9e      	ldr	r3, [pc, #632]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006520:	4a9a      	ldr	r2, [pc, #616]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006522:	430b      	orrs	r3, r1
 8006524:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006532:	64bb      	str	r3, [r7, #72]	; 0x48
 8006534:	2300      	movs	r3, #0
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006538:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800653c:	460b      	mov	r3, r1
 800653e:	4313      	orrs	r3, r2
 8006540:	d009      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006542:	4b92      	ldr	r3, [pc, #584]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006546:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006550:	4a8e      	ldr	r2, [pc, #568]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006552:	430b      	orrs	r3, r1
 8006554:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
 8006564:	2300      	movs	r3, #0
 8006566:	647b      	str	r3, [r7, #68]	; 0x44
 8006568:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800656c:	460b      	mov	r3, r1
 800656e:	4313      	orrs	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006572:	4b86      	ldr	r3, [pc, #536]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	4a85      	ldr	r2, [pc, #532]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800657c:	6113      	str	r3, [r2, #16]
 800657e:	4b83      	ldr	r3, [pc, #524]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006580:	6919      	ldr	r1, [r3, #16]
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006586:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800658a:	4a80      	ldr	r2, [pc, #512]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800659c:	63bb      	str	r3, [r7, #56]	; 0x38
 800659e:	2300      	movs	r3, #0
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065ac:	4b77      	ldr	r3, [pc, #476]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ba:	4a74      	ldr	r2, [pc, #464]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80065cc:	633b      	str	r3, [r7, #48]	; 0x30
 80065ce:	2300      	movs	r3, #0
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
 80065d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d00a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065dc:	4b6b      	ldr	r3, [pc, #428]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ec:	4a67      	ldr	r2, [pc, #412]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ee:	430b      	orrs	r3, r1
 80065f0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	2100      	movs	r1, #0
 80065fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006604:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d011      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006612:	3308      	adds	r3, #8
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f001 fa4a 	bl	8007ab0 <RCCEx_PLL2_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800662e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	2100      	movs	r1, #0
 800663c:	6239      	str	r1, [r7, #32]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
 8006644:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006648:	460b      	mov	r3, r1
 800664a:	4313      	orrs	r3, r2
 800664c:	d011      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006652:	3308      	adds	r3, #8
 8006654:	2101      	movs	r1, #1
 8006656:	4618      	mov	r0, r3
 8006658:	f001 fa2a 	bl	8007ab0 <RCCEx_PLL2_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800666e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	2100      	movs	r1, #0
 800667c:	61b9      	str	r1, [r7, #24]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006688:	460b      	mov	r3, r1
 800668a:	4313      	orrs	r3, r2
 800668c:	d011      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006692:	3308      	adds	r3, #8
 8006694:	2102      	movs	r1, #2
 8006696:	4618      	mov	r0, r3
 8006698:	f001 fa0a 	bl	8007ab0 <RCCEx_PLL2_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	2100      	movs	r1, #0
 80066bc:	6139      	str	r1, [r7, #16]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80066c8:	460b      	mov	r3, r1
 80066ca:	4313      	orrs	r3, r2
 80066cc:	d011      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d2:	3328      	adds	r3, #40	; 0x28
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fa9c 	bl	8007c14 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80066e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	2100      	movs	r1, #0
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006708:	460b      	mov	r3, r1
 800670a:	4313      	orrs	r3, r2
 800670c:	d011      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006712:	3328      	adds	r3, #40	; 0x28
 8006714:	2101      	movs	r1, #1
 8006716:	4618      	mov	r0, r3
 8006718:	f001 fa7c 	bl	8007c14 <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	2100      	movs	r1, #0
 800673c:	6039      	str	r1, [r7, #0]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	607b      	str	r3, [r7, #4]
 8006744:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006748:	460b      	mov	r3, r1
 800674a:	4313      	orrs	r3, r2
 800674c:	d011      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006752:	3328      	adds	r3, #40	; 0x28
 8006754:	2102      	movs	r1, #2
 8006756:	4618      	mov	r0, r3
 8006758:	f001 fa5c 	bl	8007c14 <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800676e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006772:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
}
 8006780:	4618      	mov	r0, r3
 8006782:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006786:	46bd      	mov	sp, r7
 8006788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800678c:	58024400 	.word	0x58024400

08006790 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b090      	sub	sp, #64	; 0x40
 8006794:	af00      	add	r7, sp, #0
 8006796:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800679a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80067a2:	430b      	orrs	r3, r1
 80067a4:	f040 8094 	bne.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80067a8:	4b9e      	ldr	r3, [pc, #632]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	f200 8087 	bhi.w	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067d5 	.word	0x080067d5
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	08006825 	.word	0x08006825
 80067cc:	080068c1 	.word	0x080068c1
 80067d0:	0800684d 	.word	0x0800684d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067d4:	4b93      	ldr	r3, [pc, #588]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e0:	d108      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 f810 	bl	800780c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f0:	f000 bd45 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f8:	f000 bd41 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067fc:	4b89      	ldr	r3, [pc, #548]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006808:	d108      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800680a:	f107 0318 	add.w	r3, r7, #24
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fd54 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006818:	f000 bd31 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006820:	f000 bd2d 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006824:	4b7f      	ldr	r3, [pc, #508]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006830:	d108      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006832:	f107 030c 	add.w	r3, r7, #12
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fe94 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006840:	f000 bd1d 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006848:	f000 bd19 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800684c:	4b75      	ldr	r3, [pc, #468]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006854:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006856:	4b73      	ldr	r3, [pc, #460]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b04      	cmp	r3, #4
 8006860:	d10c      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006868:	4b6e      	ldr	r3, [pc, #440]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	08db      	lsrs	r3, r3, #3
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	4a6d      	ldr	r2, [pc, #436]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687a:	e01f      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800687c:	4b69      	ldr	r3, [pc, #420]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006888:	d106      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800688a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006890:	d102      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006892:	4b66      	ldr	r3, [pc, #408]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006896:	e011      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006898:	4b62      	ldr	r3, [pc, #392]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a4:	d106      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ac:	d102      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068ae:	4b60      	ldr	r3, [pc, #384]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b2:	e003      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068b8:	f000 bce1 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068bc:	f000 bcdf 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068c0:	4b5c      	ldr	r3, [pc, #368]	; (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c4:	f000 bcdb 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068cc:	f000 bcd7 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80068d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80068d8:	430b      	orrs	r3, r1
 80068da:	f040 80ad 	bne.w	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80068de:	4b51      	ldr	r3, [pc, #324]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ee:	d056      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f6:	f200 8090 	bhi.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	2bc0      	cmp	r3, #192	; 0xc0
 80068fe:	f000 8088 	beq.w	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	2bc0      	cmp	r3, #192	; 0xc0
 8006906:	f200 8088 	bhi.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	2b80      	cmp	r3, #128	; 0x80
 800690e:	d032      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	f200 8081 	bhi.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	d014      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006924:	e079      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006926:	4b3f      	ldr	r3, [pc, #252]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006932:	d108      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006938:	4618      	mov	r0, r3
 800693a:	f000 ff67 	bl	800780c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006942:	f000 bc9c 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694a:	f000 bc98 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800694e:	4b35      	ldr	r3, [pc, #212]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800695a:	d108      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800695c:	f107 0318 	add.w	r3, r7, #24
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fcab 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800696a:	f000 bc88 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006972:	f000 bc84 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006976:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800697e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006982:	d108      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fdeb 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006992:	f000 bc74 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800699a:	f000 bc70 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800699e:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069a8:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d10c      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80069b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	4a18      	ldr	r2, [pc, #96]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069cc:	e01f      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d106      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069e2:	d102      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069e4:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e8:	e011      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069f6:	d106      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fe:	d102      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a04:	e003      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a0a:	f000 bc38 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a0e:	f000 bc36 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a16:	f000 bc32 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a1e:	f000 bc2e 	b.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a22:	bf00      	nop
 8006a24:	58024400 	.word	0x58024400
 8006a28:	03d09000 	.word	0x03d09000
 8006a2c:	003d0900 	.word	0x003d0900
 8006a30:	017d7840 	.word	0x017d7840
 8006a34:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006a40:	430b      	orrs	r3, r1
 8006a42:	f040 809c 	bne.w	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006a46:	4b9e      	ldr	r3, [pc, #632]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a56:	d054      	beq.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a5e:	f200 808b 	bhi.w	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a68:	f000 8083 	beq.w	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a72:	f200 8081 	bhi.w	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a7c:	d02f      	beq.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a84:	d878      	bhi.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a92:	d012      	beq.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006a94:	e070      	b.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a96:	4b8a      	ldr	r3, [pc, #552]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aa2:	d107      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 feaf 	bl	800780c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab2:	e3e4      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab8:	e3e1      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aba:	4b81      	ldr	r3, [pc, #516]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac8:	f107 0318 	add.w	r3, r7, #24
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fbf5 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad6:	e3d2      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006adc:	e3cf      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ade:	4b78      	ldr	r3, [pc, #480]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aea:	d107      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aec:	f107 030c 	add.w	r3, r7, #12
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fd37 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006afa:	e3c0      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b00:	e3bd      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b02:	4b6f      	ldr	r3, [pc, #444]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b0c:	4b6c      	ldr	r3, [pc, #432]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d10c      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b1e:	4b68      	ldr	r3, [pc, #416]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	4a66      	ldr	r2, [pc, #408]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b30:	e01e      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b32:	4b63      	ldr	r3, [pc, #396]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3e:	d106      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b46:	d102      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b48:	4b5f      	ldr	r3, [pc, #380]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4c:	e010      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b4e:	4b5c      	ldr	r3, [pc, #368]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b5a:	d106      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b62:	d102      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b68:	e002      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b6e:	e386      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b70:	e385      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b72:	4b57      	ldr	r3, [pc, #348]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b76:	e382      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7c:	e37f      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b82:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006b86:	430b      	orrs	r3, r1
 8006b88:	f040 80a7 	bne.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006b8c:	4b4c      	ldr	r3, [pc, #304]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b90:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b9c:	d055      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba4:	f200 8096 	bhi.w	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bae:	f000 8084 	beq.w	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bb8:	f200 808c 	bhi.w	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bc2:	d030      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bca:	f200 8083 	bhi.w	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d004      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bda:	d012      	beq.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006bdc:	e07a      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bde:	4b38      	ldr	r3, [pc, #224]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bea:	d107      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fe0b 	bl	800780c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bfa:	e340      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c00:	e33d      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c02:	4b2f      	ldr	r3, [pc, #188]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c10:	f107 0318 	add.w	r3, r7, #24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fb51 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1e:	e32e      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c24:	e32b      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c26:	4b26      	ldr	r3, [pc, #152]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c32:	d107      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c34:	f107 030c 	add.w	r3, r7, #12
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fc93 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c42:	e31c      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c48:	e319      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c4a:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c54:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d10c      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	08db      	lsrs	r3, r3, #3
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	4a14      	ldr	r2, [pc, #80]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006c72:	fa22 f303 	lsr.w	r3, r2, r3
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c78:	e01e      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c7a:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d106      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c8e:	d102      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c94:	e010      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006caa:	d102      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cac:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb0:	e002      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006cb6:	e2e2      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cb8:	e2e1      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cbe:	e2de      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cc0:	58024400 	.word	0x58024400
 8006cc4:	03d09000 	.word	0x03d09000
 8006cc8:	003d0900 	.word	0x003d0900
 8006ccc:	017d7840 	.word	0x017d7840
 8006cd0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd8:	e2d1      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cde:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	f040 809c 	bne.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006ce8:	4b93      	ldr	r3, [pc, #588]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006cf0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf8:	d054      	beq.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d00:	f200 808b 	bhi.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d0a:	f000 8083 	beq.w	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d14:	f200 8081 	bhi.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1e:	d02f      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d26:	d878      	bhi.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d34:	d012      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006d36:	e070      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d38:	4b7f      	ldr	r3, [pc, #508]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d44:	d107      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fd5e 	bl	800780c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d54:	e293      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5a:	e290      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d5c:	4b76      	ldr	r3, [pc, #472]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d68:	d107      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6a:	f107 0318 	add.w	r3, r7, #24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 faa4 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d78:	e281      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7e:	e27e      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d80:	4b6d      	ldr	r3, [pc, #436]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d8c:	d107      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d8e:	f107 030c 	add.w	r3, r7, #12
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fbe6 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9c:	e26f      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da2:	e26c      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006da4:	4b64      	ldr	r3, [pc, #400]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dae:	4b62      	ldr	r3, [pc, #392]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d10c      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc0:	4b5d      	ldr	r3, [pc, #372]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	08db      	lsrs	r3, r3, #3
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	4a5c      	ldr	r2, [pc, #368]	; (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd2:	e01e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dd4:	4b58      	ldr	r3, [pc, #352]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de0:	d106      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006de8:	d102      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006dea:	4b55      	ldr	r3, [pc, #340]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dee:	e010      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006df0:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfc:	d106      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e04:	d102      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e06:	4b4f      	ldr	r3, [pc, #316]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0a:	e002      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e10:	e235      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e12:	e234      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e14:	4b4c      	ldr	r3, [pc, #304]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e18:	e231      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e1e:	e22e      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e24:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	f040 808f 	bne.w	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e2e:	4b42      	ldr	r3, [pc, #264]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e32:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006e36:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e3e:	d06b      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e46:	d874      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e4e:	d056      	beq.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e56:	d86c      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e5e:	d03b      	beq.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e66:	d864      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e6e:	d021      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e76:	d85c      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d004      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006e86:	e054      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006e88:	f7fe fa62 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e8e:	e1f6      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e90:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e9c:	d107      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e9e:	f107 0318 	add.w	r3, r7, #24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fa0a 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eac:	e1e7      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb2:	e1e4      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eb4:	4b20      	ldr	r3, [pc, #128]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ec2:	f107 030c 	add.w	r3, r7, #12
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fb4c 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed0:	e1d5      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed6:	e1d2      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ed8:	4b17      	ldr	r3, [pc, #92]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d109      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee4:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef6:	e1c2      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006efc:	e1bf      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006efe:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0a:	d102      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f10:	e1b5      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f16:	e1b2      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f18:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f24:	d102      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2a:	e1a8      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f30:	e1a5      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f36:	e1a2      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f38:	58024400 	.word	0x58024400
 8006f3c:	03d09000 	.word	0x03d09000
 8006f40:	003d0900 	.word	0x003d0900
 8006f44:	017d7840 	.word	0x017d7840
 8006f48:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f50:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006f54:	430b      	orrs	r3, r1
 8006f56:	d173      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006f58:	4b9c      	ldr	r3, [pc, #624]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f68:	d02f      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f70:	d863      	bhi.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7e:	d012      	beq.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006f80:	e05b      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f82:	4b92      	ldr	r3, [pc, #584]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f90:	f107 0318 	add.w	r3, r7, #24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 f991 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f9e:	e16e      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa4:	e16b      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fa6:	4b89      	ldr	r3, [pc, #548]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb2:	d107      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb4:	f107 030c 	add.w	r3, r7, #12
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fad3 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc2:	e15c      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc8:	e159      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fca:	4b80      	ldr	r3, [pc, #512]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fd4:	4b7d      	ldr	r3, [pc, #500]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe6:	4b79      	ldr	r3, [pc, #484]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	08db      	lsrs	r3, r3, #3
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	4a77      	ldr	r2, [pc, #476]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff8:	e01e      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ffa:	4b74      	ldr	r3, [pc, #464]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007006:	d106      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800700e:	d102      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007010:	4b70      	ldr	r3, [pc, #448]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007014:	e010      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007016:	4b6d      	ldr	r3, [pc, #436]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007022:	d106      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702a:	d102      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800702c:	4b6a      	ldr	r3, [pc, #424]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007036:	e122      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007038:	e121      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800703e:	e11e      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007044:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007048:	430b      	orrs	r3, r1
 800704a:	d133      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800704c:	4b5f      	ldr	r3, [pc, #380]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800704e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007054:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007062:	d012      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007064:	e023      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007066:	4b59      	ldr	r3, [pc, #356]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007072:	d107      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fbc7 	bl	800780c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007082:	e0fc      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007088:	e0f9      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800708a:	4b50      	ldr	r3, [pc, #320]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007096:	d107      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f90d 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a6:	e0ea      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ac:	e0e7      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b2:	e0e4      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80070b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80070bc:	430b      	orrs	r3, r1
 80070be:	f040 808d 	bne.w	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80070c2:	4b42      	ldr	r3, [pc, #264]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80070ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070d2:	d06b      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070da:	d874      	bhi.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e2:	d056      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ea:	d86c      	bhi.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070f2:	d03b      	beq.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070fa:	d864      	bhi.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007102:	d021      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800710a:	d85c      	bhi.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007118:	d004      	beq.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800711a:	e054      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800711c:	f000 f8b8 	bl	8007290 <HAL_RCCEx_GetD3PCLK1Freq>
 8007120:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007122:	e0ac      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007124:	4b29      	ldr	r3, [pc, #164]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007130:	d107      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007132:	f107 0318 	add.w	r3, r7, #24
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f8c0 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007140:	e09d      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007146:	e09a      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007148:	4b20      	ldr	r3, [pc, #128]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007154:	d107      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007156:	f107 030c 	add.w	r3, r7, #12
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fa02 	bl	8007564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007164:	e08b      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800716a:	e088      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b04      	cmp	r3, #4
 8007176:	d109      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007178:	4b14      	ldr	r3, [pc, #80]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800718a:	e078      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007190:	e075      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007192:	4b0e      	ldr	r3, [pc, #56]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719e:	d102      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80071a0:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a4:	e06b      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071aa:	e068      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071ac:	4b07      	ldr	r3, [pc, #28]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b8:	d102      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80071ba:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071be:	e05e      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c4:	e05b      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ca:	e058      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071cc:	58024400 	.word	0x58024400
 80071d0:	03d09000 	.word	0x03d09000
 80071d4:	003d0900 	.word	0x003d0900
 80071d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80071dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80071e4:	430b      	orrs	r3, r1
 80071e6:	d148      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80071e8:	4b27      	ldr	r3, [pc, #156]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f8:	d02a      	beq.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007200:	d838      	bhi.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800720e:	d00d      	beq.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007210:	e030      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007212:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721e:	d102      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007220:	4b1a      	ldr	r3, [pc, #104]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007224:	e02b      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800722a:	e028      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800722c:	4b16      	ldr	r3, [pc, #88]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007238:	d107      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800723a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fae4 	bl	800780c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007248:	e019      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800724e:	e016      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007250:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800725c:	d107      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800725e:	f107 0318 	add.w	r3, r7, #24
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f82a 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726c:	e007      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007272:	e004      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007278:	e001      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800727e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007280:	4618      	mov	r0, r3
 8007282:	3740      	adds	r7, #64	; 0x40
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	58024400 	.word	0x58024400
 800728c:	017d7840 	.word	0x017d7840

08007290 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007294:	f7fe f82c 	bl	80052f0 <HAL_RCC_GetHCLKFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	4904      	ldr	r1, [pc, #16]	; (80072b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	58024400 	.word	0x58024400
 80072b8:	0800d4d0 	.word	0x0800d4d0

080072bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072bc:	b480      	push	{r7}
 80072be:	b089      	sub	sp, #36	; 0x24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072c4:	4ba1      	ldr	r3, [pc, #644]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80072ce:	4b9f      	ldr	r3, [pc, #636]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	0b1b      	lsrs	r3, r3, #12
 80072d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80072da:	4b9c      	ldr	r3, [pc, #624]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	091b      	lsrs	r3, r3, #4
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80072e6:	4b99      	ldr	r3, [pc, #612]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	08db      	lsrs	r3, r3, #3
 80072ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8111 	beq.w	800752c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b02      	cmp	r3, #2
 800730e:	f000 8083 	beq.w	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b02      	cmp	r3, #2
 8007316:	f200 80a1 	bhi.w	800745c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d056      	beq.n	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007326:	e099      	b.n	800745c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007328:	4b88      	ldr	r3, [pc, #544]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02d      	beq.n	8007390 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007334:	4b85      	ldr	r3, [pc, #532]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	08db      	lsrs	r3, r3, #3
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	4a84      	ldr	r2, [pc, #528]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007340:	fa22 f303 	lsr.w	r3, r2, r3
 8007344:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	ee07 3a90 	vmov	s15, r3
 800734c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735e:	4b7b      	ldr	r3, [pc, #492]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007372:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800738e:	e087      	b.n	80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800739e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a2:	4b6a      	ldr	r3, [pc, #424]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d2:	e065      	b.n	80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800755c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e6:	4b59      	ldr	r3, [pc, #356]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007416:	e043      	b.n	80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742a:	4b48      	ldr	r3, [pc, #288]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800742c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743a:	ed97 6a03 	vldr	s12, [r7, #12]
 800743e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800745a:	e021      	b.n	80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800755c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800746a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746e:	4b37      	ldr	r3, [pc, #220]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007482:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800749e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074a0:	4b2a      	ldr	r3, [pc, #168]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	0a5b      	lsrs	r3, r3, #9
 80074a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80074be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c6:	ee17 2a90 	vmov	r2, s15
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80074ce:	4b1f      	ldr	r3, [pc, #124]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f4:	ee17 2a90 	vmov	r2, s15
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80074fc:	4b13      	ldr	r3, [pc, #76]	; (800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	0e1b      	lsrs	r3, r3, #24
 8007502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007516:	edd7 6a07 	vldr	s13, [r7, #28]
 800751a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007522:	ee17 2a90 	vmov	r2, s15
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800752a:	e008      	b.n	800753e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
}
 800753e:	bf00      	nop
 8007540:	3724      	adds	r7, #36	; 0x24
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	58024400 	.word	0x58024400
 8007550:	03d09000 	.word	0x03d09000
 8007554:	46000000 	.word	0x46000000
 8007558:	4c742400 	.word	0x4c742400
 800755c:	4a742400 	.word	0x4a742400
 8007560:	4bbebc20 	.word	0x4bbebc20

08007564 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007564:	b480      	push	{r7}
 8007566:	b089      	sub	sp, #36	; 0x24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800756c:	4ba1      	ldr	r3, [pc, #644]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007576:	4b9f      	ldr	r3, [pc, #636]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	0d1b      	lsrs	r3, r3, #20
 800757c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007580:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007582:	4b9c      	ldr	r3, [pc, #624]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800758e:	4b99      	ldr	r3, [pc, #612]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	08db      	lsrs	r3, r3, #3
 8007594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	fb02 f303 	mul.w	r3, r2, r3
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8111 	beq.w	80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	f000 8083 	beq.w	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	f200 80a1 	bhi.w	8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d056      	beq.n	800767c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80075ce:	e099      	b.n	8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d0:	4b88      	ldr	r3, [pc, #544]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d02d      	beq.n	8007638 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075dc:	4b85      	ldr	r3, [pc, #532]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	08db      	lsrs	r3, r3, #3
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	4a84      	ldr	r2, [pc, #528]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007606:	4b7b      	ldr	r3, [pc, #492]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007616:	ed97 6a03 	vldr	s12, [r7, #12]
 800761a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800761e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007632:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007636:	e087      	b.n	8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764a:	4b6a      	ldr	r3, [pc, #424]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765a:	ed97 6a03 	vldr	s12, [r7, #12]
 800765e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800767a:	e065      	b.n	8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007686:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800768a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768e:	4b59      	ldr	r3, [pc, #356]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769e:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076be:	e043      	b.n	8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80076ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d2:	4b48      	ldr	r3, [pc, #288]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007702:	e021      	b.n	8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007716:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007726:	ed97 6a03 	vldr	s12, [r7, #12]
 800772a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800772e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007746:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007748:	4b2a      	ldr	r3, [pc, #168]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	0a5b      	lsrs	r3, r3, #9
 800774e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800775e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007762:	edd7 6a07 	vldr	s13, [r7, #28]
 8007766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776e:	ee17 2a90 	vmov	r2, s15
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007776:	4b1f      	ldr	r3, [pc, #124]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	0c1b      	lsrs	r3, r3, #16
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	ee07 3a90 	vmov	s15, r3
 8007784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800778c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007790:	edd7 6a07 	vldr	s13, [r7, #28]
 8007794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800779c:	ee17 2a90 	vmov	r2, s15
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077a4:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	0e1b      	lsrs	r3, r3, #24
 80077aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077be:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ca:	ee17 2a90 	vmov	r2, s15
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077d2:	e008      	b.n	80077e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	609a      	str	r2, [r3, #8]
}
 80077e6:	bf00      	nop
 80077e8:	3724      	adds	r7, #36	; 0x24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400
 80077f8:	03d09000 	.word	0x03d09000
 80077fc:	46000000 	.word	0x46000000
 8007800:	4c742400 	.word	0x4c742400
 8007804:	4a742400 	.word	0x4a742400
 8007808:	4bbebc20 	.word	0x4bbebc20

0800780c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800780c:	b480      	push	{r7}
 800780e:	b089      	sub	sp, #36	; 0x24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007814:	4ba0      	ldr	r3, [pc, #640]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	f003 0303 	and.w	r3, r3, #3
 800781c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800781e:	4b9e      	ldr	r3, [pc, #632]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	091b      	lsrs	r3, r3, #4
 8007824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007828:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800782a:	4b9b      	ldr	r3, [pc, #620]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007834:	4b98      	ldr	r3, [pc, #608]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	08db      	lsrs	r3, r3, #3
 800783a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	fb02 f303 	mul.w	r3, r2, r3
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 8111 	beq.w	8007a7a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b02      	cmp	r3, #2
 800785c:	f000 8083 	beq.w	8007966 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b02      	cmp	r3, #2
 8007864:	f200 80a1 	bhi.w	80079aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d056      	beq.n	8007922 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007874:	e099      	b.n	80079aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007876:	4b88      	ldr	r3, [pc, #544]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d02d      	beq.n	80078de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007882:	4b85      	ldr	r3, [pc, #532]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	4a83      	ldr	r2, [pc, #524]	; (8007a9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800788e:	fa22 f303 	lsr.w	r3, r2, r3
 8007892:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ac:	4b7a      	ldr	r3, [pc, #488]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b4:	ee07 3a90 	vmov	s15, r3
 80078b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078dc:	e087      	b.n	80079ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80078ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f0:	4b69      	ldr	r3, [pc, #420]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007900:	ed97 6a03 	vldr	s12, [r7, #12]
 8007904:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007920:	e065      	b.n	80079ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007934:	4b58      	ldr	r3, [pc, #352]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007944:	ed97 6a03 	vldr	s12, [r7, #12]
 8007948:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800794c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007960:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007964:	e043      	b.n	80079ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007970:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007978:	4b47      	ldr	r3, [pc, #284]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007980:	ee07 3a90 	vmov	s15, r3
 8007984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007988:	ed97 6a03 	vldr	s12, [r7, #12]
 800798c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800799c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a8:	e021      	b.n	80079ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	ee07 3a90 	vmov	s15, r3
 80079b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80079b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079bc:	4b36      	ldr	r3, [pc, #216]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80079ee:	4b2a      	ldr	r3, [pc, #168]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	0a5b      	lsrs	r3, r3, #9
 80079f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a14:	ee17 2a90 	vmov	r2, s15
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a1c:	4b1e      	ldr	r3, [pc, #120]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a20:	0c1b      	lsrs	r3, r3, #16
 8007a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a42:	ee17 2a90 	vmov	r2, s15
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007a4a:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	0e1b      	lsrs	r3, r3, #24
 8007a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a70:	ee17 2a90 	vmov	r2, s15
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a78:	e008      	b.n	8007a8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	609a      	str	r2, [r3, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	3724      	adds	r7, #36	; 0x24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	03d09000 	.word	0x03d09000
 8007aa0:	46000000 	.word	0x46000000
 8007aa4:	4c742400 	.word	0x4c742400
 8007aa8:	4a742400 	.word	0x4a742400
 8007aac:	4bbebc20 	.word	0x4bbebc20

08007ab0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007abe:	4b53      	ldr	r3, [pc, #332]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d101      	bne.n	8007ace <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e099      	b.n	8007c02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ace:	4b4f      	ldr	r3, [pc, #316]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a4e      	ldr	r2, [pc, #312]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007ad4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ada:	f7f9 fec7 	bl	800186c <HAL_GetTick>
 8007ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ae0:	e008      	b.n	8007af4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ae2:	f7f9 fec3 	bl	800186c <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d901      	bls.n	8007af4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e086      	b.n	8007c02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007af4:	4b45      	ldr	r3, [pc, #276]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1f0      	bne.n	8007ae2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b00:	4b42      	ldr	r3, [pc, #264]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	031b      	lsls	r3, r3, #12
 8007b0e:	493f      	ldr	r1, [pc, #252]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	628b      	str	r3, [r1, #40]	; 0x28
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	025b      	lsls	r3, r3, #9
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	061b      	lsls	r3, r3, #24
 8007b40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b44:	4931      	ldr	r1, [pc, #196]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b4a:	4b30      	ldr	r3, [pc, #192]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	492d      	ldr	r1, [pc, #180]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b5c:	4b2b      	ldr	r3, [pc, #172]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	f023 0220 	bic.w	r2, r3, #32
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	4928      	ldr	r1, [pc, #160]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b6e:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b74:	f023 0310 	bic.w	r3, r3, #16
 8007b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b7a:	4b24      	ldr	r3, [pc, #144]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b7e:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <RCCEx_PLL2_Config+0x160>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	69d2      	ldr	r2, [r2, #28]
 8007b86:	00d2      	lsls	r2, r2, #3
 8007b88:	4920      	ldr	r1, [pc, #128]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b8e:	4b1f      	ldr	r3, [pc, #124]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	4a1e      	ldr	r2, [pc, #120]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007b94:	f043 0310 	orr.w	r3, r3, #16
 8007b98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d106      	bne.n	8007bae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bac:	e00f      	b.n	8007bce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d106      	bne.n	8007bc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bb4:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a14      	ldr	r2, [pc, #80]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bc0:	e005      	b.n	8007bce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bc2:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a0e      	ldr	r2, [pc, #56]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bda:	f7f9 fe47 	bl	800186c <HAL_GetTick>
 8007bde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007be0:	e008      	b.n	8007bf4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007be2:	f7f9 fe43 	bl	800186c <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d901      	bls.n	8007bf4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e006      	b.n	8007c02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <RCCEx_PLL2_Config+0x15c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f0      	beq.n	8007be2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	ffff0007 	.word	0xffff0007

08007c14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c22:	4b53      	ldr	r3, [pc, #332]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d101      	bne.n	8007c32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e099      	b.n	8007d66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c32:	4b4f      	ldr	r3, [pc, #316]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a4e      	ldr	r2, [pc, #312]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3e:	f7f9 fe15 	bl	800186c <HAL_GetTick>
 8007c42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c44:	e008      	b.n	8007c58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c46:	f7f9 fe11 	bl	800186c <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d901      	bls.n	8007c58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e086      	b.n	8007d66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c58:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f0      	bne.n	8007c46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c64:	4b42      	ldr	r3, [pc, #264]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	051b      	lsls	r3, r3, #20
 8007c72:	493f      	ldr	r1, [pc, #252]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	628b      	str	r3, [r1, #40]	; 0x28
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	025b      	lsls	r3, r3, #9
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	061b      	lsls	r3, r3, #24
 8007ca4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ca8:	4931      	ldr	r1, [pc, #196]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cae:	4b30      	ldr	r3, [pc, #192]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	492d      	ldr	r1, [pc, #180]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cc0:	4b2b      	ldr	r3, [pc, #172]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	4928      	ldr	r1, [pc, #160]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cd2:	4b27      	ldr	r3, [pc, #156]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	4a26      	ldr	r2, [pc, #152]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cde:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ce2:	4b24      	ldr	r3, [pc, #144]	; (8007d74 <RCCEx_PLL3_Config+0x160>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	69d2      	ldr	r2, [r2, #28]
 8007cea:	00d2      	lsls	r2, r2, #3
 8007cec:	4920      	ldr	r1, [pc, #128]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cf2:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d106      	bne.n	8007d12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d04:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	4a19      	ldr	r2, [pc, #100]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d10:	e00f      	b.n	8007d32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d106      	bne.n	8007d26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d18:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a14      	ldr	r2, [pc, #80]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d24:	e005      	b.n	8007d32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d26:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	4a11      	ldr	r2, [pc, #68]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a0e      	ldr	r2, [pc, #56]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3e:	f7f9 fd95 	bl	800186c <HAL_GetTick>
 8007d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d44:	e008      	b.n	8007d58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d46:	f7f9 fd91 	bl	800186c <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e006      	b.n	8007d66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <RCCEx_PLL3_Config+0x15c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0f0      	beq.n	8007d46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
 8007d74:	ffff0007 	.word	0xffff0007

08007d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e049      	b.n	8007e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7f9 fba0 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f000 f8a6 	bl	8007f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d001      	beq.n	8007e40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e04c      	b.n	8007eda <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a26      	ldr	r2, [pc, #152]	; (8007ee8 <HAL_TIM_Base_Start+0xc0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d022      	beq.n	8007e98 <HAL_TIM_Base_Start+0x70>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5a:	d01d      	beq.n	8007e98 <HAL_TIM_Base_Start+0x70>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a22      	ldr	r2, [pc, #136]	; (8007eec <HAL_TIM_Base_Start+0xc4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d018      	beq.n	8007e98 <HAL_TIM_Base_Start+0x70>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a21      	ldr	r2, [pc, #132]	; (8007ef0 <HAL_TIM_Base_Start+0xc8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d013      	beq.n	8007e98 <HAL_TIM_Base_Start+0x70>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1f      	ldr	r2, [pc, #124]	; (8007ef4 <HAL_TIM_Base_Start+0xcc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00e      	beq.n	8007e98 <HAL_TIM_Base_Start+0x70>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <HAL_TIM_Base_Start+0xd0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d009      	beq.n	8007e98 <HAL_TIM_Base_Start+0x70>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <HAL_TIM_Base_Start+0xd4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <HAL_TIM_Base_Start+0x70>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <HAL_TIM_Base_Start+0xd8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d115      	bne.n	8007ec4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	4b19      	ldr	r3, [pc, #100]	; (8007f04 <HAL_TIM_Base_Start+0xdc>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b06      	cmp	r3, #6
 8007ea8:	d015      	beq.n	8007ed6 <HAL_TIM_Base_Start+0xae>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb0:	d011      	beq.n	8007ed6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0201 	orr.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec2:	e008      	b.n	8007ed6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e000      	b.n	8007ed8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40010000 	.word	0x40010000
 8007eec:	40000400 	.word	0x40000400
 8007ef0:	40000800 	.word	0x40000800
 8007ef4:	40000c00 	.word	0x40000c00
 8007ef8:	40010400 	.word	0x40010400
 8007efc:	40001800 	.word	0x40001800
 8007f00:	40014000 	.word	0x40014000
 8007f04:	00010007 	.word	0x00010007

08007f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a40      	ldr	r2, [pc, #256]	; (800801c <TIM_Base_SetConfig+0x114>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d013      	beq.n	8007f48 <TIM_Base_SetConfig+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f26:	d00f      	beq.n	8007f48 <TIM_Base_SetConfig+0x40>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a3d      	ldr	r2, [pc, #244]	; (8008020 <TIM_Base_SetConfig+0x118>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00b      	beq.n	8007f48 <TIM_Base_SetConfig+0x40>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a3c      	ldr	r2, [pc, #240]	; (8008024 <TIM_Base_SetConfig+0x11c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d007      	beq.n	8007f48 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a3b      	ldr	r2, [pc, #236]	; (8008028 <TIM_Base_SetConfig+0x120>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_Base_SetConfig+0x40>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a3a      	ldr	r2, [pc, #232]	; (800802c <TIM_Base_SetConfig+0x124>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d108      	bne.n	8007f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a2f      	ldr	r2, [pc, #188]	; (800801c <TIM_Base_SetConfig+0x114>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01f      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f68:	d01b      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2c      	ldr	r2, [pc, #176]	; (8008020 <TIM_Base_SetConfig+0x118>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d017      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a2b      	ldr	r2, [pc, #172]	; (8008024 <TIM_Base_SetConfig+0x11c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2a      	ldr	r2, [pc, #168]	; (8008028 <TIM_Base_SetConfig+0x120>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00f      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a29      	ldr	r2, [pc, #164]	; (800802c <TIM_Base_SetConfig+0x124>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00b      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a28      	ldr	r2, [pc, #160]	; (8008030 <TIM_Base_SetConfig+0x128>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a27      	ldr	r2, [pc, #156]	; (8008034 <TIM_Base_SetConfig+0x12c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_Base_SetConfig+0x9a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a26      	ldr	r2, [pc, #152]	; (8008038 <TIM_Base_SetConfig+0x130>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d108      	bne.n	8007fb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a10      	ldr	r2, [pc, #64]	; (800801c <TIM_Base_SetConfig+0x114>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00f      	beq.n	8008000 <TIM_Base_SetConfig+0xf8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a12      	ldr	r2, [pc, #72]	; (800802c <TIM_Base_SetConfig+0x124>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <TIM_Base_SetConfig+0xf8>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a11      	ldr	r2, [pc, #68]	; (8008030 <TIM_Base_SetConfig+0x128>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d007      	beq.n	8008000 <TIM_Base_SetConfig+0xf8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a10      	ldr	r2, [pc, #64]	; (8008034 <TIM_Base_SetConfig+0x12c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d003      	beq.n	8008000 <TIM_Base_SetConfig+0xf8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a0f      	ldr	r2, [pc, #60]	; (8008038 <TIM_Base_SetConfig+0x130>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d103      	bne.n	8008008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	615a      	str	r2, [r3, #20]
}
 800800e:	bf00      	nop
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40010000 	.word	0x40010000
 8008020:	40000400 	.word	0x40000400
 8008024:	40000800 	.word	0x40000800
 8008028:	40000c00 	.word	0x40000c00
 800802c:	40010400 	.word	0x40010400
 8008030:	40014000 	.word	0x40014000
 8008034:	40014400 	.word	0x40014400
 8008038:	40014800 	.word	0x40014800

0800803c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800803c:	b084      	sub	sp, #16
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	f107 001c 	add.w	r0, r7, #28
 800804a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2b01      	cmp	r3, #1
 8008052:	d120      	bne.n	8008096 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	4b2a      	ldr	r3, [pc, #168]	; (8008110 <USB_CoreInit+0xd4>)
 8008066:	4013      	ands	r3, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d105      	bne.n	800808a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 faf8 	bl	8009680 <USB_CoreReset>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e01a      	b.n	80080cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 faec 	bl	8009680 <USB_CoreReset>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	639a      	str	r2, [r3, #56]	; 0x38
 80080be:	e005      	b.n	80080cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d116      	bne.n	8008100 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <USB_CoreInit+0xd8>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f043 0206 	orr.w	r2, r3, #6
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f043 0220 	orr.w	r2, r3, #32
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800810c:	b004      	add	sp, #16
 800810e:	4770      	bx	lr
 8008110:	ffbdffbf 	.word	0xffbdffbf
 8008114:	03ee0000 	.word	0x03ee0000

08008118 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d165      	bne.n	80081f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4a41      	ldr	r2, [pc, #260]	; (8008234 <USB_SetTurnaroundTime+0x11c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d906      	bls.n	8008142 <USB_SetTurnaroundTime+0x2a>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4a40      	ldr	r2, [pc, #256]	; (8008238 <USB_SetTurnaroundTime+0x120>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d202      	bcs.n	8008142 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800813c:	230f      	movs	r3, #15
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e062      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	4a3c      	ldr	r2, [pc, #240]	; (8008238 <USB_SetTurnaroundTime+0x120>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d306      	bcc.n	8008158 <USB_SetTurnaroundTime+0x40>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4a3b      	ldr	r2, [pc, #236]	; (800823c <USB_SetTurnaroundTime+0x124>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d202      	bcs.n	8008158 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008152:	230e      	movs	r3, #14
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e057      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4a38      	ldr	r2, [pc, #224]	; (800823c <USB_SetTurnaroundTime+0x124>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d306      	bcc.n	800816e <USB_SetTurnaroundTime+0x56>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4a37      	ldr	r2, [pc, #220]	; (8008240 <USB_SetTurnaroundTime+0x128>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d202      	bcs.n	800816e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008168:	230d      	movs	r3, #13
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e04c      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4a33      	ldr	r2, [pc, #204]	; (8008240 <USB_SetTurnaroundTime+0x128>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d306      	bcc.n	8008184 <USB_SetTurnaroundTime+0x6c>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4a32      	ldr	r2, [pc, #200]	; (8008244 <USB_SetTurnaroundTime+0x12c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d802      	bhi.n	8008184 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800817e:	230c      	movs	r3, #12
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	e041      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4a2f      	ldr	r2, [pc, #188]	; (8008244 <USB_SetTurnaroundTime+0x12c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d906      	bls.n	800819a <USB_SetTurnaroundTime+0x82>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a2e      	ldr	r2, [pc, #184]	; (8008248 <USB_SetTurnaroundTime+0x130>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d802      	bhi.n	800819a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008194:	230b      	movs	r3, #11
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e036      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4a2a      	ldr	r2, [pc, #168]	; (8008248 <USB_SetTurnaroundTime+0x130>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d906      	bls.n	80081b0 <USB_SetTurnaroundTime+0x98>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a29      	ldr	r2, [pc, #164]	; (800824c <USB_SetTurnaroundTime+0x134>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d802      	bhi.n	80081b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081aa:	230a      	movs	r3, #10
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	e02b      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4a26      	ldr	r2, [pc, #152]	; (800824c <USB_SetTurnaroundTime+0x134>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d906      	bls.n	80081c6 <USB_SetTurnaroundTime+0xae>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4a25      	ldr	r2, [pc, #148]	; (8008250 <USB_SetTurnaroundTime+0x138>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d202      	bcs.n	80081c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081c0:	2309      	movs	r3, #9
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	e020      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4a21      	ldr	r2, [pc, #132]	; (8008250 <USB_SetTurnaroundTime+0x138>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d306      	bcc.n	80081dc <USB_SetTurnaroundTime+0xc4>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a20      	ldr	r2, [pc, #128]	; (8008254 <USB_SetTurnaroundTime+0x13c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d802      	bhi.n	80081dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081d6:	2308      	movs	r3, #8
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	e015      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <USB_SetTurnaroundTime+0x13c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d906      	bls.n	80081f2 <USB_SetTurnaroundTime+0xda>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a1c      	ldr	r2, [pc, #112]	; (8008258 <USB_SetTurnaroundTime+0x140>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d202      	bcs.n	80081f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081ec:	2307      	movs	r3, #7
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e00a      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081f2:	2306      	movs	r3, #6
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e007      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d102      	bne.n	8008204 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80081fe:	2309      	movs	r3, #9
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	e001      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008204:	2309      	movs	r3, #9
 8008206:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	029b      	lsls	r3, r3, #10
 800821c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008220:	431a      	orrs	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	00d8acbf 	.word	0x00d8acbf
 8008238:	00e4e1c0 	.word	0x00e4e1c0
 800823c:	00f42400 	.word	0x00f42400
 8008240:	01067380 	.word	0x01067380
 8008244:	011a499f 	.word	0x011a499f
 8008248:	01312cff 	.word	0x01312cff
 800824c:	014ca43f 	.word	0x014ca43f
 8008250:	016e3600 	.word	0x016e3600
 8008254:	01a6ab1f 	.word	0x01a6ab1f
 8008258:	01e84800 	.word	0x01e84800

0800825c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f043 0201 	orr.w	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f023 0201 	bic.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d115      	bne.n	80082ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082ce:	2001      	movs	r0, #1
 80082d0:	f7f9 fad8 	bl	8001884 <HAL_Delay>
      ms++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 f93f 	bl	800955e <USB_GetMode>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d01e      	beq.n	8008324 <USB_SetCurrentMode+0x84>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b31      	cmp	r3, #49	; 0x31
 80082ea:	d9f0      	bls.n	80082ce <USB_SetCurrentMode+0x2e>
 80082ec:	e01a      	b.n	8008324 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d115      	bne.n	8008320 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008300:	2001      	movs	r0, #1
 8008302:	f7f9 fabf 	bl	8001884 <HAL_Delay>
      ms++;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f001 f926 	bl	800955e <USB_GetMode>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <USB_SetCurrentMode+0x84>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b31      	cmp	r3, #49	; 0x31
 800831c:	d9f0      	bls.n	8008300 <USB_SetCurrentMode+0x60>
 800831e:	e001      	b.n	8008324 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e005      	b.n	8008330 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b32      	cmp	r3, #50	; 0x32
 8008328:	d101      	bne.n	800832e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008338:	b084      	sub	sp, #16
 800833a:	b580      	push	{r7, lr}
 800833c:	b086      	sub	sp, #24
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008352:	2300      	movs	r3, #0
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	e009      	b.n	800836c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	3340      	adds	r3, #64	; 0x40
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	2200      	movs	r2, #0
 8008364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	3301      	adds	r3, #1
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b0e      	cmp	r3, #14
 8008370:	d9f2      	bls.n	8008358 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11c      	bne.n	80083b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008386:	f043 0302 	orr.w	r3, r3, #2
 800838a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	e005      	b.n	80083be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c4:	461a      	mov	r2, r3
 80083c6:	2300      	movs	r3, #0
 80083c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d0:	4619      	mov	r1, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d8:	461a      	mov	r2, r3
 80083da:	680b      	ldr	r3, [r1, #0]
 80083dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d10c      	bne.n	80083fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d104      	bne.n	80083f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083ea:	2100      	movs	r1, #0
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f965 	bl	80086bc <USB_SetDevSpeed>
 80083f2:	e008      	b.n	8008406 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083f4:	2101      	movs	r1, #1
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f960 	bl	80086bc <USB_SetDevSpeed>
 80083fc:	e003      	b.n	8008406 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083fe:	2103      	movs	r1, #3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f95b 	bl	80086bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008406:	2110      	movs	r1, #16
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f8f3 	bl	80085f4 <USB_FlushTxFifo>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f91f 	bl	800865c <USB_FlushRxFifo>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842e:	461a      	mov	r2, r3
 8008430:	2300      	movs	r3, #0
 8008432:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843a:	461a      	mov	r2, r3
 800843c:	2300      	movs	r3, #0
 800843e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	461a      	mov	r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	e043      	b.n	80084da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008468:	d118      	bne.n	800849c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847c:	461a      	mov	r2, r3
 800847e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	e013      	b.n	80084ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008492:	461a      	mov	r2, r3
 8008494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	e008      	b.n	80084ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a8:	461a      	mov	r2, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ba:	461a      	mov	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	461a      	mov	r2, r3
 80084ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	3301      	adds	r3, #1
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d3b7      	bcc.n	8008452 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	e043      	b.n	8008570 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084fe:	d118      	bne.n	8008532 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008512:	461a      	mov	r2, r3
 8008514:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	e013      	b.n	8008544 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	461a      	mov	r2, r3
 800852a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	e008      	b.n	8008544 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853e:	461a      	mov	r2, r3
 8008540:	2300      	movs	r3, #0
 8008542:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	461a      	mov	r2, r3
 8008552:	2300      	movs	r3, #0
 8008554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	461a      	mov	r2, r3
 8008564:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3301      	adds	r3, #1
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	d3b7      	bcc.n	80084e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800858a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008598:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d105      	bne.n	80085ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f043 0210 	orr.w	r2, r3, #16
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <USB_DevInit+0x2b4>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	f043 0208 	orr.w	r2, r3, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d105      	bne.n	80085dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699a      	ldr	r2, [r3, #24]
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <USB_DevInit+0x2b8>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085e8:	b004      	add	sp, #16
 80085ea:	4770      	bx	lr
 80085ec:	803c3800 	.word	0x803c3800
 80085f0:	40000004 	.word	0x40000004

080085f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4a13      	ldr	r2, [pc, #76]	; (8008658 <USB_FlushTxFifo+0x64>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d901      	bls.n	8008614 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e01b      	b.n	800864c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	daf2      	bge.n	8008602 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	019b      	lsls	r3, r3, #6
 8008624:	f043 0220 	orr.w	r2, r3, #32
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4a08      	ldr	r2, [pc, #32]	; (8008658 <USB_FlushTxFifo+0x64>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d901      	bls.n	800863e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e006      	b.n	800864c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b20      	cmp	r3, #32
 8008648:	d0f0      	beq.n	800862c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	00030d40 	.word	0x00030d40

0800865c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3301      	adds	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a11      	ldr	r2, [pc, #68]	; (80086b8 <USB_FlushRxFifo+0x5c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d901      	bls.n	800867a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e018      	b.n	80086ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	daf2      	bge.n	8008668 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2210      	movs	r2, #16
 800868a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4a08      	ldr	r2, [pc, #32]	; (80086b8 <USB_FlushRxFifo+0x5c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d901      	bls.n	800869e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e006      	b.n	80086ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b10      	cmp	r3, #16
 80086a8:	d0f0      	beq.n	800868c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	00030d40 	.word	0x00030d40

080086bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	68f9      	ldr	r1, [r7, #12]
 80086d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086dc:	4313      	orrs	r3, r2
 80086de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b087      	sub	sp, #28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f003 0306 	and.w	r3, r3, #6
 8008706:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
 8008712:	e00a      	b.n	800872a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d002      	beq.n	8008720 <USB_GetDevSpeed+0x32>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b06      	cmp	r3, #6
 800871e:	d102      	bne.n	8008726 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008720:	2302      	movs	r3, #2
 8008722:	75fb      	strb	r3, [r7, #23]
 8008724:	e001      	b.n	800872a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008726:	230f      	movs	r3, #15
 8008728:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
}
 800872c:	4618      	mov	r0, r3
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d139      	bne.n	80087c8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875a:	69da      	ldr	r2, [r3, #28]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	2101      	movs	r1, #1
 8008766:	fa01 f303 	lsl.w	r3, r1, r3
 800876a:	b29b      	uxth	r3, r3
 800876c:	68f9      	ldr	r1, [r7, #12]
 800876e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008772:	4313      	orrs	r3, r2
 8008774:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d153      	bne.n	8008834 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	791b      	ldrb	r3, [r3, #4]
 80087a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	059b      	lsls	r3, r3, #22
 80087ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087b0:	431a      	orrs	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	0159      	lsls	r1, r3, #5
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	440b      	add	r3, r1
 80087ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087be:	4619      	mov	r1, r3
 80087c0:	4b20      	ldr	r3, [pc, #128]	; (8008844 <USB_ActivateEndpoint+0x10c>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	600b      	str	r3, [r1, #0]
 80087c6:	e035      	b.n	8008834 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	2101      	movs	r1, #1
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	68f9      	ldr	r1, [r7, #12]
 80087e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d119      	bne.n	8008834 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	791b      	ldrb	r3, [r3, #4]
 800881a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800881c:	430b      	orrs	r3, r1
 800881e:	431a      	orrs	r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	0159      	lsls	r1, r3, #5
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	440b      	add	r3, r1
 8008828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882c:	4619      	mov	r1, r3
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <USB_ActivateEndpoint+0x10c>)
 8008830:	4313      	orrs	r3, r2
 8008832:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	10008000 	.word	0x10008000

08008848 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d161      	bne.n	8008928 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887a:	d11f      	bne.n	80088bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800889a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	2101      	movs	r1, #1
 80088ce:	fa01 f303 	lsl.w	r3, r1, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	43db      	mvns	r3, r3
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088dc:	4013      	ands	r3, r2
 80088de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	2101      	movs	r1, #1
 80088f2:	fa01 f303 	lsl.w	r3, r1, r3
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008900:	4013      	ands	r3, r2
 8008902:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	0159      	lsls	r1, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	440b      	add	r3, r1
 800891a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891e:	4619      	mov	r1, r3
 8008920:	4b35      	ldr	r3, [pc, #212]	; (80089f8 <USB_DeactivateEndpoint+0x1b0>)
 8008922:	4013      	ands	r3, r2
 8008924:	600b      	str	r3, [r1, #0]
 8008926:	e060      	b.n	80089ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800893a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800893e:	d11f      	bne.n	8008980 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	440a      	add	r2, r1
 8008956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800895e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	440a      	add	r2, r1
 8008976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800897a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800897e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	2101      	movs	r1, #1
 8008992:	fa01 f303 	lsl.w	r3, r1, r3
 8008996:	041b      	lsls	r3, r3, #16
 8008998:	43db      	mvns	r3, r3
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a0:	4013      	ands	r3, r2
 80089a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 030f 	and.w	r3, r3, #15
 80089b4:	2101      	movs	r1, #1
 80089b6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ba:	041b      	lsls	r3, r3, #16
 80089bc:	43db      	mvns	r3, r3
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c4:	4013      	ands	r3, r2
 80089c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	0159      	lsls	r1, r3, #5
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	440b      	add	r3, r1
 80089de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e2:	4619      	mov	r1, r3
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <USB_DeactivateEndpoint+0x1b4>)
 80089e6:	4013      	ands	r3, r2
 80089e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	ec337800 	.word	0xec337800
 80089fc:	eff37800 	.word	0xeff37800

08008a00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	; 0x28
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	f040 8181 	bne.w	8008d24 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d132      	bne.n	8008a90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	0159      	lsls	r1, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	440b      	add	r3, r1
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	4619      	mov	r1, r3
 8008a46:	4ba5      	ldr	r3, [pc, #660]	; (8008cdc <USB_EPStartXfer+0x2dc>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	0159      	lsls	r1, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	440b      	add	r3, r1
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	4619      	mov	r1, r3
 8008a88:	4b95      	ldr	r3, [pc, #596]	; (8008ce0 <USB_EPStartXfer+0x2e0>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	610b      	str	r3, [r1, #16]
 8008a8e:	e092      	b.n	8008bb6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	0159      	lsls	r1, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	440b      	add	r3, r1
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4b8c      	ldr	r3, [pc, #560]	; (8008ce0 <USB_EPStartXfer+0x2e0>)
 8008aae:	4013      	ands	r3, r2
 8008ab0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	0159      	lsls	r1, r3, #5
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	440b      	add	r3, r1
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	4619      	mov	r1, r3
 8008ace:	4b83      	ldr	r3, [pc, #524]	; (8008cdc <USB_EPStartXfer+0x2dc>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d11a      	bne.n	8008b10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d903      	bls.n	8008aee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	69fa      	ldr	r2, [r7, #28]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b0c:	6113      	str	r3, [r2, #16]
 8008b0e:	e01b      	b.n	8008b48 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	6919      	ldr	r1, [r3, #16]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	440b      	add	r3, r1
 8008b28:	1e59      	subs	r1, r3, #1
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b32:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b34:	4b6b      	ldr	r3, [pc, #428]	; (8008ce4 <USB_EPStartXfer+0x2e4>)
 8008b36:	400b      	ands	r3, r1
 8008b38:	69b9      	ldr	r1, [r7, #24]
 8008b3a:	0148      	lsls	r0, r1, #5
 8008b3c:	69f9      	ldr	r1, [r7, #28]
 8008b3e:	4401      	add	r1, r0
 8008b40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b44:	4313      	orrs	r3, r2
 8008b46:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	691a      	ldr	r2, [r3, #16]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b5e:	69b9      	ldr	r1, [r7, #24]
 8008b60:	0148      	lsls	r0, r1, #5
 8008b62:	69f9      	ldr	r1, [r7, #28]
 8008b64:	4401      	add	r1, r0
 8008b66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	791b      	ldrb	r3, [r3, #4]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d11f      	bne.n	8008bb6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	0151      	lsls	r1, r2, #5
 8008b88:	69fa      	ldr	r2, [r7, #28]
 8008b8a:	440a      	add	r2, r1
 8008b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d14b      	bne.n	8008c54 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	791b      	ldrb	r3, [r3, #4]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d128      	bne.n	8008c32 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d110      	bne.n	8008c12 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	e00f      	b.n	8008c32 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	e16a      	b.n	8008f2a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	791b      	ldrb	r3, [r3, #4]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d015      	beq.n	8008ca8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 8152 	beq.w	8008f2a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	2101      	movs	r1, #1
 8008c98:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9c:	69f9      	ldr	r1, [r7, #28]
 8008c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	634b      	str	r3, [r1, #52]	; 0x34
 8008ca6:	e140      	b.n	8008f2a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d117      	bne.n	8008ce8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	0151      	lsls	r1, r2, #5
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	440a      	add	r2, r1
 8008cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	e016      	b.n	8008d08 <USB_EPStartXfer+0x308>
 8008cda:	bf00      	nop
 8008cdc:	e007ffff 	.word	0xe007ffff
 8008ce0:	fff80000 	.word	0xfff80000
 8008ce4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	0151      	lsls	r1, r2, #5
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	440a      	add	r2, r1
 8008cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d06:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	68d9      	ldr	r1, [r3, #12]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	b298      	uxth	r0, r3
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f9b9 	bl	8009094 <USB_WritePacket>
 8008d22:	e102      	b.n	8008f2a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d30:	691a      	ldr	r2, [r3, #16]
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	0159      	lsls	r1, r3, #5
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	440b      	add	r3, r1
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4b7c      	ldr	r3, [pc, #496]	; (8008f34 <USB_EPStartXfer+0x534>)
 8008d42:	4013      	ands	r3, r2
 8008d44:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	0159      	lsls	r1, r3, #5
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	4619      	mov	r1, r3
 8008d62:	4b75      	ldr	r3, [pc, #468]	; (8008f38 <USB_EPStartXfer+0x538>)
 8008d64:	4013      	ands	r3, r2
 8008d66:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d12f      	bne.n	8008dce <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d9c:	69b9      	ldr	r1, [r7, #24]
 8008d9e:	0148      	lsls	r0, r1, #5
 8008da0:	69f9      	ldr	r1, [r7, #28]
 8008da2:	4401      	add	r1, r0
 8008da4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008da8:	4313      	orrs	r3, r2
 8008daa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	0151      	lsls	r1, r2, #5
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dca:	6113      	str	r3, [r2, #16]
 8008dcc:	e05f      	b.n	8008e8e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d123      	bne.n	8008e1e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dec:	69b9      	ldr	r1, [r7, #24]
 8008dee:	0148      	lsls	r0, r1, #5
 8008df0:	69f9      	ldr	r1, [r7, #28]
 8008df2:	4401      	add	r1, r0
 8008df4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	0151      	lsls	r1, r2, #5
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	440a      	add	r2, r1
 8008e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e1a:	6113      	str	r3, [r2, #16]
 8008e1c:	e037      	b.n	8008e8e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4413      	add	r3, r2
 8008e28:	1e5a      	subs	r2, r3, #1
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e32:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	8afa      	ldrh	r2, [r7, #22]
 8008e3a:	fb03 f202 	mul.w	r2, r3, r2
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	8afb      	ldrh	r3, [r7, #22]
 8008e52:	04d9      	lsls	r1, r3, #19
 8008e54:	4b39      	ldr	r3, [pc, #228]	; (8008f3c <USB_EPStartXfer+0x53c>)
 8008e56:	400b      	ands	r3, r1
 8008e58:	69b9      	ldr	r1, [r7, #24]
 8008e5a:	0148      	lsls	r0, r1, #5
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	4401      	add	r1, r0
 8008e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e64:	4313      	orrs	r3, r2
 8008e66:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e74:	691a      	ldr	r2, [r3, #16]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e7e:	69b9      	ldr	r1, [r7, #24]
 8008e80:	0148      	lsls	r0, r1, #5
 8008e82:	69f9      	ldr	r1, [r7, #28]
 8008e84:	4401      	add	r1, r0
 8008e86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d10d      	bne.n	8008eb0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d009      	beq.n	8008eb0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	68d9      	ldr	r1, [r3, #12]
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eac:	460a      	mov	r2, r1
 8008eae:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	791b      	ldrb	r3, [r3, #4]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d128      	bne.n	8008f0a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d110      	bne.n	8008eea <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	0151      	lsls	r1, r2, #5
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	440a      	add	r2, r1
 8008ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	e00f      	b.n	8008f0a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	0151      	lsls	r1, r2, #5
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	440a      	add	r2, r1
 8008f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f08:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	0151      	lsls	r1, r2, #5
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	440a      	add	r2, r1
 8008f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	fff80000 	.word	0xfff80000
 8008f38:	e007ffff 	.word	0xe007ffff
 8008f3c:	1ff80000 	.word	0x1ff80000

08008f40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d14a      	bne.n	8008ff4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f76:	f040 8086 	bne.w	8009086 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	7812      	ldrb	r2, [r2, #0]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	7812      	ldrb	r2, [r2, #0]
 8008fb2:	0151      	lsls	r1, r2, #5
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	440a      	add	r2, r1
 8008fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d902      	bls.n	8008fd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8008fd6:	e056      	b.n	8009086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff0:	d0e7      	beq.n	8008fc2 <USB_EPStopXfer+0x82>
 8008ff2:	e048      	b.n	8009086 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900c:	d13b      	bne.n	8009086 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	7812      	ldrb	r2, [r2, #0]
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	440a      	add	r2, r1
 8009028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800902c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009030:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	7812      	ldrb	r2, [r2, #0]
 8009046:	0151      	lsls	r1, r2, #5
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	440a      	add	r2, r1
 800904c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3301      	adds	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009062:	4293      	cmp	r3, r2
 8009064:	d902      	bls.n	800906c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	75fb      	strb	r3, [r7, #23]
          break;
 800906a:	e00c      	b.n	8009086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009084:	d0e7      	beq.n	8009056 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009094:	b480      	push	{r7}
 8009096:	b089      	sub	sp, #36	; 0x24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4611      	mov	r1, r2
 80090a0:	461a      	mov	r2, r3
 80090a2:	460b      	mov	r3, r1
 80090a4:	71fb      	strb	r3, [r7, #7]
 80090a6:	4613      	mov	r3, r2
 80090a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80090b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d123      	bne.n	8009102 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090ba:	88bb      	ldrh	r3, [r7, #4]
 80090bc:	3303      	adds	r3, #3
 80090be:	089b      	lsrs	r3, r3, #2
 80090c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090c2:	2300      	movs	r3, #0
 80090c4:	61bb      	str	r3, [r7, #24]
 80090c6:	e018      	b.n	80090fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	031a      	lsls	r2, r3, #12
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d4:	461a      	mov	r2, r3
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	3301      	adds	r3, #1
 80090e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3301      	adds	r3, #1
 80090e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	3301      	adds	r3, #1
 80090ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	3301      	adds	r3, #1
 80090f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d3e2      	bcc.n	80090c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3724      	adds	r7, #36	; 0x24
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009110:	b480      	push	{r7}
 8009112:	b08b      	sub	sp, #44	; 0x2c
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	089b      	lsrs	r3, r3, #2
 800912a:	b29b      	uxth	r3, r3
 800912c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009136:	2300      	movs	r3, #0
 8009138:	623b      	str	r3, [r7, #32]
 800913a:	e014      	b.n	8009166 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	601a      	str	r2, [r3, #0]
    pDest++;
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	3301      	adds	r3, #1
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	3301      	adds	r3, #1
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	3301      	adds	r3, #1
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	3301      	adds	r3, #1
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	3301      	adds	r3, #1
 8009164:	623b      	str	r3, [r7, #32]
 8009166:	6a3a      	ldr	r2, [r7, #32]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	429a      	cmp	r2, r3
 800916c:	d3e6      	bcc.n	800913c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800916e:	8bfb      	ldrh	r3, [r7, #30]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01e      	beq.n	80091b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800917e:	461a      	mov	r2, r3
 8009180:	f107 0310 	add.w	r3, r7, #16
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	fa22 f303 	lsr.w	r3, r2, r3
 8009194:	b2da      	uxtb	r2, r3
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	701a      	strb	r2, [r3, #0]
      i++;
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	3301      	adds	r3, #1
 800919e:	623b      	str	r3, [r7, #32]
      pDest++;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	3301      	adds	r3, #1
 80091a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80091a6:	8bfb      	ldrh	r3, [r7, #30]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80091ac:	8bfb      	ldrh	r3, [r7, #30]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1ea      	bne.n	8009188 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	372c      	adds	r7, #44	; 0x2c
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d12c      	bne.n	8009236 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	db12      	blt.n	8009214 <USB_EPSetStall+0x54>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00f      	beq.n	8009214 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	0151      	lsls	r1, r2, #5
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	440a      	add	r2, r1
 800920a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800920e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009212:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	0151      	lsls	r1, r2, #5
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	440a      	add	r2, r1
 800922a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800922e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e02b      	b.n	800928e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	db12      	blt.n	800926e <USB_EPSetStall+0xae>
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00f      	beq.n	800926e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800926c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800928c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	785b      	ldrb	r3, [r3, #1]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d128      	bne.n	800930a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	791b      	ldrb	r3, [r3, #4]
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d003      	beq.n	80092e8 <USB_EPClearStall+0x4c>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	791b      	ldrb	r3, [r3, #4]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d138      	bne.n	800935a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	e027      	b.n	800935a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	440a      	add	r2, r1
 8009320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009328:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	791b      	ldrb	r3, [r3, #4]
 800932e:	2b03      	cmp	r3, #3
 8009330:	d003      	beq.n	800933a <USB_EPClearStall+0x9e>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d10f      	bne.n	800935a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	0151      	lsls	r1, r2, #5
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	440a      	add	r2, r1
 8009350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009358:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800938a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800939c:	68f9      	ldr	r1, [r7, #12]
 800939e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093a2:	4313      	orrs	r3, r2
 80093a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093ce:	f023 0303 	bic.w	r3, r3, #3
 80093d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e2:	f023 0302 	bic.w	r3, r3, #2
 80093e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b085      	sub	sp, #20
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009424:	f043 0302 	orr.w	r3, r3, #2
 8009428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4013      	ands	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009450:	68fb      	ldr	r3, [r7, #12]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	4013      	ands	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	0c1b      	lsrs	r3, r3, #16
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	4013      	ands	r3, r2
 80094b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	b29b      	uxth	r3, r3
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b085      	sub	sp, #20
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	4013      	ands	r3, r2
 80094f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094f4:	68bb      	ldr	r3, [r7, #8]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009502:	b480      	push	{r7}
 8009504:	b087      	sub	sp, #28
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009524:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	fa22 f303 	lsr.w	r3, r2, r3
 8009532:	01db      	lsls	r3, r3, #7
 8009534:	b2db      	uxtb	r3, r3
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	4013      	ands	r3, r2
 800954e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009550:	68bb      	ldr	r3, [r7, #8]
}
 8009552:	4618      	mov	r0, r3
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800955e:	b480      	push	{r7}
 8009560:	b083      	sub	sp, #12
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	f003 0301 	and.w	r3, r3, #1
}
 800956e:	4618      	mov	r0, r3
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	4619      	mov	r1, r3
 8009598:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <USB_ActivateSetup+0x44>)
 800959a:	4013      	ands	r3, r2
 800959c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	fffff800 	.word	0xfffff800

080095c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	460b      	mov	r3, r1
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	333c      	adds	r3, #60	; 0x3c
 80095da:	3304      	adds	r3, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	4a26      	ldr	r2, [pc, #152]	; (800967c <USB_EP0_OutStart+0xb8>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d90a      	bls.n	80095fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f8:	d101      	bne.n	80095fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e037      	b.n	800966e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009604:	461a      	mov	r2, r3
 8009606:	2300      	movs	r3, #0
 8009608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800961c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800962c:	f043 0318 	orr.w	r3, r3, #24
 8009630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009640:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009644:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009646:	7afb      	ldrb	r3, [r7, #11]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d10f      	bne.n	800966c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009652:	461a      	mov	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009666:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800966a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	4f54300a 	.word	0x4f54300a

08009680 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3301      	adds	r3, #1
 8009690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4a13      	ldr	r2, [pc, #76]	; (80096e4 <USB_CoreReset+0x64>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d901      	bls.n	800969e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e01b      	b.n	80096d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	daf2      	bge.n	800968c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096a6:	2300      	movs	r3, #0
 80096a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	f043 0201 	orr.w	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3301      	adds	r3, #1
 80096ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4a09      	ldr	r2, [pc, #36]	; (80096e4 <USB_CoreReset+0x64>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d901      	bls.n	80096c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e006      	b.n	80096d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d0f0      	beq.n	80096b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	00030d40 	.word	0x00030d40

080096e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80096f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80096f8:	f002 fcba 	bl	800c070 <USBD_static_malloc>
 80096fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32b0      	adds	r2, #176	; 0xb0
 800970e:	2100      	movs	r1, #0
 8009710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009714:	2302      	movs	r3, #2
 8009716:	e0d4      	b.n	80098c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009718:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800971c:	2100      	movs	r1, #0
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f003 f828 	bl	800c774 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	32b0      	adds	r2, #176	; 0xb0
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	32b0      	adds	r2, #176	; 0xb0
 800973e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7c1b      	ldrb	r3, [r3, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d138      	bne.n	80097c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009750:	4b5e      	ldr	r3, [pc, #376]	; (80098cc <USBD_CDC_Init+0x1e4>)
 8009752:	7819      	ldrb	r1, [r3, #0]
 8009754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009758:	2202      	movs	r2, #2
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f002 fb65 	bl	800be2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009760:	4b5a      	ldr	r3, [pc, #360]	; (80098cc <USBD_CDC_Init+0x1e4>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	f003 020f 	and.w	r2, r3, #15
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	3324      	adds	r3, #36	; 0x24
 8009776:	2201      	movs	r2, #1
 8009778:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800977a:	4b55      	ldr	r3, [pc, #340]	; (80098d0 <USBD_CDC_Init+0x1e8>)
 800977c:	7819      	ldrb	r1, [r3, #0]
 800977e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009782:	2202      	movs	r2, #2
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f002 fb50 	bl	800be2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800978a:	4b51      	ldr	r3, [pc, #324]	; (80098d0 <USBD_CDC_Init+0x1e8>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097a2:	2201      	movs	r2, #1
 80097a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80097a6:	4b4b      	ldr	r3, [pc, #300]	; (80098d4 <USBD_CDC_Init+0x1ec>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	f003 020f 	and.w	r2, r3, #15
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	3326      	adds	r3, #38	; 0x26
 80097bc:	2210      	movs	r2, #16
 80097be:	801a      	strh	r2, [r3, #0]
 80097c0:	e035      	b.n	800982e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097c2:	4b42      	ldr	r3, [pc, #264]	; (80098cc <USBD_CDC_Init+0x1e4>)
 80097c4:	7819      	ldrb	r1, [r3, #0]
 80097c6:	2340      	movs	r3, #64	; 0x40
 80097c8:	2202      	movs	r2, #2
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f002 fb2d 	bl	800be2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097d0:	4b3e      	ldr	r3, [pc, #248]	; (80098cc <USBD_CDC_Init+0x1e4>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	440b      	add	r3, r1
 80097e4:	3324      	adds	r3, #36	; 0x24
 80097e6:	2201      	movs	r2, #1
 80097e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80097ea:	4b39      	ldr	r3, [pc, #228]	; (80098d0 <USBD_CDC_Init+0x1e8>)
 80097ec:	7819      	ldrb	r1, [r3, #0]
 80097ee:	2340      	movs	r3, #64	; 0x40
 80097f0:	2202      	movs	r2, #2
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f002 fb19 	bl	800be2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80097f8:	4b35      	ldr	r3, [pc, #212]	; (80098d0 <USBD_CDC_Init+0x1e8>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	f003 020f 	and.w	r2, r3, #15
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	440b      	add	r3, r1
 800980c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009810:	2201      	movs	r2, #1
 8009812:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009814:	4b2f      	ldr	r3, [pc, #188]	; (80098d4 <USBD_CDC_Init+0x1ec>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 020f 	and.w	r2, r3, #15
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	440b      	add	r3, r1
 8009828:	3326      	adds	r3, #38	; 0x26
 800982a:	2210      	movs	r2, #16
 800982c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800982e:	4b29      	ldr	r3, [pc, #164]	; (80098d4 <USBD_CDC_Init+0x1ec>)
 8009830:	7819      	ldrb	r1, [r3, #0]
 8009832:	2308      	movs	r3, #8
 8009834:	2203      	movs	r2, #3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f002 faf7 	bl	800be2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800983c:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <USBD_CDC_Init+0x1ec>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 020f 	and.w	r2, r3, #15
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	440b      	add	r3, r1
 8009850:	3324      	adds	r3, #36	; 0x24
 8009852:	2201      	movs	r2, #1
 8009854:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	33b0      	adds	r3, #176	; 0xb0
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800988c:	2302      	movs	r3, #2
 800988e:	e018      	b.n	80098c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7c1b      	ldrb	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009898:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <USBD_CDC_Init+0x1e8>)
 800989a:	7819      	ldrb	r1, [r3, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f002 fbae 	bl	800c008 <USBD_LL_PrepareReceive>
 80098ac:	e008      	b.n	80098c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098ae:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <USBD_CDC_Init+0x1e8>)
 80098b0:	7819      	ldrb	r1, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098b8:	2340      	movs	r3, #64	; 0x40
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f002 fba4 	bl	800c008 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	2400037f 	.word	0x2400037f
 80098d0:	24000380 	.word	0x24000380
 80098d4:	24000381 	.word	0x24000381

080098d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80098e4:	4b3a      	ldr	r3, [pc, #232]	; (80099d0 <USBD_CDC_DeInit+0xf8>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f002 fac3 	bl	800be76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80098f0:	4b37      	ldr	r3, [pc, #220]	; (80099d0 <USBD_CDC_DeInit+0xf8>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	3324      	adds	r3, #36	; 0x24
 8009906:	2200      	movs	r2, #0
 8009908:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800990a:	4b32      	ldr	r3, [pc, #200]	; (80099d4 <USBD_CDC_DeInit+0xfc>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f002 fab0 	bl	800be76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009916:	4b2f      	ldr	r3, [pc, #188]	; (80099d4 <USBD_CDC_DeInit+0xfc>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	f003 020f 	and.w	r2, r3, #15
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	440b      	add	r3, r1
 800992a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800992e:	2200      	movs	r2, #0
 8009930:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009932:	4b29      	ldr	r3, [pc, #164]	; (80099d8 <USBD_CDC_DeInit+0x100>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f002 fa9c 	bl	800be76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800993e:	4b26      	ldr	r3, [pc, #152]	; (80099d8 <USBD_CDC_DeInit+0x100>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 020f 	and.w	r2, r3, #15
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	440b      	add	r3, r1
 8009952:	3324      	adds	r3, #36	; 0x24
 8009954:	2200      	movs	r2, #0
 8009956:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009958:	4b1f      	ldr	r3, [pc, #124]	; (80099d8 <USBD_CDC_DeInit+0x100>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 020f 	and.w	r2, r3, #15
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	3326      	adds	r3, #38	; 0x26
 800996e:	2200      	movs	r2, #0
 8009970:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	32b0      	adds	r2, #176	; 0xb0
 800997c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d01f      	beq.n	80099c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	33b0      	adds	r3, #176	; 0xb0
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	32b0      	adds	r2, #176	; 0xb0
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f002 fb70 	bl	800c08c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	32b0      	adds	r2, #176	; 0xb0
 80099b6:	2100      	movs	r1, #0
 80099b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	2400037f 	.word	0x2400037f
 80099d4:	24000380 	.word	0x24000380
 80099d8:	24000381 	.word	0x24000381

080099dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	32b0      	adds	r2, #176	; 0xb0
 80099f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e0bf      	b.n	8009b8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d050      	beq.n	8009aba <USBD_CDC_Setup+0xde>
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	f040 80af 	bne.w	8009b7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	88db      	ldrh	r3, [r3, #6]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d03a      	beq.n	8009a9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	b25b      	sxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	da1b      	bge.n	8009a68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	33b0      	adds	r3, #176	; 0xb0
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009a46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	88d2      	ldrh	r2, [r2, #6]
 8009a4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	88db      	ldrh	r3, [r3, #6]
 8009a52:	2b07      	cmp	r3, #7
 8009a54:	bf28      	it	cs
 8009a56:	2307      	movcs	r3, #7
 8009a58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	89fa      	ldrh	r2, [r7, #14]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 fd89 	bl	800b578 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009a66:	e090      	b.n	8009b8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	785a      	ldrb	r2, [r3, #1]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	88db      	ldrh	r3, [r3, #6]
 8009a76:	2b3f      	cmp	r3, #63	; 0x3f
 8009a78:	d803      	bhi.n	8009a82 <USBD_CDC_Setup+0xa6>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	88db      	ldrh	r3, [r3, #6]
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	e000      	b.n	8009a84 <USBD_CDC_Setup+0xa8>
 8009a82:	2240      	movs	r2, #64	; 0x40
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a8a:	6939      	ldr	r1, [r7, #16]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009a92:	461a      	mov	r2, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f001 fd9b 	bl	800b5d0 <USBD_CtlPrepareRx>
      break;
 8009a9a:	e076      	b.n	8009b8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	33b0      	adds	r3, #176	; 0xb0
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	7850      	ldrb	r0, [r2, #1]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	4798      	blx	r3
      break;
 8009ab8:	e067      	b.n	8009b8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	2b0b      	cmp	r3, #11
 8009ac0:	d851      	bhi.n	8009b66 <USBD_CDC_Setup+0x18a>
 8009ac2:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <USBD_CDC_Setup+0xec>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009af9 	.word	0x08009af9
 8009acc:	08009b75 	.word	0x08009b75
 8009ad0:	08009b67 	.word	0x08009b67
 8009ad4:	08009b67 	.word	0x08009b67
 8009ad8:	08009b67 	.word	0x08009b67
 8009adc:	08009b67 	.word	0x08009b67
 8009ae0:	08009b67 	.word	0x08009b67
 8009ae4:	08009b67 	.word	0x08009b67
 8009ae8:	08009b67 	.word	0x08009b67
 8009aec:	08009b67 	.word	0x08009b67
 8009af0:	08009b23 	.word	0x08009b23
 8009af4:	08009b4d 	.word	0x08009b4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d107      	bne.n	8009b14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b04:	f107 030a 	add.w	r3, r7, #10
 8009b08:	2202      	movs	r2, #2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 fd33 	bl	800b578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b12:	e032      	b.n	8009b7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 fcbd 	bl	800b496 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	75fb      	strb	r3, [r7, #23]
          break;
 8009b20:	e02b      	b.n	8009b7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d107      	bne.n	8009b3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b2e:	f107 030d 	add.w	r3, r7, #13
 8009b32:	2201      	movs	r2, #1
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 fd1e 	bl	800b578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b3c:	e01d      	b.n	8009b7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 fca8 	bl	800b496 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b46:	2303      	movs	r3, #3
 8009b48:	75fb      	strb	r3, [r7, #23]
          break;
 8009b4a:	e016      	b.n	8009b7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d00f      	beq.n	8009b78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f001 fc9b 	bl	800b496 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b60:	2303      	movs	r3, #3
 8009b62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b64:	e008      	b.n	8009b78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 fc94 	bl	800b496 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	75fb      	strb	r3, [r7, #23]
          break;
 8009b72:	e002      	b.n	8009b7a <USBD_CDC_Setup+0x19e>
          break;
 8009b74:	bf00      	nop
 8009b76:	e008      	b.n	8009b8a <USBD_CDC_Setup+0x1ae>
          break;
 8009b78:	bf00      	nop
      }
      break;
 8009b7a:	e006      	b.n	8009b8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 fc89 	bl	800b496 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b84:	2303      	movs	r3, #3
 8009b86:	75fb      	strb	r3, [r7, #23]
      break;
 8009b88:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ba6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	32b0      	adds	r2, #176	; 0xb0
 8009bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e065      	b.n	8009c8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	32b0      	adds	r2, #176	; 0xb0
 8009bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	f003 020f 	and.w	r2, r3, #15
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	3318      	adds	r3, #24
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02f      	beq.n	8009c48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009be8:	78fb      	ldrb	r3, [r7, #3]
 8009bea:	f003 020f 	and.w	r2, r3, #15
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	3318      	adds	r3, #24
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	f003 010f 	and.w	r1, r3, #15
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	460b      	mov	r3, r1
 8009c08:	00db      	lsls	r3, r3, #3
 8009c0a:	440b      	add	r3, r1
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4403      	add	r3, r0
 8009c10:	3344      	adds	r3, #68	; 0x44
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d112      	bne.n	8009c48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	f003 020f 	and.w	r2, r3, #15
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	3318      	adds	r3, #24
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c3a:	78f9      	ldrb	r1, [r7, #3]
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	2200      	movs	r2, #0
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f002 f9c0 	bl	800bfc6 <USBD_LL_Transmit>
 8009c46:	e01f      	b.n	8009c88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	33b0      	adds	r3, #176	; 0xb0
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d010      	beq.n	8009c88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	33b0      	adds	r3, #176	; 0xb0
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	32b0      	adds	r2, #176	; 0xb0
 8009ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	32b0      	adds	r2, #176	; 0xb0
 8009cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e01a      	b.n	8009cfa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f002 f9be 	bl	800c04a <USBD_LL_GetRxDataSize>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	33b0      	adds	r3, #176	; 0xb0
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	32b0      	adds	r2, #176	; 0xb0
 8009d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e025      	b.n	8009d70 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	33b0      	adds	r3, #176	; 0xb0
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01a      	beq.n	8009d6e <USBD_CDC_EP0_RxReady+0x6c>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d3e:	2bff      	cmp	r3, #255	; 0xff
 8009d40:	d015      	beq.n	8009d6e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	33b0      	adds	r3, #176	; 0xb0
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009d5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d62:	b292      	uxth	r2, r2
 8009d64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	22ff      	movs	r2, #255	; 0xff
 8009d6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d80:	2182      	movs	r1, #130	; 0x82
 8009d82:	4818      	ldr	r0, [pc, #96]	; (8009de4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d84:	f000 fd4f 	bl	800a826 <USBD_GetEpDesc>
 8009d88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	4815      	ldr	r0, [pc, #84]	; (8009de4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d8e:	f000 fd4a 	bl	800a826 <USBD_GetEpDesc>
 8009d92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d94:	2181      	movs	r1, #129	; 0x81
 8009d96:	4813      	ldr	r0, [pc, #76]	; (8009de4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d98:	f000 fd45 	bl	800a826 <USBD_GetEpDesc>
 8009d9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2210      	movs	r2, #16
 8009da8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d006      	beq.n	8009dbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009db8:	711a      	strb	r2, [r3, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d006      	beq.n	8009dd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dcc:	711a      	strb	r2, [r3, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2243      	movs	r2, #67	; 0x43
 8009dd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009dd8:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	2400033c 	.word	0x2400033c

08009de8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009df0:	2182      	movs	r1, #130	; 0x82
 8009df2:	4818      	ldr	r0, [pc, #96]	; (8009e54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009df4:	f000 fd17 	bl	800a826 <USBD_GetEpDesc>
 8009df8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	4815      	ldr	r0, [pc, #84]	; (8009e54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009dfe:	f000 fd12 	bl	800a826 <USBD_GetEpDesc>
 8009e02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e04:	2181      	movs	r1, #129	; 0x81
 8009e06:	4813      	ldr	r0, [pc, #76]	; (8009e54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e08:	f000 fd0d 	bl	800a826 <USBD_GetEpDesc>
 8009e0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2210      	movs	r2, #16
 8009e18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d006      	beq.n	8009e2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	2200      	movs	r2, #0
 8009e24:	711a      	strb	r2, [r3, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f042 0202 	orr.w	r2, r2, #2
 8009e2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d006      	beq.n	8009e42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	711a      	strb	r2, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f042 0202 	orr.w	r2, r2, #2
 8009e40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2243      	movs	r2, #67	; 0x43
 8009e46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e48:	4b02      	ldr	r3, [pc, #8]	; (8009e54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	2400033c 	.word	0x2400033c

08009e58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e60:	2182      	movs	r1, #130	; 0x82
 8009e62:	4818      	ldr	r0, [pc, #96]	; (8009ec4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e64:	f000 fcdf 	bl	800a826 <USBD_GetEpDesc>
 8009e68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	4815      	ldr	r0, [pc, #84]	; (8009ec4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e6e:	f000 fcda 	bl	800a826 <USBD_GetEpDesc>
 8009e72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e74:	2181      	movs	r1, #129	; 0x81
 8009e76:	4813      	ldr	r0, [pc, #76]	; (8009ec4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e78:	f000 fcd5 	bl	800a826 <USBD_GetEpDesc>
 8009e7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	2210      	movs	r2, #16
 8009e88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e98:	711a      	strb	r2, [r3, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d006      	beq.n	8009eb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eac:	711a      	strb	r2, [r3, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2243      	movs	r2, #67	; 0x43
 8009eb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009eb8:	4b02      	ldr	r3, [pc, #8]	; (8009ec4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	2400033c 	.word	0x2400033c

08009ec8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ed6:	4b03      	ldr	r3, [pc, #12]	; (8009ee4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	240002f8 	.word	0x240002f8

08009ee8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e009      	b.n	8009f10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	33b0      	adds	r3, #176	; 0xb0
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	32b0      	adds	r2, #176	; 0xb0
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e008      	b.n	8009f54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	32b0      	adds	r2, #176	; 0xb0
 8009f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e004      	b.n	8009f8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
	...

08009f9c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	32b0      	adds	r2, #176	; 0xb0
 8009fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e025      	b.n	800a00e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d11f      	bne.n	800a00c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009fd4:	4b10      	ldr	r3, [pc, #64]	; (800a018 <USBD_CDC_TransmitPacket+0x7c>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 020f 	and.w	r2, r3, #15
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4403      	add	r3, r0
 8009fee:	3318      	adds	r3, #24
 8009ff0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009ff2:	4b09      	ldr	r3, [pc, #36]	; (800a018 <USBD_CDC_TransmitPacket+0x7c>)
 8009ff4:	7819      	ldrb	r1, [r3, #0]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 ffdf 	bl	800bfc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	2400037f 	.word	0x2400037f

0800a01c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	32b0      	adds	r2, #176	; 0xb0
 800a02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a032:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32b0      	adds	r2, #176	; 0xb0
 800a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a046:	2303      	movs	r3, #3
 800a048:	e018      	b.n	800a07c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7c1b      	ldrb	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a052:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <USBD_CDC_ReceivePacket+0x68>)
 800a054:	7819      	ldrb	r1, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a05c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 ffd1 	bl	800c008 <USBD_LL_PrepareReceive>
 800a066:	e008      	b.n	800a07a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a068:	4b06      	ldr	r3, [pc, #24]	; (800a084 <USBD_CDC_ReceivePacket+0x68>)
 800a06a:	7819      	ldrb	r1, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 ffc7 	bl	800c008 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	24000380 	.word	0x24000380

0800a088 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e01f      	b.n	800a0e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	79fa      	ldrb	r2, [r7, #7]
 800a0d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f001 fe3d 	bl	800bd54 <USBD_LL_Init>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e025      	b.n	800a14c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	32ae      	adds	r2, #174	; 0xae
 800a112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00f      	beq.n	800a13c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32ae      	adds	r2, #174	; 0xae
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	f107 020e 	add.w	r2, r7, #14
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	4602      	mov	r2, r0
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f001 fe49 	bl	800bdf4 <USBD_LL_Start>
 800a162:	4603      	mov	r3, r0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d009      	beq.n	800a1b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b084      	sub	sp, #16
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	78fa      	ldrb	r2, [r7, #3]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	4798      	blx	r3
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f001 f90e 	bl	800b422 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a214:	461a      	mov	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a222:	f003 031f 	and.w	r3, r3, #31
 800a226:	2b02      	cmp	r3, #2
 800a228:	d01a      	beq.n	800a260 <USBD_LL_SetupStage+0x72>
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d822      	bhi.n	800a274 <USBD_LL_SetupStage+0x86>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <USBD_LL_SetupStage+0x4a>
 800a232:	2b01      	cmp	r3, #1
 800a234:	d00a      	beq.n	800a24c <USBD_LL_SetupStage+0x5e>
 800a236:	e01d      	b.n	800a274 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fb65 	bl	800a910 <USBD_StdDevReq>
 800a246:	4603      	mov	r3, r0
 800a248:	73fb      	strb	r3, [r7, #15]
      break;
 800a24a:	e020      	b.n	800a28e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fbcd 	bl	800a9f4 <USBD_StdItfReq>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]
      break;
 800a25e:	e016      	b.n	800a28e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fc2f 	bl	800aacc <USBD_StdEPReq>
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]
      break;
 800a272:	e00c      	b.n	800a28e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a27a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 fe16 	bl	800beb4 <USBD_LL_StallEP>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]
      break;
 800a28c:	bf00      	nop
  }

  return ret;
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d16e      	bne.n	800a38e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a2b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	f040 8098 	bne.w	800a3f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d913      	bls.n	800a2f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	1ad2      	subs	r2, r2, r3
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	bf28      	it	cs
 800a2ea:	4613      	movcs	r3, r2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f001 f98a 	bl	800b60a <USBD_CtlContinueRx>
 800a2f6:	e07d      	b.n	800a3f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2fe:	f003 031f 	and.w	r3, r3, #31
 800a302:	2b02      	cmp	r3, #2
 800a304:	d014      	beq.n	800a330 <USBD_LL_DataOutStage+0x98>
 800a306:	2b02      	cmp	r3, #2
 800a308:	d81d      	bhi.n	800a346 <USBD_LL_DataOutStage+0xae>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <USBD_LL_DataOutStage+0x7c>
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d003      	beq.n	800a31a <USBD_LL_DataOutStage+0x82>
 800a312:	e018      	b.n	800a346 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	75bb      	strb	r3, [r7, #22]
            break;
 800a318:	e018      	b.n	800a34c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a320:	b2db      	uxtb	r3, r3
 800a322:	4619      	mov	r1, r3
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fa64 	bl	800a7f2 <USBD_CoreFindIF>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75bb      	strb	r3, [r7, #22]
            break;
 800a32e:	e00d      	b.n	800a34c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a336:	b2db      	uxtb	r3, r3
 800a338:	4619      	mov	r1, r3
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 fa66 	bl	800a80c <USBD_CoreFindEP>
 800a340:	4603      	mov	r3, r0
 800a342:	75bb      	strb	r3, [r7, #22]
            break;
 800a344:	e002      	b.n	800a34c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	75bb      	strb	r3, [r7, #22]
            break;
 800a34a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a34c:	7dbb      	ldrb	r3, [r7, #22]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d119      	bne.n	800a386 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d113      	bne.n	800a386 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a35e:	7dba      	ldrb	r2, [r7, #22]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	32ae      	adds	r2, #174	; 0xae
 800a364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00b      	beq.n	800a386 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a36e:	7dba      	ldrb	r2, [r7, #22]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a376:	7dba      	ldrb	r2, [r7, #22]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	32ae      	adds	r2, #174	; 0xae
 800a37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f001 f950 	bl	800b62c <USBD_CtlSendStatus>
 800a38c:	e032      	b.n	800a3f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a394:	b2db      	uxtb	r3, r3
 800a396:	4619      	mov	r1, r3
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 fa37 	bl	800a80c <USBD_CoreFindEP>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3a2:	7dbb      	ldrb	r3, [r7, #22]
 800a3a4:	2bff      	cmp	r3, #255	; 0xff
 800a3a6:	d025      	beq.n	800a3f4 <USBD_LL_DataOutStage+0x15c>
 800a3a8:	7dbb      	ldrb	r3, [r7, #22]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d122      	bne.n	800a3f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d117      	bne.n	800a3ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a3ba:	7dba      	ldrb	r2, [r7, #22]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	32ae      	adds	r2, #174	; 0xae
 800a3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00f      	beq.n	800a3ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a3ca:	7dba      	ldrb	r2, [r7, #22]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a3d2:	7dba      	ldrb	r2, [r7, #22]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	32ae      	adds	r2, #174	; 0xae
 800a3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	7afa      	ldrb	r2, [r7, #11]
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	4798      	blx	r3
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	e000      	b.n	800a3f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b086      	sub	sp, #24
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	460b      	mov	r3, r1
 800a408:	607a      	str	r2, [r7, #4]
 800a40a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a40c:	7afb      	ldrb	r3, [r7, #11]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d16f      	bne.n	800a4f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3314      	adds	r3, #20
 800a416:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d15a      	bne.n	800a4d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d914      	bls.n	800a458 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	1ad2      	subs	r2, r2, r3
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	461a      	mov	r2, r3
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f001 f8b2 	bl	800b5ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a44a:	2300      	movs	r3, #0
 800a44c:	2200      	movs	r2, #0
 800a44e:	2100      	movs	r1, #0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f001 fdd9 	bl	800c008 <USBD_LL_PrepareReceive>
 800a456:	e03f      	b.n	800a4d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	68da      	ldr	r2, [r3, #12]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	429a      	cmp	r2, r3
 800a462:	d11c      	bne.n	800a49e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d316      	bcc.n	800a49e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d20f      	bcs.n	800a49e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a47e:	2200      	movs	r2, #0
 800a480:	2100      	movs	r1, #0
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f001 f893 	bl	800b5ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a490:	2300      	movs	r3, #0
 800a492:	2200      	movs	r2, #0
 800a494:	2100      	movs	r1, #0
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f001 fdb6 	bl	800c008 <USBD_LL_PrepareReceive>
 800a49c:	e01c      	b.n	800a4d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d10f      	bne.n	800a4ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d009      	beq.n	800a4ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4ca:	2180      	movs	r1, #128	; 0x80
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f001 fcf1 	bl	800beb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f001 f8bd 	bl	800b652 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d03a      	beq.n	800a558 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff fe42 	bl	800a16c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a4f0:	e032      	b.n	800a558 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a4f2:	7afb      	ldrb	r3, [r7, #11]
 800a4f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 f985 	bl	800a80c <USBD_CoreFindEP>
 800a502:	4603      	mov	r3, r0
 800a504:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	2bff      	cmp	r3, #255	; 0xff
 800a50a:	d025      	beq.n	800a558 <USBD_LL_DataInStage+0x15a>
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d122      	bne.n	800a558 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d11c      	bne.n	800a558 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a51e:	7dfa      	ldrb	r2, [r7, #23]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	32ae      	adds	r2, #174	; 0xae
 800a524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d014      	beq.n	800a558 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a52e:	7dfa      	ldrb	r2, [r7, #23]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a536:	7dfa      	ldrb	r2, [r7, #23]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	32ae      	adds	r2, #174	; 0xae
 800a53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	7afa      	ldrb	r2, [r7, #11]
 800a544:	4611      	mov	r1, r2
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	4798      	blx	r3
 800a54a:	4603      	mov	r3, r0
 800a54c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a54e:	7dbb      	ldrb	r3, [r7, #22]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a554:	7dbb      	ldrb	r3, [r7, #22]
 800a556:	e000      	b.n	800a55a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d014      	beq.n	800a5c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00e      	beq.n	800a5c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6852      	ldr	r2, [r2, #4]
 800a5b6:	b2d2      	uxtb	r2, r2
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	4798      	blx	r3
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5c8:	2340      	movs	r3, #64	; 0x40
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 fc2b 	bl	800be2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2240      	movs	r2, #64	; 0x40
 800a5e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2180      	movs	r1, #128	; 0x80
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f001 fc1d 	bl	800be2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2240      	movs	r2, #64	; 0x40
 800a5fa:	621a      	str	r2, [r3, #32]

  return ret;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	78fa      	ldrb	r2, [r7, #3]
 800a616:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b04      	cmp	r3, #4
 800a638:	d006      	beq.n	800a648 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a640:	b2da      	uxtb	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2204      	movs	r2, #4
 800a64c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d106      	bne.n	800a680 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d110      	bne.n	800a6c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00b      	beq.n	800a6c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	32ae      	adds	r2, #174	; 0xae
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e01c      	b.n	800a72a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d115      	bne.n	800a728 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	32ae      	adds	r2, #174	; 0xae
 800a706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	32ae      	adds	r2, #174	; 0xae
 800a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	78fa      	ldrb	r2, [r7, #3]
 800a722:	4611      	mov	r1, r2
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	460b      	mov	r3, r1
 800a73c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	32ae      	adds	r2, #174	; 0xae
 800a748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	e01c      	b.n	800a78e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d115      	bne.n	800a78c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	32ae      	adds	r2, #174	; 0xae
 800a76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00b      	beq.n	800a78c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	32ae      	adds	r2, #174	; 0xae
 800a77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	78fa      	ldrb	r2, [r7, #3]
 800a786:	4611      	mov	r1, r2
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00e      	beq.n	800a7e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6852      	ldr	r2, [r2, #4]
 800a7d6:	b2d2      	uxtb	r2, r2
 800a7d8:	4611      	mov	r1, r2
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	4798      	blx	r3
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a818:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	460b      	mov	r3, r1
 800a830:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	885b      	ldrh	r3, [r3, #2]
 800a842:	b29a      	uxth	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d920      	bls.n	800a890 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b29b      	uxth	r3, r3
 800a854:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a856:	e013      	b.n	800a880 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a858:	f107 030a 	add.w	r3, r7, #10
 800a85c:	4619      	mov	r1, r3
 800a85e:	6978      	ldr	r0, [r7, #20]
 800a860:	f000 f81b 	bl	800a89a <USBD_GetNextDesc>
 800a864:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	785b      	ldrb	r3, [r3, #1]
 800a86a:	2b05      	cmp	r3, #5
 800a86c:	d108      	bne.n	800a880 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	789b      	ldrb	r3, [r3, #2]
 800a876:	78fa      	ldrb	r2, [r7, #3]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d008      	beq.n	800a88e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	885b      	ldrh	r3, [r3, #2]
 800a884:	b29a      	uxth	r2, r3
 800a886:	897b      	ldrh	r3, [r7, #10]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d8e5      	bhi.n	800a858 <USBD_GetEpDesc+0x32>
 800a88c:	e000      	b.n	800a890 <USBD_GetEpDesc+0x6a>
          break;
 800a88e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a890:	693b      	ldr	r3, [r7, #16]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	881a      	ldrh	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a8f2:	8a3b      	ldrh	r3, [r7, #16]
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	b21a      	sxth	r2, r3
 800a8f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	b21b      	sxth	r3, r3
 800a900:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a902:	89fb      	ldrh	r3, [r7, #14]
}
 800a904:	4618      	mov	r0, r3
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a926:	2b40      	cmp	r3, #64	; 0x40
 800a928:	d005      	beq.n	800a936 <USBD_StdDevReq+0x26>
 800a92a:	2b40      	cmp	r3, #64	; 0x40
 800a92c:	d857      	bhi.n	800a9de <USBD_StdDevReq+0xce>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00f      	beq.n	800a952 <USBD_StdDevReq+0x42>
 800a932:	2b20      	cmp	r3, #32
 800a934:	d153      	bne.n	800a9de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	32ae      	adds	r2, #174	; 0xae
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	4798      	blx	r3
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
      break;
 800a950:	e04a      	b.n	800a9e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	785b      	ldrb	r3, [r3, #1]
 800a956:	2b09      	cmp	r3, #9
 800a958:	d83b      	bhi.n	800a9d2 <USBD_StdDevReq+0xc2>
 800a95a:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <USBD_StdDevReq+0x50>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a9b5 	.word	0x0800a9b5
 800a964:	0800a9c9 	.word	0x0800a9c9
 800a968:	0800a9d3 	.word	0x0800a9d3
 800a96c:	0800a9bf 	.word	0x0800a9bf
 800a970:	0800a9d3 	.word	0x0800a9d3
 800a974:	0800a993 	.word	0x0800a993
 800a978:	0800a989 	.word	0x0800a989
 800a97c:	0800a9d3 	.word	0x0800a9d3
 800a980:	0800a9ab 	.word	0x0800a9ab
 800a984:	0800a99d 	.word	0x0800a99d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fa3c 	bl	800ae08 <USBD_GetDescriptor>
          break;
 800a990:	e024      	b.n	800a9dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fba1 	bl	800b0dc <USBD_SetAddress>
          break;
 800a99a:	e01f      	b.n	800a9dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fbe0 	bl	800b164 <USBD_SetConfig>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]
          break;
 800a9a8:	e018      	b.n	800a9dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fc83 	bl	800b2b8 <USBD_GetConfig>
          break;
 800a9b2:	e013      	b.n	800a9dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fcb4 	bl	800b324 <USBD_GetStatus>
          break;
 800a9bc:	e00e      	b.n	800a9dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fce3 	bl	800b38c <USBD_SetFeature>
          break;
 800a9c6:	e009      	b.n	800a9dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fd07 	bl	800b3de <USBD_ClrFeature>
          break;
 800a9d0:	e004      	b.n	800a9dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fd5e 	bl	800b496 <USBD_CtlError>
          break;
 800a9da:	bf00      	nop
      }
      break;
 800a9dc:	e004      	b.n	800a9e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fd58 	bl	800b496 <USBD_CtlError>
      break;
 800a9e6:	bf00      	nop
  }

  return ret;
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop

0800a9f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	d005      	beq.n	800aa1a <USBD_StdItfReq+0x26>
 800aa0e:	2b40      	cmp	r3, #64	; 0x40
 800aa10:	d852      	bhi.n	800aab8 <USBD_StdItfReq+0xc4>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <USBD_StdItfReq+0x26>
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d14e      	bne.n	800aab8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	3b01      	subs	r3, #1
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d840      	bhi.n	800aaaa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	889b      	ldrh	r3, [r3, #4]
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d836      	bhi.n	800aaa0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	889b      	ldrh	r3, [r3, #4]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff fed9 	bl	800a7f2 <USBD_CoreFindIF>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	2bff      	cmp	r3, #255	; 0xff
 800aa48:	d01d      	beq.n	800aa86 <USBD_StdItfReq+0x92>
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d11a      	bne.n	800aa86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aa50:	7bba      	ldrb	r2, [r7, #14]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	32ae      	adds	r2, #174	; 0xae
 800aa56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00f      	beq.n	800aa80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aa60:	7bba      	ldrb	r2, [r7, #14]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa68:	7bba      	ldrb	r2, [r7, #14]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32ae      	adds	r2, #174	; 0xae
 800aa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa7e:	e004      	b.n	800aa8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa84:	e001      	b.n	800aa8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa86:	2303      	movs	r3, #3
 800aa88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	88db      	ldrh	r3, [r3, #6]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d110      	bne.n	800aab4 <USBD_StdItfReq+0xc0>
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10d      	bne.n	800aab4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fdc7 	bl	800b62c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa9e:	e009      	b.n	800aab4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fcf7 	bl	800b496 <USBD_CtlError>
          break;
 800aaa8:	e004      	b.n	800aab4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fcf2 	bl	800b496 <USBD_CtlError>
          break;
 800aab2:	e000      	b.n	800aab6 <USBD_StdItfReq+0xc2>
          break;
 800aab4:	bf00      	nop
      }
      break;
 800aab6:	e004      	b.n	800aac2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fceb 	bl	800b496 <USBD_CtlError>
      break;
 800aac0:	bf00      	nop
  }

  return ret;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	889b      	ldrh	r3, [r3, #4]
 800aade:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aae8:	2b40      	cmp	r3, #64	; 0x40
 800aaea:	d007      	beq.n	800aafc <USBD_StdEPReq+0x30>
 800aaec:	2b40      	cmp	r3, #64	; 0x40
 800aaee:	f200 817f 	bhi.w	800adf0 <USBD_StdEPReq+0x324>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d02a      	beq.n	800ab4c <USBD_StdEPReq+0x80>
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	f040 817a 	bne.w	800adf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7ff fe83 	bl	800a80c <USBD_CoreFindEP>
 800ab06:	4603      	mov	r3, r0
 800ab08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab0a:	7b7b      	ldrb	r3, [r7, #13]
 800ab0c:	2bff      	cmp	r3, #255	; 0xff
 800ab0e:	f000 8174 	beq.w	800adfa <USBD_StdEPReq+0x32e>
 800ab12:	7b7b      	ldrb	r3, [r7, #13]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f040 8170 	bne.w	800adfa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ab1a:	7b7a      	ldrb	r2, [r7, #13]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ab22:	7b7a      	ldrb	r2, [r7, #13]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	32ae      	adds	r2, #174	; 0xae
 800ab28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 8163 	beq.w	800adfa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ab34:	7b7a      	ldrb	r2, [r7, #13]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	32ae      	adds	r2, #174	; 0xae
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	4798      	blx	r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab4a:	e156      	b.n	800adfa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	785b      	ldrb	r3, [r3, #1]
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d008      	beq.n	800ab66 <USBD_StdEPReq+0x9a>
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	f300 8145 	bgt.w	800ade4 <USBD_StdEPReq+0x318>
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 809b 	beq.w	800ac96 <USBD_StdEPReq+0x1ca>
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d03c      	beq.n	800abde <USBD_StdEPReq+0x112>
 800ab64:	e13e      	b.n	800ade4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d002      	beq.n	800ab78 <USBD_StdEPReq+0xac>
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d016      	beq.n	800aba4 <USBD_StdEPReq+0xd8>
 800ab76:	e02c      	b.n	800abd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00d      	beq.n	800ab9a <USBD_StdEPReq+0xce>
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	2b80      	cmp	r3, #128	; 0x80
 800ab82:	d00a      	beq.n	800ab9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 f993 	bl	800beb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab8e:	2180      	movs	r1, #128	; 0x80
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 f98f 	bl	800beb4 <USBD_LL_StallEP>
 800ab96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab98:	e020      	b.n	800abdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fc7a 	bl	800b496 <USBD_CtlError>
              break;
 800aba2:	e01b      	b.n	800abdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	885b      	ldrh	r3, [r3, #2]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10e      	bne.n	800abca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abac:	7bbb      	ldrb	r3, [r7, #14]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00b      	beq.n	800abca <USBD_StdEPReq+0xfe>
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	2b80      	cmp	r3, #128	; 0x80
 800abb6:	d008      	beq.n	800abca <USBD_StdEPReq+0xfe>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	88db      	ldrh	r3, [r3, #6]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d104      	bne.n	800abca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 f975 	bl	800beb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fd2e 	bl	800b62c <USBD_CtlSendStatus>

              break;
 800abd0:	e004      	b.n	800abdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc5e 	bl	800b496 <USBD_CtlError>
              break;
 800abda:	bf00      	nop
          }
          break;
 800abdc:	e107      	b.n	800adee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d002      	beq.n	800abf0 <USBD_StdEPReq+0x124>
 800abea:	2b03      	cmp	r3, #3
 800abec:	d016      	beq.n	800ac1c <USBD_StdEPReq+0x150>
 800abee:	e04b      	b.n	800ac88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00d      	beq.n	800ac12 <USBD_StdEPReq+0x146>
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	2b80      	cmp	r3, #128	; 0x80
 800abfa:	d00a      	beq.n	800ac12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abfc:	7bbb      	ldrb	r3, [r7, #14]
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 f957 	bl	800beb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac06:	2180      	movs	r1, #128	; 0x80
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 f953 	bl	800beb4 <USBD_LL_StallEP>
 800ac0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac10:	e040      	b.n	800ac94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fc3e 	bl	800b496 <USBD_CtlError>
              break;
 800ac1a:	e03b      	b.n	800ac94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	885b      	ldrh	r3, [r3, #2]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d136      	bne.n	800ac92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d004      	beq.n	800ac38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	4619      	mov	r1, r3
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f001 f95d 	bl	800bef2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fcf7 	bl	800b62c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff fde2 	bl	800a80c <USBD_CoreFindEP>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac4c:	7b7b      	ldrb	r3, [r7, #13]
 800ac4e:	2bff      	cmp	r3, #255	; 0xff
 800ac50:	d01f      	beq.n	800ac92 <USBD_StdEPReq+0x1c6>
 800ac52:	7b7b      	ldrb	r3, [r7, #13]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11c      	bne.n	800ac92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ac58:	7b7a      	ldrb	r2, [r7, #13]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ac60:	7b7a      	ldrb	r2, [r7, #13]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	32ae      	adds	r2, #174	; 0xae
 800ac66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d010      	beq.n	800ac92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac70:	7b7a      	ldrb	r2, [r7, #13]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	32ae      	adds	r2, #174	; 0xae
 800ac76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac86:	e004      	b.n	800ac92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fc03 	bl	800b496 <USBD_CtlError>
              break;
 800ac90:	e000      	b.n	800ac94 <USBD_StdEPReq+0x1c8>
              break;
 800ac92:	bf00      	nop
          }
          break;
 800ac94:	e0ab      	b.n	800adee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d002      	beq.n	800aca8 <USBD_StdEPReq+0x1dc>
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d032      	beq.n	800ad0c <USBD_StdEPReq+0x240>
 800aca6:	e097      	b.n	800add8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <USBD_StdEPReq+0x1f2>
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	2b80      	cmp	r3, #128	; 0x80
 800acb2:	d004      	beq.n	800acbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fbed 	bl	800b496 <USBD_CtlError>
                break;
 800acbc:	e091      	b.n	800ade2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	da0b      	bge.n	800acde <USBD_StdEPReq+0x212>
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	3310      	adds	r3, #16
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4413      	add	r3, r2
 800acda:	3304      	adds	r3, #4
 800acdc:	e00b      	b.n	800acf6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	3304      	adds	r3, #4
 800acf6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2200      	movs	r2, #0
 800acfc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2202      	movs	r2, #2
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fc37 	bl	800b578 <USBD_CtlSendData>
              break;
 800ad0a:	e06a      	b.n	800ade2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	da11      	bge.n	800ad38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	f003 020f 	and.w	r2, r3, #15
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	3324      	adds	r3, #36	; 0x24
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d117      	bne.n	800ad5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fbb0 	bl	800b496 <USBD_CtlError>
                  break;
 800ad36:	e054      	b.n	800ade2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	f003 020f 	and.w	r2, r3, #15
 800ad3e:	6879      	ldr	r1, [r7, #4]
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	440b      	add	r3, r1
 800ad4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d104      	bne.n	800ad5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fb9d 	bl	800b496 <USBD_CtlError>
                  break;
 800ad5c:	e041      	b.n	800ade2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	da0b      	bge.n	800ad7e <USBD_StdEPReq+0x2b2>
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
 800ad68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	3310      	adds	r3, #16
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	4413      	add	r3, r2
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	e00b      	b.n	800ad96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	4413      	add	r3, r2
 800ad94:	3304      	adds	r3, #4
 800ad96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <USBD_StdEPReq+0x2d8>
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	2b80      	cmp	r3, #128	; 0x80
 800ada2:	d103      	bne.n	800adac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	e00e      	b.n	800adca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f001 f8bd 	bl	800bf30 <USBD_LL_IsStallEP>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d003      	beq.n	800adc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2201      	movs	r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e002      	b.n	800adca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2200      	movs	r2, #0
 800adc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2202      	movs	r2, #2
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fbd1 	bl	800b578 <USBD_CtlSendData>
              break;
 800add6:	e004      	b.n	800ade2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fb5b 	bl	800b496 <USBD_CtlError>
              break;
 800ade0:	bf00      	nop
          }
          break;
 800ade2:	e004      	b.n	800adee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fb55 	bl	800b496 <USBD_CtlError>
          break;
 800adec:	bf00      	nop
      }
      break;
 800adee:	e005      	b.n	800adfc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fb4f 	bl	800b496 <USBD_CtlError>
      break;
 800adf8:	e000      	b.n	800adfc <USBD_StdEPReq+0x330>
      break;
 800adfa:	bf00      	nop
  }

  return ret;
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	0a1b      	lsrs	r3, r3, #8
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	3b01      	subs	r3, #1
 800ae28:	2b06      	cmp	r3, #6
 800ae2a:	f200 8128 	bhi.w	800b07e <USBD_GetDescriptor+0x276>
 800ae2e:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <USBD_GetDescriptor+0x2c>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800ae51 	.word	0x0800ae51
 800ae38:	0800ae69 	.word	0x0800ae69
 800ae3c:	0800aea9 	.word	0x0800aea9
 800ae40:	0800b07f 	.word	0x0800b07f
 800ae44:	0800b07f 	.word	0x0800b07f
 800ae48:	0800b01f 	.word	0x0800b01f
 800ae4c:	0800b04b 	.word	0x0800b04b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	7c12      	ldrb	r2, [r2, #16]
 800ae5c:	f107 0108 	add.w	r1, r7, #8
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
 800ae64:	60f8      	str	r0, [r7, #12]
      break;
 800ae66:	e112      	b.n	800b08e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7c1b      	ldrb	r3, [r3, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10d      	bne.n	800ae8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae78:	f107 0208 	add.w	r2, r7, #8
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
 800ae80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	2202      	movs	r2, #2
 800ae88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae8a:	e100      	b.n	800b08e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	f107 0208 	add.w	r2, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3301      	adds	r3, #1
 800aea2:	2202      	movs	r2, #2
 800aea4:	701a      	strb	r2, [r3, #0]
      break;
 800aea6:	e0f2      	b.n	800b08e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	885b      	ldrh	r3, [r3, #2]
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b05      	cmp	r3, #5
 800aeb0:	f200 80ac 	bhi.w	800b00c <USBD_GetDescriptor+0x204>
 800aeb4:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <USBD_GetDescriptor+0xb4>)
 800aeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeba:	bf00      	nop
 800aebc:	0800aed5 	.word	0x0800aed5
 800aec0:	0800af09 	.word	0x0800af09
 800aec4:	0800af3d 	.word	0x0800af3d
 800aec8:	0800af71 	.word	0x0800af71
 800aecc:	0800afa5 	.word	0x0800afa5
 800aed0:	0800afd9 	.word	0x0800afd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	7c12      	ldrb	r2, [r2, #16]
 800aeec:	f107 0108 	add.w	r1, r7, #8
 800aef0:	4610      	mov	r0, r2
 800aef2:	4798      	blx	r3
 800aef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aef6:	e091      	b.n	800b01c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 facb 	bl	800b496 <USBD_CtlError>
            err++;
 800af00:	7afb      	ldrb	r3, [r7, #11]
 800af02:	3301      	adds	r3, #1
 800af04:	72fb      	strb	r3, [r7, #11]
          break;
 800af06:	e089      	b.n	800b01c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00b      	beq.n	800af2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	7c12      	ldrb	r2, [r2, #16]
 800af20:	f107 0108 	add.w	r1, r7, #8
 800af24:	4610      	mov	r0, r2
 800af26:	4798      	blx	r3
 800af28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af2a:	e077      	b.n	800b01c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fab1 	bl	800b496 <USBD_CtlError>
            err++;
 800af34:	7afb      	ldrb	r3, [r7, #11]
 800af36:	3301      	adds	r3, #1
 800af38:	72fb      	strb	r3, [r7, #11]
          break;
 800af3a:	e06f      	b.n	800b01c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00b      	beq.n	800af60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	7c12      	ldrb	r2, [r2, #16]
 800af54:	f107 0108 	add.w	r1, r7, #8
 800af58:	4610      	mov	r0, r2
 800af5a:	4798      	blx	r3
 800af5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af5e:	e05d      	b.n	800b01c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fa97 	bl	800b496 <USBD_CtlError>
            err++;
 800af68:	7afb      	ldrb	r3, [r7, #11]
 800af6a:	3301      	adds	r3, #1
 800af6c:	72fb      	strb	r3, [r7, #11]
          break;
 800af6e:	e055      	b.n	800b01c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00b      	beq.n	800af94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	7c12      	ldrb	r2, [r2, #16]
 800af88:	f107 0108 	add.w	r1, r7, #8
 800af8c:	4610      	mov	r0, r2
 800af8e:	4798      	blx	r3
 800af90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af92:	e043      	b.n	800b01c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa7d 	bl	800b496 <USBD_CtlError>
            err++;
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	3301      	adds	r3, #1
 800afa0:	72fb      	strb	r3, [r7, #11]
          break;
 800afa2:	e03b      	b.n	800b01c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	7c12      	ldrb	r2, [r2, #16]
 800afbc:	f107 0108 	add.w	r1, r7, #8
 800afc0:	4610      	mov	r0, r2
 800afc2:	4798      	blx	r3
 800afc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afc6:	e029      	b.n	800b01c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fa63 	bl	800b496 <USBD_CtlError>
            err++;
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	3301      	adds	r3, #1
 800afd4:	72fb      	strb	r3, [r7, #11]
          break;
 800afd6:	e021      	b.n	800b01c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00b      	beq.n	800affc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	7c12      	ldrb	r2, [r2, #16]
 800aff0:	f107 0108 	add.w	r1, r7, #8
 800aff4:	4610      	mov	r0, r2
 800aff6:	4798      	blx	r3
 800aff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affa:	e00f      	b.n	800b01c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa49 	bl	800b496 <USBD_CtlError>
            err++;
 800b004:	7afb      	ldrb	r3, [r7, #11]
 800b006:	3301      	adds	r3, #1
 800b008:	72fb      	strb	r3, [r7, #11]
          break;
 800b00a:	e007      	b.n	800b01c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fa41 	bl	800b496 <USBD_CtlError>
          err++;
 800b014:	7afb      	ldrb	r3, [r7, #11]
 800b016:	3301      	adds	r3, #1
 800b018:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b01a:	bf00      	nop
      }
      break;
 800b01c:	e037      	b.n	800b08e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	7c1b      	ldrb	r3, [r3, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d109      	bne.n	800b03a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02e:	f107 0208 	add.w	r2, r7, #8
 800b032:	4610      	mov	r0, r2
 800b034:	4798      	blx	r3
 800b036:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b038:	e029      	b.n	800b08e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fa2a 	bl	800b496 <USBD_CtlError>
        err++;
 800b042:	7afb      	ldrb	r3, [r7, #11]
 800b044:	3301      	adds	r3, #1
 800b046:	72fb      	strb	r3, [r7, #11]
      break;
 800b048:	e021      	b.n	800b08e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7c1b      	ldrb	r3, [r3, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d10d      	bne.n	800b06e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05a:	f107 0208 	add.w	r2, r7, #8
 800b05e:	4610      	mov	r0, r2
 800b060:	4798      	blx	r3
 800b062:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	2207      	movs	r2, #7
 800b06a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b06c:	e00f      	b.n	800b08e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fa10 	bl	800b496 <USBD_CtlError>
        err++;
 800b076:	7afb      	ldrb	r3, [r7, #11]
 800b078:	3301      	adds	r3, #1
 800b07a:	72fb      	strb	r3, [r7, #11]
      break;
 800b07c:	e007      	b.n	800b08e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fa08 	bl	800b496 <USBD_CtlError>
      err++;
 800b086:	7afb      	ldrb	r3, [r7, #11]
 800b088:	3301      	adds	r3, #1
 800b08a:	72fb      	strb	r3, [r7, #11]
      break;
 800b08c:	bf00      	nop
  }

  if (err != 0U)
 800b08e:	7afb      	ldrb	r3, [r7, #11]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d11e      	bne.n	800b0d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	88db      	ldrh	r3, [r3, #6]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d016      	beq.n	800b0ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b09c:	893b      	ldrh	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00e      	beq.n	800b0c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	88da      	ldrh	r2, [r3, #6]
 800b0a6:	893b      	ldrh	r3, [r7, #8]
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	bf28      	it	cs
 800b0ac:	4613      	movcs	r3, r2
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0b2:	893b      	ldrh	r3, [r7, #8]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	68f9      	ldr	r1, [r7, #12]
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fa5d 	bl	800b578 <USBD_CtlSendData>
 800b0be:	e009      	b.n	800b0d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f9e7 	bl	800b496 <USBD_CtlError>
 800b0c8:	e004      	b.n	800b0d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 faae 	bl	800b62c <USBD_CtlSendStatus>
 800b0d0:	e000      	b.n	800b0d4 <USBD_GetDescriptor+0x2cc>
    return;
 800b0d2:	bf00      	nop
  }
}
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop

0800b0dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	889b      	ldrh	r3, [r3, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d131      	bne.n	800b152 <USBD_SetAddress+0x76>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	88db      	ldrh	r3, [r3, #6]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d12d      	bne.n	800b152 <USBD_SetAddress+0x76>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	885b      	ldrh	r3, [r3, #2]
 800b0fa:	2b7f      	cmp	r3, #127	; 0x7f
 800b0fc:	d829      	bhi.n	800b152 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	885b      	ldrh	r3, [r3, #2]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b108:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b03      	cmp	r3, #3
 800b114:	d104      	bne.n	800b120 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f9bc 	bl	800b496 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b11e:	e01d      	b.n	800b15c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	7bfa      	ldrb	r2, [r7, #15]
 800b124:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b128:	7bfb      	ldrb	r3, [r7, #15]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 ff2b 	bl	800bf88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fa7a 	bl	800b62c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2202      	movs	r2, #2
 800b142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b146:	e009      	b.n	800b15c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b150:	e004      	b.n	800b15c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f99e 	bl	800b496 <USBD_CtlError>
  }
}
 800b15a:	bf00      	nop
 800b15c:	bf00      	nop
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	885b      	ldrh	r3, [r3, #2]
 800b176:	b2da      	uxtb	r2, r3
 800b178:	4b4e      	ldr	r3, [pc, #312]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b17a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b17c:	4b4d      	ldr	r3, [pc, #308]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d905      	bls.n	800b190 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f985 	bl	800b496 <USBD_CtlError>
    return USBD_FAIL;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e08c      	b.n	800b2aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d002      	beq.n	800b1a2 <USBD_SetConfig+0x3e>
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d029      	beq.n	800b1f4 <USBD_SetConfig+0x90>
 800b1a0:	e075      	b.n	800b28e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b1a2:	4b44      	ldr	r3, [pc, #272]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d020      	beq.n	800b1ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b1aa:	4b42      	ldr	r3, [pc, #264]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1b4:	4b3f      	ldr	r3, [pc, #252]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7fe ffe1 	bl	800a182 <USBD_SetClassConfig>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d008      	beq.n	800b1dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b1ca:	6839      	ldr	r1, [r7, #0]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f962 	bl	800b496 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1da:	e065      	b.n	800b2a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa25 	bl	800b62c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2203      	movs	r2, #3
 800b1e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1ea:	e05d      	b.n	800b2a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fa1d 	bl	800b62c <USBD_CtlSendStatus>
      break;
 800b1f2:	e059      	b.n	800b2a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1f4:	4b2f      	ldr	r3, [pc, #188]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d112      	bne.n	800b222 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b204:	4b2b      	ldr	r3, [pc, #172]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	461a      	mov	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b20e:	4b29      	ldr	r3, [pc, #164]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7fe ffd0 	bl	800a1ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fa06 	bl	800b62c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b220:	e042      	b.n	800b2a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b222:	4b24      	ldr	r3, [pc, #144]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d02a      	beq.n	800b286 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	b2db      	uxtb	r3, r3
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7fe ffbe 	bl	800a1ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b23e:	4b1d      	ldr	r3, [pc, #116]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	461a      	mov	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b248:	4b1a      	ldr	r3, [pc, #104]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7fe ff97 	bl	800a182 <USBD_SetClassConfig>
 800b254:	4603      	mov	r3, r0
 800b256:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00f      	beq.n	800b27e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f918 	bl	800b496 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7fe ffa3 	bl	800a1ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2202      	movs	r2, #2
 800b278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b27c:	e014      	b.n	800b2a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f9d4 	bl	800b62c <USBD_CtlSendStatus>
      break;
 800b284:	e010      	b.n	800b2a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f9d0 	bl	800b62c <USBD_CtlSendStatus>
      break;
 800b28c:	e00c      	b.n	800b2a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f900 	bl	800b496 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b296:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <USBD_SetConfig+0x150>)
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7fe ff8c 	bl	800a1ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b2a6:	bf00      	nop
  }

  return ret;
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	24000640 	.word	0x24000640

0800b2b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	88db      	ldrh	r3, [r3, #6]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d004      	beq.n	800b2d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f8e2 	bl	800b496 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2d2:	e023      	b.n	800b31c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	dc02      	bgt.n	800b2e6 <USBD_GetConfig+0x2e>
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dc03      	bgt.n	800b2ec <USBD_GetConfig+0x34>
 800b2e4:	e015      	b.n	800b312 <USBD_GetConfig+0x5a>
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d00b      	beq.n	800b302 <USBD_GetConfig+0x4a>
 800b2ea:	e012      	b.n	800b312 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f93c 	bl	800b578 <USBD_CtlSendData>
        break;
 800b300:	e00c      	b.n	800b31c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3304      	adds	r3, #4
 800b306:	2201      	movs	r2, #1
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f934 	bl	800b578 <USBD_CtlSendData>
        break;
 800b310:	e004      	b.n	800b31c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f8be 	bl	800b496 <USBD_CtlError>
        break;
 800b31a:	bf00      	nop
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d81e      	bhi.n	800b37a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	88db      	ldrh	r3, [r3, #6]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d004      	beq.n	800b34e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f8a5 	bl	800b496 <USBD_CtlError>
        break;
 800b34c:	e01a      	b.n	800b384 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f043 0202 	orr.w	r2, r3, #2
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	330c      	adds	r3, #12
 800b36e:	2202      	movs	r2, #2
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f900 	bl	800b578 <USBD_CtlSendData>
      break;
 800b378:	e004      	b.n	800b384 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f88a 	bl	800b496 <USBD_CtlError>
      break;
 800b382:	bf00      	nop
  }
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	885b      	ldrh	r3, [r3, #2]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d107      	bne.n	800b3ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f940 	bl	800b62c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b3ac:	e013      	b.n	800b3d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	885b      	ldrh	r3, [r3, #2]
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d10b      	bne.n	800b3ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	889b      	ldrh	r3, [r3, #4]
 800b3ba:	0a1b      	lsrs	r3, r3, #8
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f930 	bl	800b62c <USBD_CtlSendStatus>
}
 800b3cc:	e003      	b.n	800b3d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f860 	bl	800b496 <USBD_CtlError>
}
 800b3d6:	bf00      	nop
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d80b      	bhi.n	800b40e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	885b      	ldrh	r3, [r3, #2]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d10c      	bne.n	800b418 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f910 	bl	800b62c <USBD_CtlSendStatus>
      }
      break;
 800b40c:	e004      	b.n	800b418 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f840 	bl	800b496 <USBD_CtlError>
      break;
 800b416:	e000      	b.n	800b41a <USBD_ClrFeature+0x3c>
      break;
 800b418:	bf00      	nop
  }
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b084      	sub	sp, #16
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3301      	adds	r3, #1
 800b44a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7ff fa41 	bl	800a8d4 <SWAPBYTE>
 800b452:	4603      	mov	r3, r0
 800b454:	461a      	mov	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	3301      	adds	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f7ff fa34 	bl	800a8d4 <SWAPBYTE>
 800b46c:	4603      	mov	r3, r0
 800b46e:	461a      	mov	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3301      	adds	r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f7ff fa27 	bl	800a8d4 <SWAPBYTE>
 800b486:	4603      	mov	r3, r0
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	80da      	strh	r2, [r3, #6]
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4a0:	2180      	movs	r1, #128	; 0x80
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fd06 	bl	800beb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fd02 	bl	800beb4 <USBD_LL_StallEP>
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d036      	beq.n	800b53c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4d2:	6938      	ldr	r0, [r7, #16]
 800b4d4:	f000 f836 	bl	800b544 <USBD_GetLen>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	3301      	adds	r3, #1
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4e6:	7dfb      	ldrb	r3, [r7, #23]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	7812      	ldrb	r2, [r2, #0]
 800b4f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4f8:	7dfb      	ldrb	r3, [r7, #23]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	2203      	movs	r2, #3
 800b500:	701a      	strb	r2, [r3, #0]
  idx++;
 800b502:	7dfb      	ldrb	r3, [r7, #23]
 800b504:	3301      	adds	r3, #1
 800b506:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b508:	e013      	b.n	800b532 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	4413      	add	r3, r2
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	7812      	ldrb	r2, [r2, #0]
 800b514:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	3301      	adds	r3, #1
 800b51a:	613b      	str	r3, [r7, #16]
    idx++;
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	3301      	adds	r3, #1
 800b520:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	4413      	add	r3, r2
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b52c:	7dfb      	ldrb	r3, [r7, #23]
 800b52e:	3301      	adds	r3, #1
 800b530:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e7      	bne.n	800b50a <USBD_GetString+0x52>
 800b53a:	e000      	b.n	800b53e <USBD_GetString+0x86>
    return;
 800b53c:	bf00      	nop
  }
}
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b554:	e005      	b.n	800b562 <USBD_GetLen+0x1e>
  {
    len++;
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	3301      	adds	r3, #1
 800b55a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	3301      	adds	r3, #1
 800b560:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f5      	bne.n	800b556 <USBD_GetLen+0x12>
  }

  return len;
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2202      	movs	r2, #2
 800b588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	2100      	movs	r1, #0
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 fd11 	bl	800bfc6 <USBD_LL_Transmit>

  return USBD_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	2100      	movs	r1, #0
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f000 fd00 	bl	800bfc6 <USBD_LL_Transmit>

  return USBD_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2203      	movs	r2, #3
 800b5e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 fd04 	bl	800c008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	60b9      	str	r1, [r7, #8]
 800b614:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	2100      	movs	r1, #0
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 fcf3 	bl	800c008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2204      	movs	r2, #4
 800b638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b63c:	2300      	movs	r3, #0
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fcbf 	bl	800bfc6 <USBD_LL_Transmit>

  return USBD_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2205      	movs	r2, #5
 800b65e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b662:	2300      	movs	r3, #0
 800b664:	2200      	movs	r2, #0
 800b666:	2100      	movs	r1, #0
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fccd 	bl	800c008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b67c:	2200      	movs	r2, #0
 800b67e:	4913      	ldr	r1, [pc, #76]	; (800b6cc <MX_USB_DEVICE_Init+0x54>)
 800b680:	4813      	ldr	r0, [pc, #76]	; (800b6d0 <MX_USB_DEVICE_Init+0x58>)
 800b682:	f7fe fd01 	bl	800a088 <USBD_Init>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b68c:	f7f5 fe6a 	bl	8001364 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b690:	4910      	ldr	r1, [pc, #64]	; (800b6d4 <MX_USB_DEVICE_Init+0x5c>)
 800b692:	480f      	ldr	r0, [pc, #60]	; (800b6d0 <MX_USB_DEVICE_Init+0x58>)
 800b694:	f7fe fd28 	bl	800a0e8 <USBD_RegisterClass>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b69e:	f7f5 fe61 	bl	8001364 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6a2:	490d      	ldr	r1, [pc, #52]	; (800b6d8 <MX_USB_DEVICE_Init+0x60>)
 800b6a4:	480a      	ldr	r0, [pc, #40]	; (800b6d0 <MX_USB_DEVICE_Init+0x58>)
 800b6a6:	f7fe fc1f 	bl	8009ee8 <USBD_CDC_RegisterInterface>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6b0:	f7f5 fe58 	bl	8001364 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6b4:	4806      	ldr	r0, [pc, #24]	; (800b6d0 <MX_USB_DEVICE_Init+0x58>)
 800b6b6:	f7fe fd4d 	bl	800a154 <USBD_Start>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b6c0:	f7f5 fe50 	bl	8001364 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800b6c4:	f7f8 fe7a 	bl	80043bc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6c8:	bf00      	nop
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	24000398 	.word	0x24000398
 800b6d0:	24000644 	.word	0x24000644
 800b6d4:	24000304 	.word	0x24000304
 800b6d8:	24000384 	.word	0x24000384

0800b6dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4905      	ldr	r1, [pc, #20]	; (800b6f8 <CDC_Init_FS+0x1c>)
 800b6e4:	4805      	ldr	r0, [pc, #20]	; (800b6fc <CDC_Init_FS+0x20>)
 800b6e6:	f7fe fc19 	bl	8009f1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6ea:	4905      	ldr	r1, [pc, #20]	; (800b700 <CDC_Init_FS+0x24>)
 800b6ec:	4803      	ldr	r0, [pc, #12]	; (800b6fc <CDC_Init_FS+0x20>)
 800b6ee:	f7fe fc37 	bl	8009f60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	24001120 	.word	0x24001120
 800b6fc:	24000644 	.word	0x24000644
 800b700:	24000920 	.word	0x24000920

0800b704 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b708:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	6039      	str	r1, [r7, #0]
 800b71e:	71fb      	strb	r3, [r7, #7]
 800b720:	4613      	mov	r3, r2
 800b722:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	2b23      	cmp	r3, #35	; 0x23
 800b728:	d84a      	bhi.n	800b7c0 <CDC_Control_FS+0xac>
 800b72a:	a201      	add	r2, pc, #4	; (adr r2, 800b730 <CDC_Control_FS+0x1c>)
 800b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b730:	0800b7c1 	.word	0x0800b7c1
 800b734:	0800b7c1 	.word	0x0800b7c1
 800b738:	0800b7c1 	.word	0x0800b7c1
 800b73c:	0800b7c1 	.word	0x0800b7c1
 800b740:	0800b7c1 	.word	0x0800b7c1
 800b744:	0800b7c1 	.word	0x0800b7c1
 800b748:	0800b7c1 	.word	0x0800b7c1
 800b74c:	0800b7c1 	.word	0x0800b7c1
 800b750:	0800b7c1 	.word	0x0800b7c1
 800b754:	0800b7c1 	.word	0x0800b7c1
 800b758:	0800b7c1 	.word	0x0800b7c1
 800b75c:	0800b7c1 	.word	0x0800b7c1
 800b760:	0800b7c1 	.word	0x0800b7c1
 800b764:	0800b7c1 	.word	0x0800b7c1
 800b768:	0800b7c1 	.word	0x0800b7c1
 800b76c:	0800b7c1 	.word	0x0800b7c1
 800b770:	0800b7c1 	.word	0x0800b7c1
 800b774:	0800b7c1 	.word	0x0800b7c1
 800b778:	0800b7c1 	.word	0x0800b7c1
 800b77c:	0800b7c1 	.word	0x0800b7c1
 800b780:	0800b7c1 	.word	0x0800b7c1
 800b784:	0800b7c1 	.word	0x0800b7c1
 800b788:	0800b7c1 	.word	0x0800b7c1
 800b78c:	0800b7c1 	.word	0x0800b7c1
 800b790:	0800b7c1 	.word	0x0800b7c1
 800b794:	0800b7c1 	.word	0x0800b7c1
 800b798:	0800b7c1 	.word	0x0800b7c1
 800b79c:	0800b7c1 	.word	0x0800b7c1
 800b7a0:	0800b7c1 	.word	0x0800b7c1
 800b7a4:	0800b7c1 	.word	0x0800b7c1
 800b7a8:	0800b7c1 	.word	0x0800b7c1
 800b7ac:	0800b7c1 	.word	0x0800b7c1
 800b7b0:	0800b7c1 	.word	0x0800b7c1
 800b7b4:	0800b7c1 	.word	0x0800b7c1
 800b7b8:	0800b7c1 	.word	0x0800b7c1
 800b7bc:	0800b7c1 	.word	0x0800b7c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7c0:	bf00      	nop
  }

  return (USBD_OK);
 800b7c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	4805      	ldr	r0, [pc, #20]	; (800b7f4 <CDC_Receive_FS+0x24>)
 800b7de:	f7fe fbbf 	bl	8009f60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7e2:	4804      	ldr	r0, [pc, #16]	; (800b7f4 <CDC_Receive_FS+0x24>)
 800b7e4:	f7fe fc1a 	bl	800a01c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b7e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	24000644 	.word	0x24000644

0800b7f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b808:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <CDC_Transmit_FS+0x48>)
 800b80a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b80e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e00b      	b.n	800b836 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b81e:	887b      	ldrh	r3, [r7, #2]
 800b820:	461a      	mov	r2, r3
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	4806      	ldr	r0, [pc, #24]	; (800b840 <CDC_Transmit_FS+0x48>)
 800b826:	f7fe fb79 	bl	8009f1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b82a:	4805      	ldr	r0, [pc, #20]	; (800b840 <CDC_Transmit_FS+0x48>)
 800b82c:	f7fe fbb6 	bl	8009f9c <USBD_CDC_TransmitPacket>
 800b830:	4603      	mov	r3, r0
 800b832:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b834:	7bfb      	ldrb	r3, [r7, #15]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	24000644 	.word	0x24000644

0800b844 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	4613      	mov	r3, r2
 800b850:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
	...

0800b868 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	6039      	str	r1, [r7, #0]
 800b872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2212      	movs	r2, #18
 800b878:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b87a:	4b03      	ldr	r3, [pc, #12]	; (800b888 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	240003b4 	.word	0x240003b4

0800b88c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	6039      	str	r1, [r7, #0]
 800b896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2204      	movs	r2, #4
 800b89c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b89e:	4b03      	ldr	r3, [pc, #12]	; (800b8ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	240003c8 	.word	0x240003c8

0800b8b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	6039      	str	r1, [r7, #0]
 800b8ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d105      	bne.n	800b8ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4907      	ldr	r1, [pc, #28]	; (800b8e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8c6:	4808      	ldr	r0, [pc, #32]	; (800b8e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8c8:	f7ff fdf6 	bl	800b4b8 <USBD_GetString>
 800b8cc:	e004      	b.n	800b8d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4904      	ldr	r1, [pc, #16]	; (800b8e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8d2:	4805      	ldr	r0, [pc, #20]	; (800b8e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8d4:	f7ff fdf0 	bl	800b4b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8d8:	4b02      	ldr	r3, [pc, #8]	; (800b8e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	24001920 	.word	0x24001920
 800b8e8:	0800d404 	.word	0x0800d404

0800b8ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	6039      	str	r1, [r7, #0]
 800b8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	4904      	ldr	r1, [pc, #16]	; (800b90c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b8fc:	4804      	ldr	r0, [pc, #16]	; (800b910 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b8fe:	f7ff fddb 	bl	800b4b8 <USBD_GetString>
  return USBD_StrDesc;
 800b902:	4b02      	ldr	r3, [pc, #8]	; (800b90c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b904:	4618      	mov	r0, r3
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	24001920 	.word	0x24001920
 800b910:	0800d41c 	.word	0x0800d41c

0800b914 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	6039      	str	r1, [r7, #0]
 800b91e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	221a      	movs	r2, #26
 800b924:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b926:	f000 f843 	bl	800b9b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b92a:	4b02      	ldr	r3, [pc, #8]	; (800b934 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	240003cc 	.word	0x240003cc

0800b938 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	4603      	mov	r3, r0
 800b940:	6039      	str	r1, [r7, #0]
 800b942:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b944:	79fb      	ldrb	r3, [r7, #7]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d105      	bne.n	800b956 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	4907      	ldr	r1, [pc, #28]	; (800b96c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b94e:	4808      	ldr	r0, [pc, #32]	; (800b970 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b950:	f7ff fdb2 	bl	800b4b8 <USBD_GetString>
 800b954:	e004      	b.n	800b960 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	4904      	ldr	r1, [pc, #16]	; (800b96c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b95a:	4805      	ldr	r0, [pc, #20]	; (800b970 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b95c:	f7ff fdac 	bl	800b4b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b960:	4b02      	ldr	r3, [pc, #8]	; (800b96c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	24001920 	.word	0x24001920
 800b970:	0800d430 	.word	0x0800d430

0800b974 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4603      	mov	r3, r0
 800b97c:	6039      	str	r1, [r7, #0]
 800b97e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d105      	bne.n	800b992 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	4907      	ldr	r1, [pc, #28]	; (800b9a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b98a:	4808      	ldr	r0, [pc, #32]	; (800b9ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b98c:	f7ff fd94 	bl	800b4b8 <USBD_GetString>
 800b990:	e004      	b.n	800b99c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	4904      	ldr	r1, [pc, #16]	; (800b9a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b996:	4805      	ldr	r0, [pc, #20]	; (800b9ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b998:	f7ff fd8e 	bl	800b4b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b99c:	4b02      	ldr	r3, [pc, #8]	; (800b9a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	24001920 	.word	0x24001920
 800b9ac:	0800d43c 	.word	0x0800d43c

0800b9b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <Get_SerialNum+0x44>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <Get_SerialNum+0x48>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	; (800b9fc <Get_SerialNum+0x4c>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d009      	beq.n	800b9ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9d6:	2208      	movs	r2, #8
 800b9d8:	4909      	ldr	r1, [pc, #36]	; (800ba00 <Get_SerialNum+0x50>)
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 f814 	bl	800ba08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9e0:	2204      	movs	r2, #4
 800b9e2:	4908      	ldr	r1, [pc, #32]	; (800ba04 <Get_SerialNum+0x54>)
 800b9e4:	68b8      	ldr	r0, [r7, #8]
 800b9e6:	f000 f80f 	bl	800ba08 <IntToUnicode>
  }
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	1ff1e800 	.word	0x1ff1e800
 800b9f8:	1ff1e804 	.word	0x1ff1e804
 800b9fc:	1ff1e808 	.word	0x1ff1e808
 800ba00:	240003ce 	.word	0x240003ce
 800ba04:	240003de 	.word	0x240003de

0800ba08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4613      	mov	r3, r2
 800ba14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	75fb      	strb	r3, [r7, #23]
 800ba1e:	e027      	b.n	800ba70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	0f1b      	lsrs	r3, r3, #28
 800ba24:	2b09      	cmp	r3, #9
 800ba26:	d80b      	bhi.n	800ba40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	0f1b      	lsrs	r3, r3, #28
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	005b      	lsls	r3, r3, #1
 800ba32:	4619      	mov	r1, r3
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	440b      	add	r3, r1
 800ba38:	3230      	adds	r2, #48	; 0x30
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	701a      	strb	r2, [r3, #0]
 800ba3e:	e00a      	b.n	800ba56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	0f1b      	lsrs	r3, r3, #28
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	7dfb      	ldrb	r3, [r7, #23]
 800ba48:	005b      	lsls	r3, r3, #1
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	440b      	add	r3, r1
 800ba50:	3237      	adds	r2, #55	; 0x37
 800ba52:	b2d2      	uxtb	r2, r2
 800ba54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	3301      	adds	r3, #1
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	4413      	add	r3, r2
 800ba66:	2200      	movs	r2, #0
 800ba68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	75fb      	strb	r3, [r7, #23]
 800ba70:	7dfa      	ldrb	r2, [r7, #23]
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d3d3      	bcc.n	800ba20 <IntToUnicode+0x18>
  }
}
 800ba78:	bf00      	nop
 800ba7a:	bf00      	nop
 800ba7c:	371c      	adds	r7, #28
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
	...

0800ba88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b0ba      	sub	sp, #232	; 0xe8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ba94:	2200      	movs	r2, #0
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	605a      	str	r2, [r3, #4]
 800ba9a:	609a      	str	r2, [r3, #8]
 800ba9c:	60da      	str	r2, [r3, #12]
 800ba9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800baa0:	f107 0310 	add.w	r3, r7, #16
 800baa4:	22c0      	movs	r2, #192	; 0xc0
 800baa6:	2100      	movs	r1, #0
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 fe63 	bl	800c774 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a2c      	ldr	r2, [pc, #176]	; (800bb64 <HAL_PCD_MspInit+0xdc>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d151      	bne.n	800bb5c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bab8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800babc:	f04f 0300 	mov.w	r3, #0
 800bac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bacc:	f107 0310 	add.w	r3, r7, #16
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7f9 fc53 	bl	800537c <HAL_RCCEx_PeriphCLKConfig>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800badc:	f7f5 fc42 	bl	8001364 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bae0:	f7f8 fc6c 	bl	80043bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bae4:	4b20      	ldr	r3, [pc, #128]	; (800bb68 <HAL_PCD_MspInit+0xe0>)
 800bae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800baea:	4a1f      	ldr	r2, [pc, #124]	; (800bb68 <HAL_PCD_MspInit+0xe0>)
 800baec:	f043 0301 	orr.w	r3, r3, #1
 800baf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800baf4:	4b1c      	ldr	r3, [pc, #112]	; (800bb68 <HAL_PCD_MspInit+0xe0>)
 800baf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800bb02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb10:	2300      	movs	r3, #0
 800bb12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb16:	2300      	movs	r3, #0
 800bb18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bb1c:	230a      	movs	r3, #10
 800bb1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bb26:	4619      	mov	r1, r3
 800bb28:	4810      	ldr	r0, [pc, #64]	; (800bb6c <HAL_PCD_MspInit+0xe4>)
 800bb2a:	f7f6 ff8b 	bl	8002a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb2e:	4b0e      	ldr	r3, [pc, #56]	; (800bb68 <HAL_PCD_MspInit+0xe0>)
 800bb30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb34:	4a0c      	ldr	r2, [pc, #48]	; (800bb68 <HAL_PCD_MspInit+0xe0>)
 800bb36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bb3e:	4b0a      	ldr	r3, [pc, #40]	; (800bb68 <HAL_PCD_MspInit+0xe0>)
 800bb40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb48:	60bb      	str	r3, [r7, #8]
 800bb4a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2100      	movs	r1, #0
 800bb50:	2065      	movs	r0, #101	; 0x65
 800bb52:	f7f6 ff42 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb56:	2065      	movs	r0, #101	; 0x65
 800bb58:	f7f6 ff59 	bl	8002a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	37e8      	adds	r7, #232	; 0xe8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	40080000 	.word	0x40080000
 800bb68:	58024400 	.word	0x58024400
 800bb6c:	58020000 	.word	0x58020000

0800bb70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bb84:	4619      	mov	r1, r3
 800bb86:	4610      	mov	r0, r2
 800bb88:	f7fe fb31 	bl	800a1ee <USBD_LL_SetupStage>
}
 800bb8c:	bf00      	nop
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bba6:	78fa      	ldrb	r2, [r7, #3]
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	00db      	lsls	r3, r3, #3
 800bbae:	4413      	add	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	440b      	add	r3, r1
 800bbb4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	78fb      	ldrb	r3, [r7, #3]
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	f7fe fb6b 	bl	800a298 <USBD_LL_DataOutStage>
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bbdc:	78fa      	ldrb	r2, [r7, #3]
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	440b      	add	r3, r1
 800bbea:	3348      	adds	r3, #72	; 0x48
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	78fb      	ldrb	r3, [r7, #3]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	f7fe fc04 	bl	800a3fe <USBD_LL_DataInStage>
}
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe fd3e 	bl	800a68e <USBD_LL_SOF>
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc22:	2301      	movs	r3, #1
 800bc24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d102      	bne.n	800bc34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	73fb      	strb	r3, [r7, #15]
 800bc32:	e008      	b.n	800bc46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d102      	bne.n	800bc42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	73fb      	strb	r3, [r7, #15]
 800bc40:	e001      	b.n	800bc46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bc42:	f7f5 fb8f 	bl	8001364 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc4c:	7bfa      	ldrb	r2, [r7, #15]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe fcd8 	bl	800a606 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe fc80 	bl	800a562 <USBD_LL_Reset>
}
 800bc62:	bf00      	nop
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe fcd3 	bl	800a626 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a1b      	ldr	r3, [r3, #32]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d005      	beq.n	800bcac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <HAL_PCD_SuspendCallback+0x48>)
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	4a03      	ldr	r2, [pc, #12]	; (800bcb4 <HAL_PCD_SuspendCallback+0x48>)
 800bca6:	f043 0306 	orr.w	r3, r3, #6
 800bcaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	e000ed00 	.word	0xe000ed00

0800bcb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fcc9 	bl	800a65e <USBD_LL_Resume>
}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bce6:	78fa      	ldrb	r2, [r7, #3]
 800bce8:	4611      	mov	r1, r2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fd21 	bl	800a732 <USBD_LL_IsoOUTIncomplete>
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd0a:	78fa      	ldrb	r2, [r7, #3]
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe fcdd 	bl	800a6ce <USBD_LL_IsoINIncomplete>
}
 800bd14:	bf00      	nop
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe fd33 	bl	800a796 <USBD_LL_DevConnected>
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe fd30 	bl	800a7ac <USBD_LL_DevDisconnected>
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d13e      	bne.n	800bde2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd64:	4a21      	ldr	r2, [pc, #132]	; (800bdec <USBD_LL_Init+0x98>)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a1f      	ldr	r2, [pc, #124]	; (800bdec <USBD_LL_Init+0x98>)
 800bd70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd74:	4b1d      	ldr	r3, [pc, #116]	; (800bdec <USBD_LL_Init+0x98>)
 800bd76:	4a1e      	ldr	r2, [pc, #120]	; (800bdf0 <USBD_LL_Init+0x9c>)
 800bd78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800bd7a:	4b1c      	ldr	r3, [pc, #112]	; (800bdec <USBD_LL_Init+0x98>)
 800bd7c:	2209      	movs	r2, #9
 800bd7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd80:	4b1a      	ldr	r3, [pc, #104]	; (800bdec <USBD_LL_Init+0x98>)
 800bd82:	2202      	movs	r2, #2
 800bd84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd86:	4b19      	ldr	r3, [pc, #100]	; (800bdec <USBD_LL_Init+0x98>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd8c:	4b17      	ldr	r3, [pc, #92]	; (800bdec <USBD_LL_Init+0x98>)
 800bd8e:	2202      	movs	r2, #2
 800bd90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd92:	4b16      	ldr	r3, [pc, #88]	; (800bdec <USBD_LL_Init+0x98>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd98:	4b14      	ldr	r3, [pc, #80]	; (800bdec <USBD_LL_Init+0x98>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd9e:	4b13      	ldr	r3, [pc, #76]	; (800bdec <USBD_LL_Init+0x98>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bda4:	4b11      	ldr	r3, [pc, #68]	; (800bdec <USBD_LL_Init+0x98>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bdaa:	4b10      	ldr	r3, [pc, #64]	; (800bdec <USBD_LL_Init+0x98>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bdb0:	4b0e      	ldr	r3, [pc, #56]	; (800bdec <USBD_LL_Init+0x98>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bdb6:	480d      	ldr	r0, [pc, #52]	; (800bdec <USBD_LL_Init+0x98>)
 800bdb8:	f7f7 f80d 	bl	8002dd6 <HAL_PCD_Init>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800bdc2:	f7f5 facf 	bl	8001364 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bdc6:	2180      	movs	r1, #128	; 0x80
 800bdc8:	4808      	ldr	r0, [pc, #32]	; (800bdec <USBD_LL_Init+0x98>)
 800bdca:	f7f8 fa7c 	bl	80042c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bdce:	2240      	movs	r2, #64	; 0x40
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	4806      	ldr	r0, [pc, #24]	; (800bdec <USBD_LL_Init+0x98>)
 800bdd4:	f7f8 fa30 	bl	8004238 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bdd8:	2280      	movs	r2, #128	; 0x80
 800bdda:	2101      	movs	r1, #1
 800bddc:	4803      	ldr	r0, [pc, #12]	; (800bdec <USBD_LL_Init+0x98>)
 800bdde:	f7f8 fa2b 	bl	8004238 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	24001b20 	.word	0x24001b20
 800bdf0:	40080000 	.word	0x40080000

0800bdf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f7 f907 	bl	800301e <HAL_PCD_Start>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 f942 	bl	800c0a0 <USBD_Get_USB_Status>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be20:	7bbb      	ldrb	r3, [r7, #14]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	4608      	mov	r0, r1
 800be34:	4611      	mov	r1, r2
 800be36:	461a      	mov	r2, r3
 800be38:	4603      	mov	r3, r0
 800be3a:	70fb      	strb	r3, [r7, #3]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70bb      	strb	r3, [r7, #2]
 800be40:	4613      	mov	r3, r2
 800be42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be48:	2300      	movs	r3, #0
 800be4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be52:	78bb      	ldrb	r3, [r7, #2]
 800be54:	883a      	ldrh	r2, [r7, #0]
 800be56:	78f9      	ldrb	r1, [r7, #3]
 800be58:	f7f7 fe07 	bl	8003a6a <HAL_PCD_EP_Open>
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be60:	7bfb      	ldrb	r3, [r7, #15]
 800be62:	4618      	mov	r0, r3
 800be64:	f000 f91c 	bl	800c0a0 <USBD_Get_USB_Status>
 800be68:	4603      	mov	r3, r0
 800be6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be90:	78fa      	ldrb	r2, [r7, #3]
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f7f7 fe50 	bl	8003b3a <HAL_PCD_EP_Close>
 800be9a:	4603      	mov	r3, r0
 800be9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 f8fd 	bl	800c0a0 <USBD_Get_USB_Status>
 800bea6:	4603      	mov	r3, r0
 800bea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bece:	78fa      	ldrb	r2, [r7, #3]
 800bed0:	4611      	mov	r1, r2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7f7 ff0a 	bl	8003cec <HAL_PCD_EP_SetStall>
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 f8de 	bl	800c0a0 <USBD_Get_USB_Status>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	460b      	mov	r3, r1
 800befc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf0c:	78fa      	ldrb	r2, [r7, #3]
 800bf0e:	4611      	mov	r1, r2
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7f7 ff4f 	bl	8003db4 <HAL_PCD_EP_ClrStall>
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 f8bf 	bl	800c0a0 <USBD_Get_USB_Status>
 800bf22:	4603      	mov	r3, r0
 800bf24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	da0b      	bge.n	800bf64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf4c:	78fb      	ldrb	r3, [r7, #3]
 800bf4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf52:	68f9      	ldr	r1, [r7, #12]
 800bf54:	4613      	mov	r3, r2
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	4413      	add	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	440b      	add	r3, r1
 800bf5e:	333e      	adds	r3, #62	; 0x3e
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	e00b      	b.n	800bf7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf64:	78fb      	ldrb	r3, [r7, #3]
 800bf66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf6a:	68f9      	ldr	r1, [r7, #12]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bf7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfa2:	78fa      	ldrb	r2, [r7, #3]
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7f7 fd3a 	bl	8003a20 <HAL_PCD_SetAddress>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 f874 	bl	800c0a0 <USBD_Get_USB_Status>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b086      	sub	sp, #24
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	603b      	str	r3, [r7, #0]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bfe4:	7af9      	ldrb	r1, [r7, #11]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	f7f7 fe44 	bl	8003c76 <HAL_PCD_EP_Transmit>
 800bfee:	4603      	mov	r3, r0
 800bff0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f853 	bl	800c0a0 <USBD_Get_USB_Status>
 800bffa:	4603      	mov	r3, r0
 800bffc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bffe:	7dbb      	ldrb	r3, [r7, #22]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	460b      	mov	r3, r1
 800c016:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c026:	7af9      	ldrb	r1, [r7, #11]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	f7f7 fdcf 	bl	8003bce <HAL_PCD_EP_Receive>
 800c030:	4603      	mov	r3, r0
 800c032:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c034:	7dfb      	ldrb	r3, [r7, #23]
 800c036:	4618      	mov	r0, r3
 800c038:	f000 f832 	bl	800c0a0 <USBD_Get_USB_Status>
 800c03c:	4603      	mov	r3, r0
 800c03e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c040:	7dbb      	ldrb	r3, [r7, #22]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b082      	sub	sp, #8
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	460b      	mov	r3, r1
 800c054:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c05c:	78fa      	ldrb	r2, [r7, #3]
 800c05e:	4611      	mov	r1, r2
 800c060:	4618      	mov	r0, r3
 800c062:	f7f7 fdf0 	bl	8003c46 <HAL_PCD_EP_GetRxCount>
 800c066:	4603      	mov	r3, r0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c078:	4b03      	ldr	r3, [pc, #12]	; (800c088 <USBD_static_malloc+0x18>)
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	2400202c 	.word	0x2400202c

0800c08c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b03      	cmp	r3, #3
 800c0b2:	d817      	bhi.n	800c0e4 <USBD_Get_USB_Status+0x44>
 800c0b4:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <USBD_Get_USB_Status+0x1c>)
 800c0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ba:	bf00      	nop
 800c0bc:	0800c0cd 	.word	0x0800c0cd
 800c0c0:	0800c0d3 	.word	0x0800c0d3
 800c0c4:	0800c0d9 	.word	0x0800c0d9
 800c0c8:	0800c0df 	.word	0x0800c0df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d0:	e00b      	b.n	800c0ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d6:	e008      	b.n	800c0ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	73fb      	strb	r3, [r7, #15]
    break;
 800c0dc:	e005      	b.n	800c0ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e2:	e002      	b.n	800c0ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e8:	bf00      	nop
  }
  return usb_status;
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <neai_classification_init>:
 800c0f8:	4b78      	ldr	r3, [pc, #480]	; (800c2dc <neai_classification_init+0x1e4>)
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	2ba5      	cmp	r3, #165	; 0xa5
 800c0fe:	f040 80e9 	bne.w	800c2d4 <neai_classification_init+0x1dc>
 800c102:	edd0 7a02 	vldr	s15, [r0, #8]
 800c106:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c10a:	f8df c204 	ldr.w	ip, [pc, #516]	; 800c310 <neai_classification_init+0x218>
 800c10e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c112:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c114:	ee17 1a90 	vmov	r1, s15
 800c118:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800c314 <neai_classification_init+0x21c>
 800c11c:	4f70      	ldr	r7, [pc, #448]	; (800c2e0 <neai_classification_init+0x1e8>)
 800c11e:	2400      	movs	r4, #0
 800c120:	1d0b      	adds	r3, r1, #4
 800c122:	1c4d      	adds	r5, r1, #1
 800c124:	1d4a      	adds	r2, r1, #5
 800c126:	edce 7a00 	vstr	s15, [lr]
 800c12a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800c12e:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 800c318 <neai_classification_init+0x220>
 800c132:	1d06      	adds	r6, r0, #4
 800c134:	edd1 7a00 	vldr	s15, [r1]
 800c138:	460b      	mov	r3, r1
 800c13a:	f8cc 1000 	str.w	r1, [ip]
 800c13e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c142:	3304      	adds	r3, #4
 800c144:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 800c31c <neai_classification_init+0x224>
 800c148:	603b      	str	r3, [r7, #0]
 800c14a:	ee17 1a90 	vmov	r1, s15
 800c14e:	edcc 7a00 	vstr	s15, [ip]
 800c152:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 800c320 <neai_classification_init+0x228>
 800c156:	fb01 f705 	mul.w	r7, r1, r5
 800c15a:	1c4b      	adds	r3, r1, #1
 800c15c:	edcc 7a00 	vstr	s15, [ip]
 800c160:	f100 0c0c 	add.w	ip, r0, #12
 800c164:	443a      	add	r2, r7
 800c166:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c16a:	495e      	ldr	r1, [pc, #376]	; (800c2e4 <neai_classification_init+0x1ec>)
 800c16c:	4413      	add	r3, r2
 800c16e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c172:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c176:	edd3 7a00 	vldr	s15, [r3]
 800c17a:	f8ce 2000 	str.w	r2, [lr]
 800c17e:	4a5a      	ldr	r2, [pc, #360]	; (800c2e8 <neai_classification_init+0x1f0>)
 800c180:	eef4 7a47 	vcmp.f32	s15, s14
 800c184:	600b      	str	r3, [r1, #0]
 800c186:	f100 0110 	add.w	r1, r0, #16
 800c18a:	6057      	str	r7, [r2, #4]
 800c18c:	4f57      	ldr	r7, [pc, #348]	; (800c2ec <neai_classification_init+0x1f4>)
 800c18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c192:	6014      	str	r4, [r2, #0]
 800c194:	603d      	str	r5, [r7, #0]
 800c196:	4a56      	ldr	r2, [pc, #344]	; (800c2f0 <neai_classification_init+0x1f8>)
 800c198:	4d56      	ldr	r5, [pc, #344]	; (800c2f4 <neai_classification_init+0x1fc>)
 800c19a:	6010      	str	r0, [r2, #0]
 800c19c:	602c      	str	r4, [r5, #0]
 800c19e:	4856      	ldr	r0, [pc, #344]	; (800c2f8 <neai_classification_init+0x200>)
 800c1a0:	4c56      	ldr	r4, [pc, #344]	; (800c2fc <neai_classification_init+0x204>)
 800c1a2:	4a57      	ldr	r2, [pc, #348]	; (800c300 <neai_classification_init+0x208>)
 800c1a4:	6026      	str	r6, [r4, #0]
 800c1a6:	f8c0 c000 	str.w	ip, [r0]
 800c1aa:	6011      	str	r1, [r2, #0]
 800c1ac:	f040 808e 	bne.w	800c2cc <neai_classification_init+0x1d4>
 800c1b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c1b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c1b8:	eeb4 7a67 	vcmp.f32	s14, s15
 800c1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c0:	f040 8084 	bne.w	800c2cc <neai_classification_init+0x1d4>
 800c1c4:	ed93 7a02 	vldr	s14, [r3, #8]
 800c1c8:	eeb4 7a67 	vcmp.f32	s14, s15
 800c1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d0:	d17c      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c1d2:	ed93 7a03 	vldr	s14, [r3, #12]
 800c1d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1de:	d175      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c1e0:	ed93 7a04 	vldr	s14, [r3, #16]
 800c1e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ec:	d16e      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c1ee:	ed93 7a05 	vldr	s14, [r3, #20]
 800c1f2:	eeb4 7a67 	vcmp.f32	s14, s15
 800c1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fa:	d167      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c1fc:	ed93 7a06 	vldr	s14, [r3, #24]
 800c200:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c208:	d160      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c20a:	ed93 7a07 	vldr	s14, [r3, #28]
 800c20e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c216:	d159      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c218:	ed93 7a08 	vldr	s14, [r3, #32]
 800c21c:	eeb4 7a67 	vcmp.f32	s14, s15
 800c220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c224:	d152      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c226:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c22a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800c22e:	eeb4 7a67 	vcmp.f32	s14, s15
 800c232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c236:	d149      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c238:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c304 <neai_classification_init+0x20c>
 800c23c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800c240:	eef4 6a47 	vcmp.f32	s13, s14
 800c244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c248:	d140      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c24a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800c24e:	eeb4 7a67 	vcmp.f32	s14, s15
 800c252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c256:	d139      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c258:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800c25c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c264:	d132      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c266:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800c26a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c272:	d12b      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c274:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c278:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c280:	d124      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c282:	eddf 7a21 	vldr	s15, [pc, #132]	; 800c308 <neai_classification_init+0x210>
 800c286:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800c28a:	eeb4 7a67 	vcmp.f32	s14, s15
 800c28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c292:	d11b      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c294:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c298:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800c29c:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a4:	d112      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c2a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c2aa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800c2ae:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b6:	d109      	bne.n	800c2cc <neai_classification_init+0x1d4>
 800c2b8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800c2bc:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c4:	bf0c      	ite	eq
 800c2c6:	2000      	moveq	r0, #0
 800c2c8:	207d      	movne	r0, #125	; 0x7d
 800c2ca:	e000      	b.n	800c2ce <neai_classification_init+0x1d6>
 800c2cc:	207d      	movs	r0, #125	; 0x7d
 800c2ce:	4b0f      	ldr	r3, [pc, #60]	; (800c30c <neai_classification_init+0x214>)
 800c2d0:	7018      	strb	r0, [r3, #0]
 800c2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d4:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <neai_classification_init+0x214>)
 800c2d6:	207c      	movs	r0, #124	; 0x7c
 800c2d8:	7018      	strb	r0, [r3, #0]
 800c2da:	4770      	bx	lr
 800c2dc:	1ff1e8a0 	.word	0x1ff1e8a0
 800c2e0:	2400229c 	.word	0x2400229c
 800c2e4:	240022a0 	.word	0x240022a0
 800c2e8:	2400226c 	.word	0x2400226c
 800c2ec:	24002264 	.word	0x24002264
 800c2f0:	240022a4 	.word	0x240022a4
 800c2f4:	24002260 	.word	0x24002260
 800c2f8:	240022a8 	.word	0x240022a8
 800c2fc:	2400228c 	.word	0x2400228c
 800c300:	24002298 	.word	0x24002298
 800c304:	42aa0000 	.word	0x42aa0000
 800c308:	49742400 	.word	0x49742400
 800c30c:	240003e6 	.word	0x240003e6
 800c310:	24002290 	.word	0x24002290
 800c314:	24002278 	.word	0x24002278
 800c318:	24002294 	.word	0x24002294
 800c31c:	2400225c 	.word	0x2400225c
 800c320:	24002268 	.word	0x24002268

0800c324 <neai_classification>:
 800c324:	4b07      	ldr	r3, [pc, #28]	; (800c344 <neai_classification+0x20>)
 800c326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32a:	ed2d 8b04 	vpush	{d8-d9}
 800c32e:	b087      	sub	sp, #28
 800c330:	781f      	ldrb	r7, [r3, #0]
 800c332:	9200      	str	r2, [sp, #0]
 800c334:	b147      	cbz	r7, 800c348 <neai_classification+0x24>
 800c336:	4638      	mov	r0, r7
 800c338:	b007      	add	sp, #28
 800c33a:	ecbd 8b04 	vpop	{d8-d9}
 800c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c342:	bf00      	nop
 800c344:	240003e6 	.word	0x240003e6
 800c348:	4bca      	ldr	r3, [pc, #808]	; (800c674 <neai_classification+0x350>)
 800c34a:	460c      	mov	r4, r1
 800c34c:	edd0 7a00 	vldr	s15, [r0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4bc9      	ldr	r3, [pc, #804]	; (800c678 <neai_classification+0x354>)
 800c354:	ed92 7a00 	vldr	s14, [r2]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c35e:	4bc7      	ldr	r3, [pc, #796]	; (800c67c <neai_classification+0x358>)
 800c360:	ed92 7a00 	vldr	s14, [r2]
 800c364:	49c6      	ldr	r1, [pc, #792]	; (800c680 <neai_classification+0x35c>)
 800c366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c36a:	4ac6      	ldr	r2, [pc, #792]	; (800c684 <neai_classification+0x360>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	edc1 7a00 	vstr	s15, [r1]
 800c372:	edc2 7a00 	vstr	s15, [r2]
 800c376:	2b00      	cmp	r3, #0
 800c378:	f040 81a6 	bne.w	800c6c8 <neai_classification+0x3a4>
 800c37c:	4bc2      	ldr	r3, [pc, #776]	; (800c688 <neai_classification+0x364>)
 800c37e:	9303      	str	r3, [sp, #12]
 800c380:	4bc2      	ldr	r3, [pc, #776]	; (800c68c <neai_classification+0x368>)
 800c382:	6819      	ldr	r1, [r3, #0]
 800c384:	2900      	cmp	r1, #0
 800c386:	dd6a      	ble.n	800c45e <neai_classification+0x13a>
 800c388:	4ac1      	ldr	r2, [pc, #772]	; (800c690 <neai_classification+0x36c>)
 800c38a:	4dc2      	ldr	r5, [pc, #776]	; (800c694 <neai_classification+0x370>)
 800c38c:	f8d2 9000 	ldr.w	r9, [r2]
 800c390:	686b      	ldr	r3, [r5, #4]
 800c392:	4ac1      	ldr	r2, [pc, #772]	; (800c698 <neai_classification+0x374>)
 800c394:	1a5b      	subs	r3, r3, r1
 800c396:	48c1      	ldr	r0, [pc, #772]	; (800c69c <neai_classification+0x378>)
 800c398:	6812      	ldr	r2, [r2, #0]
 800c39a:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 800c39e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 800c6ac <neai_classification+0x388>
 800c3a2:	6803      	ldr	r3, [r0, #0]
 800c3a4:	f102 3eff 	add.w	lr, r2, #4294967295
 800c3a8:	edd6 7a00 	vldr	s15, [r6]
 800c3ac:	0098      	lsls	r0, r3, #2
 800c3ae:	f1be 0f00 	cmp.w	lr, #0
 800c3b2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800c3b6:	edc3 7a00 	vstr	s15, [r3]
 800c3ba:	dd47      	ble.n	800c44c <neai_classification+0x128>
 800c3bc:	682d      	ldr	r5, [r5, #0]
 800c3be:	f1be 0f02 	cmp.w	lr, #2
 800c3c2:	9505      	str	r5, [sp, #20]
 800c3c4:	f340 819f 	ble.w	800c706 <neai_classification+0x3e2>
 800c3c8:	3a04      	subs	r2, #4
 800c3ca:	4eaf      	ldr	r6, [pc, #700]	; (800c688 <neai_classification+0x364>)
 800c3cc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800c3d0:	9104      	str	r1, [sp, #16]
 800c3d2:	f022 0201 	bic.w	r2, r2, #1
 800c3d6:	9201      	str	r2, [sp, #4]
 800c3d8:	00ca      	lsls	r2, r1, #3
 800c3da:	9202      	str	r2, [sp, #8]
 800c3dc:	9a05      	ldr	r2, [sp, #20]
 800c3de:	eb09 0582 	add.w	r5, r9, r2, lsl #2
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	edd5 6a00 	vldr	s13, [r5]
 800c3e8:	eb05 0b0a 	add.w	fp, r5, sl
 800c3ec:	ed96 6a00 	vldr	s12, [r6]
 800c3f0:	3608      	adds	r6, #8
 800c3f2:	ed16 7a01 	vldr	s14, [r6, #-4]
 800c3f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c3fa:	9902      	ldr	r1, [sp, #8]
 800c3fc:	440d      	add	r5, r1
 800c3fe:	9901      	ldr	r1, [sp, #4]
 800c400:	4291      	cmp	r1, r2
 800c402:	f102 0202 	add.w	r2, r2, #2
 800c406:	edc3 7a00 	vstr	s15, [r3]
 800c40a:	eddb 6a00 	vldr	s13, [fp]
 800c40e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c412:	edc3 7a00 	vstr	s15, [r3]
 800c416:	d1e5      	bne.n	800c3e4 <neai_classification+0xc0>
 800c418:	9904      	ldr	r1, [sp, #16]
 800c41a:	9b05      	ldr	r3, [sp, #20]
 800c41c:	eb08 0500 	add.w	r5, r8, r0
 800c420:	fb02 3101 	mla	r1, r2, r1, r3
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	edd5 7a00 	vldr	s15, [r5]
 800c42a:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 800c42e:	4629      	mov	r1, r5
 800c430:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c434:	edd9 6a00 	vldr	s13, [r9]
 800c438:	3201      	adds	r2, #1
 800c43a:	ecb3 7a01 	vldmia	r3!, {s14}
 800c43e:	44d1      	add	r9, sl
 800c440:	4596      	cmp	lr, r2
 800c442:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c446:	edc1 7a00 	vstr	s15, [r1]
 800c44a:	dcf3      	bgt.n	800c434 <neai_classification+0x110>
 800c44c:	4480      	add	r8, r0
 800c44e:	eddf 0a94 	vldr	s1, [pc, #592]	; 800c6a0 <neai_classification+0x37c>
 800c452:	ed98 0a00 	vldr	s0, [r8]
 800c456:	f000 ff37 	bl	800d2c8 <fmaxf>
 800c45a:	ed88 0a00 	vstr	s0, [r8]
 800c45e:	4d8a      	ldr	r5, [pc, #552]	; (800c688 <neai_classification+0x364>)
 800c460:	9a03      	ldr	r2, [sp, #12]
 800c462:	ba13      	rev	r3, r2
 800c464:	2000      	movs	r0, #0
 800c466:	1e6a      	subs	r2, r5, #1
 800c468:	3001      	adds	r0, #1
 800c46a:	4015      	ands	r5, r2
 800c46c:	d1fb      	bne.n	800c466 <neai_classification+0x142>
 800c46e:	462a      	mov	r2, r5
 800c470:	b11b      	cbz	r3, 800c47a <neai_classification+0x156>
 800c472:	1e59      	subs	r1, r3, #1
 800c474:	3201      	adds	r2, #1
 800c476:	400b      	ands	r3, r1
 800c478:	d1fb      	bne.n	800c472 <neai_classification+0x14e>
 800c47a:	1a12      	subs	r2, r2, r0
 800c47c:	fab2 f282 	clz	r2, r2
 800c480:	0952      	lsrs	r2, r2, #5
 800c482:	ea4f 1342 	mov.w	r3, r2, lsl #5
 800c486:	eba3 0302 	sub.w	r3, r3, r2
 800c48a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c48e:	4413      	add	r3, r2
 800c490:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c494:	4413      	add	r3, r2
 800c496:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c49a:	eba3 0302 	sub.w	r3, r3, r2
 800c49e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c4a2:	eba3 0302 	sub.w	r3, r3, r2
 800c4a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c4aa:	4413      	add	r3, r2
 800c4ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c4b0:	eba3 0302 	sub.w	r3, r3, r2
 800c4b4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c4b8:	eba3 0302 	sub.w	r3, r3, r2
 800c4bc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800c4c0:	ea6f 0303 	mvn.w	r3, r3
 800c4c4:	ba1b      	rev	r3, r3
 800c4c6:	4a77      	ldr	r2, [pc, #476]	; (800c6a4 <neai_classification+0x380>)
 800c4c8:	4b77      	ldr	r3, [pc, #476]	; (800c6a8 <neai_classification+0x384>)
 800c4ca:	6811      	ldr	r1, [r2, #0]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 800c4d8:	ed96 8a00 	vldr	s16, [r6]
 800c4dc:	ed84 8a00 	vstr	s16, [r4]
 800c4e0:	ed96 7a01 	vldr	s14, [r6, #4]
 800c4e4:	ed84 7a01 	vstr	s14, [r4, #4]
 800c4e8:	edd6 7a02 	vldr	s15, [r6, #8]
 800c4ec:	edc4 7a02 	vstr	s15, [r4, #8]
 800c4f0:	dd18      	ble.n	800c524 <neai_classification+0x200>
 800c4f2:	496a      	ldr	r1, [pc, #424]	; (800c69c <neai_classification+0x378>)
 800c4f4:	4a6d      	ldr	r2, [pc, #436]	; (800c6ac <neai_classification+0x388>)
 800c4f6:	6809      	ldr	r1, [r1, #0]
 800c4f8:	ed93 6a00 	vldr	s12, [r3]
 800c4fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c500:	edd2 6a00 	vldr	s13, [r2]
 800c504:	eea6 8a26 	vfma.f32	s16, s12, s13
 800c508:	ed84 8a00 	vstr	s16, [r4]
 800c50c:	ed93 6a01 	vldr	s12, [r3, #4]
 800c510:	eea6 7a86 	vfma.f32	s14, s13, s12
 800c514:	ed84 7a01 	vstr	s14, [r4, #4]
 800c518:	ed93 6a02 	vldr	s12, [r3, #8]
 800c51c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c520:	edc4 7a02 	vstr	s15, [r4, #8]
 800c524:	eeb4 8a47 	vcmp.f32	s16, s14
 800c528:	4626      	mov	r6, r4
 800c52a:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
 800c52e:	f104 080c 	add.w	r8, r4, #12
 800c532:	eddf 8a5b 	vldr	s17, [pc, #364]	; 800c6a0 <neai_classification+0x37c>
 800c536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53a:	bf48      	it	mi
 800c53c:	eeb0 8a47 	vmovmi.f32	s16, s14
 800c540:	eef4 7a48 	vcmp.f32	s15, s16
 800c544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c548:	bfc8      	it	gt
 800c54a:	eeb0 8a67 	vmovgt.f32	s16, s15
 800c54e:	edd6 7a00 	vldr	s15, [r6]
 800c552:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800c556:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c55a:	ee17 0a90 	vmov	r0, s15
 800c55e:	f7f4 f87b 	bl	8000658 <__aeabi_f2d>
 800c562:	ec41 0b10 	vmov	d0, r0, r1
 800c566:	f000 fd8f 	bl	800d088 <exp>
 800c56a:	ec51 0b10 	vmov	r0, r1, d0
 800c56e:	f7f4 f8cb 	bl	8000708 <__aeabi_d2f>
 800c572:	ee07 0a90 	vmov	s15, r0
 800c576:	f846 0b04 	str.w	r0, [r6], #4
 800c57a:	4546      	cmp	r6, r8
 800c57c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800c580:	d1e5      	bne.n	800c54e <neai_classification+0x22a>
 800c582:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c586:	ed94 7a00 	vldr	s14, [r4]
 800c58a:	edd4 6a01 	vldr	s13, [r4, #4]
 800c58e:	ed94 6a02 	vldr	s12, [r4, #8]
 800c592:	eec5 7aa8 	vdiv.f32	s15, s11, s17
 800c596:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c59a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c59e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c5a2:	ed84 7a00 	vstr	s14, [r4]
 800c5a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c5aa:	edc4 6a01 	vstr	s13, [r4, #4]
 800c5ae:	edc4 7a02 	vstr	s15, [r4, #8]
 800c5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b6:	f340 8084 	ble.w	800c6c2 <neai_classification+0x39e>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	eeb0 7a66 	vmov.f32	s14, s13
 800c5c0:	461e      	mov	r6, r3
 800c5c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ca:	d501      	bpl.n	800c5d0 <neai_classification+0x2ac>
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	461e      	mov	r6, r3
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	f04f 0200 	mov.w	r2, #0
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	d007      	beq.n	800c5ea <neai_classification+0x2c6>
 800c5da:	f1a1 0001 	sub.w	r0, r1, #1
 800c5de:	ea01 0100 	and.w	r1, r1, r0
 800c5e2:	f102 0201 	add.w	r2, r2, #1
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	d1f7      	bne.n	800c5da <neai_classification+0x2b6>
 800c5ea:	2a20      	cmp	r2, #32
 800c5ec:	bfcc      	ite	gt
 800c5ee:	2300      	movgt	r3, #0
 800c5f0:	2301      	movle	r3, #1
 800c5f2:	ea4f 1243 	mov.w	r2, r3, lsl #5
 800c5f6:	eba2 0203 	sub.w	r2, r2, r3
 800c5fa:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c5fe:	441a      	add	r2, r3
 800c600:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c604:	eba2 0203 	sub.w	r2, r2, r3
 800c608:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c60c:	441a      	add	r2, r3
 800c60e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c612:	441a      	add	r2, r3
 800c614:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c618:	eba2 0203 	sub.w	r2, r2, r3
 800c61c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c620:	441a      	add	r2, r3
 800c622:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c626:	441a      	add	r2, r3
 800c628:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800c62c:	eba2 0203 	sub.w	r2, r2, r3
 800c630:	ba12      	rev	r2, r2
 800c632:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800c634:	1110      	asrs	r0, r2, #4
 800c636:	f002 010f 	and.w	r1, r2, #15
 800c63a:	d062      	beq.n	800c702 <neai_classification+0x3de>
 800c63c:	2300      	movs	r3, #0
 800c63e:	4602      	mov	r2, r0
 800c640:	1e54      	subs	r4, r2, #1
 800c642:	3301      	adds	r3, #1
 800c644:	4022      	ands	r2, r4
 800c646:	d1fb      	bne.n	800c640 <neai_classification+0x31c>
 800c648:	b169      	cbz	r1, 800c666 <neai_classification+0x342>
 800c64a:	460a      	mov	r2, r1
 800c64c:	1e54      	subs	r4, r2, #1
 800c64e:	3501      	adds	r5, #1
 800c650:	4022      	ands	r2, r4
 800c652:	d1fb      	bne.n	800c64c <neai_classification+0x328>
 800c654:	fb01 f100 	mul.w	r1, r1, r0
 800c658:	442b      	add	r3, r5
 800c65a:	b121      	cbz	r1, 800c666 <neai_classification+0x342>
 800c65c:	1e48      	subs	r0, r1, #1
 800c65e:	3201      	adds	r2, #1
 800c660:	4001      	ands	r1, r0
 800c662:	d1fb      	bne.n	800c65c <neai_classification+0x338>
 800c664:	4413      	add	r3, r2
 800c666:	3b07      	subs	r3, #7
 800c668:	4911      	ldr	r1, [pc, #68]	; (800c6b0 <neai_classification+0x38c>)
 800c66a:	4638      	mov	r0, r7
 800c66c:	4433      	add	r3, r6
 800c66e:	1c5a      	adds	r2, r3, #1
 800c670:	600b      	str	r3, [r1, #0]
 800c672:	e01f      	b.n	800c6b4 <neai_classification+0x390>
 800c674:	240022a4 	.word	0x240022a4
 800c678:	2400228c 	.word	0x2400228c
 800c67c:	24002278 	.word	0x24002278
 800c680:	24002250 	.word	0x24002250
 800c684:	2400224c 	.word	0x2400224c
 800c688:	24002254 	.word	0x24002254
 800c68c:	24002268 	.word	0x24002268
 800c690:	2400229c 	.word	0x2400229c
 800c694:	2400226c 	.word	0x2400226c
 800c698:	24002264 	.word	0x24002264
 800c69c:	24002260 	.word	0x24002260
 800c6a0:	00000000 	.word	0x00000000
 800c6a4:	2400225c 	.word	0x2400225c
 800c6a8:	24002294 	.word	0x24002294
 800c6ac:	24002274 	.word	0x24002274
 800c6b0:	24002258 	.word	0x24002258
 800c6b4:	9b00      	ldr	r3, [sp, #0]
 800c6b6:	801a      	strh	r2, [r3, #0]
 800c6b8:	b007      	add	sp, #28
 800c6ba:	ecbd 8b04 	vpop	{d8-d9}
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	461e      	mov	r6, r3
 800c6c6:	e77c      	b.n	800c5c2 <neai_classification+0x29e>
 800c6c8:	4a11      	ldr	r2, [pc, #68]	; (800c710 <neai_classification+0x3ec>)
 800c6ca:	4912      	ldr	r1, [pc, #72]	; (800c714 <neai_classification+0x3f0>)
 800c6cc:	4d12      	ldr	r5, [pc, #72]	; (800c718 <neai_classification+0x3f4>)
 800c6ce:	6812      	ldr	r2, [r2, #0]
 800c6d0:	6808      	ldr	r0, [r1, #0]
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6d8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800c71c <neai_classification+0x3f8>
 800c6dc:	9503      	str	r5, [sp, #12]
 800c6de:	edc1 6a00 	vstr	s13, [r1]
 800c6e2:	eef0 5a66 	vmov.f32	s11, s13
 800c6e6:	ed90 7a00 	vldr	s14, [r0]
 800c6ea:	ecb2 6a01 	vldmia	r2!, {s12}
 800c6ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	eee7 5a06 	vfma.f32	s11, s14, s12
 800c6f8:	ece1 5a01 	vstmia	r1!, {s11}
 800c6fc:	f43f ae40 	beq.w	800c380 <neai_classification+0x5c>
 800c700:	e7ed      	b.n	800c6de <neai_classification+0x3ba>
 800c702:	4603      	mov	r3, r0
 800c704:	e7a0      	b.n	800c648 <neai_classification+0x324>
 800c706:	2200      	movs	r2, #0
 800c708:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800c70c:	e685      	b.n	800c41a <neai_classification+0xf6>
 800c70e:	bf00      	nop
 800c710:	24002298 	.word	0x24002298
 800c714:	240022a8 	.word	0x240022a8
 800c718:	24002254 	.word	0x24002254
 800c71c:	00000000 	.word	0x00000000

0800c720 <__errno>:
 800c720:	4b01      	ldr	r3, [pc, #4]	; (800c728 <__errno+0x8>)
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	240003e8 	.word	0x240003e8

0800c72c <__libc_init_array>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	4d0d      	ldr	r5, [pc, #52]	; (800c764 <__libc_init_array+0x38>)
 800c730:	4c0d      	ldr	r4, [pc, #52]	; (800c768 <__libc_init_array+0x3c>)
 800c732:	1b64      	subs	r4, r4, r5
 800c734:	10a4      	asrs	r4, r4, #2
 800c736:	2600      	movs	r6, #0
 800c738:	42a6      	cmp	r6, r4
 800c73a:	d109      	bne.n	800c750 <__libc_init_array+0x24>
 800c73c:	4d0b      	ldr	r5, [pc, #44]	; (800c76c <__libc_init_array+0x40>)
 800c73e:	4c0c      	ldr	r4, [pc, #48]	; (800c770 <__libc_init_array+0x44>)
 800c740:	f000 fdfa 	bl	800d338 <_init>
 800c744:	1b64      	subs	r4, r4, r5
 800c746:	10a4      	asrs	r4, r4, #2
 800c748:	2600      	movs	r6, #0
 800c74a:	42a6      	cmp	r6, r4
 800c74c:	d105      	bne.n	800c75a <__libc_init_array+0x2e>
 800c74e:	bd70      	pop	{r4, r5, r6, pc}
 800c750:	f855 3b04 	ldr.w	r3, [r5], #4
 800c754:	4798      	blx	r3
 800c756:	3601      	adds	r6, #1
 800c758:	e7ee      	b.n	800c738 <__libc_init_array+0xc>
 800c75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c75e:	4798      	blx	r3
 800c760:	3601      	adds	r6, #1
 800c762:	e7f2      	b.n	800c74a <__libc_init_array+0x1e>
 800c764:	0800dd88 	.word	0x0800dd88
 800c768:	0800dd88 	.word	0x0800dd88
 800c76c:	0800dd88 	.word	0x0800dd88
 800c770:	0800dd8c 	.word	0x0800dd8c

0800c774 <memset>:
 800c774:	4402      	add	r2, r0
 800c776:	4603      	mov	r3, r0
 800c778:	4293      	cmp	r3, r2
 800c77a:	d100      	bne.n	800c77e <memset+0xa>
 800c77c:	4770      	bx	lr
 800c77e:	f803 1b01 	strb.w	r1, [r3], #1
 800c782:	e7f9      	b.n	800c778 <memset+0x4>

0800c784 <sniprintf>:
 800c784:	b40c      	push	{r2, r3}
 800c786:	b530      	push	{r4, r5, lr}
 800c788:	4b17      	ldr	r3, [pc, #92]	; (800c7e8 <sniprintf+0x64>)
 800c78a:	1e0c      	subs	r4, r1, #0
 800c78c:	681d      	ldr	r5, [r3, #0]
 800c78e:	b09d      	sub	sp, #116	; 0x74
 800c790:	da08      	bge.n	800c7a4 <sniprintf+0x20>
 800c792:	238b      	movs	r3, #139	; 0x8b
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	f04f 30ff 	mov.w	r0, #4294967295
 800c79a:	b01d      	add	sp, #116	; 0x74
 800c79c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7a0:	b002      	add	sp, #8
 800c7a2:	4770      	bx	lr
 800c7a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c7a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c7ac:	bf14      	ite	ne
 800c7ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c7b2:	4623      	moveq	r3, r4
 800c7b4:	9304      	str	r3, [sp, #16]
 800c7b6:	9307      	str	r3, [sp, #28]
 800c7b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7bc:	9002      	str	r0, [sp, #8]
 800c7be:	9006      	str	r0, [sp, #24]
 800c7c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c7c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c7c6:	ab21      	add	r3, sp, #132	; 0x84
 800c7c8:	a902      	add	r1, sp, #8
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	f000 f869 	bl	800c8a4 <_svfiprintf_r>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	bfbc      	itt	lt
 800c7d6:	238b      	movlt	r3, #139	; 0x8b
 800c7d8:	602b      	strlt	r3, [r5, #0]
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	d0dd      	beq.n	800c79a <sniprintf+0x16>
 800c7de:	9b02      	ldr	r3, [sp, #8]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	701a      	strb	r2, [r3, #0]
 800c7e4:	e7d9      	b.n	800c79a <sniprintf+0x16>
 800c7e6:	bf00      	nop
 800c7e8:	240003e8 	.word	0x240003e8

0800c7ec <__ssputs_r>:
 800c7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f0:	688e      	ldr	r6, [r1, #8]
 800c7f2:	429e      	cmp	r6, r3
 800c7f4:	4682      	mov	sl, r0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	4690      	mov	r8, r2
 800c7fa:	461f      	mov	r7, r3
 800c7fc:	d838      	bhi.n	800c870 <__ssputs_r+0x84>
 800c7fe:	898a      	ldrh	r2, [r1, #12]
 800c800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c804:	d032      	beq.n	800c86c <__ssputs_r+0x80>
 800c806:	6825      	ldr	r5, [r4, #0]
 800c808:	6909      	ldr	r1, [r1, #16]
 800c80a:	eba5 0901 	sub.w	r9, r5, r1
 800c80e:	6965      	ldr	r5, [r4, #20]
 800c810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c818:	3301      	adds	r3, #1
 800c81a:	444b      	add	r3, r9
 800c81c:	106d      	asrs	r5, r5, #1
 800c81e:	429d      	cmp	r5, r3
 800c820:	bf38      	it	cc
 800c822:	461d      	movcc	r5, r3
 800c824:	0553      	lsls	r3, r2, #21
 800c826:	d531      	bpl.n	800c88c <__ssputs_r+0xa0>
 800c828:	4629      	mov	r1, r5
 800c82a:	f000 fb63 	bl	800cef4 <_malloc_r>
 800c82e:	4606      	mov	r6, r0
 800c830:	b950      	cbnz	r0, 800c848 <__ssputs_r+0x5c>
 800c832:	230c      	movs	r3, #12
 800c834:	f8ca 3000 	str.w	r3, [sl]
 800c838:	89a3      	ldrh	r3, [r4, #12]
 800c83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c83e:	81a3      	strh	r3, [r4, #12]
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c848:	6921      	ldr	r1, [r4, #16]
 800c84a:	464a      	mov	r2, r9
 800c84c:	f000 fabe 	bl	800cdcc <memcpy>
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c85a:	81a3      	strh	r3, [r4, #12]
 800c85c:	6126      	str	r6, [r4, #16]
 800c85e:	6165      	str	r5, [r4, #20]
 800c860:	444e      	add	r6, r9
 800c862:	eba5 0509 	sub.w	r5, r5, r9
 800c866:	6026      	str	r6, [r4, #0]
 800c868:	60a5      	str	r5, [r4, #8]
 800c86a:	463e      	mov	r6, r7
 800c86c:	42be      	cmp	r6, r7
 800c86e:	d900      	bls.n	800c872 <__ssputs_r+0x86>
 800c870:	463e      	mov	r6, r7
 800c872:	6820      	ldr	r0, [r4, #0]
 800c874:	4632      	mov	r2, r6
 800c876:	4641      	mov	r1, r8
 800c878:	f000 fab6 	bl	800cde8 <memmove>
 800c87c:	68a3      	ldr	r3, [r4, #8]
 800c87e:	1b9b      	subs	r3, r3, r6
 800c880:	60a3      	str	r3, [r4, #8]
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	4433      	add	r3, r6
 800c886:	6023      	str	r3, [r4, #0]
 800c888:	2000      	movs	r0, #0
 800c88a:	e7db      	b.n	800c844 <__ssputs_r+0x58>
 800c88c:	462a      	mov	r2, r5
 800c88e:	f000 fba5 	bl	800cfdc <_realloc_r>
 800c892:	4606      	mov	r6, r0
 800c894:	2800      	cmp	r0, #0
 800c896:	d1e1      	bne.n	800c85c <__ssputs_r+0x70>
 800c898:	6921      	ldr	r1, [r4, #16]
 800c89a:	4650      	mov	r0, sl
 800c89c:	f000 fabe 	bl	800ce1c <_free_r>
 800c8a0:	e7c7      	b.n	800c832 <__ssputs_r+0x46>
	...

0800c8a4 <_svfiprintf_r>:
 800c8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a8:	4698      	mov	r8, r3
 800c8aa:	898b      	ldrh	r3, [r1, #12]
 800c8ac:	061b      	lsls	r3, r3, #24
 800c8ae:	b09d      	sub	sp, #116	; 0x74
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	d50e      	bpl.n	800c8d6 <_svfiprintf_r+0x32>
 800c8b8:	690b      	ldr	r3, [r1, #16]
 800c8ba:	b963      	cbnz	r3, 800c8d6 <_svfiprintf_r+0x32>
 800c8bc:	2140      	movs	r1, #64	; 0x40
 800c8be:	f000 fb19 	bl	800cef4 <_malloc_r>
 800c8c2:	6028      	str	r0, [r5, #0]
 800c8c4:	6128      	str	r0, [r5, #16]
 800c8c6:	b920      	cbnz	r0, 800c8d2 <_svfiprintf_r+0x2e>
 800c8c8:	230c      	movs	r3, #12
 800c8ca:	603b      	str	r3, [r7, #0]
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e0d1      	b.n	800ca76 <_svfiprintf_r+0x1d2>
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	616b      	str	r3, [r5, #20]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8da:	2320      	movs	r3, #32
 800c8dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8e4:	2330      	movs	r3, #48	; 0x30
 800c8e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca90 <_svfiprintf_r+0x1ec>
 800c8ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8ee:	f04f 0901 	mov.w	r9, #1
 800c8f2:	4623      	mov	r3, r4
 800c8f4:	469a      	mov	sl, r3
 800c8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8fa:	b10a      	cbz	r2, 800c900 <_svfiprintf_r+0x5c>
 800c8fc:	2a25      	cmp	r2, #37	; 0x25
 800c8fe:	d1f9      	bne.n	800c8f4 <_svfiprintf_r+0x50>
 800c900:	ebba 0b04 	subs.w	fp, sl, r4
 800c904:	d00b      	beq.n	800c91e <_svfiprintf_r+0x7a>
 800c906:	465b      	mov	r3, fp
 800c908:	4622      	mov	r2, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	4638      	mov	r0, r7
 800c90e:	f7ff ff6d 	bl	800c7ec <__ssputs_r>
 800c912:	3001      	adds	r0, #1
 800c914:	f000 80aa 	beq.w	800ca6c <_svfiprintf_r+0x1c8>
 800c918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c91a:	445a      	add	r2, fp
 800c91c:	9209      	str	r2, [sp, #36]	; 0x24
 800c91e:	f89a 3000 	ldrb.w	r3, [sl]
 800c922:	2b00      	cmp	r3, #0
 800c924:	f000 80a2 	beq.w	800ca6c <_svfiprintf_r+0x1c8>
 800c928:	2300      	movs	r3, #0
 800c92a:	f04f 32ff 	mov.w	r2, #4294967295
 800c92e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c932:	f10a 0a01 	add.w	sl, sl, #1
 800c936:	9304      	str	r3, [sp, #16]
 800c938:	9307      	str	r3, [sp, #28]
 800c93a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c93e:	931a      	str	r3, [sp, #104]	; 0x68
 800c940:	4654      	mov	r4, sl
 800c942:	2205      	movs	r2, #5
 800c944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c948:	4851      	ldr	r0, [pc, #324]	; (800ca90 <_svfiprintf_r+0x1ec>)
 800c94a:	f7f3 fcd1 	bl	80002f0 <memchr>
 800c94e:	9a04      	ldr	r2, [sp, #16]
 800c950:	b9d8      	cbnz	r0, 800c98a <_svfiprintf_r+0xe6>
 800c952:	06d0      	lsls	r0, r2, #27
 800c954:	bf44      	itt	mi
 800c956:	2320      	movmi	r3, #32
 800c958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c95c:	0711      	lsls	r1, r2, #28
 800c95e:	bf44      	itt	mi
 800c960:	232b      	movmi	r3, #43	; 0x2b
 800c962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c966:	f89a 3000 	ldrb.w	r3, [sl]
 800c96a:	2b2a      	cmp	r3, #42	; 0x2a
 800c96c:	d015      	beq.n	800c99a <_svfiprintf_r+0xf6>
 800c96e:	9a07      	ldr	r2, [sp, #28]
 800c970:	4654      	mov	r4, sl
 800c972:	2000      	movs	r0, #0
 800c974:	f04f 0c0a 	mov.w	ip, #10
 800c978:	4621      	mov	r1, r4
 800c97a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c97e:	3b30      	subs	r3, #48	; 0x30
 800c980:	2b09      	cmp	r3, #9
 800c982:	d94e      	bls.n	800ca22 <_svfiprintf_r+0x17e>
 800c984:	b1b0      	cbz	r0, 800c9b4 <_svfiprintf_r+0x110>
 800c986:	9207      	str	r2, [sp, #28]
 800c988:	e014      	b.n	800c9b4 <_svfiprintf_r+0x110>
 800c98a:	eba0 0308 	sub.w	r3, r0, r8
 800c98e:	fa09 f303 	lsl.w	r3, r9, r3
 800c992:	4313      	orrs	r3, r2
 800c994:	9304      	str	r3, [sp, #16]
 800c996:	46a2      	mov	sl, r4
 800c998:	e7d2      	b.n	800c940 <_svfiprintf_r+0x9c>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	1d19      	adds	r1, r3, #4
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	9103      	str	r1, [sp, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bfbb      	ittet	lt
 800c9a6:	425b      	neglt	r3, r3
 800c9a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9ac:	9307      	strge	r3, [sp, #28]
 800c9ae:	9307      	strlt	r3, [sp, #28]
 800c9b0:	bfb8      	it	lt
 800c9b2:	9204      	strlt	r2, [sp, #16]
 800c9b4:	7823      	ldrb	r3, [r4, #0]
 800c9b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9b8:	d10c      	bne.n	800c9d4 <_svfiprintf_r+0x130>
 800c9ba:	7863      	ldrb	r3, [r4, #1]
 800c9bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c9be:	d135      	bne.n	800ca2c <_svfiprintf_r+0x188>
 800c9c0:	9b03      	ldr	r3, [sp, #12]
 800c9c2:	1d1a      	adds	r2, r3, #4
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	9203      	str	r2, [sp, #12]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	bfb8      	it	lt
 800c9cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9d0:	3402      	adds	r4, #2
 800c9d2:	9305      	str	r3, [sp, #20]
 800c9d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800caa0 <_svfiprintf_r+0x1fc>
 800c9d8:	7821      	ldrb	r1, [r4, #0]
 800c9da:	2203      	movs	r2, #3
 800c9dc:	4650      	mov	r0, sl
 800c9de:	f7f3 fc87 	bl	80002f0 <memchr>
 800c9e2:	b140      	cbz	r0, 800c9f6 <_svfiprintf_r+0x152>
 800c9e4:	2340      	movs	r3, #64	; 0x40
 800c9e6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ea:	fa03 f000 	lsl.w	r0, r3, r0
 800c9ee:	9b04      	ldr	r3, [sp, #16]
 800c9f0:	4303      	orrs	r3, r0
 800c9f2:	3401      	adds	r4, #1
 800c9f4:	9304      	str	r3, [sp, #16]
 800c9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9fa:	4826      	ldr	r0, [pc, #152]	; (800ca94 <_svfiprintf_r+0x1f0>)
 800c9fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca00:	2206      	movs	r2, #6
 800ca02:	f7f3 fc75 	bl	80002f0 <memchr>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d038      	beq.n	800ca7c <_svfiprintf_r+0x1d8>
 800ca0a:	4b23      	ldr	r3, [pc, #140]	; (800ca98 <_svfiprintf_r+0x1f4>)
 800ca0c:	bb1b      	cbnz	r3, 800ca56 <_svfiprintf_r+0x1b2>
 800ca0e:	9b03      	ldr	r3, [sp, #12]
 800ca10:	3307      	adds	r3, #7
 800ca12:	f023 0307 	bic.w	r3, r3, #7
 800ca16:	3308      	adds	r3, #8
 800ca18:	9303      	str	r3, [sp, #12]
 800ca1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1c:	4433      	add	r3, r6
 800ca1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca20:	e767      	b.n	800c8f2 <_svfiprintf_r+0x4e>
 800ca22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca26:	460c      	mov	r4, r1
 800ca28:	2001      	movs	r0, #1
 800ca2a:	e7a5      	b.n	800c978 <_svfiprintf_r+0xd4>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	3401      	adds	r4, #1
 800ca30:	9305      	str	r3, [sp, #20]
 800ca32:	4619      	mov	r1, r3
 800ca34:	f04f 0c0a 	mov.w	ip, #10
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca3e:	3a30      	subs	r2, #48	; 0x30
 800ca40:	2a09      	cmp	r2, #9
 800ca42:	d903      	bls.n	800ca4c <_svfiprintf_r+0x1a8>
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d0c5      	beq.n	800c9d4 <_svfiprintf_r+0x130>
 800ca48:	9105      	str	r1, [sp, #20]
 800ca4a:	e7c3      	b.n	800c9d4 <_svfiprintf_r+0x130>
 800ca4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca50:	4604      	mov	r4, r0
 800ca52:	2301      	movs	r3, #1
 800ca54:	e7f0      	b.n	800ca38 <_svfiprintf_r+0x194>
 800ca56:	ab03      	add	r3, sp, #12
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	462a      	mov	r2, r5
 800ca5c:	4b0f      	ldr	r3, [pc, #60]	; (800ca9c <_svfiprintf_r+0x1f8>)
 800ca5e:	a904      	add	r1, sp, #16
 800ca60:	4638      	mov	r0, r7
 800ca62:	f3af 8000 	nop.w
 800ca66:	1c42      	adds	r2, r0, #1
 800ca68:	4606      	mov	r6, r0
 800ca6a:	d1d6      	bne.n	800ca1a <_svfiprintf_r+0x176>
 800ca6c:	89ab      	ldrh	r3, [r5, #12]
 800ca6e:	065b      	lsls	r3, r3, #25
 800ca70:	f53f af2c 	bmi.w	800c8cc <_svfiprintf_r+0x28>
 800ca74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca76:	b01d      	add	sp, #116	; 0x74
 800ca78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7c:	ab03      	add	r3, sp, #12
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	462a      	mov	r2, r5
 800ca82:	4b06      	ldr	r3, [pc, #24]	; (800ca9c <_svfiprintf_r+0x1f8>)
 800ca84:	a904      	add	r1, sp, #16
 800ca86:	4638      	mov	r0, r7
 800ca88:	f000 f87a 	bl	800cb80 <_printf_i>
 800ca8c:	e7eb      	b.n	800ca66 <_svfiprintf_r+0x1c2>
 800ca8e:	bf00      	nop
 800ca90:	0800d4e0 	.word	0x0800d4e0
 800ca94:	0800d4ea 	.word	0x0800d4ea
 800ca98:	00000000 	.word	0x00000000
 800ca9c:	0800c7ed 	.word	0x0800c7ed
 800caa0:	0800d4e6 	.word	0x0800d4e6

0800caa4 <_printf_common>:
 800caa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa8:	4616      	mov	r6, r2
 800caaa:	4699      	mov	r9, r3
 800caac:	688a      	ldr	r2, [r1, #8]
 800caae:	690b      	ldr	r3, [r1, #16]
 800cab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cab4:	4293      	cmp	r3, r2
 800cab6:	bfb8      	it	lt
 800cab8:	4613      	movlt	r3, r2
 800caba:	6033      	str	r3, [r6, #0]
 800cabc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cac0:	4607      	mov	r7, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	b10a      	cbz	r2, 800caca <_printf_common+0x26>
 800cac6:	3301      	adds	r3, #1
 800cac8:	6033      	str	r3, [r6, #0]
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	0699      	lsls	r1, r3, #26
 800cace:	bf42      	ittt	mi
 800cad0:	6833      	ldrmi	r3, [r6, #0]
 800cad2:	3302      	addmi	r3, #2
 800cad4:	6033      	strmi	r3, [r6, #0]
 800cad6:	6825      	ldr	r5, [r4, #0]
 800cad8:	f015 0506 	ands.w	r5, r5, #6
 800cadc:	d106      	bne.n	800caec <_printf_common+0x48>
 800cade:	f104 0a19 	add.w	sl, r4, #25
 800cae2:	68e3      	ldr	r3, [r4, #12]
 800cae4:	6832      	ldr	r2, [r6, #0]
 800cae6:	1a9b      	subs	r3, r3, r2
 800cae8:	42ab      	cmp	r3, r5
 800caea:	dc26      	bgt.n	800cb3a <_printf_common+0x96>
 800caec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800caf0:	1e13      	subs	r3, r2, #0
 800caf2:	6822      	ldr	r2, [r4, #0]
 800caf4:	bf18      	it	ne
 800caf6:	2301      	movne	r3, #1
 800caf8:	0692      	lsls	r2, r2, #26
 800cafa:	d42b      	bmi.n	800cb54 <_printf_common+0xb0>
 800cafc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb00:	4649      	mov	r1, r9
 800cb02:	4638      	mov	r0, r7
 800cb04:	47c0      	blx	r8
 800cb06:	3001      	adds	r0, #1
 800cb08:	d01e      	beq.n	800cb48 <_printf_common+0xa4>
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	68e5      	ldr	r5, [r4, #12]
 800cb0e:	6832      	ldr	r2, [r6, #0]
 800cb10:	f003 0306 	and.w	r3, r3, #6
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	bf08      	it	eq
 800cb18:	1aad      	subeq	r5, r5, r2
 800cb1a:	68a3      	ldr	r3, [r4, #8]
 800cb1c:	6922      	ldr	r2, [r4, #16]
 800cb1e:	bf0c      	ite	eq
 800cb20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb24:	2500      	movne	r5, #0
 800cb26:	4293      	cmp	r3, r2
 800cb28:	bfc4      	itt	gt
 800cb2a:	1a9b      	subgt	r3, r3, r2
 800cb2c:	18ed      	addgt	r5, r5, r3
 800cb2e:	2600      	movs	r6, #0
 800cb30:	341a      	adds	r4, #26
 800cb32:	42b5      	cmp	r5, r6
 800cb34:	d11a      	bne.n	800cb6c <_printf_common+0xc8>
 800cb36:	2000      	movs	r0, #0
 800cb38:	e008      	b.n	800cb4c <_printf_common+0xa8>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	4652      	mov	r2, sl
 800cb3e:	4649      	mov	r1, r9
 800cb40:	4638      	mov	r0, r7
 800cb42:	47c0      	blx	r8
 800cb44:	3001      	adds	r0, #1
 800cb46:	d103      	bne.n	800cb50 <_printf_common+0xac>
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb50:	3501      	adds	r5, #1
 800cb52:	e7c6      	b.n	800cae2 <_printf_common+0x3e>
 800cb54:	18e1      	adds	r1, r4, r3
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	2030      	movs	r0, #48	; 0x30
 800cb5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb5e:	4422      	add	r2, r4
 800cb60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb68:	3302      	adds	r3, #2
 800cb6a:	e7c7      	b.n	800cafc <_printf_common+0x58>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	4622      	mov	r2, r4
 800cb70:	4649      	mov	r1, r9
 800cb72:	4638      	mov	r0, r7
 800cb74:	47c0      	blx	r8
 800cb76:	3001      	adds	r0, #1
 800cb78:	d0e6      	beq.n	800cb48 <_printf_common+0xa4>
 800cb7a:	3601      	adds	r6, #1
 800cb7c:	e7d9      	b.n	800cb32 <_printf_common+0x8e>
	...

0800cb80 <_printf_i>:
 800cb80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb84:	7e0f      	ldrb	r7, [r1, #24]
 800cb86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb88:	2f78      	cmp	r7, #120	; 0x78
 800cb8a:	4691      	mov	r9, r2
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	460c      	mov	r4, r1
 800cb90:	469a      	mov	sl, r3
 800cb92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb96:	d807      	bhi.n	800cba8 <_printf_i+0x28>
 800cb98:	2f62      	cmp	r7, #98	; 0x62
 800cb9a:	d80a      	bhi.n	800cbb2 <_printf_i+0x32>
 800cb9c:	2f00      	cmp	r7, #0
 800cb9e:	f000 80d8 	beq.w	800cd52 <_printf_i+0x1d2>
 800cba2:	2f58      	cmp	r7, #88	; 0x58
 800cba4:	f000 80a3 	beq.w	800ccee <_printf_i+0x16e>
 800cba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbb0:	e03a      	b.n	800cc28 <_printf_i+0xa8>
 800cbb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbb6:	2b15      	cmp	r3, #21
 800cbb8:	d8f6      	bhi.n	800cba8 <_printf_i+0x28>
 800cbba:	a101      	add	r1, pc, #4	; (adr r1, 800cbc0 <_printf_i+0x40>)
 800cbbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbc0:	0800cc19 	.word	0x0800cc19
 800cbc4:	0800cc2d 	.word	0x0800cc2d
 800cbc8:	0800cba9 	.word	0x0800cba9
 800cbcc:	0800cba9 	.word	0x0800cba9
 800cbd0:	0800cba9 	.word	0x0800cba9
 800cbd4:	0800cba9 	.word	0x0800cba9
 800cbd8:	0800cc2d 	.word	0x0800cc2d
 800cbdc:	0800cba9 	.word	0x0800cba9
 800cbe0:	0800cba9 	.word	0x0800cba9
 800cbe4:	0800cba9 	.word	0x0800cba9
 800cbe8:	0800cba9 	.word	0x0800cba9
 800cbec:	0800cd39 	.word	0x0800cd39
 800cbf0:	0800cc5d 	.word	0x0800cc5d
 800cbf4:	0800cd1b 	.word	0x0800cd1b
 800cbf8:	0800cba9 	.word	0x0800cba9
 800cbfc:	0800cba9 	.word	0x0800cba9
 800cc00:	0800cd5b 	.word	0x0800cd5b
 800cc04:	0800cba9 	.word	0x0800cba9
 800cc08:	0800cc5d 	.word	0x0800cc5d
 800cc0c:	0800cba9 	.word	0x0800cba9
 800cc10:	0800cba9 	.word	0x0800cba9
 800cc14:	0800cd23 	.word	0x0800cd23
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	1d1a      	adds	r2, r3, #4
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	602a      	str	r2, [r5, #0]
 800cc20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e0a3      	b.n	800cd74 <_printf_i+0x1f4>
 800cc2c:	6820      	ldr	r0, [r4, #0]
 800cc2e:	6829      	ldr	r1, [r5, #0]
 800cc30:	0606      	lsls	r6, r0, #24
 800cc32:	f101 0304 	add.w	r3, r1, #4
 800cc36:	d50a      	bpl.n	800cc4e <_printf_i+0xce>
 800cc38:	680e      	ldr	r6, [r1, #0]
 800cc3a:	602b      	str	r3, [r5, #0]
 800cc3c:	2e00      	cmp	r6, #0
 800cc3e:	da03      	bge.n	800cc48 <_printf_i+0xc8>
 800cc40:	232d      	movs	r3, #45	; 0x2d
 800cc42:	4276      	negs	r6, r6
 800cc44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc48:	485e      	ldr	r0, [pc, #376]	; (800cdc4 <_printf_i+0x244>)
 800cc4a:	230a      	movs	r3, #10
 800cc4c:	e019      	b.n	800cc82 <_printf_i+0x102>
 800cc4e:	680e      	ldr	r6, [r1, #0]
 800cc50:	602b      	str	r3, [r5, #0]
 800cc52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc56:	bf18      	it	ne
 800cc58:	b236      	sxthne	r6, r6
 800cc5a:	e7ef      	b.n	800cc3c <_printf_i+0xbc>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	6820      	ldr	r0, [r4, #0]
 800cc60:	1d19      	adds	r1, r3, #4
 800cc62:	6029      	str	r1, [r5, #0]
 800cc64:	0601      	lsls	r1, r0, #24
 800cc66:	d501      	bpl.n	800cc6c <_printf_i+0xec>
 800cc68:	681e      	ldr	r6, [r3, #0]
 800cc6a:	e002      	b.n	800cc72 <_printf_i+0xf2>
 800cc6c:	0646      	lsls	r6, r0, #25
 800cc6e:	d5fb      	bpl.n	800cc68 <_printf_i+0xe8>
 800cc70:	881e      	ldrh	r6, [r3, #0]
 800cc72:	4854      	ldr	r0, [pc, #336]	; (800cdc4 <_printf_i+0x244>)
 800cc74:	2f6f      	cmp	r7, #111	; 0x6f
 800cc76:	bf0c      	ite	eq
 800cc78:	2308      	moveq	r3, #8
 800cc7a:	230a      	movne	r3, #10
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc82:	6865      	ldr	r5, [r4, #4]
 800cc84:	60a5      	str	r5, [r4, #8]
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	bfa2      	ittt	ge
 800cc8a:	6821      	ldrge	r1, [r4, #0]
 800cc8c:	f021 0104 	bicge.w	r1, r1, #4
 800cc90:	6021      	strge	r1, [r4, #0]
 800cc92:	b90e      	cbnz	r6, 800cc98 <_printf_i+0x118>
 800cc94:	2d00      	cmp	r5, #0
 800cc96:	d04d      	beq.n	800cd34 <_printf_i+0x1b4>
 800cc98:	4615      	mov	r5, r2
 800cc9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc9e:	fb03 6711 	mls	r7, r3, r1, r6
 800cca2:	5dc7      	ldrb	r7, [r0, r7]
 800cca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cca8:	4637      	mov	r7, r6
 800ccaa:	42bb      	cmp	r3, r7
 800ccac:	460e      	mov	r6, r1
 800ccae:	d9f4      	bls.n	800cc9a <_printf_i+0x11a>
 800ccb0:	2b08      	cmp	r3, #8
 800ccb2:	d10b      	bne.n	800cccc <_printf_i+0x14c>
 800ccb4:	6823      	ldr	r3, [r4, #0]
 800ccb6:	07de      	lsls	r6, r3, #31
 800ccb8:	d508      	bpl.n	800cccc <_printf_i+0x14c>
 800ccba:	6923      	ldr	r3, [r4, #16]
 800ccbc:	6861      	ldr	r1, [r4, #4]
 800ccbe:	4299      	cmp	r1, r3
 800ccc0:	bfde      	ittt	le
 800ccc2:	2330      	movle	r3, #48	; 0x30
 800ccc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cccc:	1b52      	subs	r2, r2, r5
 800ccce:	6122      	str	r2, [r4, #16]
 800ccd0:	f8cd a000 	str.w	sl, [sp]
 800ccd4:	464b      	mov	r3, r9
 800ccd6:	aa03      	add	r2, sp, #12
 800ccd8:	4621      	mov	r1, r4
 800ccda:	4640      	mov	r0, r8
 800ccdc:	f7ff fee2 	bl	800caa4 <_printf_common>
 800cce0:	3001      	adds	r0, #1
 800cce2:	d14c      	bne.n	800cd7e <_printf_i+0x1fe>
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295
 800cce8:	b004      	add	sp, #16
 800ccea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccee:	4835      	ldr	r0, [pc, #212]	; (800cdc4 <_printf_i+0x244>)
 800ccf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ccf4:	6829      	ldr	r1, [r5, #0]
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccfc:	6029      	str	r1, [r5, #0]
 800ccfe:	061d      	lsls	r5, r3, #24
 800cd00:	d514      	bpl.n	800cd2c <_printf_i+0x1ac>
 800cd02:	07df      	lsls	r7, r3, #31
 800cd04:	bf44      	itt	mi
 800cd06:	f043 0320 	orrmi.w	r3, r3, #32
 800cd0a:	6023      	strmi	r3, [r4, #0]
 800cd0c:	b91e      	cbnz	r6, 800cd16 <_printf_i+0x196>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	f023 0320 	bic.w	r3, r3, #32
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	2310      	movs	r3, #16
 800cd18:	e7b0      	b.n	800cc7c <_printf_i+0xfc>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	f043 0320 	orr.w	r3, r3, #32
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	2378      	movs	r3, #120	; 0x78
 800cd24:	4828      	ldr	r0, [pc, #160]	; (800cdc8 <_printf_i+0x248>)
 800cd26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd2a:	e7e3      	b.n	800ccf4 <_printf_i+0x174>
 800cd2c:	0659      	lsls	r1, r3, #25
 800cd2e:	bf48      	it	mi
 800cd30:	b2b6      	uxthmi	r6, r6
 800cd32:	e7e6      	b.n	800cd02 <_printf_i+0x182>
 800cd34:	4615      	mov	r5, r2
 800cd36:	e7bb      	b.n	800ccb0 <_printf_i+0x130>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	6826      	ldr	r6, [r4, #0]
 800cd3c:	6961      	ldr	r1, [r4, #20]
 800cd3e:	1d18      	adds	r0, r3, #4
 800cd40:	6028      	str	r0, [r5, #0]
 800cd42:	0635      	lsls	r5, r6, #24
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	d501      	bpl.n	800cd4c <_printf_i+0x1cc>
 800cd48:	6019      	str	r1, [r3, #0]
 800cd4a:	e002      	b.n	800cd52 <_printf_i+0x1d2>
 800cd4c:	0670      	lsls	r0, r6, #25
 800cd4e:	d5fb      	bpl.n	800cd48 <_printf_i+0x1c8>
 800cd50:	8019      	strh	r1, [r3, #0]
 800cd52:	2300      	movs	r3, #0
 800cd54:	6123      	str	r3, [r4, #16]
 800cd56:	4615      	mov	r5, r2
 800cd58:	e7ba      	b.n	800ccd0 <_printf_i+0x150>
 800cd5a:	682b      	ldr	r3, [r5, #0]
 800cd5c:	1d1a      	adds	r2, r3, #4
 800cd5e:	602a      	str	r2, [r5, #0]
 800cd60:	681d      	ldr	r5, [r3, #0]
 800cd62:	6862      	ldr	r2, [r4, #4]
 800cd64:	2100      	movs	r1, #0
 800cd66:	4628      	mov	r0, r5
 800cd68:	f7f3 fac2 	bl	80002f0 <memchr>
 800cd6c:	b108      	cbz	r0, 800cd72 <_printf_i+0x1f2>
 800cd6e:	1b40      	subs	r0, r0, r5
 800cd70:	6060      	str	r0, [r4, #4]
 800cd72:	6863      	ldr	r3, [r4, #4]
 800cd74:	6123      	str	r3, [r4, #16]
 800cd76:	2300      	movs	r3, #0
 800cd78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd7c:	e7a8      	b.n	800ccd0 <_printf_i+0x150>
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	462a      	mov	r2, r5
 800cd82:	4649      	mov	r1, r9
 800cd84:	4640      	mov	r0, r8
 800cd86:	47d0      	blx	sl
 800cd88:	3001      	adds	r0, #1
 800cd8a:	d0ab      	beq.n	800cce4 <_printf_i+0x164>
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	079b      	lsls	r3, r3, #30
 800cd90:	d413      	bmi.n	800cdba <_printf_i+0x23a>
 800cd92:	68e0      	ldr	r0, [r4, #12]
 800cd94:	9b03      	ldr	r3, [sp, #12]
 800cd96:	4298      	cmp	r0, r3
 800cd98:	bfb8      	it	lt
 800cd9a:	4618      	movlt	r0, r3
 800cd9c:	e7a4      	b.n	800cce8 <_printf_i+0x168>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	4632      	mov	r2, r6
 800cda2:	4649      	mov	r1, r9
 800cda4:	4640      	mov	r0, r8
 800cda6:	47d0      	blx	sl
 800cda8:	3001      	adds	r0, #1
 800cdaa:	d09b      	beq.n	800cce4 <_printf_i+0x164>
 800cdac:	3501      	adds	r5, #1
 800cdae:	68e3      	ldr	r3, [r4, #12]
 800cdb0:	9903      	ldr	r1, [sp, #12]
 800cdb2:	1a5b      	subs	r3, r3, r1
 800cdb4:	42ab      	cmp	r3, r5
 800cdb6:	dcf2      	bgt.n	800cd9e <_printf_i+0x21e>
 800cdb8:	e7eb      	b.n	800cd92 <_printf_i+0x212>
 800cdba:	2500      	movs	r5, #0
 800cdbc:	f104 0619 	add.w	r6, r4, #25
 800cdc0:	e7f5      	b.n	800cdae <_printf_i+0x22e>
 800cdc2:	bf00      	nop
 800cdc4:	0800d4f1 	.word	0x0800d4f1
 800cdc8:	0800d502 	.word	0x0800d502

0800cdcc <memcpy>:
 800cdcc:	440a      	add	r2, r1
 800cdce:	4291      	cmp	r1, r2
 800cdd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdd4:	d100      	bne.n	800cdd8 <memcpy+0xc>
 800cdd6:	4770      	bx	lr
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cde2:	4291      	cmp	r1, r2
 800cde4:	d1f9      	bne.n	800cdda <memcpy+0xe>
 800cde6:	bd10      	pop	{r4, pc}

0800cde8 <memmove>:
 800cde8:	4288      	cmp	r0, r1
 800cdea:	b510      	push	{r4, lr}
 800cdec:	eb01 0402 	add.w	r4, r1, r2
 800cdf0:	d902      	bls.n	800cdf8 <memmove+0x10>
 800cdf2:	4284      	cmp	r4, r0
 800cdf4:	4623      	mov	r3, r4
 800cdf6:	d807      	bhi.n	800ce08 <memmove+0x20>
 800cdf8:	1e43      	subs	r3, r0, #1
 800cdfa:	42a1      	cmp	r1, r4
 800cdfc:	d008      	beq.n	800ce10 <memmove+0x28>
 800cdfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce06:	e7f8      	b.n	800cdfa <memmove+0x12>
 800ce08:	4402      	add	r2, r0
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	428a      	cmp	r2, r1
 800ce0e:	d100      	bne.n	800ce12 <memmove+0x2a>
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce1a:	e7f7      	b.n	800ce0c <memmove+0x24>

0800ce1c <_free_r>:
 800ce1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce1e:	2900      	cmp	r1, #0
 800ce20:	d044      	beq.n	800ceac <_free_r+0x90>
 800ce22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce26:	9001      	str	r0, [sp, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ce2e:	bfb8      	it	lt
 800ce30:	18e4      	addlt	r4, r4, r3
 800ce32:	f000 f913 	bl	800d05c <__malloc_lock>
 800ce36:	4a1e      	ldr	r2, [pc, #120]	; (800ceb0 <_free_r+0x94>)
 800ce38:	9801      	ldr	r0, [sp, #4]
 800ce3a:	6813      	ldr	r3, [r2, #0]
 800ce3c:	b933      	cbnz	r3, 800ce4c <_free_r+0x30>
 800ce3e:	6063      	str	r3, [r4, #4]
 800ce40:	6014      	str	r4, [r2, #0]
 800ce42:	b003      	add	sp, #12
 800ce44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce48:	f000 b90e 	b.w	800d068 <__malloc_unlock>
 800ce4c:	42a3      	cmp	r3, r4
 800ce4e:	d908      	bls.n	800ce62 <_free_r+0x46>
 800ce50:	6825      	ldr	r5, [r4, #0]
 800ce52:	1961      	adds	r1, r4, r5
 800ce54:	428b      	cmp	r3, r1
 800ce56:	bf01      	itttt	eq
 800ce58:	6819      	ldreq	r1, [r3, #0]
 800ce5a:	685b      	ldreq	r3, [r3, #4]
 800ce5c:	1949      	addeq	r1, r1, r5
 800ce5e:	6021      	streq	r1, [r4, #0]
 800ce60:	e7ed      	b.n	800ce3e <_free_r+0x22>
 800ce62:	461a      	mov	r2, r3
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	b10b      	cbz	r3, 800ce6c <_free_r+0x50>
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	d9fa      	bls.n	800ce62 <_free_r+0x46>
 800ce6c:	6811      	ldr	r1, [r2, #0]
 800ce6e:	1855      	adds	r5, r2, r1
 800ce70:	42a5      	cmp	r5, r4
 800ce72:	d10b      	bne.n	800ce8c <_free_r+0x70>
 800ce74:	6824      	ldr	r4, [r4, #0]
 800ce76:	4421      	add	r1, r4
 800ce78:	1854      	adds	r4, r2, r1
 800ce7a:	42a3      	cmp	r3, r4
 800ce7c:	6011      	str	r1, [r2, #0]
 800ce7e:	d1e0      	bne.n	800ce42 <_free_r+0x26>
 800ce80:	681c      	ldr	r4, [r3, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	6053      	str	r3, [r2, #4]
 800ce86:	4421      	add	r1, r4
 800ce88:	6011      	str	r1, [r2, #0]
 800ce8a:	e7da      	b.n	800ce42 <_free_r+0x26>
 800ce8c:	d902      	bls.n	800ce94 <_free_r+0x78>
 800ce8e:	230c      	movs	r3, #12
 800ce90:	6003      	str	r3, [r0, #0]
 800ce92:	e7d6      	b.n	800ce42 <_free_r+0x26>
 800ce94:	6825      	ldr	r5, [r4, #0]
 800ce96:	1961      	adds	r1, r4, r5
 800ce98:	428b      	cmp	r3, r1
 800ce9a:	bf04      	itt	eq
 800ce9c:	6819      	ldreq	r1, [r3, #0]
 800ce9e:	685b      	ldreq	r3, [r3, #4]
 800cea0:	6063      	str	r3, [r4, #4]
 800cea2:	bf04      	itt	eq
 800cea4:	1949      	addeq	r1, r1, r5
 800cea6:	6021      	streq	r1, [r4, #0]
 800cea8:	6054      	str	r4, [r2, #4]
 800ceaa:	e7ca      	b.n	800ce42 <_free_r+0x26>
 800ceac:	b003      	add	sp, #12
 800ceae:	bd30      	pop	{r4, r5, pc}
 800ceb0:	2400227c 	.word	0x2400227c

0800ceb4 <sbrk_aligned>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	4e0e      	ldr	r6, [pc, #56]	; (800cef0 <sbrk_aligned+0x3c>)
 800ceb8:	460c      	mov	r4, r1
 800ceba:	6831      	ldr	r1, [r6, #0]
 800cebc:	4605      	mov	r5, r0
 800cebe:	b911      	cbnz	r1, 800cec6 <sbrk_aligned+0x12>
 800cec0:	f000 f8bc 	bl	800d03c <_sbrk_r>
 800cec4:	6030      	str	r0, [r6, #0]
 800cec6:	4621      	mov	r1, r4
 800cec8:	4628      	mov	r0, r5
 800ceca:	f000 f8b7 	bl	800d03c <_sbrk_r>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d00a      	beq.n	800cee8 <sbrk_aligned+0x34>
 800ced2:	1cc4      	adds	r4, r0, #3
 800ced4:	f024 0403 	bic.w	r4, r4, #3
 800ced8:	42a0      	cmp	r0, r4
 800ceda:	d007      	beq.n	800ceec <sbrk_aligned+0x38>
 800cedc:	1a21      	subs	r1, r4, r0
 800cede:	4628      	mov	r0, r5
 800cee0:	f000 f8ac 	bl	800d03c <_sbrk_r>
 800cee4:	3001      	adds	r0, #1
 800cee6:	d101      	bne.n	800ceec <sbrk_aligned+0x38>
 800cee8:	f04f 34ff 	mov.w	r4, #4294967295
 800ceec:	4620      	mov	r0, r4
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	24002280 	.word	0x24002280

0800cef4 <_malloc_r>:
 800cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef8:	1ccd      	adds	r5, r1, #3
 800cefa:	f025 0503 	bic.w	r5, r5, #3
 800cefe:	3508      	adds	r5, #8
 800cf00:	2d0c      	cmp	r5, #12
 800cf02:	bf38      	it	cc
 800cf04:	250c      	movcc	r5, #12
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	4607      	mov	r7, r0
 800cf0a:	db01      	blt.n	800cf10 <_malloc_r+0x1c>
 800cf0c:	42a9      	cmp	r1, r5
 800cf0e:	d905      	bls.n	800cf1c <_malloc_r+0x28>
 800cf10:	230c      	movs	r3, #12
 800cf12:	603b      	str	r3, [r7, #0]
 800cf14:	2600      	movs	r6, #0
 800cf16:	4630      	mov	r0, r6
 800cf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf1c:	4e2e      	ldr	r6, [pc, #184]	; (800cfd8 <_malloc_r+0xe4>)
 800cf1e:	f000 f89d 	bl	800d05c <__malloc_lock>
 800cf22:	6833      	ldr	r3, [r6, #0]
 800cf24:	461c      	mov	r4, r3
 800cf26:	bb34      	cbnz	r4, 800cf76 <_malloc_r+0x82>
 800cf28:	4629      	mov	r1, r5
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	f7ff ffc2 	bl	800ceb4 <sbrk_aligned>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	4604      	mov	r4, r0
 800cf34:	d14d      	bne.n	800cfd2 <_malloc_r+0xde>
 800cf36:	6834      	ldr	r4, [r6, #0]
 800cf38:	4626      	mov	r6, r4
 800cf3a:	2e00      	cmp	r6, #0
 800cf3c:	d140      	bne.n	800cfc0 <_malloc_r+0xcc>
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	4631      	mov	r1, r6
 800cf42:	4638      	mov	r0, r7
 800cf44:	eb04 0803 	add.w	r8, r4, r3
 800cf48:	f000 f878 	bl	800d03c <_sbrk_r>
 800cf4c:	4580      	cmp	r8, r0
 800cf4e:	d13a      	bne.n	800cfc6 <_malloc_r+0xd2>
 800cf50:	6821      	ldr	r1, [r4, #0]
 800cf52:	3503      	adds	r5, #3
 800cf54:	1a6d      	subs	r5, r5, r1
 800cf56:	f025 0503 	bic.w	r5, r5, #3
 800cf5a:	3508      	adds	r5, #8
 800cf5c:	2d0c      	cmp	r5, #12
 800cf5e:	bf38      	it	cc
 800cf60:	250c      	movcc	r5, #12
 800cf62:	4629      	mov	r1, r5
 800cf64:	4638      	mov	r0, r7
 800cf66:	f7ff ffa5 	bl	800ceb4 <sbrk_aligned>
 800cf6a:	3001      	adds	r0, #1
 800cf6c:	d02b      	beq.n	800cfc6 <_malloc_r+0xd2>
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	442b      	add	r3, r5
 800cf72:	6023      	str	r3, [r4, #0]
 800cf74:	e00e      	b.n	800cf94 <_malloc_r+0xa0>
 800cf76:	6822      	ldr	r2, [r4, #0]
 800cf78:	1b52      	subs	r2, r2, r5
 800cf7a:	d41e      	bmi.n	800cfba <_malloc_r+0xc6>
 800cf7c:	2a0b      	cmp	r2, #11
 800cf7e:	d916      	bls.n	800cfae <_malloc_r+0xba>
 800cf80:	1961      	adds	r1, r4, r5
 800cf82:	42a3      	cmp	r3, r4
 800cf84:	6025      	str	r5, [r4, #0]
 800cf86:	bf18      	it	ne
 800cf88:	6059      	strne	r1, [r3, #4]
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	bf08      	it	eq
 800cf8e:	6031      	streq	r1, [r6, #0]
 800cf90:	5162      	str	r2, [r4, r5]
 800cf92:	604b      	str	r3, [r1, #4]
 800cf94:	4638      	mov	r0, r7
 800cf96:	f104 060b 	add.w	r6, r4, #11
 800cf9a:	f000 f865 	bl	800d068 <__malloc_unlock>
 800cf9e:	f026 0607 	bic.w	r6, r6, #7
 800cfa2:	1d23      	adds	r3, r4, #4
 800cfa4:	1af2      	subs	r2, r6, r3
 800cfa6:	d0b6      	beq.n	800cf16 <_malloc_r+0x22>
 800cfa8:	1b9b      	subs	r3, r3, r6
 800cfaa:	50a3      	str	r3, [r4, r2]
 800cfac:	e7b3      	b.n	800cf16 <_malloc_r+0x22>
 800cfae:	6862      	ldr	r2, [r4, #4]
 800cfb0:	42a3      	cmp	r3, r4
 800cfb2:	bf0c      	ite	eq
 800cfb4:	6032      	streq	r2, [r6, #0]
 800cfb6:	605a      	strne	r2, [r3, #4]
 800cfb8:	e7ec      	b.n	800cf94 <_malloc_r+0xa0>
 800cfba:	4623      	mov	r3, r4
 800cfbc:	6864      	ldr	r4, [r4, #4]
 800cfbe:	e7b2      	b.n	800cf26 <_malloc_r+0x32>
 800cfc0:	4634      	mov	r4, r6
 800cfc2:	6876      	ldr	r6, [r6, #4]
 800cfc4:	e7b9      	b.n	800cf3a <_malloc_r+0x46>
 800cfc6:	230c      	movs	r3, #12
 800cfc8:	603b      	str	r3, [r7, #0]
 800cfca:	4638      	mov	r0, r7
 800cfcc:	f000 f84c 	bl	800d068 <__malloc_unlock>
 800cfd0:	e7a1      	b.n	800cf16 <_malloc_r+0x22>
 800cfd2:	6025      	str	r5, [r4, #0]
 800cfd4:	e7de      	b.n	800cf94 <_malloc_r+0xa0>
 800cfd6:	bf00      	nop
 800cfd8:	2400227c 	.word	0x2400227c

0800cfdc <_realloc_r>:
 800cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe0:	4680      	mov	r8, r0
 800cfe2:	4614      	mov	r4, r2
 800cfe4:	460e      	mov	r6, r1
 800cfe6:	b921      	cbnz	r1, 800cff2 <_realloc_r+0x16>
 800cfe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfec:	4611      	mov	r1, r2
 800cfee:	f7ff bf81 	b.w	800cef4 <_malloc_r>
 800cff2:	b92a      	cbnz	r2, 800d000 <_realloc_r+0x24>
 800cff4:	f7ff ff12 	bl	800ce1c <_free_r>
 800cff8:	4625      	mov	r5, r4
 800cffa:	4628      	mov	r0, r5
 800cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d000:	f000 f838 	bl	800d074 <_malloc_usable_size_r>
 800d004:	4284      	cmp	r4, r0
 800d006:	4607      	mov	r7, r0
 800d008:	d802      	bhi.n	800d010 <_realloc_r+0x34>
 800d00a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d00e:	d812      	bhi.n	800d036 <_realloc_r+0x5a>
 800d010:	4621      	mov	r1, r4
 800d012:	4640      	mov	r0, r8
 800d014:	f7ff ff6e 	bl	800cef4 <_malloc_r>
 800d018:	4605      	mov	r5, r0
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d0ed      	beq.n	800cffa <_realloc_r+0x1e>
 800d01e:	42bc      	cmp	r4, r7
 800d020:	4622      	mov	r2, r4
 800d022:	4631      	mov	r1, r6
 800d024:	bf28      	it	cs
 800d026:	463a      	movcs	r2, r7
 800d028:	f7ff fed0 	bl	800cdcc <memcpy>
 800d02c:	4631      	mov	r1, r6
 800d02e:	4640      	mov	r0, r8
 800d030:	f7ff fef4 	bl	800ce1c <_free_r>
 800d034:	e7e1      	b.n	800cffa <_realloc_r+0x1e>
 800d036:	4635      	mov	r5, r6
 800d038:	e7df      	b.n	800cffa <_realloc_r+0x1e>
	...

0800d03c <_sbrk_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d06      	ldr	r5, [pc, #24]	; (800d058 <_sbrk_r+0x1c>)
 800d040:	2300      	movs	r3, #0
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	f7f4 faa2 	bl	8001590 <_sbrk>
 800d04c:	1c43      	adds	r3, r0, #1
 800d04e:	d102      	bne.n	800d056 <_sbrk_r+0x1a>
 800d050:	682b      	ldr	r3, [r5, #0]
 800d052:	b103      	cbz	r3, 800d056 <_sbrk_r+0x1a>
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	24002284 	.word	0x24002284

0800d05c <__malloc_lock>:
 800d05c:	4801      	ldr	r0, [pc, #4]	; (800d064 <__malloc_lock+0x8>)
 800d05e:	f000 b811 	b.w	800d084 <__retarget_lock_acquire_recursive>
 800d062:	bf00      	nop
 800d064:	24002288 	.word	0x24002288

0800d068 <__malloc_unlock>:
 800d068:	4801      	ldr	r0, [pc, #4]	; (800d070 <__malloc_unlock+0x8>)
 800d06a:	f000 b80c 	b.w	800d086 <__retarget_lock_release_recursive>
 800d06e:	bf00      	nop
 800d070:	24002288 	.word	0x24002288

0800d074 <_malloc_usable_size_r>:
 800d074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d078:	1f18      	subs	r0, r3, #4
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bfbc      	itt	lt
 800d07e:	580b      	ldrlt	r3, [r1, r0]
 800d080:	18c0      	addlt	r0, r0, r3
 800d082:	4770      	bx	lr

0800d084 <__retarget_lock_acquire_recursive>:
 800d084:	4770      	bx	lr

0800d086 <__retarget_lock_release_recursive>:
 800d086:	4770      	bx	lr

0800d088 <exp>:
 800d088:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800d08a:	ee10 3a90 	vmov	r3, s1
 800d08e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800d092:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800d096:	18a2      	adds	r2, r4, r2
 800d098:	2a3e      	cmp	r2, #62	; 0x3e
 800d09a:	ee10 1a10 	vmov	r1, s0
 800d09e:	d922      	bls.n	800d0e6 <exp+0x5e>
 800d0a0:	2a00      	cmp	r2, #0
 800d0a2:	da06      	bge.n	800d0b2 <exp+0x2a>
 800d0a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d0a8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d0ac:	b004      	add	sp, #16
 800d0ae:	bcf0      	pop	{r4, r5, r6, r7}
 800d0b0:	4770      	bx	lr
 800d0b2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800d0b6:	f04f 0000 	mov.w	r0, #0
 800d0ba:	d913      	bls.n	800d0e4 <exp+0x5c>
 800d0bc:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800d0c0:	bf08      	it	eq
 800d0c2:	4281      	cmpeq	r1, r0
 800d0c4:	f000 80a0 	beq.w	800d208 <exp+0x180>
 800d0c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d0cc:	4294      	cmp	r4, r2
 800d0ce:	d0e9      	beq.n	800d0a4 <exp+0x1c>
 800d0d0:	4283      	cmp	r3, r0
 800d0d2:	da03      	bge.n	800d0dc <exp+0x54>
 800d0d4:	b004      	add	sp, #16
 800d0d6:	bcf0      	pop	{r4, r5, r6, r7}
 800d0d8:	f000 b8c6 	b.w	800d268 <__math_uflow>
 800d0dc:	b004      	add	sp, #16
 800d0de:	bcf0      	pop	{r4, r5, r6, r7}
 800d0e0:	f000 b8ca 	b.w	800d278 <__math_oflow>
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	4950      	ldr	r1, [pc, #320]	; (800d228 <exp+0x1a0>)
 800d0e8:	ed91 6b02 	vldr	d6, [r1, #8]
 800d0ec:	ed91 5b00 	vldr	d5, [r1]
 800d0f0:	eeb0 7b46 	vmov.f64	d7, d6
 800d0f4:	eea5 7b00 	vfma.f64	d7, d5, d0
 800d0f8:	ee17 5a10 	vmov	r5, s14
 800d0fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d100:	ed91 6b04 	vldr	d6, [r1, #16]
 800d104:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d108:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d10c:	ed91 6b06 	vldr	d6, [r1, #24]
 800d110:	18d8      	adds	r0, r3, r3
 800d112:	f100 030f 	add.w	r3, r0, #15
 800d116:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d11a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d11e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d122:	ee20 7b00 	vmul.f64	d7, d0, d0
 800d126:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800d12a:	ed91 5b08 	vldr	d5, [r1, #32]
 800d12e:	ee30 6b06 	vadd.f64	d6, d0, d6
 800d132:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d136:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d13a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800d13e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d142:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d146:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800d14a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800d14e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800d152:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d156:	2600      	movs	r6, #0
 800d158:	19f2      	adds	r2, r6, r7
 800d15a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800d15e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d162:	2c00      	cmp	r4, #0
 800d164:	d14b      	bne.n	800d1fe <exp+0x176>
 800d166:	42b5      	cmp	r5, r6
 800d168:	db10      	blt.n	800d18c <exp+0x104>
 800d16a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d16e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800d210 <exp+0x188>
 800d172:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d176:	4610      	mov	r0, r2
 800d178:	ec41 0b10 	vmov	d0, r0, r1
 800d17c:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d180:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d184:	b004      	add	sp, #16
 800d186:	bcf0      	pop	{r4, r5, r6, r7}
 800d188:	f000 b88a 	b.w	800d2a0 <__math_check_oflow>
 800d18c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d190:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d194:	4610      	mov	r0, r2
 800d196:	ec41 0b17 	vmov	d7, r0, r1
 800d19a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d19e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d1a2:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d1a6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800d1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ae:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d218 <exp+0x190>
 800d1b2:	d51e      	bpl.n	800d1f2 <exp+0x16a>
 800d1b4:	ee35 3b04 	vadd.f64	d3, d5, d4
 800d1b8:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d1bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d1c0:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d1c4:	ee36 5b05 	vadd.f64	d5, d6, d5
 800d1c8:	ee35 5b07 	vadd.f64	d5, d5, d7
 800d1cc:	ee35 5b03 	vadd.f64	d5, d5, d3
 800d1d0:	ee35 5b44 	vsub.f64	d5, d5, d4
 800d1d4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800d1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1dc:	d101      	bne.n	800d1e2 <exp+0x15a>
 800d1de:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800d220 <exp+0x198>
 800d1e2:	ed8d 0b00 	vstr	d0, [sp]
 800d1e6:	ed9d 7b00 	vldr	d7, [sp]
 800d1ea:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d1ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1f2:	ee25 0b00 	vmul.f64	d0, d5, d0
 800d1f6:	b004      	add	sp, #16
 800d1f8:	bcf0      	pop	{r4, r5, r6, r7}
 800d1fa:	f000 b845 	b.w	800d288 <__math_check_uflow>
 800d1fe:	ec43 2b10 	vmov	d0, r2, r3
 800d202:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d206:	e751      	b.n	800d0ac <exp+0x24>
 800d208:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d220 <exp+0x198>
 800d20c:	e74e      	b.n	800d0ac <exp+0x24>
 800d20e:	bf00      	nop
 800d210:	00000000 	.word	0x00000000
 800d214:	7f000000 	.word	0x7f000000
 800d218:	00000000 	.word	0x00000000
 800d21c:	00100000 	.word	0x00100000
	...
 800d228:	0800d518 	.word	0x0800d518

0800d22c <with_errno>:
 800d22c:	b513      	push	{r0, r1, r4, lr}
 800d22e:	4604      	mov	r4, r0
 800d230:	ed8d 0b00 	vstr	d0, [sp]
 800d234:	f7ff fa74 	bl	800c720 <__errno>
 800d238:	ed9d 0b00 	vldr	d0, [sp]
 800d23c:	6004      	str	r4, [r0, #0]
 800d23e:	b002      	add	sp, #8
 800d240:	bd10      	pop	{r4, pc}

0800d242 <xflow>:
 800d242:	b082      	sub	sp, #8
 800d244:	b158      	cbz	r0, 800d25e <xflow+0x1c>
 800d246:	eeb1 7b40 	vneg.f64	d7, d0
 800d24a:	ed8d 7b00 	vstr	d7, [sp]
 800d24e:	ed9d 7b00 	vldr	d7, [sp]
 800d252:	2022      	movs	r0, #34	; 0x22
 800d254:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d258:	b002      	add	sp, #8
 800d25a:	f7ff bfe7 	b.w	800d22c <with_errno>
 800d25e:	eeb0 7b40 	vmov.f64	d7, d0
 800d262:	e7f2      	b.n	800d24a <xflow+0x8>
 800d264:	0000      	movs	r0, r0
	...

0800d268 <__math_uflow>:
 800d268:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d270 <__math_uflow+0x8>
 800d26c:	f7ff bfe9 	b.w	800d242 <xflow>
 800d270:	00000000 	.word	0x00000000
 800d274:	10000000 	.word	0x10000000

0800d278 <__math_oflow>:
 800d278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d280 <__math_oflow+0x8>
 800d27c:	f7ff bfe1 	b.w	800d242 <xflow>
 800d280:	00000000 	.word	0x00000000
 800d284:	70000000 	.word	0x70000000

0800d288 <__math_check_uflow>:
 800d288:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d290:	d102      	bne.n	800d298 <__math_check_uflow+0x10>
 800d292:	2022      	movs	r0, #34	; 0x22
 800d294:	f7ff bfca 	b.w	800d22c <with_errno>
 800d298:	4770      	bx	lr
 800d29a:	0000      	movs	r0, r0
 800d29c:	0000      	movs	r0, r0
	...

0800d2a0 <__math_check_oflow>:
 800d2a0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d2c0 <__math_check_oflow+0x20>
 800d2a4:	eeb0 7bc0 	vabs.f64	d7, d0
 800d2a8:	eeb4 7b46 	vcmp.f64	d7, d6
 800d2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b0:	dd02      	ble.n	800d2b8 <__math_check_oflow+0x18>
 800d2b2:	2022      	movs	r0, #34	; 0x22
 800d2b4:	f7ff bfba 	b.w	800d22c <with_errno>
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	f3af 8000 	nop.w
 800d2c0:	ffffffff 	.word	0xffffffff
 800d2c4:	7fefffff 	.word	0x7fefffff

0800d2c8 <fmaxf>:
 800d2c8:	b508      	push	{r3, lr}
 800d2ca:	ed2d 8b02 	vpush	{d8}
 800d2ce:	eeb0 8a40 	vmov.f32	s16, s0
 800d2d2:	eef0 8a60 	vmov.f32	s17, s1
 800d2d6:	f000 f813 	bl	800d300 <__fpclassifyf>
 800d2da:	b148      	cbz	r0, 800d2f0 <fmaxf+0x28>
 800d2dc:	eeb0 0a68 	vmov.f32	s0, s17
 800d2e0:	f000 f80e 	bl	800d300 <__fpclassifyf>
 800d2e4:	b130      	cbz	r0, 800d2f4 <fmaxf+0x2c>
 800d2e6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ee:	dc01      	bgt.n	800d2f4 <fmaxf+0x2c>
 800d2f0:	eeb0 8a68 	vmov.f32	s16, s17
 800d2f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d2f8:	ecbd 8b02 	vpop	{d8}
 800d2fc:	bd08      	pop	{r3, pc}
	...

0800d300 <__fpclassifyf>:
 800d300:	ee10 3a10 	vmov	r3, s0
 800d304:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800d308:	d00d      	beq.n	800d326 <__fpclassifyf+0x26>
 800d30a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800d30e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d312:	d30a      	bcc.n	800d32a <__fpclassifyf+0x2a>
 800d314:	4b07      	ldr	r3, [pc, #28]	; (800d334 <__fpclassifyf+0x34>)
 800d316:	1e42      	subs	r2, r0, #1
 800d318:	429a      	cmp	r2, r3
 800d31a:	d908      	bls.n	800d32e <__fpclassifyf+0x2e>
 800d31c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800d320:	4258      	negs	r0, r3
 800d322:	4158      	adcs	r0, r3
 800d324:	4770      	bx	lr
 800d326:	2002      	movs	r0, #2
 800d328:	4770      	bx	lr
 800d32a:	2004      	movs	r0, #4
 800d32c:	4770      	bx	lr
 800d32e:	2003      	movs	r0, #3
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	007ffffe 	.word	0x007ffffe

0800d338 <_init>:
 800d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33a:	bf00      	nop
 800d33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33e:	bc08      	pop	{r3}
 800d340:	469e      	mov	lr, r3
 800d342:	4770      	bx	lr

0800d344 <_fini>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	bf00      	nop
 800d348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34a:	bc08      	pop	{r3}
 800d34c:	469e      	mov	lr, r3
 800d34e:	4770      	bx	lr
