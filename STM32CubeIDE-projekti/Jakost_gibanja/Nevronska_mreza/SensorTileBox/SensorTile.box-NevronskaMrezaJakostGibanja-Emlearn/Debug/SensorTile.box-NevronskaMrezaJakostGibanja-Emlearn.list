
SensorTile.box-NevronskaMrezaJakostGibanja-Emlearn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011764  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08011924  08011924  00021924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bec  08011bec  00030214  2**0
                  CONTENTS
  4 .ARM          00000000  08011bec  08011bec  00030214  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011bec  08011bec  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bec  08011bec  00021bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bf0  08011bf0  00021bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08011bf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f8  20000214  08011e08  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000250c  08011e08  0003250c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ade1  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000578d  00000000  00000000  0005b025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002530  00000000  00000000  000607b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022a8  00000000  00000000  00062ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aa0b  00000000  00000000  00064f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033422  00000000  00000000  0009f99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014d087  00000000  00000000  000d2dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021fe44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a66c  00000000  00000000  0021fe94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000214 	.word	0x20000214
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801190c 	.word	0x0801190c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000218 	.word	0x20000218
 80001fc:	0801190c 	.word	0x0801190c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <eml_net_relu>:
    int32_t activations_length;
} EmlNet;


static float
eml_net_relu(float in) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (in <= 0.0f) ? 0.0f : in; 
 8000c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3e:	d802      	bhi.n	8000c46 <eml_net_relu+0x1e>
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e000      	b.n	8000c48 <eml_net_relu+0x20>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	ee07 3a90 	vmov	s15, r3
}
 8000c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <eml_net_expit>:

static float
eml_net_expit(float in) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (1.0f + expf(-in));
 8000c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c68:	eef1 7a67 	vneg.f32	s15, s15
 8000c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c70:	f010 fa20 	bl	80110b4 <expf>
 8000c74:	eef0 7a40 	vmov.f32	s15, s0
 8000c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c88:	eef0 7a66 	vmov.f32	s15, s13
}
 8000c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <eml_net_tanh>:

static float
eml_net_tanh(float in) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	ed87 0a01 	vstr	s0, [r7, #4]
    return tanhf(in); 
 8000ca0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ca4:	f010 f988 	bl	8010fb8 <tanhf>
 8000ca8:	eef0 7a40 	vmov.f32	s15, s0
}
 8000cac:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <eml_net_softmax>:

static EmlError
eml_net_softmax(float *input, size_t input_length)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
    EML_PRECONDITION(input, EmlUninitialized);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <eml_net_softmax+0x14>
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e06e      	b.n	8000daa <eml_net_softmax+0xf2>

    float input_max = -INFINITY;
 8000ccc:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <eml_net_softmax+0xfc>)
 8000cce:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	e015      	b.n	8000d02 <eml_net_softmax+0x4a>
        if (input[i] > input_max) {
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cee:	d505      	bpl.n	8000cfc <eml_net_softmax+0x44>
            input_max = input[i];
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3e5      	bcc.n	8000cd6 <eml_net_softmax+0x1e>
        }
    }

    float sum = 0.0f;
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	e018      	b.n	8000d48 <eml_net_softmax+0x90>
        sum += expf(input[i] - input_max);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2e:	f010 f9c1 	bl	80110b4 <expf>
 8000d32:	eeb0 7a40 	vmov.f32	s14, s0
 8000d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d3e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	3301      	adds	r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3e2      	bcc.n	8000d16 <eml_net_softmax+0x5e>
    }

    const float offset = input_max + logf(sum);
 8000d50:	ed97 0a05 	vldr	s0, [r7, #20]
 8000d54:	f010 f9e4 	bl	8011120 <logf>
 8000d58:	eeb0 7a40 	vmov.f32	s14, s0
 8000d5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d64:	edc7 7a02 	vstr	s15, [r7, #8]
    for (size_t i = 0; i < input_length; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e018      	b.n	8000da0 <eml_net_softmax+0xe8>
        input[i] = expf(input[i] - offset);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	ed93 7a00 	vldr	s14, [r3]
 8000d7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	18d4      	adds	r4, r2, r3
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	f010 f991 	bl	80110b4 <expf>
 8000d92:	eef0 7a40 	vmov.f32	s15, s0
 8000d96:	edc4 7a00 	vstr	s15, [r4]
    for (size_t i = 0; i < input_length; i++) {
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3e2      	bcc.n	8000d6e <eml_net_softmax+0xb6>
    }

    return EmlOk;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	ff800000 	.word	0xff800000

08000db8 <eml_net_argmax>:

int32_t
eml_net_argmax(const float *values, int32_t values_length) {
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]

    float vmax = -INFINITY;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <eml_net_argmax+0x60>)
 8000dc4:	617b      	str	r3, [r7, #20]
    int32_t argmax = -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	e017      	b.n	8000e02 <eml_net_argmax+0x4a>
        if (values[i] > vmax) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dea:	d507      	bpl.n	8000dfc <eml_net_argmax+0x44>
            vmax = values[i];
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	617b      	str	r3, [r7, #20]
            argmax = i;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbe3      	blt.n	8000dd2 <eml_net_argmax+0x1a>
        }
    }
    return argmax;
 8000e0a:	693b      	ldr	r3, [r7, #16]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	ff800000 	.word	0xff800000

08000e1c <eml_net_valid>:


static bool
eml_net_valid(EmlNet *model) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    bool not_null = model->layers && model->activations1 && model->activations2;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <eml_net_valid+0x24>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <eml_net_valid+0x24>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <eml_net_valid+0x24>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <eml_net_valid+0x26>
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
    return not_null;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <eml_net_outputs>:

static inline int32_t
eml_net_outputs(EmlNet *model) {
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
    return model->layers[model->n_layers-1].n_outputs;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	3b14      	subs	r3, #20
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <eml_net_find_largest_layer>:
    return n_outputs;
}

// Calculate size of activation value arrays
static int32_t
eml_net_find_largest_layer(EmlNet *model) {
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
    int32_t largest = -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	e02e      	b.n	8000ef8 <eml_net_find_largest_layer+0x72>
        if (model->layers[i].n_inputs > largest) {
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6859      	ldr	r1, [r3, #4]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	da09      	bge.n	8000ec6 <eml_net_find_largest_layer+0x40>
            largest = model->layers[i].n_inputs;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6859      	ldr	r1, [r3, #4]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]
        }
        if (model->layers[i].n_outputs > largest) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6859      	ldr	r1, [r3, #4]
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	da09      	bge.n	8000ef2 <eml_net_find_largest_layer+0x6c>
            largest = model->layers[i].n_outputs;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6859      	ldr	r1, [r3, #4]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbcb      	blt.n	8000e9a <eml_net_find_largest_layer+0x14>
        }
    }
    return largest;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <eml_net_layer_forward>:

EmlError
eml_net_layer_forward(const EmlNetLayer *layer,
                    const float *in, int32_t in_length,
                    float *out, int32_t out_length)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b08d      	sub	sp, #52	; 0x34
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]
    EML_PRECONDITION(in_length >= layer->n_inputs, EmlSizeMismatch);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	da01      	bge.n	8000f2c <eml_net_layer_forward+0x1c>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0d3      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(out_length >= layer->n_outputs, EmlSizeMismatch);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f32:	429a      	cmp	r2, r3
 8000f34:	da01      	bge.n	8000f3a <eml_net_layer_forward+0x2a>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e0cc      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->weights, EmlUninitialized);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <eml_net_layer_forward+0x36>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e0c6      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->biases, EmlUninitialized);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <eml_net_layer_forward+0x42>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e0c0      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    //printf("weights "); print_array(layer->weights, layer->n_inputs*layer->n_outputs);
    //printf("biases "); print_array(layer->biases, layer->n_outputs);

    // TODO: matrix multiplication should be done in blocks. Ex 2x4*4x2 = 2x2
    // multiply inputs by weights
    for (int o=0; o<layer->n_outputs; o++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f56:	e040      	b.n	8000fda <eml_net_layer_forward+0xca>
        float sum = 0.0f;
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	e021      	b.n	8000fa8 <eml_net_layer_forward+0x98>
            const int w_idx = o+(i*layer->n_outputs); // not stored continious
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f70:	4413      	add	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
            const float w = layer->weights[w_idx];
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]
            sum += w * in[i];
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	4413      	add	r3, r2
 8000f8a:	ed93 7a00 	vldr	s14, [r3]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbd8      	blt.n	8000f64 <eml_net_layer_forward+0x54>
        }

        out[o] = sum + layer->biases[o];
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
    for (int o=0; o<layer->n_outputs; o++) {
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbb9      	blt.n	8000f58 <eml_net_layer_forward+0x48>

    }

    // apply activation function
    if (layer->activation == EmlNetActivationIdentity) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	7c1b      	ldrb	r3, [r3, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d072      	beq.n	80010d2 <eml_net_layer_forward+0x1c2>
        // no-op
    } else if (layer->activation == EmlNetActivationRelu) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	7c1b      	ldrb	r3, [r3, #16]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d11d      	bne.n	8001030 <eml_net_layer_forward+0x120>
        for (int i=0; i<layer->n_outputs; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	e014      	b.n	8001024 <eml_net_layer_forward+0x114>
            out[i] = eml_net_relu(out[i]);
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	18d4      	adds	r4, r2, r3
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	f7ff fe09 	bl	8000c28 <eml_net_relu>
 8001016:	eef0 7a40 	vmov.f32	s15, s0
 800101a:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	3301      	adds	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6a3a      	ldr	r2, [r7, #32]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbe5      	blt.n	8000ffa <eml_net_layer_forward+0xea>
 800102e:	e050      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationLogistic) {
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	7c1b      	ldrb	r3, [r3, #16]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d11d      	bne.n	8001074 <eml_net_layer_forward+0x164>
        for (int i=0; i<layer->n_outputs; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	e014      	b.n	8001068 <eml_net_layer_forward+0x158>
            out[i] = eml_net_expit(out[i]);
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	18d4      	adds	r4, r2, r3
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f7ff fe00 	bl	8000c5a <eml_net_expit>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbe5      	blt.n	800103e <eml_net_layer_forward+0x12e>
 8001072:	e02e      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationTanh) {
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	7c1b      	ldrb	r3, [r3, #16]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d11d      	bne.n	80010b8 <eml_net_layer_forward+0x1a8>
        for (int i=0; i<layer->n_outputs; i++) {
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	e014      	b.n	80010ac <eml_net_layer_forward+0x19c>
            out[i] = eml_net_tanh(out[i]);
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	18d4      	adds	r4, r2, r3
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	f7ff fdfc 	bl	8000c96 <eml_net_tanh>
 800109e:	eef0 7a40 	vmov.f32	s15, s0
 80010a2:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbe5      	blt.n	8001082 <eml_net_layer_forward+0x172>
 80010b6:	e00c      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationSoftmax) {
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	7c1b      	ldrb	r3, [r3, #16]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d106      	bne.n	80010ce <eml_net_layer_forward+0x1be>
        eml_net_softmax(out, layer->n_outputs);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f7ff fdf6 	bl	8000cb8 <eml_net_softmax>
 80010cc:	e001      	b.n	80010d2 <eml_net_layer_forward+0x1c2>
    } else {
        return EmlUnsupported;
 80010ce:	2302      	movs	r3, #2
 80010d0:	e000      	b.n	80010d4 <eml_net_layer_forward+0x1c4>
    }

    //printf("activations "); print_array(out, layer->n_outputs);

    return EmlOk;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3734      	adds	r7, #52	; 0x34
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}

080010dc <eml_net_infer>:


// Run inferences. Leaves results in activations2
EmlError
eml_net_infer(EmlNet *model, const float *features, int32_t features_length)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
    EML_PRECONDITION(eml_net_valid(model), EmlUninitialized);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff fe97 	bl	8000e1c <eml_net_valid>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <eml_net_infer+0x22>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e082      	b.n	8001204 <eml_net_infer+0x128>
    EML_PRECONDITION(model->n_layers >= 2, EmlUnsupported);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	dc01      	bgt.n	800110a <eml_net_infer+0x2e>
 8001106:	2302      	movs	r3, #2
 8001108:	e07c      	b.n	8001204 <eml_net_infer+0x128>
    EML_PRECONDITION(features_length == model->layers[0].n_inputs, EmlSizeMismatch);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d001      	beq.n	800111a <eml_net_infer+0x3e>
 8001116:	2301      	movs	r3, #1
 8001118:	e074      	b.n	8001204 <eml_net_infer+0x128>
    EML_PRECONDITION(model->activations_length >= eml_net_find_largest_layer(model), EmlSizeMismatch);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	691c      	ldr	r4, [r3, #16]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff feb1 	bl	8000e86 <eml_net_find_largest_layer>
 8001124:	4603      	mov	r3, r0
 8001126:	429c      	cmp	r4, r3
 8001128:	da01      	bge.n	800112e <eml_net_infer+0x52>
 800112a:	2301      	movs	r3, #1
 800112c:	e06a      	b.n	8001204 <eml_net_infer+0x128>

    const int32_t buffer_length = model->activations_length; 
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    float *buffer1 = model->activations1;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	623b      	str	r3, [r7, #32]
    float *buffer2 = model->activations2;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	61fb      	str	r3, [r7, #28]

    // Input layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[0], features,
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6858      	ldr	r0, [r3, #4]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	f7ff fedf 	bl	8000f10 <eml_net_layer_forward>
 8001152:	4603      	mov	r3, r0
 8001154:	76fb      	strb	r3, [r7, #27]
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <eml_net_infer+0x84>
 800115c:	7efb      	ldrb	r3, [r7, #27]
 800115e:	e051      	b.n	8001204 <eml_net_infer+0x128>
                        features_length, buffer1, buffer_length));

    // Hidden layers
    for (int l=1; l<model->n_layers-1; l++) {
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001164:	e02e      	b.n	80011c4 <eml_net_infer+0xe8>
        const EmlNetLayer *layer = &model->layers[l];
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	617b      	str	r3, [r7, #20]
        // PERF: avoid copying, swap buffers instead
        EML_CHECK_ERROR(eml_net_layer_forward(layer, buffer1, buffer_length, buffer2, buffer_length));
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001180:	6a39      	ldr	r1, [r7, #32]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff fec4 	bl	8000f10 <eml_net_layer_forward>
 8001188:	4603      	mov	r3, r0
 800118a:	74fb      	strb	r3, [r7, #19]
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <eml_net_infer+0xba>
 8001192:	7cfb      	ldrb	r3, [r7, #19]
 8001194:	e036      	b.n	8001204 <eml_net_infer+0x128>
        for (int i=0; i<buffer_length; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
 800119a:	e00c      	b.n	80011b6 <eml_net_infer+0xda>
            buffer1[i] = buffer2[i];
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	441a      	add	r2, r3
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	6a39      	ldr	r1, [r7, #32]
 80011aa:	440b      	add	r3, r1
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	601a      	str	r2, [r3, #0]
        for (int i=0; i<buffer_length; i++) {
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	3301      	adds	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbee      	blt.n	800119c <eml_net_infer+0xc0>
    for (int l=1; l<model->n_layers-1; l++) {
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	3301      	adds	r3, #1
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbca      	blt.n	8001166 <eml_net_infer+0x8a>
        }
    }

    // Output layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[model->n_layers-1],
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	460b      	mov	r3, r1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	3b14      	subs	r3, #20
 80011e4:	18d0      	adds	r0, r2, r3
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ee:	6a39      	ldr	r1, [r7, #32]
 80011f0:	f7ff fe8e 	bl	8000f10 <eml_net_layer_forward>
 80011f4:	4603      	mov	r3, r0
 80011f6:	76bb      	strb	r3, [r7, #26]
 80011f8:	7ebb      	ldrb	r3, [r7, #26]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <eml_net_infer+0x126>
 80011fe:	7ebb      	ldrb	r3, [r7, #26]
 8001200:	e000      	b.n	8001204 <eml_net_infer+0x128>
                        buffer1, buffer_length, buffer2, buffer_length));

    return EmlOk;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3734      	adds	r7, #52	; 0x34
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}

0800120c <eml_net_predict>:
}


// Return the class, or -EmlError on failure
int32_t
eml_net_predict(EmlNet *model, const float *features, int32_t features_length) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]

    const EmlError error = eml_net_infer(model, features, features_length);
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff ff5d 	bl	80010dc <eml_net_infer>
 8001222:	4603      	mov	r3, r0
 8001224:	76fb      	strb	r3, [r7, #27]
    if (error != EmlOk) {
 8001226:	7efb      	ldrb	r3, [r7, #27]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <eml_net_predict+0x26>
        return -error;
 800122c:	7efb      	ldrb	r3, [r7, #27]
 800122e:	425b      	negs	r3, r3
 8001230:	e024      	b.n	800127c <eml_net_predict+0x70>
    }

    const int32_t n_outputs = eml_net_outputs(model);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff fe11 	bl	8000e5a <eml_net_outputs>
 8001238:	6178      	str	r0, [r7, #20]

    int32_t _class = -EmlUnknownError;
 800123a:	f06f 0304 	mvn.w	r3, #4
 800123e:	61fb      	str	r3, [r7, #28]
    if (n_outputs == 1) {
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10f      	bne.n	8001266 <eml_net_predict+0x5a>
        _class = (model->activations2[0] > 0.5f) ? 1 : 0;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	bfcc      	ite	gt
 800125c:	2301      	movgt	r3, #1
 800125e:	2300      	movle	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	e009      	b.n	800127a <eml_net_predict+0x6e>
    } else if (n_outputs > 1) {
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b01      	cmp	r3, #1
 800126a:	dd06      	ble.n	800127a <eml_net_predict+0x6e>
        _class = eml_net_argmax(model->activations2, n_outputs);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	6979      	ldr	r1, [r7, #20]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fda0 	bl	8000db8 <eml_net_argmax>
 8001278:	61f8      	str	r0, [r7, #28]
    }

    return _class;
 800127a:	69fb      	ldr	r3, [r7, #28]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <nevronskaMreza_jakostGibanja_predict>:
{ 3, 10, nevronskaMreza_jakostGibanja_layer1_weights, nevronskaMreza_jakostGibanja_layer1_biases, EmlNetActivationSoftmax } };
static EmlNet nevronskaMreza_jakostGibanja = { 2, nevronskaMreza_jakostGibanja_layers, nevronskaMreza_jakostGibanja_buf1, nevronskaMreza_jakostGibanja_buf2, 10 };

    int32_t
    nevronskaMreza_jakostGibanja_predict(const float *features, int32_t n_features)
    {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
        return eml_net_predict(&nevronskaMreza_jakostGibanja, features, n_features);
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <nevronskaMreza_jakostGibanja_predict+0x20>)
 8001294:	f7ff ffba 	bl	800120c <eml_net_predict>
 8001298:	4603      	mov	r3, r0

    }
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b095      	sub	sp, #84	; 0x54
 80012ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f001 fcc0 	bl	8002c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 fa83 	bl	80017bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 fe47 	bl	8001f48 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ba:	f000 fe1b 	bl	8001ef4 <MX_DMA_Init>
  MX_ADC1_Init();
 80012be:	f000 fadb 	bl	8001878 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80012c2:	f000 fb41 	bl	8001948 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80012c6:	f000 fba3 	bl	8001a10 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012ca:	f000 fbe1 	bl	8001a90 <MX_I2C3_Init>
  MX_RTC_Init();
 80012ce:	f000 fc1f 	bl	8001b10 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 80012d2:	f000 fc79 	bl	8001bc8 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80012d6:	f000 fc99 	bl	8001c0c <MX_SPI1_Init>
  MX_SPI2_Init();
 80012da:	f000 fcd5 	bl	8001c88 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012de:	f000 fd11 	bl	8001d04 <MX_SPI3_Init>
  MX_TIM2_Init();
 80012e2:	f000 fd4d 	bl	8001d80 <MX_TIM2_Init>
  MX_TIM6_Init();
 80012e6:	f000 fd99 	bl	8001e1c <MX_TIM6_Init>
  MX_TIM7_Init();
 80012ea:	f000 fdcd 	bl	8001e88 <MX_TIM7_Init>
  MX_FATFS_Init();
 80012ee:	f00c fc07 	bl	800db00 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80012f2:	f00e fb63 	bl	800f9bc <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	    // sensor setup (activation and setting frequency)
  	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fc:	48bc      	ldr	r0, [pc, #752]	; (80015f0 <main+0x348>)
 80012fe:	f003 fabb 	bl	8004878 <HAL_GPIO_WritePin>

  	    outdata[0] = 0x10 ; // register used for setting up the accelerometer
 8001302:	4bbc      	ldr	r3, [pc, #752]	; (80015f4 <main+0x34c>)
 8001304:	2210      	movs	r2, #16
 8001306:	701a      	strb	r2, [r3, #0]
  	    outdata[1] = 0x28 ; // set frequency to 26Hz and FS to 4g
 8001308:	4bba      	ldr	r3, [pc, #744]	; (80015f4 <main+0x34c>)
 800130a:	2228      	movs	r2, #40	; 0x28
 800130c:	705a      	strb	r2, [r3, #1]
  	    HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2302      	movs	r3, #2
 8001316:	4ab8      	ldr	r2, [pc, #736]	; (80015f8 <main+0x350>)
 8001318:	49b6      	ldr	r1, [pc, #728]	; (80015f4 <main+0x34c>)
 800131a:	48b8      	ldr	r0, [pc, #736]	; (80015fc <main+0x354>)
 800131c:	f009 fb0a 	bl	800a934 <HAL_SPI_TransmitReceive>

  	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	48b2      	ldr	r0, [pc, #712]	; (80015f0 <main+0x348>)
 8001328:	f003 faa6 	bl	8004878 <HAL_GPIO_WritePin>

  while (1)
  {

	  while(bufVar_len < 26) {
 800132c:	e14a      	b.n	80015c4 <main+0x31c>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001334:	48ae      	ldr	r0, [pc, #696]	; (80015f0 <main+0x348>)
 8001336:	f003 fa9f 	bl	8004878 <HAL_GPIO_WritePin>
	  		outdata[0] = 0x1e | 0x80 ; // read status register if there is new accelerometer data
 800133a:	4bae      	ldr	r3, [pc, #696]	; (80015f4 <main+0x34c>)
 800133c:	229e      	movs	r2, #158	; 0x9e
 800133e:	701a      	strb	r2, [r3, #0]
	  		HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2302      	movs	r3, #2
 8001348:	4aab      	ldr	r2, [pc, #684]	; (80015f8 <main+0x350>)
 800134a:	49aa      	ldr	r1, [pc, #680]	; (80015f4 <main+0x34c>)
 800134c:	48ab      	ldr	r0, [pc, #684]	; (80015fc <main+0x354>)
 800134e:	f009 faf1 	bl	800a934 <HAL_SPI_TransmitReceive>
	  		newValueAvailable = indata[1] & 0b1; //only accelerometer state
 8001352:	4ba9      	ldr	r3, [pc, #676]	; (80015f8 <main+0x350>)
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4ba8      	ldr	r3, [pc, #672]	; (8001600 <main+0x358>)
 800135e:	701a      	strb	r2, [r3, #0]
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001366:	48a2      	ldr	r0, [pc, #648]	; (80015f0 <main+0x348>)
 8001368:	f003 fa86 	bl	8004878 <HAL_GPIO_WritePin>

	  		if(newValueAvailable == 1) {
 800136c:	4ba4      	ldr	r3, [pc, #656]	; (8001600 <main+0x358>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	f040 8127 	bne.w	80015c4 <main+0x31c>
	  			bufVar_len++;
 8001376:	4ba3      	ldr	r3, [pc, #652]	; (8001604 <main+0x35c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4aa1      	ldr	r2, [pc, #644]	; (8001604 <main+0x35c>)
 800137e:	6013      	str	r3, [r2, #0]

	  			newValueAvailable = 0;
 8001380:	4b9f      	ldr	r3, [pc, #636]	; (8001600 <main+0x358>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]

	  			//Read accelerometer measurements
	  			outdata[0] = 0x29 | 0x80 ; // read x, 0x51
 8001386:	4b9b      	ldr	r3, [pc, #620]	; (80015f4 <main+0x34c>)
 8001388:	22a9      	movs	r2, #169	; 0xa9
 800138a:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001392:	4897      	ldr	r0, [pc, #604]	; (80015f0 <main+0x348>)
 8001394:	f003 fa70 	bl	8004878 <HAL_GPIO_WritePin>
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2302      	movs	r3, #2
 80013a0:	4a95      	ldr	r2, [pc, #596]	; (80015f8 <main+0x350>)
 80013a2:	4994      	ldr	r1, [pc, #592]	; (80015f4 <main+0x34c>)
 80013a4:	4895      	ldr	r0, [pc, #596]	; (80015fc <main+0x354>)
 80013a6:	f009 fac5 	bl	800a934 <HAL_SPI_TransmitReceive>
	  			AccelX1 = indata[1];
 80013aa:	4b93      	ldr	r3, [pc, #588]	; (80015f8 <main+0x350>)
 80013ac:	785a      	ldrb	r2, [r3, #1]
 80013ae:	4b96      	ldr	r3, [pc, #600]	; (8001608 <main+0x360>)
 80013b0:	701a      	strb	r2, [r3, #0]
	  			outdata[0] = 0x28 | 0x80 ; // read x, low
 80013b2:	4b90      	ldr	r3, [pc, #576]	; (80015f4 <main+0x34c>)
 80013b4:	22a8      	movs	r2, #168	; 0xa8
 80013b6:	701a      	strb	r2, [r3, #0]
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2302      	movs	r3, #2
 80013c0:	4a8d      	ldr	r2, [pc, #564]	; (80015f8 <main+0x350>)
 80013c2:	498c      	ldr	r1, [pc, #560]	; (80015f4 <main+0x34c>)
 80013c4:	488d      	ldr	r0, [pc, #564]	; (80015fc <main+0x354>)
 80013c6:	f009 fab5 	bl	800a934 <HAL_SPI_TransmitReceive>
	  			AccelX2 = indata[1];
 80013ca:	4b8b      	ldr	r3, [pc, #556]	; (80015f8 <main+0x350>)
 80013cc:	785a      	ldrb	r2, [r3, #1]
 80013ce:	4b8f      	ldr	r3, [pc, #572]	; (800160c <main+0x364>)
 80013d0:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d8:	4885      	ldr	r0, [pc, #532]	; (80015f0 <main+0x348>)
 80013da:	f003 fa4d 	bl	8004878 <HAL_GPIO_WritePin>

	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e4:	4882      	ldr	r0, [pc, #520]	; (80015f0 <main+0x348>)
 80013e6:	f003 fa47 	bl	8004878 <HAL_GPIO_WritePin>
	  			outdata[0] = 0x2b | 0x80 ; // read y, 0x53
 80013ea:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <main+0x34c>)
 80013ec:	22ab      	movs	r2, #171	; 0xab
 80013ee:	701a      	strb	r2, [r3, #0]
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2302      	movs	r3, #2
 80013f8:	4a7f      	ldr	r2, [pc, #508]	; (80015f8 <main+0x350>)
 80013fa:	497e      	ldr	r1, [pc, #504]	; (80015f4 <main+0x34c>)
 80013fc:	487f      	ldr	r0, [pc, #508]	; (80015fc <main+0x354>)
 80013fe:	f009 fa99 	bl	800a934 <HAL_SPI_TransmitReceive>
	  			AccelY1 = indata[1];
 8001402:	4b7d      	ldr	r3, [pc, #500]	; (80015f8 <main+0x350>)
 8001404:	785a      	ldrb	r2, [r3, #1]
 8001406:	4b82      	ldr	r3, [pc, #520]	; (8001610 <main+0x368>)
 8001408:	701a      	strb	r2, [r3, #0]
	  			outdata[0] = 0x2a | 0x80 ; // read y, low
 800140a:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <main+0x34c>)
 800140c:	22aa      	movs	r2, #170	; 0xaa
 800140e:	701a      	strb	r2, [r3, #0]
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2302      	movs	r3, #2
 8001418:	4a77      	ldr	r2, [pc, #476]	; (80015f8 <main+0x350>)
 800141a:	4976      	ldr	r1, [pc, #472]	; (80015f4 <main+0x34c>)
 800141c:	4877      	ldr	r0, [pc, #476]	; (80015fc <main+0x354>)
 800141e:	f009 fa89 	bl	800a934 <HAL_SPI_TransmitReceive>
	  			AccelY2 = indata[1];
 8001422:	4b75      	ldr	r3, [pc, #468]	; (80015f8 <main+0x350>)
 8001424:	785a      	ldrb	r2, [r3, #1]
 8001426:	4b7b      	ldr	r3, [pc, #492]	; (8001614 <main+0x36c>)
 8001428:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001430:	486f      	ldr	r0, [pc, #444]	; (80015f0 <main+0x348>)
 8001432:	f003 fa21 	bl	8004878 <HAL_GPIO_WritePin>

	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143c:	486c      	ldr	r0, [pc, #432]	; (80015f0 <main+0x348>)
 800143e:	f003 fa1b 	bl	8004878 <HAL_GPIO_WritePin>
	  			outdata[0] = 0x2d | 0x80 ; // read z, 0x55
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <main+0x34c>)
 8001444:	22ad      	movs	r2, #173	; 0xad
 8001446:	701a      	strb	r2, [r3, #0]
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2302      	movs	r3, #2
 8001450:	4a69      	ldr	r2, [pc, #420]	; (80015f8 <main+0x350>)
 8001452:	4968      	ldr	r1, [pc, #416]	; (80015f4 <main+0x34c>)
 8001454:	4869      	ldr	r0, [pc, #420]	; (80015fc <main+0x354>)
 8001456:	f009 fa6d 	bl	800a934 <HAL_SPI_TransmitReceive>
	  			AccelZ1 = indata[1];
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <main+0x350>)
 800145c:	785a      	ldrb	r2, [r3, #1]
 800145e:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <main+0x370>)
 8001460:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001468:	4861      	ldr	r0, [pc, #388]	; (80015f0 <main+0x348>)
 800146a:	f003 fa05 	bl	8004878 <HAL_GPIO_WritePin>

	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001474:	485e      	ldr	r0, [pc, #376]	; (80015f0 <main+0x348>)
 8001476:	f003 f9ff 	bl	8004878 <HAL_GPIO_WritePin>
	  			outdata[0] = 0x2c | 0x80 ; // read z, low
 800147a:	4b5e      	ldr	r3, [pc, #376]	; (80015f4 <main+0x34c>)
 800147c:	22ac      	movs	r2, #172	; 0xac
 800147e:	701a      	strb	r2, [r3, #0]
	  			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2302      	movs	r3, #2
 8001488:	4a5b      	ldr	r2, [pc, #364]	; (80015f8 <main+0x350>)
 800148a:	495a      	ldr	r1, [pc, #360]	; (80015f4 <main+0x34c>)
 800148c:	485b      	ldr	r0, [pc, #364]	; (80015fc <main+0x354>)
 800148e:	f009 fa51 	bl	800a934 <HAL_SPI_TransmitReceive>
	  			AccelZ2 = indata[1];
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <main+0x350>)
 8001494:	785a      	ldrb	r2, [r3, #1]
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <main+0x374>)
 8001498:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a0:	4853      	ldr	r0, [pc, #332]	; (80015f0 <main+0x348>)
 80014a2:	f003 f9e9 	bl	8004878 <HAL_GPIO_WritePin>
	  			int16_t AccelY;
	  			int32_t AccelY_mg;
	  			int16_t AccelZ;
	  			int32_t AccelZ_mg;

	  			AccelX= ((int16_t)AccelX1 <<8 ) | AccelX2;
 80014a6:	4b58      	ldr	r3, [pc, #352]	; (8001608 <main+0x360>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <main+0x364>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	857b      	strh	r3, [r7, #42]	; 0x2a
	  			AccelX_mg= (int32_t)((float)AccelX * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80014b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001620 <main+0x378>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d0:	ee17 3a90 	vmov	r3, s15
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
	  			AccelY= ((int16_t)AccelY1 <<8 ) | AccelY2;
 80014d6:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <main+0x368>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <main+0x36c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	847b      	strh	r3, [r7, #34]	; 0x22
	  			AccelY_mg= (int32_t)((float)AccelY * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80014e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001620 <main+0x378>
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001500:	ee17 3a90 	vmov	r3, s15
 8001504:	61fb      	str	r3, [r7, #28]
	  			AccelZ= ((int16_t)AccelZ1 <<8 ) | AccelZ2;
 8001506:	4b44      	ldr	r3, [pc, #272]	; (8001618 <main+0x370>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <main+0x374>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	837b      	strh	r3, [r7, #26]
	  			AccelZ_mg= (int32_t)((float)AccelZ * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8001518:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001620 <main+0x378>
 8001528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001530:	ee17 3a90 	vmov	r3, s15
 8001534:	617b      	str	r3, [r7, #20]

	  			float AccelX_inG = AccelX_mg * 0.001f;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001624 <main+0x37c>
 8001544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001548:	edc7 7a04 	vstr	s15, [r7, #16]
	  			float AccelY_inG = AccelY_mg * 0.001f;
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001556:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001624 <main+0x37c>
 800155a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155e:	edc7 7a03 	vstr	s15, [r7, #12]
	  			float AccelZ_inG = AccelZ_mg * 0.001f;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001624 <main+0x37c>
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	edc7 7a02 	vstr	s15, [r7, #8]

	  			bufVar[bufVar_len - 1] = sqrt(AccelX_inG * AccelX_inG + AccelY_inG * AccelY_inG + AccelZ_inG * AccelZ_inG);
 8001578:	edd7 7a04 	vldr	s15, [r7, #16]
 800157c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001580:	edd7 7a03 	vldr	s15, [r7, #12]
 8001584:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800158c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001590:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	ee17 0a90 	vmov	r0, s15
 800159c:	f7fe ffec 	bl	8000578 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	ec43 2b10 	vmov	d0, r2, r3
 80015a8:	f00f fd58 	bl	801105c <sqrt>
 80015ac:	ec51 0b10 	vmov	r0, r1, d0
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <main+0x35c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1e5c      	subs	r4, r3, #1
 80015b6:	f7ff fae7 	bl	8000b88 <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	491a      	ldr	r1, [pc, #104]	; (8001628 <main+0x380>)
 80015be:	00a3      	lsls	r3, r4, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	601a      	str	r2, [r3, #0]
	  while(bufVar_len < 26) {
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <main+0x35c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b19      	cmp	r3, #25
 80015ca:	f77f aeb0 	ble.w	800132e <main+0x86>
	  		}
	  	}

	  	if(bufVar_len == 26) {
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <main+0x35c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b1a      	cmp	r3, #26
 80015d4:	d1f6      	bne.n	80015c4 <main+0x31c>
	  		bufVar_len = 0;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <main+0x35c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
	  		float summ = 0;
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
	  		float sumOfSquares = 0;
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
	  		for(int i = 0; i < 26; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ec:	e041      	b.n	8001672 <main+0x3ca>
 80015ee:	bf00      	nop
 80015f0:	48001000 	.word	0x48001000
 80015f4:	200003f0 	.word	0x200003f0
 80015f8:	200003ec 	.word	0x200003ec
 80015fc:	2000069c 	.word	0x2000069c
 8001600:	200003f2 	.word	0x200003f2
 8001604:	200003e8 	.word	0x200003e8
 8001608:	200003f3 	.word	0x200003f3
 800160c:	200003f6 	.word	0x200003f6
 8001610:	200003f4 	.word	0x200003f4
 8001614:	200003f7 	.word	0x200003f7
 8001618:	200003f5 	.word	0x200003f5
 800161c:	200003f8 	.word	0x200003f8
 8001620:	3df9db23 	.word	0x3df9db23
 8001624:	3a83126f 	.word	0x3a83126f
 8001628:	20000380 	.word	0x20000380
	  			summ += bufVar[i];
 800162c:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <main+0x4f8>)
 800162e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  			sumOfSquares += bufVar[i] * bufVar[i];
 8001644:	4a56      	ldr	r2, [pc, #344]	; (80017a0 <main+0x4f8>)
 8001646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	ed93 7a00 	vldr	s14, [r3]
 8001650:	4a53      	ldr	r2, [pc, #332]	; (80017a0 <main+0x4f8>)
 8001652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001668:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  		for(int i = 0; i < 26; i++) {
 800166c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800166e:	3301      	adds	r3, #1
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001674:	2b19      	cmp	r3, #25
 8001676:	ddd9      	ble.n	800162c <main+0x384>
	  		}
	  		float mean = summ / 26;
 8001678:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800167c:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 8001680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001684:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  		float meanSquared = mean * mean;
 8001688:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800168c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001690:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  		float inputValue = (sumOfSquares / 26) - meanSquared;
 8001694:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001698:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 800169c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	  		inputValue = (inputValue - 0.22330145150297734) * 2.5709241370783027;
 80016ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016ae:	f7fe ff63 	bl	8000578 <__aeabi_f2d>
 80016b2:	a337      	add	r3, pc, #220	; (adr r3, 8001790 <main+0x4e8>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe fdfe 	bl	80002b8 <__aeabi_dsub>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	a334      	add	r3, pc, #208	; (adr r3, 8001798 <main+0x4f0>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ffad 	bl	8000628 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa57 	bl	8000b88 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30

	  		const float features[] = { inputValue };
 80016de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e0:	607b      	str	r3, [r7, #4]
	  		int out = nevronskaMreza_jakostGibanja_predict(features, 1); // Alternative A: "inline"
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2101      	movs	r1, #1
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fdcc 	bl	8001284 <nevronskaMreza_jakostGibanja_predict>
 80016ec:	62f8      	str	r0, [r7, #44]	; 0x2c
	  		if (out < 0) {
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da01      	bge.n	80016f8 <main+0x450>
	  		    return out; // error
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	e047      	b.n	8001788 <main+0x4e0>
	  		} else {
	  		  snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %s \r\n", out, classes[out]);
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <main+0x4fc>)
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <main+0x500>)
 8001706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170a:	4828      	ldr	r0, [pc, #160]	; (80017ac <main+0x504>)
 800170c:	f00f f8c2 	bl	8010894 <sniprintf>
	  		  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8001710:	4826      	ldr	r0, [pc, #152]	; (80017ac <main+0x504>)
 8001712:	f7fe fd75 	bl	8000200 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	4619      	mov	r1, r3
 800171a:	4824      	ldr	r0, [pc, #144]	; (80017ac <main+0x504>)
 800171c:	f00e fa0c 	bl	800fb38 <CDC_Transmit_FS>

	  		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2104      	movs	r1, #4
 8001724:	4822      	ldr	r0, [pc, #136]	; (80017b0 <main+0x508>)
 8001726:	f003 f8a7 	bl	8004878 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001730:	4820      	ldr	r0, [pc, #128]	; (80017b4 <main+0x50c>)
 8001732:	f003 f8a1 	bl	8004878 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173c:	481e      	ldr	r0, [pc, #120]	; (80017b8 <main+0x510>)
 800173e:	f003 f89b 	bl	8004878 <HAL_GPIO_WritePin>

	  		  switch(out)
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	2b02      	cmp	r3, #2
 8001746:	d017      	beq.n	8001778 <main+0x4d0>
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	2b02      	cmp	r3, #2
 800174c:	f73f af3a 	bgt.w	80015c4 <main+0x31c>
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <main+0x4b6>
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	2b01      	cmp	r3, #1
 800175a:	d006      	beq.n	800176a <main+0x4c2>
 800175c:	e013      	b.n	8001786 <main+0x4de>
	  		      {
	  		          case 0:
	  		          	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2104      	movs	r1, #4
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <main+0x508>)
 8001764:	f003 f888 	bl	8004878 <HAL_GPIO_WritePin>
	  		              break;
 8001768:	e00d      	b.n	8001786 <main+0x4de>
	  		          case 1:
	  		          	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001770:	4810      	ldr	r0, [pc, #64]	; (80017b4 <main+0x50c>)
 8001772:	f003 f881 	bl	8004878 <HAL_GPIO_WritePin>
	  		          	break;
 8001776:	e006      	b.n	8001786 <main+0x4de>
	  		          case 2:
	  		          	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <main+0x510>)
 8001780:	f003 f87a 	bl	8004878 <HAL_GPIO_WritePin>
	  		          	break;
 8001784:	bf00      	nop
	  while(bufVar_len < 26) {
 8001786:	e71d      	b.n	80015c4 <main+0x31c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001788:	4618      	mov	r0, r3
 800178a:	374c      	adds	r7, #76	; 0x4c
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	57ad641d 	.word	0x57ad641d
 8001794:	3fcc9524 	.word	0x3fcc9524
 8001798:	ac89fc95 	.word	0xac89fc95
 800179c:	40049140 	.word	0x40049140
 80017a0:	20000380 	.word	0x20000380
 80017a4:	20000014 	.word	0x20000014
 80017a8:	080119ec 	.word	0x080119ec
 80017ac:	20000280 	.word	0x20000280
 80017b0:	48001400 	.word	0x48001400
 80017b4:	48001800 	.word	0x48001800
 80017b8:	48000400 	.word	0x48000400

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b096      	sub	sp, #88	; 0x58
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	2244      	movs	r2, #68	; 0x44
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00e ff6a 	bl	80106a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80017de:	2000      	movs	r0, #0
 80017e0:	f004 fb78 	bl	8005ed4 <HAL_PWREx_ControlVoltageScaling>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80017ea:	f000 fd19 	bl	8002220 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017ee:	f004 fb41 	bl	8005e74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <SystemClock_Config+0xb8>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <SystemClock_Config+0xb8>)
 80017fa:	f023 0318 	bic.w	r3, r3, #24
 80017fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001802:	2325      	movs	r3, #37	; 0x25
 8001804:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800180a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800180c:	2301      	movs	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2302      	movs	r3, #2
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001818:	2303      	movs	r3, #3
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 800181c:	2304      	movs	r3, #4
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001820:	233c      	movs	r3, #60	; 0x3c
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001824:	2305      	movs	r3, #5
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001828:	2302      	movs	r3, #2
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fc11 	bl	800605c <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001840:	f000 fcee 	bl	8002220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2303      	movs	r3, #3
 800184a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	2105      	movs	r1, #5
 800185c:	4618      	mov	r0, r3
 800185e:	f005 f817 	bl	8006890 <HAL_RCC_ClockConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001868:	f000 fcda 	bl	8002220 <Error_Handler>
  }
}
 800186c:	bf00      	nop
 800186e:	3758      	adds	r7, #88	; 0x58
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187e:	463b      	mov	r3, r7
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <MX_ADC1_Init+0xc4>)
 8001890:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <MX_ADC1_Init+0xc8>)
 8001892:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <MX_ADC1_Init+0xc4>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_ADC1_Init+0xc4>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_ADC1_Init+0xc4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_ADC1_Init+0xc4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_ADC1_Init+0xc4>)
 80018ae:	2204      	movs	r2, #4
 80018b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_ADC1_Init+0xc4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_ADC1_Init+0xc4>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_ADC1_Init+0xc4>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_ADC1_Init+0xc4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_ADC1_Init+0xc4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_ADC1_Init+0xc4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_ADC1_Init+0xc4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_ADC1_Init+0xc4>)
 80018e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_ADC1_Init+0xc4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_ADC1_Init+0xc4>)
 80018f2:	2204      	movs	r2, #4
 80018f4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f6:	4811      	ldr	r0, [pc, #68]	; (800193c <MX_ADC1_Init+0xc4>)
 80018f8:	f001 fbd4 	bl	80030a4 <HAL_ADC_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001902:	f000 fc8d 	bl	8002220 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_ADC1_Init+0xcc>)
 8001908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800190a:	2306      	movs	r3, #6
 800190c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800190e:	2302      	movs	r3, #2
 8001910:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001916:	2304      	movs	r3, #4
 8001918:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_ADC1_Init+0xc4>)
 8001924:	f001 fd0a 	bl	800333c <HAL_ADC_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800192e:	f000 fc77 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200003fc 	.word	0x200003fc
 8001940:	50040000 	.word	0x50040000
 8001944:	21800100 	.word	0x21800100

08001948 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <MX_DFSDM1_Init+0xbc>)
 8001950:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 800195a:	2201      	movs	r2, #1
 800195c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 8001960:	2201      	movs	r2, #1
 8001962:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8001964:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 8001966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 800196e:	22c0      	movs	r2, #192	; 0xc0
 8001970:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 8001974:	2201      	movs	r2, #1
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001978:	4821      	ldr	r0, [pc, #132]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 800197a:	f002 faad 	bl	8003ed8 <HAL_DFSDM_FilterInit>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001984:	f000 fc4c 	bl	8002220 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 800198a:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <MX_DFSDM1_Init+0xc4>)
 800198c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 8001990:	2200      	movs	r2, #0
 8001992:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 800199c:	2202      	movs	r2, #2
 800199e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019a6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <MX_DFSDM1_Init+0xc0>)
 80019da:	f002 f9bd 	bl	8003d58 <HAL_DFSDM_ChannelInit>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80019e4:	f000 fc1c 	bl	8002220 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80019e8:	2201      	movs	r2, #1
 80019ea:	2101      	movs	r1, #1
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_DFSDM1_Init+0xb8>)
 80019ee:	f002 fb4d 	bl	800408c <HAL_DFSDM_FilterConfigRegChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80019f8:	f000 fc12 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000464 	.word	0x20000464
 8001a04:	40016100 	.word	0x40016100
 8001a08:	200004b8 	.word	0x200004b8
 8001a0c:	40016000 	.word	0x40016000

08001a10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <MX_I2C1_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_I2C1_Init+0x7c>)
 8001a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a4c:	f002 ff2c 	bl	80048a8 <HAL_I2C_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a56:	f000 fbe3 	bl	8002220 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a5e:	f002 ffb2 	bl	80049c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a68:	f000 fbda 	bl	8002220 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a70:	f002 fff4 	bl	8004a5c <HAL_I2CEx_ConfigDigitalFilter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 fbd1 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000550 	.word	0x20000550
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	00b03fdb 	.word	0x00b03fdb

08001a90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <MX_I2C3_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <MX_I2C3_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001acc:	f002 feec 	bl	80048a8 <HAL_I2C_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001ad6:	f000 fba3 	bl	8002220 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ade:	f002 ff72 	bl	80049c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 fb9a 	bl	8002220 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001af0:	f002 ffb4 	bl	8004a5c <HAL_I2CEx_ConfigDigitalFilter>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001afa:	f000 fb91 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200005a4 	.word	0x200005a4
 8001b08:	40005c00 	.word	0x40005c00
 8001b0c:	00b03fdb 	.word	0x00b03fdb

08001b10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b2a:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <MX_RTC_Init+0xb4>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b36:	227f      	movs	r2, #127	; 0x7f
 8001b38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b3c:	22ff      	movs	r2, #255	; 0xff
 8001b3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b58:	4819      	ldr	r0, [pc, #100]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b5a:	f006 fefd 	bl	8008958 <HAL_RTC_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001b64:	f000 fb5c 	bl	8002220 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001b84:	f006 ff63 	bl	8008a4e <HAL_RTC_SetTime>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001b8e:	f000 fb47 	bl	8002220 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001b92:	2302      	movs	r3, #2
 8001b94:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8001b96:	2304      	movs	r3, #4
 8001b98:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_RTC_Init+0xb0>)
 8001baa:	f006 ffed 	bl	8008b88 <HAL_RTC_SetDate>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001bb4:	f000 fb34 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200005f8 	.word	0x200005f8
 8001bc4:	40002800 	.word	0x40002800

08001bc8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <MX_SDMMC1_SD_Init+0x40>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001be0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000061c 	.word	0x2000061c
 8001c08:	50062400 	.word	0x50062400

08001c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <MX_SPI1_Init+0x78>)
 8001c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c42:	2218      	movs	r2, #24
 8001c44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c6c:	f008 fdbf 	bl	800a7ee <HAL_SPI_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f000 fad3 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000069c 	.word	0x2000069c
 8001c84:	40013000 	.word	0x40013000

08001c88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <MX_SPI2_Init+0x78>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001ca2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ca6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cbe:	2230      	movs	r2, #48	; 0x30
 8001cc0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_SPI2_Init+0x74>)
 8001ce8:	f008 fd81 	bl	800a7ee <HAL_SPI_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cf2:	f000 fa95 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000700 	.word	0x20000700
 8001d00:	40003800 	.word	0x40003800

08001d04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <MX_SPI3_Init+0x78>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d3a:	2218      	movs	r2, #24
 8001d3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d52:	2207      	movs	r2, #7
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_SPI3_Init+0x74>)
 8001d64:	f008 fd43 	bl	800a7ee <HAL_SPI_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001d6e:	f000 fa57 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000764 	.word	0x20000764
 8001d7c:	40003c00 	.word	0x40003c00

08001d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001da8:	2277      	movs	r2, #119	; 0x77
 8001daa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001dc8:	f009 f92c 	bl	800b024 <HAL_TIM_Base_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001dd2:	f000 fa25 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001de4:	f009 fa94 	bl	800b310 <HAL_TIM_ConfigClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dee:	f000 fa17 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_TIM2_Init+0x98>)
 8001e00:	f009 fcb6 	bl	800b770 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e0a:	f000 fa09 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200007c8 	.word	0x200007c8

08001e1c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_TIM6_Init+0x64>)
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <MX_TIM6_Init+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_TIM6_Init+0x64>)
 8001e34:	2277      	movs	r2, #119	; 0x77
 8001e36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_TIM6_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <MX_TIM6_Init+0x64>)
 8001e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_TIM6_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <MX_TIM6_Init+0x64>)
 8001e4e:	f009 f8e9 	bl	800b024 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e58:	f000 f9e2 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM6_Init+0x64>)
 8001e6a:	f009 fc81 	bl	800b770 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e74:	f000 f9d4 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000814 	.word	0x20000814
 8001e84:	40001000 	.word	0x40001000

08001e88 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_TIM7_Init+0x64>)
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <MX_TIM7_Init+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_TIM7_Init+0x64>)
 8001ea0:	2277      	movs	r2, #119	; 0x77
 8001ea2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_TIM7_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_TIM7_Init+0x64>)
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_TIM7_Init+0x64>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <MX_TIM7_Init+0x64>)
 8001eba:	f009 f8b3 	bl	800b024 <HAL_TIM_Base_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ec4:	f000 f9ac 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_TIM7_Init+0x64>)
 8001ed6:	f009 fc4b 	bl	800b770 <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ee0:	f000 f99e 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000860 	.word	0x20000860
 8001ef0:	40001400 	.word	0x40001400

08001ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_DMA_Init+0x50>)
 8001efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efe:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <MX_DMA_Init+0x50>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6493      	str	r3, [r2, #72]	; 0x48
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_DMA_Init+0x50>)
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_DMA_Init+0x50>)
 8001f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <MX_DMA_Init+0x50>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6493      	str	r3, [r2, #72]	; 0x48
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_DMA_Init+0x50>)
 8001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	200e      	movs	r0, #14
 8001f30:	f001 fedb 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f34:	200e      	movs	r0, #14
 8001f36:	f001 fef4 	bl	8003d22 <HAL_NVIC_EnableIRQ>

}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4ba9      	ldr	r3, [pc, #676]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4aa8      	ldr	r2, [pc, #672]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4ba6      	ldr	r3, [pc, #664]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f76:	4ba3      	ldr	r3, [pc, #652]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4aa2      	ldr	r2, [pc, #648]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f82:	4ba0      	ldr	r3, [pc, #640]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b9d      	ldr	r3, [pc, #628]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a9c      	ldr	r2, [pc, #624]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b9a      	ldr	r3, [pc, #616]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa6:	4b97      	ldr	r3, [pc, #604]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a96      	ldr	r2, [pc, #600]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b94      	ldr	r3, [pc, #592]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b91      	ldr	r3, [pc, #580]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a90      	ldr	r2, [pc, #576]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd6:	4b8b      	ldr	r3, [pc, #556]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a8a      	ldr	r2, [pc, #552]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b88      	ldr	r3, [pc, #544]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fee:	4b85      	ldr	r3, [pc, #532]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	4a84      	ldr	r2, [pc, #528]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8002006:	f004 f819 	bl	800603c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200a:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <MX_GPIO_Init+0x2bc>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a7d      	ldr	r2, [pc, #500]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8002010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <MX_GPIO_Init+0x2bc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202c:	f002 fc24 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8002030:	2201      	movs	r2, #1
 8002032:	f641 4130 	movw	r1, #7216	; 0x1c30
 8002036:	4874      	ldr	r0, [pc, #464]	; (8002208 <MX_GPIO_Init+0x2c0>)
 8002038:	f002 fc1e 	bl	8004878 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	2105      	movs	r1, #5
 8002040:	4872      	ldr	r0, [pc, #456]	; (800220c <MX_GPIO_Init+0x2c4>)
 8002042:	f002 fc19 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800204c:	4870      	ldr	r0, [pc, #448]	; (8002210 <MX_GPIO_Init+0x2c8>)
 800204e:	f002 fc13 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	486d      	ldr	r0, [pc, #436]	; (800220c <MX_GPIO_Init+0x2c4>)
 8002058:	f002 fc0e 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 800205c:	2200      	movs	r2, #0
 800205e:	2110      	movs	r1, #16
 8002060:	486b      	ldr	r0, [pc, #428]	; (8002210 <MX_GPIO_Init+0x2c8>)
 8002062:	f002 fc09 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206c:	4869      	ldr	r0, [pc, #420]	; (8002214 <MX_GPIO_Init+0x2cc>)
 800206e:	f002 fc03 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8002072:	2348      	movs	r3, #72	; 0x48
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002076:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	4619      	mov	r1, r3
 8002086:	4860      	ldr	r0, [pc, #384]	; (8002208 <MX_GPIO_Init+0x2c0>)
 8002088:	f002 fa4c 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800208c:	2360      	movs	r3, #96	; 0x60
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209c:	2307      	movs	r3, #7
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	4619      	mov	r1, r3
 80020a6:	485c      	ldr	r0, [pc, #368]	; (8002218 <MX_GPIO_Init+0x2d0>)
 80020a8:	f002 fa3c 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 80020ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020b2:	2311      	movs	r3, #17
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f002 fa2c 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 80020cc:	2330      	movs	r3, #48	; 0x30
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4849      	ldr	r0, [pc, #292]	; (8002208 <MX_GPIO_Init+0x2c0>)
 80020e4:	f002 fa1e 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 80020e8:	2385      	movs	r3, #133	; 0x85
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4843      	ldr	r0, [pc, #268]	; (800220c <MX_GPIO_Init+0x2c4>)
 8002100:	f002 fa10 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8002104:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210a:	2301      	movs	r3, #1
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	483c      	ldr	r0, [pc, #240]	; (8002210 <MX_GPIO_Init+0x2c8>)
 800211e:	f002 fa01 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 8002122:	2308      	movs	r3, #8
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002132:	4619      	mov	r1, r3
 8002134:	4836      	ldr	r0, [pc, #216]	; (8002210 <MX_GPIO_Init+0x2c8>)
 8002136:	f002 f9f5 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 800213a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002140:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4831      	ldr	r0, [pc, #196]	; (8002218 <MX_GPIO_Init+0x2d0>)
 8002152:	f002 f9e7 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8002156:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800215c:	2311      	movs	r3, #17
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4826      	ldr	r0, [pc, #152]	; (8002208 <MX_GPIO_Init+0x2c0>)
 8002170:	f002 f9d8 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8002174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	2301      	movs	r3, #1
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	4821      	ldr	r0, [pc, #132]	; (8002214 <MX_GPIO_Init+0x2cc>)
 800218e:	f002 f9c9 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8002192:	2320      	movs	r3, #32
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002196:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	481d      	ldr	r0, [pc, #116]	; (800221c <MX_GPIO_Init+0x2d4>)
 80021a8:	f002 f9bc 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 80021ac:	2304      	movs	r3, #4
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c4:	f002 f9ae 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80021c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_GPIO_Init+0x2cc>)
 80021de:	f002 f9a1 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 80021e2:	2302      	movs	r3, #2
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4806      	ldr	r0, [pc, #24]	; (8002210 <MX_GPIO_Init+0x2c8>)
 80021f8:	f002 f994 	bl	8004524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021fc:	bf00      	nop
 80021fe:	3738      	adds	r7, #56	; 0x38
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	48001000 	.word	0x48001000
 800220c:	48001400 	.word	0x48001400
 8002210:	48001800 	.word	0x48001800
 8002214:	48000400 	.word	0x48000400
 8002218:	48000c00 	.word	0x48000c00
 800221c:	48000800 	.word	0x48000800

08002220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002224:	b672      	cpsid	i
}
 8002226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002228:	e7fe      	b.n	8002228 <Error_Handler+0x8>
	...

0800222c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_MspInit+0x44>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_MspInit+0x44>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6613      	str	r3, [r2, #96]	; 0x60
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_MspInit+0x44>)
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_MspInit+0x44>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_MspInit+0x44>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6593      	str	r3, [r2, #88]	; 0x58
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_MspInit+0x44>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0b2      	sub	sp, #200	; 0xc8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	229c      	movs	r2, #156	; 0x9c
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00e fa05 	bl	80106a4 <memset>
  if(hadc->Instance==ADC1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a35      	ldr	r2, [pc, #212]	; (8002374 <HAL_ADC_MspInit+0x100>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d162      	bne.n	800236a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80022aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80022b2:	2303      	movs	r3, #3
 80022b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80022b6:	2305      	movs	r3, #5
 80022b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80022ba:	2360      	movs	r3, #96	; 0x60
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80022be:	2302      	movs	r3, #2
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80022c2:	2304      	movs	r3, #4
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80022c6:	2304      	movs	r3, #4
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80022ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 fd95 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80022e0:	f7ff ff9e 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_ADC_MspInit+0x104>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_ADC_MspInit+0x104>)
 80022ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_ADC_MspInit+0x104>)
 80022f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_ADC_MspInit+0x104>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_ADC_MspInit+0x104>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_ADC_MspInit+0x104>)
 800230a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_ADC_MspInit+0x104>)
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002318:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_ADC_MspInit+0x104>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_ADC_MspInit+0x104>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 800232c:	2310      	movs	r3, #16
 800232e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002332:	230b      	movs	r3, #11
 8002334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002342:	4619      	mov	r1, r3
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <HAL_ADC_MspInit+0x108>)
 8002346:	f002 f8ed 	bl	8004524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 800234a:	2308      	movs	r3, #8
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002350:	230b      	movs	r3, #11
 8002352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002360:	4619      	mov	r1, r3
 8002362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002366:	f002 f8dd 	bl	8004524 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	37c8      	adds	r7, #200	; 0xc8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	50040000 	.word	0x50040000
 8002378:	40021000 	.word	0x40021000
 800237c:	48000800 	.word	0x48000800

08002380 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0aa      	sub	sp, #168	; 0xa8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	229c      	movs	r2, #156	; 0x9c
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f00e f987 	bl	80106a4 <memset>
  if(DFSDM1_Init == 0)
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d129      	bne.n	80023f2 <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800239e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 fd28 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 80023ba:	f7ff ff31 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80023be:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_DFSDM_FilterMspInit+0xec>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_DFSDM_FilterMspInit+0xec>)
 80023c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_DFSDM_FilterMspInit+0xec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10b      	bne.n	80023e8 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_DFSDM_FilterMspInit+0xf0>)
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_DFSDM_FilterMspInit+0xf0>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	6613      	str	r3, [r2, #96]	; 0x60
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_DFSDM_FilterMspInit+0xf0>)
 80023de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_DFSDM_FilterMspInit+0xe8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_DFSDM_FilterMspInit+0xe8>)
 80023f0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_DFSDM_FilterMspInit+0xf4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d131      	bne.n	8002460 <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 80023fe:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_DFSDM_FilterMspInit+0xfc>)
 8002400:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 8002404:	2256      	movs	r2, #86	; 0x56
 8002406:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 800241c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002420:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 8002424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002428:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 800242c:	2220      	movs	r2, #32
 800242e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 8002432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002436:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 800243a:	f001 feb9 	bl	80041b0 <HAL_DMA_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8002444:	f7ff feec 	bl	8002220 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
 800245a:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_DFSDM_FilterMspInit+0xf8>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8002460:	bf00      	nop
 8002462:	37a8      	adds	r7, #168	; 0xa8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200008b0 	.word	0x200008b0
 800246c:	200008ac 	.word	0x200008ac
 8002470:	40021000 	.word	0x40021000
 8002474:	40016100 	.word	0x40016100
 8002478:	200004f0 	.word	0x200004f0
 800247c:	40020044 	.word	0x40020044

08002480 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0aa      	sub	sp, #168	; 0xa8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	229c      	movs	r2, #156	; 0x9c
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f00e f907 	bl	80106a4 <memset>
  if(DFSDM1_Init == 0)
 8002496:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_DFSDM_ChannelMspInit+0x7c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d129      	bne.n	80024f2 <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800249e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fca8 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 80024ba:	f7ff feb1 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_DFSDM_ChannelMspInit+0x80>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_DFSDM_ChannelMspInit+0x80>)
 80024c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_DFSDM_ChannelMspInit+0x80>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10b      	bne.n	80024e8 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x84>)
 80024d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x84>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	6613      	str	r3, [r2, #96]	; 0x60
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x84>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <HAL_DFSDM_ChannelMspInit+0x7c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	4a03      	ldr	r2, [pc, #12]	; (80024fc <HAL_DFSDM_ChannelMspInit+0x7c>)
 80024f0:	6013      	str	r3, [r2, #0]
  }

}
 80024f2:	bf00      	nop
 80024f4:	37a8      	adds	r7, #168	; 0xa8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200008b0 	.word	0x200008b0
 8002500:	200008ac 	.word	0x200008ac
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0b2      	sub	sp, #200	; 0xc8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	f107 0318 	add.w	r3, r7, #24
 8002524:	229c      	movs	r2, #156	; 0x9c
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f00e f8bb 	bl	80106a4 <memset>
  if(hi2c->Instance==I2C1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a43      	ldr	r2, [pc, #268]	; (8002640 <HAL_I2C_MspInit+0x138>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d13b      	bne.n	80025b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002538:	2340      	movs	r3, #64	; 0x40
 800253a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800253c:	2300      	movs	r3, #0
 800253e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002540:	f107 0318 	add.w	r3, r7, #24
 8002544:	4618      	mov	r0, r3
 8002546:	f004 fc5d 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002550:	f7ff fe66 	bl	8002220 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 800256c:	23c0      	movs	r3, #192	; 0xc0
 800256e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002572:	2312      	movs	r3, #18
 8002574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002578:	2301      	movs	r3, #1
 800257a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002584:	2304      	movs	r3, #4
 8002586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800258e:	4619      	mov	r1, r3
 8002590:	482d      	ldr	r0, [pc, #180]	; (8002648 <HAL_I2C_MspInit+0x140>)
 8002592:	f001 ffc7 	bl	8004524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 800259c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025a0:	6593      	str	r3, [r2, #88]	; 0x58
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025ae:	e043      	b.n	8002638 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <HAL_I2C_MspInit+0x144>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d13e      	bne.n	8002638 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80025ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c4:	f107 0318 	add.w	r3, r7, #24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fc1b 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80025d4:	f7ff fe24 	bl	8002220 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 80025de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80025f0:	f003 fd24 	bl	800603c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 80025f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025fc:	2312      	movs	r3, #18
 80025fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002602:	2301      	movs	r3, #1
 8002604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800260e:	2304      	movs	r3, #4
 8002610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002614:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002618:	4619      	mov	r1, r3
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <HAL_I2C_MspInit+0x148>)
 800261c:	f001 ff82 	bl	8004524 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 8002626:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800262a:	6593      	str	r3, [r2, #88]	; 0x58
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_I2C_MspInit+0x13c>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
}
 8002638:	bf00      	nop
 800263a:	37c8      	adds	r7, #200	; 0xc8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40005400 	.word	0x40005400
 8002644:	40021000 	.word	0x40021000
 8002648:	48000400 	.word	0x48000400
 800264c:	40005c00 	.word	0x40005c00
 8002650:	48001800 	.word	0x48001800

08002654 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0aa      	sub	sp, #168	; 0xa8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	229c      	movs	r2, #156	; 0x9c
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f00e f81d 	bl	80106a4 <memset>
  if(hrtc->Instance==RTC)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <HAL_RTC_MspInit+0x5c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d118      	bne.n	80026a6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002678:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800267a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fbbc 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002692:	f7ff fdc5 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_RTC_MspInit+0x60>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <HAL_RTC_MspInit+0x60>)
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	37a8      	adds	r7, #168	; 0xa8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40002800 	.word	0x40002800
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b0b2      	sub	sp, #200	; 0xc8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026d0:	f107 0318 	add.w	r3, r7, #24
 80026d4:	229c      	movs	r2, #156	; 0x9c
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f00d ffe3 	bl	80106a4 <memset>
  if(hsd->Instance==SDMMC1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a53      	ldr	r2, [pc, #332]	; (8002830 <HAL_SD_MspInit+0x178>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	f040 809f 	bne.w	8002828 <HAL_SD_MspInit+0x170>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80026ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80026ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80026f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f8:	f107 0318 	add.w	r3, r7, #24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fb81 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002708:	f7ff fd8a 	bl	8002220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800270c:	4b49      	ldr	r3, [pc, #292]	; (8002834 <HAL_SD_MspInit+0x17c>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a48      	ldr	r2, [pc, #288]	; (8002834 <HAL_SD_MspInit+0x17c>)
 8002712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b46      	ldr	r3, [pc, #280]	; (8002834 <HAL_SD_MspInit+0x17c>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_SD_MspInit+0x17c>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	4a42      	ldr	r2, [pc, #264]	; (8002834 <HAL_SD_MspInit+0x17c>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002730:	4b40      	ldr	r3, [pc, #256]	; (8002834 <HAL_SD_MspInit+0x17c>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <HAL_SD_MspInit+0x17c>)
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	4a3c      	ldr	r2, [pc, #240]	; (8002834 <HAL_SD_MspInit+0x17c>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <HAL_SD_MspInit+0x17c>)
 800274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002754:	4b37      	ldr	r3, [pc, #220]	; (8002834 <HAL_SD_MspInit+0x17c>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	4a36      	ldr	r2, [pc, #216]	; (8002834 <HAL_SD_MspInit+0x17c>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_SD_MspInit+0x17c>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 800276c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8002786:	2308      	movs	r3, #8
 8002788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002790:	4619      	mov	r1, r3
 8002792:	4829      	ldr	r0, [pc, #164]	; (8002838 <HAL_SD_MspInit+0x180>)
 8002794:	f001 fec6 	bl	8004524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8002798:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80027b2:	230c      	movs	r3, #12
 80027b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027bc:	4619      	mov	r1, r3
 80027be:	481f      	ldr	r0, [pc, #124]	; (800283c <HAL_SD_MspInit+0x184>)
 80027c0:	f001 feb0 	bl	8004524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 80027c4:	2304      	movs	r3, #4
 80027c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80027dc:	230c      	movs	r3, #12
 80027de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 80027e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4815      	ldr	r0, [pc, #84]	; (8002840 <HAL_SD_MspInit+0x188>)
 80027ea:	f001 fe9b 	bl	8004524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 80027ee:	23c0      	movs	r3, #192	; 0xc0
 80027f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8002806:	2308      	movs	r3, #8
 8002808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002810:	4619      	mov	r1, r3
 8002812:	480a      	ldr	r0, [pc, #40]	; (800283c <HAL_SD_MspInit+0x184>)
 8002814:	f001 fe86 	bl	8004524 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	2031      	movs	r0, #49	; 0x31
 800281e:	f001 fa64 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002822:	2031      	movs	r0, #49	; 0x31
 8002824:	f001 fa7d 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	37c8      	adds	r7, #200	; 0xc8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	50062400 	.word	0x50062400
 8002834:	40021000 	.word	0x40021000
 8002838:	48000400 	.word	0x48000400
 800283c:	48000800 	.word	0x48000800
 8002840:	48000c00 	.word	0x48000c00

08002844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08e      	sub	sp, #56	; 0x38
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a64      	ldr	r2, [pc, #400]	; (80029f4 <HAL_SPI_MspInit+0x1b0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d13a      	bne.n	80028dc <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002866:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 800286c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002870:	6613      	str	r3, [r2, #96]	; 0x60
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800287e:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	4a5d      	ldr	r2, [pc, #372]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002884:	f043 0310 	orr.w	r3, r3, #16
 8002888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8002896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a8:	2305      	movs	r3, #5
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4852      	ldr	r0, [pc, #328]	; (80029fc <HAL_SPI_MspInit+0x1b8>)
 80028b4:	f001 fe36 	bl	8004524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 80028b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ca:	2305      	movs	r3, #5
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	4619      	mov	r1, r3
 80028d4:	4849      	ldr	r0, [pc, #292]	; (80029fc <HAL_SPI_MspInit+0x1b8>)
 80028d6:	f001 fe25 	bl	8004524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028da:	e086      	b.n	80029ea <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <HAL_SPI_MspInit+0x1bc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d144      	bne.n	8002970 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e6:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	4a43      	ldr	r2, [pc, #268]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f0:	6593      	str	r3, [r2, #88]	; 0x58
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002916:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 800292e:	230a      	movs	r3, #10
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800293e:	2305      	movs	r3, #5
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002946:	4619      	mov	r1, r3
 8002948:	482e      	ldr	r0, [pc, #184]	; (8002a04 <HAL_SPI_MspInit+0x1c0>)
 800294a:	f001 fdeb 	bl	8004524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800294e:	2308      	movs	r3, #8
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295a:	2303      	movs	r3, #3
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800295e:	2305      	movs	r3, #5
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002966:	4619      	mov	r1, r3
 8002968:	4827      	ldr	r0, [pc, #156]	; (8002a08 <HAL_SPI_MspInit+0x1c4>)
 800296a:	f001 fddb 	bl	8004524 <HAL_GPIO_Init>
}
 800296e:	e03c      	b.n	80029ea <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <HAL_SPI_MspInit+0x1c8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d137      	bne.n	80029ea <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002984:	6593      	str	r3, [r2, #88]	; 0x58
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_SPI_MspInit+0x1b4>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 80029aa:	2330      	movs	r3, #48	; 0x30
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029ba:	2306      	movs	r3, #6
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c2:	4619      	mov	r1, r3
 80029c4:	4812      	ldr	r0, [pc, #72]	; (8002a10 <HAL_SPI_MspInit+0x1cc>)
 80029c6:	f001 fdad 	bl	8004524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 80029ca:	2308      	movs	r3, #8
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029da:	2306      	movs	r3, #6
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e2:	4619      	mov	r1, r3
 80029e4:	480a      	ldr	r0, [pc, #40]	; (8002a10 <HAL_SPI_MspInit+0x1cc>)
 80029e6:	f001 fd9d 	bl	8004524 <HAL_GPIO_Init>
}
 80029ea:	bf00      	nop
 80029ec:	3738      	adds	r7, #56	; 0x38
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40013000 	.word	0x40013000
 80029f8:	40021000 	.word	0x40021000
 80029fc:	48001000 	.word	0x48001000
 8002a00:	40003800 	.word	0x40003800
 8002a04:	48000c00 	.word	0x48000c00
 8002a08:	48000800 	.word	0x48000800
 8002a0c:	40003c00 	.word	0x40003c00
 8002a10:	48000400 	.word	0x48000400

08002a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d10c      	bne.n	8002a40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a3e:	e02a      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_TIM_Base_MspInit+0x90>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d114      	bne.n	8002a74 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a50:	f043 0310 	orr.w	r3, r3, #16
 8002a54:	6593      	str	r3, [r2, #88]	; 0x58
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2036      	movs	r0, #54	; 0x36
 8002a68:	f001 f93f 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a6c:	2036      	movs	r0, #54	; 0x36
 8002a6e:	f001 f958 	bl	8003d22 <HAL_NVIC_EnableIRQ>
}
 8002a72:	e010      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_TIM_Base_MspInit+0x94>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a84:	f043 0320 	orr.w	r3, r3, #32
 8002a88:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_TIM_Base_MspInit+0x8c>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40001000 	.word	0x40001000
 8002aa8:	40001400 	.word	0x40001400

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <HardFault_Handler+0x4>

08002ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <MemManage_Handler+0x4>

08002abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <BusFault_Handler+0x4>

08002ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <UsageFault_Handler+0x4>

08002aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af8:	f000 f8f0 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <DMA1_Channel4_IRQHandler+0x10>)
 8002b06:	f001 fbfb 	bl	8004300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200004f0 	.word	0x200004f0

08002b14 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <SDMMC1_IRQHandler+0x10>)
 8002b1a:	f006 fbeb 	bl	80092f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000061c 	.word	0x2000061c

08002b28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <TIM6_DAC_IRQHandler+0x10>)
 8002b2e:	f008 fad0 	bl	800b0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000814 	.word	0x20000814

08002b3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <OTG_FS_IRQHandler+0x10>)
 8002b42:	f002 f92a 	bl	8004d9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20001dd0 	.word	0x20001dd0

08002b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <_sbrk+0x5c>)
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <_sbrk+0x60>)
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <_sbrk+0x64>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <_sbrk+0x68>)
 8002b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <_sbrk+0x64>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d207      	bcs.n	8002b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b80:	f00d fd66 	bl	8010650 <__errno>
 8002b84:	4603      	mov	r3, r0
 8002b86:	220c      	movs	r2, #12
 8002b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	e009      	b.n	8002ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <_sbrk+0x64>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <_sbrk+0x64>)
 8002ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	200a0000 	.word	0x200a0000
 8002bb0:	00000400 	.word	0x00000400
 8002bb4:	200008b4 	.word	0x200008b4
 8002bb8:	20002510 	.word	0x20002510

08002bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <SystemInit+0x20>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <SystemInit+0x20>)
 8002bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002be4:	f7ff ffea 	bl	8002bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be8:	480c      	ldr	r0, [pc, #48]	; (8002c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002bea:	490d      	ldr	r1, [pc, #52]	; (8002c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <LoopForever+0xe>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf0:	e002      	b.n	8002bf8 <LoopCopyDataInit>

08002bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf6:	3304      	adds	r3, #4

08002bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bfc:	d3f9      	bcc.n	8002bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c00:	4c0a      	ldr	r4, [pc, #40]	; (8002c2c <LoopForever+0x16>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c04:	e001      	b.n	8002c0a <LoopFillZerobss>

08002c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c08:	3204      	adds	r2, #4

08002c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c0c:	d3fb      	bcc.n	8002c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f00d fd25 	bl	801065c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c12:	f7fe fb49 	bl	80012a8 <main>

08002c16 <LoopForever>:

LoopForever:
    b LoopForever
 8002c16:	e7fe      	b.n	8002c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c18:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c20:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002c24:	08011bf4 	.word	0x08011bf4
  ldr r2, =_sbss
 8002c28:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002c2c:	2000250c 	.word	0x2000250c

08002c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <ADC1_IRQHandler>

08002c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f001 f849 	bl	8003cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f80e 	bl	8002c64 <HAL_InitTick>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	e001      	b.n	8002c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c54:	f7ff faea 	bl	800222c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c58:	79fb      	ldrb	r3, [r7, #7]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_InitTick+0x6c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_InitTick+0x70>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_InitTick+0x6c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 f855 	bl	8003d3e <HAL_SYSTICK_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d809      	bhi.n	8002cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f001 f81f 	bl	8003cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cac:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <HAL_InitTick+0x74>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e007      	b.n	8002cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e004      	b.n	8002cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e001      	b.n	8002cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000028 	.word	0x20000028
 8002cd4:	20000020 	.word	0x20000020
 8002cd8:	20000024 	.word	0x20000024

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000028 	.word	0x20000028
 8002d00:	200008b8 	.word	0x200008b8

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	200008b8 	.word	0x200008b8

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000028 	.word	0x20000028

08002d64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <LL_ADC_SetOffset+0x44>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	03fff000 	.word	0x03fff000

08002e14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3360      	adds	r3, #96	; 0x60
 8002e22:	461a      	mov	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3360      	adds	r3, #96	; 0x60
 8002e50:	461a      	mov	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	615a      	str	r2, [r3, #20]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3330      	adds	r3, #48	; 0x30
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	4413      	add	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	211f      	movs	r1, #31
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	f003 011f 	and.w	r1, r3, #31
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3314      	adds	r3, #20
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	0e5b      	lsrs	r3, r3, #25
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	4413      	add	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	0d1b      	lsrs	r3, r3, #20
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2107      	movs	r1, #7
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	401a      	ands	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	0d1b      	lsrs	r3, r3, #20
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0318 	and.w	r3, r3, #24
 8002f6e:	4908      	ldr	r1, [pc, #32]	; (8002f90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f70:	40d9      	lsrs	r1, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	400b      	ands	r3, r1
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	0007ffff 	.word	0x0007ffff

08002f94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6093      	str	r3, [r2, #8]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800301c:	d101      	bne.n	8003022 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <LL_ADC_IsEnabled+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_ADC_IsEnabled+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d101      	bne.n	800306e <LL_ADC_REG_IsConversionOngoing+0x18>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b08      	cmp	r3, #8
 800308e:	d101      	bne.n	8003094 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e12f      	b.n	800331e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff f8d1 	bl	8002274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff67 	bl	8002fb8 <LL_ADC_IsDeepPowerDownEnabled>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff4d 	bl	8002f94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ff82 	bl	8003008 <LL_ADC_IsInternalRegulatorEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d115      	bne.n	8003136 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff66 	bl	8002fe0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003114:	4b84      	ldr	r3, [pc, #528]	; (8003328 <HAL_ADC_Init+0x284>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	4a84      	ldr	r2, [pc, #528]	; (800332c <HAL_ADC_Init+0x288>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	3301      	adds	r3, #1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003128:	e002      	b.n	8003130 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3b01      	subs	r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f9      	bne.n	800312a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ff64 	bl	8003008 <LL_ADC_IsInternalRegulatorEnabled>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314a:	f043 0210 	orr.w	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff75 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 800316c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80c8 	bne.w	800330c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 80c4 	bne.w	800330c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800318c:	f043 0202 	orr.w	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff49 	bl	8003030 <LL_ADC_IsEnabled>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031a4:	4862      	ldr	r0, [pc, #392]	; (8003330 <HAL_ADC_Init+0x28c>)
 80031a6:	f7ff ff43 	bl	8003030 <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4619      	mov	r1, r3
 80031b6:	485f      	ldr	r0, [pc, #380]	; (8003334 <HAL_ADC_Init+0x290>)
 80031b8:	f7ff fdd4 	bl	8002d64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7e5b      	ldrb	r3, [r3, #25]
 80031c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d106      	bne.n	80031f8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	3b01      	subs	r3, #1
 80031f0:	045b      	lsls	r3, r3, #17
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_ADC_Init+0x294>)
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	430b      	orrs	r3, r1
 8003226:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff12 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 8003232:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff1f 	bl	800307c <LL_ADC_INJ_IsConversionOngoing>
 800323e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d140      	bne.n	80032c8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d13d      	bne.n	80032c8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7e1b      	ldrb	r3, [r3, #24]
 8003254:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003256:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800325e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800326e:	f023 0306 	bic.w	r3, r3, #6
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	430b      	orrs	r3, r1
 800327a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003282:	2b01      	cmp	r3, #1
 8003284:	d118      	bne.n	80032b8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032a8:	430a      	orrs	r2, r1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	e007      	b.n	80032c8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10c      	bne.n	80032ea <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f023 010f 	bic.w	r1, r3, #15
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	1e5a      	subs	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
 80032e8:	e007      	b.n	80032fa <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 020f 	bic.w	r2, r2, #15
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	; 0x58
 800330a:	e007      	b.n	800331c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f043 0210 	orr.w	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800331c:	7ffb      	ldrb	r3, [r7, #31]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000020 	.word	0x20000020
 800332c:	053e2d63 	.word	0x053e2d63
 8003330:	50040000 	.word	0x50040000
 8003334:	50040300 	.word	0x50040300
 8003338:	fff0c007 	.word	0xfff0c007

0800333c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0b6      	sub	sp, #216	; 0xd8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x22>
 800335a:	2302      	movs	r3, #2
 800335c:	e3d5      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x7ce>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fe73 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 83ba 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d824      	bhi.n	80033ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	3b02      	subs	r3, #2
 8003386:	2b03      	cmp	r3, #3
 8003388:	d81b      	bhi.n	80033c2 <HAL_ADC_ConfigChannel+0x86>
 800338a:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <HAL_ADC_ConfigChannel+0x54>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033a9 	.word	0x080033a9
 8003398:	080033b1 	.word	0x080033b1
 800339c:	080033b9 	.word	0x080033b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	220c      	movs	r2, #12
 80033a4:	605a      	str	r2, [r3, #4]
          break;
 80033a6:	e011      	b.n	80033cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2212      	movs	r2, #18
 80033ac:	605a      	str	r2, [r3, #4]
          break;
 80033ae:	e00d      	b.n	80033cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2218      	movs	r2, #24
 80033b4:	605a      	str	r2, [r3, #4]
          break;
 80033b6:	e009      	b.n	80033cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033be:	605a      	str	r2, [r3, #4]
          break;
 80033c0:	e004      	b.n	80033cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2206      	movs	r2, #6
 80033c6:	605a      	str	r2, [r3, #4]
          break;
 80033c8:	e000      	b.n	80033cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80033ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	f7ff fd5f 	bl	8002e9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe37 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 80033e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fe43 	bl	800307c <LL_ADC_INJ_IsConversionOngoing>
 80033f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 81c1 	bne.w	8003786 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 81bc 	bne.w	8003786 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003416:	d10f      	bne.n	8003438 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2200      	movs	r2, #0
 8003422:	4619      	mov	r1, r3
 8003424:	f7ff fd66 	bl	8002ef4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fd20 	bl	8002e76 <LL_ADC_SetSamplingTimeCommonConfig>
 8003436:	e00e      	b.n	8003456 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	461a      	mov	r2, r3
 8003446:	f7ff fd55 	bl	8002ef4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fd10 	bl	8002e76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	08db      	lsrs	r3, r3, #3
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d00a      	beq.n	800348e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6919      	ldr	r1, [r3, #16]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003488:	f7ff fca0 	bl	8002dcc <LL_ADC_SetOffset>
 800348c:	e17b      	b.n	8003786 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fcbd 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x17e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fcb2 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	0e9b      	lsrs	r3, r3, #26
 80034b4:	f003 021f 	and.w	r2, r3, #31
 80034b8:	e01e      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x1bc>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fca7 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80034e8:	2320      	movs	r3, #32
 80034ea:	e004      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80034ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1d4>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	e018      	b.n	8003542 <HAL_ADC_ConfigChannel+0x206>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800352c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003534:	2320      	movs	r3, #32
 8003536:	e004      	b.n	8003542 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003542:	429a      	cmp	r2, r3
 8003544:	d106      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fc76 	bl	8002e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fc5a 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x244>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fc4f 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	f003 021f 	and.w	r2, r3, #31
 800357e:	e01e      	b.n	80035be <HAL_ADC_ConfigChannel+0x282>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fc44 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 800358c:	4603      	mov	r3, r0
 800358e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800359e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80035ae:	2320      	movs	r3, #32
 80035b0:	e004      	b.n	80035bc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80035b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x29a>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	e018      	b.n	8003608 <HAL_ADC_ConfigChannel+0x2cc>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80035f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80035fa:	2320      	movs	r3, #32
 80035fc:	e004      	b.n	8003608 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80035fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003608:	429a      	cmp	r2, r3
 800360a:	d106      	bne.n	800361a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fc13 	bl	8002e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2102      	movs	r1, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fbf7 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003626:	4603      	mov	r3, r0
 8003628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x30a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2102      	movs	r1, #2
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fbec 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 800363c:	4603      	mov	r3, r0
 800363e:	0e9b      	lsrs	r3, r3, #26
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	e01e      	b.n	8003684 <HAL_ADC_ConfigChannel+0x348>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fbe1 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800366c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e004      	b.n	8003682 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_ADC_ConfigChannel+0x360>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	e016      	b.n	80036ca <HAL_ADC_ConfigChannel+0x38e>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80036bc:	2320      	movs	r3, #32
 80036be:	e004      	b.n	80036ca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80036c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d106      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	2102      	movs	r1, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fbb2 	bl	8002e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2103      	movs	r1, #3
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fb96 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x3cc>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2103      	movs	r1, #3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fb8b 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	0e9b      	lsrs	r3, r3, #26
 8003702:	f003 021f 	and.w	r2, r3, #31
 8003706:	e017      	b.n	8003738 <HAL_ADC_ConfigChannel+0x3fc>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2103      	movs	r1, #3
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fb80 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003722:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800372e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x414>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	e011      	b.n	8003774 <HAL_ADC_ConfigChannel+0x438>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800375e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003760:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003774:	429a      	cmp	r2, r3
 8003776:	d106      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	2103      	movs	r1, #3
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fb5d 	bl	8002e40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fc50 	bl	8003030 <LL_ADC_IsEnabled>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 8140 	bne.w	8003a18 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	461a      	mov	r2, r3
 80037a6:	f7ff fbd1 	bl	8002f4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4a8f      	ldr	r2, [pc, #572]	; (80039ec <HAL_ADC_ConfigChannel+0x6b0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	f040 8131 	bne.w	8003a18 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <HAL_ADC_ConfigChannel+0x4a2>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	0e9b      	lsrs	r3, r3, #26
 80037cc:	3301      	adds	r3, #1
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	bf94      	ite	ls
 80037d6:	2301      	movls	r3, #1
 80037d8:	2300      	movhi	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e019      	b.n	8003812 <HAL_ADC_ConfigChannel+0x4d6>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80037f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80037f6:	2320      	movs	r3, #32
 80037f8:	e003      	b.n	8003802 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80037fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2b09      	cmp	r3, #9
 800380a:	bf94      	ite	ls
 800380c:	2301      	movls	r3, #1
 800380e:	2300      	movhi	r3, #0
 8003810:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003812:	2b00      	cmp	r3, #0
 8003814:	d079      	beq.n	800390a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x4f6>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	3301      	adds	r3, #1
 800382a:	069b      	lsls	r3, r3, #26
 800382c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003830:	e015      	b.n	800385e <HAL_ADC_ConfigChannel+0x522>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003842:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e003      	b.n	8003856 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800384e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	3301      	adds	r3, #1
 8003858:	069b      	lsls	r3, r3, #26
 800385a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_ADC_ConfigChannel+0x542>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	0e9b      	lsrs	r3, r3, #26
 8003870:	3301      	adds	r3, #1
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2101      	movs	r1, #1
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	e017      	b.n	80038ae <HAL_ADC_ConfigChannel+0x572>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003896:	2320      	movs	r3, #32
 8003898:	e003      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	ea42 0103 	orr.w	r1, r2, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x598>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0e9b      	lsrs	r3, r3, #26
 80038c4:	3301      	adds	r3, #1
 80038c6:	f003 021f 	and.w	r2, r3, #31
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	051b      	lsls	r3, r3, #20
 80038d2:	e018      	b.n	8003906 <HAL_ADC_ConfigChannel+0x5ca>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80038ec:	2320      	movs	r3, #32
 80038ee:	e003      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	f003 021f 	and.w	r2, r3, #31
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003906:	430b      	orrs	r3, r1
 8003908:	e081      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x5ea>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0e9b      	lsrs	r3, r3, #26
 800391c:	3301      	adds	r3, #1
 800391e:	069b      	lsls	r3, r3, #26
 8003920:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003924:	e015      	b.n	8003952 <HAL_ADC_ConfigChannel+0x616>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800393e:	2320      	movs	r3, #32
 8003940:	e003      	b.n	800394a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	fab3 f383 	clz	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3301      	adds	r3, #1
 800394c:	069b      	lsls	r3, r3, #26
 800394e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x636>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	0e9b      	lsrs	r3, r3, #26
 8003964:	3301      	adds	r3, #1
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	e017      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x666>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	61fb      	str	r3, [r7, #28]
  return result;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800398a:	2320      	movs	r3, #32
 800398c:	e003      	b.n	8003996 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	ea42 0103 	orr.w	r1, r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x692>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	0e9b      	lsrs	r3, r3, #26
 80039b8:	3301      	adds	r3, #1
 80039ba:	f003 021f 	and.w	r2, r3, #31
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	3b1e      	subs	r3, #30
 80039c6:	051b      	lsls	r3, r3, #20
 80039c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039cc:	e01e      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x6d0>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	613b      	str	r3, [r7, #16]
  return result;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80039e6:	2320      	movs	r3, #32
 80039e8:	e006      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x6bc>
 80039ea:	bf00      	nop
 80039ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	3b1e      	subs	r3, #30
 8003a06:	051b      	lsls	r3, r3, #20
 8003a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	6892      	ldr	r2, [r2, #8]
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7ff fa6e 	bl	8002ef4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d06c      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a24:	483c      	ldr	r0, [pc, #240]	; (8003b18 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a26:	f7ff f9c3 	bl	8002db0 <LL_ADC_GetCommonPathInternalCh>
 8003a2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <HAL_ADC_ConfigChannel+0x7e0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d127      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d121      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a35      	ldr	r2, [pc, #212]	; (8003b20 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d157      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a56:	4619      	mov	r1, r3
 8003a58:	482f      	ldr	r0, [pc, #188]	; (8003b18 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a5a:	f7ff f996 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_ADC_ConfigChannel+0x7e8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	099b      	lsrs	r3, r3, #6
 8003a64:	4a30      	ldr	r2, [pc, #192]	; (8003b28 <HAL_ADC_ConfigChannel+0x7ec>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a78:	e002      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f9      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a86:	e03a      	b.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <HAL_ADC_ConfigChannel+0x7f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d113      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x77e>
 8003a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_ADC_ConfigChannel+0x7e4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d12a      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4819      	ldr	r0, [pc, #100]	; (8003b18 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ab4:	f7ff f969 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ab8:	e021      	b.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_ADC_ConfigChannel+0x7f4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d11c      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d116      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_ADC_ConfigChannel+0x7e4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d111      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ade:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	480c      	ldr	r0, [pc, #48]	; (8003b18 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ae6:	f7ff f950 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
 8003aea:	e008      	b.n	8003afe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003b06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	37d8      	adds	r7, #216	; 0xd8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	80080000 	.word	0x80080000
 8003b18:	50040300 	.word	0x50040300
 8003b1c:	c7520000 	.word	0xc7520000
 8003b20:	50040000 	.word	0x50040000
 8003b24:	20000020 	.word	0x20000020
 8003b28:	053e2d63 	.word	0x053e2d63
 8003b2c:	cb840000 	.word	0xcb840000
 8003b30:	80000001 	.word	0x80000001

08003b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	60d3      	str	r3, [r2, #12]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <__NVIC_GetPriorityGrouping+0x18>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0307 	and.w	r3, r3, #7
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	db0b      	blt.n	8003bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <__NVIC_EnableIRQ+0x38>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2001      	movs	r0, #1
 8003bba:	fa00 f202 	lsl.w	r2, r0, r2
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100

08003bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db0a      	blt.n	8003bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	490c      	ldr	r1, [pc, #48]	; (8003c20 <__NVIC_SetPriority+0x4c>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bfc:	e00a      	b.n	8003c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4908      	ldr	r1, [pc, #32]	; (8003c24 <__NVIC_SetPriority+0x50>)
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	0112      	lsls	r2, r2, #4
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	440b      	add	r3, r1
 8003c12:	761a      	strb	r2, [r3, #24]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000e100 	.word	0xe000e100
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f1c3 0307 	rsb	r3, r3, #7
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	bf28      	it	cs
 8003c46:	2304      	movcs	r3, #4
 8003c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d902      	bls.n	8003c58 <NVIC_EncodePriority+0x30>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3b03      	subs	r3, #3
 8003c56:	e000      	b.n	8003c5a <NVIC_EncodePriority+0x32>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c70:	f04f 31ff 	mov.w	r1, #4294967295
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	43d9      	mvns	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	4313      	orrs	r3, r2
         );
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca0:	d301      	bcc.n	8003ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00f      	b.n	8003cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <SysTick_Config+0x40>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cae:	210f      	movs	r1, #15
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	f7ff ff8e 	bl	8003bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <SysTick_Config+0x40>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <SysTick_Config+0x40>)
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000e010 	.word	0xe000e010

08003cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff29 	bl	8003b34 <__NVIC_SetPriorityGrouping>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cfc:	f7ff ff3e 	bl	8003b7c <__NVIC_GetPriorityGrouping>
 8003d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f7ff ff8e 	bl	8003c28 <NVIC_EncodePriority>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff5d 	bl	8003bd4 <__NVIC_SetPriority>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff31 	bl	8003b98 <__NVIC_EnableIRQ>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ffa2 	bl	8003c90 <SysTick_Config>
 8003d4c:	4603      	mov	r3, r0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0ac      	b.n	8003ec4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f9d2 	bl	8004118 <DFSDM_GetChannelFromInstance>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4a55      	ldr	r2, [pc, #340]	; (8003ecc <HAL_DFSDM_ChannelInit+0x174>)
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e09f      	b.n	8003ec4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fe fb7b 	bl	8002480 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_DFSDM_ChannelInit+0x178>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	4a4f      	ldr	r2, [pc, #316]	; (8003ed0 <HAL_DFSDM_ChannelInit+0x178>)
 8003d92:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003d94:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <HAL_DFSDM_ChannelInit+0x178>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d125      	bne.n	8003de8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003d9c:	4b4d      	ldr	r3, [pc, #308]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a4c      	ldr	r2, [pc, #304]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003da2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003da6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003da8:	4b4a      	ldr	r3, [pc, #296]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4948      	ldr	r1, [pc, #288]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a46      	ldr	r2, [pc, #280]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003dbc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	791b      	ldrb	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d108      	bne.n	8003ddc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003dca:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	493f      	ldr	r1, [pc, #252]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003ddc:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003de6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003df6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003e06:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003e0c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 020f 	bic.w	r2, r2, #15
 8003e24:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003e4c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 0207 	and.w	r2, r2, #7
 8003e78:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f930 	bl	8004118 <DFSDM_GetChannelFromInstance>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4904      	ldr	r1, [pc, #16]	; (8003ecc <HAL_DFSDM_ChannelInit+0x174>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200008c0 	.word	0x200008c0
 8003ed0:	200008bc 	.word	0x200008bc
 8003ed4:	40016000 	.word	0x40016000

08003ed8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0ca      	b.n	8004080 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a66      	ldr	r2, [pc, #408]	; (8004088 <HAL_DFSDM_FilterInit+0x1b0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d003      	beq.n	8003f04 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0bb      	b.n	8004080 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fe fa2d 	bl	8002380 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003f34:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7a1b      	ldrb	r3, [r3, #8]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d108      	bne.n	8003f50 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e007      	b.n	8003f60 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7a5b      	ldrb	r3, [r3, #9]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d108      	bne.n	8003f7a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e007      	b.n	8003f8a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f98:	f023 0308 	bic.w	r3, r3, #8
 8003f9c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d108      	bne.n	8003fb8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	7c1b      	ldrb	r3, [r3, #16]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d108      	bne.n	8003fd2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0210 	orr.w	r2, r2, #16
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e007      	b.n	8003fe2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0210 	bic.w	r2, r2, #16
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7c5b      	ldrb	r3, [r3, #17]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d108      	bne.n	8003ffc <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0220 	orr.w	r2, r2, #32
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e007      	b.n	800400c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0220 	bic.w	r2, r2, #32
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800401a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800401e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6959      	ldr	r1, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	3b01      	subs	r3, #1
 8004030:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004032:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800403a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7c1a      	ldrb	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40016100 	.word	0x40016100

0800408c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02e      	beq.n	8004104 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80040ac:	2bff      	cmp	r3, #255	; 0xff
 80040ae:	d029      	beq.n	8004104 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10d      	bne.n	80040e6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e00a      	b.n	80040fc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
 8004102:	e001      	b.n	8004108 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004108:	7dfb      	ldrb	r3, [r7, #23]
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <DFSDM_GetChannelFromInstance+0x7c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d102      	bne.n	800412e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e02b      	b.n	8004186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <DFSDM_GetChannelFromInstance+0x80>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d102      	bne.n	800413c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e024      	b.n	8004186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <DFSDM_GetChannelFromInstance+0x84>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d102      	bne.n	800414a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004144:	2302      	movs	r3, #2
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e01d      	b.n	8004186 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <DFSDM_GetChannelFromInstance+0x88>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d102      	bne.n	8004158 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004152:	2304      	movs	r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e016      	b.n	8004186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <DFSDM_GetChannelFromInstance+0x8c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d102      	bne.n	8004166 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004160:	2305      	movs	r3, #5
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e00f      	b.n	8004186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a0f      	ldr	r2, [pc, #60]	; (80041a8 <DFSDM_GetChannelFromInstance+0x90>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d102      	bne.n	8004174 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800416e:	2306      	movs	r3, #6
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e008      	b.n	8004186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <DFSDM_GetChannelFromInstance+0x94>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d102      	bne.n	8004182 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800417c:	2307      	movs	r3, #7
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e001      	b.n	8004186 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004182:	2303      	movs	r3, #3
 8004184:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004186:	68fb      	ldr	r3, [r7, #12]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40016000 	.word	0x40016000
 8004198:	40016020 	.word	0x40016020
 800419c:	40016040 	.word	0x40016040
 80041a0:	40016080 	.word	0x40016080
 80041a4:	400160a0 	.word	0x400160a0
 80041a8:	400160c0 	.word	0x400160c0
 80041ac:	400160e0 	.word	0x400160e0

080041b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e08d      	b.n	80042de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_DMA_Init+0x138>)
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d80f      	bhi.n	80041ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	4b45      	ldr	r3, [pc, #276]	; (80042ec <HAL_DMA_Init+0x13c>)
 80041d6:	4413      	add	r3, r2
 80041d8:	4a45      	ldr	r2, [pc, #276]	; (80042f0 <HAL_DMA_Init+0x140>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	009a      	lsls	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a42      	ldr	r2, [pc, #264]	; (80042f4 <HAL_DMA_Init+0x144>)
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
 80041ec:	e00e      	b.n	800420c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <HAL_DMA_Init+0x148>)
 80041f6:	4413      	add	r3, r2
 80041f8:	4a3d      	ldr	r2, [pc, #244]	; (80042f0 <HAL_DMA_Init+0x140>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	009a      	lsls	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a3c      	ldr	r2, [pc, #240]	; (80042fc <HAL_DMA_Init+0x14c>)
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8fe 	bl	8004460 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426c:	d102      	bne.n	8004274 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004288:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d010      	beq.n	80042b4 <HAL_DMA_Init+0x104>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b04      	cmp	r3, #4
 8004298:	d80c      	bhi.n	80042b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f91e 	bl	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	e008      	b.n	80042c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40020407 	.word	0x40020407
 80042ec:	bffdfff8 	.word	0xbffdfff8
 80042f0:	cccccccd 	.word	0xcccccccd
 80042f4:	40020000 	.word	0x40020000
 80042f8:	bffdfbf8 	.word	0xbffdfbf8
 80042fc:	40020400 	.word	0x40020400

08004300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	f003 031c 	and.w	r3, r3, #28
 8004320:	2204      	movs	r2, #4
 8004322:	409a      	lsls	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d026      	beq.n	800437a <HAL_DMA_IRQHandler+0x7a>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d021      	beq.n	800437a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d107      	bne.n	8004354 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0204 	bic.w	r2, r2, #4
 8004352:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	f003 021c 	and.w	r2, r3, #28
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	2104      	movs	r1, #4
 8004362:	fa01 f202 	lsl.w	r2, r1, r2
 8004366:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	2b00      	cmp	r3, #0
 800436e:	d071      	beq.n	8004454 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004378:	e06c      	b.n	8004454 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f003 031c 	and.w	r3, r3, #28
 8004382:	2202      	movs	r2, #2
 8004384:	409a      	lsls	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02e      	beq.n	80043ec <HAL_DMA_IRQHandler+0xec>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d029      	beq.n	80043ec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 020a 	bic.w	r2, r2, #10
 80043b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f003 021c 	and.w	r2, r3, #28
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2102      	movs	r1, #2
 80043cc:	fa01 f202 	lsl.w	r2, r1, r2
 80043d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d038      	beq.n	8004454 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043ea:	e033      	b.n	8004454 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	f003 031c 	and.w	r3, r3, #28
 80043f4:	2208      	movs	r2, #8
 80043f6:	409a      	lsls	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02a      	beq.n	8004456 <HAL_DMA_IRQHandler+0x156>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d025      	beq.n	8004456 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 020e 	bic.w	r2, r2, #14
 8004418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f003 021c 	and.w	r2, r3, #28
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2101      	movs	r1, #1
 8004428:	fa01 f202 	lsl.w	r2, r1, r2
 800442c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004454:	bf00      	nop
 8004456:	bf00      	nop
}
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d80a      	bhi.n	800448a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004480:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6493      	str	r3, [r2, #72]	; 0x48
 8004488:	e007      	b.n	800449a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	089b      	lsrs	r3, r3, #2
 8004490:	009a      	lsls	r2, r3, #2
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004494:	4413      	add	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b08      	subs	r3, #8
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2201      	movs	r2, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40020407 	.word	0x40020407
 80044d0:	4002081c 	.word	0x4002081c
 80044d4:	cccccccd 	.word	0xcccccccd
 80044d8:	40020880 	.word	0x40020880

080044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	461a      	mov	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a08      	ldr	r2, [pc, #32]	; (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2201      	movs	r2, #1
 800450a:	409a      	lsls	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	1000823f 	.word	0x1000823f
 8004520:	40020940 	.word	0x40020940

08004524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004532:	e166      	b.n	8004802 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8158 	beq.w	80047fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d005      	beq.n	8004564 <HAL_GPIO_Init+0x40>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d130      	bne.n	80045c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459a:	2201      	movs	r2, #1
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 0201 	and.w	r2, r3, #1
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d017      	beq.n	8004602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d123      	bne.n	8004656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	08da      	lsrs	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3208      	adds	r2, #8
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0203 	and.w	r2, r3, #3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80b2 	beq.w	80047fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004698:	4b61      	ldr	r3, [pc, #388]	; (8004820 <HAL_GPIO_Init+0x2fc>)
 800469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469c:	4a60      	ldr	r2, [pc, #384]	; (8004820 <HAL_GPIO_Init+0x2fc>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6613      	str	r3, [r2, #96]	; 0x60
 80046a4:	4b5e      	ldr	r3, [pc, #376]	; (8004820 <HAL_GPIO_Init+0x2fc>)
 80046a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046b0:	4a5c      	ldr	r2, [pc, #368]	; (8004824 <HAL_GPIO_Init+0x300>)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	220f      	movs	r2, #15
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046da:	d02b      	beq.n	8004734 <HAL_GPIO_Init+0x210>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a52      	ldr	r2, [pc, #328]	; (8004828 <HAL_GPIO_Init+0x304>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d025      	beq.n	8004730 <HAL_GPIO_Init+0x20c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a51      	ldr	r2, [pc, #324]	; (800482c <HAL_GPIO_Init+0x308>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01f      	beq.n	800472c <HAL_GPIO_Init+0x208>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a50      	ldr	r2, [pc, #320]	; (8004830 <HAL_GPIO_Init+0x30c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d019      	beq.n	8004728 <HAL_GPIO_Init+0x204>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a4f      	ldr	r2, [pc, #316]	; (8004834 <HAL_GPIO_Init+0x310>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_GPIO_Init+0x200>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a4e      	ldr	r2, [pc, #312]	; (8004838 <HAL_GPIO_Init+0x314>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00d      	beq.n	8004720 <HAL_GPIO_Init+0x1fc>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a4d      	ldr	r2, [pc, #308]	; (800483c <HAL_GPIO_Init+0x318>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <HAL_GPIO_Init+0x1f8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a4c      	ldr	r2, [pc, #304]	; (8004840 <HAL_GPIO_Init+0x31c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_GPIO_Init+0x1f4>
 8004714:	2307      	movs	r3, #7
 8004716:	e00e      	b.n	8004736 <HAL_GPIO_Init+0x212>
 8004718:	2308      	movs	r3, #8
 800471a:	e00c      	b.n	8004736 <HAL_GPIO_Init+0x212>
 800471c:	2306      	movs	r3, #6
 800471e:	e00a      	b.n	8004736 <HAL_GPIO_Init+0x212>
 8004720:	2305      	movs	r3, #5
 8004722:	e008      	b.n	8004736 <HAL_GPIO_Init+0x212>
 8004724:	2304      	movs	r3, #4
 8004726:	e006      	b.n	8004736 <HAL_GPIO_Init+0x212>
 8004728:	2303      	movs	r3, #3
 800472a:	e004      	b.n	8004736 <HAL_GPIO_Init+0x212>
 800472c:	2302      	movs	r3, #2
 800472e:	e002      	b.n	8004736 <HAL_GPIO_Init+0x212>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_GPIO_Init+0x212>
 8004734:	2300      	movs	r3, #0
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	f002 0203 	and.w	r2, r2, #3
 800473c:	0092      	lsls	r2, r2, #2
 800473e:	4093      	lsls	r3, r2
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004746:	4937      	ldr	r1, [pc, #220]	; (8004824 <HAL_GPIO_Init+0x300>)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004754:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <HAL_GPIO_Init+0x320>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004778:	4a32      	ldr	r2, [pc, #200]	; (8004844 <HAL_GPIO_Init+0x320>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <HAL_GPIO_Init+0x320>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047a2:	4a28      	ldr	r2, [pc, #160]	; (8004844 <HAL_GPIO_Init+0x320>)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047a8:	4b26      	ldr	r3, [pc, #152]	; (8004844 <HAL_GPIO_Init+0x320>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_GPIO_Init+0x320>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_GPIO_Init+0x320>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	43db      	mvns	r3, r3
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4013      	ands	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <HAL_GPIO_Init+0x320>)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	3301      	adds	r3, #1
 8004800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	f47f ae91 	bne.w	8004534 <HAL_GPIO_Init+0x10>
  }
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	40021000 	.word	0x40021000
 8004824:	40010000 	.word	0x40010000
 8004828:	48000400 	.word	0x48000400
 800482c:	48000800 	.word	0x48000800
 8004830:	48000c00 	.word	0x48000c00
 8004834:	48001000 	.word	0x48001000
 8004838:	48001400 	.word	0x48001400
 800483c:	48001800 	.word	0x48001800
 8004840:	48001c00 	.word	0x48001c00
 8004844:	40010400 	.word	0x40010400

08004848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e001      	b.n	800486a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
 8004884:	4613      	mov	r3, r2
 8004886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004888:	787b      	ldrb	r3, [r7, #1]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004894:	e002      	b.n	800489c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e081      	b.n	80049be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd fe1a 	bl	8002508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	e006      	b.n	8004930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800492e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d104      	bne.n	8004942 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69d9      	ldr	r1, [r3, #28]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d138      	bne.n	8004a4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e032      	b.n	8004a50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2224      	movs	r2, #36	; 0x24
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d139      	bne.n	8004ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e033      	b.n	8004ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e000      	b.n	8004ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b08f      	sub	sp, #60	; 0x3c
 8004af8:	af0a      	add	r7, sp, #40	; 0x28
 8004afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e116      	b.n	8004d34 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f00b f963 	bl	800fdec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f007 fd78 	bl	800c63a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	687e      	ldr	r6, [r7, #4]
 8004b52:	466d      	mov	r5, sp
 8004b54:	f106 0410 	add.w	r4, r6, #16
 8004b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b68:	1d33      	adds	r3, r6, #4
 8004b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	f007 fc8b 	bl	800c488 <USB_CoreInit>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0d7      	b.n	8004d34 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f007 fd66 	bl	800c65c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b90:	2300      	movs	r3, #0
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	e04a      	b.n	8004c2c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b96:	7bfa      	ldrb	r2, [r7, #15]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	333d      	adds	r3, #61	; 0x3d
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004baa:	7bfa      	ldrb	r2, [r7, #15]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	333c      	adds	r3, #60	; 0x3c
 8004bba:	7bfa      	ldrb	r2, [r7, #15]
 8004bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bbe:	7bfa      	ldrb	r2, [r7, #15]
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	b298      	uxth	r0, r3
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	3344      	adds	r3, #68	; 0x44
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bd6:	7bfa      	ldrb	r2, [r7, #15]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	3340      	adds	r3, #64	; 0x40
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bea:	7bfa      	ldrb	r2, [r7, #15]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3348      	adds	r3, #72	; 0x48
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	334c      	adds	r3, #76	; 0x4c
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3354      	adds	r3, #84	; 0x54
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d3af      	bcc.n	8004b96 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	e044      	b.n	8004cc6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d3b5      	bcc.n	8004c3c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	687e      	ldr	r6, [r7, #4]
 8004cd8:	466d      	mov	r5, sp
 8004cda:	f106 0410 	add.w	r4, r6, #16
 8004cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ce6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cea:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cee:	1d33      	adds	r3, r6, #4
 8004cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cf2:	6838      	ldr	r0, [r7, #0]
 8004cf4:	f007 fcfe 	bl	800c6f4 <USB_DevInit>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e014      	b.n	8004d34 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d102      	bne.n	8004d28 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f001 f882 	bl	8005e2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f008 fd86 	bl	800d83e <USB_DevDisconnect>

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_PCD_Start+0x1c>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e01c      	b.n	8004d92 <HAL_PCD_Start+0x56>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f007 fc4d 	bl	800c618 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f008 fd3a 	bl	800d7fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d9a:	b590      	push	{r4, r7, lr}
 8004d9c:	b08d      	sub	sp, #52	; 0x34
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f008 fdf8 	bl	800d9a6 <USB_GetMode>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 847e 	bne.w	80056ba <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f008 fd5c 	bl	800d880 <USB_ReadInterrupts>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8474 	beq.w	80056b8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f008 fd49 	bl	800d880 <USB_ReadInterrupts>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d107      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f002 0202 	and.w	r2, r2, #2
 8004e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f008 fd37 	bl	800d880 <USB_ReadInterrupts>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d161      	bne.n	8004ee0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0210 	bic.w	r2, r2, #16
 8004e2a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f003 020f 	and.w	r2, r3, #15
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	3304      	adds	r3, #4
 8004e4a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	0c5b      	lsrs	r3, r3, #17
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d124      	bne.n	8004ea2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d035      	beq.n	8004ed0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6a38      	ldr	r0, [r7, #32]
 8004e78:	f008 fb6e 	bl	800d558 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e88:	441a      	add	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a1a      	ldr	r2, [r3, #32]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9a:	441a      	add	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
 8004ea0:	e016      	b.n	8004ed0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	0c5b      	lsrs	r3, r3, #17
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d110      	bne.n	8004ed0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6a38      	ldr	r0, [r7, #32]
 8004eba:	f008 fb4d 	bl	800d558 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eca:	441a      	add	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0210 	orr.w	r2, r2, #16
 8004ede:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f008 fccb 	bl	800d880 <USB_ReadInterrupts>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef4:	f040 80a7 	bne.w	8005046 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f008 fcd0 	bl	800d8a6 <USB_ReadDevAllOutEpInterrupt>
 8004f06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f08:	e099      	b.n	800503e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 808e 	beq.w	8005032 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f008 fcf4 	bl	800d90e <USB_ReadDevOutEPInterrupt>
 8004f26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2301      	movs	r3, #1
 8004f42:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fe96 	bl	8005c78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	461a      	mov	r2, r3
 8004f64:	2308      	movs	r3, #8
 8004f66:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fed2 	bl	8005d14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	461a      	mov	r2, r3
 8004f88:	2310      	movs	r3, #16
 8004f8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d030      	beq.n	8004ff8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d109      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	4613      	mov	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3304      	adds	r3, #4
 8004fca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	78db      	ldrb	r3, [r3, #3]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d108      	bne.n	8004fe6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f00b f847 	bl	8010074 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500e:	461a      	mov	r2, r3
 8005010:	2320      	movs	r3, #32
 8005012:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	461a      	mov	r2, r3
 800502c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005030:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	3301      	adds	r3, #1
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f af62 	bne.w	8004f0a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f008 fc18 	bl	800d880 <USB_ReadInterrupts>
 8005050:	4603      	mov	r3, r0
 8005052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800505a:	f040 80a4 	bne.w	80051a6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f008 fc39 	bl	800d8da <USB_ReadDevAllInEpInterrupt>
 8005068:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800506e:	e096      	b.n	800519e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 808b 	beq.w	8005192 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f008 fc5f 	bl	800d94a <USB_ReadDevInEPInterrupt>
 800508c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	2201      	movs	r2, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69f9      	ldr	r1, [r7, #28]
 80050b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b8:	4013      	ands	r3, r2
 80050ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	461a      	mov	r2, r3
 80050ca:	2301      	movs	r3, #1
 80050cc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f00a ff38 	bl	800ff4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	461a      	mov	r2, r3
 80050f2:	2308      	movs	r3, #8
 80050f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	461a      	mov	r2, r3
 800510e:	2310      	movs	r3, #16
 8005110:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	461a      	mov	r2, r3
 800512a:	2340      	movs	r3, #64	; 0x40
 800512c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d023      	beq.n	8005180 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800513a:	6a38      	ldr	r0, [r7, #32]
 800513c:	f007 fc26 	bl	800c98c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	3338      	adds	r3, #56	; 0x38
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4413      	add	r3, r2
 8005150:	3304      	adds	r3, #4
 8005152:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	78db      	ldrb	r3, [r3, #3]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d108      	bne.n	800516e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	b2db      	uxtb	r3, r3
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f00a ff95 	bl	8010098 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	461a      	mov	r2, r3
 800517c:	2302      	movs	r3, #2
 800517e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800518a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fcea 	bl	8005b66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	3301      	adds	r3, #1
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f47f af65 	bne.w	8005070 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f008 fb68 	bl	800d880 <USB_ReadInterrupts>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ba:	d122      	bne.n	8005202 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d108      	bne.n	80051ec <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051e2:	2100      	movs	r1, #0
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f00b f9c7 	bl	8010578 <HAL_PCDEx_LPM_Callback>
 80051ea:	e002      	b.n	80051f2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f00a ff19 	bl	8010024 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f008 fb3a 	bl	800d880 <USB_ReadInterrupts>
 800520c:	4603      	mov	r3, r0
 800520e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005216:	d112      	bne.n	800523e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f00a fed5 	bl	800ffd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695a      	ldr	r2, [r3, #20]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800523c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f008 fb1c 	bl	800d880 <USB_ReadInterrupts>
 8005248:	4603      	mov	r3, r0
 800524a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005252:	d121      	bne.n	8005298 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005262:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d111      	bne.n	8005292 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	089b      	lsrs	r3, r3, #2
 800527e:	f003 020f 	and.w	r2, r3, #15
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005288:	2101      	movs	r1, #1
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f00b f974 	bl	8010578 <HAL_PCDEx_LPM_Callback>
 8005290:	e002      	b.n	8005298 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f00a fea0 	bl	800ffd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f008 faef 	bl	800d880 <USB_ReadInterrupts>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	f040 80b5 	bne.w	800541a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2110      	movs	r1, #16
 80052ca:	4618      	mov	r0, r3
 80052cc:	f007 fb5e 	bl	800c98c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d4:	e046      	b.n	8005364 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	461a      	mov	r2, r3
 80052e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	461a      	mov	r2, r3
 8005318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800531c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005338:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800533c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800535c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	3301      	adds	r3, #1
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536a:	429a      	cmp	r2, r3
 800536c:	d3b3      	bcc.n	80052d6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005380:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	f043 030b 	orr.w	r3, r3, #11
 800539e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b0:	f043 030b 	orr.w	r3, r3, #11
 80053b4:	6453      	str	r3, [r2, #68]	; 0x44
 80053b6:	e015      	b.n	80053e4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80053ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053de:	f043 030b 	orr.w	r3, r3, #11
 80053e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f008 faff 	bl	800da08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f008 fa2e 	bl	800d880 <USB_ReadInterrupts>
 8005424:	4603      	mov	r3, r0
 8005426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800542a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542e:	d124      	bne.n	800547a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f008 fac4 	bl	800d9c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f007 fb21 	bl	800ca86 <USB_GetDevSpeed>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681c      	ldr	r4, [r3, #0]
 8005450:	f001 fbe2 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8005454:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	4620      	mov	r0, r4
 8005460:	f007 f83e 	bl	800c4e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f00a fd98 	bl	800ff9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005478:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f008 f9fe 	bl	800d880 <USB_ReadInterrupts>
 8005484:	4603      	mov	r3, r0
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d10a      	bne.n	80054a4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f00a fd75 	bl	800ff7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f002 0208 	and.w	r2, r2, #8
 80054a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f008 f9e9 	bl	800d880 <USB_ReadInterrupts>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d122      	bne.n	80054fe <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054c4:	2301      	movs	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
 80054c8:	e014      	b.n	80054f4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb0b 	bl	8005b04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	3301      	adds	r3, #1
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d3e5      	bcc.n	80054ca <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f008 f9bc 	bl	800d880 <USB_ReadInterrupts>
 8005508:	4603      	mov	r3, r0
 800550a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005512:	d13b      	bne.n	800558c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005514:	2301      	movs	r3, #1
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
 8005518:	e02b      	b.n	8005572 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	3340      	adds	r3, #64	; 0x40
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d115      	bne.n	800556c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005540:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005542:	2b00      	cmp	r3, #0
 8005544:	da12      	bge.n	800556c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	333f      	adds	r3, #63	; 0x3f
 8005556:	2201      	movs	r2, #1
 8005558:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 facc 	bl	8005b04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	3301      	adds	r3, #1
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005578:	429a      	cmp	r2, r3
 800557a:	d3ce      	bcc.n	800551a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800558a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f008 f975 	bl	800d880 <USB_ReadInterrupts>
 8005596:	4603      	mov	r3, r0
 8005598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800559c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a0:	d155      	bne.n	800564e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055a2:	2301      	movs	r3, #1
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
 80055a6:	e045      	b.n	8005634 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d12e      	bne.n	800562e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da2b      	bge.n	800562e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80055e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d121      	bne.n	800562e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562a:	6053      	str	r3, [r2, #4]
            break;
 800562c:	e007      	b.n	800563e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	3301      	adds	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	429a      	cmp	r2, r3
 800563c:	d3b4      	bcc.n	80055a8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800564c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f008 f914 	bl	800d880 <USB_ReadInterrupts>
 8005658:	4603      	mov	r3, r0
 800565a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d10a      	bne.n	800567a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f00a fd29 	bl	80100bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f008 f8fe 	bl	800d880 <USB_ReadInterrupts>
 8005684:	4603      	mov	r3, r0
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b04      	cmp	r3, #4
 800568c:	d115      	bne.n	80056ba <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f00a fd19 	bl	80100d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	e000      	b.n	80056ba <HAL_PCD_IRQHandler+0x920>
      return;
 80056b8:	bf00      	nop
    }
  }
}
 80056ba:	3734      	adds	r7, #52	; 0x34
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd90      	pop	{r4, r7, pc}

080056c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_PCD_SetAddress+0x1a>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e013      	b.n	8005702 <HAL_PCD_SetAddress+0x42>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	4611      	mov	r1, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f008 f85c 	bl	800d7b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	4608      	mov	r0, r1
 8005714:	4611      	mov	r1, r2
 8005716:	461a      	mov	r2, r3
 8005718:	4603      	mov	r3, r0
 800571a:	70fb      	strb	r3, [r7, #3]
 800571c:	460b      	mov	r3, r1
 800571e:	803b      	strh	r3, [r7, #0]
 8005720:	4613      	mov	r3, r2
 8005722:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800572c:	2b00      	cmp	r3, #0
 800572e:	da0f      	bge.n	8005750 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	f003 020f 	and.w	r2, r3, #15
 8005736:	4613      	mov	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	3338      	adds	r3, #56	; 0x38
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4413      	add	r3, r2
 8005744:	3304      	adds	r3, #4
 8005746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	705a      	strb	r2, [r3, #1]
 800574e:	e00f      	b.n	8005770 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	f003 020f 	and.w	r2, r3, #15
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	3304      	adds	r3, #4
 8005768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800577c:	883a      	ldrh	r2, [r7, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	78ba      	ldrb	r2, [r7, #2]
 8005786:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800579a:	78bb      	ldrb	r3, [r7, #2]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d102      	bne.n	80057a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_PCD_EP_Open+0xaa>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e00e      	b.n	80057d2 <HAL_PCD_EP_Open+0xc8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f007 f97e 	bl	800cac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80057d0:	7afb      	ldrb	r3, [r7, #11]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da0f      	bge.n	800580e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	3338      	adds	r3, #56	; 0x38
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	3304      	adds	r3, #4
 8005804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	705a      	strb	r2, [r3, #1]
 800580c:	e00f      	b.n	800582e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	3304      	adds	r3, #4
 8005826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_PCD_EP_Close+0x6e>
 8005844:	2302      	movs	r3, #2
 8005846:	e00e      	b.n	8005866 <HAL_PCD_EP_Close+0x8c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	4618      	mov	r0, r3
 8005858:	f007 f9bc 	bl	800cbd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	460b      	mov	r3, r1
 800587c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	f003 020f 	and.w	r2, r3, #15
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	3304      	adds	r3, #4
 8005896:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058b0:	7afb      	ldrb	r3, [r7, #11]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6979      	ldr	r1, [r7, #20]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f007 fc3d 	bl	800d14c <USB_EP0StartXfer>
 80058d2:	e005      	b.n	80058e0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6979      	ldr	r1, [r7, #20]
 80058da:	4618      	mov	r0, r3
 80058dc:	f007 fa56 	bl	800cd8c <USB_EPStartXfer>
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	f003 020f 	and.w	r2, r3, #15
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800590c:	681b      	ldr	r3, [r3, #0]
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	460b      	mov	r3, r1
 8005928:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	f003 020f 	and.w	r2, r3, #15
 8005930:	4613      	mov	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	3338      	adds	r3, #56	; 0x38
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	3304      	adds	r3, #4
 8005940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2201      	movs	r2, #1
 8005958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	b2da      	uxtb	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005966:	7afb      	ldrb	r3, [r7, #11]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6979      	ldr	r1, [r7, #20]
 8005976:	4618      	mov	r0, r3
 8005978:	f007 fbe8 	bl	800d14c <USB_EP0StartXfer>
 800597c:	e005      	b.n	800598a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	4618      	mov	r0, r3
 8005986:	f007 fa01 	bl	800cd8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	f003 020f 	and.w	r2, r3, #15
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d901      	bls.n	80059b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e04e      	b.n	8005a50 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da0f      	bge.n	80059da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	3338      	adds	r3, #56	; 0x38
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	705a      	strb	r2, [r3, #1]
 80059d8:	e00d      	b.n	80059f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	4413      	add	r3, r2
 80059ec:	3304      	adds	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_PCD_EP_SetStall+0x82>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e01c      	b.n	8005a50 <HAL_PCD_EP_SetStall+0xbc>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f007 fdef 	bl	800d608 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d108      	bne.n	8005a46 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f007 ffe1 	bl	800da08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d901      	bls.n	8005a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e042      	b.n	8005afc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da0f      	bge.n	8005a9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	3338      	adds	r3, #56	; 0x38
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	705a      	strb	r2, [r3, #1]
 8005a9c:	e00f      	b.n	8005abe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	f003 020f 	and.w	r2, r3, #15
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_PCD_EP_ClrStall+0x86>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e00e      	b.n	8005afc <HAL_PCD_EP_ClrStall+0xa4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f007 fdf9 	bl	800d6e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da0c      	bge.n	8005b32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	f003 020f 	and.w	r2, r3, #15
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	3338      	adds	r3, #56	; 0x38
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e00c      	b.n	8005b4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	f003 020f 	and.w	r2, r3, #15
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f007 fc1c 	bl	800d390 <USB_EPStopXfer>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b088      	sub	sp, #32
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	3338      	adds	r3, #56	; 0x38
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d901      	bls.n	8005b9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e067      	b.n	8005c6e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d902      	bls.n	8005bba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3303      	adds	r3, #3
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bc2:	e026      	b.n	8005c12 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	699a      	ldr	r2, [r3, #24]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d902      	bls.n	8005be0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	3303      	adds	r3, #3
 8005be4:	089b      	lsrs	r3, r3, #2
 8005be6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6919      	ldr	r1, [r3, #16]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f007 fc75 	bl	800d4e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	441a      	add	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1a      	ldr	r2, [r3, #32]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d809      	bhi.n	8005c3c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d203      	bcs.n	8005c3c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1c3      	bne.n	8005bc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d811      	bhi.n	8005c6c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	2201      	movs	r2, #1
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	6939      	ldr	r1, [r7, #16]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c68:	4013      	ands	r3, r2
 8005c6a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	333c      	adds	r3, #60	; 0x3c
 8005c90:	3304      	adds	r3, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <PCD_EP_OutXfrComplete_int+0x98>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d124      	bne.n	8005cf8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	6093      	str	r3, [r2, #8]
 8005ccc:	e01a      	b.n	8005d04 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2320      	movs	r3, #32
 8005ce8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f00a f90f 	bl	800ff14 <HAL_PCD_DataOutStageCallback>
 8005cf6:	e005      	b.n	8005d04 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f00a f908 	bl	800ff14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	4f54310a 	.word	0x4f54310a

08005d14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	333c      	adds	r3, #60	; 0x3c
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <PCD_EP_OutSetupPacket_int+0x64>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d90e      	bls.n	8005d68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	461a      	mov	r2, r3
 8005d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f00a f8c1 	bl	800fef0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	4f54300a 	.word	0x4f54300a

08005d7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d9a:	883b      	ldrh	r3, [r7, #0]
 8005d9c:	0419      	lsls	r1, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28
 8005da8:	e028      	b.n	8005dfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
 8005dbc:	e00d      	b.n	8005dda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	3340      	adds	r3, #64	; 0x40
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	73fb      	strb	r3, [r7, #15]
 8005dda:	7bfa      	ldrb	r2, [r7, #15]
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3ec      	bcc.n	8005dbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005de4:	883b      	ldrh	r3, [r7, #0]
 8005de6:	0418      	lsls	r0, r3, #16
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6819      	ldr	r1, [r3, #0]
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	4302      	orrs	r2, r0
 8005df4:	3340      	adds	r3, #64	; 0x40
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	887a      	ldrh	r2, [r7, #2]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	f043 0303 	orr.w	r3, r3, #3
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e78:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e82:	6013      	str	r3, [r2, #0]
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40007000 	.word	0x40007000

08005e94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e98:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea4:	d102      	bne.n	8005eac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eaa:	e00b      	b.n	8005ec4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005eac:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eba:	d102      	bne.n	8005ec2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec0:	e000      	b.n	8005ec4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005ec2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40007000 	.word	0x40007000

08005ed4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d141      	bne.n	8005f66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ee2:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d131      	bne.n	8005f54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ef0:	4b47      	ldr	r3, [pc, #284]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef6:	4a46      	ldr	r2, [pc, #280]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f00:	4b43      	ldr	r3, [pc, #268]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f08:	4a41      	ldr	r2, [pc, #260]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005f10:	4b40      	ldr	r3, [pc, #256]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2232      	movs	r2, #50	; 0x32
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	4a3f      	ldr	r2, [pc, #252]	; (8006018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	0c9b      	lsrs	r3, r3, #18
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f26:	e002      	b.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f2e:	4b38      	ldr	r3, [pc, #224]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3a:	d102      	bne.n	8005f42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f2      	bne.n	8005f28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f42:	4b33      	ldr	r3, [pc, #204]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4e:	d158      	bne.n	8006002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e057      	b.n	8006004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f54:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f5a:	4a2d      	ldr	r2, [pc, #180]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f64:	e04d      	b.n	8006002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6c:	d141      	bne.n	8005ff2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f6e:	4b28      	ldr	r3, [pc, #160]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7a:	d131      	bne.n	8005fe0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f7c:	4b24      	ldr	r3, [pc, #144]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f82:	4a23      	ldr	r2, [pc, #140]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f8c:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f94:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2232      	movs	r2, #50	; 0x32
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	0c9b      	lsrs	r3, r3, #18
 8005fae:	3301      	adds	r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb2:	e002      	b.n	8005fba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fba:	4b15      	ldr	r3, [pc, #84]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc6:	d102      	bne.n	8005fce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f2      	bne.n	8005fb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fda:	d112      	bne.n	8006002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e011      	b.n	8006004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe6:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ff0:	e007      	b.n	8006002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ffa:	4a05      	ldr	r2, [pc, #20]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006000:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40007000 	.word	0x40007000
 8006014:	20000020 	.word	0x20000020
 8006018:	431bde83 	.word	0x431bde83

0800601c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a04      	ldr	r2, [pc, #16]	; (8006038 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800602a:	6053      	str	r3, [r2, #4]
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40007000 	.word	0x40007000

0800603c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4a04      	ldr	r2, [pc, #16]	; (8006058 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800604a:	6053      	str	r3, [r2, #4]
}
 800604c:	bf00      	nop
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40007000 	.word	0x40007000

0800605c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f000 bc08 	b.w	8006880 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006070:	4b96      	ldr	r3, [pc, #600]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800607a:	4b94      	ldr	r3, [pc, #592]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80e4 	beq.w	800625a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <HAL_RCC_OscConfig+0x4c>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2b0c      	cmp	r3, #12
 800609c:	f040 808b 	bne.w	80061b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	f040 8087 	bne.w	80061b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060a8:	4b88      	ldr	r3, [pc, #544]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_OscConfig+0x64>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e3df      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1a      	ldr	r2, [r3, #32]
 80060c4:	4b81      	ldr	r3, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <HAL_RCC_OscConfig+0x7e>
 80060d0:	4b7e      	ldr	r3, [pc, #504]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d8:	e005      	b.n	80060e6 <HAL_RCC_OscConfig+0x8a>
 80060da:	4b7c      	ldr	r3, [pc, #496]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80060dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d223      	bcs.n	8006132 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fdca 	bl	8006c88 <RCC_SetFlashLatencyFromMSIRange>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e3c0      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060fe:	4b73      	ldr	r3, [pc, #460]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a72      	ldr	r2, [pc, #456]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006104:	f043 0308 	orr.w	r3, r3, #8
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4b70      	ldr	r3, [pc, #448]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	496d      	ldr	r1, [pc, #436]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800611c:	4b6b      	ldr	r3, [pc, #428]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	4968      	ldr	r1, [pc, #416]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
 8006130:	e025      	b.n	800617e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006132:	4b66      	ldr	r3, [pc, #408]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a65      	ldr	r2, [pc, #404]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006138:	f043 0308 	orr.w	r3, r3, #8
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4b63      	ldr	r3, [pc, #396]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	4960      	ldr	r1, [pc, #384]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006150:	4b5e      	ldr	r3, [pc, #376]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	495b      	ldr	r1, [pc, #364]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006160:	4313      	orrs	r3, r2
 8006162:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fd8a 	bl	8006c88 <RCC_SetFlashLatencyFromMSIRange>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e380      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800617e:	f000 fcc1 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8006182:	4602      	mov	r2, r0
 8006184:	4b51      	ldr	r3, [pc, #324]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	4950      	ldr	r1, [pc, #320]	; (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006190:	5ccb      	ldrb	r3, [r1, r3]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	4a4e      	ldr	r2, [pc, #312]	; (80062d4 <HAL_RCC_OscConfig+0x278>)
 800619c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800619e:	4b4e      	ldr	r3, [pc, #312]	; (80062d8 <HAL_RCC_OscConfig+0x27c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fc fd5e 	bl	8002c64 <HAL_InitTick>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d052      	beq.n	8006258 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	e364      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d032      	beq.n	8006224 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061be:	4b43      	ldr	r3, [pc, #268]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a42      	ldr	r2, [pc, #264]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061ca:	f7fc fd9b 	bl	8002d04 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061d2:	f7fc fd97 	bl	8002d04 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e34d      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061e4:	4b39      	ldr	r3, [pc, #228]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061f0:	4b36      	ldr	r3, [pc, #216]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a35      	ldr	r2, [pc, #212]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80061f6:	f043 0308 	orr.w	r3, r3, #8
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	4b33      	ldr	r3, [pc, #204]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	4930      	ldr	r1, [pc, #192]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800620a:	4313      	orrs	r3, r2
 800620c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800620e:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	492b      	ldr	r1, [pc, #172]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800621e:	4313      	orrs	r3, r2
 8006220:	604b      	str	r3, [r1, #4]
 8006222:	e01a      	b.n	800625a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006224:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a28      	ldr	r2, [pc, #160]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006230:	f7fc fd68 	bl	8002d04 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006238:	f7fc fd64 	bl	8002d04 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e31a      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800624a:	4b20      	ldr	r3, [pc, #128]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x1dc>
 8006256:	e000      	b.n	800625a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006258:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d073      	beq.n	800634e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d005      	beq.n	8006278 <HAL_RCC_OscConfig+0x21c>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d10e      	bne.n	8006290 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d10b      	bne.n	8006290 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006278:	4b14      	ldr	r3, [pc, #80]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d063      	beq.n	800634c <HAL_RCC_OscConfig+0x2f0>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d15f      	bne.n	800634c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e2f7      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d106      	bne.n	80062a8 <HAL_RCC_OscConfig+0x24c>
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a0b      	ldr	r2, [pc, #44]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80062a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e025      	b.n	80062f4 <HAL_RCC_OscConfig+0x298>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b0:	d114      	bne.n	80062dc <HAL_RCC_OscConfig+0x280>
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a05      	ldr	r2, [pc, #20]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80062b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	4b03      	ldr	r3, [pc, #12]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a02      	ldr	r2, [pc, #8]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80062c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e013      	b.n	80062f4 <HAL_RCC_OscConfig+0x298>
 80062cc:	40021000 	.word	0x40021000
 80062d0:	08011b44 	.word	0x08011b44
 80062d4:	20000020 	.word	0x20000020
 80062d8:	20000024 	.word	0x20000024
 80062dc:	4ba0      	ldr	r3, [pc, #640]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a9f      	ldr	r2, [pc, #636]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80062e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	4b9d      	ldr	r3, [pc, #628]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a9c      	ldr	r2, [pc, #624]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80062ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d013      	beq.n	8006324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7fc fd02 	bl	8002d04 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006304:	f7fc fcfe 	bl	8002d04 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	; 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e2b4      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006316:	4b92      	ldr	r3, [pc, #584]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f0      	beq.n	8006304 <HAL_RCC_OscConfig+0x2a8>
 8006322:	e014      	b.n	800634e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fc fcee 	bl	8002d04 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800632c:	f7fc fcea 	bl	8002d04 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b64      	cmp	r3, #100	; 0x64
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e2a0      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800633e:	4b88      	ldr	r3, [pc, #544]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x2d0>
 800634a:	e000      	b.n	800634e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800634c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d060      	beq.n	800641c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b04      	cmp	r3, #4
 800635e:	d005      	beq.n	800636c <HAL_RCC_OscConfig+0x310>
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2b0c      	cmp	r3, #12
 8006364:	d119      	bne.n	800639a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d116      	bne.n	800639a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800636c:	4b7c      	ldr	r3, [pc, #496]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCC_OscConfig+0x328>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e27d      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006384:	4b76      	ldr	r3, [pc, #472]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	4973      	ldr	r1, [pc, #460]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006398:	e040      	b.n	800641c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d023      	beq.n	80063ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063a2:	4b6f      	ldr	r3, [pc, #444]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a6e      	ldr	r2, [pc, #440]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80063a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ae:	f7fc fca9 	bl	8002d04 <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b4:	e008      	b.n	80063c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b6:	f7fc fca5 	bl	8002d04 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e25b      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c8:	4b65      	ldr	r3, [pc, #404]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0f0      	beq.n	80063b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d4:	4b62      	ldr	r3, [pc, #392]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	061b      	lsls	r3, r3, #24
 80063e2:	495f      	ldr	r1, [pc, #380]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	604b      	str	r3, [r1, #4]
 80063e8:	e018      	b.n	800641c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ea:	4b5d      	ldr	r3, [pc, #372]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a5c      	ldr	r2, [pc, #368]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80063f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f6:	f7fc fc85 	bl	8002d04 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063fe:	f7fc fc81 	bl	8002d04 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e237      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006410:	4b53      	ldr	r3, [pc, #332]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f0      	bne.n	80063fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d03c      	beq.n	80064a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01c      	beq.n	800646a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006430:	4b4b      	ldr	r3, [pc, #300]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006436:	4a4a      	ldr	r2, [pc, #296]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006440:	f7fc fc60 	bl	8002d04 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006448:	f7fc fc5c 	bl	8002d04 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e212      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800645a:	4b41      	ldr	r3, [pc, #260]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 800645c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0ef      	beq.n	8006448 <HAL_RCC_OscConfig+0x3ec>
 8006468:	e01b      	b.n	80064a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800646a:	4b3d      	ldr	r3, [pc, #244]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 800646c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006470:	4a3b      	ldr	r2, [pc, #236]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647a:	f7fc fc43 	bl	8002d04 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006482:	f7fc fc3f 	bl	8002d04 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e1f5      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006494:	4b32      	ldr	r3, [pc, #200]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1ef      	bne.n	8006482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80a6 	beq.w	80065fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b0:	2300      	movs	r3, #0
 80064b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80064b4:	4b2a      	ldr	r3, [pc, #168]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10d      	bne.n	80064dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c0:	4b27      	ldr	r3, [pc, #156]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	4a26      	ldr	r2, [pc, #152]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80064c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ca:	6593      	str	r3, [r2, #88]	; 0x58
 80064cc:	4b24      	ldr	r3, [pc, #144]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d8:	2301      	movs	r3, #1
 80064da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064dc:	4b21      	ldr	r3, [pc, #132]	; (8006564 <HAL_RCC_OscConfig+0x508>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d118      	bne.n	800651a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <HAL_RCC_OscConfig+0x508>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <HAL_RCC_OscConfig+0x508>)
 80064ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f4:	f7fc fc06 	bl	8002d04 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064fc:	f7fc fc02 	bl	8002d04 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e1b8      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800650e:	4b15      	ldr	r3, [pc, #84]	; (8006564 <HAL_RCC_OscConfig+0x508>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d108      	bne.n	8006534 <HAL_RCC_OscConfig+0x4d8>
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006528:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006532:	e029      	b.n	8006588 <HAL_RCC_OscConfig+0x52c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b05      	cmp	r3, #5
 800653a:	d115      	bne.n	8006568 <HAL_RCC_OscConfig+0x50c>
 800653c:	4b08      	ldr	r3, [pc, #32]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	4a07      	ldr	r2, [pc, #28]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006544:	f043 0304 	orr.w	r3, r3, #4
 8006548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800654c:	4b04      	ldr	r3, [pc, #16]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006552:	4a03      	ldr	r2, [pc, #12]	; (8006560 <HAL_RCC_OscConfig+0x504>)
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800655c:	e014      	b.n	8006588 <HAL_RCC_OscConfig+0x52c>
 800655e:	bf00      	nop
 8006560:	40021000 	.word	0x40021000
 8006564:	40007000 	.word	0x40007000
 8006568:	4b9d      	ldr	r3, [pc, #628]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	4a9c      	ldr	r2, [pc, #624]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006578:	4b99      	ldr	r3, [pc, #612]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657e:	4a98      	ldr	r2, [pc, #608]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d016      	beq.n	80065be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006590:	f7fc fbb8 	bl	8002d04 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006596:	e00a      	b.n	80065ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006598:	f7fc fbb4 	bl	8002d04 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e168      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ae:	4b8c      	ldr	r3, [pc, #560]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ed      	beq.n	8006598 <HAL_RCC_OscConfig+0x53c>
 80065bc:	e015      	b.n	80065ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065be:	f7fc fba1 	bl	8002d04 <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065c4:	e00a      	b.n	80065dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f7fc fb9d 	bl	8002d04 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e151      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065dc:	4b80      	ldr	r3, [pc, #512]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ed      	bne.n	80065c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065ea:	7ffb      	ldrb	r3, [r7, #31]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d105      	bne.n	80065fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f0:	4b7b      	ldr	r3, [pc, #492]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f4:	4a7a      	ldr	r2, [pc, #488]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80065f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d03c      	beq.n	8006682 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01c      	beq.n	800664a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006610:	4b73      	ldr	r3, [pc, #460]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006616:	4a72      	ldr	r2, [pc, #456]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7fc fb70 	bl	8002d04 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006628:	f7fc fb6c 	bl	8002d04 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e122      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800663a:	4b69      	ldr	r3, [pc, #420]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800663c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0ef      	beq.n	8006628 <HAL_RCC_OscConfig+0x5cc>
 8006648:	e01b      	b.n	8006682 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800664a:	4b65      	ldr	r3, [pc, #404]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800664c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006650:	4a63      	ldr	r2, [pc, #396]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665a:	f7fc fb53 	bl	8002d04 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006662:	f7fc fb4f 	bl	8002d04 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e105      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006674:	4b5a      	ldr	r3, [pc, #360]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1ef      	bne.n	8006662 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 80f9 	beq.w	800687e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	2b02      	cmp	r3, #2
 8006692:	f040 80cf 	bne.w	8006834 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006696:	4b52      	ldr	r3, [pc, #328]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f003 0203 	and.w	r2, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d12c      	bne.n	8006704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	3b01      	subs	r3, #1
 80066b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d123      	bne.n	8006704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d11b      	bne.n	8006704 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066d8:	429a      	cmp	r2, r3
 80066da:	d113      	bne.n	8006704 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	3b01      	subs	r3, #1
 80066ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d109      	bne.n	8006704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	3b01      	subs	r3, #1
 80066fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006700:	429a      	cmp	r2, r3
 8006702:	d071      	beq.n	80067e8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b0c      	cmp	r3, #12
 8006708:	d068      	beq.n	80067dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800670a:	4b35      	ldr	r3, [pc, #212]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d105      	bne.n	8006722 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006716:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e0ac      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006726:	4b2e      	ldr	r3, [pc, #184]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2d      	ldr	r2, [pc, #180]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800672c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006730:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006732:	f7fc fae7 	bl	8002d04 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673a:	f7fc fae3 	bl	8002d04 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e099      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800674c:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1f0      	bne.n	800673a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006758:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <HAL_RCC_OscConfig+0x788>)
 800675e:	4013      	ands	r3, r2
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006768:	3a01      	subs	r2, #1
 800676a:	0112      	lsls	r2, r2, #4
 800676c:	4311      	orrs	r1, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006772:	0212      	lsls	r2, r2, #8
 8006774:	4311      	orrs	r1, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800677a:	0852      	lsrs	r2, r2, #1
 800677c:	3a01      	subs	r2, #1
 800677e:	0552      	lsls	r2, r2, #21
 8006780:	4311      	orrs	r1, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006786:	0852      	lsrs	r2, r2, #1
 8006788:	3a01      	subs	r2, #1
 800678a:	0652      	lsls	r2, r2, #25
 800678c:	4311      	orrs	r1, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006792:	06d2      	lsls	r2, r2, #27
 8006794:	430a      	orrs	r2, r1
 8006796:	4912      	ldr	r1, [pc, #72]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 8006798:	4313      	orrs	r3, r2
 800679a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0f      	ldr	r2, [pc, #60]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80067a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80067ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067b4:	f7fc faa6 	bl	8002d04 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067bc:	f7fc faa2 	bl	8002d04 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e058      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <HAL_RCC_OscConfig+0x784>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f0      	beq.n	80067bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067da:	e050      	b.n	800687e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e04f      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
 80067e0:	40021000 	.word	0x40021000
 80067e4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067e8:	4b27      	ldr	r3, [pc, #156]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d144      	bne.n	800687e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80067f4:	4b24      	ldr	r3, [pc, #144]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a23      	ldr	r2, [pc, #140]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 80067fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006800:	4b21      	ldr	r3, [pc, #132]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4a20      	ldr	r2, [pc, #128]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 8006806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800680a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800680c:	f7fc fa7a 	bl	8002d04 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006814:	f7fc fa76 	bl	8002d04 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e02c      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006826:	4b18      	ldr	r3, [pc, #96]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x7b8>
 8006832:	e024      	b.n	800687e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b0c      	cmp	r3, #12
 8006838:	d01f      	beq.n	800687a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683a:	4b13      	ldr	r3, [pc, #76]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a12      	ldr	r2, [pc, #72]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 8006840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006846:	f7fc fa5d 	bl	8002d04 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684e:	f7fc fa59 	bl	8002d04 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e00f      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006860:	4b09      	ldr	r3, [pc, #36]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f0      	bne.n	800684e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	4905      	ldr	r1, [pc, #20]	; (8006888 <HAL_RCC_OscConfig+0x82c>)
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_RCC_OscConfig+0x830>)
 8006874:	4013      	ands	r3, r2
 8006876:	60cb      	str	r3, [r1, #12]
 8006878:	e001      	b.n	800687e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3720      	adds	r7, #32
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40021000 	.word	0x40021000
 800688c:	feeefffc 	.word	0xfeeefffc

08006890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e11d      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b90      	ldr	r3, [pc, #576]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d910      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b8d      	ldr	r3, [pc, #564]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 020f 	bic.w	r2, r3, #15
 80068be:	498b      	ldr	r1, [pc, #556]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b89      	ldr	r3, [pc, #548]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e105      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d010      	beq.n	8006906 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d908      	bls.n	8006906 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f4:	4b7e      	ldr	r3, [pc, #504]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	497b      	ldr	r1, [pc, #492]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006902:	4313      	orrs	r3, r2
 8006904:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d079      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b03      	cmp	r3, #3
 8006918:	d11e      	bne.n	8006958 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800691a:	4b75      	ldr	r3, [pc, #468]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e0dc      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800692a:	f000 fa07 	bl	8006d3c <RCC_GetSysClockFreqFromPLLSource>
 800692e:	4603      	mov	r3, r0
 8006930:	4a70      	ldr	r2, [pc, #448]	; (8006af4 <HAL_RCC_ClockConfig+0x264>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d946      	bls.n	80069c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006936:	4b6e      	ldr	r3, [pc, #440]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d140      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006942:	4b6b      	ldr	r3, [pc, #428]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694a:	4a69      	ldr	r2, [pc, #420]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	e035      	b.n	80069c4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d107      	bne.n	8006970 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006960:	4b63      	ldr	r3, [pc, #396]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d115      	bne.n	8006998 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0b9      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d107      	bne.n	8006988 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006978:	4b5d      	ldr	r3, [pc, #372]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0ad      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006988:	4b59      	ldr	r3, [pc, #356]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0a5      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006998:	f000 f8b4 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 800699c:	4603      	mov	r3, r0
 800699e:	4a55      	ldr	r2, [pc, #340]	; (8006af4 <HAL_RCC_ClockConfig+0x264>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d90f      	bls.n	80069c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80069a4:	4b52      	ldr	r3, [pc, #328]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069b0:	4b4f      	ldr	r3, [pc, #316]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b8:	4a4d      	ldr	r2, [pc, #308]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069be:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069c0:	2380      	movs	r3, #128	; 0x80
 80069c2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069c4:	4b4a      	ldr	r3, [pc, #296]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f023 0203 	bic.w	r2, r3, #3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4947      	ldr	r1, [pc, #284]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d6:	f7fc f995 	bl	8002d04 <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069dc:	e00a      	b.n	80069f4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069de:	f7fc f991 	bl	8002d04 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e077      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f4:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 020c 	and.w	r2, r3, #12
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d1eb      	bne.n	80069de <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b80      	cmp	r3, #128	; 0x80
 8006a0a:	d105      	bne.n	8006a18 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	4a37      	ldr	r2, [pc, #220]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a16:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d010      	beq.n	8006a46 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d208      	bcs.n	8006a46 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a34:	4b2e      	ldr	r3, [pc, #184]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	492b      	ldr	r1, [pc, #172]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a46:	4b29      	ldr	r3, [pc, #164]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d210      	bcs.n	8006a76 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f023 020f 	bic.w	r2, r3, #15
 8006a5c:	4923      	ldr	r1, [pc, #140]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a64:	4b21      	ldr	r3, [pc, #132]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d001      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e036      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a82:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4918      	ldr	r1, [pc, #96]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d009      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aa0:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	4910      	ldr	r1, [pc, #64]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ab4:	f000 f826 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	091b      	lsrs	r3, r3, #4
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	490c      	ldr	r1, [pc, #48]	; (8006af8 <HAL_RCC_ClockConfig+0x268>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <HAL_RCC_ClockConfig+0x26c>)
 8006ad2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <HAL_RCC_ClockConfig+0x270>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fc f8c3 	bl	8002c64 <HAL_InitTick>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	73fb      	strb	r3, [r7, #15]

  return status;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40022000 	.word	0x40022000
 8006af0:	40021000 	.word	0x40021000
 8006af4:	04c4b400 	.word	0x04c4b400
 8006af8:	08011b44 	.word	0x08011b44
 8006afc:	20000020 	.word	0x20000020
 8006b00:	20000024 	.word	0x20000024

08006b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b089      	sub	sp, #36	; 0x24
 8006b08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b12:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
 8006b1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCC_GetSysClockFreq+0x34>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b0c      	cmp	r3, #12
 8006b30:	d121      	bne.n	8006b76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d11e      	bne.n	8006b76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b38:	4b34      	ldr	r3, [pc, #208]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d107      	bne.n	8006b54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b44:	4b31      	ldr	r3, [pc, #196]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	e005      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b54:	4b2d      	ldr	r3, [pc, #180]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b60:	4a2b      	ldr	r2, [pc, #172]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10d      	bne.n	8006b8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b7c:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e004      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b88:	4b22      	ldr	r3, [pc, #136]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d134      	bne.n	8006bfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b92:	4b1e      	ldr	r3, [pc, #120]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d003      	beq.n	8006baa <HAL_RCC_GetSysClockFreq+0xa6>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d003      	beq.n	8006bb0 <HAL_RCC_GetSysClockFreq+0xac>
 8006ba8:	e005      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006baa:	4b1a      	ldr	r3, [pc, #104]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bac:	617b      	str	r3, [r7, #20]
      break;
 8006bae:	e005      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bb2:	617b      	str	r3, [r7, #20]
      break;
 8006bb4:	e002      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	617b      	str	r3, [r7, #20]
      break;
 8006bba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bbc:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006bca:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	fb03 f202 	mul.w	r2, r3, r2
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006be2:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	0e5b      	lsrs	r3, r3, #25
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	3301      	adds	r3, #1
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3724      	adds	r7, #36	; 0x24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	08011b5c 	.word	0x08011b5c
 8006c14:	00f42400 	.word	0x00f42400

08006c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c1c:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000020 	.word	0x20000020

08006c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c34:	f7ff fff0 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	4904      	ldr	r1, [pc, #16]	; (8006c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c46:	5ccb      	ldrb	r3, [r1, r3]
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	40021000 	.word	0x40021000
 8006c58:	08011b54 	.word	0x08011b54

08006c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c60:	f7ff ffda 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	0adb      	lsrs	r3, r3, #11
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	4904      	ldr	r1, [pc, #16]	; (8006c84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40021000 	.word	0x40021000
 8006c84:	08011b54 	.word	0x08011b54

08006c88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ca0:	f7ff f8f8 	bl	8005e94 <HAL_PWREx_GetVoltageRange>
 8006ca4:	6178      	str	r0, [r7, #20]
 8006ca6:	e014      	b.n	8006cd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ca8:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006cb4:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006cc0:	f7ff f8e8 	bl	8005e94 <HAL_PWREx_GetVoltageRange>
 8006cc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd8:	d10b      	bne.n	8006cf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b80      	cmp	r3, #128	; 0x80
 8006cde:	d913      	bls.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2ba0      	cmp	r3, #160	; 0xa0
 8006ce4:	d902      	bls.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	e00d      	b.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006cec:	2301      	movs	r3, #1
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e00a      	b.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf6:	d902      	bls.n	8006cfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	e004      	b.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b70      	cmp	r3, #112	; 0x70
 8006d02:	d101      	bne.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d04:	2301      	movs	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f023 020f 	bic.w	r2, r3, #15
 8006d10:	4909      	ldr	r1, [pc, #36]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d001      	beq.n	8006d2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40022000 	.word	0x40022000

08006d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d42:	4b2d      	ldr	r3, [pc, #180]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d00b      	beq.n	8006d6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d825      	bhi.n	8006da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d008      	beq.n	8006d70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d11f      	bne.n	8006da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006d64:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006d66:	613b      	str	r3, [r7, #16]
    break;
 8006d68:	e01f      	b.n	8006daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006d6c:	613b      	str	r3, [r7, #16]
    break;
 8006d6e:	e01c      	b.n	8006daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d70:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d107      	bne.n	8006d8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e005      	b.n	8006d98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da0:	613b      	str	r3, [r7, #16]
    break;
 8006da2:	e002      	b.n	8006daa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
    break;
 8006da8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006daa:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	3301      	adds	r3, #1
 8006db6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006db8:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	0a1b      	lsrs	r3, r3, #8
 8006dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	fb03 f202 	mul.w	r2, r3, r2
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dd0:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	0e5b      	lsrs	r3, r3, #25
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	3301      	adds	r3, #1
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006dea:	683b      	ldr	r3, [r7, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	00f42400 	.word	0x00f42400
 8006e00:	08011b5c 	.word	0x08011b5c

08006e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e10:	2300      	movs	r3, #0
 8006e12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d040      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e24:	2b80      	cmp	r3, #128	; 0x80
 8006e26:	d02a      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d825      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006e2c:	2b60      	cmp	r3, #96	; 0x60
 8006e2e:	d026      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e30:	2b60      	cmp	r3, #96	; 0x60
 8006e32:	d821      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d006      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d81d      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d009      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d010      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006e44:	e018      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e46:	4b89      	ldr	r3, [pc, #548]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4a88      	ldr	r2, [pc, #544]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e50:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e52:	e015      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 fa82 	bl	8008364 <RCCEx_PLLSAI1_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3320      	adds	r3, #32
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 fb6d 	bl	800854c <RCCEx_PLLSAI2_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	74fb      	strb	r3, [r7, #19]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e80:	7cfb      	ldrb	r3, [r7, #19]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e86:	4b79      	ldr	r3, [pc, #484]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e8c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e94:	4975      	ldr	r1, [pc, #468]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006e9c:	e001      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ea0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d047      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d030      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebc:	d82a      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec2:	d02a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec8:	d824      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ece:	d008      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed4:	d81e      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ede:	d010      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ee0:	e018      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ee2:	4b62      	ldr	r3, [pc, #392]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	4a61      	ldr	r2, [pc, #388]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006eee:	e015      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 fa34 	bl	8008364 <RCCEx_PLLSAI1_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f00:	e00c      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3320      	adds	r3, #32
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 fb1f 	bl	800854c <RCCEx_PLLSAI2_Config>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f12:	e003      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	74fb      	strb	r3, [r7, #19]
      break;
 8006f18:	e000      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f22:	4b52      	ldr	r3, [pc, #328]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f30:	494e      	ldr	r1, [pc, #312]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006f38:	e001      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3a:	7cfb      	ldrb	r3, [r7, #19]
 8006f3c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 809f 	beq.w	800708a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f50:	4b46      	ldr	r3, [pc, #280]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f66:	4b41      	ldr	r3, [pc, #260]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	4a40      	ldr	r2, [pc, #256]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f70:	6593      	str	r3, [r2, #88]	; 0x58
 8006f72:	4b3e      	ldr	r3, [pc, #248]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	60bb      	str	r3, [r7, #8]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f82:	4b3b      	ldr	r3, [pc, #236]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a3a      	ldr	r2, [pc, #232]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f8e:	f7fb feb9 	bl	8002d04 <HAL_GetTick>
 8006f92:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f94:	e009      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f96:	f7fb feb5 	bl	8002d04 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d902      	bls.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	74fb      	strb	r3, [r7, #19]
        break;
 8006fa8:	e005      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ef      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006fb6:	7cfb      	ldrb	r3, [r7, #19]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d15b      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01f      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d019      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fda:	4b24      	ldr	r3, [pc, #144]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fe6:	4b21      	ldr	r3, [pc, #132]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fec:	4a1f      	ldr	r2, [pc, #124]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	4a1b      	ldr	r2, [pc, #108]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d016      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fb fe74 	bl	8002d04 <HAL_GetTick>
 800701c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800701e:	e00b      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007020:	f7fb fe70 	bl	8002d04 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f241 3288 	movw	r2, #5000	; 0x1388
 800702e:	4293      	cmp	r3, r2
 8007030:	d902      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	74fb      	strb	r3, [r7, #19]
            break;
 8007036:	e006      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007038:	4b0c      	ldr	r3, [pc, #48]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0ec      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007046:	7cfb      	ldrb	r3, [r7, #19]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10c      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800704c:	4b07      	ldr	r3, [pc, #28]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800705c:	4903      	ldr	r1, [pc, #12]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800705e:	4313      	orrs	r3, r2
 8007060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007064:	e008      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	74bb      	strb	r3, [r7, #18]
 800706a:	e005      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800706c:	40021000 	.word	0x40021000
 8007070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	7cfb      	ldrb	r3, [r7, #19]
 8007076:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007078:	7c7b      	ldrb	r3, [r7, #17]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d105      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800707e:	4ba0      	ldr	r3, [pc, #640]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	4a9f      	ldr	r2, [pc, #636]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007088:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007096:	4b9a      	ldr	r3, [pc, #616]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	f023 0203 	bic.w	r2, r3, #3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a4:	4996      	ldr	r1, [pc, #600]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070b8:	4b91      	ldr	r3, [pc, #580]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f023 020c 	bic.w	r2, r3, #12
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	498e      	ldr	r1, [pc, #568]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070da:	4b89      	ldr	r3, [pc, #548]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e8:	4985      	ldr	r1, [pc, #532]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070fc:	4b80      	ldr	r3, [pc, #512]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007102:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710a:	497d      	ldr	r1, [pc, #500]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800711e:	4b78      	ldr	r3, [pc, #480]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712c:	4974      	ldr	r1, [pc, #464]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007140:	4b6f      	ldr	r3, [pc, #444]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714e:	496c      	ldr	r1, [pc, #432]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007162:	4b67      	ldr	r3, [pc, #412]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007168:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007170:	4963      	ldr	r1, [pc, #396]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007184:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007192:	495b      	ldr	r1, [pc, #364]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071a6:	4b56      	ldr	r3, [pc, #344]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b4:	4952      	ldr	r1, [pc, #328]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071c8:	4b4d      	ldr	r3, [pc, #308]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d6:	494a      	ldr	r1, [pc, #296]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ea:	4b45      	ldr	r3, [pc, #276]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f8:	4941      	ldr	r1, [pc, #260]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800720c:	4b3c      	ldr	r3, [pc, #240]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800720e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007212:	f023 0203 	bic.w	r2, r3, #3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721a:	4939      	ldr	r1, [pc, #228]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800721c:	4313      	orrs	r3, r2
 800721e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d028      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800722e:	4b34      	ldr	r3, [pc, #208]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800723c:	4930      	ldr	r1, [pc, #192]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724c:	d106      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800724e:	4b2c      	ldr	r3, [pc, #176]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	4a2b      	ldr	r2, [pc, #172]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007258:	60d3      	str	r3, [r2, #12]
 800725a:	e011      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007264:	d10c      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3304      	adds	r3, #4
 800726a:	2101      	movs	r1, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f001 f879 	bl	8008364 <RCCEx_PLLSAI1_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007276:	7cfb      	ldrb	r3, [r7, #19]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800727c:	7cfb      	ldrb	r3, [r7, #19]
 800727e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d04d      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007294:	d108      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007296:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800729c:	4a18      	ldr	r2, [pc, #96]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800729e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80072a6:	e012      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072ae:	4a14      	ldr	r2, [pc, #80]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c6:	490e      	ldr	r1, [pc, #56]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072d6:	d106      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072e2:	60d3      	str	r3, [r2, #12]
 80072e4:	e020      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ee:	d109      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072f0:	4b03      	ldr	r3, [pc, #12]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a02      	ldr	r2, [pc, #8]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fa:	60d3      	str	r3, [r2, #12]
 80072fc:	e014      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80072fe:	bf00      	nop
 8007300:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800730c:	d10c      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3304      	adds	r3, #4
 8007312:	2101      	movs	r1, #1
 8007314:	4618      	mov	r0, r3
 8007316:	f001 f825 	bl	8008364 <RCCEx_PLLSAI1_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800731e:	7cfb      	ldrb	r3, [r7, #19]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007324:	7cfb      	ldrb	r3, [r7, #19]
 8007326:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d028      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007334:	4b7a      	ldr	r3, [pc, #488]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007342:	4977      	ldr	r1, [pc, #476]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800734e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007352:	d106      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007354:	4b72      	ldr	r3, [pc, #456]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4a71      	ldr	r2, [pc, #452]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800735a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800735e:	60d3      	str	r3, [r2, #12]
 8007360:	e011      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800736a:	d10c      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	2101      	movs	r1, #1
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fff6 	bl	8008364 <RCCEx_PLLSAI1_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800737c:	7cfb      	ldrb	r3, [r7, #19]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007382:	7cfb      	ldrb	r3, [r7, #19]
 8007384:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d01e      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007392:	4b63      	ldr	r3, [pc, #396]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007398:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073a2:	495f      	ldr	r1, [pc, #380]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073b4:	d10c      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3304      	adds	r3, #4
 80073ba:	2102      	movs	r1, #2
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 ffd1 	bl	8008364 <RCCEx_PLLSAI1_Config>
 80073c2:	4603      	mov	r3, r0
 80073c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073c6:	7cfb      	ldrb	r3, [r7, #19]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80073cc:	7cfb      	ldrb	r3, [r7, #19]
 80073ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073dc:	4b50      	ldr	r3, [pc, #320]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80073de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073e2:	f023 0204 	bic.w	r2, r3, #4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ec:	494c      	ldr	r1, [pc, #304]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007400:	4b47      	ldr	r3, [pc, #284]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007406:	f023 0218 	bic.w	r2, r3, #24
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	4943      	ldr	r1, [pc, #268]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d035      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007424:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3d      	ldr	r2, [pc, #244]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800742a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800742e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007430:	f7fb fc68 	bl	8002d04 <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007436:	e009      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007438:	f7fb fc64 	bl	8002d04 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d902      	bls.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	74fb      	strb	r3, [r7, #19]
        break;
 800744a:	e005      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800744c:	4b34      	ldr	r3, [pc, #208]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ef      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007458:	7cfb      	ldrb	r3, [r7, #19]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d113      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800745e:	4b30      	ldr	r3, [pc, #192]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007460:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800746e:	492c      	ldr	r1, [pc, #176]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3320      	adds	r3, #32
 800747a:	2102      	movs	r1, #2
 800747c:	4618      	mov	r0, r3
 800747e:	f001 f865 	bl	800854c <RCCEx_PLLSAI2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007486:	7cfb      	ldrb	r3, [r7, #19]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800748c:	7cfb      	ldrb	r3, [r7, #19]
 800748e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01e      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800749c:	4b20      	ldr	r3, [pc, #128]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800749e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ac:	491c      	ldr	r1, [pc, #112]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074be:	d10c      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3320      	adds	r3, #32
 80074c4:	2101      	movs	r1, #1
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 f840 	bl	800854c <RCCEx_PLLSAI2_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074d0:	7cfb      	ldrb	r3, [r7, #19]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80074d6:	7cfb      	ldrb	r3, [r7, #19]
 80074d8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d017      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074f6:	490a      	ldr	r1, [pc, #40]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007508:	d105      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4a04      	ldr	r2, [pc, #16]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007514:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007516:	7cbb      	ldrb	r3, [r7, #18]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40021000 	.word	0x40021000

08007524 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007536:	d13e      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007538:	4bb6      	ldr	r3, [pc, #728]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800754a:	d028      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007552:	f200 86f2 	bhi.w	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755c:	d005      	beq.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007564:	d00e      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007566:	f000 bee8 	b.w	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800756a:	4baa      	ldr	r3, [pc, #680]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	f040 86e2 	bne.w	800833e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800757a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757e:	61fb      	str	r3, [r7, #28]
      break;
 8007580:	f000 bedd 	b.w	800833e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007584:	4ba3      	ldr	r3, [pc, #652]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	f040 86d7 	bne.w	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8007594:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007598:	61fb      	str	r3, [r7, #28]
      break;
 800759a:	f000 bed2 	b.w	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800759e:	4b9d      	ldr	r3, [pc, #628]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075aa:	f040 86cc 	bne.w	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 80075ae:	4b9a      	ldr	r3, [pc, #616]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075b0:	61fb      	str	r3, [r7, #28]
      break;
 80075b2:	f000 bec8 	b.w	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075b6:	4b97      	ldr	r3, [pc, #604]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d036      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d840      	bhi.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d003      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d020      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80075d8:	e039      	b.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80075da:	4b8e      	ldr	r3, [pc, #568]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d116      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80075e6:	4b8b      	ldr	r3, [pc, #556]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0308 	and.w	r3, r3, #8
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80075f2:	4b88      	ldr	r3, [pc, #544]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	091b      	lsrs	r3, r3, #4
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	e005      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80075fe:	4b85      	ldr	r3, [pc, #532]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	4a84      	ldr	r2, [pc, #528]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800760c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007610:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007612:	e01f      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	61bb      	str	r3, [r7, #24]
      break;
 8007618:	e01c      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800761a:	4b7e      	ldr	r3, [pc, #504]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007626:	d102      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007628:	4b7d      	ldr	r3, [pc, #500]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800762a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800762c:	e012      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	61bb      	str	r3, [r7, #24]
      break;
 8007632:	e00f      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007634:	4b77      	ldr	r3, [pc, #476]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007640:	d102      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007642:	4b77      	ldr	r3, [pc, #476]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007644:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007646:	e005      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	61bb      	str	r3, [r7, #24]
      break;
 800764c:	e002      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	61bb      	str	r3, [r7, #24]
      break;
 8007652:	bf00      	nop
    }

    switch(PeriphClk)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800765a:	f000 8604 	beq.w	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007664:	f200 8671 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800766e:	f000 8467 	beq.w	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007678:	f200 8667 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007682:	f000 852f 	beq.w	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768c:	f200 865d 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007696:	f000 8185 	beq.w	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076a0:	f200 8653 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076aa:	f000 80cb 	beq.w	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076b4:	f200 8649 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076be:	f000 842e 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c8:	f200 863f 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076d2:	f000 83e2 	beq.w	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076dc:	f200 8635 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e6:	f000 80ad 	beq.w	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f0:	f200 862b 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fa:	f000 809b 	beq.w	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007704:	f200 8621 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800770e:	f000 8089 	beq.w	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007718:	f200 8617 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007722:	f000 8552 	beq.w	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772c:	f200 860d 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007736:	f000 84fe 	beq.w	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007740:	f200 8603 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774a:	f000 849f 	beq.w	800808c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007754:	f200 85f9 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b80      	cmp	r3, #128	; 0x80
 800775c:	f000 846a 	beq.w	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b80      	cmp	r3, #128	; 0x80
 8007764:	f200 85f1 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b20      	cmp	r3, #32
 800776c:	d84c      	bhi.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 85ea 	beq.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3b01      	subs	r3, #1
 800777a:	2b1f      	cmp	r3, #31
 800777c:	f200 85e5 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	08007b99 	.word	0x08007b99
 800778c:	08007c07 	.word	0x08007c07
 8007790:	0800834b 	.word	0x0800834b
 8007794:	08007c9b 	.word	0x08007c9b
 8007798:	0800834b 	.word	0x0800834b
 800779c:	0800834b 	.word	0x0800834b
 80077a0:	0800834b 	.word	0x0800834b
 80077a4:	08007d13 	.word	0x08007d13
 80077a8:	0800834b 	.word	0x0800834b
 80077ac:	0800834b 	.word	0x0800834b
 80077b0:	0800834b 	.word	0x0800834b
 80077b4:	0800834b 	.word	0x0800834b
 80077b8:	0800834b 	.word	0x0800834b
 80077bc:	0800834b 	.word	0x0800834b
 80077c0:	0800834b 	.word	0x0800834b
 80077c4:	08007d97 	.word	0x08007d97
 80077c8:	0800834b 	.word	0x0800834b
 80077cc:	0800834b 	.word	0x0800834b
 80077d0:	0800834b 	.word	0x0800834b
 80077d4:	0800834b 	.word	0x0800834b
 80077d8:	0800834b 	.word	0x0800834b
 80077dc:	0800834b 	.word	0x0800834b
 80077e0:	0800834b 	.word	0x0800834b
 80077e4:	0800834b 	.word	0x0800834b
 80077e8:	0800834b 	.word	0x0800834b
 80077ec:	0800834b 	.word	0x0800834b
 80077f0:	0800834b 	.word	0x0800834b
 80077f4:	0800834b 	.word	0x0800834b
 80077f8:	0800834b 	.word	0x0800834b
 80077fc:	0800834b 	.word	0x0800834b
 8007800:	0800834b 	.word	0x0800834b
 8007804:	08007e19 	.word	0x08007e19
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b40      	cmp	r3, #64	; 0x40
 800780c:	f000 83e6 	beq.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007810:	f000 bd9b 	b.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007814:	40021000 	.word	0x40021000
 8007818:	0007a120 	.word	0x0007a120
 800781c:	08011b5c 	.word	0x08011b5c
 8007820:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007824:	69b9      	ldr	r1, [r7, #24]
 8007826:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800782a:	f000 ff83 	bl	8008734 <RCCEx_GetSAIxPeriphCLKFreq>
 800782e:	61f8      	str	r0, [r7, #28]
      break;
 8007830:	f000 bd8e 	b.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007834:	69b9      	ldr	r1, [r7, #24]
 8007836:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800783a:	f000 ff7b 	bl	8008734 <RCCEx_GetSAIxPeriphCLKFreq>
 800783e:	61f8      	str	r0, [r7, #28]
      break;
 8007840:	f000 bd86 	b.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007844:	4b9a      	ldr	r3, [pc, #616]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007856:	d015      	beq.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800785e:	f200 8092 	bhi.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007868:	d029      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007870:	f200 8089 	bhi.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d07b      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007880:	d04a      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8007882:	e080      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007884:	4b8a      	ldr	r3, [pc, #552]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b02      	cmp	r3, #2
 800788e:	d17d      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007890:	4b87      	ldr	r3, [pc, #540]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 800789c:	4b84      	ldr	r3, [pc, #528]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	e005      	b.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80078a8:	4b81      	ldr	r3, [pc, #516]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	4a7f      	ldr	r2, [pc, #508]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ba:	61fb      	str	r3, [r7, #28]
          break;
 80078bc:	e066      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80078be:	4b7c      	ldr	r3, [pc, #496]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078ca:	d162      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80078cc:	4b78      	ldr	r3, [pc, #480]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d8:	d15b      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80078da:	4b75      	ldr	r3, [pc, #468]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	fb03 f202 	mul.w	r2, r3, r2
 80078ee:	4b70      	ldr	r3, [pc, #448]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	3301      	adds	r3, #1
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007900:	4b6b      	ldr	r3, [pc, #428]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	0d5b      	lsrs	r3, r3, #21
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	3301      	adds	r3, #1
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	61fb      	str	r3, [r7, #28]
          break;
 8007916:	e03c      	b.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007918:	4b65      	ldr	r3, [pc, #404]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007924:	d138      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007926:	4b62      	ldr	r3, [pc, #392]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800792e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007932:	d131      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007934:	4b5e      	ldr	r3, [pc, #376]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	fb03 f202 	mul.w	r2, r3, r2
 8007948:	4b59      	ldr	r3, [pc, #356]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	091b      	lsrs	r3, r3, #4
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	3301      	adds	r3, #1
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800795a:	4b55      	ldr	r3, [pc, #340]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	0d5b      	lsrs	r3, r3, #21
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	3301      	adds	r3, #1
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	61fb      	str	r3, [r7, #28]
          break;
 8007970:	e012      	b.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007972:	4b4f      	ldr	r3, [pc, #316]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d10e      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8007980:	4b4d      	ldr	r3, [pc, #308]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007982:	61fb      	str	r3, [r7, #28]
          break;
 8007984:	e00b      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8007986:	bf00      	nop
 8007988:	f000 bce2 	b.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800798c:	bf00      	nop
 800798e:	f000 bcdf 	b.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007992:	bf00      	nop
 8007994:	f000 bcdc 	b.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007998:	bf00      	nop
 800799a:	f000 bcd9 	b.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800799e:	bf00      	nop
        break;
 80079a0:	f000 bcd6 	b.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80079a4:	4b42      	ldr	r3, [pc, #264]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079b2:	d13d      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80079b4:	4b3e      	ldr	r3, [pc, #248]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079c0:	f040 84c5 	bne.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80079c4:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d0:	f040 84bd 	bne.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80079d4:	4b36      	ldr	r3, [pc, #216]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079de:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	fb03 f202 	mul.w	r2, r3, r2
 80079e8:	4b31      	ldr	r3, [pc, #196]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	3301      	adds	r3, #1
 80079f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80079fa:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	0edb      	lsrs	r3, r3, #27
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007a0c:	4b28      	ldr	r3, [pc, #160]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8007a18:	2311      	movs	r3, #17
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e001      	b.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8007a1e:	2307      	movs	r3, #7
 8007a20:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2a:	61fb      	str	r3, [r7, #28]
      break;
 8007a2c:	f000 bc8f 	b.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007a30:	4b1f      	ldr	r3, [pc, #124]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a36:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a42:	d016      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a4a:	f200 809b 	bhi.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a54:	d032      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a5c:	f200 8092 	bhi.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8084 	beq.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a6e:	d052      	beq.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8007a70:	e088      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	f040 8084 	bne.w	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8007a8c:	4b08      	ldr	r3, [pc, #32]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	e005      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a9e:	0a1b      	lsrs	r3, r3, #8
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	4a03      	ldr	r2, [pc, #12]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aaa:	61fb      	str	r3, [r7, #28]
          break;
 8007aac:	e06c      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007aae:	bf00      	nop
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	08011b5c 	.word	0x08011b5c
 8007ab8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007abc:	4ba5      	ldr	r3, [pc, #660]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ac8:	d160      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007aca:	4ba2      	ldr	r3, [pc, #648]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad6:	d159      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ad8:	4b9e      	ldr	r3, [pc, #632]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	fb03 f202 	mul.w	r2, r3, r2
 8007aec:	4b99      	ldr	r3, [pc, #612]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	091b      	lsrs	r3, r3, #4
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	3301      	adds	r3, #1
 8007af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007afe:	4b95      	ldr	r3, [pc, #596]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	0d5b      	lsrs	r3, r3, #21
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	3301      	adds	r3, #1
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b12:	61fb      	str	r3, [r7, #28]
          break;
 8007b14:	e03a      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007b16:	4b8f      	ldr	r3, [pc, #572]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b22:	d135      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007b24:	4b8b      	ldr	r3, [pc, #556]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b30:	d12e      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007b32:	4b88      	ldr	r3, [pc, #544]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	fb03 f202 	mul.w	r2, r3, r2
 8007b46:	4b83      	ldr	r3, [pc, #524]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	091b      	lsrs	r3, r3, #4
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	3301      	adds	r3, #1
 8007b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b56:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007b58:	4b7e      	ldr	r3, [pc, #504]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	0d5b      	lsrs	r3, r3, #21
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	3301      	adds	r3, #1
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	61fb      	str	r3, [r7, #28]
          break;
 8007b6e:	e00f      	b.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007b70:	4b78      	ldr	r3, [pc, #480]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d10a      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8007b7e:	4b76      	ldr	r3, [pc, #472]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b80:	61fb      	str	r3, [r7, #28]
          break;
 8007b82:	e007      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8007b84:	bf00      	nop
 8007b86:	e3e2      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8007b88:	bf00      	nop
 8007b8a:	e3e0      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8007b8c:	bf00      	nop
 8007b8e:	e3de      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8007b90:	bf00      	nop
 8007b92:	e3dc      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8007b94:	bf00      	nop
      break;
 8007b96:	e3da      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b98:	4b6e      	ldr	r3, [pc, #440]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d827      	bhi.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bd1 	.word	0x08007bd1
 8007bbc:	08007be5 	.word	0x08007be5
          frequency = HAL_RCC_GetPCLK2Freq();
 8007bc0:	f7ff f84c 	bl	8006c5c <HAL_RCC_GetPCLK2Freq>
 8007bc4:	61f8      	str	r0, [r7, #28]
          break;
 8007bc6:	e01d      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bc8:	f7fe ff9c 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007bcc:	61f8      	str	r0, [r7, #28]
          break;
 8007bce:	e019      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bd0:	4b60      	ldr	r3, [pc, #384]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bdc:	d10f      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8007bde:	4b5f      	ldr	r3, [pc, #380]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007be0:	61fb      	str	r3, [r7, #28]
          break;
 8007be2:	e00c      	b.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007be4:	4b5b      	ldr	r3, [pc, #364]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d107      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8007bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf6:	61fb      	str	r3, [r7, #28]
          break;
 8007bf8:	e003      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8007bfa:	bf00      	nop
 8007bfc:	e3a8      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007bfe:	bf00      	nop
 8007c00:	e3a6      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c02:	bf00      	nop
        break;
 8007c04:	e3a4      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007c06:	4b53      	ldr	r3, [pc, #332]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0c:	f003 030c 	and.w	r3, r3, #12
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b0c      	cmp	r3, #12
 8007c16:	d83a      	bhi.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c55 	.word	0x08007c55
 8007c24:	08007c8f 	.word	0x08007c8f
 8007c28:	08007c8f 	.word	0x08007c8f
 8007c2c:	08007c8f 	.word	0x08007c8f
 8007c30:	08007c5d 	.word	0x08007c5d
 8007c34:	08007c8f 	.word	0x08007c8f
 8007c38:	08007c8f 	.word	0x08007c8f
 8007c3c:	08007c8f 	.word	0x08007c8f
 8007c40:	08007c65 	.word	0x08007c65
 8007c44:	08007c8f 	.word	0x08007c8f
 8007c48:	08007c8f 	.word	0x08007c8f
 8007c4c:	08007c8f 	.word	0x08007c8f
 8007c50:	08007c79 	.word	0x08007c79
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c54:	f7fe ffec 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007c58:	61f8      	str	r0, [r7, #28]
          break;
 8007c5a:	e01d      	b.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c5c:	f7fe ff52 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007c60:	61f8      	str	r0, [r7, #28]
          break;
 8007c62:	e019      	b.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c64:	4b3b      	ldr	r3, [pc, #236]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d10f      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8007c72:	4b3a      	ldr	r3, [pc, #232]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007c74:	61fb      	str	r3, [r7, #28]
          break;
 8007c76:	e00c      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c78:	4b36      	ldr	r3, [pc, #216]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d107      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8007c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8a:	61fb      	str	r3, [r7, #28]
          break;
 8007c8c:	e003      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8007c8e:	bf00      	nop
 8007c90:	e35e      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c92:	bf00      	nop
 8007c94:	e35c      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c96:	bf00      	nop
        break;
 8007c98:	e35a      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007c9a:	4b2e      	ldr	r3, [pc, #184]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b30      	cmp	r3, #48	; 0x30
 8007caa:	d021      	beq.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b30      	cmp	r3, #48	; 0x30
 8007cb0:	d829      	bhi.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d011      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d823      	bhi.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b10      	cmp	r3, #16
 8007cc8:	d004      	beq.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8007cca:	e01c      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fe ffb0 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007cd0:	61f8      	str	r0, [r7, #28]
          break;
 8007cd2:	e01d      	b.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8007cd4:	f7fe ff16 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007cd8:	61f8      	str	r0, [r7, #28]
          break;
 8007cda:	e019      	b.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cdc:	4b1d      	ldr	r3, [pc, #116]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce8:	d10f      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8007cea:	4b1c      	ldr	r3, [pc, #112]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007cec:	61fb      	str	r3, [r7, #28]
          break;
 8007cee:	e00c      	b.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007cf0:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d107      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8007cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d02:	61fb      	str	r3, [r7, #28]
          break;
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8007d06:	bf00      	nop
 8007d08:	e322      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007d0a:	bf00      	nop
 8007d0c:	e320      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007d0e:	bf00      	nop
        break;
 8007d10:	e31e      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2bc0      	cmp	r3, #192	; 0xc0
 8007d22:	d027      	beq.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2bc0      	cmp	r3, #192	; 0xc0
 8007d28:	d82f      	bhi.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b80      	cmp	r3, #128	; 0x80
 8007d2e:	d017      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d829      	bhi.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b40      	cmp	r3, #64	; 0x40
 8007d40:	d004      	beq.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8007d42:	e022      	b.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fe ff74 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007d48:	61f8      	str	r0, [r7, #28]
          break;
 8007d4a:	e023      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d4c:	f7fe feda 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007d50:	61f8      	str	r0, [r7, #28]
          break;
 8007d52:	e01f      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8007d54:	40021000 	.word	0x40021000
 8007d58:	02dc6c00 	.word	0x02dc6c00
 8007d5c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d60:	4b9b      	ldr	r3, [pc, #620]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d6c:	d10f      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8007d6e:	4b99      	ldr	r3, [pc, #612]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d70:	61fb      	str	r3, [r7, #28]
          break;
 8007d72:	e00c      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d74:	4b96      	ldr	r3, [pc, #600]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d107      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8007d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d86:	61fb      	str	r3, [r7, #28]
          break;
 8007d88:	e003      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8007d8a:	bf00      	nop
 8007d8c:	e2e0      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007d8e:	bf00      	nop
 8007d90:	e2de      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007d92:	bf00      	nop
        break;
 8007d94:	e2dc      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007d96:	4b8e      	ldr	r3, [pc, #568]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da8:	d025      	beq.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db0:	d82c      	bhi.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db8:	d013      	beq.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc0:	d824      	bhi.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dce:	d004      	beq.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8007dd0:	e01c      	b.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007dd2:	f7fe ff2d 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007dd6:	61f8      	str	r0, [r7, #28]
          break;
 8007dd8:	e01d      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007dda:	f7fe fe93 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007dde:	61f8      	str	r0, [r7, #28]
          break;
 8007de0:	e019      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007de2:	4b7b      	ldr	r3, [pc, #492]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dee:	d10f      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8007df0:	4b78      	ldr	r3, [pc, #480]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007df2:	61fb      	str	r3, [r7, #28]
          break;
 8007df4:	e00c      	b.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007df6:	4b76      	ldr	r3, [pc, #472]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d107      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8007e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e08:	61fb      	str	r3, [r7, #28]
          break;
 8007e0a:	e003      	b.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8007e0c:	bf00      	nop
 8007e0e:	e29f      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007e10:	bf00      	nop
 8007e12:	e29d      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007e14:	bf00      	nop
        break;
 8007e16:	e29b      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007e18:	4b6d      	ldr	r3, [pc, #436]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e2a:	d025      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e32:	d82c      	bhi.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3a:	d013      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e42:	d824      	bhi.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e50:	d004      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8007e52:	e01c      	b.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e54:	f7fe feec 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007e58:	61f8      	str	r0, [r7, #28]
          break;
 8007e5a:	e01d      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e5c:	f7fe fe52 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007e60:	61f8      	str	r0, [r7, #28]
          break;
 8007e62:	e019      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e64:	4b5a      	ldr	r3, [pc, #360]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e70:	d10f      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8007e72:	4b58      	ldr	r3, [pc, #352]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e74:	61fb      	str	r3, [r7, #28]
          break;
 8007e76:	e00c      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e78:	4b55      	ldr	r3, [pc, #340]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d107      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8007e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e8a:	61fb      	str	r3, [r7, #28]
          break;
 8007e8c:	e003      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8007e8e:	bf00      	nop
 8007e90:	e25e      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007e92:	bf00      	nop
 8007e94:	e25c      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007e96:	bf00      	nop
        break;
 8007e98:	e25a      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007e9a:	4b4d      	ldr	r3, [pc, #308]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eac:	d007      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eb4:	d12f      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7fe fe25 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007eba:	61f8      	str	r0, [r7, #28]
          break;
 8007ebc:	e02e      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007ebe:	4b44      	ldr	r3, [pc, #272]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eca:	d126      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8007ecc:	4b40      	ldr	r3, [pc, #256]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d020      	beq.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007ed8:	4b3d      	ldr	r3, [pc, #244]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	0a1b      	lsrs	r3, r3, #8
 8007ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	fb03 f202 	mul.w	r2, r3, r2
 8007eec:	4b38      	ldr	r3, [pc, #224]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	091b      	lsrs	r3, r3, #4
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007efe:	4b34      	ldr	r3, [pc, #208]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	0e5b      	lsrs	r3, r3, #25
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	3301      	adds	r3, #1
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f12:	61fb      	str	r3, [r7, #28]
          break;
 8007f14:	e001      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8007f16:	bf00      	nop
 8007f18:	e21a      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007f1a:	bf00      	nop
        break;
 8007f1c:	e218      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007f1e:	4b2c      	ldr	r3, [pc, #176]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d103      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007f30:	f7fe fe94 	bl	8006c5c <HAL_RCC_GetPCLK2Freq>
 8007f34:	61f8      	str	r0, [r7, #28]
        break;
 8007f36:	e20b      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f38:	f7fe fde4 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8007f3c:	61f8      	str	r0, [r7, #28]
        break;
 8007f3e:	e207      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007f40:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f46:	f003 0318 	and.w	r3, r3, #24
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b10      	cmp	r3, #16
 8007f50:	d010      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	d834      	bhi.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d024      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8007f64:	e02d      	b.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007f66:	69b9      	ldr	r1, [r7, #24]
 8007f68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f6c:	f000 fbe2 	bl	8008734 <RCCEx_GetSAIxPeriphCLKFreq>
 8007f70:	61f8      	str	r0, [r7, #28]
          break;
 8007f72:	e02b      	b.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007f74:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d122      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007f80:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8007f8c:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	e005      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007f98:	4b0d      	ldr	r3, [pc, #52]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f9e:	0a1b      	lsrs	r3, r3, #8
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	4a0c      	ldr	r2, [pc, #48]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007faa:	61fb      	str	r3, [r7, #28]
          break;
 8007fac:	e00b      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fae:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fba:	d106      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007fbe:	61fb      	str	r3, [r7, #28]
          break;
 8007fc0:	e003      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8007fc2:	bf00      	nop
 8007fc4:	e1c4      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007fc6:	bf00      	nop
 8007fc8:	e1c2      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007fca:	bf00      	nop
        break;
 8007fcc:	e1c0      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007fce:	bf00      	nop
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	00f42400 	.word	0x00f42400
 8007fd8:	08011b5c 	.word	0x08011b5c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007fdc:	4b96      	ldr	r3, [pc, #600]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fee:	d013      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff6:	d819      	bhi.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008004:	d004      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8008006:	e011      	b.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008008:	f7fe fe12 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 800800c:	61f8      	str	r0, [r7, #28]
          break;
 800800e:	e010      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008010:	f7fe fd78 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8008014:	61f8      	str	r0, [r7, #28]
          break;
 8008016:	e00c      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008018:	4b87      	ldr	r3, [pc, #540]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008024:	d104      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8008026:	4b85      	ldr	r3, [pc, #532]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008028:	61fb      	str	r3, [r7, #28]
          break;
 800802a:	e001      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800802c:	bf00      	nop
 800802e:	e18f      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008030:	bf00      	nop
        break;
 8008032:	e18d      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008034:	4b80      	ldr	r3, [pc, #512]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008046:	d013      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804e:	d819      	bhi.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d004      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800805c:	d004      	beq.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800805e:	e011      	b.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008060:	f7fe fde6 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8008064:	61f8      	str	r0, [r7, #28]
          break;
 8008066:	e010      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8008068:	f7fe fd4c 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 800806c:	61f8      	str	r0, [r7, #28]
          break;
 800806e:	e00c      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008070:	4b71      	ldr	r3, [pc, #452]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807c:	d104      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800807e:	4b6f      	ldr	r3, [pc, #444]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008080:	61fb      	str	r3, [r7, #28]
          break;
 8008082:	e001      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8008084:	bf00      	nop
 8008086:	e163      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008088:	bf00      	nop
        break;
 800808a:	e161      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800808c:	4b6a      	ldr	r3, [pc, #424]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800808e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800809e:	d013      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080a6:	d819      	bhi.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b4:	d004      	beq.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80080b6:	e011      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080b8:	f7fe fdba 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 80080bc:	61f8      	str	r0, [r7, #28]
          break;
 80080be:	e010      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80080c0:	f7fe fd20 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 80080c4:	61f8      	str	r0, [r7, #28]
          break;
 80080c6:	e00c      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080c8:	4b5b      	ldr	r3, [pc, #364]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d4:	d104      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80080d6:	4b59      	ldr	r3, [pc, #356]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80080d8:	61fb      	str	r3, [r7, #28]
          break;
 80080da:	e001      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 80080dc:	bf00      	nop
 80080de:	e137      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80080e0:	bf00      	nop
        break;
 80080e2:	e135      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80080e4:	4b54      	ldr	r3, [pc, #336]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80080e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d011      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d818      	bhi.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d004      	beq.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8008108:	e011      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800810a:	f7fe fd91 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 800810e:	61f8      	str	r0, [r7, #28]
          break;
 8008110:	e010      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8008112:	f7fe fcf7 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8008116:	61f8      	str	r0, [r7, #28]
          break;
 8008118:	e00c      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800811a:	4b47      	ldr	r3, [pc, #284]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008126:	d104      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8008128:	4b44      	ldr	r3, [pc, #272]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800812a:	61fb      	str	r3, [r7, #28]
          break;
 800812c:	e001      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800812e:	bf00      	nop
 8008130:	e10e      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008132:	bf00      	nop
        break;
 8008134:	e10c      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008136:	4b40      	ldr	r3, [pc, #256]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008148:	d02c      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008150:	d833      	bhi.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008158:	d01a      	beq.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008160:	d82b      	bhi.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800816e:	d004      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8008170:	e023      	b.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008172:	f7fe fd5d 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8008176:	61f8      	str	r0, [r7, #28]
          break;
 8008178:	e026      	b.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800817a:	4b2f      	ldr	r3, [pc, #188]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800817c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b02      	cmp	r3, #2
 8008186:	d11a      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8008188:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800818c:	61fb      	str	r3, [r7, #28]
          break;
 800818e:	e016      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008190:	4b29      	ldr	r3, [pc, #164]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819c:	d111      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800819e:	4b27      	ldr	r3, [pc, #156]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80081a0:	61fb      	str	r3, [r7, #28]
          break;
 80081a2:	e00e      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d109      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80081b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b6:	61fb      	str	r3, [r7, #28]
          break;
 80081b8:	e005      	b.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80081ba:	bf00      	nop
 80081bc:	e0c8      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80081be:	bf00      	nop
 80081c0:	e0c6      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80081c2:	bf00      	nop
 80081c4:	e0c4      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80081c6:	bf00      	nop
        break;
 80081c8:	e0c2      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80081ca:	4b1b      	ldr	r3, [pc, #108]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081dc:	d030      	beq.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081e4:	d837      	bhi.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ec:	d01a      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081f4:	d82f      	bhi.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008202:	d004      	beq.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8008204:	e027      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008206:	f7fe fd13 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 800820a:	61f8      	str	r0, [r7, #28]
          break;
 800820c:	e02a      	b.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8008210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b02      	cmp	r3, #2
 800821a:	d11e      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800821c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008220:	61fb      	str	r3, [r7, #28]
          break;
 8008222:	e01a      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800822c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008230:	d115      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8008232:	4b02      	ldr	r3, [pc, #8]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008234:	61fb      	str	r3, [r7, #28]
          break;
 8008236:	e012      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8008238:	40021000 	.word	0x40021000
 800823c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008240:	4b46      	ldr	r3, [pc, #280]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8008242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b02      	cmp	r3, #2
 800824c:	d109      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800824e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008252:	61fb      	str	r3, [r7, #28]
          break;
 8008254:	e005      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8008256:	bf00      	nop
 8008258:	e07a      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800825a:	bf00      	nop
 800825c:	e078      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800825e:	bf00      	nop
 8008260:	e076      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008262:	bf00      	nop
        break;
 8008264:	e074      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008266:	4b3d      	ldr	r3, [pc, #244]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8008268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800826c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008278:	d02c      	beq.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008280:	d855      	bhi.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800828e:	d004      	beq.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8008290:	e04d      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008292:	f7fe fc37 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8008296:	61f8      	str	r0, [r7, #28]
          break;
 8008298:	e04e      	b.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800829a:	4b30      	ldr	r3, [pc, #192]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d145      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80082a6:	4b2d      	ldr	r3, [pc, #180]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80082b2:	4b2a      	ldr	r3, [pc, #168]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	e005      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80082be:	4b27      	ldr	r3, [pc, #156]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80082c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082c4:	0a1b      	lsrs	r3, r3, #8
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	4a25      	ldr	r2, [pc, #148]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80082cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d0:	61fb      	str	r3, [r7, #28]
          break;
 80082d2:	e02e      	b.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80082d4:	4b21      	ldr	r3, [pc, #132]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e0:	d129      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80082e2:	4b1e      	ldr	r3, [pc, #120]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ee:	d122      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80082f0:	4b1a      	ldr	r3, [pc, #104]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	fb03 f202 	mul.w	r2, r3, r2
 8008304:	4b15      	ldr	r3, [pc, #84]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	091b      	lsrs	r3, r3, #4
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	3301      	adds	r3, #1
 8008310:	fbb2 f3f3 	udiv	r3, r2, r3
 8008314:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008316:	4b11      	ldr	r3, [pc, #68]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	0d5b      	lsrs	r3, r3, #21
 800831c:	f003 0303 	and.w	r3, r3, #3
 8008320:	3301      	adds	r3, #1
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	fbb2 f3f3 	udiv	r3, r2, r3
 800832a:	61fb      	str	r3, [r7, #28]
          break;
 800832c:	e003      	b.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800832e:	bf00      	nop
 8008330:	e00e      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008332:	bf00      	nop
 8008334:	e00c      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8008336:	bf00      	nop
        break;
 8008338:	e00a      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800833a:	bf00      	nop
 800833c:	e008      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800833e:	bf00      	nop
 8008340:	e006      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8008342:	bf00      	nop
 8008344:	e004      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8008346:	bf00      	nop
 8008348:	e002      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800834e:	bf00      	nop
    }
  }

  return(frequency);
 8008350:	69fb      	ldr	r3, [r7, #28]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3720      	adds	r7, #32
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40021000 	.word	0x40021000
 8008360:	08011b5c 	.word	0x08011b5c

08008364 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008372:	4b72      	ldr	r3, [pc, #456]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00e      	beq.n	800839c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800837e:	4b6f      	ldr	r3, [pc, #444]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f003 0203 	and.w	r2, r3, #3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d103      	bne.n	8008396 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
       ||
 8008392:	2b00      	cmp	r3, #0
 8008394:	d142      	bne.n	800841c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	73fb      	strb	r3, [r7, #15]
 800839a:	e03f      	b.n	800841c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d018      	beq.n	80083d6 <RCCEx_PLLSAI1_Config+0x72>
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d825      	bhi.n	80083f4 <RCCEx_PLLSAI1_Config+0x90>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d002      	beq.n	80083b2 <RCCEx_PLLSAI1_Config+0x4e>
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d009      	beq.n	80083c4 <RCCEx_PLLSAI1_Config+0x60>
 80083b0:	e020      	b.n	80083f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80083b2:	4b62      	ldr	r3, [pc, #392]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d11d      	bne.n	80083fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083c2:	e01a      	b.n	80083fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80083c4:	4b5d      	ldr	r3, [pc, #372]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d116      	bne.n	80083fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083d4:	e013      	b.n	80083fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80083d6:	4b59      	ldr	r3, [pc, #356]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10f      	bne.n	8008402 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80083e2:	4b56      	ldr	r3, [pc, #344]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083f2:	e006      	b.n	8008402 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
      break;
 80083f8:	e004      	b.n	8008404 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80083fa:	bf00      	nop
 80083fc:	e002      	b.n	8008404 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80083fe:	bf00      	nop
 8008400:	e000      	b.n	8008404 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008402:	bf00      	nop
    }

    if(status == HAL_OK)
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d108      	bne.n	800841c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800840a:	4b4c      	ldr	r3, [pc, #304]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f023 0203 	bic.w	r2, r3, #3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4949      	ldr	r1, [pc, #292]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008418:	4313      	orrs	r3, r2
 800841a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f040 8086 	bne.w	8008530 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008424:	4b45      	ldr	r3, [pc, #276]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a44      	ldr	r2, [pc, #272]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 800842a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800842e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008430:	f7fa fc68 	bl	8002d04 <HAL_GetTick>
 8008434:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008436:	e009      	b.n	800844c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008438:	f7fa fc64 	bl	8002d04 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d902      	bls.n	800844c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	73fb      	strb	r3, [r7, #15]
        break;
 800844a:	e005      	b.n	8008458 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800844c:	4b3b      	ldr	r3, [pc, #236]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1ef      	bne.n	8008438 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d168      	bne.n	8008530 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d113      	bne.n	800848c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008464:	4b35      	ldr	r3, [pc, #212]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008466:	691a      	ldr	r2, [r3, #16]
 8008468:	4b35      	ldr	r3, [pc, #212]	; (8008540 <RCCEx_PLLSAI1_Config+0x1dc>)
 800846a:	4013      	ands	r3, r2
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6892      	ldr	r2, [r2, #8]
 8008470:	0211      	lsls	r1, r2, #8
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	68d2      	ldr	r2, [r2, #12]
 8008476:	06d2      	lsls	r2, r2, #27
 8008478:	4311      	orrs	r1, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6852      	ldr	r2, [r2, #4]
 800847e:	3a01      	subs	r2, #1
 8008480:	0112      	lsls	r2, r2, #4
 8008482:	430a      	orrs	r2, r1
 8008484:	492d      	ldr	r1, [pc, #180]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008486:	4313      	orrs	r3, r2
 8008488:	610b      	str	r3, [r1, #16]
 800848a:	e02d      	b.n	80084e8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d115      	bne.n	80084be <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008492:	4b2a      	ldr	r3, [pc, #168]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	4b2b      	ldr	r3, [pc, #172]	; (8008544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008498:	4013      	ands	r3, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6892      	ldr	r2, [r2, #8]
 800849e:	0211      	lsls	r1, r2, #8
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6912      	ldr	r2, [r2, #16]
 80084a4:	0852      	lsrs	r2, r2, #1
 80084a6:	3a01      	subs	r2, #1
 80084a8:	0552      	lsls	r2, r2, #21
 80084aa:	4311      	orrs	r1, r2
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6852      	ldr	r2, [r2, #4]
 80084b0:	3a01      	subs	r2, #1
 80084b2:	0112      	lsls	r2, r2, #4
 80084b4:	430a      	orrs	r2, r1
 80084b6:	4921      	ldr	r1, [pc, #132]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	610b      	str	r3, [r1, #16]
 80084bc:	e014      	b.n	80084e8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084be:	4b1f      	ldr	r3, [pc, #124]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	4b21      	ldr	r3, [pc, #132]	; (8008548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6892      	ldr	r2, [r2, #8]
 80084ca:	0211      	lsls	r1, r2, #8
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6952      	ldr	r2, [r2, #20]
 80084d0:	0852      	lsrs	r2, r2, #1
 80084d2:	3a01      	subs	r2, #1
 80084d4:	0652      	lsls	r2, r2, #25
 80084d6:	4311      	orrs	r1, r2
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6852      	ldr	r2, [r2, #4]
 80084dc:	3a01      	subs	r2, #1
 80084de:	0112      	lsls	r2, r2, #4
 80084e0:	430a      	orrs	r2, r1
 80084e2:	4916      	ldr	r1, [pc, #88]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80084e8:	4b14      	ldr	r3, [pc, #80]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a13      	ldr	r2, [pc, #76]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f4:	f7fa fc06 	bl	8002d04 <HAL_GetTick>
 80084f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80084fa:	e009      	b.n	8008510 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084fc:	f7fa fc02 	bl	8002d04 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d902      	bls.n	8008510 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	73fb      	strb	r3, [r7, #15]
          break;
 800850e:	e005      	b.n	800851c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0ef      	beq.n	80084fc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008524:	691a      	ldr	r2, [r3, #16]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	4904      	ldr	r1, [pc, #16]	; (800853c <RCCEx_PLLSAI1_Config+0x1d8>)
 800852c:	4313      	orrs	r3, r2
 800852e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40021000 	.word	0x40021000
 8008540:	07ff800f 	.word	0x07ff800f
 8008544:	ff9f800f 	.word	0xff9f800f
 8008548:	f9ff800f 	.word	0xf9ff800f

0800854c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800855a:	4b72      	ldr	r3, [pc, #456]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00e      	beq.n	8008584 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008566:	4b6f      	ldr	r3, [pc, #444]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	f003 0203 	and.w	r2, r3, #3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d103      	bne.n	800857e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
       ||
 800857a:	2b00      	cmp	r3, #0
 800857c:	d142      	bne.n	8008604 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]
 8008582:	e03f      	b.n	8008604 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b03      	cmp	r3, #3
 800858a:	d018      	beq.n	80085be <RCCEx_PLLSAI2_Config+0x72>
 800858c:	2b03      	cmp	r3, #3
 800858e:	d825      	bhi.n	80085dc <RCCEx_PLLSAI2_Config+0x90>
 8008590:	2b01      	cmp	r3, #1
 8008592:	d002      	beq.n	800859a <RCCEx_PLLSAI2_Config+0x4e>
 8008594:	2b02      	cmp	r3, #2
 8008596:	d009      	beq.n	80085ac <RCCEx_PLLSAI2_Config+0x60>
 8008598:	e020      	b.n	80085dc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800859a:	4b62      	ldr	r3, [pc, #392]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d11d      	bne.n	80085e2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085aa:	e01a      	b.n	80085e2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085ac:	4b5d      	ldr	r3, [pc, #372]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d116      	bne.n	80085e6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085bc:	e013      	b.n	80085e6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085be:	4b59      	ldr	r3, [pc, #356]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10f      	bne.n	80085ea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085ca:	4b56      	ldr	r3, [pc, #344]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085da:	e006      	b.n	80085ea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e004      	b.n	80085ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80085e2:	bf00      	nop
 80085e4:	e002      	b.n	80085ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80085e6:	bf00      	nop
 80085e8:	e000      	b.n	80085ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80085ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d108      	bne.n	8008604 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80085f2:	4b4c      	ldr	r3, [pc, #304]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f023 0203 	bic.w	r2, r3, #3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4949      	ldr	r1, [pc, #292]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008600:	4313      	orrs	r3, r2
 8008602:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f040 8086 	bne.w	8008718 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800860c:	4b45      	ldr	r3, [pc, #276]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a44      	ldr	r2, [pc, #272]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008618:	f7fa fb74 	bl	8002d04 <HAL_GetTick>
 800861c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800861e:	e009      	b.n	8008634 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008620:	f7fa fb70 	bl	8002d04 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	2b02      	cmp	r3, #2
 800862c:	d902      	bls.n	8008634 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	73fb      	strb	r3, [r7, #15]
        break;
 8008632:	e005      	b.n	8008640 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008634:	4b3b      	ldr	r3, [pc, #236]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1ef      	bne.n	8008620 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d168      	bne.n	8008718 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d113      	bne.n	8008674 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800864c:	4b35      	ldr	r3, [pc, #212]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800864e:	695a      	ldr	r2, [r3, #20]
 8008650:	4b35      	ldr	r3, [pc, #212]	; (8008728 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008652:	4013      	ands	r3, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6892      	ldr	r2, [r2, #8]
 8008658:	0211      	lsls	r1, r2, #8
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	68d2      	ldr	r2, [r2, #12]
 800865e:	06d2      	lsls	r2, r2, #27
 8008660:	4311      	orrs	r1, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6852      	ldr	r2, [r2, #4]
 8008666:	3a01      	subs	r2, #1
 8008668:	0112      	lsls	r2, r2, #4
 800866a:	430a      	orrs	r2, r1
 800866c:	492d      	ldr	r1, [pc, #180]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800866e:	4313      	orrs	r3, r2
 8008670:	614b      	str	r3, [r1, #20]
 8008672:	e02d      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d115      	bne.n	80086a6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800867a:	4b2a      	ldr	r3, [pc, #168]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800867c:	695a      	ldr	r2, [r3, #20]
 800867e:	4b2b      	ldr	r3, [pc, #172]	; (800872c <RCCEx_PLLSAI2_Config+0x1e0>)
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6892      	ldr	r2, [r2, #8]
 8008686:	0211      	lsls	r1, r2, #8
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6912      	ldr	r2, [r2, #16]
 800868c:	0852      	lsrs	r2, r2, #1
 800868e:	3a01      	subs	r2, #1
 8008690:	0552      	lsls	r2, r2, #21
 8008692:	4311      	orrs	r1, r2
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6852      	ldr	r2, [r2, #4]
 8008698:	3a01      	subs	r2, #1
 800869a:	0112      	lsls	r2, r2, #4
 800869c:	430a      	orrs	r2, r1
 800869e:	4921      	ldr	r1, [pc, #132]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	614b      	str	r3, [r1, #20]
 80086a4:	e014      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086a6:	4b1f      	ldr	r3, [pc, #124]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086a8:	695a      	ldr	r2, [r3, #20]
 80086aa:	4b21      	ldr	r3, [pc, #132]	; (8008730 <RCCEx_PLLSAI2_Config+0x1e4>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6892      	ldr	r2, [r2, #8]
 80086b2:	0211      	lsls	r1, r2, #8
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6952      	ldr	r2, [r2, #20]
 80086b8:	0852      	lsrs	r2, r2, #1
 80086ba:	3a01      	subs	r2, #1
 80086bc:	0652      	lsls	r2, r2, #25
 80086be:	4311      	orrs	r1, r2
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6852      	ldr	r2, [r2, #4]
 80086c4:	3a01      	subs	r2, #1
 80086c6:	0112      	lsls	r2, r2, #4
 80086c8:	430a      	orrs	r2, r1
 80086ca:	4916      	ldr	r1, [pc, #88]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80086d0:	4b14      	ldr	r3, [pc, #80]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a13      	ldr	r2, [pc, #76]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086dc:	f7fa fb12 	bl	8002d04 <HAL_GetTick>
 80086e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80086e2:	e009      	b.n	80086f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80086e4:	f7fa fb0e 	bl	8002d04 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d902      	bls.n	80086f8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	73fb      	strb	r3, [r7, #15]
          break;
 80086f6:	e005      	b.n	8008704 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0ef      	beq.n	80086e4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800870a:	4b06      	ldr	r3, [pc, #24]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800870c:	695a      	ldr	r2, [r3, #20]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	4904      	ldr	r1, [pc, #16]	; (8008724 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008714:	4313      	orrs	r3, r2
 8008716:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	40021000 	.word	0x40021000
 8008728:	07ff800f 	.word	0x07ff800f
 800872c:	ff9f800f 	.word	0xff9f800f
 8008730:	f9ff800f 	.word	0xf9ff800f

08008734 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008734:	b480      	push	{r7}
 8008736:	b089      	sub	sp, #36	; 0x24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008750:	d10b      	bne.n	800876a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008752:	4b7e      	ldr	r3, [pc, #504]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008758:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800875c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b60      	cmp	r3, #96	; 0x60
 8008762:	d112      	bne.n	800878a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008764:	4b7a      	ldr	r3, [pc, #488]	; (8008950 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e00f      	b.n	800878a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008770:	d10b      	bne.n	800878a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008772:	4b76      	ldr	r3, [pc, #472]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800877c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008784:	d101      	bne.n	800878a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008786:	4b72      	ldr	r3, [pc, #456]	; (8008950 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008788:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 80d6 	bne.w	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d003      	beq.n	80087a4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a2:	d13b      	bne.n	800881c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80087a4:	4b69      	ldr	r3, [pc, #420]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087b0:	f040 80c4 	bne.w	800893c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80087b4:	4b65      	ldr	r3, [pc, #404]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 80bd 	beq.w	800893c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80087c2:	4b62      	ldr	r3, [pc, #392]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	091b      	lsrs	r3, r3, #4
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	3301      	adds	r3, #1
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80087d6:	4b5d      	ldr	r3, [pc, #372]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80087e2:	4b5a      	ldr	r3, [pc, #360]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	0edb      	lsrs	r3, r3, #27
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80087f4:	4b55      	ldr	r3, [pc, #340]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8008800:	2311      	movs	r3, #17
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e001      	b.n	800880a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8008806:	2307      	movs	r3, #7
 8008808:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	fb03 f202 	mul.w	r2, r3, r2
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	fbb2 f3f3 	udiv	r3, r2, r3
 8008818:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800881a:	e08f      	b.n	800893c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d13a      	bne.n	8008898 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008822:	4b4a      	ldr	r3, [pc, #296]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800882a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800882e:	f040 8086 	bne.w	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008832:	4b46      	ldr	r3, [pc, #280]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d07f      	beq.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800883e:	4b43      	ldr	r3, [pc, #268]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	3301      	adds	r3, #1
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008850:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008852:	4b3e      	ldr	r3, [pc, #248]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800885e:	4b3b      	ldr	r3, [pc, #236]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	0edb      	lsrs	r3, r3, #27
 8008864:	f003 031f 	and.w	r3, r3, #31
 8008868:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008870:	4b36      	ldr	r3, [pc, #216]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800887c:	2311      	movs	r3, #17
 800887e:	617b      	str	r3, [r7, #20]
 8008880:	e001      	b.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008882:	2307      	movs	r3, #7
 8008884:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	fb03 f202 	mul.w	r2, r3, r2
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	fbb2 f3f3 	udiv	r3, r2, r3
 8008894:	61fb      	str	r3, [r7, #28]
 8008896:	e052      	b.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2b80      	cmp	r3, #128	; 0x80
 800889c:	d003      	beq.n	80088a6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a4:	d109      	bne.n	80088ba <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088a6:	4b29      	ldr	r3, [pc, #164]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b2:	d144      	bne.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80088b4:	4b27      	ldr	r3, [pc, #156]	; (8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80088b6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088b8:	e041      	b.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d003      	beq.n	80088c8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c6:	d13a      	bne.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80088c8:	4b20      	ldr	r3, [pc, #128]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d4:	d133      	bne.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80088d6:	4b1d      	ldr	r3, [pc, #116]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d02d      	beq.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80088e2:	4b1a      	ldr	r3, [pc, #104]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	091b      	lsrs	r3, r3, #4
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	3301      	adds	r3, #1
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80088f6:	4b15      	ldr	r3, [pc, #84]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	0a1b      	lsrs	r3, r3, #8
 80088fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008900:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	0edb      	lsrs	r3, r3, #27
 8008908:	f003 031f 	and.w	r3, r3, #31
 800890c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008914:	4b0d      	ldr	r3, [pc, #52]	; (800894c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008920:	2311      	movs	r3, #17
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	e001      	b.n	800892a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008926:	2307      	movs	r3, #7
 8008928:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	fb03 f202 	mul.w	r2, r3, r2
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	fbb2 f3f3 	udiv	r3, r2, r3
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	e000      	b.n	800893e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800893c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800893e:	69fb      	ldr	r3, [r7, #28]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3724      	adds	r7, #36	; 0x24
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	40021000 	.word	0x40021000
 8008950:	001fff68 	.word	0x001fff68
 8008954:	00f42400 	.word	0x00f42400

08008958 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d06c      	beq.n	8008a44 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7f9 fe68 	bl	8002654 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	22ca      	movs	r2, #202	; 0xca
 8008992:	625a      	str	r2, [r3, #36]	; 0x24
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2253      	movs	r2, #83	; 0x53
 800899a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9a0 	bl	8008ce2 <RTC_EnterInitMode>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d14b      	bne.n	8008a44 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6812      	ldr	r2, [r2, #0]
 80089b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089be:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6899      	ldr	r1, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	68d2      	ldr	r2, [r2, #12]
 80089e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6919      	ldr	r1, [r3, #16]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	041a      	lsls	r2, r3, #16
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f9a3 	bl	8008d48 <RTC_ExitInitMode>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11b      	bne.n	8008a44 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0203 	bic.w	r2, r2, #3
 8008a1a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	69da      	ldr	r2, [r3, #28]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	22ff      	movs	r2, #255	; 0xff
 8008a3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a4e:	b590      	push	{r4, r7, lr}
 8008a50:	b087      	sub	sp, #28
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_RTC_SetTime+0x1a>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e08b      	b.n	8008b80 <HAL_RTC_SetTime+0x132>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	22ca      	movs	r2, #202	; 0xca
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2253      	movs	r2, #83	; 0x53
 8008a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 f92a 	bl	8008ce2 <RTC_EnterInitMode>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008a92:	7cfb      	ldrb	r3, [r7, #19]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d163      	bne.n	8008b60 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d126      	bne.n	8008aec <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d102      	bne.n	8008ab2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f984 	bl	8008dc4 <RTC_ByteToBcd2>
 8008abc:	4603      	mov	r3, r0
 8008abe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f97d 	bl	8008dc4 <RTC_ByteToBcd2>
 8008aca:	4603      	mov	r3, r0
 8008acc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ace:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	789b      	ldrb	r3, [r3, #2]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 f975 	bl	8008dc4 <RTC_ByteToBcd2>
 8008ada:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008adc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	78db      	ldrb	r3, [r3, #3]
 8008ae4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e018      	b.n	8008b1e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2200      	movs	r2, #0
 8008afe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b0c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b12:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	78db      	ldrb	r3, [r3, #3]
 8008b18:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b2c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6899      	ldr	r1, [r3, #8]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f8f6 	bl	8008d48 <RTC_ExitInitMode>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	22ff      	movs	r2, #255	; 0xff
 8008b66:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008b68:	7cfb      	ldrb	r3, [r7, #19]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d103      	bne.n	8008b76 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008b7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd90      	pop	{r4, r7, pc}

08008b88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b88:	b590      	push	{r4, r7, lr}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_RTC_SetDate+0x1a>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e075      	b.n	8008c8e <HAL_RTC_SetDate+0x106>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2202      	movs	r2, #2
 8008bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_RTC_SetDate+0x4e>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	785b      	ldrb	r3, [r3, #1]
 8008bbc:	f003 0310 	and.w	r3, r3, #16
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d008      	beq.n	8008bd6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	f023 0310 	bic.w	r3, r3, #16
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	330a      	adds	r3, #10
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d11c      	bne.n	8008c16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	78db      	ldrb	r3, [r3, #3]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f8ef 	bl	8008dc4 <RTC_ByteToBcd2>
 8008be6:	4603      	mov	r3, r0
 8008be8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 f8e8 	bl	8008dc4 <RTC_ByteToBcd2>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008bf8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	789b      	ldrb	r3, [r3, #2]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 f8e0 	bl	8008dc4 <RTC_ByteToBcd2>
 8008c04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008c10:	4313      	orrs	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e00e      	b.n	8008c34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	78db      	ldrb	r3, [r3, #3]
 8008c1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c22:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008c28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	22ca      	movs	r2, #202	; 0xca
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2253      	movs	r2, #83	; 0x53
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 f84c 	bl	8008ce2 <RTC_EnterInitMode>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008c4e:	7cfb      	ldrb	r3, [r7, #19]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10c      	bne.n	8008c6e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c62:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 f86f 	bl	8008d48 <RTC_ExitInitMode>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	22ff      	movs	r2, #255	; 0xff
 8008c74:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008c76:	7cfb      	ldrb	r3, [r7, #19]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d103      	bne.n	8008c84 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008c8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd90      	pop	{r4, r7, pc}

08008c96 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008cac:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008cae:	f7fa f829 	bl	8002d04 <HAL_GetTick>
 8008cb2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cb4:	e009      	b.n	8008cca <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cb6:	f7fa f825 	bl	8002d04 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cc4:	d901      	bls.n	8008cca <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e007      	b.n	8008cda <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0ee      	beq.n	8008cb6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d120      	bne.n	8008d3e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d06:	f7f9 fffd 	bl	8002d04 <HAL_GetTick>
 8008d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d0c:	e00d      	b.n	8008d2a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d0e:	f7f9 fff9 	bl	8002d04 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d1c:	d905      	bls.n	8008d2a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2203      	movs	r2, #3
 8008d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <RTC_EnterInitMode+0x5c>
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d1e7      	bne.n	8008d0e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008d54:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <RTC_ExitInitMode+0x78>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	4a19      	ldr	r2, [pc, #100]	; (8008dc0 <RTC_ExitInitMode+0x78>)
 8008d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d5e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008d60:	4b17      	ldr	r3, [pc, #92]	; (8008dc0 <RTC_ExitInitMode+0x78>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10c      	bne.n	8008d86 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff ff92 	bl	8008c96 <HAL_RTC_WaitForSynchro>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01e      	beq.n	8008db6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	73fb      	strb	r3, [r7, #15]
 8008d84:	e017      	b.n	8008db6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <RTC_ExitInitMode+0x78>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	4a0d      	ldr	r2, [pc, #52]	; (8008dc0 <RTC_ExitInitMode+0x78>)
 8008d8c:	f023 0320 	bic.w	r3, r3, #32
 8008d90:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff ff7f 	bl	8008c96 <HAL_RTC_WaitForSynchro>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2203      	movs	r2, #3
 8008da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <RTC_ExitInitMode+0x78>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	4a04      	ldr	r2, [pc, #16]	; (8008dc0 <RTC_ExitInitMode+0x78>)
 8008db0:	f043 0320 	orr.w	r3, r3, #32
 8008db4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	40002800 	.word	0x40002800

08008dc4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008dd6:	e005      	b.n	8008de4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	3b0a      	subs	r3, #10
 8008de2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	d8f6      	bhi.n	8008dd8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	b2db      	uxtb	r3, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e078      	b.n	8008f08 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d105      	bne.n	8008e2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7f9 fc45 	bl	80026b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2203      	movs	r2, #3
 8008e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f86a 	bl	8008f10 <HAL_SD_InitCard>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e060      	b.n	8008f08 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008e46:	f107 0308 	add.w	r3, r7, #8
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fdb5 	bl	80099bc <HAL_SD_GetCardStatus>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e055      	b.n	8008f08 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008e5c:	7e3b      	ldrb	r3, [r7, #24]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008e62:	7e7b      	ldrb	r3, [r7, #25]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d10a      	bne.n	8008e86 <HAL_SD_Init+0x82>
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <HAL_SD_Init+0x78>
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e82:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e84:	e00b      	b.n	8008e9e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d104      	bne.n	8008e98 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e94:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e96:	e002      	b.n	8008e9e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fe6b 	bl	8009b80 <HAL_SD_ConfigWideBusOperation>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e029      	b.n	8008f08 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008eb4:	f7f9 ff26 	bl	8002d04 <HAL_GetTick>
 8008eb8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008eba:	e014      	b.n	8008ee6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008ebc:	f7f9 ff22 	bl	8002d04 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d10c      	bne.n	8008ee6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e010      	b.n	8008f08 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 ff5e 	bl	8009da8 <HAL_SD_GetCardState>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d1e4      	bne.n	8008ebc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3728      	adds	r7, #40	; 0x28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f10:	b5b0      	push	{r4, r5, r7, lr}
 8008f12:	b08e      	sub	sp, #56	; 0x38
 8008f14:	af04      	add	r7, sp, #16
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008f28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008f2c:	f7fe fafa 	bl	8007524 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f30:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d109      	bne.n	8008f4c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e079      	b.n	8009040 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	0a1b      	lsrs	r3, r3, #8
 8008f50:	4a3d      	ldr	r2, [pc, #244]	; (8009048 <HAL_SD_InitCard+0x138>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	091b      	lsrs	r3, r3, #4
 8008f58:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d107      	bne.n	8008f78 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0210 	orr.w	r2, r2, #16
 8008f76:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681d      	ldr	r5, [r3, #0]
 8008f7c:	466c      	mov	r4, sp
 8008f7e:	f107 0314 	add.w	r3, r7, #20
 8008f82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f8a:	f107 0308 	add.w	r3, r7, #8
 8008f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f90:	4628      	mov	r0, r5
 8008f92:	f002 fc93 	bl	800b8bc <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f002 fcd6 	bl	800b94c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008fac:	4a27      	ldr	r2, [pc, #156]	; (800904c <HAL_SD_InitCard+0x13c>)
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7f9 feb0 	bl	8002d1c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 ffd3 	bl	8009f68 <SD_PowerON>
 8008fc2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00b      	beq.n	8008fe2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e02e      	b.n	8009040 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 ff00 	bl	8009de8 <SD_InitCard>
 8008fe8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e01b      	b.n	8009040 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009010:	4618      	mov	r0, r3
 8009012:	f002 fd31 	bl	800ba78 <SDMMC_CmdBlockLength>
 8009016:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00f      	beq.n	800903e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a0b      	ldr	r2, [pc, #44]	; (8009050 <HAL_SD_InitCard+0x140>)
 8009024:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	431a      	orrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e000      	b.n	8009040 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3728      	adds	r7, #40	; 0x28
 8009044:	46bd      	mov	sp, r7
 8009046:	bdb0      	pop	{r4, r5, r7, pc}
 8009048:	014f8b59 	.word	0x014f8b59
 800904c:	00012110 	.word	0x00012110
 8009050:	1fe00fff 	.word	0x1fe00fff

08009054 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08c      	sub	sp, #48	; 0x30
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e08d      	b.n	8009198 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b01      	cmp	r3, #1
 8009086:	f040 8086 	bne.w	8009196 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909a:	429a      	cmp	r2, r3
 800909c:	d907      	bls.n	80090ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e074      	b.n	8009198 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2203      	movs	r2, #3
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	025a      	lsls	r2, r3, #9
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d002      	beq.n	80090da <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	025b      	lsls	r3, r3, #9
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090da:	f04f 33ff 	mov.w	r3, #4294967295
 80090de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	025b      	lsls	r3, r3, #9
 80090e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090e6:	2390      	movs	r3, #144	; 0x90
 80090e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090ea:	2302      	movs	r3, #2
 80090ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f107 0210 	add.w	r2, r7, #16
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f002 fc8d 	bl	800ba20 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009114:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2201      	movs	r2, #1
 8009124:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d90a      	bls.n	8009142 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2282      	movs	r2, #130	; 0x82
 8009130:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009138:	4618      	mov	r0, r3
 800913a:	f002 fce3 	bl	800bb04 <SDMMC_CmdReadMultiBlock>
 800913e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009140:	e009      	b.n	8009156 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2281      	movs	r2, #129	; 0x81
 8009146:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914e:	4618      	mov	r0, r3
 8009150:	f002 fcb5 	bl	800babe <SDMMC_CmdReadSingleBlock>
 8009154:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d012      	beq.n	8009182 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a0f      	ldr	r2, [pc, #60]	; (80091a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	431a      	orrs	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e00a      	b.n	8009198 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009190:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	e000      	b.n	8009198 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8009196:	2302      	movs	r3, #2
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3730      	adds	r7, #48	; 0x30
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	1fe00fff 	.word	0x1fe00fff

080091a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08c      	sub	sp, #48	; 0x30
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d107      	bne.n	80091cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e08d      	b.n	80092e8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	f040 8086 	bne.w	80092e6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	441a      	add	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d907      	bls.n	80091fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e074      	b.n	80092e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2203      	movs	r2, #3
 8009202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	025a      	lsls	r2, r3, #9
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009220:	2b01      	cmp	r3, #1
 8009222:	d002      	beq.n	800922a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	025b      	lsls	r3, r3, #9
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800922a:	f04f 33ff 	mov.w	r3, #4294967295
 800922e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	025b      	lsls	r3, r3, #9
 8009234:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009236:	2390      	movs	r3, #144	; 0x90
 8009238:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800923a:	2300      	movs	r3, #0
 800923c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800923e:	2300      	movs	r3, #0
 8009240:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009242:	2300      	movs	r3, #0
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f107 0210 	add.w	r2, r7, #16
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f002 fbe5 	bl	800ba20 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009264:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2201      	movs	r2, #1
 8009274:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d90a      	bls.n	8009292 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	22a0      	movs	r2, #160	; 0xa0
 8009280:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009288:	4618      	mov	r0, r3
 800928a:	f002 fc81 	bl	800bb90 <SDMMC_CmdWriteMultiBlock>
 800928e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009290:	e009      	b.n	80092a6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2290      	movs	r2, #144	; 0x90
 8009296:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800929e:	4618      	mov	r0, r3
 80092a0:	f002 fc53 	bl	800bb4a <SDMMC_CmdWriteSingleBlock>
 80092a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d012      	beq.n	80092d2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a0f      	ldr	r2, [pc, #60]	; (80092f0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	431a      	orrs	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e00a      	b.n	80092e8 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80092e0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e000      	b.n	80092e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80092e6:	2302      	movs	r3, #2
  }
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3730      	adds	r7, #48	; 0x30
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	1fe00fff 	.word	0x1fe00fff

080092f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009300:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d008      	beq.n	8009322 <HAL_SD_IRQHandler+0x2e>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f003 0308 	and.w	r3, r3, #8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 f98e 	bl	800a63c <SD_Read_IT>
 8009320:	e199      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80ae 	beq.w	800948e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800933a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800934a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800934e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800935e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800936e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d038      	beq.n	80093ec <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d104      	bne.n	800938e <HAL_SD_IRQHandler+0x9a>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d011      	beq.n	80093b2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f002 fc20 	bl	800bbd8 <SDMMC_CmdStopTransfer>
 8009398:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f957 	bl	8009660 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a90      	ldr	r2, [pc, #576]	; (80095f8 <HAL_SD_IRQHandler+0x304>)
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d104      	bne.n	80093dc <HAL_SD_IRQHandler+0xe8>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f004 fc23 	bl	800dc28 <HAL_SD_RxCpltCallback>
 80093e2:	e138      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f004 fc15 	bl	800dc14 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80093ea:	e134      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 812f 	beq.w	8009656 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2200      	movs	r2, #0
 80093fe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2200      	movs	r2, #0
 8009406:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2200      	movs	r2, #0
 800940e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d104      	bne.n	8009424 <HAL_SD_IRQHandler+0x130>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d011      	beq.n	8009448 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f002 fbd5 	bl	800bbd8 <SDMMC_CmdStopTransfer>
 800942e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d008      	beq.n	8009448 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	431a      	orrs	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f90c 	bl	8009660 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f003 0310 	and.w	r3, r3, #16
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <HAL_SD_IRQHandler+0x176>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f004 fbd2 	bl	800dc14 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <HAL_SD_IRQHandler+0x192>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80e8 	beq.w	8009656 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f004 fbce 	bl	800dc28 <HAL_SD_RxCpltCallback>
}
 800948c:	e0e3      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d008      	beq.n	80094ae <HAL_SD_IRQHandler+0x1ba>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f003 0308 	and.w	r3, r3, #8
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 f919 	bl	800a6de <SD_Write_IT>
 80094ac:	e0d3      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 809f 	beq.w	80095fc <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	f043 0202 	orr.w	r2, r3, #2
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d005      	beq.n	80094f2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	f043 0208 	orr.w	r2, r3, #8
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	f043 0220 	orr.w	r2, r3, #32
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009512:	f003 0310 	and.w	r3, r3, #16
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	f043 0210 	orr.w	r2, r3, #16
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a33      	ldr	r2, [pc, #204]	; (80095f8 <HAL_SD_IRQHandler+0x304>)
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800953c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800954c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800955c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800956c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f002 fb30 	bl	800bbd8 <SDMMC_CmdStopTransfer>
 8009578:	4602      	mov	r2, r0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009592:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800959c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f003 0308 	and.w	r3, r3, #8
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f852 	bl	8009660 <HAL_SD_ErrorCallback>
}
 80095bc:	e04b      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d046      	beq.n	8009656 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d042      	beq.n	8009656 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80095de:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2200      	movs	r2, #0
 80095e6:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f835 	bl	8009660 <HAL_SD_ErrorCallback>
}
 80095f6:	e02e      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
 80095f8:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d025      	beq.n	8009656 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009612:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10c      	bne.n	800963c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 f8d4 	bl	800a7da <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8009632:	e010      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 f8bc 	bl	800a7b2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800963a:	e00c      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 f8bd 	bl	800a7c6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800964c:	e003      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 f8a5 	bl	800a79e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8009654:	e7ff      	b.n	8009656 <HAL_SD_IRQHandler+0x362>
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop

08009660 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009682:	0f9b      	lsrs	r3, r3, #30
 8009684:	b2da      	uxtb	r2, r3
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800968e:	0e9b      	lsrs	r3, r3, #26
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	b2da      	uxtb	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a0:	0e1b      	lsrs	r3, r3, #24
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0303 	and.w	r3, r3, #3
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b2:	0c1b      	lsrs	r3, r3, #16
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d4:	0d1b      	lsrs	r3, r3, #20
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e0:	0c1b      	lsrs	r3, r3, #16
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f2:	0bdb      	lsrs	r3, r3, #15
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009704:	0b9b      	lsrs	r3, r3, #14
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	b2da      	uxtb	r2, r3
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009716:	0b5b      	lsrs	r3, r3, #13
 8009718:	b2db      	uxtb	r3, r3
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	b2da      	uxtb	r2, r3
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009728:	0b1b      	lsrs	r3, r3, #12
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	b2da      	uxtb	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2200      	movs	r2, #0
 800973a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009740:	2b00      	cmp	r3, #0
 8009742:	d163      	bne.n	800980c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009748:	009a      	lsls	r2, r3, #2
 800974a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800974e:	4013      	ands	r3, r2
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009754:	0f92      	lsrs	r2, r2, #30
 8009756:	431a      	orrs	r2, r3
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009760:	0edb      	lsrs	r3, r3, #27
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	b2da      	uxtb	r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009772:	0e1b      	lsrs	r3, r3, #24
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	b2da      	uxtb	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009784:	0d5b      	lsrs	r3, r3, #21
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	b2da      	uxtb	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009796:	0c9b      	lsrs	r3, r3, #18
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097a8:	0bdb      	lsrs	r3, r3, #15
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	7e1b      	ldrb	r3, [r3, #24]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	3302      	adds	r3, #2
 80097cc:	2201      	movs	r2, #1
 80097ce:	fa02 f303 	lsl.w	r3, r2, r3
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80097d6:	fb03 f202 	mul.w	r2, r3, r2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	7a1b      	ldrb	r3, [r3, #8]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f003 030f 	and.w	r3, r3, #15
 80097e8:	2201      	movs	r2, #1
 80097ea:	409a      	lsls	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097f8:	0a52      	lsrs	r2, r2, #9
 80097fa:	fb03 f202 	mul.w	r2, r3, r2
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009808:	659a      	str	r2, [r3, #88]	; 0x58
 800980a:	e031      	b.n	8009870 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d11d      	bne.n	8009850 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009818:	041b      	lsls	r3, r3, #16
 800981a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009822:	0c1b      	lsrs	r3, r3, #16
 8009824:	431a      	orrs	r2, r3
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	3301      	adds	r3, #1
 8009830:	029a      	lsls	r2, r3, #10
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009844:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	659a      	str	r2, [r3, #88]	; 0x58
 800984e:	e00f      	b.n	8009870 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a58      	ldr	r2, [pc, #352]	; (80099b8 <HAL_SD_GetCardCSD+0x344>)
 8009856:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e09d      	b.n	80099ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009874:	0b9b      	lsrs	r3, r3, #14
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	b2da      	uxtb	r2, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009886:	09db      	lsrs	r3, r3, #7
 8009888:	b2db      	uxtb	r3, r3
 800988a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800988e:	b2da      	uxtb	r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a8:	0fdb      	lsrs	r3, r3, #31
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b4:	0f5b      	lsrs	r3, r3, #29
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 0303 	and.w	r3, r3, #3
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c6:	0e9b      	lsrs	r3, r3, #26
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098d8:	0d9b      	lsrs	r3, r3, #22
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f003 030f 	and.w	r3, r3, #15
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ea:	0d5b      	lsrs	r3, r3, #21
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009906:	0c1b      	lsrs	r3, r3, #16
 8009908:	b2db      	uxtb	r3, r3
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	b2da      	uxtb	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800991a:	0bdb      	lsrs	r3, r3, #15
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800992e:	0b9b      	lsrs	r3, r3, #14
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	b2da      	uxtb	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009942:	0b5b      	lsrs	r3, r3, #13
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	b2da      	uxtb	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009956:	0b1b      	lsrs	r3, r3, #12
 8009958:	b2db      	uxtb	r3, r3
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	b2da      	uxtb	r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996a:	0a9b      	lsrs	r3, r3, #10
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	b2da      	uxtb	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	b2db      	uxtb	r3, r3
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	b2da      	uxtb	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009992:	085b      	lsrs	r3, r3, #1
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999a:	b2da      	uxtb	r2, r3
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	1fe00fff 	.word	0x1fe00fff

080099bc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b094      	sub	sp, #80	; 0x50
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80099cc:	f107 0308 	add.w	r3, r7, #8
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fbd4 	bl	800a180 <SD_SendSDStatus>
 80099d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80099da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d011      	beq.n	8009a04 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a4f      	ldr	r2, [pc, #316]	; (8009b24 <HAL_SD_GetCardStatus+0x168>)
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ee:	431a      	orrs	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009a02:	e070      	b.n	8009ae6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	099b      	lsrs	r3, r3, #6
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	0e1b      	lsrs	r3, r3, #24
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	4313      	orrs	r3, r2
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	061a      	lsls	r2, r3, #24
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a4a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	0a1b      	lsrs	r3, r3, #8
 8009a50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a54:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	0e1b      	lsrs	r3, r3, #24
 8009a5a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	0a1b      	lsrs	r3, r3, #8
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	0d1b      	lsrs	r3, r3, #20
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f003 030f 	and.w	r3, r3, #15
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	0c1b      	lsrs	r3, r3, #16
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	4313      	orrs	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	0a9b      	lsrs	r3, r3, #10
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	0a1b      	lsrs	r3, r3, #8
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	091b      	lsrs	r3, r3, #4
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	0e1b      	lsrs	r3, r3, #24
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009aee:	4618      	mov	r0, r3
 8009af0:	f001 ffc2 	bl	800ba78 <SDMMC_CmdBlockLength>
 8009af4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00d      	beq.n	8009b18 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a08      	ldr	r2, [pc, #32]	; (8009b24 <HAL_SD_GetCardStatus+0x168>)
 8009b02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009b18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3750      	adds	r7, #80	; 0x50
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	1fe00fff 	.word	0x1fe00fff

08009b28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009b80:	b5b0      	push	{r4, r5, r7, lr}
 8009b82:	b090      	sub	sp, #64	; 0x40
 8009b84:	af04      	add	r7, sp, #16
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2203      	movs	r2, #3
 8009b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d02e      	beq.n	8009bfe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba6:	d106      	bne.n	8009bb6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8009bb4:	e029      	b.n	8009c0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bbc:	d10a      	bne.n	8009bd4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fbd6 	bl	800a370 <SD_WideBus_Enable>
 8009bc4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8009bd2:	e01a      	b.n	8009c0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10a      	bne.n	8009bf0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fc13 	bl	800a406 <SD_WideBus_Disable>
 8009be0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38
 8009bee:	e00c      	b.n	8009c0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8009bfc:	e005      	b.n	8009c0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a60      	ldr	r2, [pc, #384]	; (8009d98 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009c18:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c20:	e097      	b.n	8009d52 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009c22:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009c26:	f7fd fc7d 	bl	8007524 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c2a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 8086 	beq.w	8009d40 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	695a      	ldr	r2, [r3, #20]
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	4952      	ldr	r1, [pc, #328]	; (8009d9c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009c52:	fba1 1303 	umull	r1, r3, r1, r3
 8009c56:	0e1b      	lsrs	r3, r3, #24
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d303      	bcc.n	8009c64 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	e05a      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c6c:	d103      	bne.n	8009c76 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	61fb      	str	r3, [r7, #28]
 8009c74:	e051      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c7e:	d126      	bne.n	8009cce <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10e      	bne.n	8009ca6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	4a45      	ldr	r2, [pc, #276]	; (8009da0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d906      	bls.n	8009c9e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	4a42      	ldr	r2, [pc, #264]	; (8009d9c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009c94:	fba2 2303 	umull	r2, r3, r2, r3
 8009c98:	0e5b      	lsrs	r3, r3, #25
 8009c9a:	61fb      	str	r3, [r7, #28]
 8009c9c:	e03d      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	e039      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb2:	4a3b      	ldr	r2, [pc, #236]	; (8009da0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d906      	bls.n	8009cc6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	4a38      	ldr	r2, [pc, #224]	; (8009d9c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc0:	0e5b      	lsrs	r3, r3, #25
 8009cc2:	61fb      	str	r3, [r7, #28]
 8009cc4:	e029      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	61fb      	str	r3, [r7, #28]
 8009ccc:	e025      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10e      	bne.n	8009cf4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	4a32      	ldr	r2, [pc, #200]	; (8009da4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d906      	bls.n	8009cec <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	4a2e      	ldr	r2, [pc, #184]	; (8009d9c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce6:	0e1b      	lsrs	r3, r3, #24
 8009ce8:	61fb      	str	r3, [r7, #28]
 8009cea:	e016      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	61fb      	str	r3, [r7, #28]
 8009cf2:	e012      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d00:	4a28      	ldr	r2, [pc, #160]	; (8009da4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d906      	bls.n	8009d14 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	4a24      	ldr	r2, [pc, #144]	; (8009d9c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	0e1b      	lsrs	r3, r3, #24
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	e002      	b.n	8009d1a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681d      	ldr	r5, [r3, #0]
 8009d24:	466c      	mov	r4, sp
 8009d26:	f107 0318 	add.w	r3, r7, #24
 8009d2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d32:	f107 030c 	add.w	r3, r7, #12
 8009d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f001 fdbf 	bl	800b8bc <SDMMC_Init>
 8009d3e:	e008      	b.n	8009d52 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 fe8c 	bl	800ba78 <SDMMC_CmdBlockLength>
 8009d60:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00c      	beq.n	8009d82 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a0a      	ldr	r2, [pc, #40]	; (8009d98 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009d6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	431a      	orrs	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3730      	adds	r7, #48	; 0x30
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bdb0      	pop	{r4, r5, r7, pc}
 8009d96:	bf00      	nop
 8009d98:	1fe00fff 	.word	0x1fe00fff
 8009d9c:	55e63b89 	.word	0x55e63b89
 8009da0:	02faf080 	.word	0x02faf080
 8009da4:	017d7840 	.word	0x017d7840

08009da8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009db4:	f107 030c 	add.w	r3, r7, #12
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fab0 	bl	800a320 <SD_SendStatus>
 8009dc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	0a5b      	lsrs	r3, r3, #9
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009dde:	693b      	ldr	r3, [r7, #16]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009de8:	b5b0      	push	{r4, r5, r7, lr}
 8009dea:	b090      	sub	sp, #64	; 0x40
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009df0:	2301      	movs	r3, #1
 8009df2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 fdb9 	bl	800b970 <SDMMC_GetPowerState>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009e08:	e0a9      	b.n	8009f5e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d02e      	beq.n	8009e70 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f001 fffe 	bl	800be18 <SDMMC_CmdSendCID>
 8009e1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <SD_InitCard+0x40>
    {
      return errorstate;
 8009e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e26:	e09a      	b.n	8009f5e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f001 fde3 	bl	800b9fa <SDMMC_GetResponse>
 8009e34:	4602      	mov	r2, r0
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2104      	movs	r1, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 fdda 	bl	800b9fa <SDMMC_GetResponse>
 8009e46:	4602      	mov	r2, r0
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2108      	movs	r1, #8
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fdd1 	bl	800b9fa <SDMMC_GetResponse>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	210c      	movs	r1, #12
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 fdc8 	bl	800b9fa <SDMMC_GetResponse>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d00d      	beq.n	8009e94 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f107 020e 	add.w	r2, r7, #14
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f002 f807 	bl	800be96 <SDMMC_CmdSetRelAdd>
 8009e88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <SD_InitCard+0xac>
    {
      return errorstate;
 8009e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e92:	e064      	b.n	8009f5e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d036      	beq.n	8009f0a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e9c:	89fb      	ldrh	r3, [r7, #14]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f001 ffd0 	bl	800be56 <SDMMC_CmdSendCSD>
 8009eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <SD_InitCard+0xda>
    {
      return errorstate;
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec0:	e04d      	b.n	8009f5e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 fd96 	bl	800b9fa <SDMMC_GetResponse>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2104      	movs	r1, #4
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 fd8d 	bl	800b9fa <SDMMC_GetResponse>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2108      	movs	r1, #8
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fd84 	bl	800b9fa <SDMMC_GetResponse>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	210c      	movs	r1, #12
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 fd7b 	bl	800b9fa <SDMMC_GetResponse>
 8009f04:	4602      	mov	r2, r0
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2104      	movs	r1, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f001 fd72 	bl	800b9fa <SDMMC_GetResponse>
 8009f16:	4603      	mov	r3, r0
 8009f18:	0d1a      	lsrs	r2, r3, #20
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009f1e:	f107 0310 	add.w	r3, r7, #16
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff fba5 	bl	8009674 <HAL_SD_GetCardCSD>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f34:	e013      	b.n	8009f5e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6819      	ldr	r1, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3e:	041b      	lsls	r3, r3, #16
 8009f40:	2200      	movs	r2, #0
 8009f42:	461c      	mov	r4, r3
 8009f44:	4615      	mov	r5, r2
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	4608      	mov	r0, r1
 8009f4c:	f001 fe7a 	bl	800bc44 <SDMMC_CmdSelDesel>
 8009f50:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <SD_InitCard+0x174>
  {
    return errorstate;
 8009f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5a:	e000      	b.n	8009f5e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3740      	adds	r7, #64	; 0x40
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009f68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8009f7c:	f7f8 fec2 	bl	8002d04 <HAL_GetTick>
 8009f80:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 fe80 	bl	800bc8c <SDMMC_CmdGoIdleState>
 8009f8c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <SD_PowerON+0x30>
  {
    return errorstate;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	e0ed      	b.n	800a174 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 fe93 	bl	800bcc8 <SDMMC_CmdOperCond>
 8009fa2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00d      	beq.n	8009fc6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 fe69 	bl	800bc8c <SDMMC_CmdGoIdleState>
 8009fba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d004      	beq.n	8009fcc <SD_PowerON+0x64>
    {
      return errorstate;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	e0d6      	b.n	800a174 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d137      	bne.n	800a044 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 fe94 	bl	800bd08 <SDMMC_CmdAppCommand>
 8009fe0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d02d      	beq.n	800a044 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fec:	e0c2      	b.n	800a174 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 fe87 	bl	800bd08 <SDMMC_CmdAppCommand>
 8009ffa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <SD_PowerON+0x9e>
    {
      return errorstate;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	e0b6      	b.n	800a174 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	495c      	ldr	r1, [pc, #368]	; (800a17c <SD_PowerON+0x214>)
 800a00c:	4618      	mov	r0, r3
 800a00e:	f001 fe9e 	bl	800bd4e <SDMMC_CmdAppOperCommand>
 800a012:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a01a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a01e:	e0a9      	b.n	800a174 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f001 fce7 	bl	800b9fa <SDMMC_GetResponse>
 800a02c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	0fdb      	lsrs	r3, r3, #31
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <SD_PowerON+0xd2>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <SD_PowerON+0xd4>
 800a03a:	2300      	movs	r3, #0
 800a03c:	61bb      	str	r3, [r7, #24]

    count++;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d802      	bhi.n	800a054 <SD_PowerON+0xec>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0cc      	beq.n	8009fee <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d902      	bls.n	800a064 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a05e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a062:	e087      	b.n	800a174 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d07e      	beq.n	800a16c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d17a      	bne.n	800a172 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d075      	beq.n	800a172 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a08c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f042 0208 	orr.w	r2, r2, #8
 800a09c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 ff5e 	bl	800bf64 <SDMMC_CmdVoltageSwitch>
 800a0a8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00c      	beq.n	800a0ca <SD_PowerON+0x162>
        {
          return errorstate;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	e05f      	b.n	800a174 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a0b4:	f7f8 fe26 	bl	8002d04 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c2:	d102      	bne.n	800a0ca <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800a0c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0c8:	e054      	b.n	800a174 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0d8:	d1ec      	bne.n	800a0b4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f2:	d002      	beq.n	800a0fa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800a0f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0f8:	e03c      	b.n	800a174 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f000 fb44 	bl	800a788 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0204 	orr.w	r2, r2, #4
 800a10e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a110:	e00a      	b.n	800a128 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a112:	f7f8 fdf7 	bl	8002d04 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a120:	d102      	bne.n	800a128 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800a122:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a126:	e025      	b.n	800a174 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a136:	d1ec      	bne.n	800a112 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a140:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a14c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a150:	d102      	bne.n	800a158 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a156:	e00d      	b.n	800a174 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2213      	movs	r2, #19
 800a15e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	639a      	str	r2, [r3, #56]	; 0x38
 800a16a:	e002      	b.n	800a172 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	c1100000 	.word	0xc1100000

0800a180 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08c      	sub	sp, #48	; 0x30
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a18a:	f7f8 fdbb 	bl	8002d04 <HAL_GetTick>
 800a18e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 fc2d 	bl	800b9fa <SDMMC_GetResponse>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1aa:	d102      	bne.n	800a1b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1b0:	e0b0      	b.n	800a314 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2140      	movs	r1, #64	; 0x40
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 fc5d 	bl	800ba78 <SDMMC_CmdBlockLength>
 800a1be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	e0a0      	b.n	800a314 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f001 fd92 	bl	800bd08 <SDMMC_CmdAppCommand>
 800a1e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	e08d      	b.n	800a314 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a1fe:	2340      	movs	r3, #64	; 0x40
 800a200:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a202:	2360      	movs	r3, #96	; 0x60
 800a204:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a206:	2302      	movs	r3, #2
 800a208:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a20e:	2301      	movs	r3, #1
 800a210:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f107 0208 	add.w	r2, r7, #8
 800a21a:	4611      	mov	r1, r2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 fbff 	bl	800ba20 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4618      	mov	r0, r3
 800a228:	f001 fe7a 	bl	800bf20 <SDMMC_CmdStatusRegister>
 800a22c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02b      	beq.n	800a28c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	e069      	b.n	800a314 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d013      	beq.n	800a276 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800a24e:	2300      	movs	r3, #0
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a252:	e00d      	b.n	800a270 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4618      	mov	r0, r3
 800a25a:	f001 fb59 	bl	800b910 <SDMMC_ReadFIFO>
 800a25e:	4602      	mov	r2, r0
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	601a      	str	r2, [r3, #0]
        pData++;
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	3304      	adds	r3, #4
 800a268:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	3301      	adds	r3, #1
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	2b07      	cmp	r3, #7
 800a274:	d9ee      	bls.n	800a254 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a276:	f7f8 fd45 	bl	8002d04 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a284:	d102      	bne.n	800a28c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a28a:	e043      	b.n	800a314 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0d2      	beq.n	800a240 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a0:	f003 0308 	and.w	r3, r3, #8
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	e033      	b.n	800a314 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e02a      	b.n	800a314 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d017      	beq.n	800a2fc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a2cc:	2320      	movs	r3, #32
 800a2ce:	e021      	b.n	800a314 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f001 fb1b 	bl	800b910 <SDMMC_ReadFIFO>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	601a      	str	r2, [r3, #0]
    pData++;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a2e6:	f7f8 fd0d 	bl	8002d04 <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d102      	bne.n	800a2fc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a2f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2fa:	e00b      	b.n	800a314 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e2      	bne.n	800a2d0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a03      	ldr	r2, [pc, #12]	; (800a31c <SD_SendSDStatus+0x19c>)
 800a310:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3730      	adds	r7, #48	; 0x30
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	18000f3a 	.word	0x18000f3a

0800a320 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a334:	e018      	b.n	800a368 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a33e:	041b      	lsls	r3, r3, #16
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f001 fdc9 	bl	800beda <SDMMC_CmdSendStatus>
 800a348:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	e009      	b.n	800a368 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2100      	movs	r1, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f001 fb4d 	bl	800b9fa <SDMMC_GetResponse>
 800a360:	4602      	mov	r2, r0
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	2300      	movs	r3, #0
 800a37e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f001 fb37 	bl	800b9fa <SDMMC_GetResponse>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a396:	d102      	bne.n	800a39e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a39c:	e02f      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a39e:	f107 030c 	add.w	r3, r7, #12
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f879 	bl	800a49c <SD_FindSCR>
 800a3aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	e023      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01c      	beq.n	800a3fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3c8:	041b      	lsls	r3, r3, #16
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	f001 fc9b 	bl	800bd08 <SDMMC_CmdAppCommand>
 800a3d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	e00f      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2102      	movs	r1, #2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 fcd2 	bl	800bd8e <SDMMC_CmdBusWidth>
 800a3ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	e003      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e001      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b086      	sub	sp, #24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 faec 	bl	800b9fa <SDMMC_GetResponse>
 800a422:	4603      	mov	r3, r0
 800a424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a42c:	d102      	bne.n	800a434 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a42e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a432:	e02f      	b.n	800a494 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a434:	f107 030c 	add.w	r3, r7, #12
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f82e 	bl	800a49c <SD_FindSCR>
 800a440:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	e023      	b.n	800a494 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d01c      	beq.n	800a490 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a45e:	041b      	lsls	r3, r3, #16
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f001 fc50 	bl	800bd08 <SDMMC_CmdAppCommand>
 800a468:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	e00f      	b.n	800a494 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2100      	movs	r1, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	f001 fc87 	bl	800bd8e <SDMMC_CmdBusWidth>
 800a480:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	e003      	b.n	800a494 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e001      	b.n	800a494 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a490:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08e      	sub	sp, #56	; 0x38
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a4a6:	f7f8 fc2d 	bl	8002d04 <HAL_GetTick>
 800a4aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60bb      	str	r3, [r7, #8]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2108      	movs	r1, #8
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f001 fad8 	bl	800ba78 <SDMMC_CmdBlockLength>
 800a4c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	e0ad      	b.n	800a630 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4dc:	041b      	lsls	r3, r3, #16
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	f001 fc11 	bl	800bd08 <SDMMC_CmdAppCommand>
 800a4e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	e09e      	b.n	800a630 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a4fc:	2330      	movs	r3, #48	; 0x30
 800a4fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a500:	2302      	movs	r3, #2
 800a502:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a504:	2300      	movs	r3, #0
 800a506:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a508:	2301      	movs	r3, #1
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f107 0210 	add.w	r2, r7, #16
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f001 fa82 	bl	800ba20 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4618      	mov	r0, r3
 800a522:	f001 fc57 	bl	800bdd4 <SDMMC_CmdSendSCR>
 800a526:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d027      	beq.n	800a57e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	e07e      	b.n	800a630 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d113      	bne.n	800a568 <SD_FindSCR+0xcc>
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	2b00      	cmp	r3, #0
 800a544:	d110      	bne.n	800a568 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f001 f9e0 	bl	800b910 <SDMMC_ReadFIFO>
 800a550:	4603      	mov	r3, r0
 800a552:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f001 f9d9 	bl	800b910 <SDMMC_ReadFIFO>
 800a55e:	4603      	mov	r3, r0
 800a560:	60fb      	str	r3, [r7, #12]
      index++;
 800a562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a564:	3301      	adds	r3, #1
 800a566:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a568:	f7f8 fbcc 	bl	8002d04 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d102      	bne.n	800a57e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a57c:	e058      	b.n	800a630 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a584:	f240 532a 	movw	r3, #1322	; 0x52a
 800a588:	4013      	ands	r3, r2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0d1      	beq.n	800a532 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a594:	f003 0308 	and.w	r3, r3, #8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2208      	movs	r2, #8
 800a5a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a5a4:	2308      	movs	r3, #8
 800a5a6:	e043      	b.n	800a630 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d005      	beq.n	800a5c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e036      	b.n	800a630 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a5d8:	2320      	movs	r3, #32
 800a5da:	e029      	b.n	800a630 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a15      	ldr	r2, [pc, #84]	; (800a638 <SD_FindSCR+0x19c>)
 800a5e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	061a      	lsls	r2, r3, #24
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	021b      	lsls	r3, r3, #8
 800a5ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	0a1b      	lsrs	r3, r3, #8
 800a5f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a5fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	0e1b      	lsrs	r3, r3, #24
 800a600:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	601a      	str	r2, [r3, #0]
    scr++;
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	3304      	adds	r3, #4
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	061a      	lsls	r2, r3, #24
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a618:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	0a1b      	lsrs	r3, r3, #8
 800a61e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a622:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	0e1b      	lsrs	r3, r3, #24
 800a628:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3738      	adds	r7, #56	; 0x38
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	18000f3a 	.word	0x18000f3a

0800a63c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a648:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d03f      	beq.n	800a6d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a656:	2300      	movs	r3, #0
 800a658:	617b      	str	r3, [r7, #20]
 800a65a:	e033      	b.n	800a6c4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	f001 f955 	bl	800b910 <SDMMC_ReadFIFO>
 800a666:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	3b01      	subs	r3, #1
 800a67a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	0a1b      	lsrs	r3, r3, #8
 800a680:	b2da      	uxtb	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	3b01      	subs	r3, #1
 800a690:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	0c1b      	lsrs	r3, r3, #16
 800a696:	b2da      	uxtb	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	0e1b      	lsrs	r3, r3, #24
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2b07      	cmp	r3, #7
 800a6c8:	d9c8      	bls.n	800a65c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a6d6:	bf00      	nop
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b086      	sub	sp, #24
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d043      	beq.n	800a780 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	e037      	b.n	800a76e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3301      	adds	r3, #1
 800a708:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	021a      	lsls	r2, r3, #8
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3301      	adds	r3, #1
 800a720:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3b01      	subs	r3, #1
 800a726:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	041a      	lsls	r2, r3, #16
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4313      	orrs	r3, r2
 800a732:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3301      	adds	r3, #1
 800a738:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	061a      	lsls	r2, r3, #24
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3301      	adds	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3b01      	subs	r3, #1
 800a756:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f107 0208 	add.w	r2, r7, #8
 800a760:	4611      	mov	r1, r2
 800a762:	4618      	mov	r0, r3
 800a764:	f001 f8e1 	bl	800b92a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	3301      	adds	r3, #1
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b07      	cmp	r3, #7
 800a772:	d9c4      	bls.n	800a6fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a780:	bf00      	nop
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	4603      	mov	r3, r0
 800a790:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800a792:	bf00      	nop
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a7a6:	bf00      	nop
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a7ce:	bf00      	nop
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e095      	b.n	800a92c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	2b00      	cmp	r3, #0
 800a806:	d108      	bne.n	800a81a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a810:	d009      	beq.n	800a826 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	61da      	str	r2, [r3, #28]
 800a818:	e005      	b.n	800a826 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d106      	bne.n	800a846 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7f7 ffff 	bl	8002844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2202      	movs	r2, #2
 800a84a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a85c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a866:	d902      	bls.n	800a86e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a868:	2300      	movs	r3, #0
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	e002      	b.n	800a874 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a86e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a872:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a87c:	d007      	beq.n	800a88e <HAL_SPI_Init+0xa0>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a886:	d002      	beq.n	800a88e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d0:	ea42 0103 	orr.w	r1, r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	0c1b      	lsrs	r3, r3, #16
 800a8ea:	f003 0204 	and.w	r2, r3, #4
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	f003 0310 	and.w	r3, r3, #16
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a90a:	ea42 0103 	orr.w	r1, r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	430a      	orrs	r2, r1
 800a91a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08a      	sub	sp, #40	; 0x28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a942:	2301      	movs	r3, #1
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a952:	2b01      	cmp	r3, #1
 800a954:	d101      	bne.n	800a95a <HAL_SPI_TransmitReceive+0x26>
 800a956:	2302      	movs	r3, #2
 800a958:	e1fb      	b.n	800ad52 <HAL_SPI_TransmitReceive+0x41e>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a962:	f7f8 f9cf 	bl	8002d04 <HAL_GetTick>
 800a966:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a96e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a976:	887b      	ldrh	r3, [r7, #2]
 800a978:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a97a:	887b      	ldrh	r3, [r7, #2]
 800a97c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a97e:	7efb      	ldrb	r3, [r7, #27]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d00e      	beq.n	800a9a2 <HAL_SPI_TransmitReceive+0x6e>
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a98a:	d106      	bne.n	800a99a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d102      	bne.n	800a99a <HAL_SPI_TransmitReceive+0x66>
 800a994:	7efb      	ldrb	r3, [r7, #27]
 800a996:	2b04      	cmp	r3, #4
 800a998:	d003      	beq.n	800a9a2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a99a:	2302      	movs	r3, #2
 800a99c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a9a0:	e1cd      	b.n	800ad3e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d005      	beq.n	800a9b4 <HAL_SPI_TransmitReceive+0x80>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <HAL_SPI_TransmitReceive+0x80>
 800a9ae:	887b      	ldrh	r3, [r7, #2]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d103      	bne.n	800a9bc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a9ba:	e1c0      	b.n	800ad3e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d003      	beq.n	800a9d0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2205      	movs	r2, #5
 800a9cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	887a      	ldrh	r2, [r7, #2]
 800a9e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	887a      	ldrh	r2, [r7, #2]
 800a9e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	887a      	ldrh	r2, [r7, #2]
 800a9f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	887a      	ldrh	r2, [r7, #2]
 800a9fc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa12:	d802      	bhi.n	800aa1a <HAL_SPI_TransmitReceive+0xe6>
 800aa14:	8a3b      	ldrh	r3, [r7, #16]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d908      	bls.n	800aa2c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa28:	605a      	str	r2, [r3, #4]
 800aa2a:	e007      	b.n	800aa3c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa46:	2b40      	cmp	r3, #64	; 0x40
 800aa48:	d007      	beq.n	800aa5a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa62:	d97c      	bls.n	800ab5e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <HAL_SPI_TransmitReceive+0x13e>
 800aa6c:	8a7b      	ldrh	r3, [r7, #18]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d169      	bne.n	800ab46 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa76:	881a      	ldrh	r2, [r3, #0]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	1c9a      	adds	r2, r3, #2
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa96:	e056      	b.n	800ab46 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d11b      	bne.n	800aade <HAL_SPI_TransmitReceive+0x1aa>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d016      	beq.n	800aade <HAL_SPI_TransmitReceive+0x1aa>
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d113      	bne.n	800aade <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	881a      	ldrh	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	1c9a      	adds	r2, r3, #2
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	3b01      	subs	r3, #1
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d11c      	bne.n	800ab26 <HAL_SPI_TransmitReceive+0x1f2>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d016      	beq.n	800ab26 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68da      	ldr	r2, [r3, #12]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	b292      	uxth	r2, r2
 800ab04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	1c9a      	adds	r2, r3, #2
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab22:	2301      	movs	r3, #1
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab26:	f7f8 f8ed 	bl	8002d04 <HAL_GetTick>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d807      	bhi.n	800ab46 <HAL_SPI_TransmitReceive+0x212>
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3c:	d003      	beq.n	800ab46 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ab44:	e0fb      	b.n	800ad3e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1a3      	bne.n	800aa98 <HAL_SPI_TransmitReceive+0x164>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d19d      	bne.n	800aa98 <HAL_SPI_TransmitReceive+0x164>
 800ab5c:	e0df      	b.n	800ad1e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <HAL_SPI_TransmitReceive+0x23a>
 800ab66:	8a7b      	ldrh	r3, [r7, #18]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	f040 80cb 	bne.w	800ad04 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d912      	bls.n	800ab9e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	881a      	ldrh	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	1c9a      	adds	r2, r3, #2
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	3b02      	subs	r3, #2
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab9c:	e0b2      	b.n	800ad04 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	330c      	adds	r3, #12
 800aba8:	7812      	ldrb	r2, [r2, #0]
 800abaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abba:	b29b      	uxth	r3, r3
 800abbc:	3b01      	subs	r3, #1
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abc4:	e09e      	b.n	800ad04 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d134      	bne.n	800ac3e <HAL_SPI_TransmitReceive+0x30a>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d02f      	beq.n	800ac3e <HAL_SPI_TransmitReceive+0x30a>
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d12c      	bne.n	800ac3e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abe8:	b29b      	uxth	r3, r3
 800abea:	2b01      	cmp	r3, #1
 800abec:	d912      	bls.n	800ac14 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf2:	881a      	ldrh	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfe:	1c9a      	adds	r2, r3, #2
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	3b02      	subs	r3, #2
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac12:	e012      	b.n	800ac3a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	7812      	ldrb	r2, [r2, #0]
 800ac20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	1c5a      	adds	r2, r3, #1
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	3b01      	subs	r3, #1
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d148      	bne.n	800acde <HAL_SPI_TransmitReceive+0x3aa>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d042      	beq.n	800acde <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d923      	bls.n	800acac <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6e:	b292      	uxth	r2, r2
 800ac70:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	1c9a      	adds	r2, r3, #2
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	3b02      	subs	r3, #2
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d81f      	bhi.n	800acda <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aca8:	605a      	str	r2, [r3, #4]
 800acaa:	e016      	b.n	800acda <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f103 020c 	add.w	r2, r3, #12
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb8:	7812      	ldrb	r2, [r2, #0]
 800acba:	b2d2      	uxtb	r2, r2
 800acbc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acce:	b29b      	uxth	r3, r3
 800acd0:	3b01      	subs	r3, #1
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acda:	2301      	movs	r3, #1
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800acde:	f7f8 f811 	bl	8002d04 <HAL_GetTick>
 800ace2:	4602      	mov	r2, r0
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acea:	429a      	cmp	r2, r3
 800acec:	d803      	bhi.n	800acf6 <HAL_SPI_TransmitReceive+0x3c2>
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf4:	d102      	bne.n	800acfc <HAL_SPI_TransmitReceive+0x3c8>
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d103      	bne.n	800ad04 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ad02:	e01c      	b.n	800ad3e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f47f af5b 	bne.w	800abc6 <HAL_SPI_TransmitReceive+0x292>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f47f af54 	bne.w	800abc6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad1e:	69fa      	ldr	r2, [r7, #28]
 800ad20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f938 	bl	800af98 <SPI_EndRxTxTransaction>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d006      	beq.n	800ad3c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2220      	movs	r2, #32
 800ad38:	661a      	str	r2, [r3, #96]	; 0x60
 800ad3a:	e000      	b.n	800ad3e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ad3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ad4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3728      	adds	r7, #40	; 0x28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad6c:	f7f7 ffca 	bl	8002d04 <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	1a9b      	subs	r3, r3, r2
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	4413      	add	r3, r2
 800ad7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad7c:	f7f7 ffc2 	bl	8002d04 <HAL_GetTick>
 800ad80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad82:	4b39      	ldr	r3, [pc, #228]	; (800ae68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	015b      	lsls	r3, r3, #5
 800ad88:	0d1b      	lsrs	r3, r3, #20
 800ad8a:	69fa      	ldr	r2, [r7, #28]
 800ad8c:	fb02 f303 	mul.w	r3, r2, r3
 800ad90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad92:	e054      	b.n	800ae3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d050      	beq.n	800ae3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad9c:	f7f7 ffb2 	bl	8002d04 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	69fa      	ldr	r2, [r7, #28]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d902      	bls.n	800adb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d13d      	bne.n	800ae2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800adc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adca:	d111      	bne.n	800adf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800add4:	d004      	beq.n	800ade0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adde:	d107      	bne.n	800adf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adf8:	d10f      	bne.n	800ae1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e017      	b.n	800ae5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	4013      	ands	r3, r2
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	bf0c      	ite	eq
 800ae4e:	2301      	moveq	r3, #1
 800ae50:	2300      	movne	r3, #0
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	461a      	mov	r2, r3
 800ae56:	79fb      	ldrb	r3, [r7, #7]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d19b      	bne.n	800ad94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20000020 	.word	0x20000020

0800ae6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	; 0x28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae7e:	f7f7 ff41 	bl	8002d04 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ae8e:	f7f7 ff39 	bl	8002d04 <HAL_GetTick>
 800ae92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	330c      	adds	r3, #12
 800ae9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae9c:	4b3d      	ldr	r3, [pc, #244]	; (800af94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	00da      	lsls	r2, r3, #3
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	0d1b      	lsrs	r3, r3, #20
 800aeac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeae:	fb02 f303 	mul.w	r3, r2, r3
 800aeb2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800aeb4:	e060      	b.n	800af78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aebc:	d107      	bne.n	800aece <SPI_WaitFifoStateUntilTimeout+0x62>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d104      	bne.n	800aece <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aecc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed4:	d050      	beq.n	800af78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aed6:	f7f7 ff15 	bl	8002d04 <HAL_GetTick>
 800aeda:	4602      	mov	r2, r0
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d902      	bls.n	800aeec <SPI_WaitFifoStateUntilTimeout+0x80>
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d13d      	bne.n	800af68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aefa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af04:	d111      	bne.n	800af2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af0e:	d004      	beq.n	800af1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af18:	d107      	bne.n	800af2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af32:	d10f      	bne.n	800af54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	e010      	b.n	800af8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	3b01      	subs	r3, #1
 800af76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689a      	ldr	r2, [r3, #8]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4013      	ands	r3, r2
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	429a      	cmp	r2, r3
 800af86:	d196      	bne.n	800aeb6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3728      	adds	r7, #40	; 0x28
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20000020 	.word	0x20000020

0800af98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af02      	add	r7, sp, #8
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2200      	movs	r2, #0
 800afac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff ff5b 	bl	800ae6c <SPI_WaitFifoStateUntilTimeout>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d007      	beq.n	800afcc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afc0:	f043 0220 	orr.w	r2, r3, #32
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e027      	b.n	800b01c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2200      	movs	r2, #0
 800afd4:	2180      	movs	r1, #128	; 0x80
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f7ff fec0 	bl	800ad5c <SPI_WaitFlagStateUntilTimeout>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d007      	beq.n	800aff2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afe6:	f043 0220 	orr.w	r2, r3, #32
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e014      	b.n	800b01c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff ff34 	bl	800ae6c <SPI_WaitFifoStateUntilTimeout>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d007      	beq.n	800b01a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00e:	f043 0220 	orr.w	r2, r3, #32
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e000      	b.n	800b01c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e049      	b.n	800b0ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d106      	bne.n	800b050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7f7 fce2 	bl	8002a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2202      	movs	r2, #2
 800b054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3304      	adds	r3, #4
 800b060:	4619      	mov	r1, r3
 800b062:	4610      	mov	r0, r2
 800b064:	f000 fa50 	bl	800b508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d122      	bne.n	800b12e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d11b      	bne.n	800b12e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f06f 0202 	mvn.w	r2, #2
 800b0fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	2b00      	cmp	r3, #0
 800b112:	d003      	beq.n	800b11c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f9d8 	bl	800b4ca <HAL_TIM_IC_CaptureCallback>
 800b11a:	e005      	b.n	800b128 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f9ca 	bl	800b4b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f9db 	bl	800b4de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b04      	cmp	r3, #4
 800b13a:	d122      	bne.n	800b182 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0304 	and.w	r3, r3, #4
 800b146:	2b04      	cmp	r3, #4
 800b148:	d11b      	bne.n	800b182 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f06f 0204 	mvn.w	r2, #4
 800b152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2202      	movs	r2, #2
 800b158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f9ae 	bl	800b4ca <HAL_TIM_IC_CaptureCallback>
 800b16e:	e005      	b.n	800b17c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f9a0 	bl	800b4b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f9b1 	bl	800b4de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	f003 0308 	and.w	r3, r3, #8
 800b18c:	2b08      	cmp	r3, #8
 800b18e:	d122      	bne.n	800b1d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	f003 0308 	and.w	r3, r3, #8
 800b19a:	2b08      	cmp	r3, #8
 800b19c:	d11b      	bne.n	800b1d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f06f 0208 	mvn.w	r2, #8
 800b1a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2204      	movs	r2, #4
 800b1ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69db      	ldr	r3, [r3, #28]
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f984 	bl	800b4ca <HAL_TIM_IC_CaptureCallback>
 800b1c2:	e005      	b.n	800b1d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f976 	bl	800b4b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f987 	bl	800b4de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	f003 0310 	and.w	r3, r3, #16
 800b1e0:	2b10      	cmp	r3, #16
 800b1e2:	d122      	bne.n	800b22a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	f003 0310 	and.w	r3, r3, #16
 800b1ee:	2b10      	cmp	r3, #16
 800b1f0:	d11b      	bne.n	800b22a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f06f 0210 	mvn.w	r2, #16
 800b1fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2208      	movs	r2, #8
 800b200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69db      	ldr	r3, [r3, #28]
 800b208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f95a 	bl	800b4ca <HAL_TIM_IC_CaptureCallback>
 800b216:	e005      	b.n	800b224 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f94c 	bl	800b4b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f95d 	bl	800b4de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b01      	cmp	r3, #1
 800b236:	d10e      	bne.n	800b256 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b01      	cmp	r3, #1
 800b244:	d107      	bne.n	800b256 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f06f 0201 	mvn.w	r2, #1
 800b24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f926 	bl	800b4a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b260:	2b80      	cmp	r3, #128	; 0x80
 800b262:	d10e      	bne.n	800b282 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b26e:	2b80      	cmp	r3, #128	; 0x80
 800b270:	d107      	bne.n	800b282 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fb09 	bl	800b894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b28c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b290:	d10e      	bne.n	800b2b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	d107      	bne.n	800b2b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b2a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fafc 	bl	800b8a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ba:	2b40      	cmp	r3, #64	; 0x40
 800b2bc:	d10e      	bne.n	800b2dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c8:	2b40      	cmp	r3, #64	; 0x40
 800b2ca:	d107      	bne.n	800b2dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f90b 	bl	800b4f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	f003 0320 	and.w	r3, r3, #32
 800b2e6:	2b20      	cmp	r3, #32
 800b2e8:	d10e      	bne.n	800b308 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b20      	cmp	r3, #32
 800b2f6:	d107      	bne.n	800b308 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f06f 0220 	mvn.w	r2, #32
 800b300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fabc 	bl	800b880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b324:	2b01      	cmp	r3, #1
 800b326:	d101      	bne.n	800b32c <HAL_TIM_ConfigClockSource+0x1c>
 800b328:	2302      	movs	r3, #2
 800b32a:	e0b6      	b.n	800b49a <HAL_TIM_ConfigClockSource+0x18a>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b34a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b34e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b368:	d03e      	beq.n	800b3e8 <HAL_TIM_ConfigClockSource+0xd8>
 800b36a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b36e:	f200 8087 	bhi.w	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b376:	f000 8086 	beq.w	800b486 <HAL_TIM_ConfigClockSource+0x176>
 800b37a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b37e:	d87f      	bhi.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b380:	2b70      	cmp	r3, #112	; 0x70
 800b382:	d01a      	beq.n	800b3ba <HAL_TIM_ConfigClockSource+0xaa>
 800b384:	2b70      	cmp	r3, #112	; 0x70
 800b386:	d87b      	bhi.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b388:	2b60      	cmp	r3, #96	; 0x60
 800b38a:	d050      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0x11e>
 800b38c:	2b60      	cmp	r3, #96	; 0x60
 800b38e:	d877      	bhi.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b390:	2b50      	cmp	r3, #80	; 0x50
 800b392:	d03c      	beq.n	800b40e <HAL_TIM_ConfigClockSource+0xfe>
 800b394:	2b50      	cmp	r3, #80	; 0x50
 800b396:	d873      	bhi.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b398:	2b40      	cmp	r3, #64	; 0x40
 800b39a:	d058      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x13e>
 800b39c:	2b40      	cmp	r3, #64	; 0x40
 800b39e:	d86f      	bhi.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b3a0:	2b30      	cmp	r3, #48	; 0x30
 800b3a2:	d064      	beq.n	800b46e <HAL_TIM_ConfigClockSource+0x15e>
 800b3a4:	2b30      	cmp	r3, #48	; 0x30
 800b3a6:	d86b      	bhi.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b3a8:	2b20      	cmp	r3, #32
 800b3aa:	d060      	beq.n	800b46e <HAL_TIM_ConfigClockSource+0x15e>
 800b3ac:	2b20      	cmp	r3, #32
 800b3ae:	d867      	bhi.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d05c      	beq.n	800b46e <HAL_TIM_ConfigClockSource+0x15e>
 800b3b4:	2b10      	cmp	r3, #16
 800b3b6:	d05a      	beq.n	800b46e <HAL_TIM_ConfigClockSource+0x15e>
 800b3b8:	e062      	b.n	800b480 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	6899      	ldr	r1, [r3, #8]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	f000 f9b1 	bl	800b730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b3dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	609a      	str	r2, [r3, #8]
      break;
 800b3e6:	e04f      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	6899      	ldr	r1, [r3, #8]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f000 f99a 	bl	800b730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689a      	ldr	r2, [r3, #8]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b40a:	609a      	str	r2, [r3, #8]
      break;
 800b40c:	e03c      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	6859      	ldr	r1, [r3, #4]
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	461a      	mov	r2, r3
 800b41c:	f000 f90e 	bl	800b63c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2150      	movs	r1, #80	; 0x50
 800b426:	4618      	mov	r0, r3
 800b428:	f000 f967 	bl	800b6fa <TIM_ITRx_SetConfig>
      break;
 800b42c:	e02c      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	6859      	ldr	r1, [r3, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	461a      	mov	r2, r3
 800b43c:	f000 f92d 	bl	800b69a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2160      	movs	r1, #96	; 0x60
 800b446:	4618      	mov	r0, r3
 800b448:	f000 f957 	bl	800b6fa <TIM_ITRx_SetConfig>
      break;
 800b44c:	e01c      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6818      	ldr	r0, [r3, #0]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	6859      	ldr	r1, [r3, #4]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	461a      	mov	r2, r3
 800b45c:	f000 f8ee 	bl	800b63c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2140      	movs	r1, #64	; 0x40
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f947 	bl	800b6fa <TIM_ITRx_SetConfig>
      break;
 800b46c:	e00c      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4619      	mov	r1, r3
 800b478:	4610      	mov	r0, r2
 800b47a:	f000 f93e 	bl	800b6fa <TIM_ITRx_SetConfig>
      break;
 800b47e:	e003      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	73fb      	strb	r3, [r7, #15]
      break;
 800b484:	e000      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b498:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4be:	bf00      	nop
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b083      	sub	sp, #12
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4d2:	bf00      	nop
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b083      	sub	sp, #12
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4e6:	bf00      	nop
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4fa:	bf00      	nop
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
	...

0800b508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a40      	ldr	r2, [pc, #256]	; (800b61c <TIM_Base_SetConfig+0x114>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d013      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b526:	d00f      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a3d      	ldr	r2, [pc, #244]	; (800b620 <TIM_Base_SetConfig+0x118>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d00b      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a3c      	ldr	r2, [pc, #240]	; (800b624 <TIM_Base_SetConfig+0x11c>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d007      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a3b      	ldr	r2, [pc, #236]	; (800b628 <TIM_Base_SetConfig+0x120>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d003      	beq.n	800b548 <TIM_Base_SetConfig+0x40>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a3a      	ldr	r2, [pc, #232]	; (800b62c <TIM_Base_SetConfig+0x124>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d108      	bne.n	800b55a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b54e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a2f      	ldr	r2, [pc, #188]	; (800b61c <TIM_Base_SetConfig+0x114>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d01f      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b568:	d01b      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a2c      	ldr	r2, [pc, #176]	; (800b620 <TIM_Base_SetConfig+0x118>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d017      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a2b      	ldr	r2, [pc, #172]	; (800b624 <TIM_Base_SetConfig+0x11c>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d013      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a2a      	ldr	r2, [pc, #168]	; (800b628 <TIM_Base_SetConfig+0x120>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d00f      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a29      	ldr	r2, [pc, #164]	; (800b62c <TIM_Base_SetConfig+0x124>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d00b      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a28      	ldr	r2, [pc, #160]	; (800b630 <TIM_Base_SetConfig+0x128>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d007      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a27      	ldr	r2, [pc, #156]	; (800b634 <TIM_Base_SetConfig+0x12c>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d003      	beq.n	800b5a2 <TIM_Base_SetConfig+0x9a>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a26      	ldr	r2, [pc, #152]	; (800b638 <TIM_Base_SetConfig+0x130>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d108      	bne.n	800b5b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a10      	ldr	r2, [pc, #64]	; (800b61c <TIM_Base_SetConfig+0x114>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d00f      	beq.n	800b600 <TIM_Base_SetConfig+0xf8>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a12      	ldr	r2, [pc, #72]	; (800b62c <TIM_Base_SetConfig+0x124>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d00b      	beq.n	800b600 <TIM_Base_SetConfig+0xf8>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a11      	ldr	r2, [pc, #68]	; (800b630 <TIM_Base_SetConfig+0x128>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d007      	beq.n	800b600 <TIM_Base_SetConfig+0xf8>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a10      	ldr	r2, [pc, #64]	; (800b634 <TIM_Base_SetConfig+0x12c>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d003      	beq.n	800b600 <TIM_Base_SetConfig+0xf8>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a0f      	ldr	r2, [pc, #60]	; (800b638 <TIM_Base_SetConfig+0x130>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d103      	bne.n	800b608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	615a      	str	r2, [r3, #20]
}
 800b60e:	bf00      	nop
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	40012c00 	.word	0x40012c00
 800b620:	40000400 	.word	0x40000400
 800b624:	40000800 	.word	0x40000800
 800b628:	40000c00 	.word	0x40000c00
 800b62c:	40013400 	.word	0x40013400
 800b630:	40014000 	.word	0x40014000
 800b634:	40014400 	.word	0x40014400
 800b638:	40014800 	.word	0x40014800

0800b63c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	f023 0201 	bic.w	r2, r3, #1
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	4313      	orrs	r3, r2
 800b670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f023 030a 	bic.w	r3, r3, #10
 800b678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	4313      	orrs	r3, r2
 800b680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	621a      	str	r2, [r3, #32]
}
 800b68e:	bf00      	nop
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b087      	sub	sp, #28
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	f023 0210 	bic.w	r2, r3, #16
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	031b      	lsls	r3, r3, #12
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	621a      	str	r2, [r3, #32]
}
 800b6ee:	bf00      	nop
 800b6f0:	371c      	adds	r7, #28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4313      	orrs	r3, r2
 800b718:	f043 0307 	orr.w	r3, r3, #7
 800b71c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	609a      	str	r2, [r3, #8]
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b74a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	021a      	lsls	r2, r3, #8
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	431a      	orrs	r2, r3
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	4313      	orrs	r3, r2
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	609a      	str	r2, [r3, #8]
}
 800b764:	bf00      	nop
 800b766:	371c      	adds	r7, #28
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b780:	2b01      	cmp	r3, #1
 800b782:	d101      	bne.n	800b788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b784:	2302      	movs	r3, #2
 800b786:	e068      	b.n	800b85a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2202      	movs	r2, #2
 800b794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a2e      	ldr	r2, [pc, #184]	; (800b868 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d004      	beq.n	800b7bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a2d      	ldr	r2, [pc, #180]	; (800b86c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d108      	bne.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a1e      	ldr	r2, [pc, #120]	; (800b868 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d01d      	beq.n	800b82e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7fa:	d018      	beq.n	800b82e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a1b      	ldr	r2, [pc, #108]	; (800b870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d013      	beq.n	800b82e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a1a      	ldr	r2, [pc, #104]	; (800b874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00e      	beq.n	800b82e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a18      	ldr	r2, [pc, #96]	; (800b878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d009      	beq.n	800b82e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a13      	ldr	r2, [pc, #76]	; (800b86c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d004      	beq.n	800b82e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a14      	ldr	r2, [pc, #80]	; (800b87c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d10c      	bne.n	800b848 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	40012c00 	.word	0x40012c00
 800b86c:	40013400 	.word	0x40013400
 800b870:	40000400 	.word	0x40000400
 800b874:	40000800 	.word	0x40000800
 800b878:	40000c00 	.word	0x40000c00
 800b87c:	40014000 	.word	0x40014000

0800b880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b8bc:	b084      	sub	sp, #16
 800b8be:	b480      	push	{r7}
 800b8c0:	b085      	sub	sp, #20
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	f107 001c 	add.w	r0, r7, #28
 800b8ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b8d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b8d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b8da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b8de:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b8e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	4b07      	ldr	r3, [pc, #28]	; (800b90c <SDMMC_Init+0x50>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	b004      	add	sp, #16
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	ffc02c00 	.word	0xffc02c00

0800b910 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b91e:	4618      	mov	r0, r3
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f043 0203 	orr.w	r2, r3, #3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b960:	2002      	movs	r0, #2
 800b962:	f7f7 f9db 	bl	8002d1c <HAL_Delay>

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0303 	and.w	r3, r3, #3
}
 800b980:	4618      	mov	r0, r3
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b9b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b9b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68da      	ldr	r2, [r3, #12]
 800b9c2:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <SDMMC_SendCommand+0x50>)
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	431a      	orrs	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	fffee0c0 	.word	0xfffee0c0

0800b9e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	b2db      	uxtb	r3, r3
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3314      	adds	r3, #20
 800ba08:	461a      	mov	r2, r3
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	685a      	ldr	r2, [r3, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba46:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ba4c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ba52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	431a      	orrs	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0

}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ba86:	2310      	movs	r3, #16
 800ba88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba90:	2300      	movs	r3, #0
 800ba92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba9a:	f107 0308 	add.w	r3, r7, #8
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ff73 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800baa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800baaa:	2110      	movs	r1, #16
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fa7b 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bab4:	69fb      	ldr	r3, [r7, #28]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3720      	adds	r7, #32
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b088      	sub	sp, #32
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bacc:	2311      	movs	r3, #17
 800bace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bae0:	f107 0308 	add.w	r3, r7, #8
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff ff50 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800baec:	f241 3288 	movw	r2, #5000	; 0x1388
 800baf0:	2111      	movs	r1, #17
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fa58 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800baf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bafa:	69fb      	ldr	r3, [r7, #28]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3720      	adds	r7, #32
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb12:	2312      	movs	r3, #18
 800bb14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb26:	f107 0308 	add.w	r3, r7, #8
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff ff2d 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb32:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb36:	2112      	movs	r1, #18
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fa35 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bb3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb40:	69fb      	ldr	r3, [r7, #28]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3720      	adds	r7, #32
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b088      	sub	sp, #32
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb58:	2318      	movs	r3, #24
 800bb5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb6c:	f107 0308 	add.w	r3, r7, #8
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff ff0a 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb7c:	2118      	movs	r1, #24
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fa12 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bb84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb86:	69fb      	ldr	r3, [r7, #28]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3720      	adds	r7, #32
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bb9e:	2319      	movs	r3, #25
 800bba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbb2:	f107 0308 	add.w	r3, r7, #8
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff fee7 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bbbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc2:	2119      	movs	r1, #25
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f9ef 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bbca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3720      	adds	r7, #32
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbf6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc10:	f107 0308 	add.w	r3, r7, #8
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7ff feb8 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc1c:	4a08      	ldr	r2, [pc, #32]	; (800bc40 <SDMMC_CmdStopTransfer+0x68>)
 800bc1e:	210c      	movs	r1, #12
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f9c1 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bc26:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800bc34:	69fb      	ldr	r3, [r7, #28]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3720      	adds	r7, #32
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	05f5e100 	.word	0x05f5e100

0800bc44 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08a      	sub	sp, #40	; 0x28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc54:	2307      	movs	r3, #7
 800bc56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc5c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc66:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc68:	f107 0310 	add.w	r3, r7, #16
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff fe8c 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bc74:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc78:	2107      	movs	r1, #7
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 f994 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bc80:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3728      	adds	r7, #40	; 0x28
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b088      	sub	sp, #32
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcaa:	f107 0308 	add.w	r3, r7, #8
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fe6b 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fbb8 	bl	800c42c <SDMMC_GetCmdError>
 800bcbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcbe:	69fb      	ldr	r3, [r7, #28]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3720      	adds	r7, #32
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bcd0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bcd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bcd6:	2308      	movs	r3, #8
 800bcd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bce0:	2300      	movs	r3, #0
 800bce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcea:	f107 0308 	add.w	r3, r7, #8
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff fe4b 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fb4a 	bl	800c390 <SDMMC_GetCmdResp7>
 800bcfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bd16:	2337      	movs	r3, #55	; 0x37
 800bd18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd20:	2300      	movs	r3, #0
 800bd22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd2a:	f107 0308 	add.w	r3, r7, #8
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff fe2b 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bd36:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd3a:	2137      	movs	r1, #55	; 0x37
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 f933 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bd42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd44:	69fb      	ldr	r3, [r7, #28]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3720      	adds	r7, #32
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b088      	sub	sp, #32
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd5c:	2329      	movs	r3, #41	; 0x29
 800bd5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd70:	f107 0308 	add.w	r3, r7, #8
 800bd74:	4619      	mov	r1, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff fe08 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fa4f 	bl	800c220 <SDMMC_GetCmdResp3>
 800bd82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd84:	69fb      	ldr	r3, [r7, #28]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3720      	adds	r7, #32
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b088      	sub	sp, #32
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bd9c:	2306      	movs	r3, #6
 800bd9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bda0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bda4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdb0:	f107 0308 	add.w	r3, r7, #8
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff fde8 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bdbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc0:	2106      	movs	r1, #6
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f8f0 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bdc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdca:	69fb      	ldr	r3, [r7, #28]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3720      	adds	r7, #32
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bde0:	2333      	movs	r3, #51	; 0x33
 800bde2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bde4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bde8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdea:	2300      	movs	r3, #0
 800bdec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdf4:	f107 0308 	add.w	r3, r7, #8
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fdc6 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800be00:	f241 3288 	movw	r2, #5000	; 0x1388
 800be04:	2133      	movs	r1, #51	; 0x33
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f8ce 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800be0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be0e:	69fb      	ldr	r3, [r7, #28]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3720      	adds	r7, #32
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be24:	2302      	movs	r3, #2
 800be26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be28:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be38:	f107 0308 	add.w	r3, r7, #8
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff fda4 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f9a1 	bl	800c18c <SDMMC_GetCmdResp2>
 800be4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be4c:	69fb      	ldr	r3, [r7, #28]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3720      	adds	r7, #32
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b088      	sub	sp, #32
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be64:	2309      	movs	r3, #9
 800be66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be68:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be78:	f107 0308 	add.w	r3, r7, #8
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff fd84 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 f981 	bl	800c18c <SDMMC_GetCmdResp2>
 800be8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be8c:	69fb      	ldr	r3, [r7, #28]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3720      	adds	r7, #32
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b088      	sub	sp, #32
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bea4:	2303      	movs	r3, #3
 800bea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800beac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beae:	2300      	movs	r3, #0
 800beb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb8:	f107 0308 	add.w	r3, r7, #8
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fd64 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	2103      	movs	r1, #3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f9e9 	bl	800c2a0 <SDMMC_GetCmdResp6>
 800bece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bed0:	69fb      	ldr	r3, [r7, #28]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3720      	adds	r7, #32
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b088      	sub	sp, #32
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bee8:	230d      	movs	r3, #13
 800beea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bef2:	2300      	movs	r3, #0
 800bef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800befa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800befc:	f107 0308 	add.w	r3, r7, #8
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff fd42 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bf08:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf0c:	210d      	movs	r1, #13
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f84a 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bf14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf16:	69fb      	ldr	r3, [r7, #28]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3720      	adds	r7, #32
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b088      	sub	sp, #32
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bf2c:	230d      	movs	r3, #13
 800bf2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf40:	f107 0308 	add.w	r3, r7, #8
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fd20 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf50:	210d      	movs	r1, #13
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f828 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bf58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf5a:	69fb      	ldr	r3, [r7, #28]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3720      	adds	r7, #32
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800bf70:	230b      	movs	r3, #11
 800bf72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf84:	f107 0308 	add.w	r3, r7, #8
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff fcfe 	bl	800b98c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800bf90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf94:	210b      	movs	r1, #11
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f806 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bf9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf9e:	69fb      	ldr	r3, [r7, #28]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3720      	adds	r7, #32
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bfb6:	4b70      	ldr	r3, [pc, #448]	; (800c178 <SDMMC_GetCmdResp1+0x1d0>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a70      	ldr	r2, [pc, #448]	; (800c17c <SDMMC_GetCmdResp1+0x1d4>)
 800bfbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc0:	0a5a      	lsrs	r2, r3, #9
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	fb02 f303 	mul.w	r3, r2, r3
 800bfc8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	1e5a      	subs	r2, r3, #1
 800bfce:	61fa      	str	r2, [r7, #28]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfd8:	e0c9      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfde:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bfe0:	69ba      	ldr	r2, [r7, #24]
 800bfe2:	4b67      	ldr	r3, [pc, #412]	; (800c180 <SDMMC_GetCmdResp1+0x1d8>)
 800bfe4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0ef      	beq.n	800bfca <SDMMC_GetCmdResp1+0x22>
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1ea      	bne.n	800bfca <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2204      	movs	r2, #4
 800c004:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c006:	2304      	movs	r3, #4
 800c008:	e0b1      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d004      	beq.n	800c020 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2201      	movs	r2, #1
 800c01a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c01c:	2301      	movs	r3, #1
 800c01e:	e0a6      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4a58      	ldr	r2, [pc, #352]	; (800c184 <SDMMC_GetCmdResp1+0x1dc>)
 800c024:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f7ff fcda 	bl	800b9e0 <SDMMC_GetCommandResponse>
 800c02c:	4603      	mov	r3, r0
 800c02e:	461a      	mov	r2, r3
 800c030:	7afb      	ldrb	r3, [r7, #11]
 800c032:	4293      	cmp	r3, r2
 800c034:	d001      	beq.n	800c03a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c036:	2301      	movs	r3, #1
 800c038:	e099      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c03a:	2100      	movs	r1, #0
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f7ff fcdc 	bl	800b9fa <SDMMC_GetResponse>
 800c042:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	4b50      	ldr	r3, [pc, #320]	; (800c188 <SDMMC_GetCmdResp1+0x1e0>)
 800c048:	4013      	ands	r3, r2
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c04e:	2300      	movs	r3, #0
 800c050:	e08d      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	da02      	bge.n	800c05e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c058:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c05c:	e087      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c068:	2340      	movs	r3, #64	; 0x40
 800c06a:	e080      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c076:	2380      	movs	r3, #128	; 0x80
 800c078:	e079      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c084:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c088:	e071      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c094:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c098:	e069      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c0a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a8:	e061      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c0b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0b8:	e059      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0c8:	e051      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0d8:	e049      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c0e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0e8:	e041      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c0f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0f8:	e039      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c108:	e031      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c114:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c118:	e029      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c124:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c128:	e021      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c134:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c138:	e019      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c144:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c148:	e011      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c158:	e009      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f003 0308 	and.w	r3, r3, #8
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c164:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c168:	e001      	b.n	800c16e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c16a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3720      	adds	r7, #32
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	20000020 	.word	0x20000020
 800c17c:	10624dd3 	.word	0x10624dd3
 800c180:	00200045 	.word	0x00200045
 800c184:	002000c5 	.word	0x002000c5
 800c188:	fdffe008 	.word	0xfdffe008

0800c18c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c194:	4b1f      	ldr	r3, [pc, #124]	; (800c214 <SDMMC_GetCmdResp2+0x88>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a1f      	ldr	r2, [pc, #124]	; (800c218 <SDMMC_GetCmdResp2+0x8c>)
 800c19a:	fba2 2303 	umull	r2, r3, r2, r3
 800c19e:	0a5b      	lsrs	r3, r3, #9
 800c1a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1a4:	fb02 f303 	mul.w	r3, r2, r3
 800c1a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	1e5a      	subs	r2, r3, #1
 800c1ae:	60fa      	str	r2, [r7, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1b8:	e026      	b.n	800c208 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0ef      	beq.n	800c1aa <SDMMC_GetCmdResp2+0x1e>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1ea      	bne.n	800c1aa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d004      	beq.n	800c1ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2204      	movs	r2, #4
 800c1e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1e6:	2304      	movs	r3, #4
 800c1e8:	e00e      	b.n	800c208 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d004      	beq.n	800c200 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e003      	b.n	800c208 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a06      	ldr	r2, [pc, #24]	; (800c21c <SDMMC_GetCmdResp2+0x90>)
 800c204:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	20000020 	.word	0x20000020
 800c218:	10624dd3 	.word	0x10624dd3
 800c21c:	002000c5 	.word	0x002000c5

0800c220 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c228:	4b1a      	ldr	r3, [pc, #104]	; (800c294 <SDMMC_GetCmdResp3+0x74>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a1a      	ldr	r2, [pc, #104]	; (800c298 <SDMMC_GetCmdResp3+0x78>)
 800c22e:	fba2 2303 	umull	r2, r3, r2, r3
 800c232:	0a5b      	lsrs	r3, r3, #9
 800c234:	f241 3288 	movw	r2, #5000	; 0x1388
 800c238:	fb02 f303 	mul.w	r3, r2, r3
 800c23c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1e5a      	subs	r2, r3, #1
 800c242:	60fa      	str	r2, [r7, #12]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d102      	bne.n	800c24e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c24c:	e01b      	b.n	800c286 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c252:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d0ef      	beq.n	800c23e <SDMMC_GetCmdResp3+0x1e>
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1ea      	bne.n	800c23e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26c:	f003 0304 	and.w	r3, r3, #4
 800c270:	2b00      	cmp	r3, #0
 800c272:	d004      	beq.n	800c27e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2204      	movs	r2, #4
 800c278:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c27a:	2304      	movs	r3, #4
 800c27c:	e003      	b.n	800c286 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a06      	ldr	r2, [pc, #24]	; (800c29c <SDMMC_GetCmdResp3+0x7c>)
 800c282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3714      	adds	r7, #20
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	20000020 	.word	0x20000020
 800c298:	10624dd3 	.word	0x10624dd3
 800c29c:	002000c5 	.word	0x002000c5

0800c2a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	607a      	str	r2, [r7, #4]
 800c2ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2ae:	4b35      	ldr	r3, [pc, #212]	; (800c384 <SDMMC_GetCmdResp6+0xe4>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a35      	ldr	r2, [pc, #212]	; (800c388 <SDMMC_GetCmdResp6+0xe8>)
 800c2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b8:	0a5b      	lsrs	r3, r3, #9
 800c2ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2be:	fb02 f303 	mul.w	r3, r2, r3
 800c2c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	1e5a      	subs	r2, r3, #1
 800c2c8:	61fa      	str	r2, [r7, #28]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2d2:	e052      	b.n	800c37a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d0ef      	beq.n	800c2c4 <SDMMC_GetCmdResp6+0x24>
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1ea      	bne.n	800c2c4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f2:	f003 0304 	and.w	r3, r3, #4
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d004      	beq.n	800c304 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2204      	movs	r2, #4
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c300:	2304      	movs	r3, #4
 800c302:	e03a      	b.n	800c37a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d004      	beq.n	800c31a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2201      	movs	r2, #1
 800c314:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c316:	2301      	movs	r3, #1
 800c318:	e02f      	b.n	800c37a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f7ff fb60 	bl	800b9e0 <SDMMC_GetCommandResponse>
 800c320:	4603      	mov	r3, r0
 800c322:	461a      	mov	r2, r3
 800c324:	7afb      	ldrb	r3, [r7, #11]
 800c326:	4293      	cmp	r3, r2
 800c328:	d001      	beq.n	800c32e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e025      	b.n	800c37a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4a16      	ldr	r2, [pc, #88]	; (800c38c <SDMMC_GetCmdResp6+0xec>)
 800c332:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c334:	2100      	movs	r1, #0
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7ff fb5f 	bl	800b9fa <SDMMC_GetResponse>
 800c33c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d106      	bne.n	800c356 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	0c1b      	lsrs	r3, r3, #16
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c352:	2300      	movs	r3, #0
 800c354:	e011      	b.n	800c37a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c364:	e009      	b.n	800c37a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c374:	e001      	b.n	800c37a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3720      	adds	r7, #32
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20000020 	.word	0x20000020
 800c388:	10624dd3 	.word	0x10624dd3
 800c38c:	002000c5 	.word	0x002000c5

0800c390 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c398:	4b22      	ldr	r3, [pc, #136]	; (800c424 <SDMMC_GetCmdResp7+0x94>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a22      	ldr	r2, [pc, #136]	; (800c428 <SDMMC_GetCmdResp7+0x98>)
 800c39e:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a2:	0a5b      	lsrs	r3, r3, #9
 800c3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a8:	fb02 f303 	mul.w	r3, r2, r3
 800c3ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	1e5a      	subs	r2, r3, #1
 800c3b2:	60fa      	str	r2, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d102      	bne.n	800c3be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3bc:	e02c      	b.n	800c418 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0ef      	beq.n	800c3ae <SDMMC_GetCmdResp7+0x1e>
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1ea      	bne.n	800c3ae <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3dc:	f003 0304 	and.w	r3, r3, #4
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d004      	beq.n	800c3ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2204      	movs	r2, #4
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3ea:	2304      	movs	r3, #4
 800c3ec:	e014      	b.n	800c418 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d004      	beq.n	800c404 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c400:	2301      	movs	r3, #1
 800c402:	e009      	b.n	800c418 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2240      	movs	r2, #64	; 0x40
 800c414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c416:	2300      	movs	r3, #0

}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	20000020 	.word	0x20000020
 800c428:	10624dd3 	.word	0x10624dd3

0800c42c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c434:	4b11      	ldr	r3, [pc, #68]	; (800c47c <SDMMC_GetCmdError+0x50>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a11      	ldr	r2, [pc, #68]	; (800c480 <SDMMC_GetCmdError+0x54>)
 800c43a:	fba2 2303 	umull	r2, r3, r2, r3
 800c43e:	0a5b      	lsrs	r3, r3, #9
 800c440:	f241 3288 	movw	r2, #5000	; 0x1388
 800c444:	fb02 f303 	mul.w	r3, r2, r3
 800c448:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	1e5a      	subs	r2, r3, #1
 800c44e:	60fa      	str	r2, [r7, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d102      	bne.n	800c45a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c454:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c458:	e009      	b.n	800c46e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0f1      	beq.n	800c44a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a06      	ldr	r2, [pc, #24]	; (800c484 <SDMMC_GetCmdError+0x58>)
 800c46a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	20000020 	.word	0x20000020
 800c480:	10624dd3 	.word	0x10624dd3
 800c484:	002000c5 	.word	0x002000c5

0800c488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c488:	b084      	sub	sp, #16
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	f107 001c 	add.w	r0, r7, #28
 800c496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f001 faf6 	bl	800da98 <USB_CoreReset>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	639a      	str	r2, [r3, #56]	; 0x38
 800c4c2:	e005      	b.n	800c4d0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4dc:	b004      	add	sp, #16
 800c4de:	4770      	bx	lr

0800c4e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d165      	bne.n	800c5c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	4a3e      	ldr	r2, [pc, #248]	; (800c5f0 <USB_SetTurnaroundTime+0x110>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d906      	bls.n	800c50a <USB_SetTurnaroundTime+0x2a>
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	4a3d      	ldr	r2, [pc, #244]	; (800c5f4 <USB_SetTurnaroundTime+0x114>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d202      	bcs.n	800c50a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c504:	230f      	movs	r3, #15
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	e05c      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	4a39      	ldr	r2, [pc, #228]	; (800c5f4 <USB_SetTurnaroundTime+0x114>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d306      	bcc.n	800c520 <USB_SetTurnaroundTime+0x40>
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	4a38      	ldr	r2, [pc, #224]	; (800c5f8 <USB_SetTurnaroundTime+0x118>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d202      	bcs.n	800c520 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c51a:	230e      	movs	r3, #14
 800c51c:	617b      	str	r3, [r7, #20]
 800c51e:	e051      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	4a35      	ldr	r2, [pc, #212]	; (800c5f8 <USB_SetTurnaroundTime+0x118>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d306      	bcc.n	800c536 <USB_SetTurnaroundTime+0x56>
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	4a34      	ldr	r2, [pc, #208]	; (800c5fc <USB_SetTurnaroundTime+0x11c>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d202      	bcs.n	800c536 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c530:	230d      	movs	r3, #13
 800c532:	617b      	str	r3, [r7, #20]
 800c534:	e046      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	4a30      	ldr	r2, [pc, #192]	; (800c5fc <USB_SetTurnaroundTime+0x11c>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d306      	bcc.n	800c54c <USB_SetTurnaroundTime+0x6c>
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	4a2f      	ldr	r2, [pc, #188]	; (800c600 <USB_SetTurnaroundTime+0x120>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d802      	bhi.n	800c54c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c546:	230c      	movs	r3, #12
 800c548:	617b      	str	r3, [r7, #20]
 800c54a:	e03b      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	4a2c      	ldr	r2, [pc, #176]	; (800c600 <USB_SetTurnaroundTime+0x120>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d906      	bls.n	800c562 <USB_SetTurnaroundTime+0x82>
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	4a2b      	ldr	r2, [pc, #172]	; (800c604 <USB_SetTurnaroundTime+0x124>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d802      	bhi.n	800c562 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c55c:	230b      	movs	r3, #11
 800c55e:	617b      	str	r3, [r7, #20]
 800c560:	e030      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	4a27      	ldr	r2, [pc, #156]	; (800c604 <USB_SetTurnaroundTime+0x124>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d906      	bls.n	800c578 <USB_SetTurnaroundTime+0x98>
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	4a26      	ldr	r2, [pc, #152]	; (800c608 <USB_SetTurnaroundTime+0x128>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d802      	bhi.n	800c578 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c572:	230a      	movs	r3, #10
 800c574:	617b      	str	r3, [r7, #20]
 800c576:	e025      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	4a23      	ldr	r2, [pc, #140]	; (800c608 <USB_SetTurnaroundTime+0x128>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d906      	bls.n	800c58e <USB_SetTurnaroundTime+0xae>
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	4a22      	ldr	r2, [pc, #136]	; (800c60c <USB_SetTurnaroundTime+0x12c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d202      	bcs.n	800c58e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c588:	2309      	movs	r3, #9
 800c58a:	617b      	str	r3, [r7, #20]
 800c58c:	e01a      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	4a1e      	ldr	r2, [pc, #120]	; (800c60c <USB_SetTurnaroundTime+0x12c>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d306      	bcc.n	800c5a4 <USB_SetTurnaroundTime+0xc4>
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	4a1d      	ldr	r2, [pc, #116]	; (800c610 <USB_SetTurnaroundTime+0x130>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d802      	bhi.n	800c5a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c59e:	2308      	movs	r3, #8
 800c5a0:	617b      	str	r3, [r7, #20]
 800c5a2:	e00f      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	4a1a      	ldr	r2, [pc, #104]	; (800c610 <USB_SetTurnaroundTime+0x130>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d906      	bls.n	800c5ba <USB_SetTurnaroundTime+0xda>
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	4a19      	ldr	r2, [pc, #100]	; (800c614 <USB_SetTurnaroundTime+0x134>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d202      	bcs.n	800c5ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c5b4:	2307      	movs	r3, #7
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	e004      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c5ba:	2306      	movs	r3, #6
 800c5bc:	617b      	str	r3, [r7, #20]
 800c5be:	e001      	b.n	800c5c4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c5c0:	2309      	movs	r3, #9
 800c5c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	029b      	lsls	r3, r3, #10
 800c5d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	371c      	adds	r7, #28
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	00d8acbf 	.word	0x00d8acbf
 800c5f4:	00e4e1c0 	.word	0x00e4e1c0
 800c5f8:	00f42400 	.word	0x00f42400
 800c5fc:	01067380 	.word	0x01067380
 800c600:	011a499f 	.word	0x011a499f
 800c604:	01312cff 	.word	0x01312cff
 800c608:	014ca43f 	.word	0x014ca43f
 800c60c:	016e3600 	.word	0x016e3600
 800c610:	01a6ab1f 	.word	0x01a6ab1f
 800c614:	01e84800 	.word	0x01e84800

0800c618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	f043 0201 	orr.w	r2, r3, #1
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f023 0201 	bic.w	r2, r3, #1
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	460b      	mov	r3, r1
 800c666:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c668:	2300      	movs	r3, #0
 800c66a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c678:	78fb      	ldrb	r3, [r7, #3]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d115      	bne.n	800c6aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c68a:	2001      	movs	r0, #1
 800c68c:	f7f6 fb46 	bl	8002d1c <HAL_Delay>
      ms++;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f001 f985 	bl	800d9a6 <USB_GetMode>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d01e      	beq.n	800c6e0 <USB_SetCurrentMode+0x84>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b31      	cmp	r3, #49	; 0x31
 800c6a6:	d9f0      	bls.n	800c68a <USB_SetCurrentMode+0x2e>
 800c6a8:	e01a      	b.n	800c6e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c6aa:	78fb      	ldrb	r3, [r7, #3]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d115      	bne.n	800c6dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c6bc:	2001      	movs	r0, #1
 800c6be:	f7f6 fb2d 	bl	8002d1c <HAL_Delay>
      ms++;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 f96c 	bl	800d9a6 <USB_GetMode>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d005      	beq.n	800c6e0 <USB_SetCurrentMode+0x84>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b31      	cmp	r3, #49	; 0x31
 800c6d8:	d9f0      	bls.n	800c6bc <USB_SetCurrentMode+0x60>
 800c6da:	e001      	b.n	800c6e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e005      	b.n	800c6ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2b32      	cmp	r3, #50	; 0x32
 800c6e4:	d101      	bne.n	800c6ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e000      	b.n	800c6ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b086      	sub	sp, #24
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c70e:	2300      	movs	r3, #0
 800c710:	613b      	str	r3, [r7, #16]
 800c712:	e009      	b.n	800c728 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	3340      	adds	r3, #64	; 0x40
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	2200      	movs	r2, #0
 800c720:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	3301      	adds	r3, #1
 800c726:	613b      	str	r3, [r7, #16]
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	2b0e      	cmp	r3, #14
 800c72c:	d9f2      	bls.n	800c714 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c730:	2b00      	cmp	r3, #0
 800c732:	d11c      	bne.n	800c76e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c742:	f043 0302 	orr.w	r3, r3, #2
 800c746:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	601a      	str	r2, [r3, #0]
 800c76c:	e005      	b.n	800c77a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c772:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c780:	461a      	mov	r2, r3
 800c782:	2300      	movs	r3, #0
 800c784:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c78c:	4619      	mov	r1, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c794:	461a      	mov	r2, r3
 800c796:	680b      	ldr	r3, [r1, #0]
 800c798:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c79a:	2103      	movs	r1, #3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f959 	bl	800ca54 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c7a2:	2110      	movs	r1, #16
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f8f1 	bl	800c98c <USB_FlushTxFifo>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d001      	beq.n	800c7b4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f91d 	bl	800c9f4 <USB_FlushRxFifo>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	2300      	movs	r3, #0
 800c7da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	e043      	b.n	800c876 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c804:	d118      	bne.n	800c838 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10a      	bne.n	800c822 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c818:	461a      	mov	r2, r3
 800c81a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c81e:	6013      	str	r3, [r2, #0]
 800c820:	e013      	b.n	800c84a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82e:	461a      	mov	r2, r3
 800c830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c834:	6013      	str	r3, [r2, #0]
 800c836:	e008      	b.n	800c84a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c844:	461a      	mov	r2, r3
 800c846:	2300      	movs	r3, #0
 800c848:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c856:	461a      	mov	r2, r3
 800c858:	2300      	movs	r3, #0
 800c85a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c868:	461a      	mov	r2, r3
 800c86a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c86e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	3301      	adds	r3, #1
 800c874:	613b      	str	r3, [r7, #16]
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	693a      	ldr	r2, [r7, #16]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d3b7      	bcc.n	800c7ee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c87e:	2300      	movs	r3, #0
 800c880:	613b      	str	r3, [r7, #16]
 800c882:	e043      	b.n	800c90c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	015a      	lsls	r2, r3, #5
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4413      	add	r3, r2
 800c88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c89a:	d118      	bne.n	800c8ce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10a      	bne.n	800c8b8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8b4:	6013      	str	r3, [r2, #0]
 800c8b6:	e013      	b.n	800c8e0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8ca:	6013      	str	r3, [r2, #0]
 800c8cc:	e008      	b.n	800c8e0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	015a      	lsls	r2, r3, #5
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8da:	461a      	mov	r2, r3
 800c8dc:	2300      	movs	r3, #0
 800c8de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	015a      	lsls	r2, r3, #5
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8fe:	461a      	mov	r2, r3
 800c900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	3301      	adds	r3, #1
 800c90a:	613b      	str	r3, [r7, #16]
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	429a      	cmp	r2, r3
 800c912:	d3b7      	bcc.n	800c884 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c926:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c934:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	f043 0210 	orr.w	r2, r3, #16
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	699a      	ldr	r2, [r3, #24]
 800c946:	4b10      	ldr	r3, [pc, #64]	; (800c988 <USB_DevInit+0x294>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c950:	2b00      	cmp	r3, #0
 800c952:	d005      	beq.n	800c960 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	f043 0208 	orr.w	r2, r3, #8
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c962:	2b01      	cmp	r3, #1
 800c964:	d107      	bne.n	800c976 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c96e:	f043 0304 	orr.w	r3, r3, #4
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c976:	7dfb      	ldrb	r3, [r7, #23]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c982:	b004      	add	sp, #16
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	803c3800 	.word	0x803c3800

0800c98c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c996:	2300      	movs	r3, #0
 800c998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	4a13      	ldr	r2, [pc, #76]	; (800c9f0 <USB_FlushTxFifo+0x64>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d901      	bls.n	800c9ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e01b      	b.n	800c9e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	daf2      	bge.n	800c99a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	019b      	lsls	r3, r3, #6
 800c9bc:	f043 0220 	orr.w	r2, r3, #32
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	4a08      	ldr	r2, [pc, #32]	; (800c9f0 <USB_FlushTxFifo+0x64>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d901      	bls.n	800c9d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e006      	b.n	800c9e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	f003 0320 	and.w	r3, r3, #32
 800c9de:	2b20      	cmp	r3, #32
 800c9e0:	d0f0      	beq.n	800c9c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	00030d40 	.word	0x00030d40

0800c9f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	3301      	adds	r3, #1
 800ca04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	4a11      	ldr	r2, [pc, #68]	; (800ca50 <USB_FlushRxFifo+0x5c>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d901      	bls.n	800ca12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e018      	b.n	800ca44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	daf2      	bge.n	800ca00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2210      	movs	r2, #16
 800ca22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	3301      	adds	r3, #1
 800ca28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4a08      	ldr	r2, [pc, #32]	; (800ca50 <USB_FlushRxFifo+0x5c>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d901      	bls.n	800ca36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ca32:	2303      	movs	r3, #3
 800ca34:	e006      	b.n	800ca44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	f003 0310 	and.w	r3, r3, #16
 800ca3e:	2b10      	cmp	r3, #16
 800ca40:	d0f0      	beq.n	800ca24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr
 800ca50:	00030d40 	.word	0x00030d40

0800ca54 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	78fb      	ldrb	r3, [r7, #3]
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca74:	4313      	orrs	r3, r2
 800ca76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b087      	sub	sp, #28
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	f003 0306 	and.w	r3, r3, #6
 800ca9e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d002      	beq.n	800caac <USB_GetDevSpeed+0x26>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b06      	cmp	r3, #6
 800caaa:	d102      	bne.n	800cab2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800caac:	2302      	movs	r3, #2
 800caae:	75fb      	strb	r3, [r7, #23]
 800cab0:	e001      	b.n	800cab6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800cab2:	230f      	movs	r3, #15
 800cab4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	371c      	adds	r7, #28
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	785b      	ldrb	r3, [r3, #1]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d13a      	bne.n	800cb56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae6:	69da      	ldr	r2, [r3, #28]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	f003 030f 	and.w	r3, r3, #15
 800caf0:	2101      	movs	r1, #1
 800caf2:	fa01 f303 	lsl.w	r3, r1, r3
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	68f9      	ldr	r1, [r7, #12]
 800cafa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cafe:	4313      	orrs	r3, r2
 800cb00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	015a      	lsls	r2, r3, #5
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	4413      	add	r3, r2
 800cb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d155      	bne.n	800cbc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	015a      	lsls	r2, r3, #5
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4413      	add	r3, r2
 800cb20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	791b      	ldrb	r3, [r3, #4]
 800cb32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	059b      	lsls	r3, r3, #22
 800cb3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	0151      	lsls	r1, r2, #5
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	440a      	add	r2, r1
 800cb46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	e036      	b.n	800cbc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5c:	69da      	ldr	r2, [r3, #28]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	2101      	movs	r1, #1
 800cb68:	fa01 f303 	lsl.w	r3, r1, r3
 800cb6c:	041b      	lsls	r3, r3, #16
 800cb6e:	68f9      	ldr	r1, [r7, #12]
 800cb70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb74:	4313      	orrs	r3, r2
 800cb76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	015a      	lsls	r2, r3, #5
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4413      	add	r3, r2
 800cb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d11a      	bne.n	800cbc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	015a      	lsls	r2, r3, #5
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	4413      	add	r3, r2
 800cb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	791b      	ldrb	r3, [r3, #4]
 800cba8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbaa:	430b      	orrs	r3, r1
 800cbac:	4313      	orrs	r3, r2
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	0151      	lsls	r1, r2, #5
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	440a      	add	r2, r1
 800cbb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3714      	adds	r7, #20
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
	...

0800cbd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	785b      	ldrb	r3, [r3, #1]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d161      	bne.n	800ccb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc06:	d11f      	bne.n	800cc48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	015a      	lsls	r2, r3, #5
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	0151      	lsls	r1, r2, #5
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	440a      	add	r2, r1
 800cc1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	0151      	lsls	r1, r2, #5
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	440a      	add	r2, r1
 800cc3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f003 030f 	and.w	r3, r3, #15
 800cc58:	2101      	movs	r1, #1
 800cc5a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	43db      	mvns	r3, r3
 800cc62:	68f9      	ldr	r1, [r7, #12]
 800cc64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc68:	4013      	ands	r3, r2
 800cc6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc72:	69da      	ldr	r2, [r3, #28]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	f003 030f 	and.w	r3, r3, #15
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	43db      	mvns	r3, r3
 800cc86:	68f9      	ldr	r1, [r7, #12]
 800cc88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	015a      	lsls	r2, r3, #5
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4413      	add	r3, r2
 800cc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	0159      	lsls	r1, r3, #5
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	440b      	add	r3, r1
 800cca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4b35      	ldr	r3, [pc, #212]	; (800cd84 <USB_DeactivateEndpoint+0x1b0>)
 800ccae:	4013      	ands	r3, r2
 800ccb0:	600b      	str	r3, [r1, #0]
 800ccb2:	e060      	b.n	800cd76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccca:	d11f      	bne.n	800cd0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	015a      	lsls	r2, r3, #5
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	0151      	lsls	r1, r2, #5
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	440a      	add	r2, r1
 800cce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	0151      	lsls	r1, r2, #5
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	440a      	add	r2, r1
 800cd02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	f003 030f 	and.w	r3, r3, #15
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd22:	041b      	lsls	r3, r3, #16
 800cd24:	43db      	mvns	r3, r3
 800cd26:	68f9      	ldr	r1, [r7, #12]
 800cd28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd36:	69da      	ldr	r2, [r3, #28]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	f003 030f 	and.w	r3, r3, #15
 800cd40:	2101      	movs	r1, #1
 800cd42:	fa01 f303 	lsl.w	r3, r1, r3
 800cd46:	041b      	lsls	r3, r3, #16
 800cd48:	43db      	mvns	r3, r3
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd50:	4013      	ands	r3, r2
 800cd52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	015a      	lsls	r2, r3, #5
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	0159      	lsls	r1, r3, #5
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	440b      	add	r3, r1
 800cd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <USB_DeactivateEndpoint+0x1b4>)
 800cd72:	4013      	ands	r3, r2
 800cd74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	ec337800 	.word	0xec337800
 800cd88:	eff37800 	.word	0xeff37800

0800cd8c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	785b      	ldrb	r3, [r3, #1]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	f040 810a 	bne.w	800cfbe <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d132      	bne.n	800ce18 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	015a      	lsls	r2, r3, #5
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	4413      	add	r3, r2
 800cdba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	0151      	lsls	r1, r2, #5
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	440a      	add	r2, r1
 800cdc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cdd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cdd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	015a      	lsls	r2, r3, #5
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	4413      	add	r3, r2
 800cdde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	693a      	ldr	r2, [r7, #16]
 800cde6:	0151      	lsls	r1, r2, #5
 800cde8:	697a      	ldr	r2, [r7, #20]
 800cdea:	440a      	add	r2, r1
 800cdec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	015a      	lsls	r2, r3, #5
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	693a      	ldr	r2, [r7, #16]
 800ce06:	0151      	lsls	r1, r2, #5
 800ce08:	697a      	ldr	r2, [r7, #20]
 800ce0a:	440a      	add	r2, r1
 800ce0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce10:	0cdb      	lsrs	r3, r3, #19
 800ce12:	04db      	lsls	r3, r3, #19
 800ce14:	6113      	str	r3, [r2, #16]
 800ce16:	e074      	b.n	800cf02 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	015a      	lsls	r2, r3, #5
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	0151      	lsls	r1, r2, #5
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	440a      	add	r2, r1
 800ce2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce32:	0cdb      	lsrs	r3, r3, #19
 800ce34:	04db      	lsls	r3, r3, #19
 800ce36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	015a      	lsls	r2, r3, #5
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	4413      	add	r3, r2
 800ce40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	693a      	ldr	r2, [r7, #16]
 800ce48:	0151      	lsls	r1, r2, #5
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	440a      	add	r2, r1
 800ce4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	6999      	ldr	r1, [r3, #24]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	440b      	add	r3, r1
 800ce74:	1e59      	subs	r1, r3, #1
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce80:	4b9e      	ldr	r3, [pc, #632]	; (800d0fc <USB_EPStartXfer+0x370>)
 800ce82:	400b      	ands	r3, r1
 800ce84:	6939      	ldr	r1, [r7, #16]
 800ce86:	0148      	lsls	r0, r1, #5
 800ce88:	6979      	ldr	r1, [r7, #20]
 800ce8a:	4401      	add	r1, r0
 800ce8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce90:	4313      	orrs	r3, r2
 800ce92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	015a      	lsls	r2, r3, #5
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea0:	691a      	ldr	r2, [r3, #16]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ceaa:	6939      	ldr	r1, [r7, #16]
 800ceac:	0148      	lsls	r0, r1, #5
 800ceae:	6979      	ldr	r1, [r7, #20]
 800ceb0:	4401      	add	r1, r0
 800ceb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	791b      	ldrb	r3, [r3, #4]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d11f      	bne.n	800cf02 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	015a      	lsls	r2, r3, #5
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	4413      	add	r3, r2
 800ceca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cece:	691b      	ldr	r3, [r3, #16]
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	0151      	lsls	r1, r2, #5
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	440a      	add	r2, r1
 800ced8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cedc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cee0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	015a      	lsls	r2, r3, #5
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	4413      	add	r3, r2
 800ceea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	0151      	lsls	r1, r2, #5
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	440a      	add	r2, r1
 800cef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cefc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf00:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	0151      	lsls	r1, r2, #5
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	440a      	add	r2, r1
 800cf18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf20:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	791b      	ldrb	r3, [r3, #4]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d015      	beq.n	800cf56 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 8106 	beq.w	800d140 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 030f 	and.w	r3, r3, #15
 800cf44:	2101      	movs	r1, #1
 800cf46:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4a:	6979      	ldr	r1, [r7, #20]
 800cf4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf50:	4313      	orrs	r3, r2
 800cf52:	634b      	str	r3, [r1, #52]	; 0x34
 800cf54:	e0f4      	b.n	800d140 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d110      	bne.n	800cf88 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	015a      	lsls	r2, r3, #5
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	693a      	ldr	r2, [r7, #16]
 800cf76:	0151      	lsls	r1, r2, #5
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	440a      	add	r2, r1
 800cf7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf84:	6013      	str	r3, [r2, #0]
 800cf86:	e00f      	b.n	800cfa8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	015a      	lsls	r2, r3, #5
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	4413      	add	r3, r2
 800cf90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	693a      	ldr	r2, [r7, #16]
 800cf98:	0151      	lsls	r1, r2, #5
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	440a      	add	r2, r1
 800cf9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfa6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	6919      	ldr	r1, [r3, #16]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781a      	ldrb	r2, [r3, #0]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fa94 	bl	800d4e4 <USB_WritePacket>
 800cfbc:	e0c0      	b.n	800d140 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	0151      	lsls	r1, r2, #5
 800cfd0:	697a      	ldr	r2, [r7, #20]
 800cfd2:	440a      	add	r2, r1
 800cfd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfd8:	0cdb      	lsrs	r3, r3, #19
 800cfda:	04db      	lsls	r3, r3, #19
 800cfdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	015a      	lsls	r2, r3, #5
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	693a      	ldr	r2, [r7, #16]
 800cfee:	0151      	lsls	r1, r2, #5
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	440a      	add	r2, r1
 800cff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d000:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d123      	bne.n	800d052 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	015a      	lsls	r2, r3, #5
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d016:	691a      	ldr	r2, [r3, #16]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d020:	6939      	ldr	r1, [r7, #16]
 800d022:	0148      	lsls	r0, r1, #5
 800d024:	6979      	ldr	r1, [r7, #20]
 800d026:	4401      	add	r1, r0
 800d028:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d02c:	4313      	orrs	r3, r2
 800d02e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	015a      	lsls	r2, r3, #5
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	4413      	add	r3, r2
 800d038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	693a      	ldr	r2, [r7, #16]
 800d040:	0151      	lsls	r1, r2, #5
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	440a      	add	r2, r1
 800d046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d04a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d04e:	6113      	str	r3, [r2, #16]
 800d050:	e037      	b.n	800d0c2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	699a      	ldr	r2, [r3, #24]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	4413      	add	r3, r2
 800d05c:	1e5a      	subs	r2, r3, #1
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	fbb2 f3f3 	udiv	r3, r2, r3
 800d066:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	89fa      	ldrh	r2, [r7, #14]
 800d06e:	fb03 f202 	mul.w	r2, r3, r2
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	015a      	lsls	r2, r3, #5
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	4413      	add	r3, r2
 800d07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d082:	691a      	ldr	r2, [r3, #16]
 800d084:	89fb      	ldrh	r3, [r7, #14]
 800d086:	04d9      	lsls	r1, r3, #19
 800d088:	4b1c      	ldr	r3, [pc, #112]	; (800d0fc <USB_EPStartXfer+0x370>)
 800d08a:	400b      	ands	r3, r1
 800d08c:	6939      	ldr	r1, [r7, #16]
 800d08e:	0148      	lsls	r0, r1, #5
 800d090:	6979      	ldr	r1, [r7, #20]
 800d092:	4401      	add	r1, r0
 800d094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d098:	4313      	orrs	r3, r2
 800d09a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a8:	691a      	ldr	r2, [r3, #16]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	69db      	ldr	r3, [r3, #28]
 800d0ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0b2:	6939      	ldr	r1, [r7, #16]
 800d0b4:	0148      	lsls	r0, r1, #5
 800d0b6:	6979      	ldr	r1, [r7, #20]
 800d0b8:	4401      	add	r1, r0
 800d0ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	791b      	ldrb	r3, [r3, #4]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d12a      	bne.n	800d120 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d112      	bne.n	800d100 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	0151      	lsls	r1, r2, #5
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	440a      	add	r2, r1
 800d0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	e011      	b.n	800d120 <USB_EPStartXfer+0x394>
 800d0fc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	4413      	add	r3, r2
 800d108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	0151      	lsls	r1, r2, #5
 800d112:	697a      	ldr	r2, [r7, #20]
 800d114:	440a      	add	r2, r1
 800d116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d11a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d11e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	015a      	lsls	r2, r3, #5
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	4413      	add	r3, r2
 800d128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	0151      	lsls	r1, r2, #5
 800d132:	697a      	ldr	r2, [r7, #20]
 800d134:	440a      	add	r2, r1
 800d136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d13a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d13e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop

0800d14c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	785b      	ldrb	r3, [r3, #1]
 800d164:	2b01      	cmp	r3, #1
 800d166:	f040 80ab 	bne.w	800d2c0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d132      	bne.n	800d1d8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	015a      	lsls	r2, r3, #5
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	4413      	add	r3, r2
 800d17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	0151      	lsls	r1, r2, #5
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	440a      	add	r2, r1
 800d188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d18c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	015a      	lsls	r2, r3, #5
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	0151      	lsls	r1, r2, #5
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	440a      	add	r2, r1
 800d1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	015a      	lsls	r2, r3, #5
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	4413      	add	r3, r2
 800d1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	0151      	lsls	r1, r2, #5
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	440a      	add	r2, r1
 800d1cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1d0:	0cdb      	lsrs	r3, r3, #19
 800d1d2:	04db      	lsls	r3, r3, #19
 800d1d4:	6113      	str	r3, [r2, #16]
 800d1d6:	e04e      	b.n	800d276 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	015a      	lsls	r2, r3, #5
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	4413      	add	r3, r2
 800d1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	0151      	lsls	r1, r2, #5
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	440a      	add	r2, r1
 800d1ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1f2:	0cdb      	lsrs	r3, r3, #19
 800d1f4:	04db      	lsls	r3, r3, #19
 800d1f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	0151      	lsls	r1, r2, #5
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	440a      	add	r2, r1
 800d20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d212:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d216:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d21a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	699a      	ldr	r2, [r3, #24]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	429a      	cmp	r2, r3
 800d226:	d903      	bls.n	800d230 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	68da      	ldr	r2, [r3, #12]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	015a      	lsls	r2, r3, #5
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	4413      	add	r3, r2
 800d238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d23c:	691b      	ldr	r3, [r3, #16]
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	0151      	lsls	r1, r2, #5
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	440a      	add	r2, r1
 800d246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d24a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d24e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	015a      	lsls	r2, r3, #5
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	4413      	add	r3, r2
 800d258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d25c:	691a      	ldr	r2, [r3, #16]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	0148      	lsls	r0, r1, #5
 800d26a:	68f9      	ldr	r1, [r7, #12]
 800d26c:	4401      	add	r1, r0
 800d26e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d272:	4313      	orrs	r3, r2
 800d274:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	015a      	lsls	r2, r3, #5
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	0151      	lsls	r1, r2, #5
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	440a      	add	r2, r1
 800d28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d294:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d071      	beq.n	800d382 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	f003 030f 	and.w	r3, r3, #15
 800d2ae:	2101      	movs	r1, #1
 800d2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d2b4:	68f9      	ldr	r1, [r7, #12]
 800d2b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	634b      	str	r3, [r1, #52]	; 0x34
 800d2be:	e060      	b.n	800d382 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	0151      	lsls	r1, r2, #5
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	440a      	add	r2, r1
 800d2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2da:	0cdb      	lsrs	r3, r3, #19
 800d2dc:	04db      	lsls	r3, r3, #19
 800d2de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	0151      	lsls	r1, r2, #5
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	440a      	add	r2, r1
 800d2f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d2fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d302:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	699b      	ldr	r3, [r3, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	68da      	ldr	r2, [r3, #12]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	015a      	lsls	r2, r3, #5
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4413      	add	r3, r2
 800d324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d328:	691b      	ldr	r3, [r3, #16]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	0151      	lsls	r1, r2, #5
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	440a      	add	r2, r1
 800d332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d33a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	015a      	lsls	r2, r3, #5
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	4413      	add	r3, r2
 800d344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d348:	691a      	ldr	r2, [r3, #16]
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	0148      	lsls	r0, r1, #5
 800d356:	68f9      	ldr	r1, [r7, #12]
 800d358:	4401      	add	r1, r0
 800d35a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d35e:	4313      	orrs	r3, r2
 800d360:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	015a      	lsls	r2, r3, #5
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	4413      	add	r3, r2
 800d36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	0151      	lsls	r1, r2, #5
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	440a      	add	r2, r1
 800d378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d37c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d380:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3714      	adds	r7, #20
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d390:	b480      	push	{r7}
 800d392:	b087      	sub	sp, #28
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d39a:	2300      	movs	r3, #0
 800d39c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	785b      	ldrb	r3, [r3, #1]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d14a      	bne.n	800d444 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	015a      	lsls	r2, r3, #5
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3c6:	f040 8086 	bne.w	800d4d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	7812      	ldrb	r2, [r2, #0]
 800d3de:	0151      	lsls	r1, r2, #5
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	440a      	add	r2, r1
 800d3e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d3ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	7812      	ldrb	r2, [r2, #0]
 800d402:	0151      	lsls	r1, r2, #5
 800d404:	693a      	ldr	r2, [r7, #16]
 800d406:	440a      	add	r2, r1
 800d408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d40c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d410:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3301      	adds	r3, #1
 800d416:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f242 7210 	movw	r2, #10000	; 0x2710
 800d41e:	4293      	cmp	r3, r2
 800d420:	d902      	bls.n	800d428 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	75fb      	strb	r3, [r7, #23]
          break;
 800d426:	e056      	b.n	800d4d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	4413      	add	r3, r2
 800d432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d43c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d440:	d0e7      	beq.n	800d412 <USB_EPStopXfer+0x82>
 800d442:	e048      	b.n	800d4d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	015a      	lsls	r2, r3, #5
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	4413      	add	r3, r2
 800d44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d45c:	d13b      	bne.n	800d4d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	683a      	ldr	r2, [r7, #0]
 800d470:	7812      	ldrb	r2, [r2, #0]
 800d472:	0151      	lsls	r1, r2, #5
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	440a      	add	r2, r1
 800d478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d47c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d480:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	7812      	ldrb	r2, [r2, #0]
 800d496:	0151      	lsls	r1, r2, #5
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	440a      	add	r2, r1
 800d49c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d902      	bls.n	800d4bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	75fb      	strb	r3, [r7, #23]
          break;
 800d4ba:	e00c      	b.n	800d4d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	015a      	lsls	r2, r3, #5
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4d4:	d0e7      	beq.n	800d4a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	371c      	adds	r7, #28
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b089      	sub	sp, #36	; 0x24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	4611      	mov	r1, r2
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	71fb      	strb	r3, [r7, #7]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d502:	88bb      	ldrh	r3, [r7, #4]
 800d504:	3303      	adds	r3, #3
 800d506:	089b      	lsrs	r3, r3, #2
 800d508:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d50a:	2300      	movs	r3, #0
 800d50c:	61bb      	str	r3, [r7, #24]
 800d50e:	e018      	b.n	800d542 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d510:	79fb      	ldrb	r3, [r7, #7]
 800d512:	031a      	lsls	r2, r3, #12
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	4413      	add	r3, r2
 800d518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d51c:	461a      	mov	r2, r3
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	3301      	adds	r3, #1
 800d528:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	3301      	adds	r3, #1
 800d52e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	3301      	adds	r3, #1
 800d534:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	3301      	adds	r3, #1
 800d53a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	3301      	adds	r3, #1
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	69ba      	ldr	r2, [r7, #24]
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	429a      	cmp	r2, r3
 800d548:	d3e2      	bcc.n	800d510 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3724      	adds	r7, #36	; 0x24
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d558:	b480      	push	{r7}
 800d55a:	b08b      	sub	sp, #44	; 0x2c
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	4613      	mov	r3, r2
 800d564:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d56e:	88fb      	ldrh	r3, [r7, #6]
 800d570:	089b      	lsrs	r3, r3, #2
 800d572:	b29b      	uxth	r3, r3
 800d574:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d576:	88fb      	ldrh	r3, [r7, #6]
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d57e:	2300      	movs	r3, #0
 800d580:	623b      	str	r3, [r7, #32]
 800d582:	e014      	b.n	800d5ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	3301      	adds	r3, #1
 800d594:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	3301      	adds	r3, #1
 800d59a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	3301      	adds	r3, #1
 800d5a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	623b      	str	r3, [r7, #32]
 800d5ae:	6a3a      	ldr	r2, [r7, #32]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d3e6      	bcc.n	800d584 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d5b6:	8bfb      	ldrh	r3, [r7, #30]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01e      	beq.n	800d5fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f107 0310 	add.w	r3, r7, #16
 800d5cc:	6812      	ldr	r2, [r2, #0]
 800d5ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	00db      	lsls	r3, r3, #3
 800d5d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	701a      	strb	r2, [r3, #0]
      i++;
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	623b      	str	r3, [r7, #32]
      pDest++;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d5ee:	8bfb      	ldrh	r3, [r7, #30]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d5f4:	8bfb      	ldrh	r3, [r7, #30]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1ea      	bne.n	800d5d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	372c      	adds	r7, #44	; 0x2c
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	785b      	ldrb	r3, [r3, #1]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d12c      	bne.n	800d67e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	015a      	lsls	r2, r3, #5
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4413      	add	r3, r2
 800d62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	db12      	blt.n	800d65c <USB_EPSetStall+0x54>
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00f      	beq.n	800d65c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	0151      	lsls	r1, r2, #5
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	440a      	add	r2, r1
 800d652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d65a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	4413      	add	r3, r2
 800d664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	0151      	lsls	r1, r2, #5
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	440a      	add	r2, r1
 800d672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	e02b      	b.n	800d6d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	015a      	lsls	r2, r3, #5
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	4413      	add	r3, r2
 800d686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	db12      	blt.n	800d6b6 <USB_EPSetStall+0xae>
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00f      	beq.n	800d6b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	015a      	lsls	r2, r3, #5
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	4413      	add	r3, r2
 800d69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	0151      	lsls	r1, r2, #5
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	440a      	add	r2, r1
 800d6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	015a      	lsls	r2, r3, #5
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	4413      	add	r3, r2
 800d6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	0151      	lsls	r1, r2, #5
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	440a      	add	r2, r1
 800d6cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	785b      	ldrb	r3, [r3, #1]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d128      	bne.n	800d752 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	015a      	lsls	r2, r3, #5
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4413      	add	r3, r2
 800d708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	0151      	lsls	r1, r2, #5
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	440a      	add	r2, r1
 800d716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d71a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d71e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	791b      	ldrb	r3, [r3, #4]
 800d724:	2b03      	cmp	r3, #3
 800d726:	d003      	beq.n	800d730 <USB_EPClearStall+0x4c>
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	791b      	ldrb	r3, [r3, #4]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d138      	bne.n	800d7a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	015a      	lsls	r2, r3, #5
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	4413      	add	r3, r2
 800d738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	0151      	lsls	r1, r2, #5
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	440a      	add	r2, r1
 800d746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d74a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d74e:	6013      	str	r3, [r2, #0]
 800d750:	e027      	b.n	800d7a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	015a      	lsls	r2, r3, #5
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	4413      	add	r3, r2
 800d75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	0151      	lsls	r1, r2, #5
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	440a      	add	r2, r1
 800d768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d76c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d770:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	791b      	ldrb	r3, [r3, #4]
 800d776:	2b03      	cmp	r3, #3
 800d778:	d003      	beq.n	800d782 <USB_EPClearStall+0x9e>
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	791b      	ldrb	r3, [r3, #4]
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d10f      	bne.n	800d7a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	015a      	lsls	r2, r3, #5
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	4413      	add	r3, r2
 800d78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	0151      	lsls	r1, r2, #5
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	440a      	add	r2, r1
 800d798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d7d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	78fb      	ldrb	r3, [r7, #3]
 800d7de:	011b      	lsls	r3, r3, #4
 800d7e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d7e4:	68f9      	ldr	r1, [r7, #12]
 800d7e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d816:	f023 0303 	bic.w	r3, r3, #3
 800d81a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d82a:	f023 0302 	bic.w	r3, r3, #2
 800d82e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d83e:	b480      	push	{r7}
 800d840:	b085      	sub	sp, #20
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d858:	f023 0303 	bic.w	r3, r3, #3
 800d85c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d86c:	f043 0302 	orr.w	r3, r3, #2
 800d870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	695b      	ldr	r3, [r3, #20]
 800d88c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	699b      	ldr	r3, [r3, #24]
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	4013      	ands	r3, r2
 800d896:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d898:	68fb      	ldr	r3, [r7, #12]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b085      	sub	sp, #20
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c2:	69db      	ldr	r3, [r3, #28]
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	0c1b      	lsrs	r3, r3, #16
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b085      	sub	sp, #20
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ec:	699b      	ldr	r3, [r3, #24]
 800d8ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f6:	69db      	ldr	r3, [r3, #28]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	4013      	ands	r3, r2
 800d8fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	b29b      	uxth	r3, r3
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr

0800d90e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d90e:	b480      	push	{r7}
 800d910:	b085      	sub	sp, #20
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
 800d916:	460b      	mov	r3, r1
 800d918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	015a      	lsls	r2, r3, #5
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	4413      	add	r3, r2
 800d926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	4013      	ands	r3, r2
 800d93a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d93c:	68bb      	ldr	r3, [r7, #8]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3714      	adds	r7, #20
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b087      	sub	sp, #28
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	460b      	mov	r3, r1
 800d954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d96c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d96e:	78fb      	ldrb	r3, [r7, #3]
 800d970:	f003 030f 	and.w	r3, r3, #15
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	fa22 f303 	lsr.w	r3, r2, r3
 800d97a:	01db      	lsls	r3, r3, #7
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	4313      	orrs	r3, r2
 800d982:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	015a      	lsls	r2, r3, #5
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	4013      	ands	r3, r2
 800d996:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d998:	68bb      	ldr	r3, [r7, #8]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b083      	sub	sp, #12
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b085      	sub	sp, #20
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d9e0:	f023 0307 	bic.w	r3, r3, #7
 800d9e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	333c      	adds	r3, #60	; 0x3c
 800da1a:	3304      	adds	r3, #4
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	4a1c      	ldr	r2, [pc, #112]	; (800da94 <USB_EP0_OutStart+0x8c>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d90a      	bls.n	800da3e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da38:	d101      	bne.n	800da3e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e024      	b.n	800da88 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da44:	461a      	mov	r2, r3
 800da46:	2300      	movs	r3, #0
 800da48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da6c:	f043 0318 	orr.w	r3, r3, #24
 800da70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da84:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	4f54300a 	.word	0x4f54300a

0800da98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3301      	adds	r3, #1
 800daa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4a13      	ldr	r2, [pc, #76]	; (800dafc <USB_CoreReset+0x64>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d901      	bls.n	800dab6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dab2:	2303      	movs	r3, #3
 800dab4:	e01b      	b.n	800daee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	daf2      	bge.n	800daa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dabe:	2300      	movs	r3, #0
 800dac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	f043 0201 	orr.w	r2, r3, #1
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3301      	adds	r3, #1
 800dad2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	4a09      	ldr	r2, [pc, #36]	; (800dafc <USB_CoreReset+0x64>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d901      	bls.n	800dae0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dadc:	2303      	movs	r3, #3
 800dade:	e006      	b.n	800daee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	f003 0301 	and.w	r3, r3, #1
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d0f0      	beq.n	800dace <USB_CoreReset+0x36>

  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3714      	adds	r7, #20
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	00030d40 	.word	0x00030d40

0800db00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800db04:	4904      	ldr	r1, [pc, #16]	; (800db18 <MX_FATFS_Init+0x18>)
 800db06:	4805      	ldr	r0, [pc, #20]	; (800db1c <MX_FATFS_Init+0x1c>)
 800db08:	f001 ff48 	bl	800f99c <FATFS_LinkDriver>
 800db0c:	4603      	mov	r3, r0
 800db0e:	461a      	mov	r2, r3
 800db10:	4b03      	ldr	r3, [pc, #12]	; (800db20 <MX_FATFS_Init+0x20>)
 800db12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800db14:	bf00      	nop
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200008e4 	.word	0x200008e4
 800db1c:	08011b8c 	.word	0x08011b8c
 800db20:	200008e0 	.word	0x200008e0

0800db24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800db2e:	f000 f885 	bl	800dc3c <BSP_SD_IsDetected>
 800db32:	4603      	mov	r3, r0
 800db34:	2b01      	cmp	r3, #1
 800db36:	d001      	beq.n	800db3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800db38:	2302      	movs	r3, #2
 800db3a:	e012      	b.n	800db62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800db3c:	480b      	ldr	r0, [pc, #44]	; (800db6c <BSP_SD_Init+0x48>)
 800db3e:	f7fb f961 	bl	8008e04 <HAL_SD_Init>
 800db42:	4603      	mov	r3, r0
 800db44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d109      	bne.n	800db60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800db4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800db50:	4806      	ldr	r0, [pc, #24]	; (800db6c <BSP_SD_Init+0x48>)
 800db52:	f7fc f815 	bl	8009b80 <HAL_SD_ConfigWideBusOperation>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800db60:	79fb      	ldrb	r3, [r7, #7]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	2000061c 	.word	0x2000061c

0800db70 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	68f9      	ldr	r1, [r7, #12]
 800db86:	4806      	ldr	r0, [pc, #24]	; (800dba0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800db88:	f7fb fa64 	bl	8009054 <HAL_SD_ReadBlocks_DMA>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d001      	beq.n	800db96 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800db92:	2301      	movs	r3, #1
 800db94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db96:	7dfb      	ldrb	r3, [r7, #23]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	2000061c 	.word	0x2000061c

0800dba4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	68f9      	ldr	r1, [r7, #12]
 800dbba:	4806      	ldr	r0, [pc, #24]	; (800dbd4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dbbc:	f7fb faf2 	bl	80091a4 <HAL_SD_WriteBlocks_DMA>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dbca:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3718      	adds	r7, #24
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	2000061c 	.word	0x2000061c

0800dbd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dbdc:	4805      	ldr	r0, [pc, #20]	; (800dbf4 <BSP_SD_GetCardState+0x1c>)
 800dbde:	f7fc f8e3 	bl	8009da8 <HAL_SD_GetCardState>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b04      	cmp	r3, #4
 800dbe6:	bf14      	ite	ne
 800dbe8:	2301      	movne	r3, #1
 800dbea:	2300      	moveq	r3, #0
 800dbec:	b2db      	uxtb	r3, r3
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	2000061c 	.word	0x2000061c

0800dbf8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	4803      	ldr	r0, [pc, #12]	; (800dc10 <BSP_SD_GetCardInfo+0x18>)
 800dc04:	f7fb ff90 	bl	8009b28 <HAL_SD_GetCardInfo>
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	2000061c 	.word	0x2000061c

0800dc14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dc1c:	f000 f9a0 	bl	800df60 <BSP_SD_WriteCpltCallback>
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dc30:	f000 f9a2 	bl	800df78 <BSP_SD_ReadCpltCallback>
}
 800dc34:	bf00      	nop
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dc42:	2301      	movs	r3, #1
 800dc44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dc46:	f000 f80b 	bl	800dc60 <BSP_PlatformIsDetected>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d101      	bne.n	800dc54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dc50:	2300      	movs	r3, #0
 800dc52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dc54:	79fb      	ldrb	r3, [r7, #7]
 800dc56:	b2db      	uxtb	r3, r3
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dc66:	2301      	movs	r3, #1
 800dc68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dc6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dc6e:	4806      	ldr	r0, [pc, #24]	; (800dc88 <BSP_PlatformIsDetected+0x28>)
 800dc70:	f7f6 fdea 	bl	8004848 <HAL_GPIO_ReadPin>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	48000400 	.word	0x48000400

0800dc8c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dc94:	f7f5 f836 	bl	8002d04 <HAL_GetTick>
 800dc98:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dc9a:	e006      	b.n	800dcaa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc9c:	f7ff ff9c 	bl	800dbd8 <BSP_SD_GetCardState>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	e009      	b.n	800dcbe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dcaa:	f7f5 f82b 	bl	8002d04 <HAL_GetTick>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	1ad3      	subs	r3, r2, r3
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d8f0      	bhi.n	800dc9c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dcba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
	...

0800dcc8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dcd2:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <SD_CheckStatus+0x38>)
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dcd8:	f7ff ff7e 	bl	800dbd8 <BSP_SD_GetCardState>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d107      	bne.n	800dcf2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dce2:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <SD_CheckStatus+0x38>)
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f023 0301 	bic.w	r3, r3, #1
 800dcec:	b2da      	uxtb	r2, r3
 800dcee:	4b04      	ldr	r3, [pc, #16]	; (800dd00 <SD_CheckStatus+0x38>)
 800dcf0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dcf2:	4b03      	ldr	r3, [pc, #12]	; (800dd00 <SD_CheckStatus+0x38>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	b2db      	uxtb	r3, r3
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	20000029 	.word	0x20000029

0800dd04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dd0e:	f7ff ff09 	bl	800db24 <BSP_SD_Init>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d107      	bne.n	800dd28 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800dd18:	79fb      	ldrb	r3, [r7, #7]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff ffd4 	bl	800dcc8 <SD_CheckStatus>
 800dd20:	4603      	mov	r3, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	4b04      	ldr	r3, [pc, #16]	; (800dd38 <SD_initialize+0x34>)
 800dd26:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dd28:	4b03      	ldr	r3, [pc, #12]	; (800dd38 <SD_initialize+0x34>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	b2db      	uxtb	r3, r3
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	20000029 	.word	0x20000029

0800dd3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	4603      	mov	r3, r0
 800dd44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dd46:	79fb      	ldrb	r3, [r7, #7]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff ffbd 	bl	800dcc8 <SD_CheckStatus>
 800dd4e:	4603      	mov	r3, r0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60b9      	str	r1, [r7, #8]
 800dd60:	607a      	str	r2, [r7, #4]
 800dd62:	603b      	str	r3, [r7, #0]
 800dd64:	4603      	mov	r3, r0
 800dd66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd6c:	f247 5030 	movw	r0, #30000	; 0x7530
 800dd70:	f7ff ff8c 	bl	800dc8c <SD_CheckStatusWithTimeout>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	da01      	bge.n	800dd7e <SD_read+0x26>
  {
    return res;
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	e03b      	b.n	800ddf6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dd7e:	683a      	ldr	r2, [r7, #0]
 800dd80:	6879      	ldr	r1, [r7, #4]
 800dd82:	68b8      	ldr	r0, [r7, #8]
 800dd84:	f7ff fef4 	bl	800db70 <BSP_SD_ReadBlocks_DMA>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d132      	bne.n	800ddf4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800dd8e:	4b1c      	ldr	r3, [pc, #112]	; (800de00 <SD_read+0xa8>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dd94:	f7f4 ffb6 	bl	8002d04 <HAL_GetTick>
 800dd98:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dd9a:	bf00      	nop
 800dd9c:	4b18      	ldr	r3, [pc, #96]	; (800de00 <SD_read+0xa8>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d108      	bne.n	800ddb6 <SD_read+0x5e>
 800dda4:	f7f4 ffae 	bl	8002d04 <HAL_GetTick>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	f247 522f 	movw	r2, #29999	; 0x752f
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d9f2      	bls.n	800dd9c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ddb6:	4b12      	ldr	r3, [pc, #72]	; (800de00 <SD_read+0xa8>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d102      	bne.n	800ddc4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	75fb      	strb	r3, [r7, #23]
 800ddc2:	e017      	b.n	800ddf4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ddc4:	4b0e      	ldr	r3, [pc, #56]	; (800de00 <SD_read+0xa8>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ddca:	f7f4 ff9b 	bl	8002d04 <HAL_GetTick>
 800ddce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ddd0:	e007      	b.n	800dde2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ddd2:	f7ff ff01 	bl	800dbd8 <BSP_SD_GetCardState>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d102      	bne.n	800dde2 <SD_read+0x8a>
          {
            res = RES_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dde0:	e008      	b.n	800ddf4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dde2:	f7f4 ff8f 	bl	8002d04 <HAL_GetTick>
 800dde6:	4602      	mov	r2, r0
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	f247 522f 	movw	r2, #29999	; 0x752f
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d9ee      	bls.n	800ddd2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3718      	adds	r7, #24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	200008ec 	.word	0x200008ec

0800de04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60b9      	str	r1, [r7, #8]
 800de0c:	607a      	str	r2, [r7, #4]
 800de0e:	603b      	str	r3, [r7, #0]
 800de10:	4603      	mov	r3, r0
 800de12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de14:	2301      	movs	r3, #1
 800de16:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800de18:	4b24      	ldr	r3, [pc, #144]	; (800deac <SD_write+0xa8>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de1e:	f247 5030 	movw	r0, #30000	; 0x7530
 800de22:	f7ff ff33 	bl	800dc8c <SD_CheckStatusWithTimeout>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	da01      	bge.n	800de30 <SD_write+0x2c>
  {
    return res;
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
 800de2e:	e038      	b.n	800dea2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	68b8      	ldr	r0, [r7, #8]
 800de36:	f7ff feb5 	bl	800dba4 <BSP_SD_WriteBlocks_DMA>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d12f      	bne.n	800dea0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800de40:	f7f4 ff60 	bl	8002d04 <HAL_GetTick>
 800de44:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de46:	bf00      	nop
 800de48:	4b18      	ldr	r3, [pc, #96]	; (800deac <SD_write+0xa8>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d108      	bne.n	800de62 <SD_write+0x5e>
 800de50:	f7f4 ff58 	bl	8002d04 <HAL_GetTick>
 800de54:	4602      	mov	r2, r0
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	f247 522f 	movw	r2, #29999	; 0x752f
 800de5e:	4293      	cmp	r3, r2
 800de60:	d9f2      	bls.n	800de48 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800de62:	4b12      	ldr	r3, [pc, #72]	; (800deac <SD_write+0xa8>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d102      	bne.n	800de70 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800de6a:	2301      	movs	r3, #1
 800de6c:	75fb      	strb	r3, [r7, #23]
 800de6e:	e017      	b.n	800dea0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800de70:	4b0e      	ldr	r3, [pc, #56]	; (800deac <SD_write+0xa8>)
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800de76:	f7f4 ff45 	bl	8002d04 <HAL_GetTick>
 800de7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de7c:	e007      	b.n	800de8e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de7e:	f7ff feab 	bl	800dbd8 <BSP_SD_GetCardState>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d102      	bne.n	800de8e <SD_write+0x8a>
          {
            res = RES_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	75fb      	strb	r3, [r7, #23]
            break;
 800de8c:	e008      	b.n	800dea0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de8e:	f7f4 ff39 	bl	8002d04 <HAL_GetTick>
 800de92:	4602      	mov	r2, r0
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	1ad3      	subs	r3, r2, r3
 800de98:	f247 522f 	movw	r2, #29999	; 0x752f
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d9ee      	bls.n	800de7e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800dea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3718      	adds	r7, #24
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	200008e8 	.word	0x200008e8

0800deb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b08c      	sub	sp, #48	; 0x30
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	4603      	mov	r3, r0
 800deb8:	603a      	str	r2, [r7, #0]
 800deba:	71fb      	strb	r3, [r7, #7]
 800debc:	460b      	mov	r3, r1
 800debe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dec6:	4b25      	ldr	r3, [pc, #148]	; (800df5c <SD_ioctl+0xac>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	b2db      	uxtb	r3, r3
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <SD_ioctl+0x28>
 800ded4:	2303      	movs	r3, #3
 800ded6:	e03c      	b.n	800df52 <SD_ioctl+0xa2>

  switch (cmd)
 800ded8:	79bb      	ldrb	r3, [r7, #6]
 800deda:	2b03      	cmp	r3, #3
 800dedc:	d834      	bhi.n	800df48 <SD_ioctl+0x98>
 800dede:	a201      	add	r2, pc, #4	; (adr r2, 800dee4 <SD_ioctl+0x34>)
 800dee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee4:	0800def5 	.word	0x0800def5
 800dee8:	0800defd 	.word	0x0800defd
 800deec:	0800df15 	.word	0x0800df15
 800def0:	0800df2f 	.word	0x0800df2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800defa:	e028      	b.n	800df4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff fe79 	bl	800dbf8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800df06:	6a3a      	ldr	r2, [r7, #32]
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df12:	e01c      	b.n	800df4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df14:	f107 0308 	add.w	r3, r7, #8
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff fe6d 	bl	800dbf8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	b29a      	uxth	r2, r3
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df2c:	e00f      	b.n	800df4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df2e:	f107 0308 	add.w	r3, r7, #8
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff fe60 	bl	800dbf8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	0a5a      	lsrs	r2, r3, #9
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df46:	e002      	b.n	800df4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df48:	2304      	movs	r3, #4
 800df4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800df4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df52:	4618      	mov	r0, r3
 800df54:	3730      	adds	r7, #48	; 0x30
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	20000029 	.word	0x20000029

0800df60 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800df60:	b480      	push	{r7}
 800df62:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800df64:	4b03      	ldr	r3, [pc, #12]	; (800df74 <BSP_SD_WriteCpltCallback+0x14>)
 800df66:	2201      	movs	r2, #1
 800df68:	601a      	str	r2, [r3, #0]
}
 800df6a:	bf00      	nop
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	200008e8 	.word	0x200008e8

0800df78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800df78:	b480      	push	{r7}
 800df7a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800df7c:	4b03      	ldr	r3, [pc, #12]	; (800df8c <BSP_SD_ReadCpltCallback+0x14>)
 800df7e:	2201      	movs	r2, #1
 800df80:	601a      	str	r2, [r3, #0]
}
 800df82:	bf00      	nop
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	200008ec 	.word	0x200008ec

0800df90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dfa0:	f002 fb38 	bl	8010614 <USBD_static_malloc>
 800dfa4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d105      	bne.n	800dfb8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	e066      	b.n	800e086 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	7c1b      	ldrb	r3, [r3, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d119      	bne.n	800dffc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dfc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfcc:	2202      	movs	r2, #2
 800dfce:	2181      	movs	r1, #129	; 0x81
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f002 f90b 	bl	80101ec <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dfdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	2101      	movs	r1, #1
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f002 f901 	bl	80101ec <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2201      	movs	r2, #1
 800dfee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2210      	movs	r2, #16
 800dff6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dffa:	e016      	b.n	800e02a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dffc:	2340      	movs	r3, #64	; 0x40
 800dffe:	2202      	movs	r2, #2
 800e000:	2181      	movs	r1, #129	; 0x81
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f002 f8f2 	bl	80101ec <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e00e:	2340      	movs	r3, #64	; 0x40
 800e010:	2202      	movs	r2, #2
 800e012:	2101      	movs	r1, #1
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f002 f8e9 	bl	80101ec <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2210      	movs	r2, #16
 800e026:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e02a:	2308      	movs	r3, #8
 800e02c:	2203      	movs	r2, #3
 800e02e:	2182      	movs	r1, #130	; 0x82
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f002 f8db 	bl	80101ec <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2201      	movs	r2, #1
 800e03a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	7c1b      	ldrb	r3, [r3, #16]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d109      	bne.n	800e074 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e06a:	2101      	movs	r1, #1
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f002 fa37 	bl	80104e0 <USBD_LL_PrepareReceive>
 800e072:	e007      	b.n	800e084 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e07a:	2340      	movs	r3, #64	; 0x40
 800e07c:	2101      	movs	r1, #1
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f002 fa2e 	bl	80104e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b082      	sub	sp, #8
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	460b      	mov	r3, r1
 800e098:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e09a:	2181      	movs	r1, #129	; 0x81
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f002 f8e3 	bl	8010268 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f002 f8dc 	bl	8010268 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e0b8:	2182      	movs	r1, #130	; 0x82
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f002 f8d4 	bl	8010268 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00e      	beq.n	800e0f8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f002 faa0 	bl	8010630 <USBD_static_free>
    pdev->pClassData = NULL;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e114:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e116:	2300      	movs	r3, #0
 800e118:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e11a:	2300      	movs	r3, #0
 800e11c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e128:	2303      	movs	r3, #3
 800e12a:	e0af      	b.n	800e28c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e134:	2b00      	cmp	r3, #0
 800e136:	d03f      	beq.n	800e1b8 <USBD_CDC_Setup+0xb4>
 800e138:	2b20      	cmp	r3, #32
 800e13a:	f040 809f 	bne.w	800e27c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	88db      	ldrh	r3, [r3, #6]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d02e      	beq.n	800e1a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	b25b      	sxtb	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	da16      	bge.n	800e17e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e15c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	88d2      	ldrh	r2, [r2, #6]
 800e162:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	88db      	ldrh	r3, [r3, #6]
 800e168:	2b07      	cmp	r3, #7
 800e16a:	bf28      	it	cs
 800e16c:	2307      	movcs	r3, #7
 800e16e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	89fa      	ldrh	r2, [r7, #14]
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f001 fb43 	bl	800f802 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e17c:	e085      	b.n	800e28a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	785a      	ldrb	r2, [r3, #1]
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	88db      	ldrh	r3, [r3, #6]
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e194:	6939      	ldr	r1, [r7, #16]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	88db      	ldrh	r3, [r3, #6]
 800e19a:	461a      	mov	r2, r3
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f001 fb5c 	bl	800f85a <USBD_CtlPrepareRx>
      break;
 800e1a2:	e072      	b.n	800e28a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	683a      	ldr	r2, [r7, #0]
 800e1ae:	7850      	ldrb	r0, [r2, #1]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	4798      	blx	r3
      break;
 800e1b6:	e068      	b.n	800e28a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	785b      	ldrb	r3, [r3, #1]
 800e1bc:	2b0b      	cmp	r3, #11
 800e1be:	d852      	bhi.n	800e266 <USBD_CDC_Setup+0x162>
 800e1c0:	a201      	add	r2, pc, #4	; (adr r2, 800e1c8 <USBD_CDC_Setup+0xc4>)
 800e1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c6:	bf00      	nop
 800e1c8:	0800e1f9 	.word	0x0800e1f9
 800e1cc:	0800e275 	.word	0x0800e275
 800e1d0:	0800e267 	.word	0x0800e267
 800e1d4:	0800e267 	.word	0x0800e267
 800e1d8:	0800e267 	.word	0x0800e267
 800e1dc:	0800e267 	.word	0x0800e267
 800e1e0:	0800e267 	.word	0x0800e267
 800e1e4:	0800e267 	.word	0x0800e267
 800e1e8:	0800e267 	.word	0x0800e267
 800e1ec:	0800e267 	.word	0x0800e267
 800e1f0:	0800e223 	.word	0x0800e223
 800e1f4:	0800e24d 	.word	0x0800e24d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	2b03      	cmp	r3, #3
 800e202:	d107      	bne.n	800e214 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e204:	f107 030a 	add.w	r3, r7, #10
 800e208:	2202      	movs	r2, #2
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f001 faf8 	bl	800f802 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e212:	e032      	b.n	800e27a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f001 fa82 	bl	800f720 <USBD_CtlError>
            ret = USBD_FAIL;
 800e21c:	2303      	movs	r3, #3
 800e21e:	75fb      	strb	r3, [r7, #23]
          break;
 800e220:	e02b      	b.n	800e27a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	d107      	bne.n	800e23e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e22e:	f107 030d 	add.w	r3, r7, #13
 800e232:	2201      	movs	r2, #1
 800e234:	4619      	mov	r1, r3
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f001 fae3 	bl	800f802 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e23c:	e01d      	b.n	800e27a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f001 fa6d 	bl	800f720 <USBD_CtlError>
            ret = USBD_FAIL;
 800e246:	2303      	movs	r3, #3
 800e248:	75fb      	strb	r3, [r7, #23]
          break;
 800e24a:	e016      	b.n	800e27a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e252:	b2db      	uxtb	r3, r3
 800e254:	2b03      	cmp	r3, #3
 800e256:	d00f      	beq.n	800e278 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e258:	6839      	ldr	r1, [r7, #0]
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f001 fa60 	bl	800f720 <USBD_CtlError>
            ret = USBD_FAIL;
 800e260:	2303      	movs	r3, #3
 800e262:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e264:	e008      	b.n	800e278 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f001 fa59 	bl	800f720 <USBD_CtlError>
          ret = USBD_FAIL;
 800e26e:	2303      	movs	r3, #3
 800e270:	75fb      	strb	r3, [r7, #23]
          break;
 800e272:	e002      	b.n	800e27a <USBD_CDC_Setup+0x176>
          break;
 800e274:	bf00      	nop
 800e276:	e008      	b.n	800e28a <USBD_CDC_Setup+0x186>
          break;
 800e278:	bf00      	nop
      }
      break;
 800e27a:	e006      	b.n	800e28a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f001 fa4e 	bl	800f720 <USBD_CtlError>
      ret = USBD_FAIL;
 800e284:	2303      	movs	r3, #3
 800e286:	75fb      	strb	r3, [r7, #23]
      break;
 800e288:	bf00      	nop
  }

  return (uint8_t)ret;
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	460b      	mov	r3, r1
 800e29e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d101      	bne.n	800e2b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2b2:	2303      	movs	r3, #3
 800e2b4:	e04f      	b.n	800e356 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e2be:	78fa      	ldrb	r2, [r7, #3]
 800e2c0:	6879      	ldr	r1, [r7, #4]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4413      	add	r3, r2
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	440b      	add	r3, r1
 800e2cc:	3318      	adds	r3, #24
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d029      	beq.n	800e328 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e2d4:	78fa      	ldrb	r2, [r7, #3]
 800e2d6:	6879      	ldr	r1, [r7, #4]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	440b      	add	r3, r1
 800e2e2:	3318      	adds	r3, #24
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	78f9      	ldrb	r1, [r7, #3]
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	440b      	add	r3, r1
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4403      	add	r3, r0
 800e2f4:	3348      	adds	r3, #72	; 0x48
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2fc:	fb01 f303 	mul.w	r3, r1, r3
 800e300:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e302:	2b00      	cmp	r3, #0
 800e304:	d110      	bne.n	800e328 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e306:	78fa      	ldrb	r2, [r7, #3]
 800e308:	6879      	ldr	r1, [r7, #4]
 800e30a:	4613      	mov	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	440b      	add	r3, r1
 800e314:	3318      	adds	r3, #24
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e31a:	78f9      	ldrb	r1, [r7, #3]
 800e31c:	2300      	movs	r3, #0
 800e31e:	2200      	movs	r2, #0
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f002 f8a5 	bl	8010470 <USBD_LL_Transmit>
 800e326:	e015      	b.n	800e354 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e336:	691b      	ldr	r3, [r3, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00b      	beq.n	800e354 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e342:	691b      	ldr	r3, [r3, #16]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b084      	sub	sp, #16
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	460b      	mov	r3, r1
 800e368:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e370:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d101      	bne.n	800e380 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e37c:	2303      	movs	r3, #3
 800e37e:	e015      	b.n	800e3ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	4619      	mov	r1, r3
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f002 f8e3 	bl	8010550 <USBD_LL_GetRxDataSize>
 800e38a:	4602      	mov	r2, r0
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e3ca:	2303      	movs	r3, #3
 800e3cc:	e01b      	b.n	800e406 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d015      	beq.n	800e404 <USBD_CDC_EP0_RxReady+0x50>
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e3de:	2bff      	cmp	r3, #255	; 0xff
 800e3e0:	d010      	beq.n	800e404 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e3f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e3f8:	b292      	uxth	r2, r2
 800e3fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	22ff      	movs	r2, #255	; 0xff
 800e400:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e404:	2300      	movs	r3, #0
}
 800e406:	4618      	mov	r0, r3
 800e408:	3710      	adds	r7, #16
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2243      	movs	r2, #67	; 0x43
 800e41c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e41e:	4b03      	ldr	r3, [pc, #12]	; (800e42c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	200000b4 	.word	0x200000b4

0800e430 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2243      	movs	r2, #67	; 0x43
 800e43c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e43e:	4b03      	ldr	r3, [pc, #12]	; (800e44c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e440:	4618      	mov	r0, r3
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	20000070 	.word	0x20000070

0800e450 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2243      	movs	r2, #67	; 0x43
 800e45c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e45e:	4b03      	ldr	r3, [pc, #12]	; (800e46c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	200000f8 	.word	0x200000f8

0800e470 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	220a      	movs	r2, #10
 800e47c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e47e:	4b03      	ldr	r3, [pc, #12]	; (800e48c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e480:	4618      	mov	r0, r3
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	2000002c 	.word	0x2000002c

0800e490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e004      	b.n	800e4ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b087      	sub	sp, #28
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	60f8      	str	r0, [r7, #12]
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e4d4:	2303      	movs	r3, #3
 800e4d6:	e008      	b.n	800e4ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	371c      	adds	r7, #28
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e4f6:	b480      	push	{r7}
 800e4f8:	b085      	sub	sp, #20
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e506:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d101      	bne.n	800e512 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e50e:	2303      	movs	r3, #3
 800e510:	e004      	b.n	800e51c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e536:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e538:	2301      	movs	r3, #1
 800e53a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e546:	2303      	movs	r3, #3
 800e548:	e01a      	b.n	800e580 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e550:	2b00      	cmp	r3, #0
 800e552:	d114      	bne.n	800e57e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	2201      	movs	r2, #1
 800e558:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e572:	2181      	movs	r1, #129	; 0x81
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f001 ff7b 	bl	8010470 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e57a:	2300      	movs	r3, #0
 800e57c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e596:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d101      	bne.n	800e5a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e5a2:	2303      	movs	r3, #3
 800e5a4:	e016      	b.n	800e5d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	7c1b      	ldrb	r3, [r3, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d109      	bne.n	800e5c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f001 ff90 	bl	80104e0 <USBD_LL_PrepareReceive>
 800e5c0:	e007      	b.n	800e5d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5c8:	2340      	movs	r3, #64	; 0x40
 800e5ca:	2101      	movs	r1, #1
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f001 ff87 	bl	80104e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d101      	bne.n	800e5f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e5f0:	2303      	movs	r3, #3
 800e5f2:	e01f      	b.n	800e634 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2201      	movs	r2, #1
 800e61e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	79fa      	ldrb	r2, [r7, #7]
 800e626:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f001 fd63 	bl	80100f4 <USBD_LL_Init>
 800e62e:	4603      	mov	r3, r0
 800e630:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e632:	7dfb      	ldrb	r3, [r7, #23]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3718      	adds	r7, #24
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e646:	2300      	movs	r3, #0
 800e648:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d101      	bne.n	800e654 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e650:	2303      	movs	r3, #3
 800e652:	e016      	b.n	800e682 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00b      	beq.n	800e680 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e670:	f107 020e 	add.w	r2, r7, #14
 800e674:	4610      	mov	r0, r2
 800e676:	4798      	blx	r3
 800e678:	4602      	mov	r2, r0
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e680:	2300      	movs	r3, #0
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b082      	sub	sp, #8
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f001 fd78 	bl	8010188 <USBD_LL_Start>
 800e698:	4603      	mov	r3, r0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e6a2:	b480      	push	{r7}
 800e6a4:	b083      	sub	sp, #12
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d009      	beq.n	800e6e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	78fa      	ldrb	r2, [r7, #3]
 800e6dc:	4611      	mov	r1, r2
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	4798      	blx	r3
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e702:	2b00      	cmp	r3, #0
 800e704:	d007      	beq.n	800e716 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	78fa      	ldrb	r2, [r7, #3]
 800e710:	4611      	mov	r1, r2
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	4798      	blx	r3
  }

  return USBD_OK;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e730:	6839      	ldr	r1, [r7, #0]
 800e732:	4618      	mov	r0, r3
 800e734:	f000 ffba 	bl	800f6ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e746:	461a      	mov	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e754:	f003 031f 	and.w	r3, r3, #31
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d01a      	beq.n	800e792 <USBD_LL_SetupStage+0x72>
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d822      	bhi.n	800e7a6 <USBD_LL_SetupStage+0x86>
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <USBD_LL_SetupStage+0x4a>
 800e764:	2b01      	cmp	r3, #1
 800e766:	d00a      	beq.n	800e77e <USBD_LL_SetupStage+0x5e>
 800e768:	e01d      	b.n	800e7a6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e770:	4619      	mov	r1, r3
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 fa62 	bl	800ec3c <USBD_StdDevReq>
 800e778:	4603      	mov	r3, r0
 800e77a:	73fb      	strb	r3, [r7, #15]
      break;
 800e77c:	e020      	b.n	800e7c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fac6 	bl	800ed18 <USBD_StdItfReq>
 800e78c:	4603      	mov	r3, r0
 800e78e:	73fb      	strb	r3, [r7, #15]
      break;
 800e790:	e016      	b.n	800e7c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 fb05 	bl	800edaa <USBD_StdEPReq>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a4:	e00c      	b.n	800e7c0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 fd8d 	bl	80102d4 <USBD_LL_StallEP>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800e7be:	bf00      	nop
  }

  return ret;
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b086      	sub	sp, #24
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	607a      	str	r2, [r7, #4]
 800e7d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e7d8:	7afb      	ldrb	r3, [r7, #11]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d138      	bne.n	800e850 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e7e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7ec:	2b03      	cmp	r3, #3
 800e7ee:	d14a      	bne.n	800e886 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	689a      	ldr	r2, [r3, #8]
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d913      	bls.n	800e824 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	689a      	ldr	r2, [r3, #8]
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	1ad2      	subs	r2, r2, r3
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	68da      	ldr	r2, [r3, #12]
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	4293      	cmp	r3, r2
 800e814:	bf28      	it	cs
 800e816:	4613      	movcs	r3, r2
 800e818:	461a      	mov	r2, r3
 800e81a:	6879      	ldr	r1, [r7, #4]
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f001 f839 	bl	800f894 <USBD_CtlContinueRx>
 800e822:	e030      	b.n	800e886 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	2b03      	cmp	r3, #3
 800e82e:	d10b      	bne.n	800e848 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d005      	beq.n	800e848 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f001 f834 	bl	800f8b6 <USBD_CtlSendStatus>
 800e84e:	e01a      	b.n	800e886 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e856:	b2db      	uxtb	r3, r3
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d114      	bne.n	800e886 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00e      	beq.n	800e886 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	7afa      	ldrb	r2, [r7, #11]
 800e872:	4611      	mov	r1, r2
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	4798      	blx	r3
 800e878:	4603      	mov	r3, r0
 800e87a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	e000      	b.n	800e888 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	460b      	mov	r3, r1
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e89e:	7afb      	ldrb	r3, [r7, #11]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d16b      	bne.n	800e97c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	3314      	adds	r3, #20
 800e8a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	d156      	bne.n	800e962 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	689a      	ldr	r2, [r3, #8]
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d914      	bls.n	800e8ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	689a      	ldr	r2, [r3, #8]
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	1ad2      	subs	r2, r2, r3
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f000 ffae 	bl	800f838 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8dc:	2300      	movs	r3, #0
 800e8de:	2200      	movs	r2, #0
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f001 fdfc 	bl	80104e0 <USBD_LL_PrepareReceive>
 800e8e8:	e03b      	b.n	800e962 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	68da      	ldr	r2, [r3, #12]
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d11c      	bne.n	800e930 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	685a      	ldr	r2, [r3, #4]
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d316      	bcc.n	800e930 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d20f      	bcs.n	800e930 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e910:	2200      	movs	r2, #0
 800e912:	2100      	movs	r1, #0
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 ff8f 	bl	800f838 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e922:	2300      	movs	r3, #0
 800e924:	2200      	movs	r2, #0
 800e926:	2100      	movs	r1, #0
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f001 fdd9 	bl	80104e0 <USBD_LL_PrepareReceive>
 800e92e:	e018      	b.n	800e962 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d10b      	bne.n	800e954 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d005      	beq.n	800e954 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e954:	2180      	movs	r1, #128	; 0x80
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f001 fcbc 	bl	80102d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f000 ffbd 	bl	800f8dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d122      	bne.n	800e9b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f7ff fe98 	bl	800e6a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e97a:	e01a      	b.n	800e9b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2b03      	cmp	r3, #3
 800e986:	d114      	bne.n	800e9b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00e      	beq.n	800e9b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e99a:	695b      	ldr	r3, [r3, #20]
 800e99c:	7afa      	ldrb	r2, [r7, #11]
 800e99e:	4611      	mov	r1, r2
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	4798      	blx	r3
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	e000      	b.n	800e9b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3718      	adds	r7, #24
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d101      	bne.n	800e9f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e02f      	b.n	800ea50 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00f      	beq.n	800ea1a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d009      	beq.n	800ea1a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	6852      	ldr	r2, [r2, #4]
 800ea12:	b2d2      	uxtb	r2, r2
 800ea14:	4611      	mov	r1, r2
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea1a:	2340      	movs	r3, #64	; 0x40
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	2100      	movs	r1, #0
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f001 fbe3 	bl	80101ec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2240      	movs	r2, #64	; 0x40
 800ea32:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea36:	2340      	movs	r3, #64	; 0x40
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2180      	movs	r1, #128	; 0x80
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f001 fbd5 	bl	80101ec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2201      	movs	r2, #1
 800ea46:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2240      	movs	r2, #64	; 0x40
 800ea4c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	78fa      	ldrb	r2, [r7, #3]
 800ea68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2204      	movs	r2, #4
 800ea92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b04      	cmp	r3, #4
 800eab6:	d106      	bne.n	800eac6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800eae6:	2303      	movs	r3, #3
 800eae8:	e012      	b.n	800eb10 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b03      	cmp	r3, #3
 800eaf4:	d10b      	bne.n	800eb0e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d005      	beq.n	800eb0e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb08:	69db      	ldr	r3, [r3, #28]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	460b      	mov	r3, r1
 800eb22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e014      	b.n	800eb5c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b03      	cmp	r3, #3
 800eb3c:	d10d      	bne.n	800eb5a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d007      	beq.n	800eb5a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	78fa      	ldrb	r2, [r7, #3]
 800eb54:	4611      	mov	r1, r2
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3708      	adds	r7, #8
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e014      	b.n	800eba8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b03      	cmp	r3, #3
 800eb88:	d10d      	bne.n	800eba6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d007      	beq.n	800eba6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9e:	78fa      	ldrb	r2, [r7, #3]
 800eba0:	4611      	mov	r1, r2
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebb8:	2300      	movs	r3, #0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	370c      	adds	r7, #12
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr

0800ebc6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b082      	sub	sp, #8
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d009      	beq.n	800ebf4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	6852      	ldr	r2, [r2, #4]
 800ebec:	b2d2      	uxtb	r2, r2
 800ebee:	4611      	mov	r1, r2
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	4798      	blx	r3
  }

  return USBD_OK;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b087      	sub	sp, #28
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	3301      	adds	r3, #1
 800ec14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec1c:	8a3b      	ldrh	r3, [r7, #16]
 800ec1e:	021b      	lsls	r3, r3, #8
 800ec20:	b21a      	sxth	r2, r3
 800ec22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	b21b      	sxth	r3, r3
 800ec2a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec2c:	89fb      	ldrh	r3, [r7, #14]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	371c      	adds	r7, #28
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
	...

0800ec3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec46:	2300      	movs	r3, #0
 800ec48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec52:	2b40      	cmp	r3, #64	; 0x40
 800ec54:	d005      	beq.n	800ec62 <USBD_StdDevReq+0x26>
 800ec56:	2b40      	cmp	r3, #64	; 0x40
 800ec58:	d853      	bhi.n	800ed02 <USBD_StdDevReq+0xc6>
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00b      	beq.n	800ec76 <USBD_StdDevReq+0x3a>
 800ec5e:	2b20      	cmp	r3, #32
 800ec60:	d14f      	bne.n	800ed02 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	6839      	ldr	r1, [r7, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	4798      	blx	r3
 800ec70:	4603      	mov	r3, r0
 800ec72:	73fb      	strb	r3, [r7, #15]
      break;
 800ec74:	e04a      	b.n	800ed0c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	785b      	ldrb	r3, [r3, #1]
 800ec7a:	2b09      	cmp	r3, #9
 800ec7c:	d83b      	bhi.n	800ecf6 <USBD_StdDevReq+0xba>
 800ec7e:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <USBD_StdDevReq+0x48>)
 800ec80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec84:	0800ecd9 	.word	0x0800ecd9
 800ec88:	0800eced 	.word	0x0800eced
 800ec8c:	0800ecf7 	.word	0x0800ecf7
 800ec90:	0800ece3 	.word	0x0800ece3
 800ec94:	0800ecf7 	.word	0x0800ecf7
 800ec98:	0800ecb7 	.word	0x0800ecb7
 800ec9c:	0800ecad 	.word	0x0800ecad
 800eca0:	0800ecf7 	.word	0x0800ecf7
 800eca4:	0800eccf 	.word	0x0800eccf
 800eca8:	0800ecc1 	.word	0x0800ecc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ecac:	6839      	ldr	r1, [r7, #0]
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 f9de 	bl	800f070 <USBD_GetDescriptor>
          break;
 800ecb4:	e024      	b.n	800ed00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 fb6d 	bl	800f398 <USBD_SetAddress>
          break;
 800ecbe:	e01f      	b.n	800ed00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 fbac 	bl	800f420 <USBD_SetConfig>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73fb      	strb	r3, [r7, #15]
          break;
 800eccc:	e018      	b.n	800ed00 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fc4b 	bl	800f56c <USBD_GetConfig>
          break;
 800ecd6:	e013      	b.n	800ed00 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ecd8:	6839      	ldr	r1, [r7, #0]
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 fc7c 	bl	800f5d8 <USBD_GetStatus>
          break;
 800ece0:	e00e      	b.n	800ed00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fcab 	bl	800f640 <USBD_SetFeature>
          break;
 800ecea:	e009      	b.n	800ed00 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fcba 	bl	800f668 <USBD_ClrFeature>
          break;
 800ecf4:	e004      	b.n	800ed00 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 fd11 	bl	800f720 <USBD_CtlError>
          break;
 800ecfe:	bf00      	nop
      }
      break;
 800ed00:	e004      	b.n	800ed0c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 fd0b 	bl	800f720 <USBD_CtlError>
      break;
 800ed0a:	bf00      	nop
  }

  return ret;
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3710      	adds	r7, #16
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop

0800ed18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed2e:	2b40      	cmp	r3, #64	; 0x40
 800ed30:	d005      	beq.n	800ed3e <USBD_StdItfReq+0x26>
 800ed32:	2b40      	cmp	r3, #64	; 0x40
 800ed34:	d82f      	bhi.n	800ed96 <USBD_StdItfReq+0x7e>
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <USBD_StdItfReq+0x26>
 800ed3a:	2b20      	cmp	r3, #32
 800ed3c:	d12b      	bne.n	800ed96 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	3b01      	subs	r3, #1
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d81d      	bhi.n	800ed88 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	889b      	ldrh	r3, [r3, #4]
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d813      	bhi.n	800ed7e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	4798      	blx	r3
 800ed64:	4603      	mov	r3, r0
 800ed66:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	88db      	ldrh	r3, [r3, #6]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d110      	bne.n	800ed92 <USBD_StdItfReq+0x7a>
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10d      	bne.n	800ed92 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fd9d 	bl	800f8b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ed7c:	e009      	b.n	800ed92 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ed7e:	6839      	ldr	r1, [r7, #0]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 fccd 	bl	800f720 <USBD_CtlError>
          break;
 800ed86:	e004      	b.n	800ed92 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ed88:	6839      	ldr	r1, [r7, #0]
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 fcc8 	bl	800f720 <USBD_CtlError>
          break;
 800ed90:	e000      	b.n	800ed94 <USBD_StdItfReq+0x7c>
          break;
 800ed92:	bf00      	nop
      }
      break;
 800ed94:	e004      	b.n	800eda0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ed96:	6839      	ldr	r1, [r7, #0]
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fcc1 	bl	800f720 <USBD_CtlError>
      break;
 800ed9e:	bf00      	nop
  }

  return ret;
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
 800edb2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	889b      	ldrh	r3, [r3, #4]
 800edbc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800edc6:	2b40      	cmp	r3, #64	; 0x40
 800edc8:	d007      	beq.n	800edda <USBD_StdEPReq+0x30>
 800edca:	2b40      	cmp	r3, #64	; 0x40
 800edcc:	f200 8145 	bhi.w	800f05a <USBD_StdEPReq+0x2b0>
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d00c      	beq.n	800edee <USBD_StdEPReq+0x44>
 800edd4:	2b20      	cmp	r3, #32
 800edd6:	f040 8140 	bne.w	800f05a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ede0:	689b      	ldr	r3, [r3, #8]
 800ede2:	6839      	ldr	r1, [r7, #0]
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	4798      	blx	r3
 800ede8:	4603      	mov	r3, r0
 800edea:	73fb      	strb	r3, [r7, #15]
      break;
 800edec:	e13a      	b.n	800f064 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	785b      	ldrb	r3, [r3, #1]
 800edf2:	2b03      	cmp	r3, #3
 800edf4:	d007      	beq.n	800ee06 <USBD_StdEPReq+0x5c>
 800edf6:	2b03      	cmp	r3, #3
 800edf8:	f300 8129 	bgt.w	800f04e <USBD_StdEPReq+0x2a4>
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d07f      	beq.n	800ef00 <USBD_StdEPReq+0x156>
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d03c      	beq.n	800ee7e <USBD_StdEPReq+0xd4>
 800ee04:	e123      	b.n	800f04e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d002      	beq.n	800ee18 <USBD_StdEPReq+0x6e>
 800ee12:	2b03      	cmp	r3, #3
 800ee14:	d016      	beq.n	800ee44 <USBD_StdEPReq+0x9a>
 800ee16:	e02c      	b.n	800ee72 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee18:	7bbb      	ldrb	r3, [r7, #14]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00d      	beq.n	800ee3a <USBD_StdEPReq+0x90>
 800ee1e:	7bbb      	ldrb	r3, [r7, #14]
 800ee20:	2b80      	cmp	r3, #128	; 0x80
 800ee22:	d00a      	beq.n	800ee3a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee24:	7bbb      	ldrb	r3, [r7, #14]
 800ee26:	4619      	mov	r1, r3
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f001 fa53 	bl	80102d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee2e:	2180      	movs	r1, #128	; 0x80
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f001 fa4f 	bl	80102d4 <USBD_LL_StallEP>
 800ee36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee38:	e020      	b.n	800ee7c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ee3a:	6839      	ldr	r1, [r7, #0]
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 fc6f 	bl	800f720 <USBD_CtlError>
              break;
 800ee42:	e01b      	b.n	800ee7c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	885b      	ldrh	r3, [r3, #2]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10e      	bne.n	800ee6a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00b      	beq.n	800ee6a <USBD_StdEPReq+0xc0>
 800ee52:	7bbb      	ldrb	r3, [r7, #14]
 800ee54:	2b80      	cmp	r3, #128	; 0x80
 800ee56:	d008      	beq.n	800ee6a <USBD_StdEPReq+0xc0>
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	88db      	ldrh	r3, [r3, #6]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d104      	bne.n	800ee6a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee60:	7bbb      	ldrb	r3, [r7, #14]
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f001 fa35 	bl	80102d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fd23 	bl	800f8b6 <USBD_CtlSendStatus>

              break;
 800ee70:	e004      	b.n	800ee7c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fc53 	bl	800f720 <USBD_CtlError>
              break;
 800ee7a:	bf00      	nop
          }
          break;
 800ee7c:	e0ec      	b.n	800f058 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b02      	cmp	r3, #2
 800ee88:	d002      	beq.n	800ee90 <USBD_StdEPReq+0xe6>
 800ee8a:	2b03      	cmp	r3, #3
 800ee8c:	d016      	beq.n	800eebc <USBD_StdEPReq+0x112>
 800ee8e:	e030      	b.n	800eef2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee90:	7bbb      	ldrb	r3, [r7, #14]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00d      	beq.n	800eeb2 <USBD_StdEPReq+0x108>
 800ee96:	7bbb      	ldrb	r3, [r7, #14]
 800ee98:	2b80      	cmp	r3, #128	; 0x80
 800ee9a:	d00a      	beq.n	800eeb2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee9c:	7bbb      	ldrb	r3, [r7, #14]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f001 fa17 	bl	80102d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eea6:	2180      	movs	r1, #128	; 0x80
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f001 fa13 	bl	80102d4 <USBD_LL_StallEP>
 800eeae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eeb0:	e025      	b.n	800eefe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 fc33 	bl	800f720 <USBD_CtlError>
              break;
 800eeba:	e020      	b.n	800eefe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	885b      	ldrh	r3, [r3, #2]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d11b      	bne.n	800eefc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
 800eec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d004      	beq.n	800eed8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eece:	7bbb      	ldrb	r3, [r7, #14]
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f001 fa34 	bl	8010340 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fcec 	bl	800f8b6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	4798      	blx	r3
 800eeec:	4603      	mov	r3, r0
 800eeee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800eef0:	e004      	b.n	800eefc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800eef2:	6839      	ldr	r1, [r7, #0]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fc13 	bl	800f720 <USBD_CtlError>
              break;
 800eefa:	e000      	b.n	800eefe <USBD_StdEPReq+0x154>
              break;
 800eefc:	bf00      	nop
          }
          break;
 800eefe:	e0ab      	b.n	800f058 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	2b02      	cmp	r3, #2
 800ef0a:	d002      	beq.n	800ef12 <USBD_StdEPReq+0x168>
 800ef0c:	2b03      	cmp	r3, #3
 800ef0e:	d032      	beq.n	800ef76 <USBD_StdEPReq+0x1cc>
 800ef10:	e097      	b.n	800f042 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef12:	7bbb      	ldrb	r3, [r7, #14]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d007      	beq.n	800ef28 <USBD_StdEPReq+0x17e>
 800ef18:	7bbb      	ldrb	r3, [r7, #14]
 800ef1a:	2b80      	cmp	r3, #128	; 0x80
 800ef1c:	d004      	beq.n	800ef28 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ef1e:	6839      	ldr	r1, [r7, #0]
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f000 fbfd 	bl	800f720 <USBD_CtlError>
                break;
 800ef26:	e091      	b.n	800f04c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	da0b      	bge.n	800ef48 <USBD_StdEPReq+0x19e>
 800ef30:	7bbb      	ldrb	r3, [r7, #14]
 800ef32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef36:	4613      	mov	r3, r2
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4413      	add	r3, r2
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	3310      	adds	r3, #16
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	4413      	add	r3, r2
 800ef44:	3304      	adds	r3, #4
 800ef46:	e00b      	b.n	800ef60 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef48:	7bbb      	ldrb	r3, [r7, #14]
 800ef4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef4e:	4613      	mov	r3, r2
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	4413      	add	r3, r2
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	3304      	adds	r3, #4
 800ef60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	2200      	movs	r2, #0
 800ef66:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 fc47 	bl	800f802 <USBD_CtlSendData>
              break;
 800ef74:	e06a      	b.n	800f04c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ef76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	da11      	bge.n	800efa2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef7e:	7bbb      	ldrb	r3, [r7, #14]
 800ef80:	f003 020f 	and.w	r2, r3, #15
 800ef84:	6879      	ldr	r1, [r7, #4]
 800ef86:	4613      	mov	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	4413      	add	r3, r2
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	440b      	add	r3, r1
 800ef90:	3324      	adds	r3, #36	; 0x24
 800ef92:	881b      	ldrh	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d117      	bne.n	800efc8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ef98:	6839      	ldr	r1, [r7, #0]
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 fbc0 	bl	800f720 <USBD_CtlError>
                  break;
 800efa0:	e054      	b.n	800f04c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800efa2:	7bbb      	ldrb	r3, [r7, #14]
 800efa4:	f003 020f 	and.w	r2, r3, #15
 800efa8:	6879      	ldr	r1, [r7, #4]
 800efaa:	4613      	mov	r3, r2
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4413      	add	r3, r2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	440b      	add	r3, r1
 800efb4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d104      	bne.n	800efc8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 fbad 	bl	800f720 <USBD_CtlError>
                  break;
 800efc6:	e041      	b.n	800f04c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	da0b      	bge.n	800efe8 <USBD_StdEPReq+0x23e>
 800efd0:	7bbb      	ldrb	r3, [r7, #14]
 800efd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efd6:	4613      	mov	r3, r2
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	4413      	add	r3, r2
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	3310      	adds	r3, #16
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	4413      	add	r3, r2
 800efe4:	3304      	adds	r3, #4
 800efe6:	e00b      	b.n	800f000 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800efe8:	7bbb      	ldrb	r3, [r7, #14]
 800efea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efee:	4613      	mov	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	4413      	add	r3, r2
 800effe:	3304      	adds	r3, #4
 800f000:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f002:	7bbb      	ldrb	r3, [r7, #14]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d002      	beq.n	800f00e <USBD_StdEPReq+0x264>
 800f008:	7bbb      	ldrb	r3, [r7, #14]
 800f00a:	2b80      	cmp	r3, #128	; 0x80
 800f00c:	d103      	bne.n	800f016 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2200      	movs	r2, #0
 800f012:	601a      	str	r2, [r3, #0]
 800f014:	e00e      	b.n	800f034 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f016:	7bbb      	ldrb	r3, [r7, #14]
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f001 f9c6 	bl	80103ac <USBD_LL_IsStallEP>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d003      	beq.n	800f02e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	2201      	movs	r2, #1
 800f02a:	601a      	str	r2, [r3, #0]
 800f02c:	e002      	b.n	800f034 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	2200      	movs	r2, #0
 800f032:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2202      	movs	r2, #2
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fbe1 	bl	800f802 <USBD_CtlSendData>
              break;
 800f040:	e004      	b.n	800f04c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f000 fb6b 	bl	800f720 <USBD_CtlError>
              break;
 800f04a:	bf00      	nop
          }
          break;
 800f04c:	e004      	b.n	800f058 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f04e:	6839      	ldr	r1, [r7, #0]
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 fb65 	bl	800f720 <USBD_CtlError>
          break;
 800f056:	bf00      	nop
      }
      break;
 800f058:	e004      	b.n	800f064 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 fb5f 	bl	800f720 <USBD_CtlError>
      break;
 800f062:	bf00      	nop
  }

  return ret;
 800f064:	7bfb      	ldrb	r3, [r7, #15]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f07a:	2300      	movs	r3, #0
 800f07c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f07e:	2300      	movs	r3, #0
 800f080:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f082:	2300      	movs	r3, #0
 800f084:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	885b      	ldrh	r3, [r3, #2]
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	3b01      	subs	r3, #1
 800f090:	2b0e      	cmp	r3, #14
 800f092:	f200 8152 	bhi.w	800f33a <USBD_GetDescriptor+0x2ca>
 800f096:	a201      	add	r2, pc, #4	; (adr r2, 800f09c <USBD_GetDescriptor+0x2c>)
 800f098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f09c:	0800f10d 	.word	0x0800f10d
 800f0a0:	0800f125 	.word	0x0800f125
 800f0a4:	0800f165 	.word	0x0800f165
 800f0a8:	0800f33b 	.word	0x0800f33b
 800f0ac:	0800f33b 	.word	0x0800f33b
 800f0b0:	0800f2db 	.word	0x0800f2db
 800f0b4:	0800f307 	.word	0x0800f307
 800f0b8:	0800f33b 	.word	0x0800f33b
 800f0bc:	0800f33b 	.word	0x0800f33b
 800f0c0:	0800f33b 	.word	0x0800f33b
 800f0c4:	0800f33b 	.word	0x0800f33b
 800f0c8:	0800f33b 	.word	0x0800f33b
 800f0cc:	0800f33b 	.word	0x0800f33b
 800f0d0:	0800f33b 	.word	0x0800f33b
 800f0d4:	0800f0d9 	.word	0x0800f0d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0de:	69db      	ldr	r3, [r3, #28]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00b      	beq.n	800f0fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ea:	69db      	ldr	r3, [r3, #28]
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	7c12      	ldrb	r2, [r2, #16]
 800f0f0:	f107 0108 	add.w	r1, r7, #8
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	4798      	blx	r3
 800f0f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0fa:	e126      	b.n	800f34a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f0fc:	6839      	ldr	r1, [r7, #0]
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 fb0e 	bl	800f720 <USBD_CtlError>
        err++;
 800f104:	7afb      	ldrb	r3, [r7, #11]
 800f106:	3301      	adds	r3, #1
 800f108:	72fb      	strb	r3, [r7, #11]
      break;
 800f10a:	e11e      	b.n	800f34a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	7c12      	ldrb	r2, [r2, #16]
 800f118:	f107 0108 	add.w	r1, r7, #8
 800f11c:	4610      	mov	r0, r2
 800f11e:	4798      	blx	r3
 800f120:	60f8      	str	r0, [r7, #12]
      break;
 800f122:	e112      	b.n	800f34a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	7c1b      	ldrb	r3, [r3, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d10d      	bne.n	800f148 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f134:	f107 0208 	add.w	r2, r7, #8
 800f138:	4610      	mov	r0, r2
 800f13a:	4798      	blx	r3
 800f13c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	3301      	adds	r3, #1
 800f142:	2202      	movs	r2, #2
 800f144:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f146:	e100      	b.n	800f34a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f150:	f107 0208 	add.w	r2, r7, #8
 800f154:	4610      	mov	r0, r2
 800f156:	4798      	blx	r3
 800f158:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	3301      	adds	r3, #1
 800f15e:	2202      	movs	r2, #2
 800f160:	701a      	strb	r2, [r3, #0]
      break;
 800f162:	e0f2      	b.n	800f34a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	885b      	ldrh	r3, [r3, #2]
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	2b05      	cmp	r3, #5
 800f16c:	f200 80ac 	bhi.w	800f2c8 <USBD_GetDescriptor+0x258>
 800f170:	a201      	add	r2, pc, #4	; (adr r2, 800f178 <USBD_GetDescriptor+0x108>)
 800f172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f176:	bf00      	nop
 800f178:	0800f191 	.word	0x0800f191
 800f17c:	0800f1c5 	.word	0x0800f1c5
 800f180:	0800f1f9 	.word	0x0800f1f9
 800f184:	0800f22d 	.word	0x0800f22d
 800f188:	0800f261 	.word	0x0800f261
 800f18c:	0800f295 	.word	0x0800f295
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00b      	beq.n	800f1b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	7c12      	ldrb	r2, [r2, #16]
 800f1a8:	f107 0108 	add.w	r1, r7, #8
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	4798      	blx	r3
 800f1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1b2:	e091      	b.n	800f2d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1b4:	6839      	ldr	r1, [r7, #0]
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 fab2 	bl	800f720 <USBD_CtlError>
            err++;
 800f1bc:	7afb      	ldrb	r3, [r7, #11]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f1c2:	e089      	b.n	800f2d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00b      	beq.n	800f1e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	7c12      	ldrb	r2, [r2, #16]
 800f1dc:	f107 0108 	add.w	r1, r7, #8
 800f1e0:	4610      	mov	r0, r2
 800f1e2:	4798      	blx	r3
 800f1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1e6:	e077      	b.n	800f2d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 fa98 	bl	800f720 <USBD_CtlError>
            err++;
 800f1f0:	7afb      	ldrb	r3, [r7, #11]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f1f6:	e06f      	b.n	800f2d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00b      	beq.n	800f21c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	7c12      	ldrb	r2, [r2, #16]
 800f210:	f107 0108 	add.w	r1, r7, #8
 800f214:	4610      	mov	r0, r2
 800f216:	4798      	blx	r3
 800f218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f21a:	e05d      	b.n	800f2d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 fa7e 	bl	800f720 <USBD_CtlError>
            err++;
 800f224:	7afb      	ldrb	r3, [r7, #11]
 800f226:	3301      	adds	r3, #1
 800f228:	72fb      	strb	r3, [r7, #11]
          break;
 800f22a:	e055      	b.n	800f2d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00b      	beq.n	800f250 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f23e:	691b      	ldr	r3, [r3, #16]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	7c12      	ldrb	r2, [r2, #16]
 800f244:	f107 0108 	add.w	r1, r7, #8
 800f248:	4610      	mov	r0, r2
 800f24a:	4798      	blx	r3
 800f24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f24e:	e043      	b.n	800f2d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 fa64 	bl	800f720 <USBD_CtlError>
            err++;
 800f258:	7afb      	ldrb	r3, [r7, #11]
 800f25a:	3301      	adds	r3, #1
 800f25c:	72fb      	strb	r3, [r7, #11]
          break;
 800f25e:	e03b      	b.n	800f2d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00b      	beq.n	800f284 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	7c12      	ldrb	r2, [r2, #16]
 800f278:	f107 0108 	add.w	r1, r7, #8
 800f27c:	4610      	mov	r0, r2
 800f27e:	4798      	blx	r3
 800f280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f282:	e029      	b.n	800f2d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 fa4a 	bl	800f720 <USBD_CtlError>
            err++;
 800f28c:	7afb      	ldrb	r3, [r7, #11]
 800f28e:	3301      	adds	r3, #1
 800f290:	72fb      	strb	r3, [r7, #11]
          break;
 800f292:	e021      	b.n	800f2d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00b      	beq.n	800f2b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2a6:	699b      	ldr	r3, [r3, #24]
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	7c12      	ldrb	r2, [r2, #16]
 800f2ac:	f107 0108 	add.w	r1, r7, #8
 800f2b0:	4610      	mov	r0, r2
 800f2b2:	4798      	blx	r3
 800f2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2b6:	e00f      	b.n	800f2d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fa30 	bl	800f720 <USBD_CtlError>
            err++;
 800f2c0:	7afb      	ldrb	r3, [r7, #11]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800f2c6:	e007      	b.n	800f2d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f2c8:	6839      	ldr	r1, [r7, #0]
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 fa28 	bl	800f720 <USBD_CtlError>
          err++;
 800f2d0:	7afb      	ldrb	r3, [r7, #11]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f2d6:	bf00      	nop
      }
      break;
 800f2d8:	e037      	b.n	800f34a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	7c1b      	ldrb	r3, [r3, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d109      	bne.n	800f2f6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ea:	f107 0208 	add.w	r2, r7, #8
 800f2ee:	4610      	mov	r0, r2
 800f2f0:	4798      	blx	r3
 800f2f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2f4:	e029      	b.n	800f34a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 fa11 	bl	800f720 <USBD_CtlError>
        err++;
 800f2fe:	7afb      	ldrb	r3, [r7, #11]
 800f300:	3301      	adds	r3, #1
 800f302:	72fb      	strb	r3, [r7, #11]
      break;
 800f304:	e021      	b.n	800f34a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	7c1b      	ldrb	r3, [r3, #16]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d10d      	bne.n	800f32a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f316:	f107 0208 	add.w	r2, r7, #8
 800f31a:	4610      	mov	r0, r2
 800f31c:	4798      	blx	r3
 800f31e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	3301      	adds	r3, #1
 800f324:	2207      	movs	r2, #7
 800f326:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f328:	e00f      	b.n	800f34a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 f9f7 	bl	800f720 <USBD_CtlError>
        err++;
 800f332:	7afb      	ldrb	r3, [r7, #11]
 800f334:	3301      	adds	r3, #1
 800f336:	72fb      	strb	r3, [r7, #11]
      break;
 800f338:	e007      	b.n	800f34a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f9ef 	bl	800f720 <USBD_CtlError>
      err++;
 800f342:	7afb      	ldrb	r3, [r7, #11]
 800f344:	3301      	adds	r3, #1
 800f346:	72fb      	strb	r3, [r7, #11]
      break;
 800f348:	bf00      	nop
  }

  if (err != 0U)
 800f34a:	7afb      	ldrb	r3, [r7, #11]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d11e      	bne.n	800f38e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	88db      	ldrh	r3, [r3, #6]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d016      	beq.n	800f386 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f358:	893b      	ldrh	r3, [r7, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00e      	beq.n	800f37c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	88da      	ldrh	r2, [r3, #6]
 800f362:	893b      	ldrh	r3, [r7, #8]
 800f364:	4293      	cmp	r3, r2
 800f366:	bf28      	it	cs
 800f368:	4613      	movcs	r3, r2
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f36e:	893b      	ldrh	r3, [r7, #8]
 800f370:	461a      	mov	r2, r3
 800f372:	68f9      	ldr	r1, [r7, #12]
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 fa44 	bl	800f802 <USBD_CtlSendData>
 800f37a:	e009      	b.n	800f390 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f37c:	6839      	ldr	r1, [r7, #0]
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f9ce 	bl	800f720 <USBD_CtlError>
 800f384:	e004      	b.n	800f390 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 fa95 	bl	800f8b6 <USBD_CtlSendStatus>
 800f38c:	e000      	b.n	800f390 <USBD_GetDescriptor+0x320>
    return;
 800f38e:	bf00      	nop
  }
}
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop

0800f398 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	889b      	ldrh	r3, [r3, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d131      	bne.n	800f40e <USBD_SetAddress+0x76>
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	88db      	ldrh	r3, [r3, #6]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d12d      	bne.n	800f40e <USBD_SetAddress+0x76>
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	885b      	ldrh	r3, [r3, #2]
 800f3b6:	2b7f      	cmp	r3, #127	; 0x7f
 800f3b8:	d829      	bhi.n	800f40e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	885b      	ldrh	r3, [r3, #2]
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	2b03      	cmp	r3, #3
 800f3d0:	d104      	bne.n	800f3dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f9a3 	bl	800f720 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3da:	e01d      	b.n	800f418 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	7bfa      	ldrb	r2, [r7, #15]
 800f3e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f3e4:	7bfb      	ldrb	r3, [r7, #15]
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f001 f80b 	bl	8010404 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 fa61 	bl	800f8b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f402:	e009      	b.n	800f418 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f40c:	e004      	b.n	800f418 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f40e:	6839      	ldr	r1, [r7, #0]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f985 	bl	800f720 <USBD_CtlError>
  }
}
 800f416:	bf00      	nop
 800f418:	bf00      	nop
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	885b      	ldrh	r3, [r3, #2]
 800f432:	b2da      	uxtb	r2, r3
 800f434:	4b4c      	ldr	r3, [pc, #304]	; (800f568 <USBD_SetConfig+0x148>)
 800f436:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f438:	4b4b      	ldr	r3, [pc, #300]	; (800f568 <USBD_SetConfig+0x148>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d905      	bls.n	800f44c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f440:	6839      	ldr	r1, [r7, #0]
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 f96c 	bl	800f720 <USBD_CtlError>
    return USBD_FAIL;
 800f448:	2303      	movs	r3, #3
 800f44a:	e088      	b.n	800f55e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b02      	cmp	r3, #2
 800f456:	d002      	beq.n	800f45e <USBD_SetConfig+0x3e>
 800f458:	2b03      	cmp	r3, #3
 800f45a:	d025      	beq.n	800f4a8 <USBD_SetConfig+0x88>
 800f45c:	e071      	b.n	800f542 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f45e:	4b42      	ldr	r3, [pc, #264]	; (800f568 <USBD_SetConfig+0x148>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d01c      	beq.n	800f4a0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f466:	4b40      	ldr	r3, [pc, #256]	; (800f568 <USBD_SetConfig+0x148>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f470:	4b3d      	ldr	r3, [pc, #244]	; (800f568 <USBD_SetConfig+0x148>)
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	4619      	mov	r1, r3
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff f91e 	bl	800e6b8 <USBD_SetClassConfig>
 800f47c:	4603      	mov	r3, r0
 800f47e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d004      	beq.n	800f490 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f486:	6839      	ldr	r1, [r7, #0]
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 f949 	bl	800f720 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f48e:	e065      	b.n	800f55c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fa10 	bl	800f8b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2203      	movs	r2, #3
 800f49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f49e:	e05d      	b.n	800f55c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fa08 	bl	800f8b6 <USBD_CtlSendStatus>
      break;
 800f4a6:	e059      	b.n	800f55c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f4a8:	4b2f      	ldr	r3, [pc, #188]	; (800f568 <USBD_SetConfig+0x148>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d112      	bne.n	800f4d6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f4b8:	4b2b      	ldr	r3, [pc, #172]	; (800f568 <USBD_SetConfig+0x148>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4c2:	4b29      	ldr	r3, [pc, #164]	; (800f568 <USBD_SetConfig+0x148>)
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7ff f911 	bl	800e6f0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 f9f1 	bl	800f8b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f4d4:	e042      	b.n	800f55c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f4d6:	4b24      	ldr	r3, [pc, #144]	; (800f568 <USBD_SetConfig+0x148>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d02a      	beq.n	800f53a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff f8ff 	bl	800e6f0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f4f2:	4b1d      	ldr	r3, [pc, #116]	; (800f568 <USBD_SetConfig+0x148>)
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f4fc:	4b1a      	ldr	r3, [pc, #104]	; (800f568 <USBD_SetConfig+0x148>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	4619      	mov	r1, r3
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f7ff f8d8 	bl	800e6b8 <USBD_SetClassConfig>
 800f508:	4603      	mov	r3, r0
 800f50a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00f      	beq.n	800f532 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f512:	6839      	ldr	r1, [r7, #0]
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f903 	bl	800f720 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	4619      	mov	r1, r3
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff f8e4 	bl	800e6f0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2202      	movs	r2, #2
 800f52c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f530:	e014      	b.n	800f55c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 f9bf 	bl	800f8b6 <USBD_CtlSendStatus>
      break;
 800f538:	e010      	b.n	800f55c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 f9bb 	bl	800f8b6 <USBD_CtlSendStatus>
      break;
 800f540:	e00c      	b.n	800f55c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f542:	6839      	ldr	r1, [r7, #0]
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 f8eb 	bl	800f720 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f54a:	4b07      	ldr	r3, [pc, #28]	; (800f568 <USBD_SetConfig+0x148>)
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	4619      	mov	r1, r3
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff f8cd 	bl	800e6f0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f556:	2303      	movs	r3, #3
 800f558:	73fb      	strb	r3, [r7, #15]
      break;
 800f55a:	bf00      	nop
  }

  return ret;
 800f55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	200008f0 	.word	0x200008f0

0800f56c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	88db      	ldrh	r3, [r3, #6]
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d004      	beq.n	800f588 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f8cd 	bl	800f720 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f586:	e023      	b.n	800f5d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	2b02      	cmp	r3, #2
 800f592:	dc02      	bgt.n	800f59a <USBD_GetConfig+0x2e>
 800f594:	2b00      	cmp	r3, #0
 800f596:	dc03      	bgt.n	800f5a0 <USBD_GetConfig+0x34>
 800f598:	e015      	b.n	800f5c6 <USBD_GetConfig+0x5a>
 800f59a:	2b03      	cmp	r3, #3
 800f59c:	d00b      	beq.n	800f5b6 <USBD_GetConfig+0x4a>
 800f59e:	e012      	b.n	800f5c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3308      	adds	r3, #8
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f927 	bl	800f802 <USBD_CtlSendData>
        break;
 800f5b4:	e00c      	b.n	800f5d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f91f 	bl	800f802 <USBD_CtlSendData>
        break;
 800f5c4:	e004      	b.n	800f5d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 f8a9 	bl	800f720 <USBD_CtlError>
        break;
 800f5ce:	bf00      	nop
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	2b02      	cmp	r3, #2
 800f5ee:	d81e      	bhi.n	800f62e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	88db      	ldrh	r3, [r3, #6]
 800f5f4:	2b02      	cmp	r3, #2
 800f5f6:	d004      	beq.n	800f602 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 f890 	bl	800f720 <USBD_CtlError>
        break;
 800f600:	e01a      	b.n	800f638 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2201      	movs	r2, #1
 800f606:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d005      	beq.n	800f61e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	f043 0202 	orr.w	r2, r3, #2
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	330c      	adds	r3, #12
 800f622:	2202      	movs	r2, #2
 800f624:	4619      	mov	r1, r3
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f8eb 	bl	800f802 <USBD_CtlSendData>
      break;
 800f62c:	e004      	b.n	800f638 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f62e:	6839      	ldr	r1, [r7, #0]
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 f875 	bl	800f720 <USBD_CtlError>
      break;
 800f636:	bf00      	nop
  }
}
 800f638:	bf00      	nop
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	885b      	ldrh	r3, [r3, #2]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d106      	bne.n	800f660 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2201      	movs	r2, #1
 800f656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 f92b 	bl	800f8b6 <USBD_CtlSendStatus>
  }
}
 800f660:	bf00      	nop
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	3b01      	subs	r3, #1
 800f67c:	2b02      	cmp	r3, #2
 800f67e:	d80b      	bhi.n	800f698 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	885b      	ldrh	r3, [r3, #2]
 800f684:	2b01      	cmp	r3, #1
 800f686:	d10c      	bne.n	800f6a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f910 	bl	800f8b6 <USBD_CtlSendStatus>
      }
      break;
 800f696:	e004      	b.n	800f6a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f698:	6839      	ldr	r1, [r7, #0]
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 f840 	bl	800f720 <USBD_CtlError>
      break;
 800f6a0:	e000      	b.n	800f6a4 <USBD_ClrFeature+0x3c>
      break;
 800f6a2:	bf00      	nop
  }
}
 800f6a4:	bf00      	nop
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	781a      	ldrb	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	781a      	ldrb	r2, [r3, #0]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f7ff fa91 	bl	800ebfe <SWAPBYTE>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	461a      	mov	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	f7ff fa84 	bl	800ebfe <SWAPBYTE>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	3301      	adds	r3, #1
 800f702:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	3301      	adds	r3, #1
 800f708:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f70a:	68f8      	ldr	r0, [r7, #12]
 800f70c:	f7ff fa77 	bl	800ebfe <SWAPBYTE>
 800f710:	4603      	mov	r3, r0
 800f712:	461a      	mov	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	80da      	strh	r2, [r3, #6]
}
 800f718:	bf00      	nop
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f72a:	2180      	movs	r1, #128	; 0x80
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fdd1 	bl	80102d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f732:	2100      	movs	r1, #0
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 fdcd 	bl	80102d4 <USBD_LL_StallEP>
}
 800f73a:	bf00      	nop
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b086      	sub	sp, #24
 800f746:	af00      	add	r7, sp, #0
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	60b9      	str	r1, [r7, #8]
 800f74c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f74e:	2300      	movs	r3, #0
 800f750:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d036      	beq.n	800f7c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f75c:	6938      	ldr	r0, [r7, #16]
 800f75e:	f000 f836 	bl	800f7ce <USBD_GetLen>
 800f762:	4603      	mov	r3, r0
 800f764:	3301      	adds	r3, #1
 800f766:	b29b      	uxth	r3, r3
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f770:	7dfb      	ldrb	r3, [r7, #23]
 800f772:	68ba      	ldr	r2, [r7, #8]
 800f774:	4413      	add	r3, r2
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	7812      	ldrb	r2, [r2, #0]
 800f77a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f77c:	7dfb      	ldrb	r3, [r7, #23]
 800f77e:	3301      	adds	r3, #1
 800f780:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f782:	7dfb      	ldrb	r3, [r7, #23]
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	4413      	add	r3, r2
 800f788:	2203      	movs	r2, #3
 800f78a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f78c:	7dfb      	ldrb	r3, [r7, #23]
 800f78e:	3301      	adds	r3, #1
 800f790:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f792:	e013      	b.n	800f7bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	4413      	add	r3, r2
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	7812      	ldrb	r2, [r2, #0]
 800f79e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	613b      	str	r3, [r7, #16]
    idx++;
 800f7a6:	7dfb      	ldrb	r3, [r7, #23]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f7ac:	7dfb      	ldrb	r3, [r7, #23]
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e7      	bne.n	800f794 <USBD_GetString+0x52>
 800f7c4:	e000      	b.n	800f7c8 <USBD_GetString+0x86>
    return;
 800f7c6:	bf00      	nop
  }
}
 800f7c8:	3718      	adds	r7, #24
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b085      	sub	sp, #20
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f7de:	e005      	b.n	800f7ec <USBD_GetLen+0x1e>
  {
    len++;
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d1f5      	bne.n	800f7e0 <USBD_GetLen+0x12>
  }

  return len;
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr

0800f802 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b084      	sub	sp, #16
 800f806:	af00      	add	r7, sp, #0
 800f808:	60f8      	str	r0, [r7, #12]
 800f80a:	60b9      	str	r1, [r7, #8]
 800f80c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2202      	movs	r2, #2
 800f812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	2100      	movs	r1, #0
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f000 fe21 	bl	8010470 <USBD_LL_Transmit>

  return USBD_OK;
 800f82e:	2300      	movs	r3, #0
}
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	2100      	movs	r1, #0
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	f000 fe10 	bl	8010470 <USBD_LL_Transmit>

  return USBD_OK;
 800f850:	2300      	movs	r3, #0
}
 800f852:	4618      	mov	r0, r3
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b084      	sub	sp, #16
 800f85e:	af00      	add	r7, sp, #0
 800f860:	60f8      	str	r0, [r7, #12]
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2203      	movs	r2, #3
 800f86a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	68ba      	ldr	r2, [r7, #8]
 800f882:	2100      	movs	r1, #0
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f000 fe2b 	bl	80104e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	68f8      	ldr	r0, [r7, #12]
 800f8a8:	f000 fe1a 	bl	80104e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2204      	movs	r2, #4
 800f8c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 fdcf 	bl	8010470 <USBD_LL_Transmit>

  return USBD_OK;
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2205      	movs	r2, #5
 800f8e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 fdf4 	bl	80104e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3708      	adds	r7, #8
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
	...

0800f904 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f904:	b480      	push	{r7}
 800f906:	b087      	sub	sp, #28
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	4613      	mov	r3, r2
 800f910:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f912:	2301      	movs	r3, #1
 800f914:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f91a:	4b1f      	ldr	r3, [pc, #124]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f91c:	7a5b      	ldrb	r3, [r3, #9]
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	2b00      	cmp	r3, #0
 800f922:	d131      	bne.n	800f988 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f924:	4b1c      	ldr	r3, [pc, #112]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f926:	7a5b      	ldrb	r3, [r3, #9]
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	461a      	mov	r2, r3
 800f92c:	4b1a      	ldr	r3, [pc, #104]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f92e:	2100      	movs	r1, #0
 800f930:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f932:	4b19      	ldr	r3, [pc, #100]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f934:	7a5b      	ldrb	r3, [r3, #9]
 800f936:	b2db      	uxtb	r3, r3
 800f938:	4a17      	ldr	r2, [pc, #92]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4413      	add	r3, r2
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f942:	4b15      	ldr	r3, [pc, #84]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f944:	7a5b      	ldrb	r3, [r3, #9]
 800f946:	b2db      	uxtb	r3, r3
 800f948:	461a      	mov	r2, r3
 800f94a:	4b13      	ldr	r3, [pc, #76]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f94c:	4413      	add	r3, r2
 800f94e:	79fa      	ldrb	r2, [r7, #7]
 800f950:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f952:	4b11      	ldr	r3, [pc, #68]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f954:	7a5b      	ldrb	r3, [r3, #9]
 800f956:	b2db      	uxtb	r3, r3
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	b2d1      	uxtb	r1, r2
 800f95c:	4a0e      	ldr	r2, [pc, #56]	; (800f998 <FATFS_LinkDriverEx+0x94>)
 800f95e:	7251      	strb	r1, [r2, #9]
 800f960:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f962:	7dbb      	ldrb	r3, [r7, #22]
 800f964:	3330      	adds	r3, #48	; 0x30
 800f966:	b2da      	uxtb	r2, r3
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	3301      	adds	r3, #1
 800f970:	223a      	movs	r2, #58	; 0x3a
 800f972:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	3302      	adds	r3, #2
 800f978:	222f      	movs	r2, #47	; 0x2f
 800f97a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	3303      	adds	r3, #3
 800f980:	2200      	movs	r2, #0
 800f982:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f984:	2300      	movs	r3, #0
 800f986:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f988:	7dfb      	ldrb	r3, [r7, #23]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	371c      	adds	r7, #28
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	200008f4 	.word	0x200008f4

0800f99c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	6839      	ldr	r1, [r7, #0]
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7ff ffaa 	bl	800f904 <FATFS_LinkDriverEx>
 800f9b0:	4603      	mov	r3, r0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
	...

0800f9bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	4912      	ldr	r1, [pc, #72]	; (800fa0c <MX_USB_DEVICE_Init+0x50>)
 800f9c4:	4812      	ldr	r0, [pc, #72]	; (800fa10 <MX_USB_DEVICE_Init+0x54>)
 800f9c6:	f7fe fe09 	bl	800e5dc <USBD_Init>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d001      	beq.n	800f9d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f9d0:	f7f2 fc26 	bl	8002220 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f9d4:	490f      	ldr	r1, [pc, #60]	; (800fa14 <MX_USB_DEVICE_Init+0x58>)
 800f9d6:	480e      	ldr	r0, [pc, #56]	; (800fa10 <MX_USB_DEVICE_Init+0x54>)
 800f9d8:	f7fe fe30 	bl	800e63c <USBD_RegisterClass>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f9e2:	f7f2 fc1d 	bl	8002220 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f9e6:	490c      	ldr	r1, [pc, #48]	; (800fa18 <MX_USB_DEVICE_Init+0x5c>)
 800f9e8:	4809      	ldr	r0, [pc, #36]	; (800fa10 <MX_USB_DEVICE_Init+0x54>)
 800f9ea:	f7fe fd51 	bl	800e490 <USBD_CDC_RegisterInterface>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d001      	beq.n	800f9f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f9f4:	f7f2 fc14 	bl	8002220 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f9f8:	4805      	ldr	r0, [pc, #20]	; (800fa10 <MX_USB_DEVICE_Init+0x54>)
 800f9fa:	f7fe fe46 	bl	800e68a <USBD_Start>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d001      	beq.n	800fa08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fa04:	f7f2 fc0c 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa08:	bf00      	nop
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	20000150 	.word	0x20000150
 800fa10:	20000900 	.word	0x20000900
 800fa14:	20000038 	.word	0x20000038
 800fa18:	2000013c 	.word	0x2000013c

0800fa1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fa20:	2200      	movs	r2, #0
 800fa22:	4905      	ldr	r1, [pc, #20]	; (800fa38 <CDC_Init_FS+0x1c>)
 800fa24:	4805      	ldr	r0, [pc, #20]	; (800fa3c <CDC_Init_FS+0x20>)
 800fa26:	f7fe fd48 	bl	800e4ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fa2a:	4905      	ldr	r1, [pc, #20]	; (800fa40 <CDC_Init_FS+0x24>)
 800fa2c:	4803      	ldr	r0, [pc, #12]	; (800fa3c <CDC_Init_FS+0x20>)
 800fa2e:	f7fe fd62 	bl	800e4f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fa32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	200013d0 	.word	0x200013d0
 800fa3c:	20000900 	.word	0x20000900
 800fa40:	20000bd0 	.word	0x20000bd0

0800fa44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fa44:	b480      	push	{r7}
 800fa46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fa48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	6039      	str	r1, [r7, #0]
 800fa5e:	71fb      	strb	r3, [r7, #7]
 800fa60:	4613      	mov	r3, r2
 800fa62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fa64:	79fb      	ldrb	r3, [r7, #7]
 800fa66:	2b23      	cmp	r3, #35	; 0x23
 800fa68:	d84a      	bhi.n	800fb00 <CDC_Control_FS+0xac>
 800fa6a:	a201      	add	r2, pc, #4	; (adr r2, 800fa70 <CDC_Control_FS+0x1c>)
 800fa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa70:	0800fb01 	.word	0x0800fb01
 800fa74:	0800fb01 	.word	0x0800fb01
 800fa78:	0800fb01 	.word	0x0800fb01
 800fa7c:	0800fb01 	.word	0x0800fb01
 800fa80:	0800fb01 	.word	0x0800fb01
 800fa84:	0800fb01 	.word	0x0800fb01
 800fa88:	0800fb01 	.word	0x0800fb01
 800fa8c:	0800fb01 	.word	0x0800fb01
 800fa90:	0800fb01 	.word	0x0800fb01
 800fa94:	0800fb01 	.word	0x0800fb01
 800fa98:	0800fb01 	.word	0x0800fb01
 800fa9c:	0800fb01 	.word	0x0800fb01
 800faa0:	0800fb01 	.word	0x0800fb01
 800faa4:	0800fb01 	.word	0x0800fb01
 800faa8:	0800fb01 	.word	0x0800fb01
 800faac:	0800fb01 	.word	0x0800fb01
 800fab0:	0800fb01 	.word	0x0800fb01
 800fab4:	0800fb01 	.word	0x0800fb01
 800fab8:	0800fb01 	.word	0x0800fb01
 800fabc:	0800fb01 	.word	0x0800fb01
 800fac0:	0800fb01 	.word	0x0800fb01
 800fac4:	0800fb01 	.word	0x0800fb01
 800fac8:	0800fb01 	.word	0x0800fb01
 800facc:	0800fb01 	.word	0x0800fb01
 800fad0:	0800fb01 	.word	0x0800fb01
 800fad4:	0800fb01 	.word	0x0800fb01
 800fad8:	0800fb01 	.word	0x0800fb01
 800fadc:	0800fb01 	.word	0x0800fb01
 800fae0:	0800fb01 	.word	0x0800fb01
 800fae4:	0800fb01 	.word	0x0800fb01
 800fae8:	0800fb01 	.word	0x0800fb01
 800faec:	0800fb01 	.word	0x0800fb01
 800faf0:	0800fb01 	.word	0x0800fb01
 800faf4:	0800fb01 	.word	0x0800fb01
 800faf8:	0800fb01 	.word	0x0800fb01
 800fafc:	0800fb01 	.word	0x0800fb01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fb00:	bf00      	nop
  }

  return (USBD_OK);
 800fb02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fb1a:	6879      	ldr	r1, [r7, #4]
 800fb1c:	4805      	ldr	r0, [pc, #20]	; (800fb34 <CDC_Receive_FS+0x24>)
 800fb1e:	f7fe fcea 	bl	800e4f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fb22:	4804      	ldr	r0, [pc, #16]	; (800fb34 <CDC_Receive_FS+0x24>)
 800fb24:	f7fe fd30 	bl	800e588 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fb28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	20000900 	.word	0x20000900

0800fb38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	460b      	mov	r3, r1
 800fb42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fb44:	2300      	movs	r3, #0
 800fb46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fb48:	4b0d      	ldr	r3, [pc, #52]	; (800fb80 <CDC_Transmit_FS+0x48>)
 800fb4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e00b      	b.n	800fb76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fb5e:	887b      	ldrh	r3, [r7, #2]
 800fb60:	461a      	mov	r2, r3
 800fb62:	6879      	ldr	r1, [r7, #4]
 800fb64:	4806      	ldr	r0, [pc, #24]	; (800fb80 <CDC_Transmit_FS+0x48>)
 800fb66:	f7fe fca8 	bl	800e4ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fb6a:	4805      	ldr	r0, [pc, #20]	; (800fb80 <CDC_Transmit_FS+0x48>)
 800fb6c:	f7fe fcdc 	bl	800e528 <USBD_CDC_TransmitPacket>
 800fb70:	4603      	mov	r3, r0
 800fb72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	20000900 	.word	0x20000900

0800fb84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fb92:	2300      	movs	r3, #0
 800fb94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fb96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	371c      	adds	r7, #28
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
	...

0800fba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	4603      	mov	r3, r0
 800fbb0:	6039      	str	r1, [r7, #0]
 800fbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	2212      	movs	r2, #18
 800fbb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fbba:	4b03      	ldr	r3, [pc, #12]	; (800fbc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr
 800fbc8:	20000170 	.word	0x20000170

0800fbcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	6039      	str	r1, [r7, #0]
 800fbd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	2204      	movs	r2, #4
 800fbdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fbde:	4b03      	ldr	r3, [pc, #12]	; (800fbec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	20000190 	.word	0x20000190

0800fbf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	6039      	str	r1, [r7, #0]
 800fbfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fbfc:	79fb      	ldrb	r3, [r7, #7]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d105      	bne.n	800fc0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc02:	683a      	ldr	r2, [r7, #0]
 800fc04:	4907      	ldr	r1, [pc, #28]	; (800fc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc06:	4808      	ldr	r0, [pc, #32]	; (800fc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc08:	f7ff fd9b 	bl	800f742 <USBD_GetString>
 800fc0c:	e004      	b.n	800fc18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc0e:	683a      	ldr	r2, [r7, #0]
 800fc10:	4904      	ldr	r1, [pc, #16]	; (800fc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc12:	4805      	ldr	r0, [pc, #20]	; (800fc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc14:	f7ff fd95 	bl	800f742 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc18:	4b02      	ldr	r3, [pc, #8]	; (800fc24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	20001bd0 	.word	0x20001bd0
 800fc28:	08011a00 	.word	0x08011a00

0800fc2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	4603      	mov	r3, r0
 800fc34:	6039      	str	r1, [r7, #0]
 800fc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	4904      	ldr	r1, [pc, #16]	; (800fc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fc3c:	4804      	ldr	r0, [pc, #16]	; (800fc50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fc3e:	f7ff fd80 	bl	800f742 <USBD_GetString>
  return USBD_StrDesc;
 800fc42:	4b02      	ldr	r3, [pc, #8]	; (800fc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	20001bd0 	.word	0x20001bd0
 800fc50:	08011a18 	.word	0x08011a18

0800fc54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	6039      	str	r1, [r7, #0]
 800fc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	221a      	movs	r2, #26
 800fc64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fc66:	f000 f855 	bl	800fd14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fc6a:	4b02      	ldr	r3, [pc, #8]	; (800fc74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20000194 	.word	0x20000194

0800fc78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	4603      	mov	r3, r0
 800fc80:	6039      	str	r1, [r7, #0]
 800fc82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fc84:	79fb      	ldrb	r3, [r7, #7]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d105      	bne.n	800fc96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc8a:	683a      	ldr	r2, [r7, #0]
 800fc8c:	4907      	ldr	r1, [pc, #28]	; (800fcac <USBD_FS_ConfigStrDescriptor+0x34>)
 800fc8e:	4808      	ldr	r0, [pc, #32]	; (800fcb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fc90:	f7ff fd57 	bl	800f742 <USBD_GetString>
 800fc94:	e004      	b.n	800fca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	4904      	ldr	r1, [pc, #16]	; (800fcac <USBD_FS_ConfigStrDescriptor+0x34>)
 800fc9a:	4805      	ldr	r0, [pc, #20]	; (800fcb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fc9c:	f7ff fd51 	bl	800f742 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fca0:	4b02      	ldr	r3, [pc, #8]	; (800fcac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	20001bd0 	.word	0x20001bd0
 800fcb0:	08011a2c 	.word	0x08011a2c

0800fcb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	4603      	mov	r3, r0
 800fcbc:	6039      	str	r1, [r7, #0]
 800fcbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fcc0:	79fb      	ldrb	r3, [r7, #7]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d105      	bne.n	800fcd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fcc6:	683a      	ldr	r2, [r7, #0]
 800fcc8:	4907      	ldr	r1, [pc, #28]	; (800fce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fcca:	4808      	ldr	r0, [pc, #32]	; (800fcec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fccc:	f7ff fd39 	bl	800f742 <USBD_GetString>
 800fcd0:	e004      	b.n	800fcdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fcd2:	683a      	ldr	r2, [r7, #0]
 800fcd4:	4904      	ldr	r1, [pc, #16]	; (800fce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fcd6:	4805      	ldr	r0, [pc, #20]	; (800fcec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fcd8:	f7ff fd33 	bl	800f742 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fcdc:	4b02      	ldr	r3, [pc, #8]	; (800fce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	20001bd0 	.word	0x20001bd0
 800fcec:	08011a38 	.word	0x08011a38

0800fcf0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	6039      	str	r1, [r7, #0]
 800fcfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	220c      	movs	r2, #12
 800fd00:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fd02:	4b03      	ldr	r3, [pc, #12]	; (800fd10 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	20000184 	.word	0x20000184

0800fd14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fd1a:	4b0f      	ldr	r3, [pc, #60]	; (800fd58 <Get_SerialNum+0x44>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd20:	4b0e      	ldr	r3, [pc, #56]	; (800fd5c <Get_SerialNum+0x48>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd26:	4b0e      	ldr	r3, [pc, #56]	; (800fd60 <Get_SerialNum+0x4c>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4413      	add	r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d009      	beq.n	800fd4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd3a:	2208      	movs	r2, #8
 800fd3c:	4909      	ldr	r1, [pc, #36]	; (800fd64 <Get_SerialNum+0x50>)
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f000 f814 	bl	800fd6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd44:	2204      	movs	r2, #4
 800fd46:	4908      	ldr	r1, [pc, #32]	; (800fd68 <Get_SerialNum+0x54>)
 800fd48:	68b8      	ldr	r0, [r7, #8]
 800fd4a:	f000 f80f 	bl	800fd6c <IntToUnicode>
  }
}
 800fd4e:	bf00      	nop
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	1fff7590 	.word	0x1fff7590
 800fd5c:	1fff7594 	.word	0x1fff7594
 800fd60:	1fff7598 	.word	0x1fff7598
 800fd64:	20000196 	.word	0x20000196
 800fd68:	200001a6 	.word	0x200001a6

0800fd6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b087      	sub	sp, #28
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	4613      	mov	r3, r2
 800fd78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fd7e:	2300      	movs	r3, #0
 800fd80:	75fb      	strb	r3, [r7, #23]
 800fd82:	e027      	b.n	800fdd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	0f1b      	lsrs	r3, r3, #28
 800fd88:	2b09      	cmp	r3, #9
 800fd8a:	d80b      	bhi.n	800fda4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	0f1b      	lsrs	r3, r3, #28
 800fd90:	b2da      	uxtb	r2, r3
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	005b      	lsls	r3, r3, #1
 800fd96:	4619      	mov	r1, r3
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	440b      	add	r3, r1
 800fd9c:	3230      	adds	r2, #48	; 0x30
 800fd9e:	b2d2      	uxtb	r2, r2
 800fda0:	701a      	strb	r2, [r3, #0]
 800fda2:	e00a      	b.n	800fdba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	0f1b      	lsrs	r3, r3, #28
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	7dfb      	ldrb	r3, [r7, #23]
 800fdac:	005b      	lsls	r3, r3, #1
 800fdae:	4619      	mov	r1, r3
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	440b      	add	r3, r1
 800fdb4:	3237      	adds	r2, #55	; 0x37
 800fdb6:	b2d2      	uxtb	r2, r2
 800fdb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	011b      	lsls	r3, r3, #4
 800fdbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fdc0:	7dfb      	ldrb	r3, [r7, #23]
 800fdc2:	005b      	lsls	r3, r3, #1
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	68ba      	ldr	r2, [r7, #8]
 800fdc8:	4413      	add	r3, r2
 800fdca:	2200      	movs	r2, #0
 800fdcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fdce:	7dfb      	ldrb	r3, [r7, #23]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	75fb      	strb	r3, [r7, #23]
 800fdd4:	7dfa      	ldrb	r2, [r7, #23]
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d3d3      	bcc.n	800fd84 <IntToUnicode+0x18>
  }
}
 800fddc:	bf00      	nop
 800fdde:	bf00      	nop
 800fde0:	371c      	adds	r7, #28
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
	...

0800fdec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b0b2      	sub	sp, #200	; 0xc8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fdf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	601a      	str	r2, [r3, #0]
 800fdfc:	605a      	str	r2, [r3, #4]
 800fdfe:	609a      	str	r2, [r3, #8]
 800fe00:	60da      	str	r2, [r3, #12]
 800fe02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fe04:	f107 0318 	add.w	r3, r7, #24
 800fe08:	229c      	movs	r2, #156	; 0x9c
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f000 fc49 	bl	80106a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe1a:	d163      	bne.n	800fee4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fe1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fe22:	2300      	movs	r3, #0
 800fe24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fe28:	f107 0318 	add.w	r3, r7, #24
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7f6 ffe9 	bl	8006e04 <HAL_RCCEx_PeriphCLKConfig>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d001      	beq.n	800fe3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fe38:	f7f2 f9f2 	bl	8002220 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe3c:	4b2b      	ldr	r3, [pc, #172]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fe3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe40:	4a2a      	ldr	r2, [pc, #168]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fe42:	f043 0301 	orr.w	r3, r3, #1
 800fe46:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fe48:	4b28      	ldr	r3, [pc, #160]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fe4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe4c:	f003 0301 	and.w	r3, r3, #1
 800fe50:	617b      	str	r3, [r7, #20]
 800fe52:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 800fe54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fe58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe68:	2303      	movs	r3, #3
 800fe6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe6e:	230a      	movs	r3, #10
 800fe70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fe7e:	f7f4 fb51 	bl	8004524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe82:	4b1a      	ldr	r3, [pc, #104]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fe84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe86:	4a19      	ldr	r2, [pc, #100]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fe88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fe8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fe8e:	4b17      	ldr	r3, [pc, #92]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fe90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe96:	613b      	str	r3, [r7, #16]
 800fe98:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fe9a:	4b14      	ldr	r3, [pc, #80]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fe9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d114      	bne.n	800fed0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fea6:	4b11      	ldr	r3, [pc, #68]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800feaa:	4a10      	ldr	r2, [pc, #64]	; (800feec <HAL_PCD_MspInit+0x100>)
 800feac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feb0:	6593      	str	r3, [r2, #88]	; 0x58
 800feb2:	4b0e      	ldr	r3, [pc, #56]	; (800feec <HAL_PCD_MspInit+0x100>)
 800feb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800feb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800feba:	60fb      	str	r3, [r7, #12]
 800febc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800febe:	f7f6 f8ad 	bl	800601c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800fec2:	4b0a      	ldr	r3, [pc, #40]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fec6:	4a09      	ldr	r2, [pc, #36]	; (800feec <HAL_PCD_MspInit+0x100>)
 800fec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fecc:	6593      	str	r3, [r2, #88]	; 0x58
 800fece:	e001      	b.n	800fed4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800fed0:	f7f6 f8a4 	bl	800601c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fed4:	2200      	movs	r2, #0
 800fed6:	2100      	movs	r1, #0
 800fed8:	2043      	movs	r0, #67	; 0x43
 800feda:	f7f3 ff06 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fede:	2043      	movs	r0, #67	; 0x43
 800fee0:	f7f3 ff1f 	bl	8003d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fee4:	bf00      	nop
 800fee6:	37c8      	adds	r7, #200	; 0xc8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	40021000 	.word	0x40021000

0800fef0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ff04:	4619      	mov	r1, r3
 800ff06:	4610      	mov	r0, r2
 800ff08:	f7fe fc0a 	bl	800e720 <USBD_LL_SetupStage>
}
 800ff0c:	bf00      	nop
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ff26:	78fa      	ldrb	r2, [r7, #3]
 800ff28:	6879      	ldr	r1, [r7, #4]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	00db      	lsls	r3, r3, #3
 800ff2e:	4413      	add	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	440b      	add	r3, r1
 800ff34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	78fb      	ldrb	r3, [r7, #3]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	f7fe fc44 	bl	800e7ca <USBD_LL_DataOutStage>
}
 800ff42:	bf00      	nop
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b082      	sub	sp, #8
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	460b      	mov	r3, r1
 800ff54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ff5c:	78fa      	ldrb	r2, [r7, #3]
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	4613      	mov	r3, r2
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	4413      	add	r3, r2
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	440b      	add	r3, r1
 800ff6a:	334c      	adds	r3, #76	; 0x4c
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	78fb      	ldrb	r3, [r7, #3]
 800ff70:	4619      	mov	r1, r3
 800ff72:	f7fe fc8d 	bl	800e890 <USBD_LL_DataInStage>
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b082      	sub	sp, #8
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fe fda1 	bl	800ead4 <USBD_LL_SOF>
}
 800ff92:	bf00      	nop
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b084      	sub	sp, #16
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	2b02      	cmp	r3, #2
 800ffac:	d001      	beq.n	800ffb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ffae:	f7f2 f937 	bl	8002220 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ffb8:	7bfa      	ldrb	r2, [r7, #15]
 800ffba:	4611      	mov	r1, r2
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7fe fd4b 	bl	800ea58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fe fcf7 	bl	800e9bc <USBD_LL_Reset>
}
 800ffce:	bf00      	nop
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
	...

0800ffd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	6812      	ldr	r2, [r2, #0]
 800ffee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fff2:	f043 0301 	orr.w	r3, r3, #1
 800fff6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe fd3a 	bl	800ea78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6a1b      	ldr	r3, [r3, #32]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d005      	beq.n	8010018 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801000c:	4b04      	ldr	r3, [pc, #16]	; (8010020 <HAL_PCD_SuspendCallback+0x48>)
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	4a03      	ldr	r2, [pc, #12]	; (8010020 <HAL_PCD_SuspendCallback+0x48>)
 8010012:	f043 0306 	orr.w	r3, r3, #6
 8010016:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010018:	bf00      	nop
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	e000ed00 	.word	0xe000ed00

08010024 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	6812      	ldr	r2, [r2, #0]
 801003a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801003e:	f023 0301 	bic.w	r3, r3, #1
 8010042:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a1b      	ldr	r3, [r3, #32]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d007      	beq.n	801005c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801004c:	4b08      	ldr	r3, [pc, #32]	; (8010070 <HAL_PCD_ResumeCallback+0x4c>)
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	4a07      	ldr	r2, [pc, #28]	; (8010070 <HAL_PCD_ResumeCallback+0x4c>)
 8010052:	f023 0306 	bic.w	r3, r3, #6
 8010056:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010058:	f000 faf4 	bl	8010644 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fd1e 	bl	800eaa4 <USBD_LL_Resume>
}
 8010068:	bf00      	nop
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	e000ed00 	.word	0xe000ed00

08010074 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	460b      	mov	r3, r1
 801007e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010086:	78fa      	ldrb	r2, [r7, #3]
 8010088:	4611      	mov	r1, r2
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fd6a 	bl	800eb64 <USBD_LL_IsoOUTIncomplete>
}
 8010090:	bf00      	nop
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	460b      	mov	r3, r1
 80100a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80100aa:	78fa      	ldrb	r2, [r7, #3]
 80100ac:	4611      	mov	r1, r2
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fe fd32 	bl	800eb18 <USBD_LL_IsoINIncomplete>
}
 80100b4:	bf00      	nop
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fe fd70 	bl	800ebb0 <USBD_LL_DevConnected>
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fe fd6d 	bl	800ebc6 <USBD_LL_DevDisconnected>
}
 80100ec:	bf00      	nop
 80100ee:	3708      	adds	r7, #8
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d139      	bne.n	8010178 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010104:	4a1f      	ldr	r2, [pc, #124]	; (8010184 <USBD_LL_Init+0x90>)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4a1d      	ldr	r2, [pc, #116]	; (8010184 <USBD_LL_Init+0x90>)
 8010110:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010114:	4b1b      	ldr	r3, [pc, #108]	; (8010184 <USBD_LL_Init+0x90>)
 8010116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801011a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801011c:	4b19      	ldr	r3, [pc, #100]	; (8010184 <USBD_LL_Init+0x90>)
 801011e:	2206      	movs	r2, #6
 8010120:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010122:	4b18      	ldr	r3, [pc, #96]	; (8010184 <USBD_LL_Init+0x90>)
 8010124:	2202      	movs	r2, #2
 8010126:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010128:	4b16      	ldr	r3, [pc, #88]	; (8010184 <USBD_LL_Init+0x90>)
 801012a:	2200      	movs	r2, #0
 801012c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801012e:	4b15      	ldr	r3, [pc, #84]	; (8010184 <USBD_LL_Init+0x90>)
 8010130:	2200      	movs	r2, #0
 8010132:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010134:	4b13      	ldr	r3, [pc, #76]	; (8010184 <USBD_LL_Init+0x90>)
 8010136:	2200      	movs	r2, #0
 8010138:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 801013a:	4b12      	ldr	r3, [pc, #72]	; (8010184 <USBD_LL_Init+0x90>)
 801013c:	2201      	movs	r2, #1
 801013e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010140:	4b10      	ldr	r3, [pc, #64]	; (8010184 <USBD_LL_Init+0x90>)
 8010142:	2200      	movs	r2, #0
 8010144:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010146:	4b0f      	ldr	r3, [pc, #60]	; (8010184 <USBD_LL_Init+0x90>)
 8010148:	2200      	movs	r2, #0
 801014a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801014c:	480d      	ldr	r0, [pc, #52]	; (8010184 <USBD_LL_Init+0x90>)
 801014e:	f7f4 fcd1 	bl	8004af4 <HAL_PCD_Init>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d001      	beq.n	801015c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8010158:	f7f2 f862 	bl	8002220 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801015c:	2180      	movs	r1, #128	; 0x80
 801015e:	4809      	ldr	r0, [pc, #36]	; (8010184 <USBD_LL_Init+0x90>)
 8010160:	f7f5 fe53 	bl	8005e0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010164:	2240      	movs	r2, #64	; 0x40
 8010166:	2100      	movs	r1, #0
 8010168:	4806      	ldr	r0, [pc, #24]	; (8010184 <USBD_LL_Init+0x90>)
 801016a:	f7f5 fe07 	bl	8005d7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801016e:	2280      	movs	r2, #128	; 0x80
 8010170:	2101      	movs	r1, #1
 8010172:	4804      	ldr	r0, [pc, #16]	; (8010184 <USBD_LL_Init+0x90>)
 8010174:	f7f5 fe02 	bl	8005d7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010178:	2300      	movs	r3, #0
}
 801017a:	4618      	mov	r0, r3
 801017c:	3708      	adds	r7, #8
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	20001dd0 	.word	0x20001dd0

08010188 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010190:	2300      	movs	r3, #0
 8010192:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010194:	2300      	movs	r3, #0
 8010196:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801019e:	4618      	mov	r0, r3
 80101a0:	f7f4 fdcc 	bl	8004d3c <HAL_PCD_Start>
 80101a4:	4603      	mov	r3, r0
 80101a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80101a8:	7bbb      	ldrb	r3, [r7, #14]
 80101aa:	2b03      	cmp	r3, #3
 80101ac:	d816      	bhi.n	80101dc <USBD_LL_Start+0x54>
 80101ae:	a201      	add	r2, pc, #4	; (adr r2, 80101b4 <USBD_LL_Start+0x2c>)
 80101b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b4:	080101c5 	.word	0x080101c5
 80101b8:	080101cb 	.word	0x080101cb
 80101bc:	080101d1 	.word	0x080101d1
 80101c0:	080101d7 	.word	0x080101d7
    case HAL_OK :
      usb_status = USBD_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	73fb      	strb	r3, [r7, #15]
    break;
 80101c8:	e00b      	b.n	80101e2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80101ca:	2303      	movs	r3, #3
 80101cc:	73fb      	strb	r3, [r7, #15]
    break;
 80101ce:	e008      	b.n	80101e2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80101d0:	2301      	movs	r3, #1
 80101d2:	73fb      	strb	r3, [r7, #15]
    break;
 80101d4:	e005      	b.n	80101e2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80101d6:	2303      	movs	r3, #3
 80101d8:	73fb      	strb	r3, [r7, #15]
    break;
 80101da:	e002      	b.n	80101e2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80101dc:	2303      	movs	r3, #3
 80101de:	73fb      	strb	r3, [r7, #15]
    break;
 80101e0:	bf00      	nop
  }
  return usb_status;
 80101e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	4608      	mov	r0, r1
 80101f6:	4611      	mov	r1, r2
 80101f8:	461a      	mov	r2, r3
 80101fa:	4603      	mov	r3, r0
 80101fc:	70fb      	strb	r3, [r7, #3]
 80101fe:	460b      	mov	r3, r1
 8010200:	70bb      	strb	r3, [r7, #2]
 8010202:	4613      	mov	r3, r2
 8010204:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010206:	2300      	movs	r3, #0
 8010208:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801020a:	2300      	movs	r3, #0
 801020c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010214:	78bb      	ldrb	r3, [r7, #2]
 8010216:	883a      	ldrh	r2, [r7, #0]
 8010218:	78f9      	ldrb	r1, [r7, #3]
 801021a:	f7f5 fa76 	bl	800570a <HAL_PCD_EP_Open>
 801021e:	4603      	mov	r3, r0
 8010220:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010222:	7bbb      	ldrb	r3, [r7, #14]
 8010224:	2b03      	cmp	r3, #3
 8010226:	d817      	bhi.n	8010258 <USBD_LL_OpenEP+0x6c>
 8010228:	a201      	add	r2, pc, #4	; (adr r2, 8010230 <USBD_LL_OpenEP+0x44>)
 801022a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022e:	bf00      	nop
 8010230:	08010241 	.word	0x08010241
 8010234:	08010247 	.word	0x08010247
 8010238:	0801024d 	.word	0x0801024d
 801023c:	08010253 	.word	0x08010253
    case HAL_OK :
      usb_status = USBD_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	73fb      	strb	r3, [r7, #15]
    break;
 8010244:	e00b      	b.n	801025e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010246:	2303      	movs	r3, #3
 8010248:	73fb      	strb	r3, [r7, #15]
    break;
 801024a:	e008      	b.n	801025e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801024c:	2301      	movs	r3, #1
 801024e:	73fb      	strb	r3, [r7, #15]
    break;
 8010250:	e005      	b.n	801025e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010252:	2303      	movs	r3, #3
 8010254:	73fb      	strb	r3, [r7, #15]
    break;
 8010256:	e002      	b.n	801025e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010258:	2303      	movs	r3, #3
 801025a:	73fb      	strb	r3, [r7, #15]
    break;
 801025c:	bf00      	nop
  }
  return usb_status;
 801025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	460b      	mov	r3, r1
 8010272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010274:	2300      	movs	r3, #0
 8010276:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010282:	78fa      	ldrb	r2, [r7, #3]
 8010284:	4611      	mov	r1, r2
 8010286:	4618      	mov	r0, r3
 8010288:	f7f5 faa7 	bl	80057da <HAL_PCD_EP_Close>
 801028c:	4603      	mov	r3, r0
 801028e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010290:	7bbb      	ldrb	r3, [r7, #14]
 8010292:	2b03      	cmp	r3, #3
 8010294:	d816      	bhi.n	80102c4 <USBD_LL_CloseEP+0x5c>
 8010296:	a201      	add	r2, pc, #4	; (adr r2, 801029c <USBD_LL_CloseEP+0x34>)
 8010298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029c:	080102ad 	.word	0x080102ad
 80102a0:	080102b3 	.word	0x080102b3
 80102a4:	080102b9 	.word	0x080102b9
 80102a8:	080102bf 	.word	0x080102bf
    case HAL_OK :
      usb_status = USBD_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	73fb      	strb	r3, [r7, #15]
    break;
 80102b0:	e00b      	b.n	80102ca <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102b2:	2303      	movs	r3, #3
 80102b4:	73fb      	strb	r3, [r7, #15]
    break;
 80102b6:	e008      	b.n	80102ca <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102b8:	2301      	movs	r3, #1
 80102ba:	73fb      	strb	r3, [r7, #15]
    break;
 80102bc:	e005      	b.n	80102ca <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102be:	2303      	movs	r3, #3
 80102c0:	73fb      	strb	r3, [r7, #15]
    break;
 80102c2:	e002      	b.n	80102ca <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80102c4:	2303      	movs	r3, #3
 80102c6:	73fb      	strb	r3, [r7, #15]
    break;
 80102c8:	bf00      	nop
  }
  return usb_status;
 80102ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3710      	adds	r7, #16
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	460b      	mov	r3, r1
 80102de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102e0:	2300      	movs	r3, #0
 80102e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102e4:	2300      	movs	r3, #0
 80102e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102ee:	78fa      	ldrb	r2, [r7, #3]
 80102f0:	4611      	mov	r1, r2
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7f5 fb4e 	bl	8005994 <HAL_PCD_EP_SetStall>
 80102f8:	4603      	mov	r3, r0
 80102fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80102fc:	7bbb      	ldrb	r3, [r7, #14]
 80102fe:	2b03      	cmp	r3, #3
 8010300:	d816      	bhi.n	8010330 <USBD_LL_StallEP+0x5c>
 8010302:	a201      	add	r2, pc, #4	; (adr r2, 8010308 <USBD_LL_StallEP+0x34>)
 8010304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010308:	08010319 	.word	0x08010319
 801030c:	0801031f 	.word	0x0801031f
 8010310:	08010325 	.word	0x08010325
 8010314:	0801032b 	.word	0x0801032b
    case HAL_OK :
      usb_status = USBD_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	73fb      	strb	r3, [r7, #15]
    break;
 801031c:	e00b      	b.n	8010336 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801031e:	2303      	movs	r3, #3
 8010320:	73fb      	strb	r3, [r7, #15]
    break;
 8010322:	e008      	b.n	8010336 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010324:	2301      	movs	r3, #1
 8010326:	73fb      	strb	r3, [r7, #15]
    break;
 8010328:	e005      	b.n	8010336 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801032a:	2303      	movs	r3, #3
 801032c:	73fb      	strb	r3, [r7, #15]
    break;
 801032e:	e002      	b.n	8010336 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010330:	2303      	movs	r3, #3
 8010332:	73fb      	strb	r3, [r7, #15]
    break;
 8010334:	bf00      	nop
  }
  return usb_status;
 8010336:	7bfb      	ldrb	r3, [r7, #15]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	460b      	mov	r3, r1
 801034a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010350:	2300      	movs	r3, #0
 8010352:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801035a:	78fa      	ldrb	r2, [r7, #3]
 801035c:	4611      	mov	r1, r2
 801035e:	4618      	mov	r0, r3
 8010360:	f7f5 fb7a 	bl	8005a58 <HAL_PCD_EP_ClrStall>
 8010364:	4603      	mov	r3, r0
 8010366:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010368:	7bbb      	ldrb	r3, [r7, #14]
 801036a:	2b03      	cmp	r3, #3
 801036c:	d816      	bhi.n	801039c <USBD_LL_ClearStallEP+0x5c>
 801036e:	a201      	add	r2, pc, #4	; (adr r2, 8010374 <USBD_LL_ClearStallEP+0x34>)
 8010370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010374:	08010385 	.word	0x08010385
 8010378:	0801038b 	.word	0x0801038b
 801037c:	08010391 	.word	0x08010391
 8010380:	08010397 	.word	0x08010397
    case HAL_OK :
      usb_status = USBD_OK;
 8010384:	2300      	movs	r3, #0
 8010386:	73fb      	strb	r3, [r7, #15]
    break;
 8010388:	e00b      	b.n	80103a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801038a:	2303      	movs	r3, #3
 801038c:	73fb      	strb	r3, [r7, #15]
    break;
 801038e:	e008      	b.n	80103a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010390:	2301      	movs	r3, #1
 8010392:	73fb      	strb	r3, [r7, #15]
    break;
 8010394:	e005      	b.n	80103a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010396:	2303      	movs	r3, #3
 8010398:	73fb      	strb	r3, [r7, #15]
    break;
 801039a:	e002      	b.n	80103a2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801039c:	2303      	movs	r3, #3
 801039e:	73fb      	strb	r3, [r7, #15]
    break;
 80103a0:	bf00      	nop
  }
  return usb_status;
 80103a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	460b      	mov	r3, r1
 80103b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80103be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80103c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	da0b      	bge.n	80103e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80103c8:	78fb      	ldrb	r3, [r7, #3]
 80103ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103ce:	68f9      	ldr	r1, [r7, #12]
 80103d0:	4613      	mov	r3, r2
 80103d2:	00db      	lsls	r3, r3, #3
 80103d4:	4413      	add	r3, r2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	440b      	add	r3, r1
 80103da:	333e      	adds	r3, #62	; 0x3e
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	e00b      	b.n	80103f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80103e0:	78fb      	ldrb	r3, [r7, #3]
 80103e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103e6:	68f9      	ldr	r1, [r7, #12]
 80103e8:	4613      	mov	r3, r2
 80103ea:	00db      	lsls	r3, r3, #3
 80103ec:	4413      	add	r3, r2
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	440b      	add	r3, r1
 80103f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80103f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3714      	adds	r7, #20
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010414:	2300      	movs	r3, #0
 8010416:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801041e:	78fa      	ldrb	r2, [r7, #3]
 8010420:	4611      	mov	r1, r2
 8010422:	4618      	mov	r0, r3
 8010424:	f7f5 f94c 	bl	80056c0 <HAL_PCD_SetAddress>
 8010428:	4603      	mov	r3, r0
 801042a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801042c:	7bbb      	ldrb	r3, [r7, #14]
 801042e:	2b03      	cmp	r3, #3
 8010430:	d816      	bhi.n	8010460 <USBD_LL_SetUSBAddress+0x5c>
 8010432:	a201      	add	r2, pc, #4	; (adr r2, 8010438 <USBD_LL_SetUSBAddress+0x34>)
 8010434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010438:	08010449 	.word	0x08010449
 801043c:	0801044f 	.word	0x0801044f
 8010440:	08010455 	.word	0x08010455
 8010444:	0801045b 	.word	0x0801045b
    case HAL_OK :
      usb_status = USBD_OK;
 8010448:	2300      	movs	r3, #0
 801044a:	73fb      	strb	r3, [r7, #15]
    break;
 801044c:	e00b      	b.n	8010466 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801044e:	2303      	movs	r3, #3
 8010450:	73fb      	strb	r3, [r7, #15]
    break;
 8010452:	e008      	b.n	8010466 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010454:	2301      	movs	r3, #1
 8010456:	73fb      	strb	r3, [r7, #15]
    break;
 8010458:	e005      	b.n	8010466 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801045a:	2303      	movs	r3, #3
 801045c:	73fb      	strb	r3, [r7, #15]
    break;
 801045e:	e002      	b.n	8010466 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010460:	2303      	movs	r3, #3
 8010462:	73fb      	strb	r3, [r7, #15]
    break;
 8010464:	bf00      	nop
  }
  return usb_status;
 8010466:	7bfb      	ldrb	r3, [r7, #15]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3710      	adds	r7, #16
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	607a      	str	r2, [r7, #4]
 801047a:	603b      	str	r3, [r7, #0]
 801047c:	460b      	mov	r3, r1
 801047e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010480:	2300      	movs	r3, #0
 8010482:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010484:	2300      	movs	r3, #0
 8010486:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801048e:	7af9      	ldrb	r1, [r7, #11]
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	f7f5 fa41 	bl	800591a <HAL_PCD_EP_Transmit>
 8010498:	4603      	mov	r3, r0
 801049a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801049c:	7dbb      	ldrb	r3, [r7, #22]
 801049e:	2b03      	cmp	r3, #3
 80104a0:	d816      	bhi.n	80104d0 <USBD_LL_Transmit+0x60>
 80104a2:	a201      	add	r2, pc, #4	; (adr r2, 80104a8 <USBD_LL_Transmit+0x38>)
 80104a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a8:	080104b9 	.word	0x080104b9
 80104ac:	080104bf 	.word	0x080104bf
 80104b0:	080104c5 	.word	0x080104c5
 80104b4:	080104cb 	.word	0x080104cb
    case HAL_OK :
      usb_status = USBD_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	75fb      	strb	r3, [r7, #23]
    break;
 80104bc:	e00b      	b.n	80104d6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80104be:	2303      	movs	r3, #3
 80104c0:	75fb      	strb	r3, [r7, #23]
    break;
 80104c2:	e008      	b.n	80104d6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80104c4:	2301      	movs	r3, #1
 80104c6:	75fb      	strb	r3, [r7, #23]
    break;
 80104c8:	e005      	b.n	80104d6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80104ca:	2303      	movs	r3, #3
 80104cc:	75fb      	strb	r3, [r7, #23]
    break;
 80104ce:	e002      	b.n	80104d6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80104d0:	2303      	movs	r3, #3
 80104d2:	75fb      	strb	r3, [r7, #23]
    break;
 80104d4:	bf00      	nop
  }
  return usb_status;
 80104d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3718      	adds	r7, #24
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b086      	sub	sp, #24
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	607a      	str	r2, [r7, #4]
 80104ea:	603b      	str	r3, [r7, #0]
 80104ec:	460b      	mov	r3, r1
 80104ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104f4:	2300      	movs	r3, #0
 80104f6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80104fe:	7af9      	ldrb	r1, [r7, #11]
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	f7f5 f9b3 	bl	800586e <HAL_PCD_EP_Receive>
 8010508:	4603      	mov	r3, r0
 801050a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801050c:	7dbb      	ldrb	r3, [r7, #22]
 801050e:	2b03      	cmp	r3, #3
 8010510:	d816      	bhi.n	8010540 <USBD_LL_PrepareReceive+0x60>
 8010512:	a201      	add	r2, pc, #4	; (adr r2, 8010518 <USBD_LL_PrepareReceive+0x38>)
 8010514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010518:	08010529 	.word	0x08010529
 801051c:	0801052f 	.word	0x0801052f
 8010520:	08010535 	.word	0x08010535
 8010524:	0801053b 	.word	0x0801053b
    case HAL_OK :
      usb_status = USBD_OK;
 8010528:	2300      	movs	r3, #0
 801052a:	75fb      	strb	r3, [r7, #23]
    break;
 801052c:	e00b      	b.n	8010546 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801052e:	2303      	movs	r3, #3
 8010530:	75fb      	strb	r3, [r7, #23]
    break;
 8010532:	e008      	b.n	8010546 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010534:	2301      	movs	r3, #1
 8010536:	75fb      	strb	r3, [r7, #23]
    break;
 8010538:	e005      	b.n	8010546 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801053a:	2303      	movs	r3, #3
 801053c:	75fb      	strb	r3, [r7, #23]
    break;
 801053e:	e002      	b.n	8010546 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010540:	2303      	movs	r3, #3
 8010542:	75fb      	strb	r3, [r7, #23]
    break;
 8010544:	bf00      	nop
  }
  return usb_status;
 8010546:	7dfb      	ldrb	r3, [r7, #23]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	460b      	mov	r3, r1
 801055a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010562:	78fa      	ldrb	r2, [r7, #3]
 8010564:	4611      	mov	r1, r2
 8010566:	4618      	mov	r0, r3
 8010568:	f7f5 f9bf 	bl	80058ea <HAL_PCD_EP_GetRxCount>
 801056c:	4603      	mov	r3, r0
}
 801056e:	4618      	mov	r0, r3
 8010570:	3708      	adds	r7, #8
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
	...

08010578 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	460b      	mov	r3, r1
 8010582:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010584:	78fb      	ldrb	r3, [r7, #3]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <HAL_PCDEx_LPM_Callback+0x18>
 801058a:	2b01      	cmp	r3, #1
 801058c:	d01f      	beq.n	80105ce <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801058e:	e03b      	b.n	8010608 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a1b      	ldr	r3, [r3, #32]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d007      	beq.n	80105a8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010598:	f000 f854 	bl	8010644 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801059c:	4b1c      	ldr	r3, [pc, #112]	; (8010610 <HAL_PCDEx_LPM_Callback+0x98>)
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	4a1b      	ldr	r2, [pc, #108]	; (8010610 <HAL_PCDEx_LPM_Callback+0x98>)
 80105a2:	f023 0306 	bic.w	r3, r3, #6
 80105a6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	6812      	ldr	r2, [r2, #0]
 80105b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80105ba:	f023 0301 	bic.w	r3, r3, #1
 80105be:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fe fa6c 	bl	800eaa4 <USBD_LL_Resume>
    break;
 80105cc:	e01c      	b.n	8010608 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	6812      	ldr	r2, [r2, #0]
 80105dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80105e0:	f043 0301 	orr.w	r3, r3, #1
 80105e4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe fa43 	bl	800ea78 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a1b      	ldr	r3, [r3, #32]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d005      	beq.n	8010606 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105fa:	4b05      	ldr	r3, [pc, #20]	; (8010610 <HAL_PCDEx_LPM_Callback+0x98>)
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	4a04      	ldr	r2, [pc, #16]	; (8010610 <HAL_PCDEx_LPM_Callback+0x98>)
 8010600:	f043 0306 	orr.w	r3, r3, #6
 8010604:	6113      	str	r3, [r2, #16]
    break;
 8010606:	bf00      	nop
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	e000ed00 	.word	0xe000ed00

08010614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801061c:	4b03      	ldr	r3, [pc, #12]	; (801062c <USBD_static_malloc+0x18>)
}
 801061e:	4618      	mov	r0, r3
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr
 801062a:	bf00      	nop
 801062c:	200022dc 	.word	0x200022dc

08010630 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]

}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010648:	f7f1 f8b8 	bl	80017bc <SystemClock_Config>
}
 801064c:	bf00      	nop
 801064e:	bd80      	pop	{r7, pc}

08010650 <__errno>:
 8010650:	4b01      	ldr	r3, [pc, #4]	; (8010658 <__errno+0x8>)
 8010652:	6818      	ldr	r0, [r3, #0]
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	200001b0 	.word	0x200001b0

0801065c <__libc_init_array>:
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	4d0d      	ldr	r5, [pc, #52]	; (8010694 <__libc_init_array+0x38>)
 8010660:	4c0d      	ldr	r4, [pc, #52]	; (8010698 <__libc_init_array+0x3c>)
 8010662:	1b64      	subs	r4, r4, r5
 8010664:	10a4      	asrs	r4, r4, #2
 8010666:	2600      	movs	r6, #0
 8010668:	42a6      	cmp	r6, r4
 801066a:	d109      	bne.n	8010680 <__libc_init_array+0x24>
 801066c:	4d0b      	ldr	r5, [pc, #44]	; (801069c <__libc_init_array+0x40>)
 801066e:	4c0c      	ldr	r4, [pc, #48]	; (80106a0 <__libc_init_array+0x44>)
 8010670:	f001 f94c 	bl	801190c <_init>
 8010674:	1b64      	subs	r4, r4, r5
 8010676:	10a4      	asrs	r4, r4, #2
 8010678:	2600      	movs	r6, #0
 801067a:	42a6      	cmp	r6, r4
 801067c:	d105      	bne.n	801068a <__libc_init_array+0x2e>
 801067e:	bd70      	pop	{r4, r5, r6, pc}
 8010680:	f855 3b04 	ldr.w	r3, [r5], #4
 8010684:	4798      	blx	r3
 8010686:	3601      	adds	r6, #1
 8010688:	e7ee      	b.n	8010668 <__libc_init_array+0xc>
 801068a:	f855 3b04 	ldr.w	r3, [r5], #4
 801068e:	4798      	blx	r3
 8010690:	3601      	adds	r6, #1
 8010692:	e7f2      	b.n	801067a <__libc_init_array+0x1e>
 8010694:	08011bec 	.word	0x08011bec
 8010698:	08011bec 	.word	0x08011bec
 801069c:	08011bec 	.word	0x08011bec
 80106a0:	08011bf0 	.word	0x08011bf0

080106a4 <memset>:
 80106a4:	4402      	add	r2, r0
 80106a6:	4603      	mov	r3, r0
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d100      	bne.n	80106ae <memset+0xa>
 80106ac:	4770      	bx	lr
 80106ae:	f803 1b01 	strb.w	r1, [r3], #1
 80106b2:	e7f9      	b.n	80106a8 <memset+0x4>

080106b4 <_free_r>:
 80106b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106b6:	2900      	cmp	r1, #0
 80106b8:	d044      	beq.n	8010744 <_free_r+0x90>
 80106ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106be:	9001      	str	r0, [sp, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f1a1 0404 	sub.w	r4, r1, #4
 80106c6:	bfb8      	it	lt
 80106c8:	18e4      	addlt	r4, r4, r3
 80106ca:	f000 f917 	bl	80108fc <__malloc_lock>
 80106ce:	4a1e      	ldr	r2, [pc, #120]	; (8010748 <_free_r+0x94>)
 80106d0:	9801      	ldr	r0, [sp, #4]
 80106d2:	6813      	ldr	r3, [r2, #0]
 80106d4:	b933      	cbnz	r3, 80106e4 <_free_r+0x30>
 80106d6:	6063      	str	r3, [r4, #4]
 80106d8:	6014      	str	r4, [r2, #0]
 80106da:	b003      	add	sp, #12
 80106dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106e0:	f000 b912 	b.w	8010908 <__malloc_unlock>
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	d908      	bls.n	80106fa <_free_r+0x46>
 80106e8:	6825      	ldr	r5, [r4, #0]
 80106ea:	1961      	adds	r1, r4, r5
 80106ec:	428b      	cmp	r3, r1
 80106ee:	bf01      	itttt	eq
 80106f0:	6819      	ldreq	r1, [r3, #0]
 80106f2:	685b      	ldreq	r3, [r3, #4]
 80106f4:	1949      	addeq	r1, r1, r5
 80106f6:	6021      	streq	r1, [r4, #0]
 80106f8:	e7ed      	b.n	80106d6 <_free_r+0x22>
 80106fa:	461a      	mov	r2, r3
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	b10b      	cbz	r3, 8010704 <_free_r+0x50>
 8010700:	42a3      	cmp	r3, r4
 8010702:	d9fa      	bls.n	80106fa <_free_r+0x46>
 8010704:	6811      	ldr	r1, [r2, #0]
 8010706:	1855      	adds	r5, r2, r1
 8010708:	42a5      	cmp	r5, r4
 801070a:	d10b      	bne.n	8010724 <_free_r+0x70>
 801070c:	6824      	ldr	r4, [r4, #0]
 801070e:	4421      	add	r1, r4
 8010710:	1854      	adds	r4, r2, r1
 8010712:	42a3      	cmp	r3, r4
 8010714:	6011      	str	r1, [r2, #0]
 8010716:	d1e0      	bne.n	80106da <_free_r+0x26>
 8010718:	681c      	ldr	r4, [r3, #0]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	6053      	str	r3, [r2, #4]
 801071e:	4421      	add	r1, r4
 8010720:	6011      	str	r1, [r2, #0]
 8010722:	e7da      	b.n	80106da <_free_r+0x26>
 8010724:	d902      	bls.n	801072c <_free_r+0x78>
 8010726:	230c      	movs	r3, #12
 8010728:	6003      	str	r3, [r0, #0]
 801072a:	e7d6      	b.n	80106da <_free_r+0x26>
 801072c:	6825      	ldr	r5, [r4, #0]
 801072e:	1961      	adds	r1, r4, r5
 8010730:	428b      	cmp	r3, r1
 8010732:	bf04      	itt	eq
 8010734:	6819      	ldreq	r1, [r3, #0]
 8010736:	685b      	ldreq	r3, [r3, #4]
 8010738:	6063      	str	r3, [r4, #4]
 801073a:	bf04      	itt	eq
 801073c:	1949      	addeq	r1, r1, r5
 801073e:	6021      	streq	r1, [r4, #0]
 8010740:	6054      	str	r4, [r2, #4]
 8010742:	e7ca      	b.n	80106da <_free_r+0x26>
 8010744:	b003      	add	sp, #12
 8010746:	bd30      	pop	{r4, r5, pc}
 8010748:	200024fc 	.word	0x200024fc

0801074c <sbrk_aligned>:
 801074c:	b570      	push	{r4, r5, r6, lr}
 801074e:	4e0e      	ldr	r6, [pc, #56]	; (8010788 <sbrk_aligned+0x3c>)
 8010750:	460c      	mov	r4, r1
 8010752:	6831      	ldr	r1, [r6, #0]
 8010754:	4605      	mov	r5, r0
 8010756:	b911      	cbnz	r1, 801075e <sbrk_aligned+0x12>
 8010758:	f000 f88c 	bl	8010874 <_sbrk_r>
 801075c:	6030      	str	r0, [r6, #0]
 801075e:	4621      	mov	r1, r4
 8010760:	4628      	mov	r0, r5
 8010762:	f000 f887 	bl	8010874 <_sbrk_r>
 8010766:	1c43      	adds	r3, r0, #1
 8010768:	d00a      	beq.n	8010780 <sbrk_aligned+0x34>
 801076a:	1cc4      	adds	r4, r0, #3
 801076c:	f024 0403 	bic.w	r4, r4, #3
 8010770:	42a0      	cmp	r0, r4
 8010772:	d007      	beq.n	8010784 <sbrk_aligned+0x38>
 8010774:	1a21      	subs	r1, r4, r0
 8010776:	4628      	mov	r0, r5
 8010778:	f000 f87c 	bl	8010874 <_sbrk_r>
 801077c:	3001      	adds	r0, #1
 801077e:	d101      	bne.n	8010784 <sbrk_aligned+0x38>
 8010780:	f04f 34ff 	mov.w	r4, #4294967295
 8010784:	4620      	mov	r0, r4
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	20002500 	.word	0x20002500

0801078c <_malloc_r>:
 801078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010790:	1ccd      	adds	r5, r1, #3
 8010792:	f025 0503 	bic.w	r5, r5, #3
 8010796:	3508      	adds	r5, #8
 8010798:	2d0c      	cmp	r5, #12
 801079a:	bf38      	it	cc
 801079c:	250c      	movcc	r5, #12
 801079e:	2d00      	cmp	r5, #0
 80107a0:	4607      	mov	r7, r0
 80107a2:	db01      	blt.n	80107a8 <_malloc_r+0x1c>
 80107a4:	42a9      	cmp	r1, r5
 80107a6:	d905      	bls.n	80107b4 <_malloc_r+0x28>
 80107a8:	230c      	movs	r3, #12
 80107aa:	603b      	str	r3, [r7, #0]
 80107ac:	2600      	movs	r6, #0
 80107ae:	4630      	mov	r0, r6
 80107b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b4:	4e2e      	ldr	r6, [pc, #184]	; (8010870 <_malloc_r+0xe4>)
 80107b6:	f000 f8a1 	bl	80108fc <__malloc_lock>
 80107ba:	6833      	ldr	r3, [r6, #0]
 80107bc:	461c      	mov	r4, r3
 80107be:	bb34      	cbnz	r4, 801080e <_malloc_r+0x82>
 80107c0:	4629      	mov	r1, r5
 80107c2:	4638      	mov	r0, r7
 80107c4:	f7ff ffc2 	bl	801074c <sbrk_aligned>
 80107c8:	1c43      	adds	r3, r0, #1
 80107ca:	4604      	mov	r4, r0
 80107cc:	d14d      	bne.n	801086a <_malloc_r+0xde>
 80107ce:	6834      	ldr	r4, [r6, #0]
 80107d0:	4626      	mov	r6, r4
 80107d2:	2e00      	cmp	r6, #0
 80107d4:	d140      	bne.n	8010858 <_malloc_r+0xcc>
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	4631      	mov	r1, r6
 80107da:	4638      	mov	r0, r7
 80107dc:	eb04 0803 	add.w	r8, r4, r3
 80107e0:	f000 f848 	bl	8010874 <_sbrk_r>
 80107e4:	4580      	cmp	r8, r0
 80107e6:	d13a      	bne.n	801085e <_malloc_r+0xd2>
 80107e8:	6821      	ldr	r1, [r4, #0]
 80107ea:	3503      	adds	r5, #3
 80107ec:	1a6d      	subs	r5, r5, r1
 80107ee:	f025 0503 	bic.w	r5, r5, #3
 80107f2:	3508      	adds	r5, #8
 80107f4:	2d0c      	cmp	r5, #12
 80107f6:	bf38      	it	cc
 80107f8:	250c      	movcc	r5, #12
 80107fa:	4629      	mov	r1, r5
 80107fc:	4638      	mov	r0, r7
 80107fe:	f7ff ffa5 	bl	801074c <sbrk_aligned>
 8010802:	3001      	adds	r0, #1
 8010804:	d02b      	beq.n	801085e <_malloc_r+0xd2>
 8010806:	6823      	ldr	r3, [r4, #0]
 8010808:	442b      	add	r3, r5
 801080a:	6023      	str	r3, [r4, #0]
 801080c:	e00e      	b.n	801082c <_malloc_r+0xa0>
 801080e:	6822      	ldr	r2, [r4, #0]
 8010810:	1b52      	subs	r2, r2, r5
 8010812:	d41e      	bmi.n	8010852 <_malloc_r+0xc6>
 8010814:	2a0b      	cmp	r2, #11
 8010816:	d916      	bls.n	8010846 <_malloc_r+0xba>
 8010818:	1961      	adds	r1, r4, r5
 801081a:	42a3      	cmp	r3, r4
 801081c:	6025      	str	r5, [r4, #0]
 801081e:	bf18      	it	ne
 8010820:	6059      	strne	r1, [r3, #4]
 8010822:	6863      	ldr	r3, [r4, #4]
 8010824:	bf08      	it	eq
 8010826:	6031      	streq	r1, [r6, #0]
 8010828:	5162      	str	r2, [r4, r5]
 801082a:	604b      	str	r3, [r1, #4]
 801082c:	4638      	mov	r0, r7
 801082e:	f104 060b 	add.w	r6, r4, #11
 8010832:	f000 f869 	bl	8010908 <__malloc_unlock>
 8010836:	f026 0607 	bic.w	r6, r6, #7
 801083a:	1d23      	adds	r3, r4, #4
 801083c:	1af2      	subs	r2, r6, r3
 801083e:	d0b6      	beq.n	80107ae <_malloc_r+0x22>
 8010840:	1b9b      	subs	r3, r3, r6
 8010842:	50a3      	str	r3, [r4, r2]
 8010844:	e7b3      	b.n	80107ae <_malloc_r+0x22>
 8010846:	6862      	ldr	r2, [r4, #4]
 8010848:	42a3      	cmp	r3, r4
 801084a:	bf0c      	ite	eq
 801084c:	6032      	streq	r2, [r6, #0]
 801084e:	605a      	strne	r2, [r3, #4]
 8010850:	e7ec      	b.n	801082c <_malloc_r+0xa0>
 8010852:	4623      	mov	r3, r4
 8010854:	6864      	ldr	r4, [r4, #4]
 8010856:	e7b2      	b.n	80107be <_malloc_r+0x32>
 8010858:	4634      	mov	r4, r6
 801085a:	6876      	ldr	r6, [r6, #4]
 801085c:	e7b9      	b.n	80107d2 <_malloc_r+0x46>
 801085e:	230c      	movs	r3, #12
 8010860:	603b      	str	r3, [r7, #0]
 8010862:	4638      	mov	r0, r7
 8010864:	f000 f850 	bl	8010908 <__malloc_unlock>
 8010868:	e7a1      	b.n	80107ae <_malloc_r+0x22>
 801086a:	6025      	str	r5, [r4, #0]
 801086c:	e7de      	b.n	801082c <_malloc_r+0xa0>
 801086e:	bf00      	nop
 8010870:	200024fc 	.word	0x200024fc

08010874 <_sbrk_r>:
 8010874:	b538      	push	{r3, r4, r5, lr}
 8010876:	4d06      	ldr	r5, [pc, #24]	; (8010890 <_sbrk_r+0x1c>)
 8010878:	2300      	movs	r3, #0
 801087a:	4604      	mov	r4, r0
 801087c:	4608      	mov	r0, r1
 801087e:	602b      	str	r3, [r5, #0]
 8010880:	f7f2 f966 	bl	8002b50 <_sbrk>
 8010884:	1c43      	adds	r3, r0, #1
 8010886:	d102      	bne.n	801088e <_sbrk_r+0x1a>
 8010888:	682b      	ldr	r3, [r5, #0]
 801088a:	b103      	cbz	r3, 801088e <_sbrk_r+0x1a>
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	bd38      	pop	{r3, r4, r5, pc}
 8010890:	20002504 	.word	0x20002504

08010894 <sniprintf>:
 8010894:	b40c      	push	{r2, r3}
 8010896:	b530      	push	{r4, r5, lr}
 8010898:	4b17      	ldr	r3, [pc, #92]	; (80108f8 <sniprintf+0x64>)
 801089a:	1e0c      	subs	r4, r1, #0
 801089c:	681d      	ldr	r5, [r3, #0]
 801089e:	b09d      	sub	sp, #116	; 0x74
 80108a0:	da08      	bge.n	80108b4 <sniprintf+0x20>
 80108a2:	238b      	movs	r3, #139	; 0x8b
 80108a4:	602b      	str	r3, [r5, #0]
 80108a6:	f04f 30ff 	mov.w	r0, #4294967295
 80108aa:	b01d      	add	sp, #116	; 0x74
 80108ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108b0:	b002      	add	sp, #8
 80108b2:	4770      	bx	lr
 80108b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80108b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80108bc:	bf14      	ite	ne
 80108be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80108c2:	4623      	moveq	r3, r4
 80108c4:	9304      	str	r3, [sp, #16]
 80108c6:	9307      	str	r3, [sp, #28]
 80108c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108cc:	9002      	str	r0, [sp, #8]
 80108ce:	9006      	str	r0, [sp, #24]
 80108d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80108d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80108d6:	ab21      	add	r3, sp, #132	; 0x84
 80108d8:	a902      	add	r1, sp, #8
 80108da:	4628      	mov	r0, r5
 80108dc:	9301      	str	r3, [sp, #4]
 80108de:	f000 f875 	bl	80109cc <_svfiprintf_r>
 80108e2:	1c43      	adds	r3, r0, #1
 80108e4:	bfbc      	itt	lt
 80108e6:	238b      	movlt	r3, #139	; 0x8b
 80108e8:	602b      	strlt	r3, [r5, #0]
 80108ea:	2c00      	cmp	r4, #0
 80108ec:	d0dd      	beq.n	80108aa <sniprintf+0x16>
 80108ee:	9b02      	ldr	r3, [sp, #8]
 80108f0:	2200      	movs	r2, #0
 80108f2:	701a      	strb	r2, [r3, #0]
 80108f4:	e7d9      	b.n	80108aa <sniprintf+0x16>
 80108f6:	bf00      	nop
 80108f8:	200001b0 	.word	0x200001b0

080108fc <__malloc_lock>:
 80108fc:	4801      	ldr	r0, [pc, #4]	; (8010904 <__malloc_lock+0x8>)
 80108fe:	f000 baf9 	b.w	8010ef4 <__retarget_lock_acquire_recursive>
 8010902:	bf00      	nop
 8010904:	20002508 	.word	0x20002508

08010908 <__malloc_unlock>:
 8010908:	4801      	ldr	r0, [pc, #4]	; (8010910 <__malloc_unlock+0x8>)
 801090a:	f000 baf4 	b.w	8010ef6 <__retarget_lock_release_recursive>
 801090e:	bf00      	nop
 8010910:	20002508 	.word	0x20002508

08010914 <__ssputs_r>:
 8010914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010918:	688e      	ldr	r6, [r1, #8]
 801091a:	429e      	cmp	r6, r3
 801091c:	4682      	mov	sl, r0
 801091e:	460c      	mov	r4, r1
 8010920:	4690      	mov	r8, r2
 8010922:	461f      	mov	r7, r3
 8010924:	d838      	bhi.n	8010998 <__ssputs_r+0x84>
 8010926:	898a      	ldrh	r2, [r1, #12]
 8010928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801092c:	d032      	beq.n	8010994 <__ssputs_r+0x80>
 801092e:	6825      	ldr	r5, [r4, #0]
 8010930:	6909      	ldr	r1, [r1, #16]
 8010932:	eba5 0901 	sub.w	r9, r5, r1
 8010936:	6965      	ldr	r5, [r4, #20]
 8010938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801093c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010940:	3301      	adds	r3, #1
 8010942:	444b      	add	r3, r9
 8010944:	106d      	asrs	r5, r5, #1
 8010946:	429d      	cmp	r5, r3
 8010948:	bf38      	it	cc
 801094a:	461d      	movcc	r5, r3
 801094c:	0553      	lsls	r3, r2, #21
 801094e:	d531      	bpl.n	80109b4 <__ssputs_r+0xa0>
 8010950:	4629      	mov	r1, r5
 8010952:	f7ff ff1b 	bl	801078c <_malloc_r>
 8010956:	4606      	mov	r6, r0
 8010958:	b950      	cbnz	r0, 8010970 <__ssputs_r+0x5c>
 801095a:	230c      	movs	r3, #12
 801095c:	f8ca 3000 	str.w	r3, [sl]
 8010960:	89a3      	ldrh	r3, [r4, #12]
 8010962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010966:	81a3      	strh	r3, [r4, #12]
 8010968:	f04f 30ff 	mov.w	r0, #4294967295
 801096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010970:	6921      	ldr	r1, [r4, #16]
 8010972:	464a      	mov	r2, r9
 8010974:	f000 fac0 	bl	8010ef8 <memcpy>
 8010978:	89a3      	ldrh	r3, [r4, #12]
 801097a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801097e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010982:	81a3      	strh	r3, [r4, #12]
 8010984:	6126      	str	r6, [r4, #16]
 8010986:	6165      	str	r5, [r4, #20]
 8010988:	444e      	add	r6, r9
 801098a:	eba5 0509 	sub.w	r5, r5, r9
 801098e:	6026      	str	r6, [r4, #0]
 8010990:	60a5      	str	r5, [r4, #8]
 8010992:	463e      	mov	r6, r7
 8010994:	42be      	cmp	r6, r7
 8010996:	d900      	bls.n	801099a <__ssputs_r+0x86>
 8010998:	463e      	mov	r6, r7
 801099a:	6820      	ldr	r0, [r4, #0]
 801099c:	4632      	mov	r2, r6
 801099e:	4641      	mov	r1, r8
 80109a0:	f000 fab8 	bl	8010f14 <memmove>
 80109a4:	68a3      	ldr	r3, [r4, #8]
 80109a6:	1b9b      	subs	r3, r3, r6
 80109a8:	60a3      	str	r3, [r4, #8]
 80109aa:	6823      	ldr	r3, [r4, #0]
 80109ac:	4433      	add	r3, r6
 80109ae:	6023      	str	r3, [r4, #0]
 80109b0:	2000      	movs	r0, #0
 80109b2:	e7db      	b.n	801096c <__ssputs_r+0x58>
 80109b4:	462a      	mov	r2, r5
 80109b6:	f000 fac7 	bl	8010f48 <_realloc_r>
 80109ba:	4606      	mov	r6, r0
 80109bc:	2800      	cmp	r0, #0
 80109be:	d1e1      	bne.n	8010984 <__ssputs_r+0x70>
 80109c0:	6921      	ldr	r1, [r4, #16]
 80109c2:	4650      	mov	r0, sl
 80109c4:	f7ff fe76 	bl	80106b4 <_free_r>
 80109c8:	e7c7      	b.n	801095a <__ssputs_r+0x46>
	...

080109cc <_svfiprintf_r>:
 80109cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d0:	4698      	mov	r8, r3
 80109d2:	898b      	ldrh	r3, [r1, #12]
 80109d4:	061b      	lsls	r3, r3, #24
 80109d6:	b09d      	sub	sp, #116	; 0x74
 80109d8:	4607      	mov	r7, r0
 80109da:	460d      	mov	r5, r1
 80109dc:	4614      	mov	r4, r2
 80109de:	d50e      	bpl.n	80109fe <_svfiprintf_r+0x32>
 80109e0:	690b      	ldr	r3, [r1, #16]
 80109e2:	b963      	cbnz	r3, 80109fe <_svfiprintf_r+0x32>
 80109e4:	2140      	movs	r1, #64	; 0x40
 80109e6:	f7ff fed1 	bl	801078c <_malloc_r>
 80109ea:	6028      	str	r0, [r5, #0]
 80109ec:	6128      	str	r0, [r5, #16]
 80109ee:	b920      	cbnz	r0, 80109fa <_svfiprintf_r+0x2e>
 80109f0:	230c      	movs	r3, #12
 80109f2:	603b      	str	r3, [r7, #0]
 80109f4:	f04f 30ff 	mov.w	r0, #4294967295
 80109f8:	e0d1      	b.n	8010b9e <_svfiprintf_r+0x1d2>
 80109fa:	2340      	movs	r3, #64	; 0x40
 80109fc:	616b      	str	r3, [r5, #20]
 80109fe:	2300      	movs	r3, #0
 8010a00:	9309      	str	r3, [sp, #36]	; 0x24
 8010a02:	2320      	movs	r3, #32
 8010a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a0c:	2330      	movs	r3, #48	; 0x30
 8010a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010bb8 <_svfiprintf_r+0x1ec>
 8010a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a16:	f04f 0901 	mov.w	r9, #1
 8010a1a:	4623      	mov	r3, r4
 8010a1c:	469a      	mov	sl, r3
 8010a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a22:	b10a      	cbz	r2, 8010a28 <_svfiprintf_r+0x5c>
 8010a24:	2a25      	cmp	r2, #37	; 0x25
 8010a26:	d1f9      	bne.n	8010a1c <_svfiprintf_r+0x50>
 8010a28:	ebba 0b04 	subs.w	fp, sl, r4
 8010a2c:	d00b      	beq.n	8010a46 <_svfiprintf_r+0x7a>
 8010a2e:	465b      	mov	r3, fp
 8010a30:	4622      	mov	r2, r4
 8010a32:	4629      	mov	r1, r5
 8010a34:	4638      	mov	r0, r7
 8010a36:	f7ff ff6d 	bl	8010914 <__ssputs_r>
 8010a3a:	3001      	adds	r0, #1
 8010a3c:	f000 80aa 	beq.w	8010b94 <_svfiprintf_r+0x1c8>
 8010a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a42:	445a      	add	r2, fp
 8010a44:	9209      	str	r2, [sp, #36]	; 0x24
 8010a46:	f89a 3000 	ldrb.w	r3, [sl]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f000 80a2 	beq.w	8010b94 <_svfiprintf_r+0x1c8>
 8010a50:	2300      	movs	r3, #0
 8010a52:	f04f 32ff 	mov.w	r2, #4294967295
 8010a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a5a:	f10a 0a01 	add.w	sl, sl, #1
 8010a5e:	9304      	str	r3, [sp, #16]
 8010a60:	9307      	str	r3, [sp, #28]
 8010a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a66:	931a      	str	r3, [sp, #104]	; 0x68
 8010a68:	4654      	mov	r4, sl
 8010a6a:	2205      	movs	r2, #5
 8010a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a70:	4851      	ldr	r0, [pc, #324]	; (8010bb8 <_svfiprintf_r+0x1ec>)
 8010a72:	f7ef fbcd 	bl	8000210 <memchr>
 8010a76:	9a04      	ldr	r2, [sp, #16]
 8010a78:	b9d8      	cbnz	r0, 8010ab2 <_svfiprintf_r+0xe6>
 8010a7a:	06d0      	lsls	r0, r2, #27
 8010a7c:	bf44      	itt	mi
 8010a7e:	2320      	movmi	r3, #32
 8010a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a84:	0711      	lsls	r1, r2, #28
 8010a86:	bf44      	itt	mi
 8010a88:	232b      	movmi	r3, #43	; 0x2b
 8010a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010a92:	2b2a      	cmp	r3, #42	; 0x2a
 8010a94:	d015      	beq.n	8010ac2 <_svfiprintf_r+0xf6>
 8010a96:	9a07      	ldr	r2, [sp, #28]
 8010a98:	4654      	mov	r4, sl
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	f04f 0c0a 	mov.w	ip, #10
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010aa6:	3b30      	subs	r3, #48	; 0x30
 8010aa8:	2b09      	cmp	r3, #9
 8010aaa:	d94e      	bls.n	8010b4a <_svfiprintf_r+0x17e>
 8010aac:	b1b0      	cbz	r0, 8010adc <_svfiprintf_r+0x110>
 8010aae:	9207      	str	r2, [sp, #28]
 8010ab0:	e014      	b.n	8010adc <_svfiprintf_r+0x110>
 8010ab2:	eba0 0308 	sub.w	r3, r0, r8
 8010ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8010aba:	4313      	orrs	r3, r2
 8010abc:	9304      	str	r3, [sp, #16]
 8010abe:	46a2      	mov	sl, r4
 8010ac0:	e7d2      	b.n	8010a68 <_svfiprintf_r+0x9c>
 8010ac2:	9b03      	ldr	r3, [sp, #12]
 8010ac4:	1d19      	adds	r1, r3, #4
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	9103      	str	r1, [sp, #12]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	bfbb      	ittet	lt
 8010ace:	425b      	neglt	r3, r3
 8010ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8010ad4:	9307      	strge	r3, [sp, #28]
 8010ad6:	9307      	strlt	r3, [sp, #28]
 8010ad8:	bfb8      	it	lt
 8010ada:	9204      	strlt	r2, [sp, #16]
 8010adc:	7823      	ldrb	r3, [r4, #0]
 8010ade:	2b2e      	cmp	r3, #46	; 0x2e
 8010ae0:	d10c      	bne.n	8010afc <_svfiprintf_r+0x130>
 8010ae2:	7863      	ldrb	r3, [r4, #1]
 8010ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ae6:	d135      	bne.n	8010b54 <_svfiprintf_r+0x188>
 8010ae8:	9b03      	ldr	r3, [sp, #12]
 8010aea:	1d1a      	adds	r2, r3, #4
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	9203      	str	r2, [sp, #12]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	bfb8      	it	lt
 8010af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010af8:	3402      	adds	r4, #2
 8010afa:	9305      	str	r3, [sp, #20]
 8010afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010bc8 <_svfiprintf_r+0x1fc>
 8010b00:	7821      	ldrb	r1, [r4, #0]
 8010b02:	2203      	movs	r2, #3
 8010b04:	4650      	mov	r0, sl
 8010b06:	f7ef fb83 	bl	8000210 <memchr>
 8010b0a:	b140      	cbz	r0, 8010b1e <_svfiprintf_r+0x152>
 8010b0c:	2340      	movs	r3, #64	; 0x40
 8010b0e:	eba0 000a 	sub.w	r0, r0, sl
 8010b12:	fa03 f000 	lsl.w	r0, r3, r0
 8010b16:	9b04      	ldr	r3, [sp, #16]
 8010b18:	4303      	orrs	r3, r0
 8010b1a:	3401      	adds	r4, #1
 8010b1c:	9304      	str	r3, [sp, #16]
 8010b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b22:	4826      	ldr	r0, [pc, #152]	; (8010bbc <_svfiprintf_r+0x1f0>)
 8010b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b28:	2206      	movs	r2, #6
 8010b2a:	f7ef fb71 	bl	8000210 <memchr>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d038      	beq.n	8010ba4 <_svfiprintf_r+0x1d8>
 8010b32:	4b23      	ldr	r3, [pc, #140]	; (8010bc0 <_svfiprintf_r+0x1f4>)
 8010b34:	bb1b      	cbnz	r3, 8010b7e <_svfiprintf_r+0x1b2>
 8010b36:	9b03      	ldr	r3, [sp, #12]
 8010b38:	3307      	adds	r3, #7
 8010b3a:	f023 0307 	bic.w	r3, r3, #7
 8010b3e:	3308      	adds	r3, #8
 8010b40:	9303      	str	r3, [sp, #12]
 8010b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b44:	4433      	add	r3, r6
 8010b46:	9309      	str	r3, [sp, #36]	; 0x24
 8010b48:	e767      	b.n	8010a1a <_svfiprintf_r+0x4e>
 8010b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b4e:	460c      	mov	r4, r1
 8010b50:	2001      	movs	r0, #1
 8010b52:	e7a5      	b.n	8010aa0 <_svfiprintf_r+0xd4>
 8010b54:	2300      	movs	r3, #0
 8010b56:	3401      	adds	r4, #1
 8010b58:	9305      	str	r3, [sp, #20]
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	f04f 0c0a 	mov.w	ip, #10
 8010b60:	4620      	mov	r0, r4
 8010b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b66:	3a30      	subs	r2, #48	; 0x30
 8010b68:	2a09      	cmp	r2, #9
 8010b6a:	d903      	bls.n	8010b74 <_svfiprintf_r+0x1a8>
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d0c5      	beq.n	8010afc <_svfiprintf_r+0x130>
 8010b70:	9105      	str	r1, [sp, #20]
 8010b72:	e7c3      	b.n	8010afc <_svfiprintf_r+0x130>
 8010b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b78:	4604      	mov	r4, r0
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e7f0      	b.n	8010b60 <_svfiprintf_r+0x194>
 8010b7e:	ab03      	add	r3, sp, #12
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	462a      	mov	r2, r5
 8010b84:	4b0f      	ldr	r3, [pc, #60]	; (8010bc4 <_svfiprintf_r+0x1f8>)
 8010b86:	a904      	add	r1, sp, #16
 8010b88:	4638      	mov	r0, r7
 8010b8a:	f3af 8000 	nop.w
 8010b8e:	1c42      	adds	r2, r0, #1
 8010b90:	4606      	mov	r6, r0
 8010b92:	d1d6      	bne.n	8010b42 <_svfiprintf_r+0x176>
 8010b94:	89ab      	ldrh	r3, [r5, #12]
 8010b96:	065b      	lsls	r3, r3, #25
 8010b98:	f53f af2c 	bmi.w	80109f4 <_svfiprintf_r+0x28>
 8010b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b9e:	b01d      	add	sp, #116	; 0x74
 8010ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba4:	ab03      	add	r3, sp, #12
 8010ba6:	9300      	str	r3, [sp, #0]
 8010ba8:	462a      	mov	r2, r5
 8010baa:	4b06      	ldr	r3, [pc, #24]	; (8010bc4 <_svfiprintf_r+0x1f8>)
 8010bac:	a904      	add	r1, sp, #16
 8010bae:	4638      	mov	r0, r7
 8010bb0:	f000 f87a 	bl	8010ca8 <_printf_i>
 8010bb4:	e7eb      	b.n	8010b8e <_svfiprintf_r+0x1c2>
 8010bb6:	bf00      	nop
 8010bb8:	08011ba0 	.word	0x08011ba0
 8010bbc:	08011baa 	.word	0x08011baa
 8010bc0:	00000000 	.word	0x00000000
 8010bc4:	08010915 	.word	0x08010915
 8010bc8:	08011ba6 	.word	0x08011ba6

08010bcc <_printf_common>:
 8010bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd0:	4616      	mov	r6, r2
 8010bd2:	4699      	mov	r9, r3
 8010bd4:	688a      	ldr	r2, [r1, #8]
 8010bd6:	690b      	ldr	r3, [r1, #16]
 8010bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	bfb8      	it	lt
 8010be0:	4613      	movlt	r3, r2
 8010be2:	6033      	str	r3, [r6, #0]
 8010be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010be8:	4607      	mov	r7, r0
 8010bea:	460c      	mov	r4, r1
 8010bec:	b10a      	cbz	r2, 8010bf2 <_printf_common+0x26>
 8010bee:	3301      	adds	r3, #1
 8010bf0:	6033      	str	r3, [r6, #0]
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	0699      	lsls	r1, r3, #26
 8010bf6:	bf42      	ittt	mi
 8010bf8:	6833      	ldrmi	r3, [r6, #0]
 8010bfa:	3302      	addmi	r3, #2
 8010bfc:	6033      	strmi	r3, [r6, #0]
 8010bfe:	6825      	ldr	r5, [r4, #0]
 8010c00:	f015 0506 	ands.w	r5, r5, #6
 8010c04:	d106      	bne.n	8010c14 <_printf_common+0x48>
 8010c06:	f104 0a19 	add.w	sl, r4, #25
 8010c0a:	68e3      	ldr	r3, [r4, #12]
 8010c0c:	6832      	ldr	r2, [r6, #0]
 8010c0e:	1a9b      	subs	r3, r3, r2
 8010c10:	42ab      	cmp	r3, r5
 8010c12:	dc26      	bgt.n	8010c62 <_printf_common+0x96>
 8010c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c18:	1e13      	subs	r3, r2, #0
 8010c1a:	6822      	ldr	r2, [r4, #0]
 8010c1c:	bf18      	it	ne
 8010c1e:	2301      	movne	r3, #1
 8010c20:	0692      	lsls	r2, r2, #26
 8010c22:	d42b      	bmi.n	8010c7c <_printf_common+0xb0>
 8010c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c28:	4649      	mov	r1, r9
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	47c0      	blx	r8
 8010c2e:	3001      	adds	r0, #1
 8010c30:	d01e      	beq.n	8010c70 <_printf_common+0xa4>
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	68e5      	ldr	r5, [r4, #12]
 8010c36:	6832      	ldr	r2, [r6, #0]
 8010c38:	f003 0306 	and.w	r3, r3, #6
 8010c3c:	2b04      	cmp	r3, #4
 8010c3e:	bf08      	it	eq
 8010c40:	1aad      	subeq	r5, r5, r2
 8010c42:	68a3      	ldr	r3, [r4, #8]
 8010c44:	6922      	ldr	r2, [r4, #16]
 8010c46:	bf0c      	ite	eq
 8010c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c4c:	2500      	movne	r5, #0
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	bfc4      	itt	gt
 8010c52:	1a9b      	subgt	r3, r3, r2
 8010c54:	18ed      	addgt	r5, r5, r3
 8010c56:	2600      	movs	r6, #0
 8010c58:	341a      	adds	r4, #26
 8010c5a:	42b5      	cmp	r5, r6
 8010c5c:	d11a      	bne.n	8010c94 <_printf_common+0xc8>
 8010c5e:	2000      	movs	r0, #0
 8010c60:	e008      	b.n	8010c74 <_printf_common+0xa8>
 8010c62:	2301      	movs	r3, #1
 8010c64:	4652      	mov	r2, sl
 8010c66:	4649      	mov	r1, r9
 8010c68:	4638      	mov	r0, r7
 8010c6a:	47c0      	blx	r8
 8010c6c:	3001      	adds	r0, #1
 8010c6e:	d103      	bne.n	8010c78 <_printf_common+0xac>
 8010c70:	f04f 30ff 	mov.w	r0, #4294967295
 8010c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c78:	3501      	adds	r5, #1
 8010c7a:	e7c6      	b.n	8010c0a <_printf_common+0x3e>
 8010c7c:	18e1      	adds	r1, r4, r3
 8010c7e:	1c5a      	adds	r2, r3, #1
 8010c80:	2030      	movs	r0, #48	; 0x30
 8010c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c86:	4422      	add	r2, r4
 8010c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c90:	3302      	adds	r3, #2
 8010c92:	e7c7      	b.n	8010c24 <_printf_common+0x58>
 8010c94:	2301      	movs	r3, #1
 8010c96:	4622      	mov	r2, r4
 8010c98:	4649      	mov	r1, r9
 8010c9a:	4638      	mov	r0, r7
 8010c9c:	47c0      	blx	r8
 8010c9e:	3001      	adds	r0, #1
 8010ca0:	d0e6      	beq.n	8010c70 <_printf_common+0xa4>
 8010ca2:	3601      	adds	r6, #1
 8010ca4:	e7d9      	b.n	8010c5a <_printf_common+0x8e>
	...

08010ca8 <_printf_i>:
 8010ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cac:	7e0f      	ldrb	r7, [r1, #24]
 8010cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010cb0:	2f78      	cmp	r7, #120	; 0x78
 8010cb2:	4691      	mov	r9, r2
 8010cb4:	4680      	mov	r8, r0
 8010cb6:	460c      	mov	r4, r1
 8010cb8:	469a      	mov	sl, r3
 8010cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010cbe:	d807      	bhi.n	8010cd0 <_printf_i+0x28>
 8010cc0:	2f62      	cmp	r7, #98	; 0x62
 8010cc2:	d80a      	bhi.n	8010cda <_printf_i+0x32>
 8010cc4:	2f00      	cmp	r7, #0
 8010cc6:	f000 80d8 	beq.w	8010e7a <_printf_i+0x1d2>
 8010cca:	2f58      	cmp	r7, #88	; 0x58
 8010ccc:	f000 80a3 	beq.w	8010e16 <_printf_i+0x16e>
 8010cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010cd8:	e03a      	b.n	8010d50 <_printf_i+0xa8>
 8010cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010cde:	2b15      	cmp	r3, #21
 8010ce0:	d8f6      	bhi.n	8010cd0 <_printf_i+0x28>
 8010ce2:	a101      	add	r1, pc, #4	; (adr r1, 8010ce8 <_printf_i+0x40>)
 8010ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ce8:	08010d41 	.word	0x08010d41
 8010cec:	08010d55 	.word	0x08010d55
 8010cf0:	08010cd1 	.word	0x08010cd1
 8010cf4:	08010cd1 	.word	0x08010cd1
 8010cf8:	08010cd1 	.word	0x08010cd1
 8010cfc:	08010cd1 	.word	0x08010cd1
 8010d00:	08010d55 	.word	0x08010d55
 8010d04:	08010cd1 	.word	0x08010cd1
 8010d08:	08010cd1 	.word	0x08010cd1
 8010d0c:	08010cd1 	.word	0x08010cd1
 8010d10:	08010cd1 	.word	0x08010cd1
 8010d14:	08010e61 	.word	0x08010e61
 8010d18:	08010d85 	.word	0x08010d85
 8010d1c:	08010e43 	.word	0x08010e43
 8010d20:	08010cd1 	.word	0x08010cd1
 8010d24:	08010cd1 	.word	0x08010cd1
 8010d28:	08010e83 	.word	0x08010e83
 8010d2c:	08010cd1 	.word	0x08010cd1
 8010d30:	08010d85 	.word	0x08010d85
 8010d34:	08010cd1 	.word	0x08010cd1
 8010d38:	08010cd1 	.word	0x08010cd1
 8010d3c:	08010e4b 	.word	0x08010e4b
 8010d40:	682b      	ldr	r3, [r5, #0]
 8010d42:	1d1a      	adds	r2, r3, #4
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	602a      	str	r2, [r5, #0]
 8010d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d50:	2301      	movs	r3, #1
 8010d52:	e0a3      	b.n	8010e9c <_printf_i+0x1f4>
 8010d54:	6820      	ldr	r0, [r4, #0]
 8010d56:	6829      	ldr	r1, [r5, #0]
 8010d58:	0606      	lsls	r6, r0, #24
 8010d5a:	f101 0304 	add.w	r3, r1, #4
 8010d5e:	d50a      	bpl.n	8010d76 <_printf_i+0xce>
 8010d60:	680e      	ldr	r6, [r1, #0]
 8010d62:	602b      	str	r3, [r5, #0]
 8010d64:	2e00      	cmp	r6, #0
 8010d66:	da03      	bge.n	8010d70 <_printf_i+0xc8>
 8010d68:	232d      	movs	r3, #45	; 0x2d
 8010d6a:	4276      	negs	r6, r6
 8010d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d70:	485e      	ldr	r0, [pc, #376]	; (8010eec <_printf_i+0x244>)
 8010d72:	230a      	movs	r3, #10
 8010d74:	e019      	b.n	8010daa <_printf_i+0x102>
 8010d76:	680e      	ldr	r6, [r1, #0]
 8010d78:	602b      	str	r3, [r5, #0]
 8010d7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d7e:	bf18      	it	ne
 8010d80:	b236      	sxthne	r6, r6
 8010d82:	e7ef      	b.n	8010d64 <_printf_i+0xbc>
 8010d84:	682b      	ldr	r3, [r5, #0]
 8010d86:	6820      	ldr	r0, [r4, #0]
 8010d88:	1d19      	adds	r1, r3, #4
 8010d8a:	6029      	str	r1, [r5, #0]
 8010d8c:	0601      	lsls	r1, r0, #24
 8010d8e:	d501      	bpl.n	8010d94 <_printf_i+0xec>
 8010d90:	681e      	ldr	r6, [r3, #0]
 8010d92:	e002      	b.n	8010d9a <_printf_i+0xf2>
 8010d94:	0646      	lsls	r6, r0, #25
 8010d96:	d5fb      	bpl.n	8010d90 <_printf_i+0xe8>
 8010d98:	881e      	ldrh	r6, [r3, #0]
 8010d9a:	4854      	ldr	r0, [pc, #336]	; (8010eec <_printf_i+0x244>)
 8010d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8010d9e:	bf0c      	ite	eq
 8010da0:	2308      	moveq	r3, #8
 8010da2:	230a      	movne	r3, #10
 8010da4:	2100      	movs	r1, #0
 8010da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010daa:	6865      	ldr	r5, [r4, #4]
 8010dac:	60a5      	str	r5, [r4, #8]
 8010dae:	2d00      	cmp	r5, #0
 8010db0:	bfa2      	ittt	ge
 8010db2:	6821      	ldrge	r1, [r4, #0]
 8010db4:	f021 0104 	bicge.w	r1, r1, #4
 8010db8:	6021      	strge	r1, [r4, #0]
 8010dba:	b90e      	cbnz	r6, 8010dc0 <_printf_i+0x118>
 8010dbc:	2d00      	cmp	r5, #0
 8010dbe:	d04d      	beq.n	8010e5c <_printf_i+0x1b4>
 8010dc0:	4615      	mov	r5, r2
 8010dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8010dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8010dca:	5dc7      	ldrb	r7, [r0, r7]
 8010dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010dd0:	4637      	mov	r7, r6
 8010dd2:	42bb      	cmp	r3, r7
 8010dd4:	460e      	mov	r6, r1
 8010dd6:	d9f4      	bls.n	8010dc2 <_printf_i+0x11a>
 8010dd8:	2b08      	cmp	r3, #8
 8010dda:	d10b      	bne.n	8010df4 <_printf_i+0x14c>
 8010ddc:	6823      	ldr	r3, [r4, #0]
 8010dde:	07de      	lsls	r6, r3, #31
 8010de0:	d508      	bpl.n	8010df4 <_printf_i+0x14c>
 8010de2:	6923      	ldr	r3, [r4, #16]
 8010de4:	6861      	ldr	r1, [r4, #4]
 8010de6:	4299      	cmp	r1, r3
 8010de8:	bfde      	ittt	le
 8010dea:	2330      	movle	r3, #48	; 0x30
 8010dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010df4:	1b52      	subs	r2, r2, r5
 8010df6:	6122      	str	r2, [r4, #16]
 8010df8:	f8cd a000 	str.w	sl, [sp]
 8010dfc:	464b      	mov	r3, r9
 8010dfe:	aa03      	add	r2, sp, #12
 8010e00:	4621      	mov	r1, r4
 8010e02:	4640      	mov	r0, r8
 8010e04:	f7ff fee2 	bl	8010bcc <_printf_common>
 8010e08:	3001      	adds	r0, #1
 8010e0a:	d14c      	bne.n	8010ea6 <_printf_i+0x1fe>
 8010e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e10:	b004      	add	sp, #16
 8010e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e16:	4835      	ldr	r0, [pc, #212]	; (8010eec <_printf_i+0x244>)
 8010e18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010e1c:	6829      	ldr	r1, [r5, #0]
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8010e24:	6029      	str	r1, [r5, #0]
 8010e26:	061d      	lsls	r5, r3, #24
 8010e28:	d514      	bpl.n	8010e54 <_printf_i+0x1ac>
 8010e2a:	07df      	lsls	r7, r3, #31
 8010e2c:	bf44      	itt	mi
 8010e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8010e32:	6023      	strmi	r3, [r4, #0]
 8010e34:	b91e      	cbnz	r6, 8010e3e <_printf_i+0x196>
 8010e36:	6823      	ldr	r3, [r4, #0]
 8010e38:	f023 0320 	bic.w	r3, r3, #32
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	2310      	movs	r3, #16
 8010e40:	e7b0      	b.n	8010da4 <_printf_i+0xfc>
 8010e42:	6823      	ldr	r3, [r4, #0]
 8010e44:	f043 0320 	orr.w	r3, r3, #32
 8010e48:	6023      	str	r3, [r4, #0]
 8010e4a:	2378      	movs	r3, #120	; 0x78
 8010e4c:	4828      	ldr	r0, [pc, #160]	; (8010ef0 <_printf_i+0x248>)
 8010e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e52:	e7e3      	b.n	8010e1c <_printf_i+0x174>
 8010e54:	0659      	lsls	r1, r3, #25
 8010e56:	bf48      	it	mi
 8010e58:	b2b6      	uxthmi	r6, r6
 8010e5a:	e7e6      	b.n	8010e2a <_printf_i+0x182>
 8010e5c:	4615      	mov	r5, r2
 8010e5e:	e7bb      	b.n	8010dd8 <_printf_i+0x130>
 8010e60:	682b      	ldr	r3, [r5, #0]
 8010e62:	6826      	ldr	r6, [r4, #0]
 8010e64:	6961      	ldr	r1, [r4, #20]
 8010e66:	1d18      	adds	r0, r3, #4
 8010e68:	6028      	str	r0, [r5, #0]
 8010e6a:	0635      	lsls	r5, r6, #24
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	d501      	bpl.n	8010e74 <_printf_i+0x1cc>
 8010e70:	6019      	str	r1, [r3, #0]
 8010e72:	e002      	b.n	8010e7a <_printf_i+0x1d2>
 8010e74:	0670      	lsls	r0, r6, #25
 8010e76:	d5fb      	bpl.n	8010e70 <_printf_i+0x1c8>
 8010e78:	8019      	strh	r1, [r3, #0]
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	6123      	str	r3, [r4, #16]
 8010e7e:	4615      	mov	r5, r2
 8010e80:	e7ba      	b.n	8010df8 <_printf_i+0x150>
 8010e82:	682b      	ldr	r3, [r5, #0]
 8010e84:	1d1a      	adds	r2, r3, #4
 8010e86:	602a      	str	r2, [r5, #0]
 8010e88:	681d      	ldr	r5, [r3, #0]
 8010e8a:	6862      	ldr	r2, [r4, #4]
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	4628      	mov	r0, r5
 8010e90:	f7ef f9be 	bl	8000210 <memchr>
 8010e94:	b108      	cbz	r0, 8010e9a <_printf_i+0x1f2>
 8010e96:	1b40      	subs	r0, r0, r5
 8010e98:	6060      	str	r0, [r4, #4]
 8010e9a:	6863      	ldr	r3, [r4, #4]
 8010e9c:	6123      	str	r3, [r4, #16]
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ea4:	e7a8      	b.n	8010df8 <_printf_i+0x150>
 8010ea6:	6923      	ldr	r3, [r4, #16]
 8010ea8:	462a      	mov	r2, r5
 8010eaa:	4649      	mov	r1, r9
 8010eac:	4640      	mov	r0, r8
 8010eae:	47d0      	blx	sl
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	d0ab      	beq.n	8010e0c <_printf_i+0x164>
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	079b      	lsls	r3, r3, #30
 8010eb8:	d413      	bmi.n	8010ee2 <_printf_i+0x23a>
 8010eba:	68e0      	ldr	r0, [r4, #12]
 8010ebc:	9b03      	ldr	r3, [sp, #12]
 8010ebe:	4298      	cmp	r0, r3
 8010ec0:	bfb8      	it	lt
 8010ec2:	4618      	movlt	r0, r3
 8010ec4:	e7a4      	b.n	8010e10 <_printf_i+0x168>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	4632      	mov	r2, r6
 8010eca:	4649      	mov	r1, r9
 8010ecc:	4640      	mov	r0, r8
 8010ece:	47d0      	blx	sl
 8010ed0:	3001      	adds	r0, #1
 8010ed2:	d09b      	beq.n	8010e0c <_printf_i+0x164>
 8010ed4:	3501      	adds	r5, #1
 8010ed6:	68e3      	ldr	r3, [r4, #12]
 8010ed8:	9903      	ldr	r1, [sp, #12]
 8010eda:	1a5b      	subs	r3, r3, r1
 8010edc:	42ab      	cmp	r3, r5
 8010ede:	dcf2      	bgt.n	8010ec6 <_printf_i+0x21e>
 8010ee0:	e7eb      	b.n	8010eba <_printf_i+0x212>
 8010ee2:	2500      	movs	r5, #0
 8010ee4:	f104 0619 	add.w	r6, r4, #25
 8010ee8:	e7f5      	b.n	8010ed6 <_printf_i+0x22e>
 8010eea:	bf00      	nop
 8010eec:	08011bb1 	.word	0x08011bb1
 8010ef0:	08011bc2 	.word	0x08011bc2

08010ef4 <__retarget_lock_acquire_recursive>:
 8010ef4:	4770      	bx	lr

08010ef6 <__retarget_lock_release_recursive>:
 8010ef6:	4770      	bx	lr

08010ef8 <memcpy>:
 8010ef8:	440a      	add	r2, r1
 8010efa:	4291      	cmp	r1, r2
 8010efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f00:	d100      	bne.n	8010f04 <memcpy+0xc>
 8010f02:	4770      	bx	lr
 8010f04:	b510      	push	{r4, lr}
 8010f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f0e:	4291      	cmp	r1, r2
 8010f10:	d1f9      	bne.n	8010f06 <memcpy+0xe>
 8010f12:	bd10      	pop	{r4, pc}

08010f14 <memmove>:
 8010f14:	4288      	cmp	r0, r1
 8010f16:	b510      	push	{r4, lr}
 8010f18:	eb01 0402 	add.w	r4, r1, r2
 8010f1c:	d902      	bls.n	8010f24 <memmove+0x10>
 8010f1e:	4284      	cmp	r4, r0
 8010f20:	4623      	mov	r3, r4
 8010f22:	d807      	bhi.n	8010f34 <memmove+0x20>
 8010f24:	1e43      	subs	r3, r0, #1
 8010f26:	42a1      	cmp	r1, r4
 8010f28:	d008      	beq.n	8010f3c <memmove+0x28>
 8010f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f32:	e7f8      	b.n	8010f26 <memmove+0x12>
 8010f34:	4402      	add	r2, r0
 8010f36:	4601      	mov	r1, r0
 8010f38:	428a      	cmp	r2, r1
 8010f3a:	d100      	bne.n	8010f3e <memmove+0x2a>
 8010f3c:	bd10      	pop	{r4, pc}
 8010f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f46:	e7f7      	b.n	8010f38 <memmove+0x24>

08010f48 <_realloc_r>:
 8010f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	4614      	mov	r4, r2
 8010f50:	460e      	mov	r6, r1
 8010f52:	b921      	cbnz	r1, 8010f5e <_realloc_r+0x16>
 8010f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f58:	4611      	mov	r1, r2
 8010f5a:	f7ff bc17 	b.w	801078c <_malloc_r>
 8010f5e:	b92a      	cbnz	r2, 8010f6c <_realloc_r+0x24>
 8010f60:	f7ff fba8 	bl	80106b4 <_free_r>
 8010f64:	4625      	mov	r5, r4
 8010f66:	4628      	mov	r0, r5
 8010f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f6c:	f000 f81b 	bl	8010fa6 <_malloc_usable_size_r>
 8010f70:	4284      	cmp	r4, r0
 8010f72:	4607      	mov	r7, r0
 8010f74:	d802      	bhi.n	8010f7c <_realloc_r+0x34>
 8010f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f7a:	d812      	bhi.n	8010fa2 <_realloc_r+0x5a>
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	4640      	mov	r0, r8
 8010f80:	f7ff fc04 	bl	801078c <_malloc_r>
 8010f84:	4605      	mov	r5, r0
 8010f86:	2800      	cmp	r0, #0
 8010f88:	d0ed      	beq.n	8010f66 <_realloc_r+0x1e>
 8010f8a:	42bc      	cmp	r4, r7
 8010f8c:	4622      	mov	r2, r4
 8010f8e:	4631      	mov	r1, r6
 8010f90:	bf28      	it	cs
 8010f92:	463a      	movcs	r2, r7
 8010f94:	f7ff ffb0 	bl	8010ef8 <memcpy>
 8010f98:	4631      	mov	r1, r6
 8010f9a:	4640      	mov	r0, r8
 8010f9c:	f7ff fb8a 	bl	80106b4 <_free_r>
 8010fa0:	e7e1      	b.n	8010f66 <_realloc_r+0x1e>
 8010fa2:	4635      	mov	r5, r6
 8010fa4:	e7df      	b.n	8010f66 <_realloc_r+0x1e>

08010fa6 <_malloc_usable_size_r>:
 8010fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010faa:	1f18      	subs	r0, r3, #4
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	bfbc      	itt	lt
 8010fb0:	580b      	ldrlt	r3, [r1, r0]
 8010fb2:	18c0      	addlt	r0, r0, r3
 8010fb4:	4770      	bx	lr
	...

08010fb8 <tanhf>:
 8010fb8:	b510      	push	{r4, lr}
 8010fba:	ee10 4a10 	vmov	r4, s0
 8010fbe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010fc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010fc6:	ed2d 8b02 	vpush	{d8}
 8010fca:	eeb0 7a40 	vmov.f32	s14, s0
 8010fce:	db0c      	blt.n	8010fea <tanhf+0x32>
 8010fd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010fd4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8010fd8:	2c00      	cmp	r4, #0
 8010fda:	bfac      	ite	ge
 8010fdc:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8010fe0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8010fe4:	ecbd 8b02 	vpop	{d8}
 8010fe8:	bd10      	pop	{r4, pc}
 8010fea:	4a1b      	ldr	r2, [pc, #108]	; (8011058 <tanhf+0xa0>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	dc30      	bgt.n	8011052 <tanhf+0x9a>
 8010ff0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8010ff4:	da06      	bge.n	8011004 <tanhf+0x4c>
 8010ff6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010ffa:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010ffe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011002:	e7ef      	b.n	8010fe4 <tanhf+0x2c>
 8011004:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011008:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 801100c:	db12      	blt.n	8011034 <tanhf+0x7c>
 801100e:	f000 fc63 	bl	80118d8 <fabsf>
 8011012:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011016:	f000 fb43 	bl	80116a0 <expm1f>
 801101a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801101e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8011022:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011026:	ee30 0a67 	vsub.f32	s0, s0, s15
 801102a:	2c00      	cmp	r4, #0
 801102c:	bfb8      	it	lt
 801102e:	eeb1 0a40 	vneglt.f32	s0, s0
 8011032:	e7d7      	b.n	8010fe4 <tanhf+0x2c>
 8011034:	f000 fc50 	bl	80118d8 <fabsf>
 8011038:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801103c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011040:	f000 fb2e 	bl	80116a0 <expm1f>
 8011044:	ee70 7a08 	vadd.f32	s15, s0, s16
 8011048:	eeb1 7a40 	vneg.f32	s14, s0
 801104c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011050:	e7eb      	b.n	801102a <tanhf+0x72>
 8011052:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011056:	e7e8      	b.n	801102a <tanhf+0x72>
 8011058:	41afffff 	.word	0x41afffff

0801105c <sqrt>:
 801105c:	b538      	push	{r3, r4, r5, lr}
 801105e:	ed2d 8b02 	vpush	{d8}
 8011062:	ec55 4b10 	vmov	r4, r5, d0
 8011066:	f000 f889 	bl	801117c <__ieee754_sqrt>
 801106a:	4622      	mov	r2, r4
 801106c:	462b      	mov	r3, r5
 801106e:	4620      	mov	r0, r4
 8011070:	4629      	mov	r1, r5
 8011072:	eeb0 8a40 	vmov.f32	s16, s0
 8011076:	eef0 8a60 	vmov.f32	s17, s1
 801107a:	f7ef fd6f 	bl	8000b5c <__aeabi_dcmpun>
 801107e:	b990      	cbnz	r0, 80110a6 <sqrt+0x4a>
 8011080:	2200      	movs	r2, #0
 8011082:	2300      	movs	r3, #0
 8011084:	4620      	mov	r0, r4
 8011086:	4629      	mov	r1, r5
 8011088:	f7ef fd40 	bl	8000b0c <__aeabi_dcmplt>
 801108c:	b158      	cbz	r0, 80110a6 <sqrt+0x4a>
 801108e:	f7ff fadf 	bl	8010650 <__errno>
 8011092:	2321      	movs	r3, #33	; 0x21
 8011094:	6003      	str	r3, [r0, #0]
 8011096:	2200      	movs	r2, #0
 8011098:	2300      	movs	r3, #0
 801109a:	4610      	mov	r0, r2
 801109c:	4619      	mov	r1, r3
 801109e:	f7ef fbed 	bl	800087c <__aeabi_ddiv>
 80110a2:	ec41 0b18 	vmov	d8, r0, r1
 80110a6:	eeb0 0a48 	vmov.f32	s0, s16
 80110aa:	eef0 0a68 	vmov.f32	s1, s17
 80110ae:	ecbd 8b02 	vpop	{d8}
 80110b2:	bd38      	pop	{r3, r4, r5, pc}

080110b4 <expf>:
 80110b4:	b508      	push	{r3, lr}
 80110b6:	ed2d 8b02 	vpush	{d8}
 80110ba:	eef0 8a40 	vmov.f32	s17, s0
 80110be:	f000 f90f 	bl	80112e0 <__ieee754_expf>
 80110c2:	eeb0 8a40 	vmov.f32	s16, s0
 80110c6:	eeb0 0a68 	vmov.f32	s0, s17
 80110ca:	f000 fc0c 	bl	80118e6 <finitef>
 80110ce:	b160      	cbz	r0, 80110ea <expf+0x36>
 80110d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011110 <expf+0x5c>
 80110d4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80110d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110dc:	dd0a      	ble.n	80110f4 <expf+0x40>
 80110de:	f7ff fab7 	bl	8010650 <__errno>
 80110e2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011114 <expf+0x60>
 80110e6:	2322      	movs	r3, #34	; 0x22
 80110e8:	6003      	str	r3, [r0, #0]
 80110ea:	eeb0 0a48 	vmov.f32	s0, s16
 80110ee:	ecbd 8b02 	vpop	{d8}
 80110f2:	bd08      	pop	{r3, pc}
 80110f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011118 <expf+0x64>
 80110f8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80110fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011100:	d5f3      	bpl.n	80110ea <expf+0x36>
 8011102:	f7ff faa5 	bl	8010650 <__errno>
 8011106:	2322      	movs	r3, #34	; 0x22
 8011108:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801111c <expf+0x68>
 801110c:	6003      	str	r3, [r0, #0]
 801110e:	e7ec      	b.n	80110ea <expf+0x36>
 8011110:	42b17180 	.word	0x42b17180
 8011114:	7f800000 	.word	0x7f800000
 8011118:	c2cff1b5 	.word	0xc2cff1b5
 801111c:	00000000 	.word	0x00000000

08011120 <logf>:
 8011120:	b508      	push	{r3, lr}
 8011122:	ed2d 8b02 	vpush	{d8}
 8011126:	eeb0 8a40 	vmov.f32	s16, s0
 801112a:	f000 f9a7 	bl	801147c <__ieee754_logf>
 801112e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011136:	d60f      	bvs.n	8011158 <logf+0x38>
 8011138:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011140:	dc0a      	bgt.n	8011158 <logf+0x38>
 8011142:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801114a:	d108      	bne.n	801115e <logf+0x3e>
 801114c:	f7ff fa80 	bl	8010650 <__errno>
 8011150:	2322      	movs	r3, #34	; 0x22
 8011152:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8011174 <logf+0x54>
 8011156:	6003      	str	r3, [r0, #0]
 8011158:	ecbd 8b02 	vpop	{d8}
 801115c:	bd08      	pop	{r3, pc}
 801115e:	f7ff fa77 	bl	8010650 <__errno>
 8011162:	ecbd 8b02 	vpop	{d8}
 8011166:	2321      	movs	r3, #33	; 0x21
 8011168:	6003      	str	r3, [r0, #0]
 801116a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801116e:	4802      	ldr	r0, [pc, #8]	; (8011178 <logf+0x58>)
 8011170:	f000 bbc6 	b.w	8011900 <nanf>
 8011174:	ff800000 	.word	0xff800000
 8011178:	08011ba5 	.word	0x08011ba5

0801117c <__ieee754_sqrt>:
 801117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011180:	ec55 4b10 	vmov	r4, r5, d0
 8011184:	4e55      	ldr	r6, [pc, #340]	; (80112dc <__ieee754_sqrt+0x160>)
 8011186:	43ae      	bics	r6, r5
 8011188:	ee10 0a10 	vmov	r0, s0
 801118c:	ee10 3a10 	vmov	r3, s0
 8011190:	462a      	mov	r2, r5
 8011192:	4629      	mov	r1, r5
 8011194:	d110      	bne.n	80111b8 <__ieee754_sqrt+0x3c>
 8011196:	ee10 2a10 	vmov	r2, s0
 801119a:	462b      	mov	r3, r5
 801119c:	f7ef fa44 	bl	8000628 <__aeabi_dmul>
 80111a0:	4602      	mov	r2, r0
 80111a2:	460b      	mov	r3, r1
 80111a4:	4620      	mov	r0, r4
 80111a6:	4629      	mov	r1, r5
 80111a8:	f7ef f888 	bl	80002bc <__adddf3>
 80111ac:	4604      	mov	r4, r0
 80111ae:	460d      	mov	r5, r1
 80111b0:	ec45 4b10 	vmov	d0, r4, r5
 80111b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111b8:	2d00      	cmp	r5, #0
 80111ba:	dc10      	bgt.n	80111de <__ieee754_sqrt+0x62>
 80111bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80111c0:	4330      	orrs	r0, r6
 80111c2:	d0f5      	beq.n	80111b0 <__ieee754_sqrt+0x34>
 80111c4:	b15d      	cbz	r5, 80111de <__ieee754_sqrt+0x62>
 80111c6:	ee10 2a10 	vmov	r2, s0
 80111ca:	462b      	mov	r3, r5
 80111cc:	ee10 0a10 	vmov	r0, s0
 80111d0:	f7ef f872 	bl	80002b8 <__aeabi_dsub>
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	f7ef fb50 	bl	800087c <__aeabi_ddiv>
 80111dc:	e7e6      	b.n	80111ac <__ieee754_sqrt+0x30>
 80111de:	1512      	asrs	r2, r2, #20
 80111e0:	d074      	beq.n	80112cc <__ieee754_sqrt+0x150>
 80111e2:	07d4      	lsls	r4, r2, #31
 80111e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80111e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80111ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80111f0:	bf5e      	ittt	pl
 80111f2:	0fda      	lsrpl	r2, r3, #31
 80111f4:	005b      	lslpl	r3, r3, #1
 80111f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80111fa:	2400      	movs	r4, #0
 80111fc:	0fda      	lsrs	r2, r3, #31
 80111fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011202:	107f      	asrs	r7, r7, #1
 8011204:	005b      	lsls	r3, r3, #1
 8011206:	2516      	movs	r5, #22
 8011208:	4620      	mov	r0, r4
 801120a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801120e:	1886      	adds	r6, r0, r2
 8011210:	428e      	cmp	r6, r1
 8011212:	bfde      	ittt	le
 8011214:	1b89      	suble	r1, r1, r6
 8011216:	18b0      	addle	r0, r6, r2
 8011218:	18a4      	addle	r4, r4, r2
 801121a:	0049      	lsls	r1, r1, #1
 801121c:	3d01      	subs	r5, #1
 801121e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011222:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011226:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801122a:	d1f0      	bne.n	801120e <__ieee754_sqrt+0x92>
 801122c:	462a      	mov	r2, r5
 801122e:	f04f 0e20 	mov.w	lr, #32
 8011232:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011236:	4281      	cmp	r1, r0
 8011238:	eb06 0c05 	add.w	ip, r6, r5
 801123c:	dc02      	bgt.n	8011244 <__ieee754_sqrt+0xc8>
 801123e:	d113      	bne.n	8011268 <__ieee754_sqrt+0xec>
 8011240:	459c      	cmp	ip, r3
 8011242:	d811      	bhi.n	8011268 <__ieee754_sqrt+0xec>
 8011244:	f1bc 0f00 	cmp.w	ip, #0
 8011248:	eb0c 0506 	add.w	r5, ip, r6
 801124c:	da43      	bge.n	80112d6 <__ieee754_sqrt+0x15a>
 801124e:	2d00      	cmp	r5, #0
 8011250:	db41      	blt.n	80112d6 <__ieee754_sqrt+0x15a>
 8011252:	f100 0801 	add.w	r8, r0, #1
 8011256:	1a09      	subs	r1, r1, r0
 8011258:	459c      	cmp	ip, r3
 801125a:	bf88      	it	hi
 801125c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011260:	eba3 030c 	sub.w	r3, r3, ip
 8011264:	4432      	add	r2, r6
 8011266:	4640      	mov	r0, r8
 8011268:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801126c:	f1be 0e01 	subs.w	lr, lr, #1
 8011270:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011274:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011278:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801127c:	d1db      	bne.n	8011236 <__ieee754_sqrt+0xba>
 801127e:	430b      	orrs	r3, r1
 8011280:	d006      	beq.n	8011290 <__ieee754_sqrt+0x114>
 8011282:	1c50      	adds	r0, r2, #1
 8011284:	bf13      	iteet	ne
 8011286:	3201      	addne	r2, #1
 8011288:	3401      	addeq	r4, #1
 801128a:	4672      	moveq	r2, lr
 801128c:	f022 0201 	bicne.w	r2, r2, #1
 8011290:	1063      	asrs	r3, r4, #1
 8011292:	0852      	lsrs	r2, r2, #1
 8011294:	07e1      	lsls	r1, r4, #31
 8011296:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801129a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801129e:	bf48      	it	mi
 80112a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80112a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80112a8:	4614      	mov	r4, r2
 80112aa:	e781      	b.n	80111b0 <__ieee754_sqrt+0x34>
 80112ac:	0ad9      	lsrs	r1, r3, #11
 80112ae:	3815      	subs	r0, #21
 80112b0:	055b      	lsls	r3, r3, #21
 80112b2:	2900      	cmp	r1, #0
 80112b4:	d0fa      	beq.n	80112ac <__ieee754_sqrt+0x130>
 80112b6:	02cd      	lsls	r5, r1, #11
 80112b8:	d50a      	bpl.n	80112d0 <__ieee754_sqrt+0x154>
 80112ba:	f1c2 0420 	rsb	r4, r2, #32
 80112be:	fa23 f404 	lsr.w	r4, r3, r4
 80112c2:	1e55      	subs	r5, r2, #1
 80112c4:	4093      	lsls	r3, r2
 80112c6:	4321      	orrs	r1, r4
 80112c8:	1b42      	subs	r2, r0, r5
 80112ca:	e78a      	b.n	80111e2 <__ieee754_sqrt+0x66>
 80112cc:	4610      	mov	r0, r2
 80112ce:	e7f0      	b.n	80112b2 <__ieee754_sqrt+0x136>
 80112d0:	0049      	lsls	r1, r1, #1
 80112d2:	3201      	adds	r2, #1
 80112d4:	e7ef      	b.n	80112b6 <__ieee754_sqrt+0x13a>
 80112d6:	4680      	mov	r8, r0
 80112d8:	e7bd      	b.n	8011256 <__ieee754_sqrt+0xda>
 80112da:	bf00      	nop
 80112dc:	7ff00000 	.word	0x7ff00000

080112e0 <__ieee754_expf>:
 80112e0:	ee10 2a10 	vmov	r2, s0
 80112e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80112e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80112ec:	d902      	bls.n	80112f4 <__ieee754_expf+0x14>
 80112ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80112f2:	4770      	bx	lr
 80112f4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80112f8:	d106      	bne.n	8011308 <__ieee754_expf+0x28>
 80112fa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8011434 <__ieee754_expf+0x154>
 80112fe:	2b00      	cmp	r3, #0
 8011300:	bf18      	it	ne
 8011302:	eeb0 0a67 	vmovne.f32	s0, s15
 8011306:	4770      	bx	lr
 8011308:	484b      	ldr	r0, [pc, #300]	; (8011438 <__ieee754_expf+0x158>)
 801130a:	4282      	cmp	r2, r0
 801130c:	dd02      	ble.n	8011314 <__ieee754_expf+0x34>
 801130e:	2000      	movs	r0, #0
 8011310:	f000 b9c0 	b.w	8011694 <__math_oflowf>
 8011314:	2a00      	cmp	r2, #0
 8011316:	da05      	bge.n	8011324 <__ieee754_expf+0x44>
 8011318:	4a48      	ldr	r2, [pc, #288]	; (801143c <__ieee754_expf+0x15c>)
 801131a:	4291      	cmp	r1, r2
 801131c:	d902      	bls.n	8011324 <__ieee754_expf+0x44>
 801131e:	2000      	movs	r0, #0
 8011320:	f000 b9b2 	b.w	8011688 <__math_uflowf>
 8011324:	4a46      	ldr	r2, [pc, #280]	; (8011440 <__ieee754_expf+0x160>)
 8011326:	4291      	cmp	r1, r2
 8011328:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801132c:	d952      	bls.n	80113d4 <__ieee754_expf+0xf4>
 801132e:	4a45      	ldr	r2, [pc, #276]	; (8011444 <__ieee754_expf+0x164>)
 8011330:	4291      	cmp	r1, r2
 8011332:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011336:	d834      	bhi.n	80113a2 <__ieee754_expf+0xc2>
 8011338:	4943      	ldr	r1, [pc, #268]	; (8011448 <__ieee754_expf+0x168>)
 801133a:	4411      	add	r1, r2
 801133c:	ed91 7a00 	vldr	s14, [r1]
 8011340:	4942      	ldr	r1, [pc, #264]	; (801144c <__ieee754_expf+0x16c>)
 8011342:	440a      	add	r2, r1
 8011344:	edd2 7a00 	vldr	s15, [r2]
 8011348:	ee30 7a47 	vsub.f32	s14, s0, s14
 801134c:	f1c3 0201 	rsb	r2, r3, #1
 8011350:	1ad2      	subs	r2, r2, r3
 8011352:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011356:	ee20 6a00 	vmul.f32	s12, s0, s0
 801135a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8011450 <__ieee754_expf+0x170>
 801135e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011454 <__ieee754_expf+0x174>
 8011362:	eee6 6a05 	vfma.f32	s13, s12, s10
 8011366:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8011458 <__ieee754_expf+0x178>
 801136a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801136e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801145c <__ieee754_expf+0x17c>
 8011372:	eee5 6a06 	vfma.f32	s13, s10, s12
 8011376:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8011460 <__ieee754_expf+0x180>
 801137a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801137e:	eef0 6a40 	vmov.f32	s13, s0
 8011382:	eee5 6a46 	vfms.f32	s13, s10, s12
 8011386:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801138a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801138e:	bb92      	cbnz	r2, 80113f6 <__ieee754_expf+0x116>
 8011390:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011394:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011398:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801139c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80113a0:	4770      	bx	lr
 80113a2:	4b30      	ldr	r3, [pc, #192]	; (8011464 <__ieee754_expf+0x184>)
 80113a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8011468 <__ieee754_expf+0x188>
 80113a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 801146c <__ieee754_expf+0x18c>
 80113ac:	4413      	add	r3, r2
 80113ae:	edd3 7a00 	vldr	s15, [r3]
 80113b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80113b6:	eeb0 7a40 	vmov.f32	s14, s0
 80113ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113be:	ee17 2a90 	vmov	r2, s15
 80113c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80113c6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80113ca:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011470 <__ieee754_expf+0x190>
 80113ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80113d2:	e7be      	b.n	8011352 <__ieee754_expf+0x72>
 80113d4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80113d8:	d20b      	bcs.n	80113f2 <__ieee754_expf+0x112>
 80113da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8011474 <__ieee754_expf+0x194>
 80113de:	ee70 6a26 	vadd.f32	s13, s0, s13
 80113e2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80113e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ea:	dd02      	ble.n	80113f2 <__ieee754_expf+0x112>
 80113ec:	ee30 0a25 	vadd.f32	s0, s0, s11
 80113f0:	4770      	bx	lr
 80113f2:	2200      	movs	r2, #0
 80113f4:	e7af      	b.n	8011356 <__ieee754_expf+0x76>
 80113f6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80113fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80113fe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8011402:	bfb8      	it	lt
 8011404:	3264      	addlt	r2, #100	; 0x64
 8011406:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801140a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801140e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8011412:	ee17 3a90 	vmov	r3, s15
 8011416:	bfab      	itete	ge
 8011418:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801141c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011420:	ee00 3a10 	vmovge	s0, r3
 8011424:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8011478 <__ieee754_expf+0x198>
 8011428:	bfbc      	itt	lt
 801142a:	ee00 3a10 	vmovlt	s0, r3
 801142e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011432:	4770      	bx	lr
 8011434:	00000000 	.word	0x00000000
 8011438:	42b17217 	.word	0x42b17217
 801143c:	42cff1b5 	.word	0x42cff1b5
 8011440:	3eb17218 	.word	0x3eb17218
 8011444:	3f851591 	.word	0x3f851591
 8011448:	08011bdc 	.word	0x08011bdc
 801144c:	08011be4 	.word	0x08011be4
 8011450:	3331bb4c 	.word	0x3331bb4c
 8011454:	b5ddea0e 	.word	0xb5ddea0e
 8011458:	388ab355 	.word	0x388ab355
 801145c:	bb360b61 	.word	0xbb360b61
 8011460:	3e2aaaab 	.word	0x3e2aaaab
 8011464:	08011bd4 	.word	0x08011bd4
 8011468:	3fb8aa3b 	.word	0x3fb8aa3b
 801146c:	3f317180 	.word	0x3f317180
 8011470:	3717f7d1 	.word	0x3717f7d1
 8011474:	7149f2ca 	.word	0x7149f2ca
 8011478:	0d800000 	.word	0x0d800000

0801147c <__ieee754_logf>:
 801147c:	ee10 3a10 	vmov	r3, s0
 8011480:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011484:	d106      	bne.n	8011494 <__ieee754_logf+0x18>
 8011486:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801161c <__ieee754_logf+0x1a0>
 801148a:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011620 <__ieee754_logf+0x1a4>
 801148e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011492:	4770      	bx	lr
 8011494:	2b00      	cmp	r3, #0
 8011496:	da02      	bge.n	801149e <__ieee754_logf+0x22>
 8011498:	ee30 7a40 	vsub.f32	s14, s0, s0
 801149c:	e7f5      	b.n	801148a <__ieee754_logf+0xe>
 801149e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80114a2:	db02      	blt.n	80114aa <__ieee754_logf+0x2e>
 80114a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80114a8:	4770      	bx	lr
 80114aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80114ae:	bfb8      	it	lt
 80114b0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8011624 <__ieee754_logf+0x1a8>
 80114b4:	485c      	ldr	r0, [pc, #368]	; (8011628 <__ieee754_logf+0x1ac>)
 80114b6:	bfbe      	ittt	lt
 80114b8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80114bc:	f06f 0118 	mvnlt.w	r1, #24
 80114c0:	ee17 3a90 	vmovlt	r3, s15
 80114c4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80114c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80114cc:	4418      	add	r0, r3
 80114ce:	bfa8      	it	ge
 80114d0:	2100      	movge	r1, #0
 80114d2:	3a7f      	subs	r2, #127	; 0x7f
 80114d4:	440a      	add	r2, r1
 80114d6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80114da:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80114de:	4319      	orrs	r1, r3
 80114e0:	ee00 1a10 	vmov	s0, r1
 80114e4:	4951      	ldr	r1, [pc, #324]	; (801162c <__ieee754_logf+0x1b0>)
 80114e6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80114ea:	f103 000f 	add.w	r0, r3, #15
 80114ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80114f2:	4001      	ands	r1, r0
 80114f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80114f8:	bb89      	cbnz	r1, 801155e <__ieee754_logf+0xe2>
 80114fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80114fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011502:	d10f      	bne.n	8011524 <__ieee754_logf+0xa8>
 8011504:	2a00      	cmp	r2, #0
 8011506:	f000 8085 	beq.w	8011614 <__ieee754_logf+0x198>
 801150a:	ee07 2a90 	vmov	s15, r2
 801150e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8011630 <__ieee754_logf+0x1b4>
 8011512:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8011634 <__ieee754_logf+0x1b8>
 8011516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801151a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801151e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8011522:	4770      	bx	lr
 8011524:	eddf 6a44 	vldr	s13, [pc, #272]	; 8011638 <__ieee754_logf+0x1bc>
 8011528:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801152c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8011530:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011538:	b912      	cbnz	r2, 8011540 <__ieee754_logf+0xc4>
 801153a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801153e:	4770      	bx	lr
 8011540:	ee07 2a90 	vmov	s15, r2
 8011544:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8011630 <__ieee754_logf+0x1b4>
 8011548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801154c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011550:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011554:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011634 <__ieee754_logf+0x1b8>
 8011558:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801155c:	4770      	bx	lr
 801155e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011562:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011566:	eddf 5a35 	vldr	s11, [pc, #212]	; 801163c <__ieee754_logf+0x1c0>
 801156a:	eddf 4a35 	vldr	s9, [pc, #212]	; 8011640 <__ieee754_logf+0x1c4>
 801156e:	4935      	ldr	r1, [pc, #212]	; (8011644 <__ieee754_logf+0x1c8>)
 8011570:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011574:	4419      	add	r1, r3
 8011576:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801157a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801157e:	430b      	orrs	r3, r1
 8011580:	2b00      	cmp	r3, #0
 8011582:	ee07 2a90 	vmov	s15, r2
 8011586:	ee26 5a06 	vmul.f32	s10, s12, s12
 801158a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801158e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8011592:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8011648 <__ieee754_logf+0x1cc>
 8011596:	eee7 7a25 	vfma.f32	s15, s14, s11
 801159a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801164c <__ieee754_logf+0x1d0>
 801159e:	eee7 5a87 	vfma.f32	s11, s15, s14
 80115a2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011650 <__ieee754_logf+0x1d4>
 80115a6:	eee7 7a24 	vfma.f32	s15, s14, s9
 80115aa:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8011654 <__ieee754_logf+0x1d8>
 80115ae:	eee7 4a87 	vfma.f32	s9, s15, s14
 80115b2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011658 <__ieee754_logf+0x1dc>
 80115b6:	eee4 7a87 	vfma.f32	s15, s9, s14
 80115ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80115be:	eee5 7a87 	vfma.f32	s15, s11, s14
 80115c2:	dd1c      	ble.n	80115fe <__ieee754_logf+0x182>
 80115c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80115c8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80115cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80115d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80115d8:	b922      	cbnz	r2, 80115e4 <__ieee754_logf+0x168>
 80115da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80115e2:	4770      	bx	lr
 80115e4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8011630 <__ieee754_logf+0x1b4>
 80115e8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80115ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80115f4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011634 <__ieee754_logf+0x1b8>
 80115f8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80115fc:	4770      	bx	lr
 80115fe:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011602:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011606:	2a00      	cmp	r2, #0
 8011608:	d0e9      	beq.n	80115de <__ieee754_logf+0x162>
 801160a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8011630 <__ieee754_logf+0x1b4>
 801160e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011612:	e7ed      	b.n	80115f0 <__ieee754_logf+0x174>
 8011614:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8011620 <__ieee754_logf+0x1a4>
 8011618:	4770      	bx	lr
 801161a:	bf00      	nop
 801161c:	cc000000 	.word	0xcc000000
 8011620:	00000000 	.word	0x00000000
 8011624:	4c000000 	.word	0x4c000000
 8011628:	004afb20 	.word	0x004afb20
 801162c:	007ffff0 	.word	0x007ffff0
 8011630:	3717f7d1 	.word	0x3717f7d1
 8011634:	3f317180 	.word	0x3f317180
 8011638:	3eaaaaab 	.word	0x3eaaaaab
 801163c:	3e1cd04f 	.word	0x3e1cd04f
 8011640:	3e178897 	.word	0x3e178897
 8011644:	ffcf5c30 	.word	0xffcf5c30
 8011648:	3e638e29 	.word	0x3e638e29
 801164c:	3ecccccd 	.word	0x3ecccccd
 8011650:	3e3a3325 	.word	0x3e3a3325
 8011654:	3e924925 	.word	0x3e924925
 8011658:	3f2aaaab 	.word	0x3f2aaaab

0801165c <with_errnof>:
 801165c:	b513      	push	{r0, r1, r4, lr}
 801165e:	4604      	mov	r4, r0
 8011660:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011664:	f7fe fff4 	bl	8010650 <__errno>
 8011668:	ed9d 0a01 	vldr	s0, [sp, #4]
 801166c:	6004      	str	r4, [r0, #0]
 801166e:	b002      	add	sp, #8
 8011670:	bd10      	pop	{r4, pc}

08011672 <xflowf>:
 8011672:	b130      	cbz	r0, 8011682 <xflowf+0x10>
 8011674:	eef1 7a40 	vneg.f32	s15, s0
 8011678:	ee27 0a80 	vmul.f32	s0, s15, s0
 801167c:	2022      	movs	r0, #34	; 0x22
 801167e:	f7ff bfed 	b.w	801165c <with_errnof>
 8011682:	eef0 7a40 	vmov.f32	s15, s0
 8011686:	e7f7      	b.n	8011678 <xflowf+0x6>

08011688 <__math_uflowf>:
 8011688:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011690 <__math_uflowf+0x8>
 801168c:	f7ff bff1 	b.w	8011672 <xflowf>
 8011690:	10000000 	.word	0x10000000

08011694 <__math_oflowf>:
 8011694:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801169c <__math_oflowf+0x8>
 8011698:	f7ff bfeb 	b.w	8011672 <xflowf>
 801169c:	70000000 	.word	0x70000000

080116a0 <expm1f>:
 80116a0:	ee10 2a10 	vmov	r2, s0
 80116a4:	497d      	ldr	r1, [pc, #500]	; (801189c <expm1f+0x1fc>)
 80116a6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80116aa:	428b      	cmp	r3, r1
 80116ac:	d921      	bls.n	80116f2 <expm1f+0x52>
 80116ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80116b2:	d902      	bls.n	80116ba <expm1f+0x1a>
 80116b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80116b8:	4770      	bx	lr
 80116ba:	d106      	bne.n	80116ca <expm1f+0x2a>
 80116bc:	2a00      	cmp	r2, #0
 80116be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80116c2:	bfb8      	it	lt
 80116c4:	eeb0 0a67 	vmovlt.f32	s0, s15
 80116c8:	4770      	bx	lr
 80116ca:	2a00      	cmp	r2, #0
 80116cc:	db05      	blt.n	80116da <expm1f+0x3a>
 80116ce:	4974      	ldr	r1, [pc, #464]	; (80118a0 <expm1f+0x200>)
 80116d0:	428b      	cmp	r3, r1
 80116d2:	d95c      	bls.n	801178e <expm1f+0xee>
 80116d4:	2000      	movs	r0, #0
 80116d6:	f7ff bfdd 	b.w	8011694 <__math_oflowf>
 80116da:	eddf 7a72 	vldr	s15, [pc, #456]	; 80118a4 <expm1f+0x204>
 80116de:	ee70 7a27 	vadd.f32	s15, s0, s15
 80116e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80116e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ea:	d550      	bpl.n	801178e <expm1f+0xee>
 80116ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80116f0:	4770      	bx	lr
 80116f2:	496d      	ldr	r1, [pc, #436]	; (80118a8 <expm1f+0x208>)
 80116f4:	428b      	cmp	r3, r1
 80116f6:	d967      	bls.n	80117c8 <expm1f+0x128>
 80116f8:	496c      	ldr	r1, [pc, #432]	; (80118ac <expm1f+0x20c>)
 80116fa:	428b      	cmp	r3, r1
 80116fc:	d847      	bhi.n	801178e <expm1f+0xee>
 80116fe:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80118b0 <expm1f+0x210>
 8011702:	2a00      	cmp	r2, #0
 8011704:	bfa7      	ittee	ge
 8011706:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801170a:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 80118b4 <expm1f+0x214>
 801170e:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 80118b8 <expm1f+0x218>
 8011712:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8011716:	bfac      	ite	ge
 8011718:	2301      	movge	r3, #1
 801171a:	f04f 33ff 	movlt.w	r3, #4294967295
 801171e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011722:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011726:	ee77 7a67 	vsub.f32	s15, s14, s15
 801172a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801172e:	ee20 4a25 	vmul.f32	s8, s0, s11
 8011732:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80118bc <expm1f+0x21c>
 8011736:	eddf 6a62 	vldr	s13, [pc, #392]	; 80118c0 <expm1f+0x220>
 801173a:	ed9f 5a62 	vldr	s10, [pc, #392]	; 80118c4 <expm1f+0x224>
 801173e:	ee20 7a04 	vmul.f32	s14, s0, s8
 8011742:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8011746:	eee7 6a06 	vfma.f32	s13, s14, s12
 801174a:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80118c8 <expm1f+0x228>
 801174e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8011752:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80118cc <expm1f+0x22c>
 8011756:	eee6 6a07 	vfma.f32	s13, s12, s14
 801175a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801175e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011762:	eef0 6a46 	vmov.f32	s13, s12
 8011766:	eee5 6a07 	vfma.f32	s13, s10, s14
 801176a:	eee4 4a66 	vfms.f32	s9, s8, s13
 801176e:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8011772:	eea0 4a64 	vfms.f32	s8, s0, s9
 8011776:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801177a:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801177e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011782:	bb7b      	cbnz	r3, 80117e4 <expm1f+0x144>
 8011784:	eef0 7a47 	vmov.f32	s15, s14
 8011788:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801178c:	e025      	b.n	80117da <expm1f+0x13a>
 801178e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011792:	2a00      	cmp	r2, #0
 8011794:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011798:	bfb8      	it	lt
 801179a:	eef0 7a47 	vmovlt.f32	s15, s14
 801179e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80118d0 <expm1f+0x230>
 80117a2:	eddf 6a43 	vldr	s13, [pc, #268]	; 80118b0 <expm1f+0x210>
 80117a6:	ee40 7a07 	vmla.f32	s15, s0, s14
 80117aa:	eeb0 7a40 	vmov.f32	s14, s0
 80117ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117b2:	ee17 3a90 	vmov	r3, s15
 80117b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117ba:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80117be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80118b4 <expm1f+0x214>
 80117c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80117c6:	e7aa      	b.n	801171e <expm1f+0x7e>
 80117c8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80117cc:	d208      	bcs.n	80117e0 <expm1f+0x140>
 80117ce:	eddf 7a41 	vldr	s15, [pc, #260]	; 80118d4 <expm1f+0x234>
 80117d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80117d6:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80117da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80117de:	4770      	bx	lr
 80117e0:	2300      	movs	r3, #0
 80117e2:	e7a2      	b.n	801172a <expm1f+0x8a>
 80117e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80117e8:	1c5a      	adds	r2, r3, #1
 80117ea:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80117ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80117f2:	d106      	bne.n	8011802 <expm1f+0x162>
 80117f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80117f8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80117fc:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8011800:	4770      	bx	lr
 8011802:	2b01      	cmp	r3, #1
 8011804:	d118      	bne.n	8011838 <expm1f+0x198>
 8011806:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801180a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011812:	bf5b      	ittet	pl
 8011814:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8011818:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801181c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8011820:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8011824:	bf43      	ittte	mi
 8011826:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801182a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801182e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8011832:	eeb0 0a46 	vmovpl.f32	s0, s12
 8011836:	4770      	bx	lr
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	2a39      	cmp	r2, #57	; 0x39
 801183c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8011840:	d90b      	bls.n	801185a <expm1f+0x1ba>
 8011842:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011846:	ee36 0a40 	vsub.f32	s0, s12, s0
 801184a:	ee10 3a10 	vmov	r3, s0
 801184e:	440b      	add	r3, r1
 8011850:	ee00 3a10 	vmov	s0, r3
 8011854:	ee30 0a46 	vsub.f32	s0, s0, s12
 8011858:	4770      	bx	lr
 801185a:	2b16      	cmp	r3, #22
 801185c:	dc11      	bgt.n	8011882 <expm1f+0x1e2>
 801185e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011862:	fa42 f303 	asr.w	r3, r2, r3
 8011866:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801186a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801186e:	ee07 3a90 	vmov	s15, r3
 8011872:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011876:	ee10 3a10 	vmov	r3, s0
 801187a:	440b      	add	r3, r1
 801187c:	ee00 3a10 	vmov	s0, r3
 8011880:	4770      	bx	lr
 8011882:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8011886:	05db      	lsls	r3, r3, #23
 8011888:	ee07 3a10 	vmov	s14, r3
 801188c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011890:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011894:	ee37 0a86 	vadd.f32	s0, s15, s12
 8011898:	e7ed      	b.n	8011876 <expm1f+0x1d6>
 801189a:	bf00      	nop
 801189c:	4195b843 	.word	0x4195b843
 80118a0:	42b17217 	.word	0x42b17217
 80118a4:	0da24260 	.word	0x0da24260
 80118a8:	3eb17218 	.word	0x3eb17218
 80118ac:	3f851591 	.word	0x3f851591
 80118b0:	3f317180 	.word	0x3f317180
 80118b4:	3717f7d1 	.word	0x3717f7d1
 80118b8:	b717f7d1 	.word	0xb717f7d1
 80118bc:	b457edbb 	.word	0xb457edbb
 80118c0:	36867e54 	.word	0x36867e54
 80118c4:	bd088889 	.word	0xbd088889
 80118c8:	b8a670cd 	.word	0xb8a670cd
 80118cc:	3ad00d01 	.word	0x3ad00d01
 80118d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80118d4:	7149f2ca 	.word	0x7149f2ca

080118d8 <fabsf>:
 80118d8:	ee10 3a10 	vmov	r3, s0
 80118dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118e0:	ee00 3a10 	vmov	s0, r3
 80118e4:	4770      	bx	lr

080118e6 <finitef>:
 80118e6:	b082      	sub	sp, #8
 80118e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80118ec:	9801      	ldr	r0, [sp, #4]
 80118ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80118f2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80118f6:	bfac      	ite	ge
 80118f8:	2000      	movge	r0, #0
 80118fa:	2001      	movlt	r0, #1
 80118fc:	b002      	add	sp, #8
 80118fe:	4770      	bx	lr

08011900 <nanf>:
 8011900:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011908 <nanf+0x8>
 8011904:	4770      	bx	lr
 8011906:	bf00      	nop
 8011908:	7fc00000 	.word	0x7fc00000

0801190c <_init>:
 801190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801190e:	bf00      	nop
 8011910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011912:	bc08      	pop	{r3}
 8011914:	469e      	mov	lr, r3
 8011916:	4770      	bx	lr

08011918 <_fini>:
 8011918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801191a:	bf00      	nop
 801191c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801191e:	bc08      	pop	{r3}
 8011920:	469e      	mov	lr, r3
 8011922:	4770      	bx	lr
