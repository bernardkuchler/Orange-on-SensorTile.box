
SensorTile.box-SVM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ab4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08018c80  08018c80  00028c80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080195d8  080195d8  000308a0  2**0
                  CONTENTS
  4 .ARM          00000000  080195d8  080195d8  000308a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080195d8  080195d8  000308a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080195d8  080195d8  000295d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080195dc  080195dc  000295dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008a0  20000000  080195e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002634  200008a0  08019e80  000308a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20002ed4  08019e80  00032ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000308a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e2ba  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062e1  00000000  00000000  0005eb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002678  00000000  00000000  00064e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002388  00000000  00000000  000674e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d4f3  00000000  00000000  00069870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037bfc  00000000  00000000  000a6d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00158b48  00000000  00000000  000de95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002374a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b12c  00000000  00000000  002374f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  00242624  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  002426c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200008a0 	.word	0x200008a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018c5c 	.word	0x08018c5c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200008a4 	.word	0x200008a4
 80001fc:	08018c5c 	.word	0x08018c5c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_frsub>:
 8000c28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	e002      	b.n	8000c34 <__addsf3>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_fsub>:
 8000c30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c34 <__addsf3>:
 8000c34:	0042      	lsls	r2, r0, #1
 8000c36:	bf1f      	itttt	ne
 8000c38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c3c:	ea92 0f03 	teqne	r2, r3
 8000c40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c48:	d06a      	beq.n	8000d20 <__addsf3+0xec>
 8000c4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c52:	bfc1      	itttt	gt
 8000c54:	18d2      	addgt	r2, r2, r3
 8000c56:	4041      	eorgt	r1, r0
 8000c58:	4048      	eorgt	r0, r1
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	bfb8      	it	lt
 8000c5e:	425b      	neglt	r3, r3
 8000c60:	2b19      	cmp	r3, #25
 8000c62:	bf88      	it	hi
 8000c64:	4770      	bxhi	lr
 8000c66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4249      	negne	r1, r1
 8000c86:	ea92 0f03 	teq	r2, r3
 8000c8a:	d03f      	beq.n	8000d0c <__addsf3+0xd8>
 8000c8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c90:	fa41 fc03 	asr.w	ip, r1, r3
 8000c94:	eb10 000c 	adds.w	r0, r0, ip
 8000c98:	f1c3 0320 	rsb	r3, r3, #32
 8000c9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	d502      	bpl.n	8000cac <__addsf3+0x78>
 8000ca6:	4249      	negs	r1, r1
 8000ca8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb0:	d313      	bcc.n	8000cda <__addsf3+0xa6>
 8000cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb6:	d306      	bcc.n	8000cc6 <__addsf3+0x92>
 8000cb8:	0840      	lsrs	r0, r0, #1
 8000cba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cbe:	f102 0201 	add.w	r2, r2, #1
 8000cc2:	2afe      	cmp	r2, #254	; 0xfe
 8000cc4:	d251      	bcs.n	8000d6a <__addsf3+0x136>
 8000cc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cce:	bf08      	it	eq
 8000cd0:	f020 0001 	biceq.w	r0, r0, #1
 8000cd4:	ea40 0003 	orr.w	r0, r0, r3
 8000cd8:	4770      	bx	lr
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	eb40 0000 	adc.w	r0, r0, r0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ce8:	d2ed      	bcs.n	8000cc6 <__addsf3+0x92>
 8000cea:	fab0 fc80 	clz	ip, r0
 8000cee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfa:	bfaa      	itet	ge
 8000cfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d00:	4252      	neglt	r2, r2
 8000d02:	4318      	orrge	r0, r3
 8000d04:	bfbc      	itt	lt
 8000d06:	40d0      	lsrlt	r0, r2
 8000d08:	4318      	orrlt	r0, r3
 8000d0a:	4770      	bx	lr
 8000d0c:	f092 0f00 	teq	r2, #0
 8000d10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d14:	bf06      	itte	eq
 8000d16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1a:	3201      	addeq	r2, #1
 8000d1c:	3b01      	subne	r3, #1
 8000d1e:	e7b5      	b.n	8000c8c <__addsf3+0x58>
 8000d20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d28:	bf18      	it	ne
 8000d2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d2e:	d021      	beq.n	8000d74 <__addsf3+0x140>
 8000d30:	ea92 0f03 	teq	r2, r3
 8000d34:	d004      	beq.n	8000d40 <__addsf3+0x10c>
 8000d36:	f092 0f00 	teq	r2, #0
 8000d3a:	bf08      	it	eq
 8000d3c:	4608      	moveq	r0, r1
 8000d3e:	4770      	bx	lr
 8000d40:	ea90 0f01 	teq	r0, r1
 8000d44:	bf1c      	itt	ne
 8000d46:	2000      	movne	r0, #0
 8000d48:	4770      	bxne	lr
 8000d4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d4e:	d104      	bne.n	8000d5a <__addsf3+0x126>
 8000d50:	0040      	lsls	r0, r0, #1
 8000d52:	bf28      	it	cs
 8000d54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d5e:	bf3c      	itt	cc
 8000d60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bxcc	lr
 8000d66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	4770      	bx	lr
 8000d74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d78:	bf16      	itet	ne
 8000d7a:	4608      	movne	r0, r1
 8000d7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d80:	4601      	movne	r1, r0
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	bf06      	itte	eq
 8000d86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8a:	ea90 0f01 	teqeq	r0, r1
 8000d8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_ui2f>:
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e004      	b.n	8000da4 <__aeabi_i2f+0x8>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_i2f>:
 8000d9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da0:	bf48      	it	mi
 8000da2:	4240      	negmi	r0, r0
 8000da4:	ea5f 0c00 	movs.w	ip, r0
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db0:	4601      	mov	r1, r0
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	e01c      	b.n	8000df2 <__aeabi_l2f+0x2a>

08000db8 <__aeabi_ul2f>:
 8000db8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e00a      	b.n	8000ddc <__aeabi_l2f+0x14>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_l2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd4:	d502      	bpl.n	8000ddc <__aeabi_l2f+0x14>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	ea5f 0c01 	movs.w	ip, r1
 8000de0:	bf02      	ittt	eq
 8000de2:	4684      	moveq	ip, r0
 8000de4:	4601      	moveq	r1, r0
 8000de6:	2000      	moveq	r0, #0
 8000de8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dec:	bf08      	it	eq
 8000dee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000df6:	fabc f28c 	clz	r2, ip
 8000dfa:	3a08      	subs	r2, #8
 8000dfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e00:	db10      	blt.n	8000e24 <__aeabi_l2f+0x5c>
 8000e02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e06:	4463      	add	r3, ip
 8000e08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e14:	fa20 f202 	lsr.w	r2, r0, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	f020 0001 	biceq.w	r0, r0, #1
 8000e22:	4770      	bx	lr
 8000e24:	f102 0220 	add.w	r2, r2, #32
 8000e28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e34:	fa21 f202 	lsr.w	r2, r1, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e42:	4770      	bx	lr

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f001 faa7 	bl	800239a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f828 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 fc0e 	bl	8001670 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e54:	f000 fbe2 	bl	800161c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e58:	f000 f880 	bl	8000f5c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000e5c:	f000 f908 	bl	8001070 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000e60:	f000 f96a 	bl	8001138 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000e64:	f000 f9a8 	bl	80011b8 <MX_I2C3_Init>
  MX_RTC_Init();
 8000e68:	f000 f9e6 	bl	8001238 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000e6c:	f000 fa40 	bl	80012f0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000e70:	f000 fa60 	bl	8001334 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e74:	f000 fa9c 	bl	80013b0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e78:	f000 fad8 	bl	800142c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000e7c:	f000 fb14 	bl	80014a8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e80:	f000 fb60 	bl	8001544 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000e84:	f000 fb94 	bl	80015b0 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000e88:	f00c fad8 	bl	800d43c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000e8c:	f00e fa34 	bl	800f2f8 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000e90:	f000 f8cc 	bl	800102c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000e94:	f00f fb86 	bl	80105a4 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000e98:	f00f fbea 	bl	8010670 <MX_X_CUBE_AI_Process>
 8000e9c:	e7fc      	b.n	8000e98 <main+0x54>
	...

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b096      	sub	sp, #88	; 0x58
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2244      	movs	r2, #68	; 0x44
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f015 fd96 	bl	80169e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f004 fca4 	bl	8005810 <HAL_PWREx_ControlVoltageScaling>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ece:	f000 fd3b 	bl	8001948 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed2:	f004 fc6d 	bl	80057b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <SystemClock_Config+0xb8>)
 8000ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000edc:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <SystemClock_Config+0xb8>)
 8000ede:	f023 0318 	bic.w	r3, r3, #24
 8000ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000ee6:	2325      	movs	r3, #37	; 0x25
 8000ee8:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efc:	2303      	movs	r3, #3
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f00:	2304      	movs	r3, #4
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f04:	233c      	movs	r3, #60	; 0x3c
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fd3d 	bl	8005998 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f24:	f000 fd10 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2105      	movs	r1, #5
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 f943 	bl	80061cc <HAL_RCC_ClockConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f4c:	f000 fcfc 	bl	8001948 <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3758      	adds	r7, #88	; 0x58
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f74:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <MX_ADC1_Init+0xc8>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_ADC1_Init+0xc4>)
 8000fdc:	f001 fc16 	bl	800280c <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 fcaf 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_ADC1_Init+0xcc>)
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff6:	237f      	movs	r3, #127	; 0x7f
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_ADC1_Init+0xc4>)
 8001008:	f001 fd4c 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8001012:	f000 fc99 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200008bc 	.word	0x200008bc
 8001024:	50040000 	.word	0x50040000
 8001028:	21800100 	.word	0x21800100

0800102c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <MX_CRC_Init+0x3c>)
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <MX_CRC_Init+0x40>)
 8001034:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_CRC_Init+0x3c>)
 8001038:	2200      	movs	r2, #0
 800103a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_CRC_Init+0x3c>)
 800103e:	2200      	movs	r2, #0
 8001040:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_CRC_Init+0x3c>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_CRC_Init+0x3c>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_CRC_Init+0x3c>)
 8001050:	2201      	movs	r2, #1
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_CRC_Init+0x3c>)
 8001056:	f002 fa33 	bl	80034c0 <HAL_CRC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001060:	f000 fc72 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000924 	.word	0x20000924
 800106c:	40023000 	.word	0x40023000

08001070 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <MX_DFSDM1_Init+0xbc>)
 8001078:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001082:	2201      	movs	r2, #1
 8001084:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001088:	2201      	movs	r2, #1
 800108a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 800108e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001092:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001096:	22c0      	movs	r2, #192	; 0xc0
 8001098:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 800109c:	2201      	movs	r2, #1
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 80010a2:	f002 fbb7 	bl	8003814 <HAL_DFSDM_FilterInit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80010ac:	f000 fc4c 	bl	8001948 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010b2:	4a20      	ldr	r2, [pc, #128]	; (8001134 <MX_DFSDM1_Init+0xc4>)
 80010b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_DFSDM1_Init+0xc0>)
 8001102:	f002 fac7 	bl	8003694 <HAL_DFSDM_ChannelInit>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 800110c:	f000 fc1c 	bl	8001948 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001110:	2201      	movs	r2, #1
 8001112:	2101      	movs	r1, #1
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_DFSDM1_Init+0xb8>)
 8001116:	f002 fc57 	bl	80039c8 <HAL_DFSDM_FilterConfigRegChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8001120:	f000 fc12 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000948 	.word	0x20000948
 800112c:	40016100 	.word	0x40016100
 8001130:	2000099c 	.word	0x2000099c
 8001134:	40016000 	.word	0x40016000

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C1_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_I2C1_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_I2C1_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <MX_I2C1_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_I2C1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <MX_I2C1_Init+0x74>)
 8001174:	f003 f836 	bl	80041e4 <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 fbe3 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <MX_I2C1_Init+0x74>)
 8001186:	f003 f8bc 	bl	8004302 <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 fbda 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_I2C1_Init+0x74>)
 8001198:	f003 f8fe 	bl	8004398 <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fbd1 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000a34 	.word	0x20000a34
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00b03fdb 	.word	0x00b03fdb

080011b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_I2C3_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_I2C3_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_I2C3_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_I2C3_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_I2C3_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_I2C3_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_I2C3_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_I2C3_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C3_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <MX_I2C3_Init+0x74>)
 80011f4:	f002 fff6 	bl	80041e4 <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 fba3 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <MX_I2C3_Init+0x74>)
 8001206:	f003 f87c 	bl	8004302 <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 fb9a 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_I2C3_Init+0x74>)
 8001218:	f003 f8be 	bl	8004398 <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fb91 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000a88 	.word	0x20000a88
 8001230:	40005c00 	.word	0x40005c00
 8001234:	00b03fdb 	.word	0x00b03fdb

08001238 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001252:	4a26      	ldr	r2, [pc, #152]	; (80012ec <MX_RTC_Init+0xb4>)
 8001254:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_RTC_Init+0xb0>)
 800125e:	227f      	movs	r2, #127	; 0x7f
 8001260:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_RTC_Init+0xb0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_RTC_Init+0xb0>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001282:	f007 f807 	bl	8008294 <HAL_RTC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800128c:	f000 fb5c 	bl	8001948 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <MX_RTC_Init+0xb0>)
 80012ac:	f007 f86d 	bl	800838a <HAL_RTC_SetTime>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012b6:	f000 fb47 	bl	8001948 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80012ba:	2302      	movs	r3, #2
 80012bc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80012be:	2304      	movs	r3, #4
 80012c0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80012c2:	2303      	movs	r3, #3
 80012c4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80012c6:	2314      	movs	r3, #20
 80012c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_RTC_Init+0xb0>)
 80012d2:	f007 f8f7 	bl	80084c4 <HAL_RTC_SetDate>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012dc:	f000 fb34 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000adc 	.word	0x20000adc
 80012ec:	40002800 	.word	0x40002800

080012f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <MX_SDMMC1_SD_Init+0x40>)
 80012f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <MX_SDMMC1_SD_Init+0x3c>)
 800131c:	2201      	movs	r2, #1
 800131e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000b00 	.word	0x20000b00
 8001330:	50062400 	.word	0x50062400

08001334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_SPI1_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_SPI1_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI1_Init+0x74>)
 800134e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001356:	2202      	movs	r2, #2
 8001358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_SPI1_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI1_Init+0x74>)
 800136a:	2218      	movs	r2, #24
 800136c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_SPI1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001382:	2207      	movs	r2, #7
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_SPI1_Init+0x74>)
 8001394:	f008 fec9 	bl	800a12a <HAL_SPI_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 fad3 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000b80 	.word	0x20000b80
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_SPI2_Init+0x74>)
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <MX_SPI2_Init+0x78>)
 80013b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_SPI2_Init+0x74>)
 80013bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_SPI2_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_SPI2_Init+0x74>)
 80013ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_SPI2_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_SPI2_Init+0x74>)
 80013d8:	2201      	movs	r2, #1
 80013da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_SPI2_Init+0x74>)
 80013de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_SPI2_Init+0x74>)
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_SPI2_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_SPI2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_SPI2_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_SPI2_Init+0x74>)
 80013fe:	2207      	movs	r2, #7
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_SPI2_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_SPI2_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_SPI2_Init+0x74>)
 8001410:	f008 fe8b 	bl	800a12a <HAL_SPI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800141a:	f000 fa95 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000be4 	.word	0x20000be4
 8001428:	40003800 	.word	0x40003800

0800142c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <MX_SPI3_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001446:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800144a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI3_Init+0x74>)
 800144e:	2202      	movs	r2, #2
 8001450:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001454:	2201      	movs	r2, #1
 8001456:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI3_Init+0x74>)
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001462:	2218      	movs	r2, #24
 8001464:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI3_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI3_Init+0x74>)
 800147a:	2207      	movs	r2, #7
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_SPI3_Init+0x74>)
 800148c:	f008 fe4d 	bl	800a12a <HAL_SPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 fa57 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000c48 	.word	0x20000c48
 80014a4:	40003c00 	.word	0x40003c00

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_TIM2_Init+0x98>)
 80014c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_TIM2_Init+0x98>)
 80014d0:	2277      	movs	r2, #119	; 0x77
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_TIM2_Init+0x98>)
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_TIM2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM2_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ee:	4814      	ldr	r0, [pc, #80]	; (8001540 <MX_TIM2_Init+0x98>)
 80014f0:	f009 fa36 	bl	800a960 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014fa:	f000 fa25 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_TIM2_Init+0x98>)
 800150c:	f009 fb9e 	bl	800ac4c <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001516:	f000 fa17 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_TIM2_Init+0x98>)
 8001528:	f009 fdc0 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001532:	f000 fa09 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000cac 	.word	0x20000cac

08001544 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_TIM6_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_TIM6_Init+0x64>)
 800155c:	2277      	movs	r2, #119	; 0x77
 800155e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001576:	f009 f9f3 	bl	800a960 <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001580:	f000 f9e2 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001592:	f009 fd8b 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800159c:	f000 f9d4 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000cf8 	.word	0x20000cf8
 80015ac:	40001000 	.word	0x40001000

080015b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_TIM7_Init+0x64>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM7_Init+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM7_Init+0x64>)
 80015c8:	2277      	movs	r2, #119	; 0x77
 80015ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_TIM7_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM7_Init+0x64>)
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM7_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_TIM7_Init+0x64>)
 80015e2:	f009 f9bd 	bl	800a960 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015ec:	f000 f9ac 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM7_Init+0x64>)
 80015fe:	f009 fd55 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 f99e 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000d44 	.word	0x20000d44
 8001618:	40001400 	.word	0x40001400

0800161c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_DMA_Init+0x50>)
 8001624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <MX_DMA_Init+0x50>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6493      	str	r3, [r2, #72]	; 0x48
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_DMA_Init+0x50>)
 8001630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_DMA_Init+0x50>)
 800163c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <MX_DMA_Init+0x50>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6493      	str	r3, [r2, #72]	; 0x48
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_DMA_Init+0x50>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	200e      	movs	r0, #14
 8001658:	f001 fefb 	bl	8003452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800165c:	200e      	movs	r0, #14
 800165e:	f001 ff14 	bl	800348a <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4ba9      	ldr	r3, [pc, #676]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4aa8      	ldr	r2, [pc, #672]	; (800192c <MX_GPIO_Init+0x2bc>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4ba6      	ldr	r3, [pc, #664]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	623b      	str	r3, [r7, #32]
 800169c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4ba3      	ldr	r3, [pc, #652]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4aa2      	ldr	r2, [pc, #648]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4ba0      	ldr	r3, [pc, #640]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b9d      	ldr	r3, [pc, #628]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a9c      	ldr	r2, [pc, #624]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b9a      	ldr	r3, [pc, #616]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b97      	ldr	r3, [pc, #604]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a96      	ldr	r2, [pc, #600]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b94      	ldr	r3, [pc, #592]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b91      	ldr	r3, [pc, #580]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a90      	ldr	r2, [pc, #576]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <MX_GPIO_Init+0x2bc>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <MX_GPIO_Init+0x2bc>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001716:	4b85      	ldr	r3, [pc, #532]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a84      	ldr	r2, [pc, #528]	; (800192c <MX_GPIO_Init+0x2bc>)
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b82      	ldr	r3, [pc, #520]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800172e:	f004 f923 	bl	8005978 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001732:	4b7e      	ldr	r3, [pc, #504]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a7d      	ldr	r2, [pc, #500]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <MX_GPIO_Init+0x2bc>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f002 fd2e 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8001758:	2201      	movs	r2, #1
 800175a:	f641 4130 	movw	r1, #7216	; 0x1c30
 800175e:	4874      	ldr	r0, [pc, #464]	; (8001930 <MX_GPIO_Init+0x2c0>)
 8001760:	f002 fd28 	bl	80041b4 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2105      	movs	r1, #5
 8001768:	4872      	ldr	r0, [pc, #456]	; (8001934 <MX_GPIO_Init+0x2c4>)
 800176a:	f002 fd23 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001774:	4870      	ldr	r0, [pc, #448]	; (8001938 <MX_GPIO_Init+0x2c8>)
 8001776:	f002 fd1d 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	486d      	ldr	r0, [pc, #436]	; (8001934 <MX_GPIO_Init+0x2c4>)
 8001780:	f002 fd18 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2110      	movs	r1, #16
 8001788:	486b      	ldr	r0, [pc, #428]	; (8001938 <MX_GPIO_Init+0x2c8>)
 800178a:	f002 fd13 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4869      	ldr	r0, [pc, #420]	; (800193c <MX_GPIO_Init+0x2cc>)
 8001796:	f002 fd0d 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 800179a:	2348      	movs	r3, #72	; 0x48
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4860      	ldr	r0, [pc, #384]	; (8001930 <MX_GPIO_Init+0x2c0>)
 80017b0:	f002 fb56 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c4:	2307      	movs	r3, #7
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	485c      	ldr	r0, [pc, #368]	; (8001940 <MX_GPIO_Init+0x2d0>)
 80017d0:	f002 fb46 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 80017d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017da:	2311      	movs	r3, #17
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f002 fb36 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 80017f4:	2330      	movs	r3, #48	; 0x30
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4849      	ldr	r0, [pc, #292]	; (8001930 <MX_GPIO_Init+0x2c0>)
 800180c:	f002 fb28 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8001810:	2385      	movs	r3, #133	; 0x85
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4843      	ldr	r0, [pc, #268]	; (8001934 <MX_GPIO_Init+0x2c4>)
 8001828:	f002 fb1a 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 800182c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	4619      	mov	r1, r3
 8001844:	483c      	ldr	r0, [pc, #240]	; (8001938 <MX_GPIO_Init+0x2c8>)
 8001846:	f002 fb0b 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 800184a:	2308      	movs	r3, #8
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4836      	ldr	r0, [pc, #216]	; (8001938 <MX_GPIO_Init+0x2c8>)
 800185e:	f002 faff 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8001862:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001868:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4831      	ldr	r0, [pc, #196]	; (8001940 <MX_GPIO_Init+0x2d0>)
 800187a:	f002 faf1 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 800187e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001884:	2311      	movs	r3, #17
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4826      	ldr	r0, [pc, #152]	; (8001930 <MX_GPIO_Init+0x2c0>)
 8001898:	f002 fae2 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 800189c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4821      	ldr	r0, [pc, #132]	; (800193c <MX_GPIO_Init+0x2cc>)
 80018b6:	f002 fad3 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 80018ba:	2320      	movs	r3, #32
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	481d      	ldr	r0, [pc, #116]	; (8001944 <MX_GPIO_Init+0x2d4>)
 80018d0:	f002 fac6 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 80018d4:	2304      	movs	r3, #4
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f002 fab8 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_GPIO_Init+0x2cc>)
 8001906:	f002 faab 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 800190a:	2302      	movs	r3, #2
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800190e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_GPIO_Init+0x2c8>)
 8001920:	f002 fa9e 	bl	8003e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001924:	bf00      	nop
 8001926:	3738      	adds	r7, #56	; 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	48001000 	.word	0x48001000
 8001934:	48001400 	.word	0x48001400
 8001938:	48001800 	.word	0x48001800
 800193c:	48000400 	.word	0x48000400
 8001940:	48000c00 	.word	0x48000c00
 8001944:	48000800 	.word	0x48000800

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_MspInit+0x44>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x44>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0b2      	sub	sp, #200	; 0xc8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	229c      	movs	r2, #156	; 0x9c
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f015 f80f 	bl	80169e0 <memset>
  if(hadc->Instance==ADC1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a35      	ldr	r2, [pc, #212]	; (8001a9c <HAL_ADC_MspInit+0x100>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d162      	bne.n	8001a92 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80019da:	2303      	movs	r3, #3
 80019dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80019de:	2305      	movs	r3, #5
 80019e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80019e2:	2360      	movs	r3, #96	; 0x60
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80019ea:	2304      	movs	r3, #4
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80019ee:	2304      	movs	r3, #4
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fe9f 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001a08:	f7ff ff9e 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_ADC_MspInit+0x104>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8001a54:	2310      	movs	r3, #16
 8001a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a5a:	230b      	movs	r3, #11
 8001a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <HAL_ADC_MspInit+0x108>)
 8001a6e:	f002 f9f7 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8001a72:	2308      	movs	r3, #8
 8001a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a78:	230b      	movs	r3, #11
 8001a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f002 f9e7 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	37c8      	adds	r7, #200	; 0xc8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	50040000 	.word	0x50040000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000800 	.word	0x48000800

08001aa8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_CRC_MspInit+0x38>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_CRC_MspInit+0x3c>)
 8001abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_CRC_MspInit+0x3c>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_CRC_MspInit+0x3c>)
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023000 	.word	0x40023000
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0aa      	sub	sp, #168	; 0xa8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	229c      	movs	r2, #156	; 0x9c
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f014 ff71 	bl	80169e0 <memset>
  if(DFSDM1_Init == 0)
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d129      	bne.n	8001b5a <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fe12 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 8001b22:	f7ff ff11 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_DFSDM_FilterMspInit+0xec>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_DFSDM_FilterMspInit+0xec>)
 8001b2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_DFSDM_FilterMspInit+0xec>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10b      	bne.n	8001b50 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_DFSDM_FilterMspInit+0xf0>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_DFSDM_FilterMspInit+0xf0>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6613      	str	r3, [r2, #96]	; 0x60
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_DFSDM_FilterMspInit+0xf0>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001b58:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_DFSDM_FilterMspInit+0xf4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d131      	bne.n	8001bc8 <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_DFSDM_FilterMspInit+0xfc>)
 8001b68:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b6c:	2256      	movs	r2, #86	; 0x56
 8001b6e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b94:	2220      	movs	r2, #32
 8001b96:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001ba2:	f001 ffa3 	bl	8003aec <HAL_DMA_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8001bac:	f7ff fecc 	bl	8001948 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001bc8:	bf00      	nop
 8001bca:	37a8      	adds	r7, #168	; 0xa8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000d94 	.word	0x20000d94
 8001bd4:	20000d90 	.word	0x20000d90
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40016100 	.word	0x40016100
 8001be0:	200009d4 	.word	0x200009d4
 8001be4:	40020044 	.word	0x40020044

08001be8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0aa      	sub	sp, #168	; 0xa8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	229c      	movs	r2, #156	; 0x9c
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f014 fef1 	bl	80169e0 <memset>
  if(DFSDM1_Init == 0)
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d129      	bne.n	8001c5a <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 fd92 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8001c22:	f7ff fe91 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d10b      	bne.n	8001c50 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	6613      	str	r3, [r2, #96]	; 0x60
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001c58:	6013      	str	r3, [r2, #0]
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	37a8      	adds	r7, #168	; 0xa8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000d94 	.word	0x20000d94
 8001c68:	20000d90 	.word	0x20000d90
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0b2      	sub	sp, #200	; 0xc8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	229c      	movs	r2, #156	; 0x9c
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f014 fea5 	bl	80169e0 <memset>
  if(hi2c->Instance==I2C1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a43      	ldr	r2, [pc, #268]	; (8001da8 <HAL_I2C_MspInit+0x138>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d13b      	bne.n	8001d18 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 fd47 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cb8:	f7ff fe46 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8001cd4:	23c0      	movs	r3, #192	; 0xc0
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cda:	2312      	movs	r3, #18
 8001cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cec:	2304      	movs	r3, #4
 8001cee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482d      	ldr	r0, [pc, #180]	; (8001db0 <HAL_I2C_MspInit+0x140>)
 8001cfa:	f002 f8b1 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d16:	e043      	b.n	8001da0 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <HAL_I2C_MspInit+0x144>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d13e      	bne.n	8001da0 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 fd05 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001d3c:	f7ff fe04 	bl	8001948 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001d58:	f003 fe0e 	bl	8005978 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001d5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d76:	2304      	movs	r3, #4
 8001d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <HAL_I2C_MspInit+0x148>)
 8001d84:	f002 f86c 	bl	8003e60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d92:	6593      	str	r3, [r2, #88]	; 0x58
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_I2C_MspInit+0x13c>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
}
 8001da0:	bf00      	nop
 8001da2:	37c8      	adds	r7, #200	; 0xc8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40005400 	.word	0x40005400
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	40005c00 	.word	0x40005c00
 8001db8:	48001800 	.word	0x48001800

08001dbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0aa      	sub	sp, #168	; 0xa8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	229c      	movs	r2, #156	; 0x9c
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f014 fe07 	bl	80169e0 <memset>
  if(hrtc->Instance==RTC)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_RTC_MspInit+0x5c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d118      	bne.n	8001e0e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fca6 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dfa:	f7ff fda5 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RTC_MspInit+0x60>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e04:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_RTC_MspInit+0x60>)
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	37a8      	adds	r7, #168	; 0xa8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40002800 	.word	0x40002800
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0b2      	sub	sp, #200	; 0xc8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	229c      	movs	r2, #156	; 0x9c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f014 fdcd 	bl	80169e0 <memset>
  if(hsd->Instance==SDMMC1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a53      	ldr	r2, [pc, #332]	; (8001f98 <HAL_SD_MspInit+0x178>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	f040 809f 	bne.w	8001f90 <HAL_SD_MspInit+0x170>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001e52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001e58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 fc6b 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e70:	f7ff fd6a 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e90:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a3c      	ldr	r2, [pc, #240]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ebc:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	4a36      	ldr	r2, [pc, #216]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001ec2:	f043 0308 	orr.w	r3, r3, #8
 8001ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_SD_MspInit+0x17c>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 8001ed4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4829      	ldr	r0, [pc, #164]	; (8001fa0 <HAL_SD_MspInit+0x180>)
 8001efc:	f001 ffb0 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8001f00:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f24:	4619      	mov	r1, r3
 8001f26:	481f      	ldr	r0, [pc, #124]	; (8001fa4 <HAL_SD_MspInit+0x184>)
 8001f28:	f001 ff9a 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f44:	230c      	movs	r3, #12
 8001f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4815      	ldr	r0, [pc, #84]	; (8001fa8 <HAL_SD_MspInit+0x188>)
 8001f52:	f001 ff85 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <HAL_SD_MspInit+0x184>)
 8001f7c:	f001 ff70 	bl	8003e60 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2031      	movs	r0, #49	; 0x31
 8001f86:	f001 fa64 	bl	8003452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001f8a:	2031      	movs	r0, #49	; 0x31
 8001f8c:	f001 fa7d 	bl	800348a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	37c8      	adds	r7, #200	; 0xc8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	50062400 	.word	0x50062400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	; 0x38
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a64      	ldr	r2, [pc, #400]	; (800215c <HAL_SPI_MspInit+0x1b0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d13a      	bne.n	8002044 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fda:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8001ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002010:	2305      	movs	r3, #5
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4852      	ldr	r0, [pc, #328]	; (8002164 <HAL_SPI_MspInit+0x1b8>)
 800201c:	f001 ff20 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8002020:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002032:	2305      	movs	r3, #5
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4849      	ldr	r0, [pc, #292]	; (8002164 <HAL_SPI_MspInit+0x1b8>)
 800203e:	f001 ff0f 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002042:	e086      	b.n	8002152 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_SPI_MspInit+0x1bc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d144      	bne.n	80020d8 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4a37      	ldr	r2, [pc, #220]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208a:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 8002096:	230a      	movs	r3, #10
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a6:	2305      	movs	r3, #5
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	482e      	ldr	r0, [pc, #184]	; (800216c <HAL_SPI_MspInit+0x1c0>)
 80020b2:	f001 fed5 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80020b6:	2308      	movs	r3, #8
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c6:	2305      	movs	r3, #5
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	4827      	ldr	r0, [pc, #156]	; (8002170 <HAL_SPI_MspInit+0x1c4>)
 80020d2:	f001 fec5 	bl	8003e60 <HAL_GPIO_Init>
}
 80020d6:	e03c      	b.n	8002152 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_SPI_MspInit+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d137      	bne.n	8002152 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_SPI_MspInit+0x1b4>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8002112:	2330      	movs	r3, #48	; 0x30
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002122:	2306      	movs	r3, #6
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212a:	4619      	mov	r1, r3
 800212c:	4812      	ldr	r0, [pc, #72]	; (8002178 <HAL_SPI_MspInit+0x1cc>)
 800212e:	f001 fe97 	bl	8003e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 8002132:	2308      	movs	r3, #8
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213a:	2301      	movs	r3, #1
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002142:	2306      	movs	r3, #6
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	480a      	ldr	r0, [pc, #40]	; (8002178 <HAL_SPI_MspInit+0x1cc>)
 800214e:	f001 fe87 	bl	8003e60 <HAL_GPIO_Init>
}
 8002152:	bf00      	nop
 8002154:	3738      	adds	r7, #56	; 0x38
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40013000 	.word	0x40013000
 8002160:	40021000 	.word	0x40021000
 8002164:	48001000 	.word	0x48001000
 8002168:	40003800 	.word	0x40003800
 800216c:	48000c00 	.word	0x48000c00
 8002170:	48000800 	.word	0x48000800
 8002174:	40003c00 	.word	0x40003c00
 8002178:	48000400 	.word	0x48000400

0800217c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d10c      	bne.n	80021a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021a6:	e02a      	b.n	80021fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_TIM_Base_MspInit+0x90>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d114      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2036      	movs	r0, #54	; 0x36
 80021d0:	f001 f93f 	bl	8003452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d4:	2036      	movs	r0, #54	; 0x36
 80021d6:	f001 f958 	bl	800348a <HAL_NVIC_EnableIRQ>
}
 80021da:	e010      	b.n	80021fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_TIM_Base_MspInit+0x94>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10b      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021ec:	f043 0320 	orr.w	r3, r3, #32
 80021f0:	6593      	str	r3, [r2, #88]	; 0x58
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_TIM_Base_MspInit+0x8c>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40001000 	.word	0x40001000
 8002210:	40001400 	.word	0x40001400

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x4>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002260:	f000 f8f0 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA1_Channel4_IRQHandler+0x10>)
 800226e:	f001 fce5 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200009d4 	.word	0x200009d4

0800227c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <SDMMC1_IRQHandler+0x10>)
 8002282:	f006 fcd5 	bl	8008c30 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000b00 	.word	0x20000b00

08002290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIM6_DAC_IRQHandler+0x10>)
 8002296:	f008 fbba 	bl	800aa0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000cf8 	.word	0x20000cf8

080022a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <OTG_FS_IRQHandler+0x10>)
 80022aa:	f002 fa14 	bl	80046d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200022b4 	.word	0x200022b4

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f014 fb42 	bl	8016970 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200a0000 	.word	0x200a0000
 8002318:	00000800 	.word	0x00000800
 800231c:	20000d98 	.word	0x20000d98
 8002320:	20002ed8 	.word	0x20002ed8

08002324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <SystemInit+0x20>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <SystemInit+0x20>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800234c:	f7ff ffea 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	480c      	ldr	r0, [pc, #48]	; (8002384 <LoopForever+0x6>)
  ldr r1, =_edata
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <LoopForever+0xe>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002368:	4c0a      	ldr	r4, [pc, #40]	; (8002394 <LoopForever+0x16>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002376:	f014 fb01 	bl	801697c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800237a:	f7fe fd63 	bl	8000e44 <main>

0800237e <LoopForever>:

LoopForever:
    b LoopForever
 800237e:	e7fe      	b.n	800237e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002380:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	200008a0 	.word	0x200008a0
  ldr r2, =_sidata
 800238c:	080195e0 	.word	0x080195e0
  ldr r2, =_sbss
 8002390:	200008a0 	.word	0x200008a0
  ldr r4, =_ebss
 8002394:	20002ed4 	.word	0x20002ed4

08002398 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC1_IRQHandler>

0800239a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f001 f849 	bl	800343c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023aa:	2000      	movs	r0, #0
 80023ac:	f000 f80e 	bl	80023cc <HAL_InitTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	e001      	b.n	80023c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023bc:	f7ff faca 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023c0:	79fb      	ldrb	r3, [r7, #7]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_InitTick+0x6c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_InitTick+0x70>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_InitTick+0x6c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f855 	bl	80034a6 <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d809      	bhi.n	800241c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f001 f81f 	bl	8003452 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_InitTick+0x74>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e007      	b.n	800242c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e004      	b.n	800242c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e001      	b.n	800242c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000008 	.word	0x20000008
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	20000d9c 	.word	0x20000d9c

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000d9c 	.word	0x20000d9c

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008

080024cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	609a      	str	r2, [r3, #8]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <LL_ADC_SetOffset+0x44>)
 8002556:	4013      	ands	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	4313      	orrs	r3, r2
 8002564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	03fff000 	.word	0x03fff000

0800257c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3360      	adds	r3, #96	; 0x60
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	615a      	str	r2, [r3, #20]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3330      	adds	r3, #48	; 0x30
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	4413      	add	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	211f      	movs	r1, #31
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 011f 	and.w	r1, r3, #31
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3314      	adds	r3, #20
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0e5b      	lsrs	r3, r3, #25
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	0d1b      	lsrs	r3, r3, #20
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2107      	movs	r1, #7
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	401a      	ands	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	0d1b      	lsrs	r3, r3, #20
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	43db      	mvns	r3, r3
 80026ce:	401a      	ands	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0318 	and.w	r3, r3, #24
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026d8:	40d9      	lsrs	r1, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	400b      	ands	r3, r1
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	0007ffff 	.word	0x0007ffff

080026fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800270c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6093      	str	r3, [r2, #8]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002734:	d101      	bne.n	800273a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800275c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002784:	d101      	bne.n	800278a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <LL_ADC_IsEnabled+0x18>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <LL_ADC_IsEnabled+0x1a>
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d101      	bne.n	80027d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d101      	bne.n	80027fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e12f      	b.n	8002a86 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff f8b1 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff67 	bl	8002720 <LL_ADC_IsDeepPowerDownEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff4d 	bl	80026fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff82 	bl	8002770 <LL_ADC_IsInternalRegulatorEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff66 	bl	8002748 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800287c:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <HAL_ADC_Init+0x284>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	4a84      	ldr	r2, [pc, #528]	; (8002a94 <HAL_ADC_Init+0x288>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002890:	e002      	b.n	8002898 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3b01      	subs	r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f9      	bne.n	8002892 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff64 	bl	8002770 <LL_ADC_IsInternalRegulatorEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f043 0210 	orr.w	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff75 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 80028d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 80c8 	bne.w	8002a74 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 80c4 	bne.w	8002a74 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028f4:	f043 0202 	orr.w	r2, r3, #2
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff49 	bl	8002798 <LL_ADC_IsEnabled>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290c:	4862      	ldr	r0, [pc, #392]	; (8002a98 <HAL_ADC_Init+0x28c>)
 800290e:	f7ff ff43 	bl	8002798 <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4619      	mov	r1, r3
 800291e:	485f      	ldr	r0, [pc, #380]	; (8002a9c <HAL_ADC_Init+0x290>)
 8002920:	f7ff fdd4 	bl	80024cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e5b      	ldrb	r3, [r3, #25]
 8002928:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800292e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002934:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800293a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002942:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d106      	bne.n	8002960 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	3b01      	subs	r3, #1
 8002958:	045b      	lsls	r3, r3, #17
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_ADC_Init+0x294>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	430b      	orrs	r3, r1
 800298e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff12 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 800299a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff1f 	bl	80027e4 <LL_ADC_INJ_IsConversionOngoing>
 80029a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d140      	bne.n	8002a30 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d13d      	bne.n	8002a30 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7e1b      	ldrb	r3, [r3, #24]
 80029bc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029be:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d6:	f023 0306 	bic.w	r3, r3, #6
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d118      	bne.n	8002a20 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a10:	430a      	orrs	r2, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	e007      	b.n	8002a30 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10c      	bne.n	8002a52 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f023 010f 	bic.w	r1, r3, #15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a50:	e007      	b.n	8002a62 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020f 	bic.w	r2, r2, #15
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	659a      	str	r2, [r3, #88]	; 0x58
 8002a72:	e007      	b.n	8002a84 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f043 0210 	orr.w	r2, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	50040000 	.word	0x50040000
 8002a9c:	50040300 	.word	0x50040300
 8002aa0:	fff0c007 	.word	0xfff0c007

08002aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0b6      	sub	sp, #216	; 0xd8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x22>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e3d5      	b.n	8003272 <HAL_ADC_ConfigChannel+0x7ce>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fe73 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 83ba 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d824      	bhi.n	8002b32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	3b02      	subs	r3, #2
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d81b      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x86>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <HAL_ADC_ConfigChannel+0x54>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b11 	.word	0x08002b11
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b21 	.word	0x08002b21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	605a      	str	r2, [r3, #4]
          break;
 8002b0e:	e011      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2212      	movs	r2, #18
 8002b14:	605a      	str	r2, [r3, #4]
          break;
 8002b16:	e00d      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	605a      	str	r2, [r3, #4]
          break;
 8002b1e:	e009      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b26:	605a      	str	r2, [r3, #4]
          break;
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	605a      	str	r2, [r3, #4]
          break;
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f7ff fd5f 	bl	8002604 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fe37 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 8002b50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fe43 	bl	80027e4 <LL_ADC_INJ_IsConversionOngoing>
 8002b5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 81c1 	bne.w	8002eee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 81bc 	bne.w	8002eee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7ff fd66 	bl	800265c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fd20 	bl	80025de <LL_ADC_SetSamplingTimeCommonConfig>
 8002b9e:	e00e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f7ff fd55 	bl	800265c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fd10 	bl	80025de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d00a      	beq.n	8002bf6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6919      	ldr	r1, [r3, #16]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bf0:	f7ff fca0 	bl	8002534 <LL_ADC_SetOffset>
 8002bf4:	e17b      	b.n	8002eee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fcbd 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x17e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fcb2 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	e01e      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x1bc>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fca7 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e004      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x1d4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	e018      	b.n	8002caa <HAL_ADC_ConfigChannel+0x206>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e004      	b.n	8002caa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fc76 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fc5a 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x244>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fc4f 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	f003 021f 	and.w	r2, r3, #31
 8002ce6:	e01e      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x282>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fc44 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e004      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x29a>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	e018      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x2cc>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e004      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d106      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fc13 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fbf7 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x30a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fbec 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	e01e      	b.n	8002dec <HAL_ADC_ConfigChannel+0x348>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fbe1 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e004      	b.n	8002dea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x360>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	e016      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x38e>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e004      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fbb2 	bl	80025a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2103      	movs	r1, #3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb96 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x3cc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2103      	movs	r1, #3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fb8b 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	e017      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x3fc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2103      	movs	r1, #3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fb80 	bl	800257c <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e003      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x414>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	e011      	b.n	8002edc <HAL_ADC_ConfigChannel+0x438>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fb5d 	bl	80025a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fc50 	bl	8002798 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 8140 	bne.w	8003180 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f7ff fbd1 	bl	80026b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4a8f      	ldr	r2, [pc, #572]	; (8003154 <HAL_ADC_ConfigChannel+0x6b0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	f040 8131 	bne.w	8003180 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x4a2>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	bf94      	ite	ls
 8002f3e:	2301      	movls	r3, #1
 8002f40:	2300      	movhi	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	e019      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x4d6>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d079      	beq.n	8003072 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d107      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x4f6>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	0e9b      	lsrs	r3, r3, #26
 8002f90:	3301      	adds	r3, #1
 8002f92:	069b      	lsls	r3, r3, #26
 8002f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f98:	e015      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x522>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e003      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	069b      	lsls	r3, r3, #26
 8002fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x542>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	e017      	b.n	8003016 <HAL_ADC_ConfigChannel+0x572>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002ffe:	2320      	movs	r3, #32
 8003000:	e003      	b.n	800300a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	ea42 0103 	orr.w	r1, r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_ADC_ConfigChannel+0x598>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	3301      	adds	r3, #1
 800302e:	f003 021f 	and.w	r2, r3, #31
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	051b      	lsls	r3, r3, #20
 800303a:	e018      	b.n	800306e <HAL_ADC_ConfigChannel+0x5ca>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800304e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800306e:	430b      	orrs	r3, r1
 8003070:	e081      	b.n	8003176 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_ADC_ConfigChannel+0x5ea>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	3301      	adds	r3, #1
 8003086:	069b      	lsls	r3, r3, #26
 8003088:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308c:	e015      	b.n	80030ba <HAL_ADC_ConfigChannel+0x616>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e003      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	069b      	lsls	r3, r3, #26
 80030b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_ADC_ConfigChannel+0x636>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	3301      	adds	r3, #1
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	e017      	b.n	800310a <HAL_ADC_ConfigChannel+0x666>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	61fb      	str	r3, [r7, #28]
  return result;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x692>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	3301      	adds	r3, #1
 8003122:	f003 021f 	and.w	r2, r3, #31
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	3b1e      	subs	r3, #30
 800312e:	051b      	lsls	r3, r3, #20
 8003130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003134:	e01e      	b.n	8003174 <HAL_ADC_ConfigChannel+0x6d0>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	613b      	str	r3, [r7, #16]
  return result;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800314e:	2320      	movs	r3, #32
 8003150:	e006      	b.n	8003160 <HAL_ADC_ConfigChannel+0x6bc>
 8003152:	bf00      	nop
 8003154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1e      	subs	r3, #30
 800316e:	051b      	lsls	r3, r3, #20
 8003170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003174:	430b      	orrs	r3, r1
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	6892      	ldr	r2, [r2, #8]
 800317a:	4619      	mov	r1, r3
 800317c:	f7ff fa6e 	bl	800265c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_ADC_ConfigChannel+0x7d8>)
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d06c      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800318c:	483c      	ldr	r0, [pc, #240]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 800318e:	f7ff f9c3 	bl	8002518 <LL_ADC_GetCommonPathInternalCh>
 8003192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3a      	ldr	r2, [pc, #232]	; (8003284 <HAL_ADC_ConfigChannel+0x7e0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d127      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d121      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a35      	ldr	r2, [pc, #212]	; (8003288 <HAL_ADC_ConfigChannel+0x7e4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d157      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031be:	4619      	mov	r1, r3
 80031c0:	482f      	ldr	r0, [pc, #188]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 80031c2:	f7ff f996 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <HAL_ADC_ConfigChannel+0x7e8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	4a30      	ldr	r2, [pc, #192]	; (8003290 <HAL_ADC_ConfigChannel+0x7ec>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e0:	e002      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f9      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ee:	e03a      	b.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <HAL_ADC_ConfigChannel+0x7f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d113      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x77e>
 80031fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_ADC_ConfigChannel+0x7e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d12a      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003218:	4619      	mov	r1, r3
 800321a:	4819      	ldr	r0, [pc, #100]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 800321c:	f7ff f969 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003220:	e021      	b.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_ADC_ConfigChannel+0x7f4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d11c      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800322c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d116      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a12      	ldr	r2, [pc, #72]	; (8003288 <HAL_ADC_ConfigChannel+0x7e4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800324a:	4619      	mov	r1, r3
 800324c:	480c      	ldr	r0, [pc, #48]	; (8003280 <HAL_ADC_ConfigChannel+0x7dc>)
 800324e:	f7ff f950 	bl	80024f2 <LL_ADC_SetCommonPathInternalCh>
 8003252:	e008      	b.n	8003266 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800326e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003272:	4618      	mov	r0, r3
 8003274:	37d8      	adds	r7, #216	; 0xd8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	80080000 	.word	0x80080000
 8003280:	50040300 	.word	0x50040300
 8003284:	c7520000 	.word	0xc7520000
 8003288:	50040000 	.word	0x50040000
 800328c:	20000000 	.word	0x20000000
 8003290:	053e2d63 	.word	0x053e2d63
 8003294:	cb840000 	.word	0xcb840000
 8003298:	80000001 	.word	0x80000001

0800329c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	60d3      	str	r3, [r2, #12]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <__NVIC_GetPriorityGrouping+0x18>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 0307 	and.w	r3, r3, #7
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db0b      	blt.n	800332a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <__NVIC_EnableIRQ+0x38>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2001      	movs	r0, #1
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	db0a      	blt.n	8003366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	490c      	ldr	r1, [pc, #48]	; (8003388 <__NVIC_SetPriority+0x4c>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	440b      	add	r3, r1
 8003360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003364:	e00a      	b.n	800337c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4908      	ldr	r1, [pc, #32]	; (800338c <__NVIC_SetPriority+0x50>)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	3b04      	subs	r3, #4
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	440b      	add	r3, r1
 800337a:	761a      	strb	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f1c3 0307 	rsb	r3, r3, #7
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	bf28      	it	cs
 80033ae:	2304      	movcs	r3, #4
 80033b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d902      	bls.n	80033c0 <NVIC_EncodePriority+0x30>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3b03      	subs	r3, #3
 80033be:	e000      	b.n	80033c2 <NVIC_EncodePriority+0x32>
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	401a      	ands	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43d9      	mvns	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	4313      	orrs	r3, r2
         );
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003408:	d301      	bcc.n	800340e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800340a:	2301      	movs	r3, #1
 800340c:	e00f      	b.n	800342e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <SysTick_Config+0x40>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003416:	210f      	movs	r1, #15
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	f7ff ff8e 	bl	800333c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <SysTick_Config+0x40>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <SysTick_Config+0x40>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	e000e010 	.word	0xe000e010

0800343c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ff29 	bl	800329c <__NVIC_SetPriorityGrouping>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	4603      	mov	r3, r0
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003464:	f7ff ff3e 	bl	80032e4 <__NVIC_GetPriorityGrouping>
 8003468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f7ff ff8e 	bl	8003390 <NVIC_EncodePriority>
 8003474:	4602      	mov	r2, r0
 8003476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff5d 	bl	800333c <__NVIC_SetPriority>
}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff31 	bl	8003300 <__NVIC_EnableIRQ>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffa2 	bl	80033f8 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e054      	b.n	800357c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7f5b      	ldrb	r3, [r3, #29]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe fae0 	bl	8001aa8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	791b      	ldrb	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_CRC_Init+0xc4>)
 80034fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0218 	bic.w	r2, r2, #24
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	e00c      	b.n	800352a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6899      	ldr	r1, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f834 	bl	8003588 <HAL_CRCEx_Polynomial_Set>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e028      	b.n	800357c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	795b      	ldrb	r3, [r3, #5]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f04f 32ff 	mov.w	r2, #4294967295
 800353a:	611a      	str	r2, [r3, #16]
 800353c:	e004      	b.n	8003548 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6912      	ldr	r2, [r2, #16]
 8003546:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	04c11db7 	.word	0x04c11db7

08003588 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003598:	231f      	movs	r3, #31
 800359a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800359c:	bf00      	nop
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1e5a      	subs	r2, r3, #1
 80035a2:	613a      	str	r2, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <HAL_CRCEx_Polynomial_Set+0x34>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b18      	cmp	r3, #24
 80035c0:	d846      	bhi.n	8003650 <HAL_CRCEx_Polynomial_Set+0xc8>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	08003657 	.word	0x08003657
 80035cc:	08003651 	.word	0x08003651
 80035d0:	08003651 	.word	0x08003651
 80035d4:	08003651 	.word	0x08003651
 80035d8:	08003651 	.word	0x08003651
 80035dc:	08003651 	.word	0x08003651
 80035e0:	08003651 	.word	0x08003651
 80035e4:	08003651 	.word	0x08003651
 80035e8:	08003645 	.word	0x08003645
 80035ec:	08003651 	.word	0x08003651
 80035f0:	08003651 	.word	0x08003651
 80035f4:	08003651 	.word	0x08003651
 80035f8:	08003651 	.word	0x08003651
 80035fc:	08003651 	.word	0x08003651
 8003600:	08003651 	.word	0x08003651
 8003604:	08003651 	.word	0x08003651
 8003608:	08003639 	.word	0x08003639
 800360c:	08003651 	.word	0x08003651
 8003610:	08003651 	.word	0x08003651
 8003614:	08003651 	.word	0x08003651
 8003618:	08003651 	.word	0x08003651
 800361c:	08003651 	.word	0x08003651
 8003620:	08003651 	.word	0x08003651
 8003624:	08003651 	.word	0x08003651
 8003628:	0800362d 	.word	0x0800362d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d913      	bls.n	800365a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003636:	e010      	b.n	800365a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b07      	cmp	r3, #7
 800363c:	d90f      	bls.n	800365e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003642:	e00c      	b.n	800365e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b0f      	cmp	r3, #15
 8003648:	d90b      	bls.n	8003662 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800364e:	e008      	b.n	8003662 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
      break;
 8003654:	e006      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003656:	bf00      	nop
 8003658:	e004      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800365a:	bf00      	nop
 800365c:	e002      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003662:	bf00      	nop
  }
  if (status == HAL_OK)
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 0118 	bic.w	r1, r3, #24
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
}
 8003688:	4618      	mov	r0, r3
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0ac      	b.n	8003800 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f9d2 	bl	8003a54 <DFSDM_GetChannelFromInstance>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4a55      	ldr	r2, [pc, #340]	; (8003808 <HAL_DFSDM_ChannelInit+0x174>)
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e09f      	b.n	8003800 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fe fa91 	bl	8001be8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a4f      	ldr	r2, [pc, #316]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036ce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d125      	bne.n	8003724 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80036d8:	4b4d      	ldr	r3, [pc, #308]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4c      	ldr	r2, [pc, #304]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036e2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4948      	ldr	r1, [pc, #288]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a46      	ldr	r2, [pc, #280]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80036fc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	791b      	ldrb	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d108      	bne.n	8003718 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003706:	4b42      	ldr	r3, [pc, #264]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	493f      	ldr	r1, [pc, #252]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003718:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 800371e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003722:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003732:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003742:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003748:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 020f 	bic.w	r2, r2, #15
 8003760:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003788:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 0207 	and.w	r2, r2, #7
 80037b4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f930 	bl	8003a54 <DFSDM_GetChannelFromInstance>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4904      	ldr	r1, [pc, #16]	; (8003808 <HAL_DFSDM_ChannelInit+0x174>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000da4 	.word	0x20000da4
 800380c:	20000da0 	.word	0x20000da0
 8003810:	40016000 	.word	0x40016000

08003814 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0ca      	b.n	80039bc <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a66      	ldr	r2, [pc, #408]	; (80039c4 <HAL_DFSDM_FilterInit+0x1b0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d109      	bne.n	8003844 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003834:	2b01      	cmp	r3, #1
 8003836:	d003      	beq.n	8003840 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0bb      	b.n	80039bc <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fe f943 	bl	8001ae8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003870:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7a1b      	ldrb	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e007      	b.n	800389c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800389a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	7a5b      	ldrb	r3, [r3, #9]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d108      	bne.n	80038b6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e007      	b.n	80038c6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d4:	f023 0308 	bic.w	r3, r3, #8
 80038d8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d108      	bne.n	80038f4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7c1b      	ldrb	r3, [r3, #16]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d108      	bne.n	800390e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0210 	orr.w	r2, r2, #16
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e007      	b.n	800391e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0210 	bic.w	r2, r2, #16
 800391c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7c5b      	ldrb	r3, [r3, #17]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d108      	bne.n	8003938 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e007      	b.n	8003948 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0220 	bic.w	r2, r2, #32
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003956:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800395a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6959      	ldr	r1, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	3b01      	subs	r3, #1
 800396c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800396e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003976:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7c1a      	ldrb	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40016100 	.word	0x40016100

080039c8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d02e      	beq.n	8003a40 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80039e8:	2bff      	cmp	r3, #255	; 0xff
 80039ea:	d029      	beq.n	8003a40 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10d      	bne.n	8003a22 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e00a      	b.n	8003a38 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3e:	e001      	b.n	8003a44 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d102      	bne.n	8003a6a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e02b      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <DFSDM_GetChannelFromInstance+0x80>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d102      	bne.n	8003a78 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e024      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <DFSDM_GetChannelFromInstance+0x84>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a80:	2302      	movs	r3, #2
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e01d      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <DFSDM_GetChannelFromInstance+0x88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d102      	bne.n	8003a94 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e016      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d102      	bne.n	8003aa2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e00f      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <DFSDM_GetChannelFromInstance+0x90>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d102      	bne.n	8003ab0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003aaa:	2306      	movs	r3, #6
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e008      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <DFSDM_GetChannelFromInstance+0x94>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d102      	bne.n	8003abe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003ab8:	2307      	movs	r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e001      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40016000 	.word	0x40016000
 8003ad4:	40016020 	.word	0x40016020
 8003ad8:	40016040 	.word	0x40016040
 8003adc:	40016080 	.word	0x40016080
 8003ae0:	400160a0 	.word	0x400160a0
 8003ae4:	400160c0 	.word	0x400160c0
 8003ae8:	400160e0 	.word	0x400160e0

08003aec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e08d      	b.n	8003c1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_DMA_Init+0x138>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d80f      	bhi.n	8003b2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <HAL_DMA_Init+0x13c>)
 8003b12:	4413      	add	r3, r2
 8003b14:	4a45      	ldr	r2, [pc, #276]	; (8003c2c <HAL_DMA_Init+0x140>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	009a      	lsls	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a42      	ldr	r2, [pc, #264]	; (8003c30 <HAL_DMA_Init+0x144>)
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
 8003b28:	e00e      	b.n	8003b48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <HAL_DMA_Init+0x148>)
 8003b32:	4413      	add	r3, r2
 8003b34:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <HAL_DMA_Init+0x140>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a3c      	ldr	r2, [pc, #240]	; (8003c38 <HAL_DMA_Init+0x14c>)
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8fe 	bl	8003d9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bc4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <HAL_DMA_Init+0x104>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d80c      	bhi.n	8003bf0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f91e 	bl	8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e008      	b.n	8003c02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40020407 	.word	0x40020407
 8003c28:	bffdfff8 	.word	0xbffdfff8
 8003c2c:	cccccccd 	.word	0xcccccccd
 8003c30:	40020000 	.word	0x40020000
 8003c34:	bffdfbf8 	.word	0xbffdfbf8
 8003c38:	40020400 	.word	0x40020400

08003c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 031c 	and.w	r3, r3, #28
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d026      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x7a>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d021      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f003 021c 	and.w	r2, r3, #28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d071      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003cb4:	e06c      	b.n	8003d90 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 031c 	and.w	r3, r3, #28
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02e      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xec>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d029      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 020a 	bic.w	r2, r2, #10
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f003 021c 	and.w	r2, r3, #28
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2102      	movs	r1, #2
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d038      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d26:	e033      	b.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	f003 031c 	and.w	r3, r3, #28
 8003d30:	2208      	movs	r2, #8
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02a      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d025      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020e 	bic.w	r2, r2, #14
 8003d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f003 021c 	and.w	r2, r3, #28
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
}
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d80a      	bhi.n	8003dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dbc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6493      	str	r3, [r2, #72]	; 0x48
 8003dc4:	e007      	b.n	8003dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	009a      	lsls	r2, r3, #2
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3b08      	subs	r3, #8
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40020407 	.word	0x40020407
 8003e0c:	4002081c 	.word	0x4002081c
 8003e10:	cccccccd 	.word	0xcccccccd
 8003e14:	40020880 	.word	0x40020880

08003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	1000823f 	.word	0x1000823f
 8003e5c:	40020940 	.word	0x40020940

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	e166      	b.n	800413e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8158 	beq.w	8004138 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d005      	beq.n	8003ea0 <HAL_GPIO_Init+0x40>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d130      	bne.n	8003f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 0201 	and.w	r2, r3, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d017      	beq.n	8003f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d123      	bne.n	8003f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3208      	adds	r2, #8
 8003f8c:	6939      	ldr	r1, [r7, #16]
 8003f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80b2 	beq.w	8004138 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd4:	4b61      	ldr	r3, [pc, #388]	; (800415c <HAL_GPIO_Init+0x2fc>)
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd8:	4a60      	ldr	r2, [pc, #384]	; (800415c <HAL_GPIO_Init+0x2fc>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6613      	str	r3, [r2, #96]	; 0x60
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	; (800415c <HAL_GPIO_Init+0x2fc>)
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fec:	4a5c      	ldr	r2, [pc, #368]	; (8004160 <HAL_GPIO_Init+0x300>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004016:	d02b      	beq.n	8004070 <HAL_GPIO_Init+0x210>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a52      	ldr	r2, [pc, #328]	; (8004164 <HAL_GPIO_Init+0x304>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d025      	beq.n	800406c <HAL_GPIO_Init+0x20c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a51      	ldr	r2, [pc, #324]	; (8004168 <HAL_GPIO_Init+0x308>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d01f      	beq.n	8004068 <HAL_GPIO_Init+0x208>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a50      	ldr	r2, [pc, #320]	; (800416c <HAL_GPIO_Init+0x30c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d019      	beq.n	8004064 <HAL_GPIO_Init+0x204>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a4f      	ldr	r2, [pc, #316]	; (8004170 <HAL_GPIO_Init+0x310>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <HAL_GPIO_Init+0x200>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <HAL_GPIO_Init+0x314>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00d      	beq.n	800405c <HAL_GPIO_Init+0x1fc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a4d      	ldr	r2, [pc, #308]	; (8004178 <HAL_GPIO_Init+0x318>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <HAL_GPIO_Init+0x1f8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a4c      	ldr	r2, [pc, #304]	; (800417c <HAL_GPIO_Init+0x31c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_GPIO_Init+0x1f4>
 8004050:	2307      	movs	r3, #7
 8004052:	e00e      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004054:	2308      	movs	r3, #8
 8004056:	e00c      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004058:	2306      	movs	r3, #6
 800405a:	e00a      	b.n	8004072 <HAL_GPIO_Init+0x212>
 800405c:	2305      	movs	r3, #5
 800405e:	e008      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004060:	2304      	movs	r3, #4
 8004062:	e006      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004064:	2303      	movs	r3, #3
 8004066:	e004      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004068:	2302      	movs	r3, #2
 800406a:	e002      	b.n	8004072 <HAL_GPIO_Init+0x212>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_GPIO_Init+0x212>
 8004070:	2300      	movs	r3, #0
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	f002 0203 	and.w	r2, r2, #3
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	4093      	lsls	r3, r2
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004082:	4937      	ldr	r1, [pc, #220]	; (8004160 <HAL_GPIO_Init+0x300>)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	3302      	adds	r3, #2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004090:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_GPIO_Init+0x320>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	43db      	mvns	r3, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040b4:	4a32      	ldr	r2, [pc, #200]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040de:	4a28      	ldr	r2, [pc, #160]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040e4:	4b26      	ldr	r3, [pc, #152]	; (8004180 <HAL_GPIO_Init+0x320>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_GPIO_Init+0x320>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <HAL_GPIO_Init+0x320>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004132:	4a13      	ldr	r2, [pc, #76]	; (8004180 <HAL_GPIO_Init+0x320>)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f ae91 	bne.w	8003e70 <HAL_GPIO_Init+0x10>
  }
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40021000 	.word	0x40021000
 8004160:	40010000 	.word	0x40010000
 8004164:	48000400 	.word	0x48000400
 8004168:	48000800 	.word	0x48000800
 800416c:	48000c00 	.word	0x48000c00
 8004170:	48001000 	.word	0x48001000
 8004174:	48001400 	.word	0x48001400
 8004178:	48001800 	.word	0x48001800
 800417c:	48001c00 	.word	0x48001c00
 8004180:	40010400 	.word	0x40010400

08004184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e001      	b.n	80041a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e081      	b.n	80042fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd fd30 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	e006      	b.n	800426c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800426a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d104      	bne.n	800427e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800427c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800428c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69d9      	ldr	r1, [r3, #28]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d138      	bne.n	800438a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004322:	2302      	movs	r3, #2
 8004324:	e032      	b.n	800438c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2224      	movs	r2, #36	; 0x24
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004354:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d139      	bne.n	8004422 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e033      	b.n	8004424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004432:	b08f      	sub	sp, #60	; 0x3c
 8004434:	af0a      	add	r7, sp, #40	; 0x28
 8004436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e116      	b.n	8004670 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f00b f963 	bl	800f728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f007 fd78 	bl	800bf76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	687e      	ldr	r6, [r7, #4]
 800448e:	466d      	mov	r5, sp
 8004490:	f106 0410 	add.w	r4, r6, #16
 8004494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800449a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800449c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80044a4:	1d33      	adds	r3, r6, #4
 80044a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a8:	6838      	ldr	r0, [r7, #0]
 80044aa:	f007 fc8b 	bl	800bdc4 <USB_CoreInit>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0d7      	b.n	8004670 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f007 fd66 	bl	800bf98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e04a      	b.n	8004568 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	333d      	adds	r3, #61	; 0x3d
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	333c      	adds	r3, #60	; 0x3c
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	b298      	uxth	r0, r3
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	3344      	adds	r3, #68	; 0x44
 800450e:	4602      	mov	r2, r0
 8004510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	3340      	adds	r3, #64	; 0x40
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	3348      	adds	r3, #72	; 0x48
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	334c      	adds	r3, #76	; 0x4c
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3354      	adds	r3, #84	; 0x54
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3301      	adds	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3af      	bcc.n	80044d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e044      	b.n	8004602 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d3b5      	bcc.n	8004578 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	687e      	ldr	r6, [r7, #4]
 8004614:	466d      	mov	r5, sp
 8004616:	f106 0410 	add.w	r4, r6, #16
 800461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004626:	e885 0003 	stmia.w	r5, {r0, r1}
 800462a:	1d33      	adds	r3, r6, #4
 800462c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800462e:	6838      	ldr	r0, [r7, #0]
 8004630:	f007 fcfe 	bl	800c030 <USB_DevInit>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e014      	b.n	8004670 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b01      	cmp	r3, #1
 800465c:	d102      	bne.n	8004664 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 f882 	bl	8005768 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f008 fd86 	bl	800d17a <USB_DevDisconnect>

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004678 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_PCD_Start+0x1c>
 8004690:	2302      	movs	r3, #2
 8004692:	e01c      	b.n	80046ce <HAL_PCD_Start+0x56>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f007 fc4d 	bl	800bf54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f008 fd3a 	bl	800d138 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046d6:	b590      	push	{r4, r7, lr}
 80046d8:	b08d      	sub	sp, #52	; 0x34
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f008 fdf8 	bl	800d2e2 <USB_GetMode>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 847e 	bne.w	8004ff6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f008 fd5c 	bl	800d1bc <USB_ReadInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8474 	beq.w	8004ff4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f008 fd49 	bl	800d1bc <USB_ReadInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f002 0202 	and.w	r2, r2, #2
 8004742:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f008 fd37 	bl	800d1bc <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b10      	cmp	r3, #16
 8004756:	d161      	bne.n	800481c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	0c5b      	lsrs	r3, r3, #17
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	2b02      	cmp	r3, #2
 8004792:	d124      	bne.n	80047de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d035      	beq.n	800480c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6a38      	ldr	r0, [r7, #32]
 80047b4:	f008 fb6e 	bl	800ce94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047c4:	441a      	add	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d6:	441a      	add	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
 80047dc:	e016      	b.n	800480c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	0c5b      	lsrs	r3, r3, #17
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d110      	bne.n	800480c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047f0:	2208      	movs	r2, #8
 80047f2:	4619      	mov	r1, r3
 80047f4:	6a38      	ldr	r0, [r7, #32]
 80047f6:	f008 fb4d 	bl	800ce94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004806:	441a      	add	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0210 	orr.w	r2, r2, #16
 800481a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f008 fccb 	bl	800d1bc <USB_ReadInterrupts>
 8004826:	4603      	mov	r3, r0
 8004828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004830:	f040 80a7 	bne.w	8004982 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f008 fcd0 	bl	800d1e2 <USB_ReadDevAllOutEpInterrupt>
 8004842:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004844:	e099      	b.n	800497a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 808e 	beq.w	800496e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f008 fcf4 	bl	800d24a <USB_ReadDevOutEPInterrupt>
 8004862:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	461a      	mov	r2, r3
 800487c:	2301      	movs	r3, #1
 800487e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fe96 	bl	80055b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	2308      	movs	r3, #8
 80048a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fed2 	bl	8005650 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	461a      	mov	r2, r3
 80048c4:	2310      	movs	r3, #16
 80048c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d030      	beq.n	8004934 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d109      	bne.n	80048f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	3304      	adds	r3, #4
 8004906:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	78db      	ldrb	r3, [r3, #3]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d108      	bne.n	8004922 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2200      	movs	r2, #0
 8004914:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	b2db      	uxtb	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f00b f847 	bl	800f9b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2302      	movs	r3, #2
 8004932:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	461a      	mov	r2, r3
 800494c:	2320      	movs	r3, #32
 800494e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	461a      	mov	r2, r3
 8004968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800496c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	3301      	adds	r3, #1
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f af62 	bne.w	8004846 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f008 fc18 	bl	800d1bc <USB_ReadInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004996:	f040 80a4 	bne.w	8004ae2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f008 fc39 	bl	800d216 <USB_ReadDevAllInEpInterrupt>
 80049a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049aa:	e096      	b.n	8004ada <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 808b 	beq.w	8004ace <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f008 fc5f 	bl	800d286 <USB_ReadDevInEPInterrupt>
 80049c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	2201      	movs	r2, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f4:	4013      	ands	r3, r2
 80049f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	461a      	mov	r2, r3
 8004a06:	2301      	movs	r3, #1
 8004a08:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f00a ff38 	bl	800f886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2308      	movs	r3, #8
 8004a30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	461a      	mov	r2, r3
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d023      	beq.n	8004abc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a76:	6a38      	ldr	r0, [r7, #32]
 8004a78:	f007 fc26 	bl	800c2c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3338      	adds	r3, #56	; 0x38
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	78db      	ldrb	r3, [r3, #3]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d108      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f00a ff95 	bl	800f9d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2302      	movs	r3, #2
 8004aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fcea 	bl	80054a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f47f af65 	bne.w	80049ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f008 fb68 	bl	800d1bc <USB_ReadInterrupts>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af6:	d122      	bne.n	8004b3e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d108      	bne.n	8004b28 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f00b f9c7 	bl	800feb4 <HAL_PCDEx_LPM_Callback>
 8004b26:	e002      	b.n	8004b2e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f00a ff19 	bl	800f960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f008 fb3a 	bl	800d1bc <USB_ReadInterrupts>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b52:	d112      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f00a fed5 	bl	800f914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f008 fb1c 	bl	800d1bc <USB_ReadInterrupts>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8e:	d121      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004b9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d111      	bne.n	8004bce <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f00b f974 	bl	800feb4 <HAL_PCDEx_LPM_Callback>
 8004bcc:	e002      	b.n	8004bd4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f00a fea0 	bl	800f914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f008 faef 	bl	800d1bc <USB_ReadInterrupts>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	f040 80b5 	bne.w	8004d56 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2110      	movs	r1, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f007 fb5e 	bl	800c2c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c10:	e046      	b.n	8004ca0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	461a      	mov	r2, r3
 8004c54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d3b3      	bcc.n	8004c12 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004cbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd6:	f043 030b 	orr.w	r3, r3, #11
 8004cda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f043 030b 	orr.w	r3, r3, #11
 8004cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf2:	e015      	b.n	8004d20 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f043 030b 	orr.w	r3, r3, #11
 8004d1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f008 faff 	bl	800d344 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f008 fa2e 	bl	800d1bc <USB_ReadInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6a:	d124      	bne.n	8004db6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f008 fac4 	bl	800d2fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f007 fb21 	bl	800c3c2 <USB_GetDevSpeed>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681c      	ldr	r4, [r3, #0]
 8004d8c:	f001 fbe2 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 8004d90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f007 f83e 	bl	800be1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f00a fd98 	bl	800f8d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f008 f9fe 	bl	800d1bc <USB_ReadInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d10a      	bne.n	8004de0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f00a fd75 	bl	800f8ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f002 0208 	and.w	r2, r2, #8
 8004dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f008 f9e9 	bl	800d1bc <USB_ReadInterrupts>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	2b80      	cmp	r3, #128	; 0x80
 8004df2:	d122      	bne.n	8004e3a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e00:	2301      	movs	r3, #1
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	e014      	b.n	8004e30 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fb0b 	bl	8005440 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d3e5      	bcc.n	8004e06 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f008 f9bc 	bl	800d1bc <USB_ReadInterrupts>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4e:	d13b      	bne.n	8004ec8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
 8004e54:	e02b      	b.n	8004eae <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3340      	adds	r3, #64	; 0x40
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d115      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da12      	bge.n	8004ea8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	4613      	mov	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	333f      	adds	r3, #63	; 0x3f
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 facc 	bl	8005440 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	3301      	adds	r3, #1
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d3ce      	bcc.n	8004e56 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f008 f975 	bl	800d1bc <USB_ReadInterrupts>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004edc:	d155      	bne.n	8004f8a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ede:	2301      	movs	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee2:	e045      	b.n	8004f70 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d12e      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da2b      	bge.n	8004f6a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d121      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f66:	6053      	str	r3, [r2, #4]
            break;
 8004f68:	e007      	b.n	8004f7a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3b4      	bcc.n	8004ee4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f008 f914 	bl	800d1bc <USB_ReadInterrupts>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f00a fd29 	bl	800f9f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f008 f8fe 	bl	800d1bc <USB_ReadInterrupts>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d115      	bne.n	8004ff6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f00a fd19 	bl	800fa14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e000      	b.n	8004ff6 <HAL_PCD_IRQHandler+0x920>
      return;
 8004ff4:	bf00      	nop
    }
  }
}
 8004ff6:	3734      	adds	r7, #52	; 0x34
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd90      	pop	{r4, r7, pc}

08004ffc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_PCD_SetAddress+0x1a>
 8005012:	2302      	movs	r3, #2
 8005014:	e013      	b.n	800503e <HAL_PCD_SetAddress+0x42>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f008 f85c 	bl	800d0ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	461a      	mov	r2, r3
 8005054:	4603      	mov	r3, r0
 8005056:	70fb      	strb	r3, [r7, #3]
 8005058:	460b      	mov	r3, r1
 800505a:	803b      	strh	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005068:	2b00      	cmp	r3, #0
 800506a:	da0f      	bge.n	800508c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	3338      	adds	r3, #56	; 0x38
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	3304      	adds	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	705a      	strb	r2, [r3, #1]
 800508a:	e00f      	b.n	80050ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	3304      	adds	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050b8:	883a      	ldrh	r2, [r7, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	78ba      	ldrb	r2, [r7, #2]
 80050c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050d6:	78bb      	ldrb	r3, [r7, #2]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d102      	bne.n	80050e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_PCD_EP_Open+0xaa>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e00e      	b.n	800510e <HAL_PCD_EP_Open+0xc8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	4618      	mov	r0, r3
 8005100:	f007 f97e 	bl	800c400 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800510c:	7afb      	ldrb	r3, [r7, #11]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005126:	2b00      	cmp	r3, #0
 8005128:	da0f      	bge.n	800514a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	3338      	adds	r3, #56	; 0x38
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	3304      	adds	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	705a      	strb	r2, [r3, #1]
 8005148:	e00f      	b.n	800516a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	b2da      	uxtb	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_PCD_EP_Close+0x6e>
 8005180:	2302      	movs	r3, #2
 8005182:	e00e      	b.n	80051a2 <HAL_PCD_EP_Close+0x8c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68f9      	ldr	r1, [r7, #12]
 8005192:	4618      	mov	r0, r3
 8005194:	f007 f9bc 	bl	800c510 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b086      	sub	sp, #24
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	460b      	mov	r3, r1
 80051b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	f003 020f 	and.w	r2, r3, #15
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	3304      	adds	r3, #4
 80051d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ec:	7afb      	ldrb	r3, [r7, #11]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051f8:	7afb      	ldrb	r3, [r7, #11]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6979      	ldr	r1, [r7, #20]
 8005208:	4618      	mov	r0, r3
 800520a:	f007 fc3d 	bl	800ca88 <USB_EP0StartXfer>
 800520e:	e005      	b.n	800521c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	4618      	mov	r0, r3
 8005218:	f007 fa56 	bl	800c6c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 020f 	and.w	r2, r3, #15
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005248:	681b      	ldr	r3, [r3, #0]
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	460b      	mov	r3, r1
 8005264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005266:	7afb      	ldrb	r3, [r7, #11]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	3338      	adds	r3, #56	; 0x38
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	3304      	adds	r3, #4
 800527c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2201      	movs	r2, #1
 8005294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	b2da      	uxtb	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052a2:	7afb      	ldrb	r3, [r7, #11]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f007 fbe8 	bl	800ca88 <USB_EP0StartXfer>
 80052b8:	e005      	b.n	80052c6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f007 fa01 	bl	800c6c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	f003 020f 	and.w	r2, r3, #15
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d901      	bls.n	80052ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e04e      	b.n	800538c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da0f      	bge.n	8005316 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	f003 020f 	and.w	r2, r3, #15
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	3338      	adds	r3, #56	; 0x38
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	3304      	adds	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	705a      	strb	r2, [r3, #1]
 8005314:	e00d      	b.n	8005332 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	3304      	adds	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_PCD_EP_SetStall+0x82>
 800534e:	2302      	movs	r3, #2
 8005350:	e01c      	b.n	800538c <HAL_PCD_EP_SetStall+0xbc>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	4618      	mov	r0, r3
 8005362:	f007 fdef 	bl	800cf44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f007 ffe1 	bl	800d344 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	f003 020f 	and.w	r2, r3, #15
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d901      	bls.n	80053b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e042      	b.n	8005438 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da0f      	bge.n	80053da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	3338      	adds	r3, #56	; 0x38
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	3304      	adds	r3, #4
 80053d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	705a      	strb	r2, [r3, #1]
 80053d8:	e00f      	b.n	80053fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	3304      	adds	r3, #4
 80053f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_PCD_EP_ClrStall+0x86>
 8005416:	2302      	movs	r3, #2
 8005418:	e00e      	b.n	8005438 <HAL_PCD_EP_ClrStall+0xa4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	4618      	mov	r0, r3
 800542a:	f007 fdf9 	bl	800d020 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800544c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da0c      	bge.n	800546e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	3338      	adds	r3, #56	; 0x38
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e00c      	b.n	8005488 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	3304      	adds	r3, #4
 8005486:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	4618      	mov	r0, r3
 8005490:	f007 fc1c 	bl	800cccc <USB_EPStopXfer>
 8005494:	4603      	mov	r3, r0
 8005496:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005498:	7afb      	ldrb	r3, [r7, #11]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b088      	sub	sp, #32
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	3338      	adds	r3, #56	; 0x38
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d901      	bls.n	80054da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e067      	b.n	80055aa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d902      	bls.n	80054f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3303      	adds	r3, #3
 80054fa:	089b      	lsrs	r3, r3, #2
 80054fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054fe:	e026      	b.n	800554e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	429a      	cmp	r2, r3
 8005514:	d902      	bls.n	800551c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3303      	adds	r3, #3
 8005520:	089b      	lsrs	r3, r3, #2
 8005522:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6919      	ldr	r1, [r3, #16]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	b29b      	uxth	r3, r3
 8005530:	6978      	ldr	r0, [r7, #20]
 8005532:	f007 fc75 	bl	800ce20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	441a      	add	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	b29b      	uxth	r3, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	429a      	cmp	r2, r3
 8005562:	d809      	bhi.n	8005578 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800556c:	429a      	cmp	r2, r3
 800556e:	d203      	bcs.n	8005578 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1c3      	bne.n	8005500 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	429a      	cmp	r2, r3
 8005582:	d811      	bhi.n	80055a8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	2201      	movs	r2, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	43db      	mvns	r3, r3
 800559e:	6939      	ldr	r1, [r7, #16]
 80055a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a4:	4013      	ands	r3, r2
 80055a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	333c      	adds	r3, #60	; 0x3c
 80055cc:	3304      	adds	r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <PCD_EP_OutXfrComplete_int+0x98>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d124      	bne.n	8005634 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	461a      	mov	r2, r3
 8005602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005606:	6093      	str	r3, [r2, #8]
 8005608:	e01a      	b.n	8005640 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	2320      	movs	r3, #32
 8005624:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f00a f90f 	bl	800f850 <HAL_PCD_DataOutStageCallback>
 8005632:	e005      	b.n	8005640 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f00a f908 	bl	800f850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	4f54310a 	.word	0x4f54310a

08005650 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	333c      	adds	r3, #60	; 0x3c
 8005668:	3304      	adds	r3, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <PCD_EP_OutSetupPacket_int+0x64>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d90e      	bls.n	80056a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569c:	461a      	mov	r2, r3
 800569e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f00a f8c1 	bl	800f82c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	4f54300a 	.word	0x4f54300a

080056b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
 80056c4:	4613      	mov	r3, r2
 80056c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d107      	bne.n	80056e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056d6:	883b      	ldrh	r3, [r7, #0]
 80056d8:	0419      	lsls	r1, r3, #16
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28
 80056e4:	e028      	b.n	8005738 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]
 80056f8:	e00d      	b.n	8005716 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	3340      	adds	r3, #64	; 0x40
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4413      	add	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	3301      	adds	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	3b01      	subs	r3, #1
 800571c:	429a      	cmp	r2, r3
 800571e:	d3ec      	bcc.n	80056fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005720:	883b      	ldrh	r3, [r7, #0]
 8005722:	0418      	lsls	r0, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6819      	ldr	r1, [r3, #0]
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	3b01      	subs	r3, #1
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	4302      	orrs	r2, r0
 8005730:	3340      	adds	r3, #64	; 0x40
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579a:	f043 0303 	orr.w	r3, r3, #3
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a04      	ldr	r2, [pc, #16]	; (80057cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40007000 	.word	0x40007000

080057d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <HAL_PWREx_GetVoltageRange+0x3c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e0:	d102      	bne.n	80057e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80057e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e6:	e00b      	b.n	8005800 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <HAL_PWREx_GetVoltageRange+0x3c>)
 80057ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	d102      	bne.n	80057fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80057f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fc:	e000      	b.n	8005800 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80057fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40007000 	.word	0x40007000

08005810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d141      	bne.n	80058a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800581e:	4b4b      	ldr	r3, [pc, #300]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582a:	d131      	bne.n	8005890 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800582c:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005832:	4a46      	ldr	r2, [pc, #280]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800583c:	4b43      	ldr	r3, [pc, #268]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005844:	4a41      	ldr	r2, [pc, #260]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800584c:	4b40      	ldr	r3, [pc, #256]	; (8005950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2232      	movs	r2, #50	; 0x32
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	4a3f      	ldr	r2, [pc, #252]	; (8005954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	0c9b      	lsrs	r3, r3, #18
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005862:	e002      	b.n	800586a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3b01      	subs	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586a:	4b38      	ldr	r3, [pc, #224]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d102      	bne.n	800587e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f2      	bne.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800587e:	4b33      	ldr	r3, [pc, #204]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d158      	bne.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e057      	b.n	8005940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005890:	4b2e      	ldr	r3, [pc, #184]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005896:	4a2d      	ldr	r2, [pc, #180]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058a0:	e04d      	b.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a8:	d141      	bne.n	800592e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058aa:	4b28      	ldr	r3, [pc, #160]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d131      	bne.n	800591c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b8:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058be:	4a23      	ldr	r2, [pc, #140]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058c8:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058d0:	4a1e      	ldr	r2, [pc, #120]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2232      	movs	r2, #50	; 0x32
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	0c9b      	lsrs	r3, r3, #18
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ee:	e002      	b.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005902:	d102      	bne.n	800590a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f2      	bne.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005916:	d112      	bne.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e011      	b.n	8005940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005922:	4a0a      	ldr	r2, [pc, #40]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800592c:	e007      	b.n	800593e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005936:	4a05      	ldr	r2, [pc, #20]	; (800594c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800593c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40007000 	.word	0x40007000
 8005950:	20000000 	.word	0x20000000
 8005954:	431bde83 	.word	0x431bde83

08005958 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_PWREx_EnableVddUSB+0x1c>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a04      	ldr	r2, [pc, #16]	; (8005974 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005966:	6053      	str	r3, [r2, #4]
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40007000 	.word	0x40007000

08005978 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_PWREx_EnableVddIO2+0x1c>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005986:	6053      	str	r3, [r2, #4]
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40007000 	.word	0x40007000

08005998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f000 bc08 	b.w	80061bc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ac:	4b96      	ldr	r3, [pc, #600]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b6:	4b94      	ldr	r3, [pc, #592]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80e4 	beq.w	8005b96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_RCC_OscConfig+0x4c>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b0c      	cmp	r3, #12
 80059d8:	f040 808b 	bne.w	8005af2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	f040 8087 	bne.w	8005af2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059e4:	4b88      	ldr	r3, [pc, #544]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_OscConfig+0x64>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e3df      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	4b81      	ldr	r3, [pc, #516]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <HAL_RCC_OscConfig+0x7e>
 8005a0c:	4b7e      	ldr	r3, [pc, #504]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a14:	e005      	b.n	8005a22 <HAL_RCC_OscConfig+0x8a>
 8005a16:	4b7c      	ldr	r3, [pc, #496]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d223      	bcs.n	8005a6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fdca 	bl	80065c4 <RCC_SetFlashLatencyFromMSIRange>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e3c0      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a3a:	4b73      	ldr	r3, [pc, #460]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a72      	ldr	r2, [pc, #456]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	496d      	ldr	r1, [pc, #436]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a58:	4b6b      	ldr	r3, [pc, #428]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	4968      	ldr	r1, [pc, #416]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	604b      	str	r3, [r1, #4]
 8005a6c:	e025      	b.n	8005aba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a6e:	4b66      	ldr	r3, [pc, #408]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a65      	ldr	r2, [pc, #404]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a74:	f043 0308 	orr.w	r3, r3, #8
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b63      	ldr	r3, [pc, #396]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4960      	ldr	r1, [pc, #384]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8c:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	495b      	ldr	r1, [pc, #364]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fd8a 	bl	80065c4 <RCC_SetFlashLatencyFromMSIRange>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e380      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aba:	f000 fcc1 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b51      	ldr	r3, [pc, #324]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	4950      	ldr	r1, [pc, #320]	; (8005c0c <HAL_RCC_OscConfig+0x274>)
 8005acc:	5ccb      	ldrb	r3, [r1, r3]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad6:	4a4e      	ldr	r2, [pc, #312]	; (8005c10 <HAL_RCC_OscConfig+0x278>)
 8005ad8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ada:	4b4e      	ldr	r3, [pc, #312]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fc fc74 	bl	80023cc <HAL_InitTick>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d052      	beq.n	8005b94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	e364      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d032      	beq.n	8005b60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005afa:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a42      	ldr	r2, [pc, #264]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b06:	f7fc fcb1 	bl	800246c <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b0e:	f7fc fcad 	bl	800246c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e34d      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b20:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a35      	ldr	r2, [pc, #212]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b32:	f043 0308 	orr.w	r3, r3, #8
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	4930      	ldr	r1, [pc, #192]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	492b      	ldr	r1, [pc, #172]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	604b      	str	r3, [r1, #4]
 8005b5e:	e01a      	b.n	8005b96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b60:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b66:	f023 0301 	bic.w	r3, r3, #1
 8005b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b6c:	f7fc fc7e 	bl	800246c <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b74:	f7fc fc7a 	bl	800246c <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e31a      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b86:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x1dc>
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d073      	beq.n	8005c8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x21c>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b0c      	cmp	r3, #12
 8005bac:	d10e      	bne.n	8005bcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d063      	beq.n	8005c88 <HAL_RCC_OscConfig+0x2f0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d15f      	bne.n	8005c88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e2f7      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd4:	d106      	bne.n	8005be4 <HAL_RCC_OscConfig+0x24c>
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e025      	b.n	8005c30 <HAL_RCC_OscConfig+0x298>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bec:	d114      	bne.n	8005c18 <HAL_RCC_OscConfig+0x280>
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a02      	ldr	r2, [pc, #8]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e013      	b.n	8005c30 <HAL_RCC_OscConfig+0x298>
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	08018e20 	.word	0x08018e20
 8005c10:	20000000 	.word	0x20000000
 8005c14:	20000004 	.word	0x20000004
 8005c18:	4ba0      	ldr	r3, [pc, #640]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a9f      	ldr	r2, [pc, #636]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	4b9d      	ldr	r3, [pc, #628]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a9c      	ldr	r2, [pc, #624]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d013      	beq.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c38:	f7fc fc18 	bl	800246c <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c40:	f7fc fc14 	bl	800246c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e2b4      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c52:	4b92      	ldr	r3, [pc, #584]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x2a8>
 8005c5e:	e014      	b.n	8005c8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fc fc04 	bl	800246c <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c68:	f7fc fc00 	bl	800246c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b64      	cmp	r3, #100	; 0x64
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e2a0      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c7a:	4b88      	ldr	r3, [pc, #544]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x2d0>
 8005c86:	e000      	b.n	8005c8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d060      	beq.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x310>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d119      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d116      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca8:	4b7c      	ldr	r3, [pc, #496]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x328>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e27d      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc0:	4b76      	ldr	r3, [pc, #472]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	4973      	ldr	r1, [pc, #460]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd4:	e040      	b.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d023      	beq.n	8005d26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cde:	4b6f      	ldr	r3, [pc, #444]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a6e      	ldr	r2, [pc, #440]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fc fbbf 	bl	800246c <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fc fbbb 	bl	800246c <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e25b      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d04:	4b65      	ldr	r3, [pc, #404]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b62      	ldr	r3, [pc, #392]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	495f      	ldr	r1, [pc, #380]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
 8005d24:	e018      	b.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d26:	4b5d      	ldr	r3, [pc, #372]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5c      	ldr	r2, [pc, #368]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fc fb9b 	bl	800246c <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fc fb97 	bl	800246c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e237      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d4c:	4b53      	ldr	r3, [pc, #332]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f0      	bne.n	8005d3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d03c      	beq.n	8005dde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01c      	beq.n	8005da6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6c:	4b4b      	ldr	r3, [pc, #300]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d72:	4a4a      	ldr	r2, [pc, #296]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7c:	f7fc fb76 	bl	800246c <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d84:	f7fc fb72 	bl	800246c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e212      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d96:	4b41      	ldr	r3, [pc, #260]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ef      	beq.n	8005d84 <HAL_RCC_OscConfig+0x3ec>
 8005da4:	e01b      	b.n	8005dde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005da6:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dac:	4a3b      	ldr	r2, [pc, #236]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db6:	f7fc fb59 	bl	800246c <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbe:	f7fc fb55 	bl	800246c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e1f5      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd0:	4b32      	ldr	r3, [pc, #200]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1ef      	bne.n	8005dbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80a6 	beq.w	8005f38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005df0:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	4a26      	ldr	r2, [pc, #152]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6593      	str	r3, [r2, #88]	; 0x58
 8005e08:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e18:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d118      	bne.n	8005e56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e24:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1d      	ldr	r2, [pc, #116]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e30:	f7fc fb1c 	bl	800246c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7fc fb18 	bl	800246c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e1b8      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_RCC_OscConfig+0x508>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d108      	bne.n	8005e70 <HAL_RCC_OscConfig+0x4d8>
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e6e:	e029      	b.n	8005ec4 <HAL_RCC_OscConfig+0x52c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	d115      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x50c>
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7e:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e80:	f043 0304 	orr.w	r3, r3, #4
 8005e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	4a03      	ldr	r2, [pc, #12]	; (8005e9c <HAL_RCC_OscConfig+0x504>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e98:	e014      	b.n	8005ec4 <HAL_RCC_OscConfig+0x52c>
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	4b9d      	ldr	r3, [pc, #628]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eaa:	4a9c      	ldr	r2, [pc, #624]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eb4:	4b99      	ldr	r3, [pc, #612]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eba:	4a98      	ldr	r2, [pc, #608]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005ebc:	f023 0304 	bic.w	r3, r3, #4
 8005ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d016      	beq.n	8005efa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ecc:	f7fc face 	bl	800246c <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fc faca 	bl	800246c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e168      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eea:	4b8c      	ldr	r3, [pc, #560]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ed      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x53c>
 8005ef8:	e015      	b.n	8005f26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efa:	f7fc fab7 	bl	800246c <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fc fab3 	bl	800246c <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e151      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f18:	4b80      	ldr	r3, [pc, #512]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1ed      	bne.n	8005f02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2c:	4b7b      	ldr	r3, [pc, #492]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f30:	4a7a      	ldr	r2, [pc, #488]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d03c      	beq.n	8005fbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01c      	beq.n	8005f86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f4c:	4b73      	ldr	r3, [pc, #460]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f52:	4a72      	ldr	r2, [pc, #456]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fc fa86 	bl	800246c <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f64:	f7fc fa82 	bl	800246c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e122      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f76:	4b69      	ldr	r3, [pc, #420]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ef      	beq.n	8005f64 <HAL_RCC_OscConfig+0x5cc>
 8005f84:	e01b      	b.n	8005fbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f86:	4b65      	ldr	r3, [pc, #404]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f8c:	4a63      	ldr	r2, [pc, #396]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f96:	f7fc fa69 	bl	800246c <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f9e:	f7fc fa65 	bl	800246c <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e105      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fb0:	4b5a      	ldr	r3, [pc, #360]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1ef      	bne.n	8005f9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80f9 	beq.w	80061ba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	f040 80cf 	bne.w	8006170 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005fd2:	4b52      	ldr	r3, [pc, #328]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0203 	and.w	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d12c      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d123      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006002:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d11b      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d113      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	3b01      	subs	r3, #1
 8006026:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d109      	bne.n	8006040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	3b01      	subs	r3, #1
 800603a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d071      	beq.n	8006124 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d068      	beq.n	8006118 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006046:	4b35      	ldr	r3, [pc, #212]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006052:	4b32      	ldr	r3, [pc, #200]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e0ac      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006062:	4b2e      	ldr	r3, [pc, #184]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2d      	ldr	r2, [pc, #180]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800606e:	f7fc f9fd 	bl	800246c <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006076:	f7fc f9f9 	bl	800246c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e099      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <HAL_RCC_OscConfig+0x784>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006094:	4b21      	ldr	r3, [pc, #132]	; (800611c <HAL_RCC_OscConfig+0x784>)
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	4b21      	ldr	r3, [pc, #132]	; (8006120 <HAL_RCC_OscConfig+0x788>)
 800609a:	4013      	ands	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060a4:	3a01      	subs	r2, #1
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	4311      	orrs	r1, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060ae:	0212      	lsls	r2, r2, #8
 80060b0:	4311      	orrs	r1, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060b6:	0852      	lsrs	r2, r2, #1
 80060b8:	3a01      	subs	r2, #1
 80060ba:	0552      	lsls	r2, r2, #21
 80060bc:	4311      	orrs	r1, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060c2:	0852      	lsrs	r2, r2, #1
 80060c4:	3a01      	subs	r2, #1
 80060c6:	0652      	lsls	r2, r2, #25
 80060c8:	4311      	orrs	r1, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060ce:	06d2      	lsls	r2, r2, #27
 80060d0:	430a      	orrs	r2, r1
 80060d2:	4912      	ldr	r1, [pc, #72]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80060d8:	4b10      	ldr	r3, [pc, #64]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0f      	ldr	r2, [pc, #60]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a0c      	ldr	r2, [pc, #48]	; (800611c <HAL_RCC_OscConfig+0x784>)
 80060ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060f0:	f7fc f9bc 	bl	800246c <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f8:	f7fc f9b8 	bl	800246c <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e058      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800610a:	4b04      	ldr	r3, [pc, #16]	; (800611c <HAL_RCC_OscConfig+0x784>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006116:	e050      	b.n	80061ba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e04f      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
 800611c:	40021000 	.word	0x40021000
 8006120:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006124:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d144      	bne.n	80061ba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006130:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800613a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800613c:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4a20      	ldr	r2, [pc, #128]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006148:	f7fc f990 	bl	800246c <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006150:	f7fc f98c 	bl	800246c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e02c      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006162:	4b18      	ldr	r3, [pc, #96]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <HAL_RCC_OscConfig+0x7b8>
 800616e:	e024      	b.n	80061ba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d01f      	beq.n	80061b6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006176:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a12      	ldr	r2, [pc, #72]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 800617c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006182:	f7fc f973 	bl	800246c <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618a:	f7fc f96f 	bl	800246c <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e00f      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f0      	bne.n	800618a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	4905      	ldr	r1, [pc, #20]	; (80061c4 <HAL_RCC_OscConfig+0x82c>)
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_RCC_OscConfig+0x830>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60cb      	str	r3, [r1, #12]
 80061b4:	e001      	b.n	80061ba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3720      	adds	r7, #32
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40021000 	.word	0x40021000
 80061c8:	feeefffc 	.word	0xfeeefffc

080061cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e11d      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061e4:	4b90      	ldr	r3, [pc, #576]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d910      	bls.n	8006214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b8d      	ldr	r3, [pc, #564]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 020f 	bic.w	r2, r3, #15
 80061fa:	498b      	ldr	r1, [pc, #556]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006202:	4b89      	ldr	r3, [pc, #548]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d001      	beq.n	8006214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e105      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d010      	beq.n	8006242 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	4b81      	ldr	r3, [pc, #516]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800622c:	429a      	cmp	r2, r3
 800622e:	d908      	bls.n	8006242 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006230:	4b7e      	ldr	r3, [pc, #504]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	497b      	ldr	r1, [pc, #492]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d079      	beq.n	8006342 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b03      	cmp	r3, #3
 8006254:	d11e      	bne.n	8006294 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006256:	4b75      	ldr	r3, [pc, #468]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0dc      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006266:	f000 fa07 	bl	8006678 <RCC_GetSysClockFreqFromPLLSource>
 800626a:	4603      	mov	r3, r0
 800626c:	4a70      	ldr	r2, [pc, #448]	; (8006430 <HAL_RCC_ClockConfig+0x264>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d946      	bls.n	8006300 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006272:	4b6e      	ldr	r3, [pc, #440]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d140      	bne.n	8006300 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800627e:	4b6b      	ldr	r3, [pc, #428]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006286:	4a69      	ldr	r2, [pc, #420]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e035      	b.n	8006300 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d107      	bne.n	80062ac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800629c:	4b63      	ldr	r3, [pc, #396]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d115      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0b9      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062b4:	4b5d      	ldr	r3, [pc, #372]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0ad      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062c4:	4b59      	ldr	r3, [pc, #356]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0a5      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80062d4:	f000 f8b4 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80062d8:	4603      	mov	r3, r0
 80062da:	4a55      	ldr	r2, [pc, #340]	; (8006430 <HAL_RCC_ClockConfig+0x264>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d90f      	bls.n	8006300 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80062e0:	4b52      	ldr	r3, [pc, #328]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062ec:	4b4f      	ldr	r3, [pc, #316]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f4:	4a4d      	ldr	r2, [pc, #308]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006300:	4b4a      	ldr	r3, [pc, #296]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f023 0203 	bic.w	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4947      	ldr	r1, [pc, #284]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800630e:	4313      	orrs	r3, r2
 8006310:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006312:	f7fc f8ab 	bl	800246c <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006318:	e00a      	b.n	8006330 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631a:	f7fc f8a7 	bl	800246c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f241 3288 	movw	r2, #5000	; 0x1388
 8006328:	4293      	cmp	r3, r2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e077      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006330:	4b3e      	ldr	r3, [pc, #248]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 020c 	and.w	r2, r3, #12
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	429a      	cmp	r2, r3
 8006340:	d1eb      	bne.n	800631a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d105      	bne.n	8006354 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006348:	4b38      	ldr	r3, [pc, #224]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4a37      	ldr	r2, [pc, #220]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800634e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006352:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	4b31      	ldr	r3, [pc, #196]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636c:	429a      	cmp	r2, r3
 800636e:	d208      	bcs.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006370:	4b2e      	ldr	r3, [pc, #184]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	492b      	ldr	r1, [pc, #172]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d210      	bcs.n	80063b2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 020f 	bic.w	r2, r3, #15
 8006398:	4923      	ldr	r1, [pc, #140]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a0:	4b21      	ldr	r3, [pc, #132]	; (8006428 <HAL_RCC_ClockConfig+0x25c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d001      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e036      	b.n	8006420 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	4918      	ldr	r1, [pc, #96]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4910      	ldr	r1, [pc, #64]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063f0:	f000 f826 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b0d      	ldr	r3, [pc, #52]	; (800642c <HAL_RCC_ClockConfig+0x260>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	091b      	lsrs	r3, r3, #4
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	490c      	ldr	r1, [pc, #48]	; (8006434 <HAL_RCC_ClockConfig+0x268>)
 8006402:	5ccb      	ldrb	r3, [r1, r3]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <HAL_RCC_ClockConfig+0x26c>)
 800640e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <HAL_RCC_ClockConfig+0x270>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f7fb ffd9 	bl	80023cc <HAL_InitTick>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]

  return status;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40022000 	.word	0x40022000
 800642c:	40021000 	.word	0x40021000
 8006430:	04c4b400 	.word	0x04c4b400
 8006434:	08018e20 	.word	0x08018e20
 8006438:	20000000 	.word	0x20000000
 800643c:	20000004 	.word	0x20000004

08006440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006440:	b480      	push	{r7}
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800644e:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
 8006456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x34>
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b0c      	cmp	r3, #12
 800646c:	d121      	bne.n	80064b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d11e      	bne.n	80064b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006474:	4b34      	ldr	r3, [pc, #208]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006480:	4b31      	ldr	r3, [pc, #196]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	e005      	b.n	800649c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006490:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800649c:	4a2b      	ldr	r2, [pc, #172]	; (800654c <HAL_RCC_GetSysClockFreq+0x10c>)
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064b0:	e00a      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d102      	bne.n	80064be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064b8:	4b25      	ldr	r3, [pc, #148]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	e004      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d134      	bne.n	8006538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064ce:	4b1e      	ldr	r3, [pc, #120]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d003      	beq.n	80064e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d003      	beq.n	80064ec <HAL_RCC_GetSysClockFreq+0xac>
 80064e4:	e005      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064e6:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064e8:	617b      	str	r3, [r7, #20]
      break;
 80064ea:	e005      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <HAL_RCC_GetSysClockFreq+0x110>)
 80064ee:	617b      	str	r3, [r7, #20]
      break;
 80064f0:	e002      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	617b      	str	r3, [r7, #20]
      break;
 80064f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	3301      	adds	r3, #1
 8006504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	fb03 f202 	mul.w	r2, r3, r2
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_RCC_GetSysClockFreq+0x108>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	0e5b      	lsrs	r3, r3, #25
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	3301      	adds	r3, #1
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	fbb2 f3f3 	udiv	r3, r2, r3
 8006536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006538:	69bb      	ldr	r3, [r7, #24]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3724      	adds	r7, #36	; 0x24
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40021000 	.word	0x40021000
 800654c:	08018e38 	.word	0x08018e38
 8006550:	00f42400 	.word	0x00f42400

08006554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006558:	4b03      	ldr	r3, [pc, #12]	; (8006568 <HAL_RCC_GetHCLKFreq+0x14>)
 800655a:	681b      	ldr	r3, [r3, #0]
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000000 	.word	0x20000000

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006570:	f7ff fff0 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4904      	ldr	r1, [pc, #16]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40021000 	.word	0x40021000
 8006594:	08018e30 	.word	0x08018e30

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800659c:	f7ff ffda 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0adb      	lsrs	r3, r3, #11
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4904      	ldr	r1, [pc, #16]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40021000 	.word	0x40021000
 80065c0:	08018e30 	.word	0x08018e30

080065c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065d0:	4b27      	ldr	r3, [pc, #156]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065dc:	f7ff f8f8 	bl	80057d0 <HAL_PWREx_GetVoltageRange>
 80065e0:	6178      	str	r0, [r7, #20]
 80065e2:	e014      	b.n	800660e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065e4:	4b22      	ldr	r3, [pc, #136]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e8:	4a21      	ldr	r2, [pc, #132]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ee:	6593      	str	r3, [r2, #88]	; 0x58
 80065f0:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065fc:	f7ff f8e8 	bl	80057d0 <HAL_PWREx_GetVoltageRange>
 8006600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006602:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006606:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006614:	d10b      	bne.n	800662e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b80      	cmp	r3, #128	; 0x80
 800661a:	d913      	bls.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2ba0      	cmp	r3, #160	; 0xa0
 8006620:	d902      	bls.n	8006628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006622:	2302      	movs	r3, #2
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e00d      	b.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006628:	2301      	movs	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	e00a      	b.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b7f      	cmp	r3, #127	; 0x7f
 8006632:	d902      	bls.n	800663a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006634:	2302      	movs	r3, #2
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e004      	b.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b70      	cmp	r3, #112	; 0x70
 800663e:	d101      	bne.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006640:	2301      	movs	r3, #1
 8006642:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f023 020f 	bic.w	r2, r3, #15
 800664c:	4909      	ldr	r1, [pc, #36]	; (8006674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d001      	beq.n	8006666 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40021000 	.word	0x40021000
 8006674:	40022000 	.word	0x40022000

08006678 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800667e:	4b2d      	ldr	r3, [pc, #180]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d00b      	beq.n	80066a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d825      	bhi.n	80066e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d008      	beq.n	80066ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d11f      	bne.n	80066e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80066a2:	613b      	str	r3, [r7, #16]
    break;
 80066a4:	e01f      	b.n	80066e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80066a8:	613b      	str	r3, [r7, #16]
    break;
 80066aa:	e01c      	b.n	80066e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066ac:	4b21      	ldr	r3, [pc, #132]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066b8:	4b1e      	ldr	r3, [pc, #120]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e005      	b.n	80066d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80066d4:	4a19      	ldr	r2, [pc, #100]	; (800673c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066dc:	613b      	str	r3, [r7, #16]
    break;
 80066de:	e002      	b.n	80066e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
    break;
 80066e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	3301      	adds	r3, #1
 80066f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	fb03 f202 	mul.w	r2, r3, r2
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	fbb2 f3f3 	udiv	r3, r2, r3
 800670a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	0e5b      	lsrs	r3, r3, #25
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	3301      	adds	r3, #1
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006726:	683b      	ldr	r3, [r7, #0]
}
 8006728:	4618      	mov	r0, r3
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40021000 	.word	0x40021000
 8006738:	00f42400 	.word	0x00f42400
 800673c:	08018e38 	.word	0x08018e38

08006740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006748:	2300      	movs	r3, #0
 800674a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800674c:	2300      	movs	r3, #0
 800674e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006758:	2b00      	cmp	r3, #0
 800675a:	d040      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006760:	2b80      	cmp	r3, #128	; 0x80
 8006762:	d02a      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006764:	2b80      	cmp	r3, #128	; 0x80
 8006766:	d825      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006768:	2b60      	cmp	r3, #96	; 0x60
 800676a:	d026      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800676c:	2b60      	cmp	r3, #96	; 0x60
 800676e:	d821      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d006      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d81d      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d010      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006780:	e018      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006782:	4b89      	ldr	r3, [pc, #548]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	4a88      	ldr	r2, [pc, #544]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800678c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800678e:	e015      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f001 fa82 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067a0:	e00c      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3320      	adds	r3, #32
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fb6d 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067b2:	e003      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	74fb      	strb	r3, [r7, #19]
      break;
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80067ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067bc:	7cfb      	ldrb	r3, [r7, #19]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067c2:	4b79      	ldr	r3, [pc, #484]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d0:	4975      	ldr	r1, [pc, #468]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80067d8:	e001      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	7cfb      	ldrb	r3, [r7, #19]
 80067dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d047      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f2:	d030      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f8:	d82a      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fe:	d02a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006804:	d824      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680a:	d008      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800680c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006810:	d81e      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	d010      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800681c:	e018      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800681e:	4b62      	ldr	r3, [pc, #392]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	4a61      	ldr	r2, [pc, #388]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006828:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800682a:	e015      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f001 fa34 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800683c:	e00c      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3320      	adds	r3, #32
 8006842:	2100      	movs	r1, #0
 8006844:	4618      	mov	r0, r3
 8006846:	f001 fb1f 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800684e:	e003      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	74fb      	strb	r3, [r7, #19]
      break;
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10b      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800685e:	4b52      	ldr	r3, [pc, #328]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	494e      	ldr	r1, [pc, #312]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7cfb      	ldrb	r3, [r7, #19]
 8006878:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 809f 	beq.w	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006888:	2300      	movs	r3, #0
 800688a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800688c:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800689c:	2300      	movs	r3, #0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a2:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ac:	6593      	str	r3, [r2, #88]	; 0x58
 80068ae:	4b3e      	ldr	r3, [pc, #248]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ba:	2301      	movs	r3, #1
 80068bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068be:	4b3b      	ldr	r3, [pc, #236]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a3a      	ldr	r2, [pc, #232]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ca:	f7fb fdcf 	bl	800246c <HAL_GetTick>
 80068ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068d0:	e009      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d2:	f7fb fdcb 	bl	800246c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d902      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	74fb      	strb	r3, [r7, #19]
        break;
 80068e4:	e005      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068e6:	4b31      	ldr	r3, [pc, #196]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0ef      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d15b      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068f8:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01f      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	429a      	cmp	r2, r3
 8006914:	d019      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006916:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006920:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006922:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800692a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006932:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006938:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800693a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006942:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fb fd8a 	bl	800246c <HAL_GetTick>
 8006958:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800695a:	e00b      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695c:	f7fb fd86 	bl	800246c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	; 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d902      	bls.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	74fb      	strb	r3, [r7, #19]
            break;
 8006972:	e006      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0ec      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006982:	7cfb      	ldrb	r3, [r7, #19]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10c      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006998:	4903      	ldr	r1, [pc, #12]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069a0:	e008      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069a2:	7cfb      	ldrb	r3, [r7, #19]
 80069a4:	74bb      	strb	r3, [r7, #18]
 80069a6:	e005      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069b4:	7c7b      	ldrb	r3, [r7, #17]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d105      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ba:	4ba0      	ldr	r3, [pc, #640]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	4a9f      	ldr	r2, [pc, #636]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069d2:	4b9a      	ldr	r3, [pc, #616]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d8:	f023 0203 	bic.w	r2, r3, #3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	4996      	ldr	r1, [pc, #600]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069f4:	4b91      	ldr	r3, [pc, #580]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	f023 020c 	bic.w	r2, r3, #12
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	498e      	ldr	r1, [pc, #568]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a16:	4b89      	ldr	r3, [pc, #548]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	4985      	ldr	r1, [pc, #532]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a38:	4b80      	ldr	r3, [pc, #512]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a46:	497d      	ldr	r1, [pc, #500]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a5a:	4b78      	ldr	r3, [pc, #480]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a68:	4974      	ldr	r1, [pc, #464]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a7c:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	496c      	ldr	r1, [pc, #432]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a9e:	4b67      	ldr	r3, [pc, #412]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aac:	4963      	ldr	r1, [pc, #396]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ac0:	4b5e      	ldr	r3, [pc, #376]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ace:	495b      	ldr	r1, [pc, #364]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae2:	4b56      	ldr	r3, [pc, #344]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af0:	4952      	ldr	r1, [pc, #328]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b04:	4b4d      	ldr	r3, [pc, #308]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b12:	494a      	ldr	r1, [pc, #296]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b26:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b34:	4941      	ldr	r1, [pc, #260]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b48:	4b3c      	ldr	r3, [pc, #240]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b4e:	f023 0203 	bic.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b56:	4939      	ldr	r1, [pc, #228]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d028      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	4930      	ldr	r1, [pc, #192]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b88:	d106      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b8a:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b94:	60d3      	str	r3, [r2, #12]
 8006b96:	e011      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba0:	d10c      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f879 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006bb2:	7cfb      	ldrb	r3, [r7, #19]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006bb8:	7cfb      	ldrb	r3, [r7, #19]
 8006bba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d04d      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd0:	d108      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bd8:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006be2:	e012      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bea:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006bf4:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c02:	490e      	ldr	r1, [pc, #56]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c12:	d106      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1e:	60d3      	str	r3, [r2, #12]
 8006c20:	e020      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c2a:	d109      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c2c:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4a02      	ldr	r2, [pc, #8]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c36:	60d3      	str	r3, [r2, #12]
 8006c38:	e014      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 f825 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c5a:	7cfb      	ldrb	r3, [r7, #19]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
 8006c62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d028      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c70:	4b7a      	ldr	r3, [pc, #488]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7e:	4977      	ldr	r1, [pc, #476]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c8e:	d106      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c90:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a71      	ldr	r2, [pc, #452]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9a:	60d3      	str	r3, [r2, #12]
 8006c9c:	e011      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ca6:	d10c      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	2101      	movs	r1, #1
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fff6 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cb8:	7cfb      	ldrb	r3, [r7, #19]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006cbe:	7cfb      	ldrb	r3, [r7, #19]
 8006cc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01e      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cce:	4b63      	ldr	r3, [pc, #396]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cde:	495f      	ldr	r1, [pc, #380]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf0:	d10c      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ffd1 	bl	8007ca0 <RCCEx_PLLSAI1_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d02:	7cfb      	ldrb	r3, [r7, #19]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006d08:	7cfb      	ldrb	r3, [r7, #19]
 8006d0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d18:	4b50      	ldr	r3, [pc, #320]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d1e:	f023 0204 	bic.w	r2, r3, #4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d28:	494c      	ldr	r1, [pc, #304]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006d3c:	4b47      	ldr	r3, [pc, #284]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d42:	f023 0218 	bic.w	r2, r3, #24
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	4943      	ldr	r1, [pc, #268]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d035      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d60:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a3d      	ldr	r2, [pc, #244]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6c:	f7fb fb7e 	bl	800246c <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d72:	e009      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d74:	f7fb fb7a 	bl	800246c <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d902      	bls.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	74fb      	strb	r3, [r7, #19]
        break;
 8006d86:	e005      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d88:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ef      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006d94:	7cfb      	ldrb	r3, [r7, #19]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d113      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006d9a:	4b30      	ldr	r3, [pc, #192]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006daa:	492c      	ldr	r1, [pc, #176]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3320      	adds	r3, #32
 8006db6:	2102      	movs	r1, #2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 f865 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006dc2:	7cfb      	ldrb	r3, [r7, #19]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
 8006dca:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01e      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006dd8:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de8:	491c      	ldr	r1, [pc, #112]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3320      	adds	r3, #32
 8006e00:	2101      	movs	r1, #1
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 f840 	bl	8007e88 <RCCEx_PLLSAI2_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e0c:	7cfb      	ldrb	r3, [r7, #19]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006e12:	7cfb      	ldrb	r3, [r7, #19]
 8006e14:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d017      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e22:	4b0e      	ldr	r3, [pc, #56]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e32:	490a      	ldr	r1, [pc, #40]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e44:	d105      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e50:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e52:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40021000 	.word	0x40021000

08006e60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e72:	d13e      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006e74:	4bb6      	ldr	r3, [pc, #728]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e86:	d028      	beq.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e8e:	f200 86f2 	bhi.w	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e98:	d005      	beq.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006ea2:	f000 bee8 	b.w	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ea6:	4baa      	ldr	r3, [pc, #680]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f040 86e2 	bne.w	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eba:	61fb      	str	r3, [r7, #28]
      break;
 8006ebc:	f000 bedd 	b.w	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ec0:	4ba3      	ldr	r3, [pc, #652]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	f040 86d7 	bne.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8006ed0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ed4:	61fb      	str	r3, [r7, #28]
      break;
 8006ed6:	f000 bed2 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006eda:	4b9d      	ldr	r3, [pc, #628]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee6:	f040 86cc 	bne.w	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8006eea:	4b9a      	ldr	r3, [pc, #616]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006eec:	61fb      	str	r3, [r7, #28]
      break;
 8006eee:	f000 bec8 	b.w	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ef2:	4b97      	ldr	r3, [pc, #604]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d036      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d840      	bhi.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d020      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006f14:	e039      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f16:	4b8e      	ldr	r3, [pc, #568]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d116      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006f22:	4b8b      	ldr	r3, [pc, #556]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006f2e:	4b88      	ldr	r3, [pc, #544]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	091b      	lsrs	r3, r3, #4
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	e005      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006f3a:	4b85      	ldr	r3, [pc, #532]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	4a84      	ldr	r2, [pc, #528]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006f4e:	e01f      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61bb      	str	r3, [r7, #24]
      break;
 8006f54:	e01c      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f56:	4b7e      	ldr	r3, [pc, #504]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f62:	d102      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006f64:	4b7d      	ldr	r3, [pc, #500]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006f66:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006f68:	e012      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
      break;
 8006f6e:	e00f      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f70:	4b77      	ldr	r3, [pc, #476]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f7c:	d102      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006f7e:	4b77      	ldr	r3, [pc, #476]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006f80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006f82:	e005      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
      break;
 8006f88:	e002      	b.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61bb      	str	r3, [r7, #24]
      break;
 8006f8e:	bf00      	nop
    }

    switch(PeriphClk)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f96:	f000 8604 	beq.w	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fa0:	f200 8671 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006faa:	f000 8467 	beq.w	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fb4:	f200 8667 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fbe:	f000 852f 	beq.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc8:	f200 865d 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fd2:	f000 8185 	beq.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fdc:	f200 8653 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fe6:	f000 80cb 	beq.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ff0:	f200 8649 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffa:	f000 842e 	beq.w	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007004:	f200 863f 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800700e:	f000 83e2 	beq.w	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007018:	f200 8635 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007022:	f000 80ad 	beq.w	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702c:	f200 862b 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	f000 809b 	beq.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007040:	f200 8621 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800704a:	f000 8089 	beq.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007054:	f200 8617 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800705e:	f000 8552 	beq.w	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007068:	f200 860d 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007072:	f000 84fe 	beq.w	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707c:	f200 8603 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	f000 849f 	beq.w	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007090:	f200 85f9 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b80      	cmp	r3, #128	; 0x80
 8007098:	f000 846a 	beq.w	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b80      	cmp	r3, #128	; 0x80
 80070a0:	f200 85f1 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d84c      	bhi.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 85ea 	beq.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	2b1f      	cmp	r3, #31
 80070b8:	f200 85e5 	bhi.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080074d5 	.word	0x080074d5
 80070c8:	08007543 	.word	0x08007543
 80070cc:	08007c87 	.word	0x08007c87
 80070d0:	080075d7 	.word	0x080075d7
 80070d4:	08007c87 	.word	0x08007c87
 80070d8:	08007c87 	.word	0x08007c87
 80070dc:	08007c87 	.word	0x08007c87
 80070e0:	0800764f 	.word	0x0800764f
 80070e4:	08007c87 	.word	0x08007c87
 80070e8:	08007c87 	.word	0x08007c87
 80070ec:	08007c87 	.word	0x08007c87
 80070f0:	08007c87 	.word	0x08007c87
 80070f4:	08007c87 	.word	0x08007c87
 80070f8:	08007c87 	.word	0x08007c87
 80070fc:	08007c87 	.word	0x08007c87
 8007100:	080076d3 	.word	0x080076d3
 8007104:	08007c87 	.word	0x08007c87
 8007108:	08007c87 	.word	0x08007c87
 800710c:	08007c87 	.word	0x08007c87
 8007110:	08007c87 	.word	0x08007c87
 8007114:	08007c87 	.word	0x08007c87
 8007118:	08007c87 	.word	0x08007c87
 800711c:	08007c87 	.word	0x08007c87
 8007120:	08007c87 	.word	0x08007c87
 8007124:	08007c87 	.word	0x08007c87
 8007128:	08007c87 	.word	0x08007c87
 800712c:	08007c87 	.word	0x08007c87
 8007130:	08007c87 	.word	0x08007c87
 8007134:	08007c87 	.word	0x08007c87
 8007138:	08007c87 	.word	0x08007c87
 800713c:	08007c87 	.word	0x08007c87
 8007140:	08007755 	.word	0x08007755
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	f000 83e6 	beq.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800714c:	f000 bd9b 	b.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8007150:	40021000 	.word	0x40021000
 8007154:	0007a120 	.word	0x0007a120
 8007158:	08018e38 	.word	0x08018e38
 800715c:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007160:	69b9      	ldr	r1, [r7, #24]
 8007162:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007166:	f000 ff83 	bl	8008070 <RCCEx_GetSAIxPeriphCLKFreq>
 800716a:	61f8      	str	r0, [r7, #28]
      break;
 800716c:	f000 bd8e 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007176:	f000 ff7b 	bl	8008070 <RCCEx_GetSAIxPeriphCLKFreq>
 800717a:	61f8      	str	r0, [r7, #28]
      break;
 800717c:	f000 bd86 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007180:	4b9a      	ldr	r3, [pc, #616]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007186:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007192:	d015      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800719a:	f200 8092 	bhi.w	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a4:	d029      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ac:	f200 8089 	bhi.w	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d07b      	beq.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071bc:	d04a      	beq.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80071be:	e080      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80071c0:	4b8a      	ldr	r3, [pc, #552]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d17d      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80071cc:	4b87      	ldr	r3, [pc, #540]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80071d8:	4b84      	ldr	r3, [pc, #528]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	091b      	lsrs	r3, r3, #4
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	e005      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80071e4:	4b81      	ldr	r3, [pc, #516]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	4a7f      	ldr	r2, [pc, #508]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f6:	61fb      	str	r3, [r7, #28]
          break;
 80071f8:	e066      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80071fa:	4b7c      	ldr	r3, [pc, #496]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007206:	d162      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007208:	4b78      	ldr	r3, [pc, #480]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007214:	d15b      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007216:	4b75      	ldr	r3, [pc, #468]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007220:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	fb03 f202 	mul.w	r2, r3, r2
 800722a:	4b70      	ldr	r3, [pc, #448]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	3301      	adds	r3, #1
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800723c:	4b6b      	ldr	r3, [pc, #428]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	0d5b      	lsrs	r3, r3, #21
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	3301      	adds	r3, #1
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	61fb      	str	r3, [r7, #28]
          break;
 8007252:	e03c      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007254:	4b65      	ldr	r3, [pc, #404]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007260:	d138      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007262:	4b62      	ldr	r3, [pc, #392]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800726a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726e:	d131      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007270:	4b5e      	ldr	r3, [pc, #376]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	0a1b      	lsrs	r3, r3, #8
 8007276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	fb03 f202 	mul.w	r2, r3, r2
 8007284:	4b59      	ldr	r3, [pc, #356]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	3301      	adds	r3, #1
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007296:	4b55      	ldr	r3, [pc, #340]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	0d5b      	lsrs	r3, r3, #21
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	3301      	adds	r3, #1
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072aa:	61fb      	str	r3, [r7, #28]
          break;
 80072ac:	e012      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80072ae:	4b4f      	ldr	r3, [pc, #316]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80072b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d10e      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80072bc:	4b4d      	ldr	r3, [pc, #308]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80072be:	61fb      	str	r3, [r7, #28]
          break;
 80072c0:	e00b      	b.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80072c2:	bf00      	nop
 80072c4:	f000 bce2 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072c8:	bf00      	nop
 80072ca:	f000 bcdf 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072ce:	bf00      	nop
 80072d0:	f000 bcdc 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072d4:	bf00      	nop
 80072d6:	f000 bcd9 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80072da:	bf00      	nop
        break;
 80072dc:	f000 bcd6 	b.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80072e0:	4b42      	ldr	r3, [pc, #264]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80072e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ee:	d13d      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80072f0:	4b3e      	ldr	r3, [pc, #248]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072fc:	f040 84c5 	bne.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007300:	4b3a      	ldr	r3, [pc, #232]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730c:	f040 84bd 	bne.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007310:	4b36      	ldr	r3, [pc, #216]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	0a1b      	lsrs	r3, r3, #8
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	fb03 f202 	mul.w	r2, r3, r2
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	3301      	adds	r3, #1
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007336:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	0edb      	lsrs	r3, r3, #27
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007348:	4b28      	ldr	r3, [pc, #160]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8007354:	2311      	movs	r3, #17
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e001      	b.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800735a:	2307      	movs	r3, #7
 800735c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	61fb      	str	r3, [r7, #28]
      break;
 8007368:	f000 bc8f 	b.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800736c:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800737e:	d016      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007386:	f200 809b 	bhi.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007390:	d032      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007398:	f200 8092 	bhi.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8084 	beq.w	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073aa:	d052      	beq.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80073ac:	e088      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	f040 8084 	bne.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80073bc:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80073c8:	4b08      	ldr	r3, [pc, #32]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	091b      	lsrs	r3, r3, #4
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	e005      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80073d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	4a03      	ldr	r2, [pc, #12]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	61fb      	str	r3, [r7, #28]
          break;
 80073e8:	e06c      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80073ea:	bf00      	nop
 80073ec:	40021000 	.word	0x40021000
 80073f0:	08018e38 	.word	0x08018e38
 80073f4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80073f8:	4ba5      	ldr	r3, [pc, #660]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007404:	d160      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007406:	4ba2      	ldr	r3, [pc, #648]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800740e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007412:	d159      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007414:	4b9e      	ldr	r3, [pc, #632]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	fb03 f202 	mul.w	r2, r3, r2
 8007428:	4b99      	ldr	r3, [pc, #612]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	3301      	adds	r3, #1
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800743a:	4b95      	ldr	r3, [pc, #596]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	0d5b      	lsrs	r3, r3, #21
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	3301      	adds	r3, #1
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	61fb      	str	r3, [r7, #28]
          break;
 8007450:	e03a      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007452:	4b8f      	ldr	r3, [pc, #572]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800745e:	d135      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007460:	4b8b      	ldr	r3, [pc, #556]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746c:	d12e      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800746e:	4b88      	ldr	r3, [pc, #544]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007478:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	fb03 f202 	mul.w	r2, r3, r2
 8007482:	4b83      	ldr	r3, [pc, #524]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	3301      	adds	r3, #1
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007494:	4b7e      	ldr	r3, [pc, #504]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	0d5b      	lsrs	r3, r3, #21
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	3301      	adds	r3, #1
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a8:	61fb      	str	r3, [r7, #28]
          break;
 80074aa:	e00f      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80074ac:	4b78      	ldr	r3, [pc, #480]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80074ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d10a      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80074ba:	4b76      	ldr	r3, [pc, #472]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074bc:	61fb      	str	r3, [r7, #28]
          break;
 80074be:	e007      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80074c0:	bf00      	nop
 80074c2:	e3e2      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074c4:	bf00      	nop
 80074c6:	e3e0      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074c8:	bf00      	nop
 80074ca:	e3de      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074cc:	bf00      	nop
 80074ce:	e3dc      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80074d0:	bf00      	nop
      break;
 80074d2:	e3da      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80074d4:	4b6e      	ldr	r3, [pc, #440]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d827      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	08007505 	.word	0x08007505
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	08007521 	.word	0x08007521
          frequency = HAL_RCC_GetPCLK2Freq();
 80074fc:	f7ff f84c 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8007500:	61f8      	str	r0, [r7, #28]
          break;
 8007502:	e01d      	b.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007504:	f7fe ff9c 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007508:	61f8      	str	r0, [r7, #28]
          break;
 800750a:	e019      	b.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800750c:	4b60      	ldr	r3, [pc, #384]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007518:	d10f      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800751a:	4b5f      	ldr	r3, [pc, #380]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800751c:	61fb      	str	r3, [r7, #28]
          break;
 800751e:	e00c      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007520:	4b5b      	ldr	r3, [pc, #364]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d107      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800752e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007532:	61fb      	str	r3, [r7, #28]
          break;
 8007534:	e003      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8007536:	bf00      	nop
 8007538:	e3a8      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800753a:	bf00      	nop
 800753c:	e3a6      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800753e:	bf00      	nop
        break;
 8007540:	e3a4      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007542:	4b53      	ldr	r3, [pc, #332]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	f003 030c 	and.w	r3, r3, #12
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b0c      	cmp	r3, #12
 8007552:	d83a      	bhi.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007591 	.word	0x08007591
 8007560:	080075cb 	.word	0x080075cb
 8007564:	080075cb 	.word	0x080075cb
 8007568:	080075cb 	.word	0x080075cb
 800756c:	08007599 	.word	0x08007599
 8007570:	080075cb 	.word	0x080075cb
 8007574:	080075cb 	.word	0x080075cb
 8007578:	080075cb 	.word	0x080075cb
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075cb 	.word	0x080075cb
 8007584:	080075cb 	.word	0x080075cb
 8007588:	080075cb 	.word	0x080075cb
 800758c:	080075b5 	.word	0x080075b5
          frequency = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fe ffec 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007594:	61f8      	str	r0, [r7, #28]
          break;
 8007596:	e01d      	b.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8007598:	f7fe ff52 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800759c:	61f8      	str	r0, [r7, #28]
          break;
 800759e:	e019      	b.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075a0:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ac:	d10f      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80075ae:	4b3a      	ldr	r3, [pc, #232]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80075b0:	61fb      	str	r3, [r7, #28]
          break;
 80075b2:	e00c      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075b4:	4b36      	ldr	r3, [pc, #216]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d107      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	61fb      	str	r3, [r7, #28]
          break;
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80075ca:	bf00      	nop
 80075cc:	e35e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075ce:	bf00      	nop
 80075d0:	e35c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075d2:	bf00      	nop
        break;
 80075d4:	e35a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80075d6:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b30      	cmp	r3, #48	; 0x30
 80075e6:	d021      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b30      	cmp	r3, #48	; 0x30
 80075ec:	d829      	bhi.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d011      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d823      	bhi.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b10      	cmp	r3, #16
 8007604:	d004      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8007606:	e01c      	b.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fe ffb0 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800760c:	61f8      	str	r0, [r7, #28]
          break;
 800760e:	e01d      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8007610:	f7fe ff16 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007614:	61f8      	str	r0, [r7, #28]
          break;
 8007616:	e019      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007618:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007624:	d10f      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8007626:	4b1c      	ldr	r3, [pc, #112]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007628:	61fb      	str	r3, [r7, #28]
          break;
 800762a:	e00c      	b.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800762c:	4b18      	ldr	r3, [pc, #96]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b02      	cmp	r3, #2
 8007638:	d107      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800763a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763e:	61fb      	str	r3, [r7, #28]
          break;
 8007640:	e003      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8007642:	bf00      	nop
 8007644:	e322      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007646:	bf00      	nop
 8007648:	e320      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800764a:	bf00      	nop
        break;
 800764c:	e31e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800764e:	4b10      	ldr	r3, [pc, #64]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007654:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2bc0      	cmp	r3, #192	; 0xc0
 800765e:	d027      	beq.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2bc0      	cmp	r3, #192	; 0xc0
 8007664:	d82f      	bhi.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b80      	cmp	r3, #128	; 0x80
 800766a:	d017      	beq.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d829      	bhi.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d004      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800767e:	e022      	b.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007680:	f7fe ff74 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007684:	61f8      	str	r0, [r7, #28]
          break;
 8007686:	e023      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8007688:	f7fe feda 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800768c:	61f8      	str	r0, [r7, #28]
          break;
 800768e:	e01f      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8007690:	40021000 	.word	0x40021000
 8007694:	02dc6c00 	.word	0x02dc6c00
 8007698:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800769c:	4b9b      	ldr	r3, [pc, #620]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a8:	d10f      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80076aa:	4b99      	ldr	r3, [pc, #612]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076ac:	61fb      	str	r3, [r7, #28]
          break;
 80076ae:	e00c      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076b0:	4b96      	ldr	r3, [pc, #600]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d107      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80076be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c2:	61fb      	str	r3, [r7, #28]
          break;
 80076c4:	e003      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80076c6:	bf00      	nop
 80076c8:	e2e0      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076ca:	bf00      	nop
 80076cc:	e2de      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076ce:	bf00      	nop
        break;
 80076d0:	e2dc      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80076d2:	4b8e      	ldr	r3, [pc, #568]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e4:	d025      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ec:	d82c      	bhi.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f4:	d013      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d824      	bhi.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770a:	d004      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 800770c:	e01c      	b.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800770e:	f7fe ff2d 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007712:	61f8      	str	r0, [r7, #28]
          break;
 8007714:	e01d      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007716:	f7fe fe93 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800771a:	61f8      	str	r0, [r7, #28]
          break;
 800771c:	e019      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800771e:	4b7b      	ldr	r3, [pc, #492]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772a:	d10f      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 800772c:	4b78      	ldr	r3, [pc, #480]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800772e:	61fb      	str	r3, [r7, #28]
          break;
 8007730:	e00c      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007732:	4b76      	ldr	r3, [pc, #472]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b02      	cmp	r3, #2
 800773e:	d107      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8007740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007744:	61fb      	str	r3, [r7, #28]
          break;
 8007746:	e003      	b.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8007748:	bf00      	nop
 800774a:	e29f      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800774c:	bf00      	nop
 800774e:	e29d      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007750:	bf00      	nop
        break;
 8007752:	e29b      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007754:	4b6d      	ldr	r3, [pc, #436]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007766:	d025      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776e:	d82c      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007776:	d013      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777e:	d824      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d004      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 800778e:	e01c      	b.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007790:	f7fe feec 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007794:	61f8      	str	r0, [r7, #28]
          break;
 8007796:	e01d      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8007798:	f7fe fe52 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 800779c:	61f8      	str	r0, [r7, #28]
          break;
 800779e:	e019      	b.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a0:	4b5a      	ldr	r3, [pc, #360]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ac:	d10f      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80077ae:	4b58      	ldr	r3, [pc, #352]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80077b0:	61fb      	str	r3, [r7, #28]
          break;
 80077b2:	e00c      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80077b4:	4b55      	ldr	r3, [pc, #340]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d107      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80077c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c6:	61fb      	str	r3, [r7, #28]
          break;
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80077ca:	bf00      	nop
 80077cc:	e25e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80077ce:	bf00      	nop
 80077d0:	e25c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80077d2:	bf00      	nop
        break;
 80077d4:	e25a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80077d6:	4b4d      	ldr	r3, [pc, #308]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077e8:	d007      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077f0:	d12f      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fe fe25 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80077f6:	61f8      	str	r0, [r7, #28]
          break;
 80077f8:	e02e      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80077fa:	4b44      	ldr	r3, [pc, #272]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007806:	d126      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8007808:	4b40      	ldr	r3, [pc, #256]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d020      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007814:	4b3d      	ldr	r3, [pc, #244]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	fb03 f202 	mul.w	r2, r3, r2
 8007828:	4b38      	ldr	r3, [pc, #224]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	3301      	adds	r3, #1
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800783a:	4b34      	ldr	r3, [pc, #208]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	0e5b      	lsrs	r3, r3, #25
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	3301      	adds	r3, #1
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	fbb2 f3f3 	udiv	r3, r2, r3
 800784e:	61fb      	str	r3, [r7, #28]
          break;
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8007852:	bf00      	nop
 8007854:	e21a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007856:	bf00      	nop
        break;
 8007858:	e218      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800785a:	4b2c      	ldr	r3, [pc, #176]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800785c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 800786c:	f7fe fe94 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8007870:	61f8      	str	r0, [r7, #28]
        break;
 8007872:	e20b      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007874:	f7fe fde4 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007878:	61f8      	str	r0, [r7, #28]
        break;
 800787a:	e207      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800787c:	4b23      	ldr	r3, [pc, #140]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800787e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007882:	f003 0318 	and.w	r3, r3, #24
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b10      	cmp	r3, #16
 800788c:	d010      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b10      	cmp	r3, #16
 8007892:	d834      	bhi.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d024      	beq.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80078a0:	e02d      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80078a2:	69b9      	ldr	r1, [r7, #24]
 80078a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80078a8:	f000 fbe2 	bl	8008070 <RCCEx_GetSAIxPeriphCLKFreq>
 80078ac:	61f8      	str	r0, [r7, #28]
          break;
 80078ae:	e02b      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80078b0:	4b16      	ldr	r3, [pc, #88]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d122      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80078bc:	4b13      	ldr	r3, [pc, #76]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80078c8:	4b10      	ldr	r3, [pc, #64]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	e005      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80078d4:	4b0d      	ldr	r3, [pc, #52]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80078e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e6:	61fb      	str	r3, [r7, #28]
          break;
 80078e8:	e00b      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f6:	d106      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80078fa:	61fb      	str	r3, [r7, #28]
          break;
 80078fc:	e003      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80078fe:	bf00      	nop
 8007900:	e1c4      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007902:	bf00      	nop
 8007904:	e1c2      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007906:	bf00      	nop
        break;
 8007908:	e1c0      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800790a:	bf00      	nop
 800790c:	40021000 	.word	0x40021000
 8007910:	00f42400 	.word	0x00f42400
 8007914:	08018e38 	.word	0x08018e38
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007918:	4b96      	ldr	r3, [pc, #600]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792a:	d013      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007932:	d819      	bhi.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007940:	d004      	beq.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8007942:	e011      	b.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007944:	f7fe fe12 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007948:	61f8      	str	r0, [r7, #28]
          break;
 800794a:	e010      	b.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800794c:	f7fe fd78 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007950:	61f8      	str	r0, [r7, #28]
          break;
 8007952:	e00c      	b.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007954:	4b87      	ldr	r3, [pc, #540]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800795c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007960:	d104      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8007962:	4b85      	ldr	r3, [pc, #532]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007964:	61fb      	str	r3, [r7, #28]
          break;
 8007966:	e001      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8007968:	bf00      	nop
 800796a:	e18f      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800796c:	bf00      	nop
        break;
 800796e:	e18d      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007970:	4b80      	ldr	r3, [pc, #512]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007976:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007982:	d013      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800798a:	d819      	bhi.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007998:	d004      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800799a:	e011      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 800799c:	f7fe fde6 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80079a0:	61f8      	str	r0, [r7, #28]
          break;
 80079a2:	e010      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80079a4:	f7fe fd4c 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 80079a8:	61f8      	str	r0, [r7, #28]
          break;
 80079aa:	e00c      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ac:	4b71      	ldr	r3, [pc, #452]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b8:	d104      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80079ba:	4b6f      	ldr	r3, [pc, #444]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80079bc:	61fb      	str	r3, [r7, #28]
          break;
 80079be:	e001      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80079c0:	bf00      	nop
 80079c2:	e163      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80079c4:	bf00      	nop
        break;
 80079c6:	e161      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80079c8:	4b6a      	ldr	r3, [pc, #424]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079da:	d013      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079e2:	d819      	bhi.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f0:	d004      	beq.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fe fdba 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80079f8:	61f8      	str	r0, [r7, #28]
          break;
 80079fa:	e010      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80079fc:	f7fe fd20 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007a00:	61f8      	str	r0, [r7, #28]
          break;
 8007a02:	e00c      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a04:	4b5b      	ldr	r3, [pc, #364]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a10:	d104      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8007a12:	4b59      	ldr	r3, [pc, #356]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a14:	61fb      	str	r3, [r7, #28]
          break;
 8007a16:	e001      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8007a18:	bf00      	nop
 8007a1a:	e137      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a1c:	bf00      	nop
        break;
 8007a1e:	e135      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007a20:	4b54      	ldr	r3, [pc, #336]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d011      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d818      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d004      	beq.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8007a44:	e011      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a46:	f7fe fd91 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007a4a:	61f8      	str	r0, [r7, #28]
          break;
 8007a4c:	e010      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fe fcf7 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007a52:	61f8      	str	r0, [r7, #28]
          break;
 8007a54:	e00c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a56:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a62:	d104      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8007a64:	4b44      	ldr	r3, [pc, #272]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a66:	61fb      	str	r3, [r7, #28]
          break;
 8007a68:	e001      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8007a6a:	bf00      	nop
 8007a6c:	e10e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a6e:	bf00      	nop
        break;
 8007a70:	e10c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007a72:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007a84:	d02c      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007a8c:	d833      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a94:	d01a      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a9c:	d82b      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007aaa:	d004      	beq.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8007aac:	e023      	b.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007aae:	f7fe fd5d 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007ab2:	61f8      	str	r0, [r7, #28]
          break;
 8007ab4:	e026      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007ab6:	4b2f      	ldr	r3, [pc, #188]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d11a      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8007ac4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ac8:	61fb      	str	r3, [r7, #28]
          break;
 8007aca:	e016      	b.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007acc:	4b29      	ldr	r3, [pc, #164]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad8:	d111      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8007ada:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007adc:	61fb      	str	r3, [r7, #28]
          break;
 8007ade:	e00e      	b.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d109      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8007aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007af2:	61fb      	str	r3, [r7, #28]
          break;
 8007af4:	e005      	b.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8007af6:	bf00      	nop
 8007af8:	e0c8      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007afa:	bf00      	nop
 8007afc:	e0c6      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007afe:	bf00      	nop
 8007b00:	e0c4      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b02:	bf00      	nop
        break;
 8007b04:	e0c2      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007b06:	4b1b      	ldr	r3, [pc, #108]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b18:	d030      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b20:	d837      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b28:	d01a      	beq.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b30:	d82f      	bhi.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b3e:	d004      	beq.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8007b40:	e027      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b42:	f7fe fd13 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8007b46:	61f8      	str	r0, [r7, #28]
          break;
 8007b48:	e02a      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d11e      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8007b58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b5c:	61fb      	str	r3, [r7, #28]
          break;
 8007b5e:	e01a      	b.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b60:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6c:	d115      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8007b6e:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007b70:	61fb      	str	r3, [r7, #28]
          break;
 8007b72:	e012      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007b74:	40021000 	.word	0x40021000
 8007b78:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b7c:	4b46      	ldr	r3, [pc, #280]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d109      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8e:	61fb      	str	r3, [r7, #28]
          break;
 8007b90:	e005      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8007b92:	bf00      	nop
 8007b94:	e07a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b96:	bf00      	nop
 8007b98:	e078      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b9a:	bf00      	nop
 8007b9c:	e076      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007b9e:	bf00      	nop
        break;
 8007ba0:	e074      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007ba2:	4b3d      	ldr	r3, [pc, #244]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007ba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ba8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb4:	d02c      	beq.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bbc:	d855      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bca:	d004      	beq.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8007bcc:	e04d      	b.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bce:	f7fe fc37 	bl	8006440 <HAL_RCC_GetSysClockFreq>
 8007bd2:	61f8      	str	r0, [r7, #28]
          break;
 8007bd4:	e04e      	b.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007bd6:	4b30      	ldr	r3, [pc, #192]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d145      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007be2:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8007bee:	4b2a      	ldr	r3, [pc, #168]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	091b      	lsrs	r3, r3, #4
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	e005      	b.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8007bfa:	4b27      	ldr	r3, [pc, #156]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	4a25      	ldr	r2, [pc, #148]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0c:	61fb      	str	r3, [r7, #28]
          break;
 8007c0e:	e02e      	b.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007c10:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c1c:	d129      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007c1e:	4b1e      	ldr	r3, [pc, #120]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c2a:	d122      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007c2c:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	0a1b      	lsrs	r3, r3, #8
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	fb03 f202 	mul.w	r2, r3, r2
 8007c40:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	0d5b      	lsrs	r3, r3, #21
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c66:	61fb      	str	r3, [r7, #28]
          break;
 8007c68:	e003      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8007c6a:	bf00      	nop
 8007c6c:	e00e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c6e:	bf00      	nop
 8007c70:	e00c      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007c72:	bf00      	nop
        break;
 8007c74:	e00a      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c76:	bf00      	nop
 8007c78:	e008      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e006      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e004      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c82:	bf00      	nop
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007c8a:	bf00      	nop
    }
  }

  return(frequency);
 8007c8c:	69fb      	ldr	r3, [r7, #28]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	08018e38 	.word	0x08018e38

08007ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007cae:	4b72      	ldr	r3, [pc, #456]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007cba:	4b6f      	ldr	r3, [pc, #444]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0203 	and.w	r2, r3, #3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d103      	bne.n	8007cd2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d142      	bne.n	8007d58 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
 8007cd6:	e03f      	b.n	8007d58 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d018      	beq.n	8007d12 <RCCEx_PLLSAI1_Config+0x72>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d825      	bhi.n	8007d30 <RCCEx_PLLSAI1_Config+0x90>
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d002      	beq.n	8007cee <RCCEx_PLLSAI1_Config+0x4e>
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d009      	beq.n	8007d00 <RCCEx_PLLSAI1_Config+0x60>
 8007cec:	e020      	b.n	8007d30 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007cee:	4b62      	ldr	r3, [pc, #392]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d11d      	bne.n	8007d36 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cfe:	e01a      	b.n	8007d36 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d00:	4b5d      	ldr	r3, [pc, #372]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d116      	bne.n	8007d3a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d10:	e013      	b.n	8007d3a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d12:	4b59      	ldr	r3, [pc, #356]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10f      	bne.n	8007d3e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d1e:	4b56      	ldr	r3, [pc, #344]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d2e:	e006      	b.n	8007d3e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
      break;
 8007d34:	e004      	b.n	8007d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007d36:	bf00      	nop
 8007d38:	e002      	b.n	8007d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007d3a:	bf00      	nop
 8007d3c:	e000      	b.n	8007d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d108      	bne.n	8007d58 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007d46:	4b4c      	ldr	r3, [pc, #304]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f023 0203 	bic.w	r2, r3, #3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4949      	ldr	r1, [pc, #292]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f040 8086 	bne.w	8007e6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007d60:	4b45      	ldr	r3, [pc, #276]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a44      	ldr	r2, [pc, #272]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d6c:	f7fa fb7e 	bl	800246c <HAL_GetTick>
 8007d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d72:	e009      	b.n	8007d88 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d74:	f7fa fb7a 	bl	800246c <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d902      	bls.n	8007d88 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	73fb      	strb	r3, [r7, #15]
        break;
 8007d86:	e005      	b.n	8007d94 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d88:	4b3b      	ldr	r3, [pc, #236]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ef      	bne.n	8007d74 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d168      	bne.n	8007e6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007da0:	4b35      	ldr	r3, [pc, #212]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	4b35      	ldr	r3, [pc, #212]	; (8007e7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007da6:	4013      	ands	r3, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6892      	ldr	r2, [r2, #8]
 8007dac:	0211      	lsls	r1, r2, #8
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	68d2      	ldr	r2, [r2, #12]
 8007db2:	06d2      	lsls	r2, r2, #27
 8007db4:	4311      	orrs	r1, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6852      	ldr	r2, [r2, #4]
 8007dba:	3a01      	subs	r2, #1
 8007dbc:	0112      	lsls	r2, r2, #4
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	492d      	ldr	r1, [pc, #180]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	610b      	str	r3, [r1, #16]
 8007dc6:	e02d      	b.n	8007e24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d115      	bne.n	8007dfa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007dce:	4b2a      	ldr	r3, [pc, #168]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6892      	ldr	r2, [r2, #8]
 8007dda:	0211      	lsls	r1, r2, #8
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6912      	ldr	r2, [r2, #16]
 8007de0:	0852      	lsrs	r2, r2, #1
 8007de2:	3a01      	subs	r2, #1
 8007de4:	0552      	lsls	r2, r2, #21
 8007de6:	4311      	orrs	r1, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6852      	ldr	r2, [r2, #4]
 8007dec:	3a01      	subs	r2, #1
 8007dee:	0112      	lsls	r2, r2, #4
 8007df0:	430a      	orrs	r2, r1
 8007df2:	4921      	ldr	r1, [pc, #132]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	610b      	str	r3, [r1, #16]
 8007df8:	e014      	b.n	8007e24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007dfa:	4b1f      	ldr	r3, [pc, #124]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6892      	ldr	r2, [r2, #8]
 8007e06:	0211      	lsls	r1, r2, #8
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6952      	ldr	r2, [r2, #20]
 8007e0c:	0852      	lsrs	r2, r2, #1
 8007e0e:	3a01      	subs	r2, #1
 8007e10:	0652      	lsls	r2, r2, #25
 8007e12:	4311      	orrs	r1, r2
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6852      	ldr	r2, [r2, #4]
 8007e18:	3a01      	subs	r2, #1
 8007e1a:	0112      	lsls	r2, r2, #4
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	4916      	ldr	r1, [pc, #88]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e24:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a13      	ldr	r2, [pc, #76]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e30:	f7fa fb1c 	bl	800246c <HAL_GetTick>
 8007e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e36:	e009      	b.n	8007e4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e38:	f7fa fb18 	bl	800246c <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d902      	bls.n	8007e4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	73fb      	strb	r3, [r7, #15]
          break;
 8007e4a:	e005      	b.n	8007e58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0ef      	beq.n	8007e38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	4904      	ldr	r1, [pc, #16]	; (8007e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40021000 	.word	0x40021000
 8007e7c:	07ff800f 	.word	0x07ff800f
 8007e80:	ff9f800f 	.word	0xff9f800f
 8007e84:	f9ff800f 	.word	0xf9ff800f

08007e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e96:	4b72      	ldr	r3, [pc, #456]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00e      	beq.n	8007ec0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007ea2:	4b6f      	ldr	r3, [pc, #444]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0203 	and.w	r2, r3, #3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d103      	bne.n	8007eba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d142      	bne.n	8007f40 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	73fb      	strb	r3, [r7, #15]
 8007ebe:	e03f      	b.n	8007f40 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d018      	beq.n	8007efa <RCCEx_PLLSAI2_Config+0x72>
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d825      	bhi.n	8007f18 <RCCEx_PLLSAI2_Config+0x90>
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d002      	beq.n	8007ed6 <RCCEx_PLLSAI2_Config+0x4e>
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d009      	beq.n	8007ee8 <RCCEx_PLLSAI2_Config+0x60>
 8007ed4:	e020      	b.n	8007f18 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ed6:	4b62      	ldr	r3, [pc, #392]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d11d      	bne.n	8007f1e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ee6:	e01a      	b.n	8007f1e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ee8:	4b5d      	ldr	r3, [pc, #372]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d116      	bne.n	8007f22 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ef8:	e013      	b.n	8007f22 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007efa:	4b59      	ldr	r3, [pc, #356]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10f      	bne.n	8007f26 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f06:	4b56      	ldr	r3, [pc, #344]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f16:	e006      	b.n	8007f26 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1c:	e004      	b.n	8007f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d108      	bne.n	8007f40 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007f2e:	4b4c      	ldr	r3, [pc, #304]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f023 0203 	bic.w	r2, r3, #3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4949      	ldr	r1, [pc, #292]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 8086 	bne.w	8008054 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007f48:	4b45      	ldr	r3, [pc, #276]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a44      	ldr	r2, [pc, #272]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f54:	f7fa fa8a 	bl	800246c <HAL_GetTick>
 8007f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f5a:	e009      	b.n	8007f70 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f5c:	f7fa fa86 	bl	800246c <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d902      	bls.n	8007f70 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8007f6e:	e005      	b.n	8007f7c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f70:	4b3b      	ldr	r3, [pc, #236]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1ef      	bne.n	8007f5c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d168      	bne.n	8008054 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d113      	bne.n	8007fb0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f88:	4b35      	ldr	r3, [pc, #212]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f8a:	695a      	ldr	r2, [r3, #20]
 8007f8c:	4b35      	ldr	r3, [pc, #212]	; (8008064 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6892      	ldr	r2, [r2, #8]
 8007f94:	0211      	lsls	r1, r2, #8
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	68d2      	ldr	r2, [r2, #12]
 8007f9a:	06d2      	lsls	r2, r2, #27
 8007f9c:	4311      	orrs	r1, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6852      	ldr	r2, [r2, #4]
 8007fa2:	3a01      	subs	r2, #1
 8007fa4:	0112      	lsls	r2, r2, #4
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	492d      	ldr	r1, [pc, #180]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	614b      	str	r3, [r1, #20]
 8007fae:	e02d      	b.n	800800c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d115      	bne.n	8007fe2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fb8:	695a      	ldr	r2, [r3, #20]
 8007fba:	4b2b      	ldr	r3, [pc, #172]	; (8008068 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6892      	ldr	r2, [r2, #8]
 8007fc2:	0211      	lsls	r1, r2, #8
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6912      	ldr	r2, [r2, #16]
 8007fc8:	0852      	lsrs	r2, r2, #1
 8007fca:	3a01      	subs	r2, #1
 8007fcc:	0552      	lsls	r2, r2, #21
 8007fce:	4311      	orrs	r1, r2
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6852      	ldr	r2, [r2, #4]
 8007fd4:	3a01      	subs	r2, #1
 8007fd6:	0112      	lsls	r2, r2, #4
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	4921      	ldr	r1, [pc, #132]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	614b      	str	r3, [r1, #20]
 8007fe0:	e014      	b.n	800800c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007fe2:	4b1f      	ldr	r3, [pc, #124]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fe4:	695a      	ldr	r2, [r3, #20]
 8007fe6:	4b21      	ldr	r3, [pc, #132]	; (800806c <RCCEx_PLLSAI2_Config+0x1e4>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	6892      	ldr	r2, [r2, #8]
 8007fee:	0211      	lsls	r1, r2, #8
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6952      	ldr	r2, [r2, #20]
 8007ff4:	0852      	lsrs	r2, r2, #1
 8007ff6:	3a01      	subs	r2, #1
 8007ff8:	0652      	lsls	r2, r2, #25
 8007ffa:	4311      	orrs	r1, r2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6852      	ldr	r2, [r2, #4]
 8008000:	3a01      	subs	r2, #1
 8008002:	0112      	lsls	r2, r2, #4
 8008004:	430a      	orrs	r2, r1
 8008006:	4916      	ldr	r1, [pc, #88]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008008:	4313      	orrs	r3, r2
 800800a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800800c:	4b14      	ldr	r3, [pc, #80]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a13      	ldr	r2, [pc, #76]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fa fa28 	bl	800246c <HAL_GetTick>
 800801c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800801e:	e009      	b.n	8008034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008020:	f7fa fa24 	bl	800246c <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d902      	bls.n	8008034 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	73fb      	strb	r3, [r7, #15]
          break;
 8008032:	e005      	b.n	8008040 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0ef      	beq.n	8008020 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008046:	4b06      	ldr	r3, [pc, #24]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	4904      	ldr	r1, [pc, #16]	; (8008060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008050:	4313      	orrs	r3, r2
 8008052:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40021000 	.word	0x40021000
 8008064:	07ff800f 	.word	0x07ff800f
 8008068:	ff9f800f 	.word	0xff9f800f
 800806c:	f9ff800f 	.word	0xf9ff800f

08008070 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008070:	b480      	push	{r7}
 8008072:	b089      	sub	sp, #36	; 0x24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800808c:	d10b      	bne.n	80080a6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800808e:	4b7e      	ldr	r3, [pc, #504]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008090:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008094:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008098:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b60      	cmp	r3, #96	; 0x60
 800809e:	d112      	bne.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80080a0:	4b7a      	ldr	r3, [pc, #488]	; (800828c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	e00f      	b.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ac:	d10b      	bne.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80080ae:	4b76      	ldr	r3, [pc, #472]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080b8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080c0:	d101      	bne.n	80080c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80080c2:	4b72      	ldr	r3, [pc, #456]	; (800828c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80080c4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 80d6 	bne.w	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b40      	cmp	r3, #64	; 0x40
 80080d6:	d003      	beq.n	80080e0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080de:	d13b      	bne.n	8008158 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80080e0:	4b69      	ldr	r3, [pc, #420]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ec:	f040 80c4 	bne.w	8008278 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80080f0:	4b65      	ldr	r3, [pc, #404]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80bd 	beq.w	8008278 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80080fe:	4b62      	ldr	r3, [pc, #392]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	3301      	adds	r3, #1
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008112:	4b5d      	ldr	r3, [pc, #372]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	0a1b      	lsrs	r3, r3, #8
 8008118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800811e:	4b5a      	ldr	r3, [pc, #360]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	0edb      	lsrs	r3, r3, #27
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008130:	4b55      	ldr	r3, [pc, #340]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800813c:	2311      	movs	r3, #17
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e001      	b.n	8008146 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8008142:	2307      	movs	r3, #7
 8008144:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	fb03 f202 	mul.w	r2, r3, r2
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	fbb2 f3f3 	udiv	r3, r2, r3
 8008154:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008156:	e08f      	b.n	8008278 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d13a      	bne.n	80081d4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800815e:	4b4a      	ldr	r3, [pc, #296]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800816a:	f040 8086 	bne.w	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800816e:	4b46      	ldr	r3, [pc, #280]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d07f      	beq.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800817a:	4b43      	ldr	r3, [pc, #268]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	091b      	lsrs	r3, r3, #4
 8008180:	f003 030f 	and.w	r3, r3, #15
 8008184:	3301      	adds	r3, #1
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	fbb2 f3f3 	udiv	r3, r2, r3
 800818c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800818e:	4b3e      	ldr	r3, [pc, #248]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008198:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800819a:	4b3b      	ldr	r3, [pc, #236]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	0edb      	lsrs	r3, r3, #27
 80081a0:	f003 031f 	and.w	r3, r3, #31
 80081a4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80081ac:	4b36      	ldr	r3, [pc, #216]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80081b8:	2311      	movs	r3, #17
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e001      	b.n	80081c2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80081be:	2307      	movs	r3, #7
 80081c0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	fb03 f202 	mul.w	r2, r3, r2
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	e052      	b.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d003      	beq.n	80081e2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e0:	d109      	bne.n	80081f6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081e2:	4b29      	ldr	r3, [pc, #164]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ee:	d144      	bne.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80081f0:	4b27      	ldr	r3, [pc, #156]	; (8008290 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80081f2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081f4:	e041      	b.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d003      	beq.n	8008204 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008202:	d13a      	bne.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008204:	4b20      	ldr	r3, [pc, #128]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800820c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008210:	d133      	bne.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008212:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d02d      	beq.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800821e:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	3301      	adds	r3, #1
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008232:	4b15      	ldr	r3, [pc, #84]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	0edb      	lsrs	r3, r3, #27
 8008244:	f003 031f 	and.w	r3, r3, #31
 8008248:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008250:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800825c:	2311      	movs	r3, #17
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	e001      	b.n	8008266 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008262:	2307      	movs	r3, #7
 8008264:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	fb03 f202 	mul.w	r2, r3, r2
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e000      	b.n	800827a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008278:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800827a:	69fb      	ldr	r3, [r7, #28]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3724      	adds	r7, #36	; 0x24
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	40021000 	.word	0x40021000
 800828c:	001fff68 	.word	0x001fff68
 8008290:	00f42400 	.word	0x00f42400

08008294 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d06c      	beq.n	8008380 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7f9 fd7e 	bl	8001dbc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	22ca      	movs	r2, #202	; 0xca
 80082ce:	625a      	str	r2, [r3, #36]	; 0x24
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2253      	movs	r2, #83	; 0x53
 80082d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9a0 	bl	800861e <RTC_EnterInitMode>
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d14b      	bne.n	8008380 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6899      	ldr	r1, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	68d2      	ldr	r2, [r2, #12]
 8008322:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6919      	ldr	r1, [r3, #16]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	041a      	lsls	r2, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f9a3 	bl	8008684 <RTC_ExitInitMode>
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d11b      	bne.n	8008380 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0203 	bic.w	r2, r2, #3
 8008356:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69da      	ldr	r2, [r3, #28]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800838a:	b590      	push	{r4, r7, lr}
 800838c:	b087      	sub	sp, #28
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_RTC_SetTime+0x1a>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e08b      	b.n	80084bc <HAL_RTC_SetTime+0x132>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	22ca      	movs	r2, #202	; 0xca
 80083ba:	625a      	str	r2, [r3, #36]	; 0x24
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2253      	movs	r2, #83	; 0x53
 80083c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f92a 	bl	800861e <RTC_EnterInitMode>
 80083ca:	4603      	mov	r3, r0
 80083cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80083ce:	7cfb      	ldrb	r3, [r7, #19]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d163      	bne.n	800849c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d126      	bne.n	8008428 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f984 	bl	8008700 <RTC_ByteToBcd2>
 80083f8:	4603      	mov	r3, r0
 80083fa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f97d 	bl	8008700 <RTC_ByteToBcd2>
 8008406:	4603      	mov	r3, r0
 8008408:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800840a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f975 	bl	8008700 <RTC_ByteToBcd2>
 8008416:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008418:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	78db      	ldrb	r3, [r3, #3]
 8008420:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	e018      	b.n	800845a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2200      	movs	r2, #0
 800843a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008448:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800844e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	78db      	ldrb	r3, [r3, #3]
 8008454:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008464:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008468:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008478:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6899      	ldr	r1, [r3, #8]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f8f6 	bl	8008684 <RTC_ExitInitMode>
 8008498:	4603      	mov	r3, r0
 800849a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	22ff      	movs	r2, #255	; 0xff
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80084a4:	7cfb      	ldrb	r3, [r7, #19]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80084ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}

080084c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_RTC_SetDate+0x1a>
 80084da:	2302      	movs	r3, #2
 80084dc:	e075      	b.n	80085ca <HAL_RTC_SetDate+0x106>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10e      	bne.n	8008512 <HAL_RTC_SetDate+0x4e>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d008      	beq.n	8008512 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	f023 0310 	bic.w	r3, r3, #16
 8008508:	b2db      	uxtb	r3, r3
 800850a:	330a      	adds	r3, #10
 800850c:	b2da      	uxtb	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11c      	bne.n	8008552 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	78db      	ldrb	r3, [r3, #3]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f8ef 	bl	8008700 <RTC_ByteToBcd2>
 8008522:	4603      	mov	r3, r0
 8008524:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f8e8 	bl	8008700 <RTC_ByteToBcd2>
 8008530:	4603      	mov	r3, r0
 8008532:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008534:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	789b      	ldrb	r3, [r3, #2]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f8e0 	bl	8008700 <RTC_ByteToBcd2>
 8008540:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008542:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e00e      	b.n	8008570 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	78db      	ldrb	r3, [r3, #3]
 8008556:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800855e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008564:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	22ca      	movs	r2, #202	; 0xca
 8008576:	625a      	str	r2, [r3, #36]	; 0x24
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2253      	movs	r2, #83	; 0x53
 800857e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f84c 	bl	800861e <RTC_EnterInitMode>
 8008586:	4603      	mov	r3, r0
 8008588:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800858a:	7cfb      	ldrb	r3, [r7, #19]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10c      	bne.n	80085aa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800859a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800859e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f86f 	bl	8008684 <RTC_ExitInitMode>
 80085a6:	4603      	mov	r3, r0
 80085a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	22ff      	movs	r2, #255	; 0xff
 80085b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80085b2:	7cfb      	ldrb	r3, [r7, #19]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d103      	bne.n	80085c0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80085c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd90      	pop	{r4, r7, pc}

080085d2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80085e8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80085ea:	f7f9 ff3f 	bl	800246c <HAL_GetTick>
 80085ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80085f0:	e009      	b.n	8008606 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085f2:	f7f9 ff3b 	bl	800246c <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008600:	d901      	bls.n	8008606 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e007      	b.n	8008616 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0ee      	beq.n	80085f2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d120      	bne.n	800867a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008642:	f7f9 ff13 	bl	800246c <HAL_GetTick>
 8008646:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008648:	e00d      	b.n	8008666 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800864a:	f7f9 ff0f 	bl	800246c <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008658:	d905      	bls.n	8008666 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2203      	movs	r2, #3
 8008662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <RTC_EnterInitMode+0x5c>
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b03      	cmp	r3, #3
 8008678:	d1e7      	bne.n	800864a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008690:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <RTC_ExitInitMode+0x78>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <RTC_ExitInitMode+0x78>)
 8008696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <RTC_ExitInitMode+0x78>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f003 0320 	and.w	r3, r3, #32
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10c      	bne.n	80086c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff ff92 	bl	80085d2 <HAL_RTC_WaitForSynchro>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01e      	beq.n	80086f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2203      	movs	r2, #3
 80086b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e017      	b.n	80086f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	4a0d      	ldr	r2, [pc, #52]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086c8:	f023 0320 	bic.w	r3, r3, #32
 80086cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff ff7f 	bl	80085d2 <HAL_RTC_WaitForSynchro>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2203      	movs	r2, #3
 80086de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4a04      	ldr	r2, [pc, #16]	; (80086fc <RTC_ExitInitMode+0x78>)
 80086ec:	f043 0320 	orr.w	r3, r3, #32
 80086f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40002800 	.word	0x40002800

08008700 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008712:	e005      	b.n	8008720 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	3b0a      	subs	r3, #10
 800871e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	2b09      	cmp	r3, #9
 8008724:	d8f6      	bhi.n	8008714 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	b2da      	uxtb	r2, r3
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	4313      	orrs	r3, r2
 8008732:	b2db      	uxtb	r3, r3
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	; 0x28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e078      	b.n	8008844 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7f9 fb5b 	bl	8001e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2203      	movs	r2, #3
 800876e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f86a 	bl	800884c <HAL_SD_InitCard>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e060      	b.n	8008844 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fdb5 	bl	80092f8 <HAL_SD_GetCardStatus>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e055      	b.n	8008844 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008798:	7e3b      	ldrb	r3, [r7, #24]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800879e:	7e7b      	ldrb	r3, [r7, #25]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d10a      	bne.n	80087c2 <HAL_SD_Init+0x82>
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <HAL_SD_Init+0x78>
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087be:	65da      	str	r2, [r3, #92]	; 0x5c
 80087c0:	e00b      	b.n	80087da <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d104      	bne.n	80087d4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80087d2:	e002      	b.n	80087da <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fe6b 	bl	80094bc <HAL_SD_ConfigWideBusOperation>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e029      	b.n	8008844 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80087f0:	f7f9 fe3c 	bl	800246c <HAL_GetTick>
 80087f4:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80087f6:	e014      	b.n	8008822 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80087f8:	f7f9 fe38 	bl	800246c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d10c      	bne.n	8008822 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e010      	b.n	8008844 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 ff5e 	bl	80096e4 <HAL_SD_GetCardState>
 8008828:	4603      	mov	r3, r0
 800882a:	2b04      	cmp	r3, #4
 800882c:	d1e4      	bne.n	80087f8 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3728      	adds	r7, #40	; 0x28
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800884c:	b5b0      	push	{r4, r5, r7, lr}
 800884e:	b08e      	sub	sp, #56	; 0x38
 8008850:	af04      	add	r7, sp, #16
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008854:	2300      	movs	r3, #0
 8008856:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008864:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008868:	f7fe fafa 	bl	8006e60 <HAL_RCCEx_GetPeriphCLKFreq>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008882:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e079      	b.n	800897c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	4a3d      	ldr	r2, [pc, #244]	; (8008984 <HAL_SD_InitCard+0x138>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	091b      	lsrs	r3, r3, #4
 8008894:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d107      	bne.n	80088b4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0210 	orr.w	r2, r2, #16
 80088b2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681d      	ldr	r5, [r3, #0]
 80088b8:	466c      	mov	r4, sp
 80088ba:	f107 0314 	add.w	r3, r7, #20
 80088be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088cc:	4628      	mov	r0, r5
 80088ce:	f002 fc93 	bl	800b1f8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f002 fcd6 	bl	800b288 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80088e8:	4a27      	ldr	r2, [pc, #156]	; (8008988 <HAL_SD_InitCard+0x13c>)
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f0:	3301      	adds	r3, #1
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f9 fdc6 	bl	8002484 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 ffd3 	bl	80098a4 <SD_PowerON>
 80088fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e02e      	b.n	800897c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 ff00 	bl	8009724 <SD_InitCard>
 8008924:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e01b      	b.n	800897c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800894c:	4618      	mov	r0, r3
 800894e:	f002 fd31 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8008952:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00f      	beq.n	800897a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a0b      	ldr	r2, [pc, #44]	; (800898c <HAL_SD_InitCard+0x140>)
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3728      	adds	r7, #40	; 0x28
 8008980:	46bd      	mov	sp, r7
 8008982:	bdb0      	pop	{r4, r5, r7, pc}
 8008984:	014f8b59 	.word	0x014f8b59
 8008988:	00012110 	.word	0x00012110
 800898c:	1fe00fff 	.word	0x1fe00fff

08008990 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08c      	sub	sp, #48	; 0x30
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e08d      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	f040 8086 	bne.w	8008ad2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80089cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	441a      	add	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d907      	bls.n	80089ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e074      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2203      	movs	r2, #3
 80089ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	025a      	lsls	r2, r3, #9
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d002      	beq.n	8008a16 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	025b      	lsls	r3, r3, #9
 8008a14:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	025b      	lsls	r3, r3, #9
 8008a20:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008a22:	2390      	movs	r3, #144	; 0x90
 8008a24:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a26:	2302      	movs	r3, #2
 8008a28:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f107 0210 	add.w	r2, r7, #16
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f002 fc8d 	bl	800b35c <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a50:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d90a      	bls.n	8008a7e <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2282      	movs	r2, #130	; 0x82
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a74:	4618      	mov	r0, r3
 8008a76:	f002 fce3 	bl	800b440 <SDMMC_CmdReadMultiBlock>
 8008a7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a7c:	e009      	b.n	8008a92 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2281      	movs	r2, #129	; 0x81
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 fcb5 	bl	800b3fa <SDMMC_CmdReadSingleBlock>
 8008a90:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d012      	beq.n	8008abe <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a0f      	ldr	r2, [pc, #60]	; (8008adc <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e00a      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008acc:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e000      	b.n	8008ad4 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008ad2:	2302      	movs	r3, #2
  }
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3730      	adds	r7, #48	; 0x30
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	1fe00fff 	.word	0x1fe00fff

08008ae0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08c      	sub	sp, #48	; 0x30
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d107      	bne.n	8008b08 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e08d      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	f040 8086 	bne.w	8008c22 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	441a      	add	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d907      	bls.n	8008b3a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e074      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2200      	movs	r2, #0
 8008b48:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	025a      	lsls	r2, r3, #9
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d002      	beq.n	8008b66 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	025b      	lsls	r3, r3, #9
 8008b64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b66:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	025b      	lsls	r3, r3, #9
 8008b70:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b72:	2390      	movs	r3, #144	; 0x90
 8008b74:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f107 0210 	add.w	r2, r7, #16
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f002 fbe5 	bl	800b35c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d90a      	bls.n	8008bce <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	22a0      	movs	r2, #160	; 0xa0
 8008bbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f002 fc81 	bl	800b4cc <SDMMC_CmdWriteMultiBlock>
 8008bca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008bcc:	e009      	b.n	8008be2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2290      	movs	r2, #144	; 0x90
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f002 fc53 	bl	800b486 <SDMMC_CmdWriteSingleBlock>
 8008be0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a0f      	ldr	r2, [pc, #60]	; (8008c2c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e00a      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008c1c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e000      	b.n	8008c24 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008c22:	2302      	movs	r3, #2
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3730      	adds	r7, #48	; 0x30
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	1fe00fff 	.word	0x1fe00fff

08008c30 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_SD_IRQHandler+0x2e>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 f98e 	bl	8009f78 <SD_Read_IT>
 8008c5c:	e199      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 80ae 	beq.w	8008dca <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6812      	ldr	r2, [r2, #0]
 8008c82:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008c86:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008c8a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008caa:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d038      	beq.n	8008d28 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <HAL_SD_IRQHandler+0x9a>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d011      	beq.n	8008cee <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 fc20 	bl	800b514 <SDMMC_CmdStopTransfer>
 8008cd4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f957 	bl	8008f9c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a90      	ldr	r2, [pc, #576]	; (8008f34 <HAL_SD_IRQHandler+0x304>)
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <HAL_SD_IRQHandler+0xe8>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f004 fc23 	bl	800d564 <HAL_SD_RxCpltCallback>
 8008d1e:	e138      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f004 fc15 	bl	800d550 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8008d26:	e134      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 812f 	beq.w	8008f92 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2200      	movs	r2, #0
 8008d42:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <HAL_SD_IRQHandler+0x130>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f003 0320 	and.w	r3, r3, #32
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d011      	beq.n	8008d84 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f002 fbd5 	bl	800b514 <SDMMC_CmdStopTransfer>
 8008d6a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d008      	beq.n	8008d84 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f90c 	bl	8008f9c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f003 0310 	and.w	r3, r3, #16
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <HAL_SD_IRQHandler+0x176>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f004 fbd2 	bl	800d550 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <HAL_SD_IRQHandler+0x192>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80e8 	beq.w	8008f92 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f004 fbce 	bl	800d564 <HAL_SD_RxCpltCallback>
}
 8008dc8:	e0e3      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <HAL_SD_IRQHandler+0x1ba>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 f919 	bl	800a01a <SD_Write_IT>
 8008de8:	e0d3      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 809f 	beq.w	8008f38 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	f043 0202 	orr.w	r2, r3, #2
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	f043 0208 	orr.w	r2, r3, #8
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d005      	beq.n	8008e48 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	f043 0220 	orr.w	r2, r3, #32
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	f043 0210 	orr.w	r2, r3, #16
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a33      	ldr	r2, [pc, #204]	; (8008f34 <HAL_SD_IRQHandler+0x304>)
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e78:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e88:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e98:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ea8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fb30 	bl	800b514 <SDMMC_CmdStopTransfer>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ece:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f003 0308 	and.w	r3, r3, #8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f852 	bl	8008f9c <HAL_SD_ErrorCallback>
}
 8008ef8:	e04b      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d046      	beq.n	8008f92 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d042      	beq.n	8008f92 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008f1a:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2200      	movs	r2, #0
 8008f22:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f835 	bl	8008f9c <HAL_SD_ErrorCallback>
}
 8008f32:	e02e      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
 8008f34:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d025      	beq.n	8008f92 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10c      	bne.n	8008f78 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 f8d4 	bl	800a116 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8008f6e:	e010      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f8bc 	bl	800a0ee <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8008f76:	e00c      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 f8bd 	bl	800a102 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8008f88:	e003      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f8a5 	bl	800a0da <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8008f90:	e7ff      	b.n	8008f92 <HAL_SD_IRQHandler+0x362>
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop

08008f9c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fbe:	0f9b      	lsrs	r3, r3, #30
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fca:	0e9b      	lsrs	r3, r3, #26
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fdc:	0e1b      	lsrs	r3, r3, #24
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fee:	0c1b      	lsrs	r3, r3, #16
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ffa:	0a1b      	lsrs	r3, r3, #8
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009006:	b2da      	uxtb	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009010:	0d1b      	lsrs	r3, r3, #20
 8009012:	b29a      	uxth	r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800901c:	0c1b      	lsrs	r3, r3, #16
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	b2da      	uxtb	r2, r3
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902e:	0bdb      	lsrs	r3, r3, #15
 8009030:	b2db      	uxtb	r3, r3
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	b2da      	uxtb	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009040:	0b9b      	lsrs	r3, r3, #14
 8009042:	b2db      	uxtb	r3, r3
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	b2da      	uxtb	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009052:	0b5b      	lsrs	r3, r3, #13
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009064:	0b1b      	lsrs	r3, r3, #12
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	b2da      	uxtb	r2, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d163      	bne.n	8009148 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009084:	009a      	lsls	r2, r3, #2
 8009086:	f640 73fc 	movw	r3, #4092	; 0xffc
 800908a:	4013      	ands	r3, r2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009090:	0f92      	lsrs	r2, r2, #30
 8009092:	431a      	orrs	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800909c:	0edb      	lsrs	r3, r3, #27
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ae:	0e1b      	lsrs	r3, r3, #24
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c0:	0d5b      	lsrs	r3, r3, #21
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d2:	0c9b      	lsrs	r3, r3, #18
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090e4:	0bdb      	lsrs	r3, r3, #15
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 0307 	and.w	r3, r3, #7
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	7e1b      	ldrb	r3, [r3, #24]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	3302      	adds	r3, #2
 8009108:	2201      	movs	r2, #1
 800910a:	fa02 f303 	lsl.w	r3, r2, r3
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009112:	fb03 f202 	mul.w	r2, r3, r2
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	7a1b      	ldrb	r3, [r3, #8]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 030f 	and.w	r3, r3, #15
 8009124:	2201      	movs	r2, #1
 8009126:	409a      	lsls	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009134:	0a52      	lsrs	r2, r2, #9
 8009136:	fb03 f202 	mul.w	r2, r3, r2
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009144:	659a      	str	r2, [r3, #88]	; 0x58
 8009146:	e031      	b.n	80091ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	2b01      	cmp	r3, #1
 800914e:	d11d      	bne.n	800918c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800915e:	0c1b      	lsrs	r3, r3, #16
 8009160:	431a      	orrs	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	3301      	adds	r3, #1
 800916c:	029a      	lsls	r2, r3, #10
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009180:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	659a      	str	r2, [r3, #88]	; 0x58
 800918a:	e00f      	b.n	80091ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a58      	ldr	r2, [pc, #352]	; (80092f4 <HAL_SD_GetCardCSD+0x344>)
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e09d      	b.n	80092e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091b0:	0b9b      	lsrs	r3, r3, #14
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091c2:	09db      	lsrs	r3, r3, #7
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e4:	0fdb      	lsrs	r3, r3, #31
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f0:	0f5b      	lsrs	r3, r3, #29
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 0303 	and.w	r3, r3, #3
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009202:	0e9b      	lsrs	r3, r3, #26
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	b2da      	uxtb	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009214:	0d9b      	lsrs	r3, r3, #22
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 030f 	and.w	r3, r3, #15
 800921c:	b2da      	uxtb	r2, r3
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009226:	0d5b      	lsrs	r3, r3, #21
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009242:	0c1b      	lsrs	r3, r3, #16
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009256:	0bdb      	lsrs	r3, r3, #15
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	b2da      	uxtb	r2, r3
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926a:	0b9b      	lsrs	r3, r3, #14
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	b2da      	uxtb	r2, r3
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927e:	0b5b      	lsrs	r3, r3, #13
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009292:	0b1b      	lsrs	r3, r3, #12
 8009294:	b2db      	uxtb	r3, r3
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	b2da      	uxtb	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a6:	0a9b      	lsrs	r3, r3, #10
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ba:	0a1b      	lsrs	r3, r3, #8
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ce:	085b      	lsrs	r3, r3, #1
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	1fe00fff 	.word	0x1fe00fff

080092f8 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b094      	sub	sp, #80	; 0x50
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fbd4 	bl	8009abc <SD_SendSDStatus>
 8009314:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009318:	2b00      	cmp	r3, #0
 800931a:	d011      	beq.n	8009340 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a4f      	ldr	r2, [pc, #316]	; (8009460 <HAL_SD_GetCardStatus+0x168>)
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800933e:	e070      	b.n	8009422 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	099b      	lsrs	r3, r3, #6
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	b29b      	uxth	r3, r3
 8009366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800936a:	b29a      	uxth	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	0e1b      	lsrs	r3, r3, #24
 8009370:	b29b      	uxth	r3, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	b29a      	uxth	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	061a      	lsls	r2, r3, #24
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009386:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009390:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	0e1b      	lsrs	r3, r3, #24
 8009396:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	0a1b      	lsrs	r3, r3, #8
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	0d1b      	lsrs	r3, r3, #20
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	0c1b      	lsrs	r3, r3, #16
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	0a9b      	lsrs	r3, r3, #10
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	0a1b      	lsrs	r3, r3, #8
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	091b      	lsrs	r3, r3, #4
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	b2da      	uxtb	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	b2da      	uxtb	r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	0e1b      	lsrs	r3, r3, #24
 800941c:	b2da      	uxtb	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800942a:	4618      	mov	r0, r3
 800942c:	f001 ffc2 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8009430:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00d      	beq.n	8009454 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a08      	ldr	r2, [pc, #32]	; (8009460 <HAL_SD_GetCardStatus+0x168>)
 800943e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009444:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009454:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009458:	4618      	mov	r0, r3
 800945a:	3750      	adds	r7, #80	; 0x50
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	1fe00fff 	.word	0x1fe00fff

08009464 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80094bc:	b5b0      	push	{r4, r5, r7, lr}
 80094be:	b090      	sub	sp, #64	; 0x40
 80094c0:	af04      	add	r7, sp, #16
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2203      	movs	r2, #3
 80094d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d02e      	beq.n	800953a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e2:	d106      	bne.n	80094f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
 80094f0:	e029      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094f8:	d10a      	bne.n	8009510 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fbd6 	bl	8009cac <SD_WideBus_Enable>
 8009500:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
 800950e:	e01a      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fc13 	bl	8009d42 <SD_WideBus_Disable>
 800951c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	639a      	str	r2, [r3, #56]	; 0x38
 800952a:	e00c      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	639a      	str	r2, [r3, #56]	; 0x38
 8009538:	e005      	b.n	8009546 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a60      	ldr	r2, [pc, #384]	; (80096d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800955c:	e097      	b.n	800968e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800955e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009562:	f7fd fc7d 	bl	8006e60 <HAL_RCCEx_GetPeriphCLKFreq>
 8009566:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8086 	beq.w	800967c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695a      	ldr	r2, [r3, #20]
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	4952      	ldr	r1, [pc, #328]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800958e:	fba1 1303 	umull	r1, r3, r1, r3
 8009592:	0e1b      	lsrs	r3, r3, #24
 8009594:	429a      	cmp	r2, r3
 8009596:	d303      	bcc.n	80095a0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	e05a      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a8:	d103      	bne.n	80095b2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e051      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ba:	d126      	bne.n	800960a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10e      	bne.n	80095e2 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	4a45      	ldr	r2, [pc, #276]	; (80096dc <HAL_SD_ConfigWideBusOperation+0x220>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d906      	bls.n	80095da <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	4a42      	ldr	r2, [pc, #264]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80095d0:	fba2 2303 	umull	r2, r3, r2, r3
 80095d4:	0e5b      	lsrs	r3, r3, #25
 80095d6:	61fb      	str	r3, [r7, #28]
 80095d8:	e03d      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	e039      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ee:	4a3b      	ldr	r2, [pc, #236]	; (80096dc <HAL_SD_ConfigWideBusOperation+0x220>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d906      	bls.n	8009602 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	4a38      	ldr	r2, [pc, #224]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80095f8:	fba2 2303 	umull	r2, r3, r2, r3
 80095fc:	0e5b      	lsrs	r3, r3, #25
 80095fe:	61fb      	str	r3, [r7, #28]
 8009600:	e029      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e025      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10e      	bne.n	8009630 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	4a32      	ldr	r2, [pc, #200]	; (80096e0 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d906      	bls.n	8009628 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	4a2e      	ldr	r2, [pc, #184]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800961e:	fba2 2303 	umull	r2, r3, r2, r3
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	61fb      	str	r3, [r7, #28]
 8009626:	e016      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	e012      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009638:	fbb2 f3f3 	udiv	r3, r2, r3
 800963c:	4a28      	ldr	r2, [pc, #160]	; (80096e0 <HAL_SD_ConfigWideBusOperation+0x224>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d906      	bls.n	8009650 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	4a24      	ldr	r2, [pc, #144]	; (80096d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	0e1b      	lsrs	r3, r3, #24
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	e002      	b.n	8009656 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681d      	ldr	r5, [r3, #0]
 8009660:	466c      	mov	r4, sp
 8009662:	f107 0318 	add.w	r3, r7, #24
 8009666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800966a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800966e:	f107 030c 	add.w	r3, r7, #12
 8009672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009674:	4628      	mov	r0, r5
 8009676:	f001 fdbf 	bl	800b1f8 <SDMMC_Init>
 800967a:	e008      	b.n	800968e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009680:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009696:	4618      	mov	r0, r3
 8009698:	f001 fe8c 	bl	800b3b4 <SDMMC_CmdBlockLength>
 800969c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00c      	beq.n	80096be <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a0a      	ldr	r2, [pc, #40]	; (80096d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80096c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3730      	adds	r7, #48	; 0x30
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bdb0      	pop	{r4, r5, r7, pc}
 80096d2:	bf00      	nop
 80096d4:	1fe00fff 	.word	0x1fe00fff
 80096d8:	55e63b89 	.word	0x55e63b89
 80096dc:	02faf080 	.word	0x02faf080
 80096e0:	017d7840 	.word	0x017d7840

080096e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80096f0:	f107 030c 	add.w	r3, r7, #12
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fab0 	bl	8009c5c <SD_SendStatus>
 80096fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	0a5b      	lsrs	r3, r3, #9
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800971a:	693b      	ldr	r3, [r7, #16]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009724:	b5b0      	push	{r4, r5, r7, lr}
 8009726:	b090      	sub	sp, #64	; 0x40
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4618      	mov	r0, r3
 8009736:	f001 fdb9 	bl	800b2ac <SDMMC_GetPowerState>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009740:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009744:	e0a9      	b.n	800989a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974a:	2b03      	cmp	r3, #3
 800974c:	d02e      	beq.n	80097ac <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fffe 	bl	800b754 <SDMMC_CmdSendCID>
 8009758:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800975a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <SD_InitCard+0x40>
    {
      return errorstate;
 8009760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009762:	e09a      	b.n	800989a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2100      	movs	r1, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f001 fde3 	bl	800b336 <SDMMC_GetResponse>
 8009770:	4602      	mov	r2, r0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2104      	movs	r1, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f001 fdda 	bl	800b336 <SDMMC_GetResponse>
 8009782:	4602      	mov	r2, r0
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2108      	movs	r1, #8
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fdd1 	bl	800b336 <SDMMC_GetResponse>
 8009794:	4602      	mov	r2, r0
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	210c      	movs	r1, #12
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fdc8 	bl	800b336 <SDMMC_GetResponse>
 80097a6:	4602      	mov	r2, r0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d00d      	beq.n	80097d0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f107 020e 	add.w	r2, r7, #14
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f002 f807 	bl	800b7d2 <SDMMC_CmdSetRelAdd>
 80097c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <SD_InitCard+0xac>
    {
      return errorstate;
 80097cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ce:	e064      	b.n	800989a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d036      	beq.n	8009846 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80097d8:	89fb      	ldrh	r3, [r7, #14]
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e8:	041b      	lsls	r3, r3, #16
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f001 ffd0 	bl	800b792 <SDMMC_CmdSendCSD>
 80097f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <SD_InitCard+0xda>
    {
      return errorstate;
 80097fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fc:	e04d      	b.n	800989a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2100      	movs	r1, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f001 fd96 	bl	800b336 <SDMMC_GetResponse>
 800980a:	4602      	mov	r2, r0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2104      	movs	r1, #4
 8009816:	4618      	mov	r0, r3
 8009818:	f001 fd8d 	bl	800b336 <SDMMC_GetResponse>
 800981c:	4602      	mov	r2, r0
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2108      	movs	r1, #8
 8009828:	4618      	mov	r0, r3
 800982a:	f001 fd84 	bl	800b336 <SDMMC_GetResponse>
 800982e:	4602      	mov	r2, r0
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	210c      	movs	r1, #12
 800983a:	4618      	mov	r0, r3
 800983c:	f001 fd7b 	bl	800b336 <SDMMC_GetResponse>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2104      	movs	r1, #4
 800984c:	4618      	mov	r0, r3
 800984e:	f001 fd72 	bl	800b336 <SDMMC_GetResponse>
 8009852:	4603      	mov	r3, r0
 8009854:	0d1a      	lsrs	r2, r3, #20
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff fba5 	bl	8008fb0 <HAL_SD_GetCardCSD>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800986c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009870:	e013      	b.n	800989a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800987a:	041b      	lsls	r3, r3, #16
 800987c:	2200      	movs	r2, #0
 800987e:	461c      	mov	r4, r3
 8009880:	4615      	mov	r5, r2
 8009882:	4622      	mov	r2, r4
 8009884:	462b      	mov	r3, r5
 8009886:	4608      	mov	r0, r1
 8009888:	f001 fe7a 	bl	800b580 <SDMMC_CmdSelDesel>
 800988c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800988e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <SD_InitCard+0x174>
  {
    return errorstate;
 8009894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009896:	e000      	b.n	800989a <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3740      	adds	r7, #64	; 0x40
 800989e:	46bd      	mov	sp, r7
 80098a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080098a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80098b8:	f7f8 fdd8 	bl	800246c <HAL_GetTick>
 80098bc:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 fe80 	bl	800b5c8 <SDMMC_CmdGoIdleState>
 80098c8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <SD_PowerON+0x30>
  {
    return errorstate;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	e0ed      	b.n	8009ab0 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fe93 	bl	800b604 <SDMMC_CmdOperCond>
 80098de:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00d      	beq.n	8009902 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fe69 	bl	800b5c8 <SDMMC_CmdGoIdleState>
 80098f6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <SD_PowerON+0x64>
    {
      return errorstate;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	e0d6      	b.n	8009ab0 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990c:	2b01      	cmp	r3, #1
 800990e:	d137      	bne.n	8009980 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2100      	movs	r1, #0
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fe94 	bl	800b644 <SDMMC_CmdAppCommand>
 800991c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02d      	beq.n	8009980 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009928:	e0c2      	b.n	8009ab0 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f001 fe87 	bl	800b644 <SDMMC_CmdAppCommand>
 8009936:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <SD_PowerON+0x9e>
    {
      return errorstate;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	e0b6      	b.n	8009ab0 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	495c      	ldr	r1, [pc, #368]	; (8009ab8 <SD_PowerON+0x214>)
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fe9e 	bl	800b68a <SDMMC_CmdAppOperCommand>
 800994e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800995a:	e0a9      	b.n	8009ab0 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2100      	movs	r1, #0
 8009962:	4618      	mov	r0, r3
 8009964:	f001 fce7 	bl	800b336 <SDMMC_GetResponse>
 8009968:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	0fdb      	lsrs	r3, r3, #31
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <SD_PowerON+0xd2>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <SD_PowerON+0xd4>
 8009976:	2300      	movs	r3, #0
 8009978:	61bb      	str	r3, [r7, #24]

    count++;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3301      	adds	r3, #1
 800997e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009986:	4293      	cmp	r3, r2
 8009988:	d802      	bhi.n	8009990 <SD_PowerON+0xec>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0cc      	beq.n	800992a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009996:	4293      	cmp	r3, r2
 8009998:	d902      	bls.n	80099a0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800999a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800999e:	e087      	b.n	8009ab0 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d07e      	beq.n	8009aa8 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d17a      	bne.n	8009aae <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d075      	beq.n	8009aae <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099c8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0208 	orr.w	r2, r2, #8
 80099d8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 ff5e 	bl	800b8a0 <SDMMC_CmdVoltageSwitch>
 80099e4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00c      	beq.n	8009a06 <SD_PowerON+0x162>
        {
          return errorstate;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	e05f      	b.n	8009ab0 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80099f0:	f7f8 fd3c 	bl	800246c <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d102      	bne.n	8009a06 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a04:	e054      	b.n	8009ab0 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a14:	d1ec      	bne.n	80099f0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a2e:	d002      	beq.n	8009a36 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009a30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a34:	e03c      	b.n	8009ab0 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8009a36:	2001      	movs	r0, #1
 8009a38:	f000 fb44 	bl	800a0c4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0204 	orr.w	r2, r2, #4
 8009a4a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009a4c:	e00a      	b.n	8009a64 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a4e:	f7f8 fd0d 	bl	800246c <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d102      	bne.n	8009a64 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009a5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a62:	e025      	b.n	8009ab0 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a72:	d1ec      	bne.n	8009a4e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a8c:	d102      	bne.n	8009a94 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a92:	e00d      	b.n	8009ab0 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2213      	movs	r2, #19
 8009a9a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8009aa6:	e002      	b.n	8009aae <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3720      	adds	r7, #32
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	c1100000 	.word	0xc1100000

08009abc <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08c      	sub	sp, #48	; 0x30
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ac6:	f7f8 fcd1 	bl	800246c <HAL_GetTick>
 8009aca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 fc2d 	bl	800b336 <SDMMC_GetResponse>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ae6:	d102      	bne.n	8009aee <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009aec:	e0b0      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2140      	movs	r1, #64	; 0x40
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fc5d 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8009afa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d005      	beq.n	8009b0e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	e0a0      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b16:	041b      	lsls	r3, r3, #16
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	f001 fd92 	bl	800b644 <SDMMC_CmdAppCommand>
 8009b20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	e08d      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b34:	f04f 33ff 	mov.w	r3, #4294967295
 8009b38:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009b3e:	2360      	movs	r3, #96	; 0x60
 8009b40:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b42:	2302      	movs	r3, #2
 8009b44:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f107 0208 	add.w	r2, r7, #8
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 fbff 	bl	800b35c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fe7a 	bl	800b85c <SDMMC_CmdStatusRegister>
 8009b68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d02b      	beq.n	8009bc8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	e069      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d013      	beq.n	8009bb2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b8e:	e00d      	b.n	8009bac <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fb59 	bl	800b24c <SDMMC_ReadFIFO>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	601a      	str	r2, [r3, #0]
        pData++;
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	3301      	adds	r3, #1
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	2b07      	cmp	r3, #7
 8009bb0:	d9ee      	bls.n	8009b90 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bb2:	f7f8 fc5b 	bl	800246c <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc0:	d102      	bne.n	8009bc8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009bc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bc6:	e043      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0d2      	beq.n	8009b7c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009be4:	2308      	movs	r3, #8
 8009be6:	e033      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	e02a      	b.n	8009c50 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c00:	f003 0320 	and.w	r3, r3, #32
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d017      	beq.n	8009c38 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009c08:	2320      	movs	r3, #32
 8009c0a:	e021      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 fb1b 	bl	800b24c <SDMMC_ReadFIFO>
 8009c16:	4602      	mov	r2, r0
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	601a      	str	r2, [r3, #0]
    pData++;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	3304      	adds	r3, #4
 8009c20:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c22:	f7f8 fc23 	bl	800246c <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d102      	bne.n	8009c38 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c36:	e00b      	b.n	8009c50 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e2      	bne.n	8009c0c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a03      	ldr	r2, [pc, #12]	; (8009c58 <SD_SendSDStatus+0x19c>)
 8009c4c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3730      	adds	r7, #48	; 0x30
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	18000f3a 	.word	0x18000f3a

08009c5c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c70:	e018      	b.n	8009ca4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f001 fdc9 	bl	800b816 <SDMMC_CmdSendStatus>
 8009c84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	e009      	b.n	8009ca4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fb4d 	bl	800b336 <SDMMC_GetResponse>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 fb37 	bl	800b336 <SDMMC_GetResponse>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd2:	d102      	bne.n	8009cda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cd8:	e02f      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009cda:	f107 030c 	add.w	r3, r7, #12
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f879 	bl	8009dd8 <SD_FindSCR>
 8009ce6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	e023      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01c      	beq.n	8009d36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d04:	041b      	lsls	r3, r3, #16
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f001 fc9b 	bl	800b644 <SDMMC_CmdAppCommand>
 8009d0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	e00f      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2102      	movs	r1, #2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f001 fcd2 	bl	800b6ca <SDMMC_CmdBusWidth>
 8009d26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	e003      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e001      	b.n	8009d3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b086      	sub	sp, #24
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2100      	movs	r1, #0
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 faec 	bl	800b336 <SDMMC_GetResponse>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d68:	d102      	bne.n	8009d70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d6e:	e02f      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d70:	f107 030c 	add.w	r3, r7, #12
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f82e 	bl	8009dd8 <SD_FindSCR>
 8009d7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	e023      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d01c      	beq.n	8009dcc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f001 fc50 	bl	800b644 <SDMMC_CmdAppCommand>
 8009da4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	e00f      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 fc87 	bl	800b6ca <SDMMC_CmdBusWidth>
 8009dbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	e003      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	e001      	b.n	8009dd0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08e      	sub	sp, #56	; 0x38
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009de2:	f7f8 fb43 	bl	800246c <HAL_GetTick>
 8009de6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009dec:	2300      	movs	r3, #0
 8009dee:	60bb      	str	r3, [r7, #8]
 8009df0:	2300      	movs	r3, #0
 8009df2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2108      	movs	r1, #8
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 fad8 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8009e04:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	e0ad      	b.n	8009f6c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f001 fc11 	bl	800b644 <SDMMC_CmdAppCommand>
 8009e22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	e09e      	b.n	8009f6c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009e34:	2308      	movs	r3, #8
 8009e36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009e38:	2330      	movs	r3, #48	; 0x30
 8009e3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f107 0210 	add.w	r2, r7, #16
 8009e50:	4611      	mov	r1, r2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fa82 	bl	800b35c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 fc57 	bl	800b710 <SDMMC_CmdSendSCR>
 8009e62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d027      	beq.n	8009eba <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	e07e      	b.n	8009f6c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d113      	bne.n	8009ea4 <SD_FindSCR+0xcc>
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d110      	bne.n	8009ea4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f001 f9e0 	bl	800b24c <SDMMC_ReadFIFO>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 f9d9 	bl	800b24c <SDMMC_ReadFIFO>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	60fb      	str	r3, [r7, #12]
      index++;
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ea4:	f7f8 fae2 	bl	800246c <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb2:	d102      	bne.n	8009eba <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eb8:	e058      	b.n	8009f6c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec0:	f240 532a 	movw	r3, #1322	; 0x52a
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0d1      	beq.n	8009e6e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed0:	f003 0308 	and.w	r3, r3, #8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d005      	beq.n	8009ee4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2208      	movs	r2, #8
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	e043      	b.n	8009f6c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d005      	beq.n	8009efe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009efa:	2302      	movs	r3, #2
 8009efc:	e036      	b.n	8009f6c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2220      	movs	r2, #32
 8009f12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009f14:	2320      	movs	r3, #32
 8009f16:	e029      	b.n	8009f6c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a15      	ldr	r2, [pc, #84]	; (8009f74 <SD_FindSCR+0x19c>)
 8009f1e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	061a      	lsls	r2, r3, #24
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f2c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f36:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	0e1b      	lsrs	r3, r3, #24
 8009f3c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f40:	601a      	str	r2, [r3, #0]
    scr++;
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	3304      	adds	r3, #4
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	061a      	lsls	r2, r3, #24
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	021b      	lsls	r3, r3, #8
 8009f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f54:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f5e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	0e1b      	lsrs	r3, r3, #24
 8009f64:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f68:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3738      	adds	r7, #56	; 0x38
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	18000f3a 	.word	0x18000f3a

08009f78 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f84:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d03f      	beq.n	800a012 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009f92:	2300      	movs	r3, #0
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e033      	b.n	800a000 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 f955 	bl	800b24c <SDMMC_ReadFIFO>
 8009fa2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	0a1b      	lsrs	r3, r3, #8
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	0c1b      	lsrs	r3, r3, #16
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	0e1b      	lsrs	r3, r3, #24
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b07      	cmp	r3, #7
 800a004:	d9c8      	bls.n	8009f98 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b086      	sub	sp, #24
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d043      	beq.n	800a0bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	e037      	b.n	800a0aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3301      	adds	r3, #1
 800a044:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3b01      	subs	r3, #1
 800a04a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	021a      	lsls	r2, r3, #8
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	4313      	orrs	r3, r2
 800a056:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	3b01      	subs	r3, #1
 800a062:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	041a      	lsls	r2, r3, #16
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3301      	adds	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3b01      	subs	r3, #1
 800a07a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	061a      	lsls	r2, r3, #24
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	4313      	orrs	r3, r2
 800a086:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3b01      	subs	r3, #1
 800a092:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f107 0208 	add.w	r2, r7, #8
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 f8e1 	bl	800b266 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	617b      	str	r3, [r7, #20]
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b07      	cmp	r3, #7
 800a0ae:	d9c4      	bls.n	800a03a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a0bc:	bf00      	nop
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800a0f6:	bf00      	nop
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a10a:	bf00      	nop
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e095      	b.n	800a268 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	d108      	bne.n	800a156 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a14c:	d009      	beq.n	800a162 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	61da      	str	r2, [r3, #28]
 800a154:	e005      	b.n	800a162 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7f7 ff15 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a198:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1a2:	d902      	bls.n	800a1aa <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e002      	b.n	800a1b0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1b8:	d007      	beq.n	800a1ca <HAL_SPI_Init+0xa0>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1c2:	d002      	beq.n	800a1ca <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	f003 0302 	and.w	r3, r3, #2
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a202:	431a      	orrs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20c:	ea42 0103 	orr.w	r1, r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	430a      	orrs	r2, r1
 800a21e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	f003 0204 	and.w	r2, r3, #4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	f003 0310 	and.w	r3, r3, #16
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	431a      	orrs	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a246:	ea42 0103 	orr.w	r1, r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	; 0x28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a27e:	2301      	movs	r3, #1
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_SPI_TransmitReceive+0x26>
 800a292:	2302      	movs	r3, #2
 800a294:	e1fb      	b.n	800a68e <HAL_SPI_TransmitReceive+0x41e>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a29e:	f7f8 f8e5 	bl	800246c <HAL_GetTick>
 800a2a2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2aa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a2b2:	887b      	ldrh	r3, [r7, #2]
 800a2b4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a2b6:	887b      	ldrh	r3, [r7, #2]
 800a2b8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2ba:	7efb      	ldrb	r3, [r7, #27]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d00e      	beq.n	800a2de <HAL_SPI_TransmitReceive+0x6e>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2c6:	d106      	bne.n	800a2d6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <HAL_SPI_TransmitReceive+0x66>
 800a2d0:	7efb      	ldrb	r3, [r7, #27]
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d003      	beq.n	800a2de <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a2dc:	e1cd      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <HAL_SPI_TransmitReceive+0x80>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <HAL_SPI_TransmitReceive+0x80>
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a2f6:	e1c0      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b04      	cmp	r3, #4
 800a302:	d003      	beq.n	800a30c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2205      	movs	r2, #5
 800a308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	887a      	ldrh	r2, [r7, #2]
 800a31c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	887a      	ldrh	r2, [r7, #2]
 800a324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	887a      	ldrh	r2, [r7, #2]
 800a332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	887a      	ldrh	r2, [r7, #2]
 800a338:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a34e:	d802      	bhi.n	800a356 <HAL_SPI_TransmitReceive+0xe6>
 800a350:	8a3b      	ldrh	r3, [r7, #16]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d908      	bls.n	800a368 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	e007      	b.n	800a378 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a376:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a382:	2b40      	cmp	r3, #64	; 0x40
 800a384:	d007      	beq.n	800a396 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a39e:	d97c      	bls.n	800a49a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <HAL_SPI_TransmitReceive+0x13e>
 800a3a8:	8a7b      	ldrh	r3, [r7, #18]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d169      	bne.n	800a482 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b2:	881a      	ldrh	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	1c9a      	adds	r2, r3, #2
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3d2:	e056      	b.n	800a482 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d11b      	bne.n	800a41a <HAL_SPI_TransmitReceive+0x1aa>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d016      	beq.n	800a41a <HAL_SPI_TransmitReceive+0x1aa>
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d113      	bne.n	800a41a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	881a      	ldrh	r2, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	1c9a      	adds	r2, r3, #2
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b01      	cmp	r3, #1
 800a426:	d11c      	bne.n	800a462 <HAL_SPI_TransmitReceive+0x1f2>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d016      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	b292      	uxth	r2, r2
 800a440:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	1c9a      	adds	r2, r3, #2
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a452:	b29b      	uxth	r3, r3
 800a454:	3b01      	subs	r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a45e:	2301      	movs	r3, #1
 800a460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a462:	f7f8 f803 	bl	800246c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46e:	429a      	cmp	r2, r3
 800a470:	d807      	bhi.n	800a482 <HAL_SPI_TransmitReceive+0x212>
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a478:	d003      	beq.n	800a482 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a480:	e0fb      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1a3      	bne.n	800a3d4 <HAL_SPI_TransmitReceive+0x164>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a492:	b29b      	uxth	r3, r3
 800a494:	2b00      	cmp	r3, #0
 800a496:	d19d      	bne.n	800a3d4 <HAL_SPI_TransmitReceive+0x164>
 800a498:	e0df      	b.n	800a65a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_SPI_TransmitReceive+0x23a>
 800a4a2:	8a7b      	ldrh	r3, [r7, #18]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	f040 80cb 	bne.w	800a640 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d912      	bls.n	800a4da <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	881a      	ldrh	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	1c9a      	adds	r2, r3, #2
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	3b02      	subs	r3, #2
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4d8:	e0b2      	b.n	800a640 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	7812      	ldrb	r2, [r2, #0]
 800a4e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a500:	e09e      	b.n	800a640 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d134      	bne.n	800a57a <HAL_SPI_TransmitReceive+0x30a>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d02f      	beq.n	800a57a <HAL_SPI_TransmitReceive+0x30a>
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d12c      	bne.n	800a57a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b01      	cmp	r3, #1
 800a528:	d912      	bls.n	800a550 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52e:	881a      	ldrh	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	1c9a      	adds	r2, r3, #2
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a544:	b29b      	uxth	r3, r3
 800a546:	3b02      	subs	r3, #2
 800a548:	b29a      	uxth	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a54e:	e012      	b.n	800a576 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	330c      	adds	r3, #12
 800a55a:	7812      	ldrb	r2, [r2, #0]
 800a55c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	3b01      	subs	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a576:	2300      	movs	r3, #0
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b01      	cmp	r3, #1
 800a586:	d148      	bne.n	800a61a <HAL_SPI_TransmitReceive+0x3aa>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a58e:	b29b      	uxth	r3, r3
 800a590:	2b00      	cmp	r3, #0
 800a592:	d042      	beq.n	800a61a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d923      	bls.n	800a5e8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	b292      	uxth	r2, r2
 800a5ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	1c9a      	adds	r2, r3, #2
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3b02      	subs	r3, #2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d81f      	bhi.n	800a616 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	e016      	b.n	800a616 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f103 020c 	add.w	r2, r3, #12
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a616:	2301      	movs	r3, #1
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a61a:	f7f7 ff27 	bl	800246c <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a626:	429a      	cmp	r2, r3
 800a628:	d803      	bhi.n	800a632 <HAL_SPI_TransmitReceive+0x3c2>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a630:	d102      	bne.n	800a638 <HAL_SPI_TransmitReceive+0x3c8>
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a63e:	e01c      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	f47f af5b 	bne.w	800a502 <HAL_SPI_TransmitReceive+0x292>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	f47f af54 	bne.w	800a502 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f938 	bl	800a8d4 <SPI_EndRxTxTransaction>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d006      	beq.n	800a678 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2220      	movs	r2, #32
 800a674:	661a      	str	r2, [r3, #96]	; 0x60
 800a676:	e000      	b.n	800a67a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a678:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a68a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3728      	adds	r7, #40	; 0x28
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6a8:	f7f7 fee0 	bl	800246c <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6b8:	f7f7 fed8 	bl	800246c <HAL_GetTick>
 800a6bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6be:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	015b      	lsls	r3, r3, #5
 800a6c4:	0d1b      	lsrs	r3, r3, #20
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
 800a6cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6ce:	e054      	b.n	800a77a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d6:	d050      	beq.n	800a77a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6d8:	f7f7 fec8 	bl	800246c <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d902      	bls.n	800a6ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d13d      	bne.n	800a76a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a706:	d111      	bne.n	800a72c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a710:	d004      	beq.n	800a71c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a71a:	d107      	bne.n	800a72c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a72a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a734:	d10f      	bne.n	800a756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e017      	b.n	800a79a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a770:	2300      	movs	r3, #0
 800a772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	3b01      	subs	r3, #1
 800a778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4013      	ands	r3, r2
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	429a      	cmp	r2, r3
 800a788:	bf0c      	ite	eq
 800a78a:	2301      	moveq	r3, #1
 800a78c:	2300      	movne	r3, #0
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	461a      	mov	r2, r3
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	429a      	cmp	r2, r3
 800a796:	d19b      	bne.n	800a6d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3720      	adds	r7, #32
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000000 	.word	0x20000000

0800a7a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	; 0x28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a7ba:	f7f7 fe57 	bl	800246c <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a7ca:	f7f7 fe4f 	bl	800246c <HAL_GetTick>
 800a7ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a7d8:	4b3d      	ldr	r3, [pc, #244]	; (800a8d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	00da      	lsls	r2, r3, #3
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	0d1b      	lsrs	r3, r3, #20
 800a7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ea:	fb02 f303 	mul.w	r3, r2, r3
 800a7ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a7f0:	e060      	b.n	800a8b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a7f8:	d107      	bne.n	800a80a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a808:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a810:	d050      	beq.n	800a8b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a812:	f7f7 fe2b 	bl	800246c <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81e:	429a      	cmp	r2, r3
 800a820:	d902      	bls.n	800a828 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	2b00      	cmp	r3, #0
 800a826:	d13d      	bne.n	800a8a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a840:	d111      	bne.n	800a866 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a84a:	d004      	beq.n	800a856 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a854:	d107      	bne.n	800a866 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a86e:	d10f      	bne.n	800a890 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a88e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e010      	b.n	800a8c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689a      	ldr	r2, [r3, #8]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	4013      	ands	r3, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d196      	bne.n	800a7f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3728      	adds	r7, #40	; 0x28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000000 	.word	0x20000000

0800a8d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff ff5b 	bl	800a7a8 <SPI_WaitFifoStateUntilTimeout>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d007      	beq.n	800a908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8fc:	f043 0220 	orr.w	r2, r3, #32
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e027      	b.n	800a958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	2180      	movs	r1, #128	; 0x80
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7ff fec0 	bl	800a698 <SPI_WaitFlagStateUntilTimeout>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d007      	beq.n	800a92e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a922:	f043 0220 	orr.w	r2, r3, #32
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e014      	b.n	800a958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2200      	movs	r2, #0
 800a936:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7ff ff34 	bl	800a7a8 <SPI_WaitFifoStateUntilTimeout>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d007      	beq.n	800a956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a94a:	f043 0220 	orr.w	r2, r3, #32
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e000      	b.n	800a958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e049      	b.n	800aa06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f7 fbf8 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4619      	mov	r1, r3
 800a99e:	4610      	mov	r0, r2
 800a9a0:	f000 fa50 	bl	800ae44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d122      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d11b      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f06f 0202 	mvn.w	r2, #2
 800aa3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f9d8 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aa56:	e005      	b.n	800aa64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f9ca 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f9db 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	d122      	bne.n	800aabe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d11b      	bne.n	800aabe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f06f 0204 	mvn.w	r2, #4
 800aa8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f9ae 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aaaa:	e005      	b.n	800aab8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f9a0 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f9b1 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f003 0308 	and.w	r3, r3, #8
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d122      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	f003 0308 	and.w	r3, r3, #8
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d11b      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f06f 0208 	mvn.w	r2, #8
 800aae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2204      	movs	r2, #4
 800aae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f984 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aafe:	e005      	b.n	800ab0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f976 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f987 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2b10      	cmp	r3, #16
 800ab1e:	d122      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f003 0310 	and.w	r3, r3, #16
 800ab2a:	2b10      	cmp	r3, #16
 800ab2c:	d11b      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f06f 0210 	mvn.w	r2, #16
 800ab36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d003      	beq.n	800ab54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f95a 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800ab52:	e005      	b.n	800ab60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f94c 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f95d 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d10e      	bne.n	800ab92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d107      	bne.n	800ab92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f06f 0201 	mvn.w	r2, #1
 800ab8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f926 	bl	800adde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab9c:	2b80      	cmp	r3, #128	; 0x80
 800ab9e:	d10e      	bne.n	800abbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abaa:	2b80      	cmp	r3, #128	; 0x80
 800abac:	d107      	bne.n	800abbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fb09 	bl	800b1d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abcc:	d10e      	bne.n	800abec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd8:	2b80      	cmp	r3, #128	; 0x80
 800abda:	d107      	bne.n	800abec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800abe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fafc 	bl	800b1e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf6:	2b40      	cmp	r3, #64	; 0x40
 800abf8:	d10e      	bne.n	800ac18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b40      	cmp	r3, #64	; 0x40
 800ac06:	d107      	bne.n	800ac18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f90b 	bl	800ae2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f003 0320 	and.w	r3, r3, #32
 800ac22:	2b20      	cmp	r3, #32
 800ac24:	d10e      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f003 0320 	and.w	r3, r3, #32
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	d107      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f06f 0220 	mvn.w	r2, #32
 800ac3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fabc 	bl	800b1bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_TIM_ConfigClockSource+0x1c>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e0b6      	b.n	800add6 <HAL_TIM_ConfigClockSource+0x18a>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca4:	d03e      	beq.n	800ad24 <HAL_TIM_ConfigClockSource+0xd8>
 800aca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acaa:	f200 8087 	bhi.w	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb2:	f000 8086 	beq.w	800adc2 <HAL_TIM_ConfigClockSource+0x176>
 800acb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acba:	d87f      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acbc:	2b70      	cmp	r3, #112	; 0x70
 800acbe:	d01a      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0xaa>
 800acc0:	2b70      	cmp	r3, #112	; 0x70
 800acc2:	d87b      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acc4:	2b60      	cmp	r3, #96	; 0x60
 800acc6:	d050      	beq.n	800ad6a <HAL_TIM_ConfigClockSource+0x11e>
 800acc8:	2b60      	cmp	r3, #96	; 0x60
 800acca:	d877      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800accc:	2b50      	cmp	r3, #80	; 0x50
 800acce:	d03c      	beq.n	800ad4a <HAL_TIM_ConfigClockSource+0xfe>
 800acd0:	2b50      	cmp	r3, #80	; 0x50
 800acd2:	d873      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acd4:	2b40      	cmp	r3, #64	; 0x40
 800acd6:	d058      	beq.n	800ad8a <HAL_TIM_ConfigClockSource+0x13e>
 800acd8:	2b40      	cmp	r3, #64	; 0x40
 800acda:	d86f      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acdc:	2b30      	cmp	r3, #48	; 0x30
 800acde:	d064      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800ace0:	2b30      	cmp	r3, #48	; 0x30
 800ace2:	d86b      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800ace4:	2b20      	cmp	r3, #32
 800ace6:	d060      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800ace8:	2b20      	cmp	r3, #32
 800acea:	d867      	bhi.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
 800acec:	2b00      	cmp	r3, #0
 800acee:	d05c      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d05a      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0x15e>
 800acf4:	e062      	b.n	800adbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6899      	ldr	r1, [r3, #8]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f000 f9b1 	bl	800b06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	609a      	str	r2, [r3, #8]
      break;
 800ad22:	e04f      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	6899      	ldr	r1, [r3, #8]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f000 f99a 	bl	800b06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad46:	609a      	str	r2, [r3, #8]
      break;
 800ad48:	e03c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	6859      	ldr	r1, [r3, #4]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f000 f90e 	bl	800af78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2150      	movs	r1, #80	; 0x50
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 f967 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800ad68:	e02c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	6859      	ldr	r1, [r3, #4]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f000 f92d 	bl	800afd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2160      	movs	r1, #96	; 0x60
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f957 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800ad88:	e01c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	6859      	ldr	r1, [r3, #4]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	461a      	mov	r2, r3
 800ad98:	f000 f8ee 	bl	800af78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2140      	movs	r1, #64	; 0x40
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 f947 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800ada8:	e00c      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4619      	mov	r1, r3
 800adb4:	4610      	mov	r0, r2
 800adb6:	f000 f93e 	bl	800b036 <TIM_ITRx_SetConfig>
      break;
 800adba:	e003      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
      break;
 800adc0:	e000      	b.n	800adc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800adc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800add4:	7bfb      	ldrb	r3, [r7, #15]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae22:	bf00      	nop
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
	...

0800ae44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a40      	ldr	r2, [pc, #256]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d013      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae62:	d00f      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a3d      	ldr	r2, [pc, #244]	; (800af5c <TIM_Base_SetConfig+0x118>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00b      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a3c      	ldr	r2, [pc, #240]	; (800af60 <TIM_Base_SetConfig+0x11c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d007      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a3b      	ldr	r2, [pc, #236]	; (800af64 <TIM_Base_SetConfig+0x120>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d003      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a3a      	ldr	r2, [pc, #232]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d108      	bne.n	800ae96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a2f      	ldr	r2, [pc, #188]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d01f      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea4:	d01b      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2c      	ldr	r2, [pc, #176]	; (800af5c <TIM_Base_SetConfig+0x118>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d017      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a2b      	ldr	r2, [pc, #172]	; (800af60 <TIM_Base_SetConfig+0x11c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d013      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a2a      	ldr	r2, [pc, #168]	; (800af64 <TIM_Base_SetConfig+0x120>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d00f      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a29      	ldr	r2, [pc, #164]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d00b      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a28      	ldr	r2, [pc, #160]	; (800af6c <TIM_Base_SetConfig+0x128>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d007      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a27      	ldr	r2, [pc, #156]	; (800af70 <TIM_Base_SetConfig+0x12c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d003      	beq.n	800aede <TIM_Base_SetConfig+0x9a>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a26      	ldr	r2, [pc, #152]	; (800af74 <TIM_Base_SetConfig+0x130>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d108      	bne.n	800aef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a10      	ldr	r2, [pc, #64]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d00f      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a12      	ldr	r2, [pc, #72]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d00b      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a11      	ldr	r2, [pc, #68]	; (800af6c <TIM_Base_SetConfig+0x128>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d007      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a10      	ldr	r2, [pc, #64]	; (800af70 <TIM_Base_SetConfig+0x12c>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d003      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a0f      	ldr	r2, [pc, #60]	; (800af74 <TIM_Base_SetConfig+0x130>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d103      	bne.n	800af44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	691a      	ldr	r2, [r3, #16]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	615a      	str	r2, [r3, #20]
}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	40012c00 	.word	0x40012c00
 800af5c:	40000400 	.word	0x40000400
 800af60:	40000800 	.word	0x40000800
 800af64:	40000c00 	.word	0x40000c00
 800af68:	40013400 	.word	0x40013400
 800af6c:	40014000 	.word	0x40014000
 800af70:	40014400 	.word	0x40014400
 800af74:	40014800 	.word	0x40014800

0800af78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af78:	b480      	push	{r7}
 800af7a:	b087      	sub	sp, #28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	f023 0201 	bic.w	r2, r3, #1
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	4313      	orrs	r3, r2
 800afac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f023 030a 	bic.w	r3, r3, #10
 800afb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4313      	orrs	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	621a      	str	r2, [r3, #32]
}
 800afca:	bf00      	nop
 800afcc:	371c      	adds	r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b087      	sub	sp, #28
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	f023 0210 	bic.w	r2, r3, #16
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6a1b      	ldr	r3, [r3, #32]
 800aff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	031b      	lsls	r3, r3, #12
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b04c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	f043 0307 	orr.w	r3, r3, #7
 800b058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	609a      	str	r2, [r3, #8]
}
 800b060:	bf00      	nop
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	021a      	lsls	r2, r3, #8
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	431a      	orrs	r2, r3
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4313      	orrs	r3, r2
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	4313      	orrs	r3, r2
 800b098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	609a      	str	r2, [r3, #8]
}
 800b0a0:	bf00      	nop
 800b0a2:	371c      	adds	r7, #28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e068      	b.n	800b196 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a2e      	ldr	r2, [pc, #184]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d004      	beq.n	800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a2d      	ldr	r2, [pc, #180]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d108      	bne.n	800b10a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4313      	orrs	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a1e      	ldr	r2, [pc, #120]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d01d      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b136:	d018      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a1b      	ldr	r2, [pc, #108]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d013      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a1a      	ldr	r2, [pc, #104]	; (800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00e      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a18      	ldr	r2, [pc, #96]	; (800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d009      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a13      	ldr	r2, [pc, #76]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d004      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a14      	ldr	r2, [pc, #80]	; (800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d10c      	bne.n	800b184 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	4313      	orrs	r3, r2
 800b17a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	40013400 	.word	0x40013400
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40000800 	.word	0x40000800
 800b1b4:	40000c00 	.word	0x40000c00
 800b1b8:	40014000 	.word	0x40014000

0800b1bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	f107 001c 	add.w	r0, r7, #28
 800b206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b20e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b210:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b212:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b216:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b21a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b21e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	4313      	orrs	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	4b07      	ldr	r3, [pc, #28]	; (800b248 <SDMMC_Init+0x50>)
 800b22c:	4013      	ands	r3, r2
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	b004      	add	sp, #16
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	ffc02c00 	.word	0xffc02c00

0800b24c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f043 0203 	orr.w	r2, r3, #3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b29c:	2002      	movs	r0, #2
 800b29e:	f7f7 f8f1 	bl	8002484 <HAL_Delay>

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0303 	and.w	r3, r3, #3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b2ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b2f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	4b06      	ldr	r3, [pc, #24]	; (800b318 <SDMMC_SendCommand+0x50>)
 800b300:	4013      	ands	r3, r2
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	fffee0c0 	.word	0xfffee0c0

0800b31c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	b2db      	uxtb	r3, r3
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3314      	adds	r3, #20
 800b344:	461a      	mov	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	4413      	add	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b382:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b388:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b38e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0

}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b3c2:	2310      	movs	r3, #16
 800b3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff ff73 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b3e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e6:	2110      	movs	r1, #16
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fa7b 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b3ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f0:	69fb      	ldr	r3, [r7, #28]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b088      	sub	sp, #32
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b408:	2311      	movs	r3, #17
 800b40a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b40c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b412:	2300      	movs	r3, #0
 800b414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b41a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b41c:	f107 0308 	add.w	r3, r7, #8
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff ff50 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b428:	f241 3288 	movw	r2, #5000	; 0x1388
 800b42c:	2111      	movs	r1, #17
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fa58 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b436:	69fb      	ldr	r3, [r7, #28]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b44e:	2312      	movs	r3, #18
 800b450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b452:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b458:	2300      	movs	r3, #0
 800b45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b45c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ff2d 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b46e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b472:	2112      	movs	r1, #18
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa35 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b47a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47c:	69fb      	ldr	r3, [r7, #28]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3720      	adds	r7, #32
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b088      	sub	sp, #32
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b494:	2318      	movs	r3, #24
 800b496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a8:	f107 0308 	add.w	r3, r7, #8
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7ff ff0a 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b8:	2118      	movs	r1, #24
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fa12 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c2:	69fb      	ldr	r3, [r7, #28]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3720      	adds	r7, #32
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b4da:	2319      	movs	r3, #25
 800b4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff fee7 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4fe:	2119      	movs	r1, #25
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f9ef 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b508:	69fb      	ldr	r3, [r7, #28]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3720      	adds	r7, #32
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
	...

0800b514 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b520:	230c      	movs	r3, #12
 800b522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b524:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b52e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b532:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b54c:	f107 0308 	add.w	r3, r7, #8
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff feb8 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b558:	4a08      	ldr	r2, [pc, #32]	; (800b57c <SDMMC_CmdStopTransfer+0x68>)
 800b55a:	210c      	movs	r1, #12
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f9c1 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b562:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b570:	69fb      	ldr	r3, [r7, #28]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3720      	adds	r7, #32
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	05f5e100 	.word	0x05f5e100

0800b580 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08a      	sub	sp, #40	; 0x28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b590:	2307      	movs	r3, #7
 800b592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b594:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b598:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b59a:	2300      	movs	r3, #0
 800b59c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b59e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5a4:	f107 0310 	add.w	r3, r7, #16
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f7ff fe8c 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b4:	2107      	movs	r1, #7
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 f994 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b5bc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3728      	adds	r7, #40	; 0x28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b088      	sub	sp, #32
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5e6:	f107 0308 	add.w	r3, r7, #8
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff fe6b 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fbb8 	bl	800bd68 <SDMMC_GetCmdError>
 800b5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3720      	adds	r7, #32
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b60c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b612:	2308      	movs	r3, #8
 800b614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff fe4b 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fb4a 	bl	800bccc <SDMMC_GetCmdResp7>
 800b638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b63a:	69fb      	ldr	r3, [r7, #28]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b652:	2337      	movs	r3, #55	; 0x37
 800b654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b65a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b666:	f107 0308 	add.w	r3, r7, #8
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff fe2b 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b672:	f241 3288 	movw	r2, #5000	; 0x1388
 800b676:	2137      	movs	r1, #55	; 0x37
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f933 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b67e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b680:	69fb      	ldr	r3, [r7, #28]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3720      	adds	r7, #32
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b088      	sub	sp, #32
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b698:	2329      	movs	r3, #41	; 0x29
 800b69a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b69c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ac:	f107 0308 	add.w	r3, r7, #8
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff fe08 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fa4f 	bl	800bb5c <SDMMC_GetCmdResp3>
 800b6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3720      	adds	r7, #32
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b088      	sub	sp, #32
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6d8:	2306      	movs	r3, #6
 800b6da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ec:	f107 0308 	add.w	r3, r7, #8
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7ff fde8 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6fc:	2106      	movs	r1, #6
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f8f0 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b706:	69fb      	ldr	r3, [r7, #28]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b71c:	2333      	movs	r3, #51	; 0x33
 800b71e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b720:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b72a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b72e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff fdc6 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b740:	2133      	movs	r1, #51	; 0x33
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f8ce 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b74a:	69fb      	ldr	r3, [r7, #28]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3720      	adds	r7, #32
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b760:	2302      	movs	r3, #2
 800b762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b764:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b76a:	2300      	movs	r3, #0
 800b76c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b76e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b774:	f107 0308 	add.w	r3, r7, #8
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff fda4 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f9a1 	bl	800bac8 <SDMMC_GetCmdResp2>
 800b786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b788:	69fb      	ldr	r3, [r7, #28]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3720      	adds	r7, #32
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b088      	sub	sp, #32
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b7a0:	2309      	movs	r3, #9
 800b7a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b7a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7b4:	f107 0308 	add.w	r3, r7, #8
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fd84 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f981 	bl	800bac8 <SDMMC_GetCmdResp2>
 800b7c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b088      	sub	sp, #32
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f4:	f107 0308 	add.w	r3, r7, #8
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fd64 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	2103      	movs	r1, #3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f9e9 	bl	800bbdc <SDMMC_GetCmdResp6>
 800b80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b80c:	69fb      	ldr	r3, [r7, #28]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3720      	adds	r7, #32
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b088      	sub	sp, #32
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b824:	230d      	movs	r3, #13
 800b826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b838:	f107 0308 	add.w	r3, r7, #8
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff fd42 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b844:	f241 3288 	movw	r2, #5000	; 0x1388
 800b848:	210d      	movs	r1, #13
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f84a 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b852:	69fb      	ldr	r3, [r7, #28]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3720      	adds	r7, #32
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b868:	230d      	movs	r3, #13
 800b86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b86c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b87a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b87c:	f107 0308 	add.w	r3, r7, #8
 800b880:	4619      	mov	r1, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7ff fd20 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b888:	f241 3288 	movw	r2, #5000	; 0x1388
 800b88c:	210d      	movs	r1, #13
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f828 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b896:	69fb      	ldr	r3, [r7, #28]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3720      	adds	r7, #32
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b8ac:	230b      	movs	r3, #11
 800b8ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8c0:	f107 0308 	add.w	r3, r7, #8
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff fcfe 	bl	800b2c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d0:	210b      	movs	r1, #11
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f806 	bl	800b8e4 <SDMMC_GetCmdResp1>
 800b8d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8da:	69fb      	ldr	r3, [r7, #28]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3720      	adds	r7, #32
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b8f2:	4b70      	ldr	r3, [pc, #448]	; (800bab4 <SDMMC_GetCmdResp1+0x1d0>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a70      	ldr	r2, [pc, #448]	; (800bab8 <SDMMC_GetCmdResp1+0x1d4>)
 800b8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fc:	0a5a      	lsrs	r2, r3, #9
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	fb02 f303 	mul.w	r3, r2, r3
 800b904:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	61fa      	str	r2, [r7, #28]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b914:	e0c9      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	4b67      	ldr	r3, [pc, #412]	; (800babc <SDMMC_GetCmdResp1+0x1d8>)
 800b920:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0ef      	beq.n	800b906 <SDMMC_GetCmdResp1+0x22>
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1ea      	bne.n	800b906 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d004      	beq.n	800b946 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2204      	movs	r2, #4
 800b940:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b942:	2304      	movs	r3, #4
 800b944:	e0b1      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d004      	beq.n	800b95c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b958:	2301      	movs	r3, #1
 800b95a:	e0a6      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4a58      	ldr	r2, [pc, #352]	; (800bac0 <SDMMC_GetCmdResp1+0x1dc>)
 800b960:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff fcda 	bl	800b31c <SDMMC_GetCommandResponse>
 800b968:	4603      	mov	r3, r0
 800b96a:	461a      	mov	r2, r3
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	4293      	cmp	r3, r2
 800b970:	d001      	beq.n	800b976 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b972:	2301      	movs	r3, #1
 800b974:	e099      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b976:	2100      	movs	r1, #0
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff fcdc 	bl	800b336 <SDMMC_GetResponse>
 800b97e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	4b50      	ldr	r3, [pc, #320]	; (800bac4 <SDMMC_GetCmdResp1+0x1e0>)
 800b984:	4013      	ands	r3, r2
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e08d      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2b00      	cmp	r3, #0
 800b992:	da02      	bge.n	800b99a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b998:	e087      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9a4:	2340      	movs	r3, #64	; 0x40
 800b9a6:	e080      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9b2:	2380      	movs	r3, #128	; 0x80
 800b9b4:	e079      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b9c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9c4:	e071      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b9d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9d4:	e069      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b9e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e4:	e061      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b9f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9f4:	e059      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba04:	e051      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba14:	e049      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba24:	e041      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba34:	e039      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ba44:	e031      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba54:	e029      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d002      	beq.n	800ba66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba64:	e021      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ba74:	e019      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba84:	e011      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba94:	e009      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f003 0308 	and.w	r3, r3, #8
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800baa0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800baa4:	e001      	b.n	800baaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800baa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3720      	adds	r7, #32
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20000000 	.word	0x20000000
 800bab8:	10624dd3 	.word	0x10624dd3
 800babc:	00200045 	.word	0x00200045
 800bac0:	002000c5 	.word	0x002000c5
 800bac4:	fdffe008 	.word	0xfdffe008

0800bac8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bad0:	4b1f      	ldr	r3, [pc, #124]	; (800bb50 <SDMMC_GetCmdResp2+0x88>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a1f      	ldr	r2, [pc, #124]	; (800bb54 <SDMMC_GetCmdResp2+0x8c>)
 800bad6:	fba2 2303 	umull	r2, r3, r2, r3
 800bada:	0a5b      	lsrs	r3, r3, #9
 800badc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae0:	fb02 f303 	mul.w	r3, r2, r3
 800bae4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	1e5a      	subs	r2, r3, #1
 800baea:	60fa      	str	r2, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d102      	bne.n	800baf6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baf4:	e026      	b.n	800bb44 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0ef      	beq.n	800bae6 <SDMMC_GetCmdResp2+0x1e>
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1ea      	bne.n	800bae6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2204      	movs	r2, #4
 800bb20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb22:	2304      	movs	r3, #4
 800bb24:	e00e      	b.n	800bb44 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d004      	beq.n	800bb3c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e003      	b.n	800bb44 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <SDMMC_GetCmdResp2+0x90>)
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	20000000 	.word	0x20000000
 800bb54:	10624dd3 	.word	0x10624dd3
 800bb58:	002000c5 	.word	0x002000c5

0800bb5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb64:	4b1a      	ldr	r3, [pc, #104]	; (800bbd0 <SDMMC_GetCmdResp3+0x74>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a1a      	ldr	r2, [pc, #104]	; (800bbd4 <SDMMC_GetCmdResp3+0x78>)
 800bb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6e:	0a5b      	lsrs	r3, r3, #9
 800bb70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb74:	fb02 f303 	mul.w	r3, r2, r3
 800bb78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	1e5a      	subs	r2, r3, #1
 800bb7e:	60fa      	str	r2, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb88:	e01b      	b.n	800bbc2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d0ef      	beq.n	800bb7a <SDMMC_GetCmdResp3+0x1e>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1ea      	bne.n	800bb7a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d004      	beq.n	800bbba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2204      	movs	r2, #4
 800bbb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbb6:	2304      	movs	r3, #4
 800bbb8:	e003      	b.n	800bbc2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a06      	ldr	r2, [pc, #24]	; (800bbd8 <SDMMC_GetCmdResp3+0x7c>)
 800bbbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	20000000 	.word	0x20000000
 800bbd4:	10624dd3 	.word	0x10624dd3
 800bbd8:	002000c5 	.word	0x002000c5

0800bbdc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbea:	4b35      	ldr	r3, [pc, #212]	; (800bcc0 <SDMMC_GetCmdResp6+0xe4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a35      	ldr	r2, [pc, #212]	; (800bcc4 <SDMMC_GetCmdResp6+0xe8>)
 800bbf0:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf4:	0a5b      	lsrs	r3, r3, #9
 800bbf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfa:	fb02 f303 	mul.w	r3, r2, r3
 800bbfe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	1e5a      	subs	r2, r3, #1
 800bc04:	61fa      	str	r2, [r7, #28]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc0e:	e052      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc14:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0ef      	beq.n	800bc00 <SDMMC_GetCmdResp6+0x24>
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1ea      	bne.n	800bc00 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc3c:	2304      	movs	r3, #4
 800bc3e:	e03a      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e02f      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f7ff fb60 	bl	800b31c <SDMMC_GetCommandResponse>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	7afb      	ldrb	r3, [r7, #11]
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d001      	beq.n	800bc6a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e025      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4a16      	ldr	r2, [pc, #88]	; (800bcc8 <SDMMC_GetCmdResp6+0xec>)
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc70:	2100      	movs	r1, #0
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fb5f 	bl	800b336 <SDMMC_GetResponse>
 800bc78:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d106      	bne.n	800bc92 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	0c1b      	lsrs	r3, r3, #16
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e011      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bca0:	e009      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bcac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcb0:	e001      	b.n	800bcb6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000000 	.word	0x20000000
 800bcc4:	10624dd3 	.word	0x10624dd3
 800bcc8:	002000c5 	.word	0x002000c5

0800bccc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcd4:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <SDMMC_GetCmdResp7+0x94>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a22      	ldr	r2, [pc, #136]	; (800bd64 <SDMMC_GetCmdResp7+0x98>)
 800bcda:	fba2 2303 	umull	r2, r3, r2, r3
 800bcde:	0a5b      	lsrs	r3, r3, #9
 800bce0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce4:	fb02 f303 	mul.w	r3, r2, r3
 800bce8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	1e5a      	subs	r2, r3, #1
 800bcee:	60fa      	str	r2, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d102      	bne.n	800bcfa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcf8:	e02c      	b.n	800bd54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d0ef      	beq.n	800bcea <SDMMC_GetCmdResp7+0x1e>
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1ea      	bne.n	800bcea <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2204      	movs	r2, #4
 800bd24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd26:	2304      	movs	r3, #4
 800bd28:	e014      	b.n	800bd54 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e009      	b.n	800bd54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2240      	movs	r2, #64	; 0x40
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd52:	2300      	movs	r3, #0

}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	20000000 	.word	0x20000000
 800bd64:	10624dd3 	.word	0x10624dd3

0800bd68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd70:	4b11      	ldr	r3, [pc, #68]	; (800bdb8 <SDMMC_GetCmdError+0x50>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a11      	ldr	r2, [pc, #68]	; (800bdbc <SDMMC_GetCmdError+0x54>)
 800bd76:	fba2 2303 	umull	r2, r3, r2, r3
 800bd7a:	0a5b      	lsrs	r3, r3, #9
 800bd7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd80:	fb02 f303 	mul.w	r3, r2, r3
 800bd84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	1e5a      	subs	r2, r3, #1
 800bd8a:	60fa      	str	r2, [r7, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd94:	e009      	b.n	800bdaa <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0f1      	beq.n	800bd86 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a06      	ldr	r2, [pc, #24]	; (800bdc0 <SDMMC_GetCmdError+0x58>)
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	20000000 	.word	0x20000000
 800bdbc:	10624dd3 	.word	0x10624dd3
 800bdc0:	002000c5 	.word	0x002000c5

0800bdc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	f107 001c 	add.w	r0, r7, #28
 800bdd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 faf6 	bl	800d3d4 <USB_CoreReset>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800bdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d106      	bne.n	800be00 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	639a      	str	r2, [r3, #56]	; 0x38
 800bdfe:	e005      	b.n	800be0c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be18:	b004      	add	sp, #16
 800be1a:	4770      	bx	lr

0800be1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	4613      	mov	r3, r2
 800be28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d165      	bne.n	800befc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4a3e      	ldr	r2, [pc, #248]	; (800bf2c <USB_SetTurnaroundTime+0x110>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d906      	bls.n	800be46 <USB_SetTurnaroundTime+0x2a>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4a3d      	ldr	r2, [pc, #244]	; (800bf30 <USB_SetTurnaroundTime+0x114>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d202      	bcs.n	800be46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be40:	230f      	movs	r3, #15
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e05c      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4a39      	ldr	r2, [pc, #228]	; (800bf30 <USB_SetTurnaroundTime+0x114>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d306      	bcc.n	800be5c <USB_SetTurnaroundTime+0x40>
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4a38      	ldr	r2, [pc, #224]	; (800bf34 <USB_SetTurnaroundTime+0x118>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d202      	bcs.n	800be5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be56:	230e      	movs	r3, #14
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	e051      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4a35      	ldr	r2, [pc, #212]	; (800bf34 <USB_SetTurnaroundTime+0x118>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d306      	bcc.n	800be72 <USB_SetTurnaroundTime+0x56>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4a34      	ldr	r2, [pc, #208]	; (800bf38 <USB_SetTurnaroundTime+0x11c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d202      	bcs.n	800be72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be6c:	230d      	movs	r3, #13
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e046      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	4a30      	ldr	r2, [pc, #192]	; (800bf38 <USB_SetTurnaroundTime+0x11c>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d306      	bcc.n	800be88 <USB_SetTurnaroundTime+0x6c>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4a2f      	ldr	r2, [pc, #188]	; (800bf3c <USB_SetTurnaroundTime+0x120>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d802      	bhi.n	800be88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be82:	230c      	movs	r3, #12
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	e03b      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4a2c      	ldr	r2, [pc, #176]	; (800bf3c <USB_SetTurnaroundTime+0x120>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d906      	bls.n	800be9e <USB_SetTurnaroundTime+0x82>
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4a2b      	ldr	r2, [pc, #172]	; (800bf40 <USB_SetTurnaroundTime+0x124>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d802      	bhi.n	800be9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be98:	230b      	movs	r3, #11
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e030      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	4a27      	ldr	r2, [pc, #156]	; (800bf40 <USB_SetTurnaroundTime+0x124>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d906      	bls.n	800beb4 <USB_SetTurnaroundTime+0x98>
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4a26      	ldr	r2, [pc, #152]	; (800bf44 <USB_SetTurnaroundTime+0x128>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d802      	bhi.n	800beb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800beae:	230a      	movs	r3, #10
 800beb0:	617b      	str	r3, [r7, #20]
 800beb2:	e025      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	4a23      	ldr	r2, [pc, #140]	; (800bf44 <USB_SetTurnaroundTime+0x128>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d906      	bls.n	800beca <USB_SetTurnaroundTime+0xae>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4a22      	ldr	r2, [pc, #136]	; (800bf48 <USB_SetTurnaroundTime+0x12c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d202      	bcs.n	800beca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bec4:	2309      	movs	r3, #9
 800bec6:	617b      	str	r3, [r7, #20]
 800bec8:	e01a      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	4a1e      	ldr	r2, [pc, #120]	; (800bf48 <USB_SetTurnaroundTime+0x12c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d306      	bcc.n	800bee0 <USB_SetTurnaroundTime+0xc4>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	4a1d      	ldr	r2, [pc, #116]	; (800bf4c <USB_SetTurnaroundTime+0x130>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d802      	bhi.n	800bee0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800beda:	2308      	movs	r3, #8
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	e00f      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	4a1a      	ldr	r2, [pc, #104]	; (800bf4c <USB_SetTurnaroundTime+0x130>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d906      	bls.n	800bef6 <USB_SetTurnaroundTime+0xda>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	4a19      	ldr	r2, [pc, #100]	; (800bf50 <USB_SetTurnaroundTime+0x134>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d202      	bcs.n	800bef6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bef0:	2307      	movs	r3, #7
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	e004      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bef6:	2306      	movs	r3, #6
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	e001      	b.n	800bf00 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800befc:	2309      	movs	r3, #9
 800befe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	68da      	ldr	r2, [r3, #12]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	029b      	lsls	r3, r3, #10
 800bf14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	371c      	adds	r7, #28
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	00d8acbf 	.word	0x00d8acbf
 800bf30:	00e4e1c0 	.word	0x00e4e1c0
 800bf34:	00f42400 	.word	0x00f42400
 800bf38:	01067380 	.word	0x01067380
 800bf3c:	011a499f 	.word	0x011a499f
 800bf40:	01312cff 	.word	0x01312cff
 800bf44:	014ca43f 	.word	0x014ca43f
 800bf48:	016e3600 	.word	0x016e3600
 800bf4c:	01a6ab1f 	.word	0x01a6ab1f
 800bf50:	01e84800 	.word	0x01e84800

0800bf54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f043 0201 	orr.w	r2, r3, #1
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f023 0201 	bic.w	r2, r3, #1
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d115      	bne.n	800bfe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	f7f6 fa5c 	bl	8002484 <HAL_Delay>
      ms++;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 f985 	bl	800d2e2 <USB_GetMode>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d01e      	beq.n	800c01c <USB_SetCurrentMode+0x84>
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2b31      	cmp	r3, #49	; 0x31
 800bfe2:	d9f0      	bls.n	800bfc6 <USB_SetCurrentMode+0x2e>
 800bfe4:	e01a      	b.n	800c01c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bfe6:	78fb      	ldrb	r3, [r7, #3]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d115      	bne.n	800c018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bff8:	2001      	movs	r0, #1
 800bffa:	f7f6 fa43 	bl	8002484 <HAL_Delay>
      ms++;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3301      	adds	r3, #1
 800c002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 f96c 	bl	800d2e2 <USB_GetMode>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <USB_SetCurrentMode+0x84>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b31      	cmp	r3, #49	; 0x31
 800c014:	d9f0      	bls.n	800bff8 <USB_SetCurrentMode+0x60>
 800c016:	e001      	b.n	800c01c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e005      	b.n	800c028 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b32      	cmp	r3, #50	; 0x32
 800c020:	d101      	bne.n	800c026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c030:	b084      	sub	sp, #16
 800c032:	b580      	push	{r7, lr}
 800c034:	b086      	sub	sp, #24
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	e009      	b.n	800c064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	3340      	adds	r3, #64	; 0x40
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	2200      	movs	r2, #0
 800c05c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	3301      	adds	r3, #1
 800c062:	613b      	str	r3, [r7, #16]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	2b0e      	cmp	r3, #14
 800c068:	d9f2      	bls.n	800c050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d11c      	bne.n	800c0aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c07e:	f043 0302 	orr.w	r3, r3, #2
 800c082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	e005      	b.n	800c0b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0bc:	461a      	mov	r2, r3
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	680b      	ldr	r3, [r1, #0]
 800c0d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0d6:	2103      	movs	r1, #3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f959 	bl	800c390 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0de:	2110      	movs	r1, #16
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f8f1 	bl	800c2c8 <USB_FlushTxFifo>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f91d 	bl	800c330 <USB_FlushRxFifo>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c106:	461a      	mov	r2, r3
 800c108:	2300      	movs	r3, #0
 800c10a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c112:	461a      	mov	r2, r3
 800c114:	2300      	movs	r3, #0
 800c116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11e:	461a      	mov	r2, r3
 800c120:	2300      	movs	r3, #0
 800c122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c124:	2300      	movs	r3, #0
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	e043      	b.n	800c1b2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	015a      	lsls	r2, r3, #5
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	4413      	add	r3, r2
 800c132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c13c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c140:	d118      	bne.n	800c174 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	461a      	mov	r2, r3
 800c156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	e013      	b.n	800c186 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16a:	461a      	mov	r2, r3
 800c16c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c170:	6013      	str	r3, [r2, #0]
 800c172:	e008      	b.n	800c186 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c180:	461a      	mov	r2, r3
 800c182:	2300      	movs	r3, #0
 800c184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c192:	461a      	mov	r2, r3
 800c194:	2300      	movs	r3, #0
 800c196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	613b      	str	r3, [r7, #16]
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d3b7      	bcc.n	800c12a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	613b      	str	r3, [r7, #16]
 800c1be:	e043      	b.n	800c248 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1d6:	d118      	bne.n	800c20a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	e013      	b.n	800c21c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	015a      	lsls	r2, r3, #5
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c200:	461a      	mov	r2, r3
 800c202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	e008      	b.n	800c21c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	015a      	lsls	r2, r3, #5
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	4413      	add	r3, r2
 800c212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c216:	461a      	mov	r2, r3
 800c218:	2300      	movs	r3, #0
 800c21a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c228:	461a      	mov	r2, r3
 800c22a:	2300      	movs	r3, #0
 800c22c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c23a:	461a      	mov	r2, r3
 800c23c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3301      	adds	r3, #1
 800c246:	613b      	str	r3, [r7, #16]
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d3b7      	bcc.n	800c1c0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c25e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	f043 0210 	orr.w	r2, r3, #16
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	4b10      	ldr	r3, [pc, #64]	; (800c2c4 <USB_DevInit+0x294>)
 800c284:	4313      	orrs	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d005      	beq.n	800c29c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	f043 0208 	orr.w	r2, r3, #8
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d107      	bne.n	800c2b2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2aa:	f043 0304 	orr.w	r3, r3, #4
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2be:	b004      	add	sp, #16
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	803c3800 	.word	0x803c3800

0800c2c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4a13      	ldr	r2, [pc, #76]	; (800c32c <USB_FlushTxFifo+0x64>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d901      	bls.n	800c2e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e01b      	b.n	800c320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	daf2      	bge.n	800c2d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	019b      	lsls	r3, r3, #6
 800c2f8:	f043 0220 	orr.w	r2, r3, #32
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4a08      	ldr	r2, [pc, #32]	; (800c32c <USB_FlushTxFifo+0x64>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d901      	bls.n	800c312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e006      	b.n	800c320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b20      	cmp	r3, #32
 800c31c:	d0f0      	beq.n	800c300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	00030d40 	.word	0x00030d40

0800c330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3301      	adds	r3, #1
 800c340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4a11      	ldr	r2, [pc, #68]	; (800c38c <USB_FlushRxFifo+0x5c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d901      	bls.n	800c34e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e018      	b.n	800c380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	daf2      	bge.n	800c33c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2210      	movs	r2, #16
 800c35e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4a08      	ldr	r2, [pc, #32]	; (800c38c <USB_FlushRxFifo+0x5c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d901      	bls.n	800c372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e006      	b.n	800c380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	f003 0310 	and.w	r3, r3, #16
 800c37a:	2b10      	cmp	r3, #16
 800c37c:	d0f0      	beq.n	800c360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	00030d40 	.word	0x00030d40

0800c390 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	78fb      	ldrb	r3, [r7, #3]
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c3c2:	b480      	push	{r7}
 800c3c4:	b087      	sub	sp, #28
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f003 0306 	and.w	r3, r3, #6
 800c3da:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d002      	beq.n	800c3e8 <USB_GetDevSpeed+0x26>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b06      	cmp	r3, #6
 800c3e6:	d102      	bne.n	800c3ee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	75fb      	strb	r3, [r7, #23]
 800c3ec:	e001      	b.n	800c3f2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c3ee:	230f      	movs	r3, #15
 800c3f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	371c      	adds	r7, #28
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	785b      	ldrb	r3, [r3, #1]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d13a      	bne.n	800c492 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c422:	69da      	ldr	r2, [r3, #28]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	f003 030f 	and.w	r3, r3, #15
 800c42c:	2101      	movs	r1, #1
 800c42e:	fa01 f303 	lsl.w	r3, r1, r3
 800c432:	b29b      	uxth	r3, r3
 800c434:	68f9      	ldr	r1, [r7, #12]
 800c436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c43a:	4313      	orrs	r3, r2
 800c43c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	015a      	lsls	r2, r3, #5
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c450:	2b00      	cmp	r3, #0
 800c452:	d155      	bne.n	800c500 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c470:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	059b      	lsls	r3, r3, #22
 800c476:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c478:	4313      	orrs	r3, r2
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	0151      	lsls	r1, r2, #5
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	440a      	add	r2, r1
 800c482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c48a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	e036      	b.n	800c500 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c498:	69da      	ldr	r2, [r3, #28]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4a8:	041b      	lsls	r3, r3, #16
 800c4aa:	68f9      	ldr	r1, [r7, #12]
 800c4ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d11a      	bne.n	800c500 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	015a      	lsls	r2, r3, #5
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	791b      	ldrb	r3, [r3, #4]
 800c4e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4e6:	430b      	orrs	r3, r1
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	0151      	lsls	r1, r2, #5
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	440a      	add	r2, r1
 800c4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
	...

0800c510 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	785b      	ldrb	r3, [r3, #1]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d161      	bne.n	800c5f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c53e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c542:	d11f      	bne.n	800c584 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	015a      	lsls	r2, r3, #5
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	0151      	lsls	r1, r2, #5
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	440a      	add	r2, r1
 800c55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c55e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c562:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	0151      	lsls	r1, r2, #5
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	440a      	add	r2, r1
 800c57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c57e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c582:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	f003 030f 	and.w	r3, r3, #15
 800c594:	2101      	movs	r1, #1
 800c596:	fa01 f303 	lsl.w	r3, r1, r3
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	43db      	mvns	r3, r3
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ae:	69da      	ldr	r2, [r3, #28]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 030f 	and.w	r3, r3, #15
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	43db      	mvns	r3, r3
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	0159      	lsls	r1, r3, #5
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	440b      	add	r3, r1
 800c5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4b35      	ldr	r3, [pc, #212]	; (800c6c0 <USB_DeactivateEndpoint+0x1b0>)
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	600b      	str	r3, [r1, #0]
 800c5ee:	e060      	b.n	800c6b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c606:	d11f      	bne.n	800c648 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	015a      	lsls	r2, r3, #5
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	4413      	add	r3, r2
 800c610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	0151      	lsls	r1, r2, #5
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	440a      	add	r2, r1
 800c61e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c626:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	015a      	lsls	r2, r3, #5
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	0151      	lsls	r1, r2, #5
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	440a      	add	r2, r1
 800c63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c646:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c64e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	f003 030f 	and.w	r3, r3, #15
 800c658:	2101      	movs	r1, #1
 800c65a:	fa01 f303 	lsl.w	r3, r1, r3
 800c65e:	041b      	lsls	r3, r3, #16
 800c660:	43db      	mvns	r3, r3
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c668:	4013      	ands	r3, r2
 800c66a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c672:	69da      	ldr	r2, [r3, #28]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	f003 030f 	and.w	r3, r3, #15
 800c67c:	2101      	movs	r1, #1
 800c67e:	fa01 f303 	lsl.w	r3, r1, r3
 800c682:	041b      	lsls	r3, r3, #16
 800c684:	43db      	mvns	r3, r3
 800c686:	68f9      	ldr	r1, [r7, #12]
 800c688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c68c:	4013      	ands	r3, r2
 800c68e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	4413      	add	r3, r2
 800c698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	0159      	lsls	r1, r3, #5
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	440b      	add	r3, r1
 800c6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <USB_DeactivateEndpoint+0x1b4>)
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	ec337800 	.word	0xec337800
 800c6c4:	eff37800 	.word	0xeff37800

0800c6c8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	785b      	ldrb	r3, [r3, #1]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	f040 810a 	bne.w	800c8fa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d132      	bne.n	800c754 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	0151      	lsls	r1, r2, #5
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	440a      	add	r2, r1
 800c704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c70c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	015a      	lsls	r2, r3, #5
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	4413      	add	r3, r2
 800c71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	0151      	lsls	r1, r2, #5
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	440a      	add	r2, r1
 800c728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c72c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	0151      	lsls	r1, r2, #5
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	440a      	add	r2, r1
 800c748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c74c:	0cdb      	lsrs	r3, r3, #19
 800c74e:	04db      	lsls	r3, r3, #19
 800c750:	6113      	str	r3, [r2, #16]
 800c752:	e074      	b.n	800c83e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	0151      	lsls	r1, r2, #5
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	440a      	add	r2, r1
 800c76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c76e:	0cdb      	lsrs	r3, r3, #19
 800c770:	04db      	lsls	r3, r3, #19
 800c772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	0151      	lsls	r1, r2, #5
 800c786:	697a      	ldr	r2, [r7, #20]
 800c788:	440a      	add	r2, r1
 800c78a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c78e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c792:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	6999      	ldr	r1, [r3, #24]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	440b      	add	r3, r1
 800c7b0:	1e59      	subs	r1, r3, #1
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c7ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c7bc:	4b9e      	ldr	r3, [pc, #632]	; (800ca38 <USB_EPStartXfer+0x370>)
 800c7be:	400b      	ands	r3, r1
 800c7c0:	6939      	ldr	r1, [r7, #16]
 800c7c2:	0148      	lsls	r0, r1, #5
 800c7c4:	6979      	ldr	r1, [r7, #20]
 800c7c6:	4401      	add	r1, r0
 800c7c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	015a      	lsls	r2, r3, #5
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7dc:	691a      	ldr	r2, [r3, #16]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7e6:	6939      	ldr	r1, [r7, #16]
 800c7e8:	0148      	lsls	r0, r1, #5
 800c7ea:	6979      	ldr	r1, [r7, #20]
 800c7ec:	4401      	add	r1, r0
 800c7ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	791b      	ldrb	r3, [r3, #4]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d11f      	bne.n	800c83e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	4413      	add	r3, r2
 800c806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	0151      	lsls	r1, r2, #5
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	440a      	add	r2, r1
 800c814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c818:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c81c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	0151      	lsls	r1, r2, #5
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	440a      	add	r2, r1
 800c834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c83c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	015a      	lsls	r2, r3, #5
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	4413      	add	r3, r2
 800c846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	0151      	lsls	r1, r2, #5
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	440a      	add	r2, r1
 800c854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c85c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	791b      	ldrb	r3, [r3, #4]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d015      	beq.n	800c892 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 8106 	beq.w	800ca7c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	f003 030f 	and.w	r3, r3, #15
 800c880:	2101      	movs	r1, #1
 800c882:	fa01 f303 	lsl.w	r3, r1, r3
 800c886:	6979      	ldr	r1, [r7, #20]
 800c888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c88c:	4313      	orrs	r3, r2
 800c88e:	634b      	str	r3, [r1, #52]	; 0x34
 800c890:	e0f4      	b.n	800ca7c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d110      	bne.n	800c8c4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	0151      	lsls	r1, r2, #5
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	440a      	add	r2, r1
 800c8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	e00f      	b.n	800c8e4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	0151      	lsls	r1, r2, #5
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	440a      	add	r2, r1
 800c8da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8e2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	6919      	ldr	r1, [r3, #16]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781a      	ldrb	r2, [r3, #0]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fa94 	bl	800ce20 <USB_WritePacket>
 800c8f8:	e0c0      	b.n	800ca7c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c914:	0cdb      	lsrs	r3, r3, #19
 800c916:	04db      	lsls	r3, r3, #19
 800c918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	0151      	lsls	r1, r2, #5
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	440a      	add	r2, r1
 800c930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c934:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c938:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c93c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	699b      	ldr	r3, [r3, #24]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d123      	bne.n	800c98e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c952:	691a      	ldr	r2, [r3, #16]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c95c:	6939      	ldr	r1, [r7, #16]
 800c95e:	0148      	lsls	r0, r1, #5
 800c960:	6979      	ldr	r1, [r7, #20]
 800c962:	4401      	add	r1, r0
 800c964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c968:	4313      	orrs	r3, r2
 800c96a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	4413      	add	r3, r2
 800c974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	0151      	lsls	r1, r2, #5
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	440a      	add	r2, r1
 800c982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c98a:	6113      	str	r3, [r2, #16]
 800c98c:	e037      	b.n	800c9fe <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	699a      	ldr	r2, [r3, #24]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	4413      	add	r3, r2
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	89fa      	ldrh	r2, [r7, #14]
 800c9aa:	fb03 f202 	mul.w	r2, r3, r2
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	015a      	lsls	r2, r3, #5
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9be:	691a      	ldr	r2, [r3, #16]
 800c9c0:	89fb      	ldrh	r3, [r7, #14]
 800c9c2:	04d9      	lsls	r1, r3, #19
 800c9c4:	4b1c      	ldr	r3, [pc, #112]	; (800ca38 <USB_EPStartXfer+0x370>)
 800c9c6:	400b      	ands	r3, r1
 800c9c8:	6939      	ldr	r1, [r7, #16]
 800c9ca:	0148      	lsls	r0, r1, #5
 800c9cc:	6979      	ldr	r1, [r7, #20]
 800c9ce:	4401      	add	r1, r0
 800c9d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e4:	691a      	ldr	r2, [r3, #16]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	69db      	ldr	r3, [r3, #28]
 800c9ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ee:	6939      	ldr	r1, [r7, #16]
 800c9f0:	0148      	lsls	r0, r1, #5
 800c9f2:	6979      	ldr	r1, [r7, #20]
 800c9f4:	4401      	add	r1, r0
 800c9f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	791b      	ldrb	r3, [r3, #4]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d12a      	bne.n	800ca5c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d112      	bne.n	800ca3c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	0151      	lsls	r1, r2, #5
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	440a      	add	r2, r1
 800ca2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	e011      	b.n	800ca5c <USB_EPStartXfer+0x394>
 800ca38:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	0151      	lsls	r1, r2, #5
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	440a      	add	r2, r1
 800ca52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	0151      	lsls	r1, r2, #5
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	440a      	add	r2, r1
 800ca72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop

0800ca88 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	785b      	ldrb	r3, [r3, #1]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	f040 80ab 	bne.w	800cbfc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d132      	bne.n	800cb14 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	015a      	lsls	r2, r3, #5
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	4413      	add	r3, r2
 800cab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	0151      	lsls	r1, r2, #5
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	440a      	add	r2, r1
 800cac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cacc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	015a      	lsls	r2, r3, #5
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4413      	add	r3, r2
 800cada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	0151      	lsls	r1, r2, #5
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	440a      	add	r2, r1
 800cae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800caf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	015a      	lsls	r2, r3, #5
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4413      	add	r3, r2
 800cafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	0151      	lsls	r1, r2, #5
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	440a      	add	r2, r1
 800cb08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb0c:	0cdb      	lsrs	r3, r3, #19
 800cb0e:	04db      	lsls	r3, r3, #19
 800cb10:	6113      	str	r3, [r2, #16]
 800cb12:	e04e      	b.n	800cbb2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	015a      	lsls	r2, r3, #5
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	0151      	lsls	r1, r2, #5
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	440a      	add	r2, r1
 800cb2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2e:	0cdb      	lsrs	r3, r3, #19
 800cb30:	04db      	lsls	r3, r3, #19
 800cb32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	0151      	lsls	r1, r2, #5
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	440a      	add	r2, r1
 800cb4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	699a      	ldr	r2, [r3, #24]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d903      	bls.n	800cb6c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	68da      	ldr	r2, [r3, #12]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	0151      	lsls	r1, r2, #5
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	440a      	add	r2, r1
 800cb82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb98:	691a      	ldr	r2, [r3, #16]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cba2:	68b9      	ldr	r1, [r7, #8]
 800cba4:	0148      	lsls	r0, r1, #5
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	4401      	add	r1, r0
 800cbaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	015a      	lsls	r2, r3, #5
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	4413      	add	r3, r2
 800cbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	0151      	lsls	r1, r2, #5
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	440a      	add	r2, r1
 800cbc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cbd0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d071      	beq.n	800ccbe <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 030f 	and.w	r3, r3, #15
 800cbea:	2101      	movs	r1, #1
 800cbec:	fa01 f303 	lsl.w	r3, r1, r3
 800cbf0:	68f9      	ldr	r1, [r7, #12]
 800cbf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	634b      	str	r3, [r1, #52]	; 0x34
 800cbfa:	e060      	b.n	800ccbe <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc08:	691b      	ldr	r3, [r3, #16]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	0151      	lsls	r1, r2, #5
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	440a      	add	r2, r1
 800cc12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc16:	0cdb      	lsrs	r3, r3, #19
 800cc18:	04db      	lsls	r3, r3, #19
 800cc1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	015a      	lsls	r2, r3, #5
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	4413      	add	r3, r2
 800cc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	0151      	lsls	r1, r2, #5
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	440a      	add	r2, r1
 800cc32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d003      	beq.n	800cc50 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	68da      	ldr	r2, [r3, #12]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	015a      	lsls	r2, r3, #5
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4413      	add	r3, r2
 800cc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	0151      	lsls	r1, r2, #5
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	440a      	add	r2, r1
 800cc6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	691a      	ldr	r2, [r3, #16]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	0148      	lsls	r0, r1, #5
 800cc92:	68f9      	ldr	r1, [r7, #12]
 800cc94:	4401      	add	r1, r0
 800cc96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	015a      	lsls	r2, r3, #5
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4413      	add	r3, r2
 800cca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	0151      	lsls	r1, r2, #5
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	440a      	add	r2, r1
 800ccb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	785b      	ldrb	r3, [r3, #1]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d14a      	bne.n	800cd80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd02:	f040 8086 	bne.w	800ce12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	015a      	lsls	r2, r3, #5
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	4413      	add	r3, r2
 800cd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	683a      	ldr	r2, [r7, #0]
 800cd18:	7812      	ldrb	r2, [r2, #0]
 800cd1a:	0151      	lsls	r1, r2, #5
 800cd1c:	693a      	ldr	r2, [r7, #16]
 800cd1e:	440a      	add	r2, r1
 800cd20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	7812      	ldrb	r2, [r2, #0]
 800cd3e:	0151      	lsls	r1, r2, #5
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	440a      	add	r2, r1
 800cd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	3301      	adds	r3, #1
 800cd52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d902      	bls.n	800cd64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	75fb      	strb	r3, [r7, #23]
          break;
 800cd62:	e056      	b.n	800ce12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd7c:	d0e7      	beq.n	800cd4e <USB_EPStopXfer+0x82>
 800cd7e:	e048      	b.n	800ce12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd98:	d13b      	bne.n	800ce12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	015a      	lsls	r2, r3, #5
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	4413      	add	r3, r2
 800cda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	7812      	ldrb	r2, [r2, #0]
 800cdae:	0151      	lsls	r1, r2, #5
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	440a      	add	r2, r1
 800cdb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cdbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	015a      	lsls	r2, r3, #5
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	7812      	ldrb	r2, [r2, #0]
 800cdd2:	0151      	lsls	r1, r2, #5
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	440a      	add	r2, r1
 800cdd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cde0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3301      	adds	r3, #1
 800cde6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f242 7210 	movw	r2, #10000	; 0x2710
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d902      	bls.n	800cdf8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	75fb      	strb	r3, [r7, #23]
          break;
 800cdf6:	e00c      	b.n	800ce12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce10:	d0e7      	beq.n	800cde2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	371c      	adds	r7, #28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b089      	sub	sp, #36	; 0x24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	460b      	mov	r3, r1
 800ce30:	71fb      	strb	r3, [r7, #7]
 800ce32:	4613      	mov	r3, r2
 800ce34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ce3e:	88bb      	ldrh	r3, [r7, #4]
 800ce40:	3303      	adds	r3, #3
 800ce42:	089b      	lsrs	r3, r3, #2
 800ce44:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ce46:	2300      	movs	r3, #0
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	e018      	b.n	800ce7e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	031a      	lsls	r2, r3, #12
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	4413      	add	r3, r2
 800ce54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce58:	461a      	mov	r2, r3
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	3301      	adds	r3, #1
 800ce64:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	3301      	adds	r3, #1
 800ce76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	61bb      	str	r3, [r7, #24]
 800ce7e:	69ba      	ldr	r2, [r7, #24]
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d3e2      	bcc.n	800ce4c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3724      	adds	r7, #36	; 0x24
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b08b      	sub	sp, #44	; 0x2c
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ceaa:	88fb      	ldrh	r3, [r7, #6]
 800ceac:	089b      	lsrs	r3, r3, #2
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ceb2:	88fb      	ldrh	r3, [r7, #6]
 800ceb4:	f003 0303 	and.w	r3, r3, #3
 800ceb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ceba:	2300      	movs	r3, #0
 800cebc:	623b      	str	r3, [r7, #32]
 800cebe:	e014      	b.n	800ceea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	601a      	str	r2, [r3, #0]
    pDest++;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	3301      	adds	r3, #1
 800ced0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	3301      	adds	r3, #1
 800ced6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceda:	3301      	adds	r3, #1
 800cedc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	3301      	adds	r3, #1
 800cee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	3301      	adds	r3, #1
 800cee8:	623b      	str	r3, [r7, #32]
 800ceea:	6a3a      	ldr	r2, [r7, #32]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d3e6      	bcc.n	800cec0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cef2:	8bfb      	ldrh	r3, [r7, #30]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d01e      	beq.n	800cf36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cef8:	2300      	movs	r3, #0
 800cefa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf02:	461a      	mov	r2, r3
 800cf04:	f107 0310 	add.w	r3, r7, #16
 800cf08:	6812      	ldr	r2, [r2, #0]
 800cf0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cf0c:	693a      	ldr	r2, [r7, #16]
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	fa22 f303 	lsr.w	r3, r2, r3
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	701a      	strb	r2, [r3, #0]
      i++;
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	3301      	adds	r3, #1
 800cf22:	623b      	str	r3, [r7, #32]
      pDest++;
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	3301      	adds	r3, #1
 800cf28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cf2a:	8bfb      	ldrh	r3, [r7, #30]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cf30:	8bfb      	ldrh	r3, [r7, #30]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1ea      	bne.n	800cf0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	372c      	adds	r7, #44	; 0x2c
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	785b      	ldrb	r3, [r3, #1]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d12c      	bne.n	800cfba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	015a      	lsls	r2, r3, #5
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4413      	add	r3, r2
 800cf68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	db12      	blt.n	800cf98 <USB_EPSetStall+0x54>
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00f      	beq.n	800cf98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	0151      	lsls	r1, r2, #5
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	440a      	add	r2, r1
 800cf8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	015a      	lsls	r2, r3, #5
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	0151      	lsls	r1, r2, #5
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	440a      	add	r2, r1
 800cfae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	e02b      	b.n	800d012 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	db12      	blt.n	800cff2 <USB_EPSetStall+0xae>
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00f      	beq.n	800cff2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	015a      	lsls	r2, r3, #5
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	4413      	add	r3, r2
 800cfda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	0151      	lsls	r1, r2, #5
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	440a      	add	r2, r1
 800cfe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cff0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	015a      	lsls	r2, r3, #5
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	4413      	add	r3, r2
 800cffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	0151      	lsls	r1, r2, #5
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	440a      	add	r2, r1
 800d008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d00c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d010:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	785b      	ldrb	r3, [r3, #1]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d128      	bne.n	800d08e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	015a      	lsls	r2, r3, #5
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4413      	add	r3, r2
 800d044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	0151      	lsls	r1, r2, #5
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	440a      	add	r2, r1
 800d052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d05a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	791b      	ldrb	r3, [r3, #4]
 800d060:	2b03      	cmp	r3, #3
 800d062:	d003      	beq.n	800d06c <USB_EPClearStall+0x4c>
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	791b      	ldrb	r3, [r3, #4]
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d138      	bne.n	800d0de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	4413      	add	r3, r2
 800d074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	440a      	add	r2, r1
 800d082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	e027      	b.n	800d0de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	015a      	lsls	r2, r3, #5
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	4413      	add	r3, r2
 800d096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	0151      	lsls	r1, r2, #5
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	440a      	add	r2, r1
 800d0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d0ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	791b      	ldrb	r3, [r3, #4]
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d003      	beq.n	800d0be <USB_EPClearStall+0x9e>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	791b      	ldrb	r3, [r3, #4]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d10f      	bne.n	800d0de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	0151      	lsls	r1, r2, #5
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	440a      	add	r2, r1
 800d0d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d10a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d10e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	78fb      	ldrb	r3, [r7, #3]
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d120:	68f9      	ldr	r1, [r7, #12]
 800d122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d126:	4313      	orrs	r3, r2
 800d128:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d152:	f023 0303 	bic.w	r3, r3, #3
 800d156:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d166:	f023 0302 	bic.w	r3, r3, #2
 800d16a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d17a:	b480      	push	{r7}
 800d17c:	b085      	sub	sp, #20
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d194:	f023 0303 	bic.w	r3, r3, #3
 800d198:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1a8:	f043 0302 	orr.w	r3, r3, #2
 800d1ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b085      	sub	sp, #20
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f4:	699b      	ldr	r3, [r3, #24]
 800d1f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	4013      	ands	r3, r2
 800d204:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	0c1b      	lsrs	r3, r3, #16
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3714      	adds	r7, #20
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d216:	b480      	push	{r7}
 800d218:	b085      	sub	sp, #20
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	4013      	ands	r3, r2
 800d238:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	b29b      	uxth	r3, r3
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b085      	sub	sp, #20
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	460b      	mov	r3, r1
 800d254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d25a:	78fb      	ldrb	r3, [r7, #3]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	4013      	ands	r3, r2
 800d276:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d278:	68bb      	ldr	r3, [r7, #8]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d286:	b480      	push	{r7}
 800d288:	b087      	sub	sp, #28
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	460b      	mov	r3, r1
 800d290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	f003 030f 	and.w	r3, r3, #15
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2b6:	01db      	lsls	r3, r3, #7
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d2c0:	78fb      	ldrb	r3, [r7, #3]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d2d4:	68bb      	ldr	r3, [r7, #8]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	371c      	adds	r7, #28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	695b      	ldr	r3, [r3, #20]
 800d2ee:	f003 0301 	and.w	r3, r3, #1
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	370c      	adds	r7, #12
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr

0800d2fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d2fe:	b480      	push	{r7}
 800d300:	b085      	sub	sp, #20
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d318:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d31c:	f023 0307 	bic.w	r3, r3, #7
 800d320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	333c      	adds	r3, #60	; 0x3c
 800d356:	3304      	adds	r3, #4
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	4a1c      	ldr	r2, [pc, #112]	; (800d3d0 <USB_EP0_OutStart+0x8c>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d90a      	bls.n	800d37a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d374:	d101      	bne.n	800d37a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	e024      	b.n	800d3c4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d380:	461a      	mov	r2, r3
 800d382:	2300      	movs	r3, #0
 800d384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3a8:	f043 0318 	orr.w	r3, r3, #24
 800d3ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d3c0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3714      	adds	r7, #20
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr
 800d3d0:	4f54300a 	.word	0x4f54300a

0800d3d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	4a13      	ldr	r2, [pc, #76]	; (800d438 <USB_CoreReset+0x64>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d901      	bls.n	800d3f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e01b      	b.n	800d42a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	daf2      	bge.n	800d3e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	f043 0201 	orr.w	r2, r3, #1
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3301      	adds	r3, #1
 800d40e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4a09      	ldr	r2, [pc, #36]	; (800d438 <USB_CoreReset+0x64>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d901      	bls.n	800d41c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d418:	2303      	movs	r3, #3
 800d41a:	e006      	b.n	800d42a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	691b      	ldr	r3, [r3, #16]
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	2b01      	cmp	r3, #1
 800d426:	d0f0      	beq.n	800d40a <USB_CoreReset+0x36>

  return HAL_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3714      	adds	r7, #20
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	00030d40 	.word	0x00030d40

0800d43c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d440:	4904      	ldr	r1, [pc, #16]	; (800d454 <MX_FATFS_Init+0x18>)
 800d442:	4805      	ldr	r0, [pc, #20]	; (800d458 <MX_FATFS_Init+0x1c>)
 800d444:	f001 ff48 	bl	800f2d8 <FATFS_LinkDriver>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	4b03      	ldr	r3, [pc, #12]	; (800d45c <MX_FATFS_Init+0x20>)
 800d44e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d450:	bf00      	nop
 800d452:	bd80      	pop	{r7, pc}
 800d454:	20000dc8 	.word	0x20000dc8
 800d458:	08018e68 	.word	0x08018e68
 800d45c:	20000dc4 	.word	0x20000dc4

0800d460 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d46a:	f000 f885 	bl	800d578 <BSP_SD_IsDetected>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b01      	cmp	r3, #1
 800d472:	d001      	beq.n	800d478 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d474:	2302      	movs	r3, #2
 800d476:	e012      	b.n	800d49e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d478:	480b      	ldr	r0, [pc, #44]	; (800d4a8 <BSP_SD_Init+0x48>)
 800d47a:	f7fb f961 	bl	8008740 <HAL_SD_Init>
 800d47e:	4603      	mov	r3, r0
 800d480:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d482:	79fb      	ldrb	r3, [r7, #7]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d109      	bne.n	800d49c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d48c:	4806      	ldr	r0, [pc, #24]	; (800d4a8 <BSP_SD_Init+0x48>)
 800d48e:	f7fc f815 	bl	80094bc <HAL_SD_ConfigWideBusOperation>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d001      	beq.n	800d49c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d49c:	79fb      	ldrb	r3, [r7, #7]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20000b00 	.word	0x20000b00

0800d4ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	68f9      	ldr	r1, [r7, #12]
 800d4c2:	4806      	ldr	r0, [pc, #24]	; (800d4dc <BSP_SD_ReadBlocks_DMA+0x30>)
 800d4c4:	f7fb fa64 	bl	8008990 <HAL_SD_ReadBlocks_DMA>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d001      	beq.n	800d4d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3718      	adds	r7, #24
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20000b00 	.word	0x20000b00

0800d4e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	68f9      	ldr	r1, [r7, #12]
 800d4f6:	4806      	ldr	r0, [pc, #24]	; (800d510 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d4f8:	f7fb faf2 	bl	8008ae0 <HAL_SD_WriteBlocks_DMA>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d506:	7dfb      	ldrb	r3, [r7, #23]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20000b00 	.word	0x20000b00

0800d514 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d518:	4805      	ldr	r0, [pc, #20]	; (800d530 <BSP_SD_GetCardState+0x1c>)
 800d51a:	f7fc f8e3 	bl	80096e4 <HAL_SD_GetCardState>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b04      	cmp	r3, #4
 800d522:	bf14      	ite	ne
 800d524:	2301      	movne	r3, #1
 800d526:	2300      	moveq	r3, #0
 800d528:	b2db      	uxtb	r3, r3
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	20000b00 	.word	0x20000b00

0800d534 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	4803      	ldr	r0, [pc, #12]	; (800d54c <BSP_SD_GetCardInfo+0x18>)
 800d540:	f7fb ff90 	bl	8009464 <HAL_SD_GetCardInfo>
}
 800d544:	bf00      	nop
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	20000b00 	.word	0x20000b00

0800d550 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d558:	f000 f9a0 	bl	800d89c <BSP_SD_WriteCpltCallback>
}
 800d55c:	bf00      	nop
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d56c:	f000 f9a2 	bl	800d8b4 <BSP_SD_ReadCpltCallback>
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d57e:	2301      	movs	r3, #1
 800d580:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d582:	f000 f80b 	bl	800d59c <BSP_PlatformIsDetected>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d58c:	2300      	movs	r3, #0
 800d58e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	b2db      	uxtb	r3, r3
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d5a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d5aa:	4806      	ldr	r0, [pc, #24]	; (800d5c4 <BSP_PlatformIsDetected+0x28>)
 800d5ac:	f7f6 fdea 	bl	8004184 <HAL_GPIO_ReadPin>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d5ba:	79fb      	ldrb	r3, [r7, #7]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	48000400 	.word	0x48000400

0800d5c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d5d0:	f7f4 ff4c 	bl	800246c <HAL_GetTick>
 800d5d4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d5d6:	e006      	b.n	800d5e6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5d8:	f7ff ff9c 	bl	800d514 <BSP_SD_GetCardState>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d101      	bne.n	800d5e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e009      	b.n	800d5fa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d5e6:	f7f4 ff41 	bl	800246c <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d8f0      	bhi.n	800d5d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d5f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d60e:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <SD_CheckStatus+0x38>)
 800d610:	2201      	movs	r2, #1
 800d612:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d614:	f7ff ff7e 	bl	800d514 <BSP_SD_GetCardState>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d107      	bne.n	800d62e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d61e:	4b07      	ldr	r3, [pc, #28]	; (800d63c <SD_CheckStatus+0x38>)
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f023 0301 	bic.w	r3, r3, #1
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	4b04      	ldr	r3, [pc, #16]	; (800d63c <SD_CheckStatus+0x38>)
 800d62c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d62e:	4b03      	ldr	r3, [pc, #12]	; (800d63c <SD_CheckStatus+0x38>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	b2db      	uxtb	r3, r3
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20000009 	.word	0x20000009

0800d640 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d64a:	f7ff ff09 	bl	800d460 <BSP_SD_Init>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d107      	bne.n	800d664 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff ffd4 	bl	800d604 <SD_CheckStatus>
 800d65c:	4603      	mov	r3, r0
 800d65e:	461a      	mov	r2, r3
 800d660:	4b04      	ldr	r3, [pc, #16]	; (800d674 <SD_initialize+0x34>)
 800d662:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d664:	4b03      	ldr	r3, [pc, #12]	; (800d674 <SD_initialize+0x34>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	b2db      	uxtb	r3, r3
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000009 	.word	0x20000009

0800d678 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4603      	mov	r3, r0
 800d680:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d682:	79fb      	ldrb	r3, [r7, #7]
 800d684:	4618      	mov	r0, r3
 800d686:	f7ff ffbd 	bl	800d604 <SD_CheckStatus>
 800d68a:	4603      	mov	r3, r0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d6a8:	f247 5030 	movw	r0, #30000	; 0x7530
 800d6ac:	f7ff ff8c 	bl	800d5c8 <SD_CheckStatusWithTimeout>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	da01      	bge.n	800d6ba <SD_read+0x26>
  {
    return res;
 800d6b6:	7dfb      	ldrb	r3, [r7, #23]
 800d6b8:	e03b      	b.n	800d732 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	6879      	ldr	r1, [r7, #4]
 800d6be:	68b8      	ldr	r0, [r7, #8]
 800d6c0:	f7ff fef4 	bl	800d4ac <BSP_SD_ReadBlocks_DMA>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d132      	bne.n	800d730 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d6ca:	4b1c      	ldr	r3, [pc, #112]	; (800d73c <SD_read+0xa8>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d6d0:	f7f4 fecc 	bl	800246c <HAL_GetTick>
 800d6d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d6d6:	bf00      	nop
 800d6d8:	4b18      	ldr	r3, [pc, #96]	; (800d73c <SD_read+0xa8>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d108      	bne.n	800d6f2 <SD_read+0x5e>
 800d6e0:	f7f4 fec4 	bl	800246c <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	f247 522f 	movw	r2, #29999	; 0x752f
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d9f2      	bls.n	800d6d8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d6f2:	4b12      	ldr	r3, [pc, #72]	; (800d73c <SD_read+0xa8>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d102      	bne.n	800d700 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	75fb      	strb	r3, [r7, #23]
 800d6fe:	e017      	b.n	800d730 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d700:	4b0e      	ldr	r3, [pc, #56]	; (800d73c <SD_read+0xa8>)
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d706:	f7f4 feb1 	bl	800246c <HAL_GetTick>
 800d70a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d70c:	e007      	b.n	800d71e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d70e:	f7ff ff01 	bl	800d514 <BSP_SD_GetCardState>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d102      	bne.n	800d71e <SD_read+0x8a>
          {
            res = RES_OK;
 800d718:	2300      	movs	r3, #0
 800d71a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d71c:	e008      	b.n	800d730 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d71e:	f7f4 fea5 	bl	800246c <HAL_GetTick>
 800d722:	4602      	mov	r2, r0
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	f247 522f 	movw	r2, #29999	; 0x752f
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d9ee      	bls.n	800d70e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d730:	7dfb      	ldrb	r3, [r7, #23]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	20000dd0 	.word	0x20000dd0

0800d740 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	60b9      	str	r1, [r7, #8]
 800d748:	607a      	str	r2, [r7, #4]
 800d74a:	603b      	str	r3, [r7, #0]
 800d74c:	4603      	mov	r3, r0
 800d74e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d754:	4b24      	ldr	r3, [pc, #144]	; (800d7e8 <SD_write+0xa8>)
 800d756:	2200      	movs	r2, #0
 800d758:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d75a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d75e:	f7ff ff33 	bl	800d5c8 <SD_CheckStatusWithTimeout>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	da01      	bge.n	800d76c <SD_write+0x2c>
  {
    return res;
 800d768:	7dfb      	ldrb	r3, [r7, #23]
 800d76a:	e038      	b.n	800d7de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	68b8      	ldr	r0, [r7, #8]
 800d772:	f7ff feb5 	bl	800d4e0 <BSP_SD_WriteBlocks_DMA>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d12f      	bne.n	800d7dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d77c:	f7f4 fe76 	bl	800246c <HAL_GetTick>
 800d780:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d782:	bf00      	nop
 800d784:	4b18      	ldr	r3, [pc, #96]	; (800d7e8 <SD_write+0xa8>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d108      	bne.n	800d79e <SD_write+0x5e>
 800d78c:	f7f4 fe6e 	bl	800246c <HAL_GetTick>
 800d790:	4602      	mov	r2, r0
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	f247 522f 	movw	r2, #29999	; 0x752f
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d9f2      	bls.n	800d784 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d79e:	4b12      	ldr	r3, [pc, #72]	; (800d7e8 <SD_write+0xa8>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d102      	bne.n	800d7ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	75fb      	strb	r3, [r7, #23]
 800d7aa:	e017      	b.n	800d7dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d7ac:	4b0e      	ldr	r3, [pc, #56]	; (800d7e8 <SD_write+0xa8>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d7b2:	f7f4 fe5b 	bl	800246c <HAL_GetTick>
 800d7b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d7b8:	e007      	b.n	800d7ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7ba:	f7ff feab 	bl	800d514 <BSP_SD_GetCardState>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <SD_write+0x8a>
          {
            res = RES_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	75fb      	strb	r3, [r7, #23]
            break;
 800d7c8:	e008      	b.n	800d7dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d7ca:	f7f4 fe4f 	bl	800246c <HAL_GetTick>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d9ee      	bls.n	800d7ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3718      	adds	r7, #24
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20000dcc 	.word	0x20000dcc

0800d7ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08c      	sub	sp, #48	; 0x30
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	603a      	str	r2, [r7, #0]
 800d7f6:	71fb      	strb	r3, [r7, #7]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d802:	4b25      	ldr	r3, [pc, #148]	; (800d898 <SD_ioctl+0xac>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	b2db      	uxtb	r3, r3
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <SD_ioctl+0x28>
 800d810:	2303      	movs	r3, #3
 800d812:	e03c      	b.n	800d88e <SD_ioctl+0xa2>

  switch (cmd)
 800d814:	79bb      	ldrb	r3, [r7, #6]
 800d816:	2b03      	cmp	r3, #3
 800d818:	d834      	bhi.n	800d884 <SD_ioctl+0x98>
 800d81a:	a201      	add	r2, pc, #4	; (adr r2, 800d820 <SD_ioctl+0x34>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d831 	.word	0x0800d831
 800d824:	0800d839 	.word	0x0800d839
 800d828:	0800d851 	.word	0x0800d851
 800d82c:	0800d86b 	.word	0x0800d86b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d836:	e028      	b.n	800d88a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d838:	f107 0308 	add.w	r3, r7, #8
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff fe79 	bl	800d534 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d842:	6a3a      	ldr	r2, [r7, #32]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d84e:	e01c      	b.n	800d88a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d850:	f107 0308 	add.w	r3, r7, #8
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff fe6d 	bl	800d534 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d862:	2300      	movs	r3, #0
 800d864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d868:	e00f      	b.n	800d88a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff fe60 	bl	800d534 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	0a5a      	lsrs	r2, r3, #9
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d882:	e002      	b.n	800d88a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d884:	2304      	movs	r3, #4
 800d886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d88a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3730      	adds	r7, #48	; 0x30
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20000009 	.word	0x20000009

0800d89c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d89c:	b480      	push	{r7}
 800d89e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d8a0:	4b03      	ldr	r3, [pc, #12]	; (800d8b0 <BSP_SD_WriteCpltCallback+0x14>)
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	601a      	str	r2, [r3, #0]
}
 800d8a6:	bf00      	nop
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	20000dcc 	.word	0x20000dcc

0800d8b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d8b8:	4b03      	ldr	r3, [pc, #12]	; (800d8c8 <BSP_SD_ReadCpltCallback+0x14>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	601a      	str	r2, [r3, #0]
}
 800d8be:	bf00      	nop
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	20000dd0 	.word	0x20000dd0

0800d8cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d8d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d8dc:	f002 fb38 	bl	800ff50 <USBD_static_malloc>
 800d8e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d105      	bne.n	800d8f4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	e066      	b.n	800d9c2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7c1b      	ldrb	r3, [r3, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d119      	bne.n	800d938 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d904:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d908:	2202      	movs	r2, #2
 800d90a:	2181      	movs	r1, #129	; 0x81
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f002 f90b 	bl	800fb28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d91c:	2202      	movs	r2, #2
 800d91e:	2101      	movs	r1, #1
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f002 f901 	bl	800fb28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2210      	movs	r2, #16
 800d932:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d936:	e016      	b.n	800d966 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d938:	2340      	movs	r3, #64	; 0x40
 800d93a:	2202      	movs	r2, #2
 800d93c:	2181      	movs	r1, #129	; 0x81
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f002 f8f2 	bl	800fb28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d94a:	2340      	movs	r3, #64	; 0x40
 800d94c:	2202      	movs	r2, #2
 800d94e:	2101      	movs	r1, #1
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f002 f8e9 	bl	800fb28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2210      	movs	r2, #16
 800d962:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d966:	2308      	movs	r3, #8
 800d968:	2203      	movs	r2, #3
 800d96a:	2182      	movs	r1, #130	; 0x82
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f002 f8db 	bl	800fb28 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2200      	movs	r2, #0
 800d988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	7c1b      	ldrb	r3, [r3, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d109      	bne.n	800d9b0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f002 fa37 	bl	800fe1c <USBD_LL_PrepareReceive>
 800d9ae:	e007      	b.n	800d9c0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9b6:	2340      	movs	r3, #64	; 0x40
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f002 fa2e 	bl	800fe1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d9d6:	2181      	movs	r1, #129	; 0x81
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f002 f8e3 	bl	800fba4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f002 f8dc 	bl	800fba4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d9f4:	2182      	movs	r1, #130	; 0x82
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f002 f8d4 	bl	800fba4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00e      	beq.n	800da34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da26:	4618      	mov	r0, r3
 800da28:	f002 faa0 	bl	800ff6c <USBD_static_free>
    pdev->pClassData = NULL;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800da52:	2300      	movs	r3, #0
 800da54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800da56:	2300      	movs	r3, #0
 800da58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800da64:	2303      	movs	r3, #3
 800da66:	e0af      	b.n	800dbc8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da70:	2b00      	cmp	r3, #0
 800da72:	d03f      	beq.n	800daf4 <USBD_CDC_Setup+0xb4>
 800da74:	2b20      	cmp	r3, #32
 800da76:	f040 809f 	bne.w	800dbb8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	88db      	ldrh	r3, [r3, #6]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d02e      	beq.n	800dae0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	b25b      	sxtb	r3, r3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	da16      	bge.n	800daba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800da98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da9a:	683a      	ldr	r2, [r7, #0]
 800da9c:	88d2      	ldrh	r2, [r2, #6]
 800da9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	88db      	ldrh	r3, [r3, #6]
 800daa4:	2b07      	cmp	r3, #7
 800daa6:	bf28      	it	cs
 800daa8:	2307      	movcs	r3, #7
 800daaa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	89fa      	ldrh	r2, [r7, #14]
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f001 fb43 	bl	800f13e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dab8:	e085      	b.n	800dbc6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	785a      	ldrb	r2, [r3, #1]
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	88db      	ldrh	r3, [r3, #6]
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dad0:	6939      	ldr	r1, [r7, #16]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	88db      	ldrh	r3, [r3, #6]
 800dad6:	461a      	mov	r2, r3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f001 fb5c 	bl	800f196 <USBD_CtlPrepareRx>
      break;
 800dade:	e072      	b.n	800dbc6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dae6:	689b      	ldr	r3, [r3, #8]
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	7850      	ldrb	r0, [r2, #1]
 800daec:	2200      	movs	r2, #0
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	4798      	blx	r3
      break;
 800daf2:	e068      	b.n	800dbc6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	785b      	ldrb	r3, [r3, #1]
 800daf8:	2b0b      	cmp	r3, #11
 800dafa:	d852      	bhi.n	800dba2 <USBD_CDC_Setup+0x162>
 800dafc:	a201      	add	r2, pc, #4	; (adr r2, 800db04 <USBD_CDC_Setup+0xc4>)
 800dafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db02:	bf00      	nop
 800db04:	0800db35 	.word	0x0800db35
 800db08:	0800dbb1 	.word	0x0800dbb1
 800db0c:	0800dba3 	.word	0x0800dba3
 800db10:	0800dba3 	.word	0x0800dba3
 800db14:	0800dba3 	.word	0x0800dba3
 800db18:	0800dba3 	.word	0x0800dba3
 800db1c:	0800dba3 	.word	0x0800dba3
 800db20:	0800dba3 	.word	0x0800dba3
 800db24:	0800dba3 	.word	0x0800dba3
 800db28:	0800dba3 	.word	0x0800dba3
 800db2c:	0800db5f 	.word	0x0800db5f
 800db30:	0800db89 	.word	0x0800db89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	2b03      	cmp	r3, #3
 800db3e:	d107      	bne.n	800db50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800db40:	f107 030a 	add.w	r3, r7, #10
 800db44:	2202      	movs	r2, #2
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f001 faf8 	bl	800f13e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db4e:	e032      	b.n	800dbb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f001 fa82 	bl	800f05c <USBD_CtlError>
            ret = USBD_FAIL;
 800db58:	2303      	movs	r3, #3
 800db5a:	75fb      	strb	r3, [r7, #23]
          break;
 800db5c:	e02b      	b.n	800dbb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b03      	cmp	r3, #3
 800db68:	d107      	bne.n	800db7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800db6a:	f107 030d 	add.w	r3, r7, #13
 800db6e:	2201      	movs	r2, #1
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f001 fae3 	bl	800f13e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db78:	e01d      	b.n	800dbb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f001 fa6d 	bl	800f05c <USBD_CtlError>
            ret = USBD_FAIL;
 800db82:	2303      	movs	r3, #3
 800db84:	75fb      	strb	r3, [r7, #23]
          break;
 800db86:	e016      	b.n	800dbb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b03      	cmp	r3, #3
 800db92:	d00f      	beq.n	800dbb4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800db94:	6839      	ldr	r1, [r7, #0]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f001 fa60 	bl	800f05c <USBD_CtlError>
            ret = USBD_FAIL;
 800db9c:	2303      	movs	r3, #3
 800db9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dba0:	e008      	b.n	800dbb4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dba2:	6839      	ldr	r1, [r7, #0]
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f001 fa59 	bl	800f05c <USBD_CtlError>
          ret = USBD_FAIL;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	75fb      	strb	r3, [r7, #23]
          break;
 800dbae:	e002      	b.n	800dbb6 <USBD_CDC_Setup+0x176>
          break;
 800dbb0:	bf00      	nop
 800dbb2:	e008      	b.n	800dbc6 <USBD_CDC_Setup+0x186>
          break;
 800dbb4:	bf00      	nop
      }
      break;
 800dbb6:	e006      	b.n	800dbc6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f001 fa4e 	bl	800f05c <USBD_CtlError>
      ret = USBD_FAIL;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	75fb      	strb	r3, [r7, #23]
      break;
 800dbc4:	bf00      	nop
  }

  return (uint8_t)ret;
 800dbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d101      	bne.n	800dbf2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	e04f      	b.n	800dc92 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dbfa:	78fa      	ldrb	r2, [r7, #3]
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	4413      	add	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	440b      	add	r3, r1
 800dc08:	3318      	adds	r3, #24
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d029      	beq.n	800dc64 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dc10:	78fa      	ldrb	r2, [r7, #3]
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	4613      	mov	r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	440b      	add	r3, r1
 800dc1e:	3318      	adds	r3, #24
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	78f9      	ldrb	r1, [r7, #3]
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	460b      	mov	r3, r1
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	440b      	add	r3, r1
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4403      	add	r3, r0
 800dc30:	3348      	adds	r3, #72	; 0x48
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	fbb2 f1f3 	udiv	r1, r2, r3
 800dc38:	fb01 f303 	mul.w	r3, r1, r3
 800dc3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d110      	bne.n	800dc64 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dc42:	78fa      	ldrb	r2, [r7, #3]
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	4613      	mov	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	440b      	add	r3, r1
 800dc50:	3318      	adds	r3, #24
 800dc52:	2200      	movs	r2, #0
 800dc54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dc56:	78f9      	ldrb	r1, [r7, #3]
 800dc58:	2300      	movs	r3, #0
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f002 f8a5 	bl	800fdac <USBD_LL_Transmit>
 800dc62:	e015      	b.n	800dc90 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00b      	beq.n	800dc90 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dc8c:	78fa      	ldrb	r2, [r7, #3]
 800dc8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
 800dca2:	460b      	mov	r3, r1
 800dca4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	e015      	b.n	800dce8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dcbc:	78fb      	ldrb	r3, [r7, #3]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f002 f8e3 	bl	800fe8c <USBD_LL_GetRxDataSize>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dce2:	4611      	mov	r1, r2
 800dce4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dce6:	2300      	movs	r3, #0
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dd06:	2303      	movs	r3, #3
 800dd08:	e01b      	b.n	800dd42 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d015      	beq.n	800dd40 <USBD_CDC_EP0_RxReady+0x50>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dd1a:	2bff      	cmp	r3, #255	; 0xff
 800dd1c:	d010      	beq.n	800dd40 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dd2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dd34:	b292      	uxth	r2, r2
 800dd36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	22ff      	movs	r2, #255	; 0xff
 800dd3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
	...

0800dd4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2243      	movs	r2, #67	; 0x43
 800dd58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800dd5a:	4b03      	ldr	r3, [pc, #12]	; (800dd68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr
 800dd68:	20000094 	.word	0x20000094

0800dd6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2243      	movs	r2, #67	; 0x43
 800dd78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800dd7a:	4b03      	ldr	r3, [pc, #12]	; (800dd88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	20000050 	.word	0x20000050

0800dd8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2243      	movs	r2, #67	; 0x43
 800dd98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800dd9a:	4b03      	ldr	r3, [pc, #12]	; (800dda8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	200000d8 	.word	0x200000d8

0800ddac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	220a      	movs	r2, #10
 800ddb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ddba:	4b03      	ldr	r3, [pc, #12]	; (800ddc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	2000000c 	.word	0x2000000c

0800ddcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dddc:	2303      	movs	r3, #3
 800ddde:	e004      	b.n	800ddea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	370c      	adds	r7, #12
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b087      	sub	sp, #28
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	60f8      	str	r0, [r7, #12]
 800ddfe:	60b9      	str	r1, [r7, #8]
 800de00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de08:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d101      	bne.n	800de14 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800de10:	2303      	movs	r3, #3
 800de12:	e008      	b.n	800de26 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	68ba      	ldr	r2, [r7, #8]
 800de18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	371c      	adds	r7, #28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800de32:	b480      	push	{r7}
 800de34:	b085      	sub	sp, #20
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e004      	b.n	800de58 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800de74:	2301      	movs	r3, #1
 800de76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d101      	bne.n	800de86 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800de82:	2303      	movs	r3, #3
 800de84:	e01a      	b.n	800debc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d114      	bne.n	800deba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	2201      	movs	r2, #1
 800de94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800deae:	2181      	movs	r1, #129	; 0x81
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f001 ff7b 	bl	800fdac <USBD_LL_Transmit>

    ret = USBD_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800deba:	7bfb      	ldrb	r3, [r7, #15]
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ded2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d101      	bne.n	800dee2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dede:	2303      	movs	r3, #3
 800dee0:	e016      	b.n	800df10 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	7c1b      	ldrb	r3, [r3, #16]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d109      	bne.n	800defe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800def0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800def4:	2101      	movs	r1, #1
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f001 ff90 	bl	800fe1c <USBD_LL_PrepareReceive>
 800defc:	e007      	b.n	800df0e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df04:	2340      	movs	r3, #64	; 0x40
 800df06:	2101      	movs	r1, #1
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f001 ff87 	bl	800fe1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	4613      	mov	r3, r2
 800df24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d101      	bne.n	800df30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800df2c:	2303      	movs	r3, #3
 800df2e:	e01f      	b.n	800df70 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2201      	movs	r2, #1
 800df5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	79fa      	ldrb	r2, [r7, #7]
 800df62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f001 fd63 	bl	800fa30 <USBD_LL_Init>
 800df6a:	4603      	mov	r3, r0
 800df6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800df6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df70:	4618      	mov	r0, r3
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df82:	2300      	movs	r3, #0
 800df84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d101      	bne.n	800df90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e016      	b.n	800dfbe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00b      	beq.n	800dfbc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfac:	f107 020e 	add.w	r2, r7, #14
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	4798      	blx	r3
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}

0800dfc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b082      	sub	sp, #8
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f001 fd78 	bl	800fac4 <USBD_LL_Start>
 800dfd4:	4603      	mov	r3, r0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3708      	adds	r7, #8
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b083      	sub	sp, #12
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e000:	2303      	movs	r3, #3
 800e002:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d009      	beq.n	800e022 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	78fa      	ldrb	r2, [r7, #3]
 800e018:	4611      	mov	r1, r2
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	4798      	blx	r3
 800e01e:	4603      	mov	r3, r0
 800e020:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e022:	7bfb      	ldrb	r3, [r7, #15]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d007      	beq.n	800e052 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	78fa      	ldrb	r2, [r7, #3]
 800e04c:	4611      	mov	r1, r2
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	4798      	blx	r3
  }

  return USBD_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 ffba 	bl	800efe8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e082:	461a      	mov	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e090:	f003 031f 	and.w	r3, r3, #31
 800e094:	2b02      	cmp	r3, #2
 800e096:	d01a      	beq.n	800e0ce <USBD_LL_SetupStage+0x72>
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d822      	bhi.n	800e0e2 <USBD_LL_SetupStage+0x86>
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <USBD_LL_SetupStage+0x4a>
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d00a      	beq.n	800e0ba <USBD_LL_SetupStage+0x5e>
 800e0a4:	e01d      	b.n	800e0e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fa62 	bl	800e578 <USBD_StdDevReq>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e0b8:	e020      	b.n	800e0fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fac6 	bl	800e654 <USBD_StdItfReq>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e0cc:	e016      	b.n	800e0fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fb05 	bl	800e6e6 <USBD_StdEPReq>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73fb      	strb	r3, [r7, #15]
      break;
 800e0e0:	e00c      	b.n	800e0fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f001 fd8d 	bl	800fc10 <USBD_LL_StallEP>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e0fa:	bf00      	nop
  }

  return ret;
 800e0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b086      	sub	sp, #24
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	60f8      	str	r0, [r7, #12]
 800e10e:	460b      	mov	r3, r1
 800e110:	607a      	str	r2, [r7, #4]
 800e112:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e114:	7afb      	ldrb	r3, [r7, #11]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d138      	bne.n	800e18c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e120:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d14a      	bne.n	800e1c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	429a      	cmp	r2, r3
 800e136:	d913      	bls.n	800e160 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	689a      	ldr	r2, [r3, #8]
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	1ad2      	subs	r2, r2, r3
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	68da      	ldr	r2, [r3, #12]
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	4293      	cmp	r3, r2
 800e150:	bf28      	it	cs
 800e152:	4613      	movcs	r3, r2
 800e154:	461a      	mov	r2, r3
 800e156:	6879      	ldr	r1, [r7, #4]
 800e158:	68f8      	ldr	r0, [r7, #12]
 800e15a:	f001 f839 	bl	800f1d0 <USBD_CtlContinueRx>
 800e15e:	e030      	b.n	800e1c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d10b      	bne.n	800e184 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d005      	beq.n	800e184 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f001 f834 	bl	800f1f2 <USBD_CtlSendStatus>
 800e18a:	e01a      	b.n	800e1c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e192:	b2db      	uxtb	r3, r3
 800e194:	2b03      	cmp	r3, #3
 800e196:	d114      	bne.n	800e1c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00e      	beq.n	800e1c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	7afa      	ldrb	r2, [r7, #11]
 800e1ae:	4611      	mov	r1, r2
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	4798      	blx	r3
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e1b8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	e000      	b.n	800e1c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e1da:	7afb      	ldrb	r3, [r7, #11]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d16b      	bne.n	800e2b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3314      	adds	r3, #20
 800e1e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d156      	bne.n	800e29e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	689a      	ldr	r2, [r3, #8]
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d914      	bls.n	800e226 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	689a      	ldr	r2, [r3, #8]
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	1ad2      	subs	r2, r2, r3
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	461a      	mov	r2, r3
 800e210:	6879      	ldr	r1, [r7, #4]
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f000 ffae 	bl	800f174 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e218:	2300      	movs	r3, #0
 800e21a:	2200      	movs	r2, #0
 800e21c:	2100      	movs	r1, #0
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f001 fdfc 	bl	800fe1c <USBD_LL_PrepareReceive>
 800e224:	e03b      	b.n	800e29e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	68da      	ldr	r2, [r3, #12]
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d11c      	bne.n	800e26c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d316      	bcc.n	800e26c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e248:	429a      	cmp	r2, r3
 800e24a:	d20f      	bcs.n	800e26c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e24c:	2200      	movs	r2, #0
 800e24e:	2100      	movs	r1, #0
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f000 ff8f 	bl	800f174 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e25e:	2300      	movs	r3, #0
 800e260:	2200      	movs	r2, #0
 800e262:	2100      	movs	r1, #0
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f001 fdd9 	bl	800fe1c <USBD_LL_PrepareReceive>
 800e26a:	e018      	b.n	800e29e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2b03      	cmp	r3, #3
 800e276:	d10b      	bne.n	800e290 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e290:	2180      	movs	r1, #128	; 0x80
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	f001 fcbc 	bl	800fc10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 ffbd 	bl	800f218 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d122      	bne.n	800e2ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff fe98 	bl	800dfde <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e2b6:	e01a      	b.n	800e2ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b03      	cmp	r3, #3
 800e2c2:	d114      	bne.n	800e2ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00e      	beq.n	800e2ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d6:	695b      	ldr	r3, [r3, #20]
 800e2d8:	7afa      	ldrb	r2, [r7, #11]
 800e2da:	4611      	mov	r1, r2
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	4798      	blx	r3
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e2e4:	7dfb      	ldrb	r3, [r7, #23]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
 800e2ec:	e000      	b.n	800e2f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3718      	adds	r7, #24
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2200      	movs	r2, #0
 800e31a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e328:	2303      	movs	r3, #3
 800e32a:	e02f      	b.n	800e38c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00f      	beq.n	800e356 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d009      	beq.n	800e356 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	6852      	ldr	r2, [r2, #4]
 800e34e:	b2d2      	uxtb	r2, r2
 800e350:	4611      	mov	r1, r2
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e356:	2340      	movs	r3, #64	; 0x40
 800e358:	2200      	movs	r2, #0
 800e35a:	2100      	movs	r1, #0
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f001 fbe3 	bl	800fb28 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2201      	movs	r2, #1
 800e366:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2240      	movs	r2, #64	; 0x40
 800e36e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e372:	2340      	movs	r3, #64	; 0x40
 800e374:	2200      	movs	r2, #0
 800e376:	2180      	movs	r1, #128	; 0x80
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f001 fbd5 	bl	800fb28 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2201      	movs	r2, #1
 800e382:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2240      	movs	r2, #64	; 0x40
 800e388:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	460b      	mov	r3, r1
 800e39e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	78fa      	ldrb	r2, [r7, #3]
 800e3a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e3a6:	2300      	movs	r3, #0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	370c      	adds	r7, #12
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	4770      	bx	lr

0800e3b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2204      	movs	r2, #4
 800e3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d106      	bne.n	800e402 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e422:	2303      	movs	r3, #3
 800e424:	e012      	b.n	800e44c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d10b      	bne.n	800e44a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e438:	69db      	ldr	r3, [r3, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d005      	beq.n	800e44a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e444:	69db      	ldr	r3, [r3, #28]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e46a:	2303      	movs	r3, #3
 800e46c:	e014      	b.n	800e498 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e474:	b2db      	uxtb	r3, r3
 800e476:	2b03      	cmp	r3, #3
 800e478:	d10d      	bne.n	800e496 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e480:	6a1b      	ldr	r3, [r3, #32]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d007      	beq.n	800e496 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e48c:	6a1b      	ldr	r3, [r3, #32]
 800e48e:	78fa      	ldrb	r2, [r7, #3]
 800e490:	4611      	mov	r1, r2
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d101      	bne.n	800e4ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e4b6:	2303      	movs	r3, #3
 800e4b8:	e014      	b.n	800e4e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b03      	cmp	r3, #3
 800e4c4:	d10d      	bne.n	800e4e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d007      	beq.n	800e4e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4da:	78fa      	ldrb	r2, [r7, #3]
 800e4dc:	4611      	mov	r1, r2
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b082      	sub	sp, #8
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2201      	movs	r2, #1
 800e50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d009      	beq.n	800e530 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	6852      	ldr	r2, [r2, #4]
 800e528:	b2d2      	uxtb	r2, r2
 800e52a:	4611      	mov	r1, r2
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	4798      	blx	r3
  }

  return USBD_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b087      	sub	sp, #28
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	3301      	adds	r3, #1
 800e550:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e558:	8a3b      	ldrh	r3, [r7, #16]
 800e55a:	021b      	lsls	r3, r3, #8
 800e55c:	b21a      	sxth	r2, r3
 800e55e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e562:	4313      	orrs	r3, r2
 800e564:	b21b      	sxth	r3, r3
 800e566:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e568:	89fb      	ldrh	r3, [r7, #14]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	371c      	adds	r7, #28
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
	...

0800e578 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e582:	2300      	movs	r3, #0
 800e584:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e58e:	2b40      	cmp	r3, #64	; 0x40
 800e590:	d005      	beq.n	800e59e <USBD_StdDevReq+0x26>
 800e592:	2b40      	cmp	r3, #64	; 0x40
 800e594:	d853      	bhi.n	800e63e <USBD_StdDevReq+0xc6>
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00b      	beq.n	800e5b2 <USBD_StdDevReq+0x3a>
 800e59a:	2b20      	cmp	r3, #32
 800e59c:	d14f      	bne.n	800e63e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	4798      	blx	r3
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b0:	e04a      	b.n	800e648 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	2b09      	cmp	r3, #9
 800e5b8:	d83b      	bhi.n	800e632 <USBD_StdDevReq+0xba>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <USBD_StdDevReq+0x48>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e615 	.word	0x0800e615
 800e5c4:	0800e629 	.word	0x0800e629
 800e5c8:	0800e633 	.word	0x0800e633
 800e5cc:	0800e61f 	.word	0x0800e61f
 800e5d0:	0800e633 	.word	0x0800e633
 800e5d4:	0800e5f3 	.word	0x0800e5f3
 800e5d8:	0800e5e9 	.word	0x0800e5e9
 800e5dc:	0800e633 	.word	0x0800e633
 800e5e0:	0800e60b 	.word	0x0800e60b
 800e5e4:	0800e5fd 	.word	0x0800e5fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f9de 	bl	800e9ac <USBD_GetDescriptor>
          break;
 800e5f0:	e024      	b.n	800e63c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fb6d 	bl	800ecd4 <USBD_SetAddress>
          break;
 800e5fa:	e01f      	b.n	800e63c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e5fc:	6839      	ldr	r1, [r7, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 fbac 	bl	800ed5c <USBD_SetConfig>
 800e604:	4603      	mov	r3, r0
 800e606:	73fb      	strb	r3, [r7, #15]
          break;
 800e608:	e018      	b.n	800e63c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 fc4b 	bl	800eea8 <USBD_GetConfig>
          break;
 800e612:	e013      	b.n	800e63c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e614:	6839      	ldr	r1, [r7, #0]
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 fc7c 	bl	800ef14 <USBD_GetStatus>
          break;
 800e61c:	e00e      	b.n	800e63c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fcab 	bl	800ef7c <USBD_SetFeature>
          break;
 800e626:	e009      	b.n	800e63c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e628:	6839      	ldr	r1, [r7, #0]
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fcba 	bl	800efa4 <USBD_ClrFeature>
          break;
 800e630:	e004      	b.n	800e63c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e632:	6839      	ldr	r1, [r7, #0]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 fd11 	bl	800f05c <USBD_CtlError>
          break;
 800e63a:	bf00      	nop
      }
      break;
 800e63c:	e004      	b.n	800e648 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fd0b 	bl	800f05c <USBD_CtlError>
      break;
 800e646:	bf00      	nop
  }

  return ret;
 800e648:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop

0800e654 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e66a:	2b40      	cmp	r3, #64	; 0x40
 800e66c:	d005      	beq.n	800e67a <USBD_StdItfReq+0x26>
 800e66e:	2b40      	cmp	r3, #64	; 0x40
 800e670:	d82f      	bhi.n	800e6d2 <USBD_StdItfReq+0x7e>
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <USBD_StdItfReq+0x26>
 800e676:	2b20      	cmp	r3, #32
 800e678:	d12b      	bne.n	800e6d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e680:	b2db      	uxtb	r3, r3
 800e682:	3b01      	subs	r3, #1
 800e684:	2b02      	cmp	r3, #2
 800e686:	d81d      	bhi.n	800e6c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	889b      	ldrh	r3, [r3, #4]
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d813      	bhi.n	800e6ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	6839      	ldr	r1, [r7, #0]
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	4798      	blx	r3
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	88db      	ldrh	r3, [r3, #6]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d110      	bne.n	800e6ce <USBD_StdItfReq+0x7a>
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10d      	bne.n	800e6ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fd9d 	bl	800f1f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e6b8:	e009      	b.n	800e6ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fccd 	bl	800f05c <USBD_CtlError>
          break;
 800e6c2:	e004      	b.n	800e6ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 fcc8 	bl	800f05c <USBD_CtlError>
          break;
 800e6cc:	e000      	b.n	800e6d0 <USBD_StdItfReq+0x7c>
          break;
 800e6ce:	bf00      	nop
      }
      break;
 800e6d0:	e004      	b.n	800e6dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 fcc1 	bl	800f05c <USBD_CtlError>
      break;
 800e6da:	bf00      	nop
  }

  return ret;
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b084      	sub	sp, #16
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	889b      	ldrh	r3, [r3, #4]
 800e6f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e702:	2b40      	cmp	r3, #64	; 0x40
 800e704:	d007      	beq.n	800e716 <USBD_StdEPReq+0x30>
 800e706:	2b40      	cmp	r3, #64	; 0x40
 800e708:	f200 8145 	bhi.w	800e996 <USBD_StdEPReq+0x2b0>
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00c      	beq.n	800e72a <USBD_StdEPReq+0x44>
 800e710:	2b20      	cmp	r3, #32
 800e712:	f040 8140 	bne.w	800e996 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	4798      	blx	r3
 800e724:	4603      	mov	r3, r0
 800e726:	73fb      	strb	r3, [r7, #15]
      break;
 800e728:	e13a      	b.n	800e9a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	785b      	ldrb	r3, [r3, #1]
 800e72e:	2b03      	cmp	r3, #3
 800e730:	d007      	beq.n	800e742 <USBD_StdEPReq+0x5c>
 800e732:	2b03      	cmp	r3, #3
 800e734:	f300 8129 	bgt.w	800e98a <USBD_StdEPReq+0x2a4>
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d07f      	beq.n	800e83c <USBD_StdEPReq+0x156>
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d03c      	beq.n	800e7ba <USBD_StdEPReq+0xd4>
 800e740:	e123      	b.n	800e98a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d002      	beq.n	800e754 <USBD_StdEPReq+0x6e>
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d016      	beq.n	800e780 <USBD_StdEPReq+0x9a>
 800e752:	e02c      	b.n	800e7ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e754:	7bbb      	ldrb	r3, [r7, #14]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00d      	beq.n	800e776 <USBD_StdEPReq+0x90>
 800e75a:	7bbb      	ldrb	r3, [r7, #14]
 800e75c:	2b80      	cmp	r3, #128	; 0x80
 800e75e:	d00a      	beq.n	800e776 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e760:	7bbb      	ldrb	r3, [r7, #14]
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f001 fa53 	bl	800fc10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e76a:	2180      	movs	r1, #128	; 0x80
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f001 fa4f 	bl	800fc10 <USBD_LL_StallEP>
 800e772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e774:	e020      	b.n	800e7b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e776:	6839      	ldr	r1, [r7, #0]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 fc6f 	bl	800f05c <USBD_CtlError>
              break;
 800e77e:	e01b      	b.n	800e7b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	885b      	ldrh	r3, [r3, #2]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10e      	bne.n	800e7a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e788:	7bbb      	ldrb	r3, [r7, #14]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <USBD_StdEPReq+0xc0>
 800e78e:	7bbb      	ldrb	r3, [r7, #14]
 800e790:	2b80      	cmp	r3, #128	; 0x80
 800e792:	d008      	beq.n	800e7a6 <USBD_StdEPReq+0xc0>
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	88db      	ldrh	r3, [r3, #6]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d104      	bne.n	800e7a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e79c:	7bbb      	ldrb	r3, [r7, #14]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f001 fa35 	bl	800fc10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 fd23 	bl	800f1f2 <USBD_CtlSendStatus>

              break;
 800e7ac:	e004      	b.n	800e7b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fc53 	bl	800f05c <USBD_CtlError>
              break;
 800e7b6:	bf00      	nop
          }
          break;
 800e7b8:	e0ec      	b.n	800e994 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d002      	beq.n	800e7cc <USBD_StdEPReq+0xe6>
 800e7c6:	2b03      	cmp	r3, #3
 800e7c8:	d016      	beq.n	800e7f8 <USBD_StdEPReq+0x112>
 800e7ca:	e030      	b.n	800e82e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7cc:	7bbb      	ldrb	r3, [r7, #14]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00d      	beq.n	800e7ee <USBD_StdEPReq+0x108>
 800e7d2:	7bbb      	ldrb	r3, [r7, #14]
 800e7d4:	2b80      	cmp	r3, #128	; 0x80
 800e7d6:	d00a      	beq.n	800e7ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7d8:	7bbb      	ldrb	r3, [r7, #14]
 800e7da:	4619      	mov	r1, r3
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 fa17 	bl	800fc10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7e2:	2180      	movs	r1, #128	; 0x80
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f001 fa13 	bl	800fc10 <USBD_LL_StallEP>
 800e7ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7ec:	e025      	b.n	800e83a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e7ee:	6839      	ldr	r1, [r7, #0]
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 fc33 	bl	800f05c <USBD_CtlError>
              break;
 800e7f6:	e020      	b.n	800e83a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	885b      	ldrh	r3, [r3, #2]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d11b      	bne.n	800e838 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e800:	7bbb      	ldrb	r3, [r7, #14]
 800e802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e806:	2b00      	cmp	r3, #0
 800e808:	d004      	beq.n	800e814 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e80a:	7bbb      	ldrb	r3, [r7, #14]
 800e80c:	4619      	mov	r1, r3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f001 fa34 	bl	800fc7c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fcec 	bl	800f1f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	4798      	blx	r3
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e82c:	e004      	b.n	800e838 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 fc13 	bl	800f05c <USBD_CtlError>
              break;
 800e836:	e000      	b.n	800e83a <USBD_StdEPReq+0x154>
              break;
 800e838:	bf00      	nop
          }
          break;
 800e83a:	e0ab      	b.n	800e994 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e842:	b2db      	uxtb	r3, r3
 800e844:	2b02      	cmp	r3, #2
 800e846:	d002      	beq.n	800e84e <USBD_StdEPReq+0x168>
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d032      	beq.n	800e8b2 <USBD_StdEPReq+0x1cc>
 800e84c:	e097      	b.n	800e97e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e84e:	7bbb      	ldrb	r3, [r7, #14]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d007      	beq.n	800e864 <USBD_StdEPReq+0x17e>
 800e854:	7bbb      	ldrb	r3, [r7, #14]
 800e856:	2b80      	cmp	r3, #128	; 0x80
 800e858:	d004      	beq.n	800e864 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 fbfd 	bl	800f05c <USBD_CtlError>
                break;
 800e862:	e091      	b.n	800e988 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	da0b      	bge.n	800e884 <USBD_StdEPReq+0x19e>
 800e86c:	7bbb      	ldrb	r3, [r7, #14]
 800e86e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	3310      	adds	r3, #16
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	4413      	add	r3, r2
 800e880:	3304      	adds	r3, #4
 800e882:	e00b      	b.n	800e89c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e884:	7bbb      	ldrb	r3, [r7, #14]
 800e886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e88a:	4613      	mov	r3, r2
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	4413      	add	r3, r2
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	4413      	add	r3, r2
 800e89a:	3304      	adds	r3, #4
 800e89c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 fc47 	bl	800f13e <USBD_CtlSendData>
              break;
 800e8b0:	e06a      	b.n	800e988 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e8b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	da11      	bge.n	800e8de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e8ba:	7bbb      	ldrb	r3, [r7, #14]
 800e8bc:	f003 020f 	and.w	r2, r3, #15
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4413      	add	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	440b      	add	r3, r1
 800e8cc:	3324      	adds	r3, #36	; 0x24
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d117      	bne.n	800e904 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e8d4:	6839      	ldr	r1, [r7, #0]
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fbc0 	bl	800f05c <USBD_CtlError>
                  break;
 800e8dc:	e054      	b.n	800e988 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
 800e8e0:	f003 020f 	and.w	r2, r3, #15
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	440b      	add	r3, r1
 800e8f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d104      	bne.n	800e904 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 fbad 	bl	800f05c <USBD_CtlError>
                  break;
 800e902:	e041      	b.n	800e988 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	da0b      	bge.n	800e924 <USBD_StdEPReq+0x23e>
 800e90c:	7bbb      	ldrb	r3, [r7, #14]
 800e90e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e912:	4613      	mov	r3, r2
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	4413      	add	r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	3310      	adds	r3, #16
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	4413      	add	r3, r2
 800e920:	3304      	adds	r3, #4
 800e922:	e00b      	b.n	800e93c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e924:	7bbb      	ldrb	r3, [r7, #14]
 800e926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e92a:	4613      	mov	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	4413      	add	r3, r2
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	4413      	add	r3, r2
 800e93a:	3304      	adds	r3, #4
 800e93c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e93e:	7bbb      	ldrb	r3, [r7, #14]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <USBD_StdEPReq+0x264>
 800e944:	7bbb      	ldrb	r3, [r7, #14]
 800e946:	2b80      	cmp	r3, #128	; 0x80
 800e948:	d103      	bne.n	800e952 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	e00e      	b.n	800e970 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e952:	7bbb      	ldrb	r3, [r7, #14]
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f001 f9c6 	bl	800fce8 <USBD_LL_IsStallEP>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2201      	movs	r2, #1
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	e002      	b.n	800e970 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	2200      	movs	r2, #0
 800e96e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	2202      	movs	r2, #2
 800e974:	4619      	mov	r1, r3
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 fbe1 	bl	800f13e <USBD_CtlSendData>
              break;
 800e97c:	e004      	b.n	800e988 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e97e:	6839      	ldr	r1, [r7, #0]
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 fb6b 	bl	800f05c <USBD_CtlError>
              break;
 800e986:	bf00      	nop
          }
          break;
 800e988:	e004      	b.n	800e994 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e98a:	6839      	ldr	r1, [r7, #0]
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fb65 	bl	800f05c <USBD_CtlError>
          break;
 800e992:	bf00      	nop
      }
      break;
 800e994:	e004      	b.n	800e9a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 fb5f 	bl	800f05c <USBD_CtlError>
      break;
 800e99e:	bf00      	nop
  }

  return ret;
 800e9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
	...

0800e9ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	885b      	ldrh	r3, [r3, #2]
 800e9c6:	0a1b      	lsrs	r3, r3, #8
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	2b0e      	cmp	r3, #14
 800e9ce:	f200 8152 	bhi.w	800ec76 <USBD_GetDescriptor+0x2ca>
 800e9d2:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <USBD_GetDescriptor+0x2c>)
 800e9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d8:	0800ea49 	.word	0x0800ea49
 800e9dc:	0800ea61 	.word	0x0800ea61
 800e9e0:	0800eaa1 	.word	0x0800eaa1
 800e9e4:	0800ec77 	.word	0x0800ec77
 800e9e8:	0800ec77 	.word	0x0800ec77
 800e9ec:	0800ec17 	.word	0x0800ec17
 800e9f0:	0800ec43 	.word	0x0800ec43
 800e9f4:	0800ec77 	.word	0x0800ec77
 800e9f8:	0800ec77 	.word	0x0800ec77
 800e9fc:	0800ec77 	.word	0x0800ec77
 800ea00:	0800ec77 	.word	0x0800ec77
 800ea04:	0800ec77 	.word	0x0800ec77
 800ea08:	0800ec77 	.word	0x0800ec77
 800ea0c:	0800ec77 	.word	0x0800ec77
 800ea10:	0800ea15 	.word	0x0800ea15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea1a:	69db      	ldr	r3, [r3, #28]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00b      	beq.n	800ea38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea26:	69db      	ldr	r3, [r3, #28]
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	7c12      	ldrb	r2, [r2, #16]
 800ea2c:	f107 0108 	add.w	r1, r7, #8
 800ea30:	4610      	mov	r0, r2
 800ea32:	4798      	blx	r3
 800ea34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea36:	e126      	b.n	800ec86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea38:	6839      	ldr	r1, [r7, #0]
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 fb0e 	bl	800f05c <USBD_CtlError>
        err++;
 800ea40:	7afb      	ldrb	r3, [r7, #11]
 800ea42:	3301      	adds	r3, #1
 800ea44:	72fb      	strb	r3, [r7, #11]
      break;
 800ea46:	e11e      	b.n	800ec86 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	7c12      	ldrb	r2, [r2, #16]
 800ea54:	f107 0108 	add.w	r1, r7, #8
 800ea58:	4610      	mov	r0, r2
 800ea5a:	4798      	blx	r3
 800ea5c:	60f8      	str	r0, [r7, #12]
      break;
 800ea5e:	e112      	b.n	800ec86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	7c1b      	ldrb	r3, [r3, #16]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d10d      	bne.n	800ea84 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea70:	f107 0208 	add.w	r2, r7, #8
 800ea74:	4610      	mov	r0, r2
 800ea76:	4798      	blx	r3
 800ea78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	2202      	movs	r2, #2
 800ea80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea82:	e100      	b.n	800ec86 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8c:	f107 0208 	add.w	r2, r7, #8
 800ea90:	4610      	mov	r0, r2
 800ea92:	4798      	blx	r3
 800ea94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	2202      	movs	r2, #2
 800ea9c:	701a      	strb	r2, [r3, #0]
      break;
 800ea9e:	e0f2      	b.n	800ec86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	885b      	ldrh	r3, [r3, #2]
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b05      	cmp	r3, #5
 800eaa8:	f200 80ac 	bhi.w	800ec04 <USBD_GetDescriptor+0x258>
 800eaac:	a201      	add	r2, pc, #4	; (adr r2, 800eab4 <USBD_GetDescriptor+0x108>)
 800eaae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab2:	bf00      	nop
 800eab4:	0800eacd 	.word	0x0800eacd
 800eab8:	0800eb01 	.word	0x0800eb01
 800eabc:	0800eb35 	.word	0x0800eb35
 800eac0:	0800eb69 	.word	0x0800eb69
 800eac4:	0800eb9d 	.word	0x0800eb9d
 800eac8:	0800ebd1 	.word	0x0800ebd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d00b      	beq.n	800eaf0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	7c12      	ldrb	r2, [r2, #16]
 800eae4:	f107 0108 	add.w	r1, r7, #8
 800eae8:	4610      	mov	r0, r2
 800eaea:	4798      	blx	r3
 800eaec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eaee:	e091      	b.n	800ec14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fab2 	bl	800f05c <USBD_CtlError>
            err++;
 800eaf8:	7afb      	ldrb	r3, [r7, #11]
 800eafa:	3301      	adds	r3, #1
 800eafc:	72fb      	strb	r3, [r7, #11]
          break;
 800eafe:	e089      	b.n	800ec14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00b      	beq.n	800eb24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	7c12      	ldrb	r2, [r2, #16]
 800eb18:	f107 0108 	add.w	r1, r7, #8
 800eb1c:	4610      	mov	r0, r2
 800eb1e:	4798      	blx	r3
 800eb20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb22:	e077      	b.n	800ec14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fa98 	bl	800f05c <USBD_CtlError>
            err++;
 800eb2c:	7afb      	ldrb	r3, [r7, #11]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	72fb      	strb	r3, [r7, #11]
          break;
 800eb32:	e06f      	b.n	800ec14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00b      	beq.n	800eb58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	7c12      	ldrb	r2, [r2, #16]
 800eb4c:	f107 0108 	add.w	r1, r7, #8
 800eb50:	4610      	mov	r0, r2
 800eb52:	4798      	blx	r3
 800eb54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb56:	e05d      	b.n	800ec14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 fa7e 	bl	800f05c <USBD_CtlError>
            err++;
 800eb60:	7afb      	ldrb	r3, [r7, #11]
 800eb62:	3301      	adds	r3, #1
 800eb64:	72fb      	strb	r3, [r7, #11]
          break;
 800eb66:	e055      	b.n	800ec14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00b      	beq.n	800eb8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	7c12      	ldrb	r2, [r2, #16]
 800eb80:	f107 0108 	add.w	r1, r7, #8
 800eb84:	4610      	mov	r0, r2
 800eb86:	4798      	blx	r3
 800eb88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb8a:	e043      	b.n	800ec14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb8c:	6839      	ldr	r1, [r7, #0]
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 fa64 	bl	800f05c <USBD_CtlError>
            err++;
 800eb94:	7afb      	ldrb	r3, [r7, #11]
 800eb96:	3301      	adds	r3, #1
 800eb98:	72fb      	strb	r3, [r7, #11]
          break;
 800eb9a:	e03b      	b.n	800ec14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eba2:	695b      	ldr	r3, [r3, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00b      	beq.n	800ebc0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebae:	695b      	ldr	r3, [r3, #20]
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	7c12      	ldrb	r2, [r2, #16]
 800ebb4:	f107 0108 	add.w	r1, r7, #8
 800ebb8:	4610      	mov	r0, r2
 800ebba:	4798      	blx	r3
 800ebbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebbe:	e029      	b.n	800ec14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fa4a 	bl	800f05c <USBD_CtlError>
            err++;
 800ebc8:	7afb      	ldrb	r3, [r7, #11]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	72fb      	strb	r3, [r7, #11]
          break;
 800ebce:	e021      	b.n	800ec14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebd6:	699b      	ldr	r3, [r3, #24]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00b      	beq.n	800ebf4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebe2:	699b      	ldr	r3, [r3, #24]
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	7c12      	ldrb	r2, [r2, #16]
 800ebe8:	f107 0108 	add.w	r1, r7, #8
 800ebec:	4610      	mov	r0, r2
 800ebee:	4798      	blx	r3
 800ebf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebf2:	e00f      	b.n	800ec14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebf4:	6839      	ldr	r1, [r7, #0]
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 fa30 	bl	800f05c <USBD_CtlError>
            err++;
 800ebfc:	7afb      	ldrb	r3, [r7, #11]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	72fb      	strb	r3, [r7, #11]
          break;
 800ec02:	e007      	b.n	800ec14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 fa28 	bl	800f05c <USBD_CtlError>
          err++;
 800ec0c:	7afb      	ldrb	r3, [r7, #11]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ec12:	bf00      	nop
      }
      break;
 800ec14:	e037      	b.n	800ec86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	7c1b      	ldrb	r3, [r3, #16]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d109      	bne.n	800ec32 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec26:	f107 0208 	add.w	r2, r7, #8
 800ec2a:	4610      	mov	r0, r2
 800ec2c:	4798      	blx	r3
 800ec2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec30:	e029      	b.n	800ec86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec32:	6839      	ldr	r1, [r7, #0]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fa11 	bl	800f05c <USBD_CtlError>
        err++;
 800ec3a:	7afb      	ldrb	r3, [r7, #11]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ec40:	e021      	b.n	800ec86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	7c1b      	ldrb	r3, [r3, #16]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10d      	bne.n	800ec66 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec52:	f107 0208 	add.w	r2, r7, #8
 800ec56:	4610      	mov	r0, r2
 800ec58:	4798      	blx	r3
 800ec5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	2207      	movs	r2, #7
 800ec62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec64:	e00f      	b.n	800ec86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec66:	6839      	ldr	r1, [r7, #0]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 f9f7 	bl	800f05c <USBD_CtlError>
        err++;
 800ec6e:	7afb      	ldrb	r3, [r7, #11]
 800ec70:	3301      	adds	r3, #1
 800ec72:	72fb      	strb	r3, [r7, #11]
      break;
 800ec74:	e007      	b.n	800ec86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f9ef 	bl	800f05c <USBD_CtlError>
      err++;
 800ec7e:	7afb      	ldrb	r3, [r7, #11]
 800ec80:	3301      	adds	r3, #1
 800ec82:	72fb      	strb	r3, [r7, #11]
      break;
 800ec84:	bf00      	nop
  }

  if (err != 0U)
 800ec86:	7afb      	ldrb	r3, [r7, #11]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d11e      	bne.n	800ecca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	88db      	ldrh	r3, [r3, #6]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d016      	beq.n	800ecc2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ec94:	893b      	ldrh	r3, [r7, #8]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00e      	beq.n	800ecb8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	88da      	ldrh	r2, [r3, #6]
 800ec9e:	893b      	ldrh	r3, [r7, #8]
 800eca0:	4293      	cmp	r3, r2
 800eca2:	bf28      	it	cs
 800eca4:	4613      	movcs	r3, r2
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecaa:	893b      	ldrh	r3, [r7, #8]
 800ecac:	461a      	mov	r2, r3
 800ecae:	68f9      	ldr	r1, [r7, #12]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fa44 	bl	800f13e <USBD_CtlSendData>
 800ecb6:	e009      	b.n	800eccc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ecb8:	6839      	ldr	r1, [r7, #0]
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f9ce 	bl	800f05c <USBD_CtlError>
 800ecc0:	e004      	b.n	800eccc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 fa95 	bl	800f1f2 <USBD_CtlSendStatus>
 800ecc8:	e000      	b.n	800eccc <USBD_GetDescriptor+0x320>
    return;
 800ecca:	bf00      	nop
  }
}
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop

0800ecd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	889b      	ldrh	r3, [r3, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d131      	bne.n	800ed4a <USBD_SetAddress+0x76>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	88db      	ldrh	r3, [r3, #6]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d12d      	bne.n	800ed4a <USBD_SetAddress+0x76>
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	885b      	ldrh	r3, [r3, #2]
 800ecf2:	2b7f      	cmp	r3, #127	; 0x7f
 800ecf4:	d829      	bhi.n	800ed4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	885b      	ldrh	r3, [r3, #2]
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	2b03      	cmp	r3, #3
 800ed0c:	d104      	bne.n	800ed18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f9a3 	bl	800f05c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed16:	e01d      	b.n	800ed54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	7bfa      	ldrb	r2, [r7, #15]
 800ed1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed20:	7bfb      	ldrb	r3, [r7, #15]
 800ed22:	4619      	mov	r1, r3
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f001 f80b 	bl	800fd40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fa61 	bl	800f1f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d004      	beq.n	800ed40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2202      	movs	r2, #2
 800ed3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed3e:	e009      	b.n	800ed54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed48:	e004      	b.n	800ed54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed4a:	6839      	ldr	r1, [r7, #0]
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 f985 	bl	800f05c <USBD_CtlError>
  }
}
 800ed52:	bf00      	nop
 800ed54:	bf00      	nop
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	885b      	ldrh	r3, [r3, #2]
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	4b4c      	ldr	r3, [pc, #304]	; (800eea4 <USBD_SetConfig+0x148>)
 800ed72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed74:	4b4b      	ldr	r3, [pc, #300]	; (800eea4 <USBD_SetConfig+0x148>)
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d905      	bls.n	800ed88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 f96c 	bl	800f05c <USBD_CtlError>
    return USBD_FAIL;
 800ed84:	2303      	movs	r3, #3
 800ed86:	e088      	b.n	800ee9a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d002      	beq.n	800ed9a <USBD_SetConfig+0x3e>
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	d025      	beq.n	800ede4 <USBD_SetConfig+0x88>
 800ed98:	e071      	b.n	800ee7e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed9a:	4b42      	ldr	r3, [pc, #264]	; (800eea4 <USBD_SetConfig+0x148>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d01c      	beq.n	800eddc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800eda2:	4b40      	ldr	r3, [pc, #256]	; (800eea4 <USBD_SetConfig+0x148>)
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	461a      	mov	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edac:	4b3d      	ldr	r3, [pc, #244]	; (800eea4 <USBD_SetConfig+0x148>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	4619      	mov	r1, r3
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff f91e 	bl	800dff4 <USBD_SetClassConfig>
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d004      	beq.n	800edcc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800edc2:	6839      	ldr	r1, [r7, #0]
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f949 	bl	800f05c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edca:	e065      	b.n	800ee98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fa10 	bl	800f1f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2203      	movs	r2, #3
 800edd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800edda:	e05d      	b.n	800ee98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fa08 	bl	800f1f2 <USBD_CtlSendStatus>
      break;
 800ede2:	e059      	b.n	800ee98 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ede4:	4b2f      	ldr	r3, [pc, #188]	; (800eea4 <USBD_SetConfig+0x148>)
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d112      	bne.n	800ee12 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2202      	movs	r2, #2
 800edf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800edf4:	4b2b      	ldr	r3, [pc, #172]	; (800eea4 <USBD_SetConfig+0x148>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	461a      	mov	r2, r3
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edfe:	4b29      	ldr	r3, [pc, #164]	; (800eea4 <USBD_SetConfig+0x148>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	4619      	mov	r1, r3
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7ff f911 	bl	800e02c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f9f1 	bl	800f1f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee10:	e042      	b.n	800ee98 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ee12:	4b24      	ldr	r3, [pc, #144]	; (800eea4 <USBD_SetConfig+0x148>)
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d02a      	beq.n	800ee76 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	4619      	mov	r1, r3
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7ff f8ff 	bl	800e02c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee2e:	4b1d      	ldr	r3, [pc, #116]	; (800eea4 <USBD_SetConfig+0x148>)
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	461a      	mov	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee38:	4b1a      	ldr	r3, [pc, #104]	; (800eea4 <USBD_SetConfig+0x148>)
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7ff f8d8 	bl	800dff4 <USBD_SetClassConfig>
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00f      	beq.n	800ee6e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 f903 	bl	800f05c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff f8e4 	bl	800e02c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2202      	movs	r2, #2
 800ee68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ee6c:	e014      	b.n	800ee98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f9bf 	bl	800f1f2 <USBD_CtlSendStatus>
      break;
 800ee74:	e010      	b.n	800ee98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 f9bb 	bl	800f1f2 <USBD_CtlSendStatus>
      break;
 800ee7c:	e00c      	b.n	800ee98 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 f8eb 	bl	800f05c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee86:	4b07      	ldr	r3, [pc, #28]	; (800eea4 <USBD_SetConfig+0x148>)
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7ff f8cd 	bl	800e02c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee92:	2303      	movs	r3, #3
 800ee94:	73fb      	strb	r3, [r7, #15]
      break;
 800ee96:	bf00      	nop
  }

  return ret;
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	20000dd4 	.word	0x20000dd4

0800eea8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	88db      	ldrh	r3, [r3, #6]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d004      	beq.n	800eec4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f8cd 	bl	800f05c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eec2:	e023      	b.n	800ef0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b02      	cmp	r3, #2
 800eece:	dc02      	bgt.n	800eed6 <USBD_GetConfig+0x2e>
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	dc03      	bgt.n	800eedc <USBD_GetConfig+0x34>
 800eed4:	e015      	b.n	800ef02 <USBD_GetConfig+0x5a>
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d00b      	beq.n	800eef2 <USBD_GetConfig+0x4a>
 800eeda:	e012      	b.n	800ef02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3308      	adds	r3, #8
 800eee6:	2201      	movs	r2, #1
 800eee8:	4619      	mov	r1, r3
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 f927 	bl	800f13e <USBD_CtlSendData>
        break;
 800eef0:	e00c      	b.n	800ef0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	3304      	adds	r3, #4
 800eef6:	2201      	movs	r2, #1
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f91f 	bl	800f13e <USBD_CtlSendData>
        break;
 800ef00:	e004      	b.n	800ef0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef02:	6839      	ldr	r1, [r7, #0]
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f8a9 	bl	800f05c <USBD_CtlError>
        break;
 800ef0a:	bf00      	nop
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	3b01      	subs	r3, #1
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d81e      	bhi.n	800ef6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	88db      	ldrh	r3, [r3, #6]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d004      	beq.n	800ef3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 f890 	bl	800f05c <USBD_CtlError>
        break;
 800ef3c:	e01a      	b.n	800ef74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d005      	beq.n	800ef5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	f043 0202 	orr.w	r2, r3, #2
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	330c      	adds	r3, #12
 800ef5e:	2202      	movs	r2, #2
 800ef60:	4619      	mov	r1, r3
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f8eb 	bl	800f13e <USBD_CtlSendData>
      break;
 800ef68:	e004      	b.n	800ef74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 f875 	bl	800f05c <USBD_CtlError>
      break;
 800ef72:	bf00      	nop
  }
}
 800ef74:	bf00      	nop
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	885b      	ldrh	r3, [r3, #2]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d106      	bne.n	800ef9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2201      	movs	r2, #1
 800ef92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 f92b 	bl	800f1f2 <USBD_CtlSendStatus>
  }
}
 800ef9c:	bf00      	nop
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	3b01      	subs	r3, #1
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d80b      	bhi.n	800efd4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	885b      	ldrh	r3, [r3, #2]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d10c      	bne.n	800efde <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f910 	bl	800f1f2 <USBD_CtlSendStatus>
      }
      break;
 800efd2:	e004      	b.n	800efde <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f840 	bl	800f05c <USBD_CtlError>
      break;
 800efdc:	e000      	b.n	800efe0 <USBD_ClrFeature+0x3c>
      break;
 800efde:	bf00      	nop
  }
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	781a      	ldrb	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3301      	adds	r3, #1
 800f002:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	3301      	adds	r3, #1
 800f010:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7ff fa91 	bl	800e53a <SWAPBYTE>
 800f018:	4603      	mov	r3, r0
 800f01a:	461a      	mov	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	3301      	adds	r3, #1
 800f024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	3301      	adds	r3, #1
 800f02a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f7ff fa84 	bl	800e53a <SWAPBYTE>
 800f032:	4603      	mov	r3, r0
 800f034:	461a      	mov	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3301      	adds	r3, #1
 800f03e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	3301      	adds	r3, #1
 800f044:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f7ff fa77 	bl	800e53a <SWAPBYTE>
 800f04c:	4603      	mov	r3, r0
 800f04e:	461a      	mov	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	80da      	strh	r2, [r3, #6]
}
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f066:	2180      	movs	r1, #128	; 0x80
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 fdd1 	bl	800fc10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f06e:	2100      	movs	r1, #0
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fdcd 	bl	800fc10 <USBD_LL_StallEP>
}
 800f076:	bf00      	nop
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b086      	sub	sp, #24
 800f082:	af00      	add	r7, sp, #0
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f08a:	2300      	movs	r3, #0
 800f08c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d036      	beq.n	800f102 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f098:	6938      	ldr	r0, [r7, #16]
 800f09a:	f000 f836 	bl	800f10a <USBD_GetLen>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f0ac:	7dfb      	ldrb	r3, [r7, #23]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	7812      	ldrb	r2, [r2, #0]
 800f0b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0b8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f0be:	7dfb      	ldrb	r3, [r7, #23]
 800f0c0:	68ba      	ldr	r2, [r7, #8]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	2203      	movs	r2, #3
 800f0c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f0ce:	e013      	b.n	800f0f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	68ba      	ldr	r2, [r7, #8]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	7812      	ldrb	r2, [r2, #0]
 800f0da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	613b      	str	r3, [r7, #16]
    idx++;
 800f0e2:	7dfb      	ldrb	r3, [r7, #23]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ea:	68ba      	ldr	r2, [r7, #8]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	701a      	strb	r2, [r3, #0]
    idx++;
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1e7      	bne.n	800f0d0 <USBD_GetString+0x52>
 800f100:	e000      	b.n	800f104 <USBD_GetString+0x86>
    return;
 800f102:	bf00      	nop
  }
}
 800f104:	3718      	adds	r7, #24
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f10a:	b480      	push	{r7}
 800f10c:	b085      	sub	sp, #20
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f112:	2300      	movs	r3, #0
 800f114:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f11a:	e005      	b.n	800f128 <USBD_GetLen+0x1e>
  {
    len++;
 800f11c:	7bfb      	ldrb	r3, [r7, #15]
 800f11e:	3301      	adds	r3, #1
 800f120:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	3301      	adds	r3, #1
 800f126:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1f5      	bne.n	800f11c <USBD_GetLen+0x12>
  }

  return len;
 800f130:	7bfb      	ldrb	r3, [r7, #15]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3714      	adds	r7, #20
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	60f8      	str	r0, [r7, #12]
 800f146:	60b9      	str	r1, [r7, #8]
 800f148:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2202      	movs	r2, #2
 800f14e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68ba      	ldr	r2, [r7, #8]
 800f162:	2100      	movs	r1, #0
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f000 fe21 	bl	800fdac <USBD_LL_Transmit>

  return USBD_OK;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	2100      	movs	r1, #0
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 fe10 	bl	800fdac <USBD_LL_Transmit>

  return USBD_OK;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b084      	sub	sp, #16
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	60b9      	str	r1, [r7, #8]
 800f1a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2203      	movs	r2, #3
 800f1a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	2100      	movs	r1, #0
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f000 fe2b 	bl	800fe1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f000 fe1a 	bl	800fe1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3710      	adds	r7, #16
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b082      	sub	sp, #8
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2204      	movs	r2, #4
 800f1fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f202:	2300      	movs	r3, #0
 800f204:	2200      	movs	r2, #0
 800f206:	2100      	movs	r1, #0
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fdcf 	bl	800fdac <USBD_LL_Transmit>

  return USBD_OK;
 800f20e:	2300      	movs	r3, #0
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2205      	movs	r2, #5
 800f224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f228:	2300      	movs	r3, #0
 800f22a:	2200      	movs	r2, #0
 800f22c:	2100      	movs	r1, #0
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 fdf4 	bl	800fe1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
	...

0800f240 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f240:	b480      	push	{r7}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	4613      	mov	r3, r2
 800f24c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f24e:	2301      	movs	r3, #1
 800f250:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f252:	2300      	movs	r3, #0
 800f254:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f256:	4b1f      	ldr	r3, [pc, #124]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f258:	7a5b      	ldrb	r3, [r3, #9]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d131      	bne.n	800f2c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f260:	4b1c      	ldr	r3, [pc, #112]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f262:	7a5b      	ldrb	r3, [r3, #9]
 800f264:	b2db      	uxtb	r3, r3
 800f266:	461a      	mov	r2, r3
 800f268:	4b1a      	ldr	r3, [pc, #104]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f26a:	2100      	movs	r1, #0
 800f26c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f26e:	4b19      	ldr	r3, [pc, #100]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f270:	7a5b      	ldrb	r3, [r3, #9]
 800f272:	b2db      	uxtb	r3, r3
 800f274:	4a17      	ldr	r2, [pc, #92]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	4413      	add	r3, r2
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f27e:	4b15      	ldr	r3, [pc, #84]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f280:	7a5b      	ldrb	r3, [r3, #9]
 800f282:	b2db      	uxtb	r3, r3
 800f284:	461a      	mov	r2, r3
 800f286:	4b13      	ldr	r3, [pc, #76]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f288:	4413      	add	r3, r2
 800f28a:	79fa      	ldrb	r2, [r7, #7]
 800f28c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f28e:	4b11      	ldr	r3, [pc, #68]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f290:	7a5b      	ldrb	r3, [r3, #9]
 800f292:	b2db      	uxtb	r3, r3
 800f294:	1c5a      	adds	r2, r3, #1
 800f296:	b2d1      	uxtb	r1, r2
 800f298:	4a0e      	ldr	r2, [pc, #56]	; (800f2d4 <FATFS_LinkDriverEx+0x94>)
 800f29a:	7251      	strb	r1, [r2, #9]
 800f29c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f29e:	7dbb      	ldrb	r3, [r7, #22]
 800f2a0:	3330      	adds	r3, #48	; 0x30
 800f2a2:	b2da      	uxtb	r2, r3
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	223a      	movs	r2, #58	; 0x3a
 800f2ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	3302      	adds	r3, #2
 800f2b4:	222f      	movs	r2, #47	; 0x2f
 800f2b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	3303      	adds	r3, #3
 800f2bc:	2200      	movs	r2, #0
 800f2be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	371c      	adds	r7, #28
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop
 800f2d4:	20000dd8 	.word	0x20000dd8

0800f2d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f7ff ffaa 	bl	800f240 <FATFS_LinkDriverEx>
 800f2ec:	4603      	mov	r3, r0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
	...

0800f2f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	4912      	ldr	r1, [pc, #72]	; (800f348 <MX_USB_DEVICE_Init+0x50>)
 800f300:	4812      	ldr	r0, [pc, #72]	; (800f34c <MX_USB_DEVICE_Init+0x54>)
 800f302:	f7fe fe09 	bl	800df18 <USBD_Init>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d001      	beq.n	800f310 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f30c:	f7f2 fb1c 	bl	8001948 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f310:	490f      	ldr	r1, [pc, #60]	; (800f350 <MX_USB_DEVICE_Init+0x58>)
 800f312:	480e      	ldr	r0, [pc, #56]	; (800f34c <MX_USB_DEVICE_Init+0x54>)
 800f314:	f7fe fe30 	bl	800df78 <USBD_RegisterClass>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f31e:	f7f2 fb13 	bl	8001948 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f322:	490c      	ldr	r1, [pc, #48]	; (800f354 <MX_USB_DEVICE_Init+0x5c>)
 800f324:	4809      	ldr	r0, [pc, #36]	; (800f34c <MX_USB_DEVICE_Init+0x54>)
 800f326:	f7fe fd51 	bl	800ddcc <USBD_CDC_RegisterInterface>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f330:	f7f2 fb0a 	bl	8001948 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f334:	4805      	ldr	r0, [pc, #20]	; (800f34c <MX_USB_DEVICE_Init+0x54>)
 800f336:	f7fe fe46 	bl	800dfc6 <USBD_Start>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f340:	f7f2 fb02 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f344:	bf00      	nop
 800f346:	bd80      	pop	{r7, pc}
 800f348:	20000130 	.word	0x20000130
 800f34c:	20000de4 	.word	0x20000de4
 800f350:	20000018 	.word	0x20000018
 800f354:	2000011c 	.word	0x2000011c

0800f358 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f35c:	2200      	movs	r2, #0
 800f35e:	4905      	ldr	r1, [pc, #20]	; (800f374 <CDC_Init_FS+0x1c>)
 800f360:	4805      	ldr	r0, [pc, #20]	; (800f378 <CDC_Init_FS+0x20>)
 800f362:	f7fe fd48 	bl	800ddf6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f366:	4905      	ldr	r1, [pc, #20]	; (800f37c <CDC_Init_FS+0x24>)
 800f368:	4803      	ldr	r0, [pc, #12]	; (800f378 <CDC_Init_FS+0x20>)
 800f36a:	f7fe fd62 	bl	800de32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f36e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f370:	4618      	mov	r0, r3
 800f372:	bd80      	pop	{r7, pc}
 800f374:	200018b4 	.word	0x200018b4
 800f378:	20000de4 	.word	0x20000de4
 800f37c:	200010b4 	.word	0x200010b4

0800f380 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f380:	b480      	push	{r7}
 800f382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f384:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f386:	4618      	mov	r0, r3
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	6039      	str	r1, [r7, #0]
 800f39a:	71fb      	strb	r3, [r7, #7]
 800f39c:	4613      	mov	r3, r2
 800f39e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f3a0:	79fb      	ldrb	r3, [r7, #7]
 800f3a2:	2b23      	cmp	r3, #35	; 0x23
 800f3a4:	d84a      	bhi.n	800f43c <CDC_Control_FS+0xac>
 800f3a6:	a201      	add	r2, pc, #4	; (adr r2, 800f3ac <CDC_Control_FS+0x1c>)
 800f3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ac:	0800f43d 	.word	0x0800f43d
 800f3b0:	0800f43d 	.word	0x0800f43d
 800f3b4:	0800f43d 	.word	0x0800f43d
 800f3b8:	0800f43d 	.word	0x0800f43d
 800f3bc:	0800f43d 	.word	0x0800f43d
 800f3c0:	0800f43d 	.word	0x0800f43d
 800f3c4:	0800f43d 	.word	0x0800f43d
 800f3c8:	0800f43d 	.word	0x0800f43d
 800f3cc:	0800f43d 	.word	0x0800f43d
 800f3d0:	0800f43d 	.word	0x0800f43d
 800f3d4:	0800f43d 	.word	0x0800f43d
 800f3d8:	0800f43d 	.word	0x0800f43d
 800f3dc:	0800f43d 	.word	0x0800f43d
 800f3e0:	0800f43d 	.word	0x0800f43d
 800f3e4:	0800f43d 	.word	0x0800f43d
 800f3e8:	0800f43d 	.word	0x0800f43d
 800f3ec:	0800f43d 	.word	0x0800f43d
 800f3f0:	0800f43d 	.word	0x0800f43d
 800f3f4:	0800f43d 	.word	0x0800f43d
 800f3f8:	0800f43d 	.word	0x0800f43d
 800f3fc:	0800f43d 	.word	0x0800f43d
 800f400:	0800f43d 	.word	0x0800f43d
 800f404:	0800f43d 	.word	0x0800f43d
 800f408:	0800f43d 	.word	0x0800f43d
 800f40c:	0800f43d 	.word	0x0800f43d
 800f410:	0800f43d 	.word	0x0800f43d
 800f414:	0800f43d 	.word	0x0800f43d
 800f418:	0800f43d 	.word	0x0800f43d
 800f41c:	0800f43d 	.word	0x0800f43d
 800f420:	0800f43d 	.word	0x0800f43d
 800f424:	0800f43d 	.word	0x0800f43d
 800f428:	0800f43d 	.word	0x0800f43d
 800f42c:	0800f43d 	.word	0x0800f43d
 800f430:	0800f43d 	.word	0x0800f43d
 800f434:	0800f43d 	.word	0x0800f43d
 800f438:	0800f43d 	.word	0x0800f43d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f43c:	bf00      	nop
  }

  return (USBD_OK);
 800f43e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f456:	6879      	ldr	r1, [r7, #4]
 800f458:	4805      	ldr	r0, [pc, #20]	; (800f470 <CDC_Receive_FS+0x24>)
 800f45a:	f7fe fcea 	bl	800de32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f45e:	4804      	ldr	r0, [pc, #16]	; (800f470 <CDC_Receive_FS+0x24>)
 800f460:	f7fe fd30 	bl	800dec4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f464:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f466:	4618      	mov	r0, r3
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	20000de4 	.word	0x20000de4

0800f474 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	460b      	mov	r3, r1
 800f47e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f480:	2300      	movs	r3, #0
 800f482:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f484:	4b0d      	ldr	r3, [pc, #52]	; (800f4bc <CDC_Transmit_FS+0x48>)
 800f486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f48a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f496:	2301      	movs	r3, #1
 800f498:	e00b      	b.n	800f4b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f49a:	887b      	ldrh	r3, [r7, #2]
 800f49c:	461a      	mov	r2, r3
 800f49e:	6879      	ldr	r1, [r7, #4]
 800f4a0:	4806      	ldr	r0, [pc, #24]	; (800f4bc <CDC_Transmit_FS+0x48>)
 800f4a2:	f7fe fca8 	bl	800ddf6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f4a6:	4805      	ldr	r0, [pc, #20]	; (800f4bc <CDC_Transmit_FS+0x48>)
 800f4a8:	f7fe fcdc 	bl	800de64 <USBD_CDC_TransmitPacket>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	20000de4 	.word	0x20000de4

0800f4c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f4d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	371c      	adds	r7, #28
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr
	...

0800f4e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	6039      	str	r1, [r7, #0]
 800f4ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	2212      	movs	r2, #18
 800f4f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f4f6:	4b03      	ldr	r3, [pc, #12]	; (800f504 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	20000150 	.word	0x20000150

0800f508 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	4603      	mov	r3, r0
 800f510:	6039      	str	r1, [r7, #0]
 800f512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	2204      	movs	r2, #4
 800f518:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f51a:	4b03      	ldr	r3, [pc, #12]	; (800f528 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	20000170 	.word	0x20000170

0800f52c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	6039      	str	r1, [r7, #0]
 800f536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d105      	bne.n	800f54a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f53e:	683a      	ldr	r2, [r7, #0]
 800f540:	4907      	ldr	r1, [pc, #28]	; (800f560 <USBD_FS_ProductStrDescriptor+0x34>)
 800f542:	4808      	ldr	r0, [pc, #32]	; (800f564 <USBD_FS_ProductStrDescriptor+0x38>)
 800f544:	f7ff fd9b 	bl	800f07e <USBD_GetString>
 800f548:	e004      	b.n	800f554 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	4904      	ldr	r1, [pc, #16]	; (800f560 <USBD_FS_ProductStrDescriptor+0x34>)
 800f54e:	4805      	ldr	r0, [pc, #20]	; (800f564 <USBD_FS_ProductStrDescriptor+0x38>)
 800f550:	f7ff fd95 	bl	800f07e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f554:	4b02      	ldr	r3, [pc, #8]	; (800f560 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f556:	4618      	mov	r0, r3
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	200020b4 	.word	0x200020b4
 800f564:	08018c80 	.word	0x08018c80

0800f568 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	4603      	mov	r3, r0
 800f570:	6039      	str	r1, [r7, #0]
 800f572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f574:	683a      	ldr	r2, [r7, #0]
 800f576:	4904      	ldr	r1, [pc, #16]	; (800f588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f578:	4804      	ldr	r0, [pc, #16]	; (800f58c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f57a:	f7ff fd80 	bl	800f07e <USBD_GetString>
  return USBD_StrDesc;
 800f57e:	4b02      	ldr	r3, [pc, #8]	; (800f588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f580:	4618      	mov	r0, r3
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	200020b4 	.word	0x200020b4
 800f58c:	08018c98 	.word	0x08018c98

0800f590 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	6039      	str	r1, [r7, #0]
 800f59a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	221a      	movs	r2, #26
 800f5a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f5a2:	f000 f855 	bl	800f650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f5a6:	4b02      	ldr	r3, [pc, #8]	; (800f5b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	20000174 	.word	0x20000174

0800f5b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d105      	bne.n	800f5d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	4907      	ldr	r1, [pc, #28]	; (800f5e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f5ca:	4808      	ldr	r0, [pc, #32]	; (800f5ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800f5cc:	f7ff fd57 	bl	800f07e <USBD_GetString>
 800f5d0:	e004      	b.n	800f5dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	4904      	ldr	r1, [pc, #16]	; (800f5e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f5d6:	4805      	ldr	r0, [pc, #20]	; (800f5ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800f5d8:	f7ff fd51 	bl	800f07e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5dc:	4b02      	ldr	r3, [pc, #8]	; (800f5e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	200020b4 	.word	0x200020b4
 800f5ec:	08018cac 	.word	0x08018cac

0800f5f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	6039      	str	r1, [r7, #0]
 800f5fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d105      	bne.n	800f60e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f602:	683a      	ldr	r2, [r7, #0]
 800f604:	4907      	ldr	r1, [pc, #28]	; (800f624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f606:	4808      	ldr	r0, [pc, #32]	; (800f628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f608:	f7ff fd39 	bl	800f07e <USBD_GetString>
 800f60c:	e004      	b.n	800f618 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	4904      	ldr	r1, [pc, #16]	; (800f624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f612:	4805      	ldr	r0, [pc, #20]	; (800f628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f614:	f7ff fd33 	bl	800f07e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f618:	4b02      	ldr	r3, [pc, #8]	; (800f624 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	200020b4 	.word	0x200020b4
 800f628:	08018cb8 	.word	0x08018cb8

0800f62c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	4603      	mov	r3, r0
 800f634:	6039      	str	r1, [r7, #0]
 800f636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	220c      	movs	r2, #12
 800f63c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f63e:	4b03      	ldr	r3, [pc, #12]	; (800f64c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f640:	4618      	mov	r0, r3
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	20000164 	.word	0x20000164

0800f650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f656:	4b0f      	ldr	r3, [pc, #60]	; (800f694 <Get_SerialNum+0x44>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f65c:	4b0e      	ldr	r3, [pc, #56]	; (800f698 <Get_SerialNum+0x48>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f662:	4b0e      	ldr	r3, [pc, #56]	; (800f69c <Get_SerialNum+0x4c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4413      	add	r3, r2
 800f66e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d009      	beq.n	800f68a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f676:	2208      	movs	r2, #8
 800f678:	4909      	ldr	r1, [pc, #36]	; (800f6a0 <Get_SerialNum+0x50>)
 800f67a:	68f8      	ldr	r0, [r7, #12]
 800f67c:	f000 f814 	bl	800f6a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f680:	2204      	movs	r2, #4
 800f682:	4908      	ldr	r1, [pc, #32]	; (800f6a4 <Get_SerialNum+0x54>)
 800f684:	68b8      	ldr	r0, [r7, #8]
 800f686:	f000 f80f 	bl	800f6a8 <IntToUnicode>
  }
}
 800f68a:	bf00      	nop
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	1fff7590 	.word	0x1fff7590
 800f698:	1fff7594 	.word	0x1fff7594
 800f69c:	1fff7598 	.word	0x1fff7598
 800f6a0:	20000176 	.word	0x20000176
 800f6a4:	20000186 	.word	0x20000186

0800f6a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b087      	sub	sp, #28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	75fb      	strb	r3, [r7, #23]
 800f6be:	e027      	b.n	800f710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	0f1b      	lsrs	r3, r3, #28
 800f6c4:	2b09      	cmp	r3, #9
 800f6c6:	d80b      	bhi.n	800f6e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	0f1b      	lsrs	r3, r3, #28
 800f6cc:	b2da      	uxtb	r2, r3
 800f6ce:	7dfb      	ldrb	r3, [r7, #23]
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	440b      	add	r3, r1
 800f6d8:	3230      	adds	r2, #48	; 0x30
 800f6da:	b2d2      	uxtb	r2, r2
 800f6dc:	701a      	strb	r2, [r3, #0]
 800f6de:	e00a      	b.n	800f6f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	0f1b      	lsrs	r3, r3, #28
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	7dfb      	ldrb	r3, [r7, #23]
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	440b      	add	r3, r1
 800f6f0:	3237      	adds	r2, #55	; 0x37
 800f6f2:	b2d2      	uxtb	r2, r2
 800f6f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	011b      	lsls	r3, r3, #4
 800f6fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f6fc:	7dfb      	ldrb	r3, [r7, #23]
 800f6fe:	005b      	lsls	r3, r3, #1
 800f700:	3301      	adds	r3, #1
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	4413      	add	r3, r2
 800f706:	2200      	movs	r2, #0
 800f708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	3301      	adds	r3, #1
 800f70e:	75fb      	strb	r3, [r7, #23]
 800f710:	7dfa      	ldrb	r2, [r7, #23]
 800f712:	79fb      	ldrb	r3, [r7, #7]
 800f714:	429a      	cmp	r2, r3
 800f716:	d3d3      	bcc.n	800f6c0 <IntToUnicode+0x18>
  }
}
 800f718:	bf00      	nop
 800f71a:	bf00      	nop
 800f71c:	371c      	adds	r7, #28
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr
	...

0800f728 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b0b2      	sub	sp, #200	; 0xc8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f730:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f734:	2200      	movs	r2, #0
 800f736:	601a      	str	r2, [r3, #0]
 800f738:	605a      	str	r2, [r3, #4]
 800f73a:	609a      	str	r2, [r3, #8]
 800f73c:	60da      	str	r2, [r3, #12]
 800f73e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f740:	f107 0318 	add.w	r3, r7, #24
 800f744:	229c      	movs	r2, #156	; 0x9c
 800f746:	2100      	movs	r1, #0
 800f748:	4618      	mov	r0, r3
 800f74a:	f007 f949 	bl	80169e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f756:	d163      	bne.n	800f820 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f75c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f75e:	2300      	movs	r3, #0
 800f760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f764:	f107 0318 	add.w	r3, r7, #24
 800f768:	4618      	mov	r0, r3
 800f76a:	f7f6 ffe9 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d001      	beq.n	800f778 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f774:	f7f2 f8e8 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f778:	4b2b      	ldr	r3, [pc, #172]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f77c:	4a2a      	ldr	r2, [pc, #168]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f77e:	f043 0301 	orr.w	r3, r3, #1
 800f782:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f784:	4b28      	ldr	r3, [pc, #160]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f788:	f003 0301 	and.w	r3, r3, #1
 800f78c:	617b      	str	r3, [r7, #20]
 800f78e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 800f790:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f798:	2302      	movs	r3, #2
 800f79a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f7aa:	230a      	movs	r3, #10
 800f7ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f7ba:	f7f4 fb51 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f7be:	4b1a      	ldr	r3, [pc, #104]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f7c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7c2:	4a19      	ldr	r2, [pc, #100]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f7c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f7c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f7ca:	4b17      	ldr	r3, [pc, #92]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f7d2:	613b      	str	r3, [r7, #16]
 800f7d4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f7d6:	4b14      	ldr	r3, [pc, #80]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d114      	bne.n	800f80c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f7e2:	4b11      	ldr	r3, [pc, #68]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7e6:	4a10      	ldr	r2, [pc, #64]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f7e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7ec:	6593      	str	r3, [r2, #88]	; 0x58
 800f7ee:	4b0e      	ldr	r3, [pc, #56]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f7fa:	f7f6 f8ad 	bl	8005958 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f7fe:	4b0a      	ldr	r3, [pc, #40]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f802:	4a09      	ldr	r2, [pc, #36]	; (800f828 <HAL_PCD_MspInit+0x100>)
 800f804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f808:	6593      	str	r3, [r2, #88]	; 0x58
 800f80a:	e001      	b.n	800f810 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f80c:	f7f6 f8a4 	bl	8005958 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f810:	2200      	movs	r2, #0
 800f812:	2100      	movs	r1, #0
 800f814:	2043      	movs	r0, #67	; 0x43
 800f816:	f7f3 fe1c 	bl	8003452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f81a:	2043      	movs	r0, #67	; 0x43
 800f81c:	f7f3 fe35 	bl	800348a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f820:	bf00      	nop
 800f822:	37c8      	adds	r7, #200	; 0xc8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	40021000 	.word	0x40021000

0800f82c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f840:	4619      	mov	r1, r3
 800f842:	4610      	mov	r0, r2
 800f844:	f7fe fc0a 	bl	800e05c <USBD_LL_SetupStage>
}
 800f848:	bf00      	nop
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	460b      	mov	r3, r1
 800f85a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f862:	78fa      	ldrb	r2, [r7, #3]
 800f864:	6879      	ldr	r1, [r7, #4]
 800f866:	4613      	mov	r3, r2
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	4413      	add	r3, r2
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	440b      	add	r3, r1
 800f870:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	78fb      	ldrb	r3, [r7, #3]
 800f878:	4619      	mov	r1, r3
 800f87a:	f7fe fc44 	bl	800e106 <USBD_LL_DataOutStage>
}
 800f87e:	bf00      	nop
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b082      	sub	sp, #8
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	460b      	mov	r3, r1
 800f890:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f898:	78fa      	ldrb	r2, [r7, #3]
 800f89a:	6879      	ldr	r1, [r7, #4]
 800f89c:	4613      	mov	r3, r2
 800f89e:	00db      	lsls	r3, r3, #3
 800f8a0:	4413      	add	r3, r2
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	440b      	add	r3, r1
 800f8a6:	334c      	adds	r3, #76	; 0x4c
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	78fb      	ldrb	r3, [r7, #3]
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	f7fe fc8d 	bl	800e1cc <USBD_LL_DataInStage>
}
 800f8b2:	bf00      	nop
 800f8b4:	3708      	adds	r7, #8
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b082      	sub	sp, #8
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fe fda1 	bl	800e410 <USBD_LL_SOF>
}
 800f8ce:	bf00      	nop
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	b084      	sub	sp, #16
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	2b02      	cmp	r3, #2
 800f8e8:	d001      	beq.n	800f8ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f8ea:	f7f2 f82d 	bl	8001948 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8f4:	7bfa      	ldrb	r2, [r7, #15]
 800f8f6:	4611      	mov	r1, r2
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe fd4b 	bl	800e394 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe fcf7 	bl	800e2f8 <USBD_LL_Reset>
}
 800f90a:	bf00      	nop
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
	...

0800f914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	6812      	ldr	r2, [r2, #0]
 800f92a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f92e:	f043 0301 	orr.w	r3, r3, #1
 800f932:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fe fd3a 	bl	800e3b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6a1b      	ldr	r3, [r3, #32]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d005      	beq.n	800f954 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f948:	4b04      	ldr	r3, [pc, #16]	; (800f95c <HAL_PCD_SuspendCallback+0x48>)
 800f94a:	691b      	ldr	r3, [r3, #16]
 800f94c:	4a03      	ldr	r2, [pc, #12]	; (800f95c <HAL_PCD_SuspendCallback+0x48>)
 800f94e:	f043 0306 	orr.w	r3, r3, #6
 800f952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f954:	bf00      	nop
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	e000ed00 	.word	0xe000ed00

0800f960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	6812      	ldr	r2, [r2, #0]
 800f976:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f97a:	f023 0301 	bic.w	r3, r3, #1
 800f97e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6a1b      	ldr	r3, [r3, #32]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d007      	beq.n	800f998 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f988:	4b08      	ldr	r3, [pc, #32]	; (800f9ac <HAL_PCD_ResumeCallback+0x4c>)
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	4a07      	ldr	r2, [pc, #28]	; (800f9ac <HAL_PCD_ResumeCallback+0x4c>)
 800f98e:	f023 0306 	bic.w	r3, r3, #6
 800f992:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f994:	f000 faf4 	bl	800ff80 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fe fd1e 	bl	800e3e0 <USBD_LL_Resume>
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	e000ed00 	.word	0xe000ed00

0800f9b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9c2:	78fa      	ldrb	r2, [r7, #3]
 800f9c4:	4611      	mov	r1, r2
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fe fd6a 	bl	800e4a0 <USBD_LL_IsoOUTIncomplete>
}
 800f9cc:	bf00      	nop
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	460b      	mov	r3, r1
 800f9de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9e6:	78fa      	ldrb	r2, [r7, #3]
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fe fd32 	bl	800e454 <USBD_LL_IsoINIncomplete>
}
 800f9f0:	bf00      	nop
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fe fd70 	bl	800e4ec <USBD_LL_DevConnected>
}
 800fa0c:	bf00      	nop
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fe fd6d 	bl	800e502 <USBD_LL_DevDisconnected>
}
 800fa28:	bf00      	nop
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d139      	bne.n	800fab4 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fa40:	4a1f      	ldr	r2, [pc, #124]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a1d      	ldr	r2, [pc, #116]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa50:	4b1b      	ldr	r3, [pc, #108]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fa56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fa58:	4b19      	ldr	r3, [pc, #100]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa5a:	2206      	movs	r2, #6
 800fa5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa5e:	4b18      	ldr	r3, [pc, #96]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa60:	2202      	movs	r2, #2
 800fa62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa64:	4b16      	ldr	r3, [pc, #88]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa66:	2200      	movs	r2, #0
 800fa68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fa6a:	4b15      	ldr	r3, [pc, #84]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa70:	4b13      	ldr	r3, [pc, #76]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800fa76:	4b12      	ldr	r3, [pc, #72]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa78:	2201      	movs	r2, #1
 800fa7a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fa7c:	4b10      	ldr	r3, [pc, #64]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fa82:	4b0f      	ldr	r3, [pc, #60]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fa88:	480d      	ldr	r0, [pc, #52]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa8a:	f7f4 fcd1 	bl	8004430 <HAL_PCD_Init>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800fa94:	f7f1 ff58 	bl	8001948 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa98:	2180      	movs	r1, #128	; 0x80
 800fa9a:	4809      	ldr	r0, [pc, #36]	; (800fac0 <USBD_LL_Init+0x90>)
 800fa9c:	f7f5 fe53 	bl	8005746 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800faa0:	2240      	movs	r2, #64	; 0x40
 800faa2:	2100      	movs	r1, #0
 800faa4:	4806      	ldr	r0, [pc, #24]	; (800fac0 <USBD_LL_Init+0x90>)
 800faa6:	f7f5 fe07 	bl	80056b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800faaa:	2280      	movs	r2, #128	; 0x80
 800faac:	2101      	movs	r1, #1
 800faae:	4804      	ldr	r0, [pc, #16]	; (800fac0 <USBD_LL_Init+0x90>)
 800fab0:	f7f5 fe02 	bl	80056b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	200022b4 	.word	0x200022b4

0800fac4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800facc:	2300      	movs	r3, #0
 800face:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fada:	4618      	mov	r0, r3
 800fadc:	f7f4 fdcc 	bl	8004678 <HAL_PCD_Start>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fae4:	7bbb      	ldrb	r3, [r7, #14]
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d816      	bhi.n	800fb18 <USBD_LL_Start+0x54>
 800faea:	a201      	add	r2, pc, #4	; (adr r2, 800faf0 <USBD_LL_Start+0x2c>)
 800faec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf0:	0800fb01 	.word	0x0800fb01
 800faf4:	0800fb07 	.word	0x0800fb07
 800faf8:	0800fb0d 	.word	0x0800fb0d
 800fafc:	0800fb13 	.word	0x0800fb13
    case HAL_OK :
      usb_status = USBD_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	73fb      	strb	r3, [r7, #15]
    break;
 800fb04:	e00b      	b.n	800fb1e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb06:	2303      	movs	r3, #3
 800fb08:	73fb      	strb	r3, [r7, #15]
    break;
 800fb0a:	e008      	b.n	800fb1e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb10:	e005      	b.n	800fb1e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb12:	2303      	movs	r3, #3
 800fb14:	73fb      	strb	r3, [r7, #15]
    break;
 800fb16:	e002      	b.n	800fb1e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800fb18:	2303      	movs	r3, #3
 800fb1a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb1c:	bf00      	nop
  }
  return usb_status;
 800fb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3710      	adds	r7, #16
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	4608      	mov	r0, r1
 800fb32:	4611      	mov	r1, r2
 800fb34:	461a      	mov	r2, r3
 800fb36:	4603      	mov	r3, r0
 800fb38:	70fb      	strb	r3, [r7, #3]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	70bb      	strb	r3, [r7, #2]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fb50:	78bb      	ldrb	r3, [r7, #2]
 800fb52:	883a      	ldrh	r2, [r7, #0]
 800fb54:	78f9      	ldrb	r1, [r7, #3]
 800fb56:	f7f5 fa76 	bl	8005046 <HAL_PCD_EP_Open>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fb5e:	7bbb      	ldrb	r3, [r7, #14]
 800fb60:	2b03      	cmp	r3, #3
 800fb62:	d817      	bhi.n	800fb94 <USBD_LL_OpenEP+0x6c>
 800fb64:	a201      	add	r2, pc, #4	; (adr r2, 800fb6c <USBD_LL_OpenEP+0x44>)
 800fb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb6a:	bf00      	nop
 800fb6c:	0800fb7d 	.word	0x0800fb7d
 800fb70:	0800fb83 	.word	0x0800fb83
 800fb74:	0800fb89 	.word	0x0800fb89
 800fb78:	0800fb8f 	.word	0x0800fb8f
    case HAL_OK :
      usb_status = USBD_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb80:	e00b      	b.n	800fb9a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb82:	2303      	movs	r3, #3
 800fb84:	73fb      	strb	r3, [r7, #15]
    break;
 800fb86:	e008      	b.n	800fb9a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb8c:	e005      	b.n	800fb9a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb8e:	2303      	movs	r3, #3
 800fb90:	73fb      	strb	r3, [r7, #15]
    break;
 800fb92:	e002      	b.n	800fb9a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800fb94:	2303      	movs	r3, #3
 800fb96:	73fb      	strb	r3, [r7, #15]
    break;
 800fb98:	bf00      	nop
  }
  return usb_status;
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	460b      	mov	r3, r1
 800fbae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbbe:	78fa      	ldrb	r2, [r7, #3]
 800fbc0:	4611      	mov	r1, r2
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7f5 faa7 	bl	8005116 <HAL_PCD_EP_Close>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fbcc:	7bbb      	ldrb	r3, [r7, #14]
 800fbce:	2b03      	cmp	r3, #3
 800fbd0:	d816      	bhi.n	800fc00 <USBD_LL_CloseEP+0x5c>
 800fbd2:	a201      	add	r2, pc, #4	; (adr r2, 800fbd8 <USBD_LL_CloseEP+0x34>)
 800fbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd8:	0800fbe9 	.word	0x0800fbe9
 800fbdc:	0800fbef 	.word	0x0800fbef
 800fbe0:	0800fbf5 	.word	0x0800fbf5
 800fbe4:	0800fbfb 	.word	0x0800fbfb
    case HAL_OK :
      usb_status = USBD_OK;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	73fb      	strb	r3, [r7, #15]
    break;
 800fbec:	e00b      	b.n	800fc06 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbee:	2303      	movs	r3, #3
 800fbf0:	73fb      	strb	r3, [r7, #15]
    break;
 800fbf2:	e008      	b.n	800fc06 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbf8:	e005      	b.n	800fc06 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbfa:	2303      	movs	r3, #3
 800fbfc:	73fb      	strb	r3, [r7, #15]
    break;
 800fbfe:	e002      	b.n	800fc06 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fc00:	2303      	movs	r3, #3
 800fc02:	73fb      	strb	r3, [r7, #15]
    break;
 800fc04:	bf00      	nop
  }
  return usb_status;
 800fc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc2a:	78fa      	ldrb	r2, [r7, #3]
 800fc2c:	4611      	mov	r1, r2
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f5 fb4e 	bl	80052d0 <HAL_PCD_EP_SetStall>
 800fc34:	4603      	mov	r3, r0
 800fc36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fc38:	7bbb      	ldrb	r3, [r7, #14]
 800fc3a:	2b03      	cmp	r3, #3
 800fc3c:	d816      	bhi.n	800fc6c <USBD_LL_StallEP+0x5c>
 800fc3e:	a201      	add	r2, pc, #4	; (adr r2, 800fc44 <USBD_LL_StallEP+0x34>)
 800fc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc44:	0800fc55 	.word	0x0800fc55
 800fc48:	0800fc5b 	.word	0x0800fc5b
 800fc4c:	0800fc61 	.word	0x0800fc61
 800fc50:	0800fc67 	.word	0x0800fc67
    case HAL_OK :
      usb_status = USBD_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	73fb      	strb	r3, [r7, #15]
    break;
 800fc58:	e00b      	b.n	800fc72 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	73fb      	strb	r3, [r7, #15]
    break;
 800fc5e:	e008      	b.n	800fc72 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc60:	2301      	movs	r3, #1
 800fc62:	73fb      	strb	r3, [r7, #15]
    break;
 800fc64:	e005      	b.n	800fc72 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc66:	2303      	movs	r3, #3
 800fc68:	73fb      	strb	r3, [r7, #15]
    break;
 800fc6a:	e002      	b.n	800fc72 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc70:	bf00      	nop
  }
  return usb_status;
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	460b      	mov	r3, r1
 800fc86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc96:	78fa      	ldrb	r2, [r7, #3]
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7f5 fb7a 	bl	8005394 <HAL_PCD_EP_ClrStall>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fca4:	7bbb      	ldrb	r3, [r7, #14]
 800fca6:	2b03      	cmp	r3, #3
 800fca8:	d816      	bhi.n	800fcd8 <USBD_LL_ClearStallEP+0x5c>
 800fcaa:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <USBD_LL_ClearStallEP+0x34>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fcc1 	.word	0x0800fcc1
 800fcb4:	0800fcc7 	.word	0x0800fcc7
 800fcb8:	0800fccd 	.word	0x0800fccd
 800fcbc:	0800fcd3 	.word	0x0800fcd3
    case HAL_OK :
      usb_status = USBD_OK;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	73fb      	strb	r3, [r7, #15]
    break;
 800fcc4:	e00b      	b.n	800fcde <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fcc6:	2303      	movs	r3, #3
 800fcc8:	73fb      	strb	r3, [r7, #15]
    break;
 800fcca:	e008      	b.n	800fcde <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fccc:	2301      	movs	r3, #1
 800fcce:	73fb      	strb	r3, [r7, #15]
    break;
 800fcd0:	e005      	b.n	800fcde <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fcd2:	2303      	movs	r3, #3
 800fcd4:	73fb      	strb	r3, [r7, #15]
    break;
 800fcd6:	e002      	b.n	800fcde <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fcd8:	2303      	movs	r3, #3
 800fcda:	73fb      	strb	r3, [r7, #15]
    break;
 800fcdc:	bf00      	nop
  }
  return usb_status;
 800fcde:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fcfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fcfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	da0b      	bge.n	800fd1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd04:	78fb      	ldrb	r3, [r7, #3]
 800fd06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd0a:	68f9      	ldr	r1, [r7, #12]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	00db      	lsls	r3, r3, #3
 800fd10:	4413      	add	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	440b      	add	r3, r1
 800fd16:	333e      	adds	r3, #62	; 0x3e
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	e00b      	b.n	800fd34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd1c:	78fb      	ldrb	r3, [r7, #3]
 800fd1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd22:	68f9      	ldr	r1, [r7, #12]
 800fd24:	4613      	mov	r3, r2
 800fd26:	00db      	lsls	r3, r3, #3
 800fd28:	4413      	add	r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	440b      	add	r3, r1
 800fd2e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fd32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	460b      	mov	r3, r1
 800fd4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fd5a:	78fa      	ldrb	r2, [r7, #3]
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f5 f94c 	bl	8004ffc <HAL_PCD_SetAddress>
 800fd64:	4603      	mov	r3, r0
 800fd66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fd68:	7bbb      	ldrb	r3, [r7, #14]
 800fd6a:	2b03      	cmp	r3, #3
 800fd6c:	d816      	bhi.n	800fd9c <USBD_LL_SetUSBAddress+0x5c>
 800fd6e:	a201      	add	r2, pc, #4	; (adr r2, 800fd74 <USBD_LL_SetUSBAddress+0x34>)
 800fd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd74:	0800fd85 	.word	0x0800fd85
 800fd78:	0800fd8b 	.word	0x0800fd8b
 800fd7c:	0800fd91 	.word	0x0800fd91
 800fd80:	0800fd97 	.word	0x0800fd97
    case HAL_OK :
      usb_status = USBD_OK;
 800fd84:	2300      	movs	r3, #0
 800fd86:	73fb      	strb	r3, [r7, #15]
    break;
 800fd88:	e00b      	b.n	800fda2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd8a:	2303      	movs	r3, #3
 800fd8c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd8e:	e008      	b.n	800fda2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd90:	2301      	movs	r3, #1
 800fd92:	73fb      	strb	r3, [r7, #15]
    break;
 800fd94:	e005      	b.n	800fda2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd96:	2303      	movs	r3, #3
 800fd98:	73fb      	strb	r3, [r7, #15]
    break;
 800fd9a:	e002      	b.n	800fda2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fd9c:	2303      	movs	r3, #3
 800fd9e:	73fb      	strb	r3, [r7, #15]
    break;
 800fda0:	bf00      	nop
  }
  return usb_status;
 800fda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	607a      	str	r2, [r7, #4]
 800fdb6:	603b      	str	r3, [r7, #0]
 800fdb8:	460b      	mov	r3, r1
 800fdba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fdca:	7af9      	ldrb	r1, [r7, #11]
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	f7f5 fa41 	bl	8005256 <HAL_PCD_EP_Transmit>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fdd8:	7dbb      	ldrb	r3, [r7, #22]
 800fdda:	2b03      	cmp	r3, #3
 800fddc:	d816      	bhi.n	800fe0c <USBD_LL_Transmit+0x60>
 800fdde:	a201      	add	r2, pc, #4	; (adr r2, 800fde4 <USBD_LL_Transmit+0x38>)
 800fde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde4:	0800fdf5 	.word	0x0800fdf5
 800fde8:	0800fdfb 	.word	0x0800fdfb
 800fdec:	0800fe01 	.word	0x0800fe01
 800fdf0:	0800fe07 	.word	0x0800fe07
    case HAL_OK :
      usb_status = USBD_OK;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	75fb      	strb	r3, [r7, #23]
    break;
 800fdf8:	e00b      	b.n	800fe12 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fdfa:	2303      	movs	r3, #3
 800fdfc:	75fb      	strb	r3, [r7, #23]
    break;
 800fdfe:	e008      	b.n	800fe12 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe00:	2301      	movs	r3, #1
 800fe02:	75fb      	strb	r3, [r7, #23]
    break;
 800fe04:	e005      	b.n	800fe12 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe06:	2303      	movs	r3, #3
 800fe08:	75fb      	strb	r3, [r7, #23]
    break;
 800fe0a:	e002      	b.n	800fe12 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	75fb      	strb	r3, [r7, #23]
    break;
 800fe10:	bf00      	nop
  }
  return usb_status;
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3718      	adds	r7, #24
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	607a      	str	r2, [r7, #4]
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fe3a:	7af9      	ldrb	r1, [r7, #11]
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	f7f5 f9b3 	bl	80051aa <HAL_PCD_EP_Receive>
 800fe44:	4603      	mov	r3, r0
 800fe46:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fe48:	7dbb      	ldrb	r3, [r7, #22]
 800fe4a:	2b03      	cmp	r3, #3
 800fe4c:	d816      	bhi.n	800fe7c <USBD_LL_PrepareReceive+0x60>
 800fe4e:	a201      	add	r2, pc, #4	; (adr r2, 800fe54 <USBD_LL_PrepareReceive+0x38>)
 800fe50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe54:	0800fe65 	.word	0x0800fe65
 800fe58:	0800fe6b 	.word	0x0800fe6b
 800fe5c:	0800fe71 	.word	0x0800fe71
 800fe60:	0800fe77 	.word	0x0800fe77
    case HAL_OK :
      usb_status = USBD_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	75fb      	strb	r3, [r7, #23]
    break;
 800fe68:	e00b      	b.n	800fe82 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe6a:	2303      	movs	r3, #3
 800fe6c:	75fb      	strb	r3, [r7, #23]
    break;
 800fe6e:	e008      	b.n	800fe82 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe70:	2301      	movs	r3, #1
 800fe72:	75fb      	strb	r3, [r7, #23]
    break;
 800fe74:	e005      	b.n	800fe82 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe76:	2303      	movs	r3, #3
 800fe78:	75fb      	strb	r3, [r7, #23]
    break;
 800fe7a:	e002      	b.n	800fe82 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	75fb      	strb	r3, [r7, #23]
    break;
 800fe80:	bf00      	nop
  }
  return usb_status;
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3718      	adds	r7, #24
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	460b      	mov	r3, r1
 800fe96:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe9e:	78fa      	ldrb	r2, [r7, #3]
 800fea0:	4611      	mov	r1, r2
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7f5 f9bf 	bl	8005226 <HAL_PCD_EP_GetRxCount>
 800fea8:	4603      	mov	r3, r0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
	...

0800feb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	460b      	mov	r3, r1
 800febe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800fec0:	78fb      	ldrb	r3, [r7, #3]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d002      	beq.n	800fecc <HAL_PCDEx_LPM_Callback+0x18>
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d01f      	beq.n	800ff0a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800feca:	e03b      	b.n	800ff44 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d007      	beq.n	800fee4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fed4:	f000 f854 	bl	800ff80 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fed8:	4b1c      	ldr	r3, [pc, #112]	; (800ff4c <HAL_PCDEx_LPM_Callback+0x98>)
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	4a1b      	ldr	r2, [pc, #108]	; (800ff4c <HAL_PCDEx_LPM_Callback+0x98>)
 800fede:	f023 0306 	bic.w	r3, r3, #6
 800fee2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	6812      	ldr	r2, [r2, #0]
 800fef2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fef6:	f023 0301 	bic.w	r3, r3, #1
 800fefa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fa6c 	bl	800e3e0 <USBD_LL_Resume>
    break;
 800ff08:	e01c      	b.n	800ff44 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	6812      	ldr	r2, [r2, #0]
 800ff18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff1c:	f043 0301 	orr.w	r3, r3, #1
 800ff20:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fe fa43 	bl	800e3b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d005      	beq.n	800ff42 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff36:	4b05      	ldr	r3, [pc, #20]	; (800ff4c <HAL_PCDEx_LPM_Callback+0x98>)
 800ff38:	691b      	ldr	r3, [r3, #16]
 800ff3a:	4a04      	ldr	r2, [pc, #16]	; (800ff4c <HAL_PCDEx_LPM_Callback+0x98>)
 800ff3c:	f043 0306 	orr.w	r3, r3, #6
 800ff40:	6113      	str	r3, [r2, #16]
    break;
 800ff42:	bf00      	nop
}
 800ff44:	bf00      	nop
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	e000ed00 	.word	0xe000ed00

0800ff50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ff58:	4b03      	ldr	r3, [pc, #12]	; (800ff68 <USBD_static_malloc+0x18>)
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	200027c0 	.word	0x200027c0

0800ff6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]

}
 800ff74:	bf00      	nop
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ff84:	f7f0 ff8c 	bl	8000ea0 <SystemClock_Config>
}
 800ff88:	bf00      	nop
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d009      	beq.n	800ffb0 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800ff9c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800ff9e:	461a      	mov	r2, r3
        err.type, err.code);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800ffa6:	6839      	ldr	r1, [r7, #0]
 800ffa8:	4806      	ldr	r0, [pc, #24]	; (800ffc4 <ai_log_err+0x38>)
 800ffaa:	f006 fe01 	bl	8016bb0 <iprintf>
 800ffae:	e008      	b.n	800ffc2 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800ffb0:	793b      	ldrb	r3, [r7, #4]
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800ffba:	461a      	mov	r2, r3
 800ffbc:	4802      	ldr	r0, [pc, #8]	; (800ffc8 <ai_log_err+0x3c>)
 800ffbe:	f006 fdf7 	bl	8016bb0 <iprintf>

  do {} while (1);
 800ffc2:	e7fe      	b.n	800ffc2 <ai_log_err+0x36>
 800ffc4:	08018cf4 	.word	0x08018cf4
 800ffc8:	08018d28 	.word	0x08018d28

0800ffcc <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b086      	sub	sp, #24
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_svm_create_and_init(&svm, act_addr, NULL);
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	6879      	ldr	r1, [r7, #4]
 800ffd8:	4828      	ldr	r0, [pc, #160]	; (801007c <ai_boostrap+0xb0>)
 800ffda:	f000 fcb9 	bl	8010950 <ai_svm_create_and_init>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800ffe2:	7b3b      	ldrb	r3, [r7, #12]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d006      	beq.n	800fff6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_svm_create_and_init");
 800ffe8:	4925      	ldr	r1, [pc, #148]	; (8010080 <ai_boostrap+0xb4>)
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f7ff ffce 	bl	800ff8c <ai_log_err>
    return -1;
 800fff0:	f04f 33ff 	mov.w	r3, #4294967295
 800fff4:	e03e      	b.n	8010074 <ai_boostrap+0xa8>
  }

  ai_input = ai_svm_inputs_get(svm, NULL);
 800fff6:	4b21      	ldr	r3, [pc, #132]	; (801007c <ai_boostrap+0xb0>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2100      	movs	r1, #0
 800fffc:	4618      	mov	r0, r3
 800fffe:	f000 fd1b 	bl	8010a38 <ai_svm_inputs_get>
 8010002:	4603      	mov	r3, r0
 8010004:	4a1f      	ldr	r2, [pc, #124]	; (8010084 <ai_boostrap+0xb8>)
 8010006:	6013      	str	r3, [r2, #0]
  ai_output = ai_svm_outputs_get(svm, NULL);
 8010008:	4b1c      	ldr	r3, [pc, #112]	; (801007c <ai_boostrap+0xb0>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2100      	movs	r1, #0
 801000e:	4618      	mov	r0, r3
 8010010:	f000 fd2c 	bl	8010a6c <ai_svm_outputs_get>
 8010014:	4603      	mov	r3, r0
 8010016:	4a1c      	ldr	r2, [pc, #112]	; (8010088 <ai_boostrap+0xbc>)
 8010018:	6013      	str	r3, [r2, #0]

#if defined(AI_SVM_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_SVM_IN_NUM; idx++) {
 801001a:	2300      	movs	r3, #0
 801001c:	617b      	str	r3, [r7, #20]
 801001e:	e00f      	b.n	8010040 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8010020:	4b18      	ldr	r3, [pc, #96]	; (8010084 <ai_boostrap+0xb8>)
 8010022:	6819      	ldr	r1, [r3, #0]
 8010024:	697a      	ldr	r2, [r7, #20]
 8010026:	4613      	mov	r3, r2
 8010028:	00db      	lsls	r3, r3, #3
 801002a:	1a9b      	subs	r3, r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	440b      	add	r3, r1
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	4916      	ldr	r1, [pc, #88]	; (801008c <ai_boostrap+0xc0>)
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SVM_IN_NUM; idx++) {
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	3301      	adds	r3, #1
 801003e:	617b      	str	r3, [r7, #20]
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2b00      	cmp	r3, #0
 8010044:	ddec      	ble.n	8010020 <ai_boostrap+0x54>

#if defined(AI_SVM_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
 8010046:	2300      	movs	r3, #0
 8010048:	613b      	str	r3, [r7, #16]
 801004a:	e00f      	b.n	801006c <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 801004c:	4b0e      	ldr	r3, [pc, #56]	; (8010088 <ai_boostrap+0xbc>)
 801004e:	6819      	ldr	r1, [r3, #0]
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	4613      	mov	r3, r2
 8010054:	00db      	lsls	r3, r3, #3
 8010056:	1a9b      	subs	r3, r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	440b      	add	r3, r1
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	490c      	ldr	r1, [pc, #48]	; (8010090 <ai_boostrap+0xc4>)
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	3301      	adds	r3, #1
 801006a:	613b      	str	r3, [r7, #16]
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	2b01      	cmp	r3, #1
 8010070:	ddec      	ble.n	801004c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8010072:	2300      	movs	r3, #0
}
 8010074:	4618      	mov	r0, r3
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	20002e08 	.word	0x20002e08
 8010080:	08018d58 	.word	0x08018d58
 8010084:	20002e0c 	.word	0x20002e0c
 8010088:	20002e10 	.word	0x20002e10
 801008c:	20002b5c 	.word	0x20002b5c
 8010090:	20002b60 	.word	0x20002b60

08010094 <ai_run>:

static int ai_run(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_svm_run(svm, ai_input, ai_output);
 801009a:	4b0f      	ldr	r3, [pc, #60]	; (80100d8 <ai_run+0x44>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a0f      	ldr	r2, [pc, #60]	; (80100dc <ai_run+0x48>)
 80100a0:	6811      	ldr	r1, [r2, #0]
 80100a2:	4a0f      	ldr	r2, [pc, #60]	; (80100e0 <ai_run+0x4c>)
 80100a4:	6812      	ldr	r2, [r2, #0]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f000 fd36 	bl	8010b18 <ai_svm_run>
 80100ac:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d00c      	beq.n	80100ce <ai_run+0x3a>
    ai_log_err(ai_svm_get_error(svm),
 80100b4:	4b08      	ldr	r3, [pc, #32]	; (80100d8 <ai_run+0x44>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f000 fc27 	bl	801090c <ai_svm_get_error>
 80100be:	4603      	mov	r3, r0
 80100c0:	4908      	ldr	r1, [pc, #32]	; (80100e4 <ai_run+0x50>)
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7ff ff62 	bl	800ff8c <ai_log_err>
        "ai_svm_run");
    return -1;
 80100c8:	f04f 33ff 	mov.w	r3, #4294967295
 80100cc:	e000      	b.n	80100d0 <ai_run+0x3c>
  }

  return 0;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	20002e08 	.word	0x20002e08
 80100dc:	20002e0c 	.word	0x20002e0c
 80100e0:	20002e10 	.word	0x20002e10
 80100e4:	08018d70 	.word	0x08018d70

080100e8 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_float* data[])
{
 80100e8:	b590      	push	{r4, r7, lr}
 80100ea:	b095      	sub	sp, #84	; 0x54
 80100ec:	af02      	add	r7, sp, #8
 80100ee:	6078      	str	r0, [r7, #4]
	while(bufVar_len < 26) {
 80100f0:	e14a      	b.n	8010388 <acquire_and_process_data+0x2a0>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80100f2:	2200      	movs	r2, #0
 80100f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80100f8:	48ae      	ldr	r0, [pc, #696]	; (80103b4 <acquire_and_process_data+0x2cc>)
 80100fa:	f7f4 f85b 	bl	80041b4 <HAL_GPIO_WritePin>
				outdata[0] = 0x1e | 0x80 ; // read status register if there is new accelerometer data
 80100fe:	4bae      	ldr	r3, [pc, #696]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010100:	229e      	movs	r2, #158	; 0x9e
 8010102:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8010104:	f04f 33ff 	mov.w	r3, #4294967295
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	2302      	movs	r3, #2
 801010c:	4aab      	ldr	r2, [pc, #684]	; (80103bc <acquire_and_process_data+0x2d4>)
 801010e:	49aa      	ldr	r1, [pc, #680]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010110:	48ab      	ldr	r0, [pc, #684]	; (80103c0 <acquire_and_process_data+0x2d8>)
 8010112:	f7fa f8ad 	bl	800a270 <HAL_SPI_TransmitReceive>
				newValueAvailable = indata[1] & 0b1; //only accelerometer state
 8010116:	4ba9      	ldr	r3, [pc, #676]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010118:	785b      	ldrb	r3, [r3, #1]
 801011a:	f003 0301 	and.w	r3, r3, #1
 801011e:	b2da      	uxtb	r2, r3
 8010120:	4ba8      	ldr	r3, [pc, #672]	; (80103c4 <acquire_and_process_data+0x2dc>)
 8010122:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8010124:	2201      	movs	r2, #1
 8010126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801012a:	48a2      	ldr	r0, [pc, #648]	; (80103b4 <acquire_and_process_data+0x2cc>)
 801012c:	f7f4 f842 	bl	80041b4 <HAL_GPIO_WritePin>

				if(newValueAvailable == 1) {
 8010130:	4ba4      	ldr	r3, [pc, #656]	; (80103c4 <acquire_and_process_data+0x2dc>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	2b01      	cmp	r3, #1
 8010136:	f040 8127 	bne.w	8010388 <acquire_and_process_data+0x2a0>
					bufVar_len++;
 801013a:	4ba3      	ldr	r3, [pc, #652]	; (80103c8 <acquire_and_process_data+0x2e0>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	3301      	adds	r3, #1
 8010140:	4aa1      	ldr	r2, [pc, #644]	; (80103c8 <acquire_and_process_data+0x2e0>)
 8010142:	6013      	str	r3, [r2, #0]

					newValueAvailable = 0;
 8010144:	4b9f      	ldr	r3, [pc, #636]	; (80103c4 <acquire_and_process_data+0x2dc>)
 8010146:	2200      	movs	r2, #0
 8010148:	701a      	strb	r2, [r3, #0]

					//Read accelerometer measurements
					outdata[0] = 0x29 | 0x80 ; // read x, 0x51
 801014a:	4b9b      	ldr	r3, [pc, #620]	; (80103b8 <acquire_and_process_data+0x2d0>)
 801014c:	22a9      	movs	r2, #169	; 0xa9
 801014e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8010150:	2200      	movs	r2, #0
 8010152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010156:	4897      	ldr	r0, [pc, #604]	; (80103b4 <acquire_and_process_data+0x2cc>)
 8010158:	f7f4 f82c 	bl	80041b4 <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801015c:	f04f 33ff 	mov.w	r3, #4294967295
 8010160:	9300      	str	r3, [sp, #0]
 8010162:	2302      	movs	r3, #2
 8010164:	4a95      	ldr	r2, [pc, #596]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010166:	4994      	ldr	r1, [pc, #592]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010168:	4895      	ldr	r0, [pc, #596]	; (80103c0 <acquire_and_process_data+0x2d8>)
 801016a:	f7fa f881 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelX1 = indata[1];
 801016e:	4b93      	ldr	r3, [pc, #588]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010170:	785a      	ldrb	r2, [r3, #1]
 8010172:	4b96      	ldr	r3, [pc, #600]	; (80103cc <acquire_and_process_data+0x2e4>)
 8010174:	701a      	strb	r2, [r3, #0]
					outdata[0] = 0x28 | 0x80 ; // read x, low
 8010176:	4b90      	ldr	r3, [pc, #576]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010178:	22a8      	movs	r2, #168	; 0xa8
 801017a:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801017c:	f04f 33ff 	mov.w	r3, #4294967295
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	2302      	movs	r3, #2
 8010184:	4a8d      	ldr	r2, [pc, #564]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010186:	498c      	ldr	r1, [pc, #560]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010188:	488d      	ldr	r0, [pc, #564]	; (80103c0 <acquire_and_process_data+0x2d8>)
 801018a:	f7fa f871 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelX2 = indata[1];
 801018e:	4b8b      	ldr	r3, [pc, #556]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010190:	785a      	ldrb	r2, [r3, #1]
 8010192:	4b8f      	ldr	r3, [pc, #572]	; (80103d0 <acquire_and_process_data+0x2e8>)
 8010194:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8010196:	2201      	movs	r2, #1
 8010198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801019c:	4885      	ldr	r0, [pc, #532]	; (80103b4 <acquire_and_process_data+0x2cc>)
 801019e:	f7f4 f809 	bl	80041b4 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80101a2:	2200      	movs	r2, #0
 80101a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80101a8:	4882      	ldr	r0, [pc, #520]	; (80103b4 <acquire_and_process_data+0x2cc>)
 80101aa:	f7f4 f803 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x2b | 0x80 ; // read y, 0x53
 80101ae:	4b82      	ldr	r3, [pc, #520]	; (80103b8 <acquire_and_process_data+0x2d0>)
 80101b0:	22ab      	movs	r2, #171	; 0xab
 80101b2:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80101b4:	f04f 33ff 	mov.w	r3, #4294967295
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	2302      	movs	r3, #2
 80101bc:	4a7f      	ldr	r2, [pc, #508]	; (80103bc <acquire_and_process_data+0x2d4>)
 80101be:	497e      	ldr	r1, [pc, #504]	; (80103b8 <acquire_and_process_data+0x2d0>)
 80101c0:	487f      	ldr	r0, [pc, #508]	; (80103c0 <acquire_and_process_data+0x2d8>)
 80101c2:	f7fa f855 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelY1 = indata[1];
 80101c6:	4b7d      	ldr	r3, [pc, #500]	; (80103bc <acquire_and_process_data+0x2d4>)
 80101c8:	785a      	ldrb	r2, [r3, #1]
 80101ca:	4b82      	ldr	r3, [pc, #520]	; (80103d4 <acquire_and_process_data+0x2ec>)
 80101cc:	701a      	strb	r2, [r3, #0]
					outdata[0] = 0x2a | 0x80 ; // read y, low
 80101ce:	4b7a      	ldr	r3, [pc, #488]	; (80103b8 <acquire_and_process_data+0x2d0>)
 80101d0:	22aa      	movs	r2, #170	; 0xaa
 80101d2:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80101d4:	f04f 33ff 	mov.w	r3, #4294967295
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	2302      	movs	r3, #2
 80101dc:	4a77      	ldr	r2, [pc, #476]	; (80103bc <acquire_and_process_data+0x2d4>)
 80101de:	4976      	ldr	r1, [pc, #472]	; (80103b8 <acquire_and_process_data+0x2d0>)
 80101e0:	4877      	ldr	r0, [pc, #476]	; (80103c0 <acquire_and_process_data+0x2d8>)
 80101e2:	f7fa f845 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelY2 = indata[1];
 80101e6:	4b75      	ldr	r3, [pc, #468]	; (80103bc <acquire_and_process_data+0x2d4>)
 80101e8:	785a      	ldrb	r2, [r3, #1]
 80101ea:	4b7b      	ldr	r3, [pc, #492]	; (80103d8 <acquire_and_process_data+0x2f0>)
 80101ec:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80101ee:	2201      	movs	r2, #1
 80101f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80101f4:	486f      	ldr	r0, [pc, #444]	; (80103b4 <acquire_and_process_data+0x2cc>)
 80101f6:	f7f3 ffdd 	bl	80041b4 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80101fa:	2200      	movs	r2, #0
 80101fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010200:	486c      	ldr	r0, [pc, #432]	; (80103b4 <acquire_and_process_data+0x2cc>)
 8010202:	f7f3 ffd7 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x2d | 0x80 ; // read z, 0x55
 8010206:	4b6c      	ldr	r3, [pc, #432]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010208:	22ad      	movs	r2, #173	; 0xad
 801020a:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801020c:	f04f 33ff 	mov.w	r3, #4294967295
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	2302      	movs	r3, #2
 8010214:	4a69      	ldr	r2, [pc, #420]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010216:	4968      	ldr	r1, [pc, #416]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010218:	4869      	ldr	r0, [pc, #420]	; (80103c0 <acquire_and_process_data+0x2d8>)
 801021a:	f7fa f829 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelZ1 = indata[1];
 801021e:	4b67      	ldr	r3, [pc, #412]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010220:	785a      	ldrb	r2, [r3, #1]
 8010222:	4b6e      	ldr	r3, [pc, #440]	; (80103dc <acquire_and_process_data+0x2f4>)
 8010224:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8010226:	2201      	movs	r2, #1
 8010228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801022c:	4861      	ldr	r0, [pc, #388]	; (80103b4 <acquire_and_process_data+0x2cc>)
 801022e:	f7f3 ffc1 	bl	80041b4 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8010232:	2200      	movs	r2, #0
 8010234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010238:	485e      	ldr	r0, [pc, #376]	; (80103b4 <acquire_and_process_data+0x2cc>)
 801023a:	f7f3 ffbb 	bl	80041b4 <HAL_GPIO_WritePin>
					outdata[0] = 0x2c | 0x80 ; // read z, low
 801023e:	4b5e      	ldr	r3, [pc, #376]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010240:	22ac      	movs	r2, #172	; 0xac
 8010242:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8010244:	f04f 33ff 	mov.w	r3, #4294967295
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	2302      	movs	r3, #2
 801024c:	4a5b      	ldr	r2, [pc, #364]	; (80103bc <acquire_and_process_data+0x2d4>)
 801024e:	495a      	ldr	r1, [pc, #360]	; (80103b8 <acquire_and_process_data+0x2d0>)
 8010250:	485b      	ldr	r0, [pc, #364]	; (80103c0 <acquire_and_process_data+0x2d8>)
 8010252:	f7fa f80d 	bl	800a270 <HAL_SPI_TransmitReceive>
					AccelZ2 = indata[1];
 8010256:	4b59      	ldr	r3, [pc, #356]	; (80103bc <acquire_and_process_data+0x2d4>)
 8010258:	785a      	ldrb	r2, [r3, #1]
 801025a:	4b61      	ldr	r3, [pc, #388]	; (80103e0 <acquire_and_process_data+0x2f8>)
 801025c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801025e:	2201      	movs	r2, #1
 8010260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010264:	4853      	ldr	r0, [pc, #332]	; (80103b4 <acquire_and_process_data+0x2cc>)
 8010266:	f7f3 ffa5 	bl	80041b4 <HAL_GPIO_WritePin>
					int16_t AccelY;
					int32_t AccelY_mg;
					int16_t AccelZ;
					int32_t AccelZ_mg;

					AccelX= ((int16_t)AccelX1 <<8 ) | AccelX2;
 801026a:	4b58      	ldr	r3, [pc, #352]	; (80103cc <acquire_and_process_data+0x2e4>)
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	021b      	lsls	r3, r3, #8
 8010270:	b21a      	sxth	r2, r3
 8010272:	4b57      	ldr	r3, [pc, #348]	; (80103d0 <acquire_and_process_data+0x2e8>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	b21b      	sxth	r3, r3
 8010278:	4313      	orrs	r3, r2
 801027a:	857b      	strh	r3, [r7, #42]	; 0x2a
					AccelX_mg= (int32_t)((float)AccelX * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 801027c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010280:	ee07 3a90 	vmov	s15, r3
 8010284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010288:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80103e4 <acquire_and_process_data+0x2fc>
 801028c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010294:	ee17 3a90 	vmov	r3, s15
 8010298:	627b      	str	r3, [r7, #36]	; 0x24
					AccelY= ((int16_t)AccelY1 <<8 ) | AccelY2;
 801029a:	4b4e      	ldr	r3, [pc, #312]	; (80103d4 <acquire_and_process_data+0x2ec>)
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	021b      	lsls	r3, r3, #8
 80102a0:	b21a      	sxth	r2, r3
 80102a2:	4b4d      	ldr	r3, [pc, #308]	; (80103d8 <acquire_and_process_data+0x2f0>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	b21b      	sxth	r3, r3
 80102a8:	4313      	orrs	r3, r2
 80102aa:	847b      	strh	r3, [r7, #34]	; 0x22
					AccelY_mg= (int32_t)((float)AccelY * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80102ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80102b0:	ee07 3a90 	vmov	s15, r3
 80102b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102b8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80103e4 <acquire_and_process_data+0x2fc>
 80102bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102c4:	ee17 3a90 	vmov	r3, s15
 80102c8:	61fb      	str	r3, [r7, #28]
					AccelZ= ((int16_t)AccelZ1 <<8 ) | AccelZ2;
 80102ca:	4b44      	ldr	r3, [pc, #272]	; (80103dc <acquire_and_process_data+0x2f4>)
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	021b      	lsls	r3, r3, #8
 80102d0:	b21a      	sxth	r2, r3
 80102d2:	4b43      	ldr	r3, [pc, #268]	; (80103e0 <acquire_and_process_data+0x2f8>)
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	b21b      	sxth	r3, r3
 80102d8:	4313      	orrs	r3, r2
 80102da:	837b      	strh	r3, [r7, #26]
					AccelZ_mg= (int32_t)((float)AccelZ * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80102dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80102e0:	ee07 3a90 	vmov	s15, r3
 80102e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102e8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80103e4 <acquire_and_process_data+0x2fc>
 80102ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102f4:	ee17 3a90 	vmov	r3, s15
 80102f8:	617b      	str	r3, [r7, #20]

					float AccelX_inG = AccelX_mg * 0.001f; //Calculation to get measurements in the unit mG and with /1000 to G
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	ee07 3a90 	vmov	s15, r3
 8010300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010304:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80103e8 <acquire_and_process_data+0x300>
 8010308:	ee67 7a87 	vmul.f32	s15, s15, s14
 801030c:	edc7 7a04 	vstr	s15, [r7, #16]
					float AccelY_inG = AccelY_mg * 0.001f;
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	ee07 3a90 	vmov	s15, r3
 8010316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801031a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80103e8 <acquire_and_process_data+0x300>
 801031e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010322:	edc7 7a03 	vstr	s15, [r7, #12]
					float AccelZ_inG = AccelZ_mg * 0.001f;
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	ee07 3a90 	vmov	s15, r3
 801032c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010330:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80103e8 <acquire_and_process_data+0x300>
 8010334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010338:	edc7 7a02 	vstr	s15, [r7, #8]


					bufVar[bufVar_len - 1] = sqrt(AccelX_inG * AccelX_inG + AccelY_inG * AccelY_inG + AccelZ_inG * AccelZ_inG);
 801033c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010340:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010344:	edd7 7a03 	vldr	s15, [r7, #12]
 8010348:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801034c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010350:	edd7 7a02 	vldr	s15, [r7, #8]
 8010354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010358:	ee77 7a27 	vadd.f32	s15, s14, s15
 801035c:	ee17 0a90 	vmov	r0, s15
 8010360:	f7f0 f90a 	bl	8000578 <__aeabi_f2d>
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	ec43 2b10 	vmov	d0, r2, r3
 801036c:	f007 fd76 	bl	8017e5c <sqrt>
 8010370:	ec51 0b10 	vmov	r0, r1, d0
 8010374:	4b14      	ldr	r3, [pc, #80]	; (80103c8 <acquire_and_process_data+0x2e0>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	1e5c      	subs	r4, r3, #1
 801037a:	f7f0 fc05 	bl	8000b88 <__aeabi_d2f>
 801037e:	4602      	mov	r2, r0
 8010380:	491a      	ldr	r1, [pc, #104]	; (80103ec <acquire_and_process_data+0x304>)
 8010382:	00a3      	lsls	r3, r4, #2
 8010384:	440b      	add	r3, r1
 8010386:	601a      	str	r2, [r3, #0]
	while(bufVar_len < 26) {
 8010388:	4b0f      	ldr	r3, [pc, #60]	; (80103c8 <acquire_and_process_data+0x2e0>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2b19      	cmp	r3, #25
 801038e:	f77f aeb0 	ble.w	80100f2 <acquire_and_process_data+0xa>
				}
			}

			if(bufVar_len == 26) {
 8010392:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <acquire_and_process_data+0x2e0>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b1a      	cmp	r3, #26
 8010398:	f040 8091 	bne.w	80104be <acquire_and_process_data+0x3d6>
				bufVar_len = 0;
 801039c:	4b0a      	ldr	r3, [pc, #40]	; (80103c8 <acquire_and_process_data+0x2e0>)
 801039e:	2200      	movs	r2, #0
 80103a0:	601a      	str	r2, [r3, #0]
				float summ = 0;
 80103a2:	f04f 0300 	mov.w	r3, #0
 80103a6:	647b      	str	r3, [r7, #68]	; 0x44
				float sumOfSquares = 0;
 80103a8:	f04f 0300 	mov.w	r3, #0
 80103ac:	643b      	str	r3, [r7, #64]	; 0x40
				for(int i = 0; i < 26; i++) {
 80103ae:	2300      	movs	r3, #0
 80103b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103b2:	e040      	b.n	8010436 <acquire_and_process_data+0x34e>
 80103b4:	48001000 	.word	0x48001000
 80103b8:	20002b50 	.word	0x20002b50
 80103bc:	20002b4c 	.word	0x20002b4c
 80103c0:	20000b80 	.word	0x20000b80
 80103c4:	20002b53 	.word	0x20002b53
 80103c8:	20002b48 	.word	0x20002b48
 80103cc:	20002b54 	.word	0x20002b54
 80103d0:	20002b57 	.word	0x20002b57
 80103d4:	20002b55 	.word	0x20002b55
 80103d8:	20002b58 	.word	0x20002b58
 80103dc:	20002b56 	.word	0x20002b56
 80103e0:	20002b59 	.word	0x20002b59
 80103e4:	3df9db23 	.word	0x3df9db23
 80103e8:	3a83126f 	.word	0x3a83126f
 80103ec:	20002ae0 	.word	0x20002ae0
					summ += bufVar[i];
 80103f0:	4a39      	ldr	r2, [pc, #228]	; (80104d8 <acquire_and_process_data+0x3f0>)
 80103f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	4413      	add	r3, r2
 80103f8:	edd3 7a00 	vldr	s15, [r3]
 80103fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8010400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010404:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					sumOfSquares += bufVar[i] * bufVar[i];
 8010408:	4a33      	ldr	r2, [pc, #204]	; (80104d8 <acquire_and_process_data+0x3f0>)
 801040a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	ed93 7a00 	vldr	s14, [r3]
 8010414:	4a30      	ldr	r2, [pc, #192]	; (80104d8 <acquire_and_process_data+0x3f0>)
 8010416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	4413      	add	r3, r2
 801041c:	edd3 7a00 	vldr	s15, [r3]
 8010420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010424:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801042c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				for(int i = 0; i < 26; i++) {
 8010430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010432:	3301      	adds	r3, #1
 8010434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010438:	2b19      	cmp	r3, #25
 801043a:	ddd9      	ble.n	80103f0 <acquire_and_process_data+0x308>
				}
				float mean = summ / 26;
 801043c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8010440:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 8010444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010448:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				float meanSquared = mean * mean;
 801044c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010450:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010454:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

				float svmInputValue = (sumOfSquares / 26) - meanSquared;
 8010458:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801045c:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 8010460:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010464:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010468:	ee77 7a67 	vsub.f32	s15, s14, s15
 801046c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

				for (int idx=0; idx < AI_SVM_IN_NUM; idx++ )
 8010470:	2300      	movs	r3, #0
 8010472:	63bb      	str	r3, [r7, #56]	; 0x38
 8010474:	e020      	b.n	80104b8 <acquire_and_process_data+0x3d0>
				  {
				      data[idx][0] = (svmInputValue - 0.22330145150297734) * 2.5709241370783027; //using offset and factor from Orange data preprocessing
 8010476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010478:	f7f0 f87e 	bl	8000578 <__aeabi_f2d>
 801047c:	a312      	add	r3, pc, #72	; (adr r3, 80104c8 <acquire_and_process_data+0x3e0>)
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	f7ef ff19 	bl	80002b8 <__aeabi_dsub>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	4610      	mov	r0, r2
 801048c:	4619      	mov	r1, r3
 801048e:	a310      	add	r3, pc, #64	; (adr r3, 80104d0 <acquire_and_process_data+0x3e8>)
 8010490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010494:	f7f0 f8c8 	bl	8000628 <__aeabi_dmul>
 8010498:	4602      	mov	r2, r0
 801049a:	460b      	mov	r3, r1
 801049c:	4610      	mov	r0, r2
 801049e:	4619      	mov	r1, r3
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	687a      	ldr	r2, [r7, #4]
 80104a6:	4413      	add	r3, r2
 80104a8:	681c      	ldr	r4, [r3, #0]
 80104aa:	f7f0 fb6d 	bl	8000b88 <__aeabi_d2f>
 80104ae:	4603      	mov	r3, r0
 80104b0:	6023      	str	r3, [r4, #0]
				for (int idx=0; idx < AI_SVM_IN_NUM; idx++ )
 80104b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b4:	3301      	adds	r3, #1
 80104b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80104b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	dddb      	ble.n	8010476 <acquire_and_process_data+0x38e>
				  }
			}
  return 0;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	374c      	adds	r7, #76	; 0x4c
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd90      	pop	{r4, r7, pc}
 80104c8:	57ad641d 	.word	0x57ad641d
 80104cc:	3fcc9524 	.word	0x3fcc9524
 80104d0:	ac89fc95 	.word	0xac89fc95
 80104d4:	40049140 	.word	0x40049140
 80104d8:	20002ae0 	.word	0x20002ae0

080104dc <post_process>:

int post_process(ai_i8* data[])
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af02      	add	r7, sp, #8
 80104e2:	6078      	str	r0, [r7, #4]
	snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %s \r\n", (int32_t) *data[0], classes[(int) ((int32_t) *data[0])]);///////snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %d, %d, %d, %d \r\n", (int32_t) *data[0], data[0][0], data[0][1], data[0][2], data[0][3]);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f993 3000 	ldrsb.w	r3, [r3]
 80104ec:	4619      	mov	r1, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f993 3000 	ldrsb.w	r3, [r3]
 80104f6:	461a      	mov	r2, r3
 80104f8:	4b24      	ldr	r3, [pc, #144]	; (801058c <post_process+0xb0>)
 80104fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104fe:	9300      	str	r3, [sp, #0]
 8010500:	460b      	mov	r3, r1
 8010502:	4a23      	ldr	r2, [pc, #140]	; (8010590 <post_process+0xb4>)
 8010504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010508:	4822      	ldr	r0, [pc, #136]	; (8010594 <post_process+0xb8>)
 801050a:	f006 fbef 	bl	8016cec <sniprintf>
		CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 801050e:	4821      	ldr	r0, [pc, #132]	; (8010594 <post_process+0xb8>)
 8010510:	f7ef fe76 	bl	8000200 <strlen>
 8010514:	4603      	mov	r3, r0
 8010516:	4619      	mov	r1, r3
 8010518:	481e      	ldr	r0, [pc, #120]	; (8010594 <post_process+0xb8>)
 801051a:	f7fe ffab 	bl	800f474 <CDC_Transmit_FS>

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801051e:	2200      	movs	r2, #0
 8010520:	2104      	movs	r1, #4
 8010522:	481d      	ldr	r0, [pc, #116]	; (8010598 <post_process+0xbc>)
 8010524:	f7f3 fe46 	bl	80041b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8010528:	2201      	movs	r2, #1
 801052a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801052e:	481b      	ldr	r0, [pc, #108]	; (801059c <post_process+0xc0>)
 8010530:	f7f3 fe40 	bl	80041b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8010534:	2200      	movs	r2, #0
 8010536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801053a:	4819      	ldr	r0, [pc, #100]	; (80105a0 <post_process+0xc4>)
 801053c:	f7f3 fe3a 	bl	80041b4 <HAL_GPIO_WritePin>

		switch((int32_t) *data[0])
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f993 3000 	ldrsb.w	r3, [r3]
 8010548:	2b02      	cmp	r3, #2
 801054a:	d013      	beq.n	8010574 <post_process+0x98>
 801054c:	2b02      	cmp	r3, #2
 801054e:	dc18      	bgt.n	8010582 <post_process+0xa6>
 8010550:	2b00      	cmp	r3, #0
 8010552:	d002      	beq.n	801055a <post_process+0x7e>
 8010554:	2b01      	cmp	r3, #1
 8010556:	d006      	beq.n	8010566 <post_process+0x8a>
 8010558:	e013      	b.n	8010582 <post_process+0xa6>
		    {
		        case 0:
		        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801055a:	2201      	movs	r2, #1
 801055c:	2104      	movs	r1, #4
 801055e:	480e      	ldr	r0, [pc, #56]	; (8010598 <post_process+0xbc>)
 8010560:	f7f3 fe28 	bl	80041b4 <HAL_GPIO_WritePin>
		            break;
 8010564:	e00d      	b.n	8010582 <post_process+0xa6>
		        case 1:
		        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8010566:	2200      	movs	r2, #0
 8010568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801056c:	480b      	ldr	r0, [pc, #44]	; (801059c <post_process+0xc0>)
 801056e:	f7f3 fe21 	bl	80041b4 <HAL_GPIO_WritePin>
		        	break;
 8010572:	e006      	b.n	8010582 <post_process+0xa6>
		        case 2:
		        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8010574:	2201      	movs	r2, #1
 8010576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801057a:	4809      	ldr	r0, [pc, #36]	; (80105a0 <post_process+0xc4>)
 801057c:	f7f3 fe1a 	bl	80041b4 <HAL_GPIO_WritePin>
		        	break;
 8010580:	bf00      	nop
		    }
  return 0;
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	20000190 	.word	0x20000190
 8010590:	08018d7c 	.word	0x08018d7c
 8010594:	200029e0 	.word	0x200029e0
 8010598:	48001400 	.word	0x48001400
 801059c:	48001800 	.word	0x48001800
 80105a0:	48000400 	.word	0x48000400

080105a4 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 5 */

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80105aa:	2200      	movs	r2, #0
 80105ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80105b0:	4826      	ldr	r0, [pc, #152]	; (801064c <MX_X_CUBE_AI_Init+0xa8>)
 80105b2:	f7f3 fdff 	bl	80041b4 <HAL_GPIO_WritePin>
		outdata[0] = 0x0f | 0x80 ; // read whoami
 80105b6:	4b26      	ldr	r3, [pc, #152]	; (8010650 <MX_X_CUBE_AI_Init+0xac>)
 80105b8:	228f      	movs	r2, #143	; 0x8f
 80105ba:	701a      	strb	r2, [r3, #0]
		HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80105bc:	f04f 33ff 	mov.w	r3, #4294967295
 80105c0:	9300      	str	r3, [sp, #0]
 80105c2:	2302      	movs	r3, #2
 80105c4:	4a23      	ldr	r2, [pc, #140]	; (8010654 <MX_X_CUBE_AI_Init+0xb0>)
 80105c6:	4922      	ldr	r1, [pc, #136]	; (8010650 <MX_X_CUBE_AI_Init+0xac>)
 80105c8:	4823      	ldr	r0, [pc, #140]	; (8010658 <MX_X_CUBE_AI_Init+0xb4>)
 80105ca:	f7f9 fe51 	bl	800a270 <HAL_SPI_TransmitReceive>
		lis_id = indata[1];
 80105ce:	4b21      	ldr	r3, [pc, #132]	; (8010654 <MX_X_CUBE_AI_Init+0xb0>)
 80105d0:	785a      	ldrb	r2, [r3, #1]
 80105d2:	4b22      	ldr	r3, [pc, #136]	; (801065c <MX_X_CUBE_AI_Init+0xb8>)
 80105d4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80105d6:	2201      	movs	r2, #1
 80105d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80105dc:	481b      	ldr	r0, [pc, #108]	; (801064c <MX_X_CUBE_AI_Init+0xa8>)
 80105de:	f7f3 fde9 	bl	80041b4 <HAL_GPIO_WritePin>

		snprintf(SendBuffer,BUFSIZE,"[ID:%02x] \r\n",lis_id);
 80105e2:	4b1e      	ldr	r3, [pc, #120]	; (801065c <MX_X_CUBE_AI_Init+0xb8>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	4a1e      	ldr	r2, [pc, #120]	; (8010660 <MX_X_CUBE_AI_Init+0xbc>)
 80105e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80105ec:	481d      	ldr	r0, [pc, #116]	; (8010664 <MX_X_CUBE_AI_Init+0xc0>)
 80105ee:	f006 fb7d 	bl	8016cec <sniprintf>
		CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80105f2:	481c      	ldr	r0, [pc, #112]	; (8010664 <MX_X_CUBE_AI_Init+0xc0>)
 80105f4:	f7ef fe04 	bl	8000200 <strlen>
 80105f8:	4603      	mov	r3, r0
 80105fa:	4619      	mov	r1, r3
 80105fc:	4819      	ldr	r0, [pc, #100]	; (8010664 <MX_X_CUBE_AI_Init+0xc0>)
 80105fe:	f7fe ff39 	bl	800f474 <CDC_Transmit_FS>

		// sensor setup (activation and setting frequency)
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8010602:	2200      	movs	r2, #0
 8010604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010608:	4810      	ldr	r0, [pc, #64]	; (801064c <MX_X_CUBE_AI_Init+0xa8>)
 801060a:	f7f3 fdd3 	bl	80041b4 <HAL_GPIO_WritePin>

		outdata[0] = 0x10 ; // register used for setting up the accelerometer
 801060e:	4b10      	ldr	r3, [pc, #64]	; (8010650 <MX_X_CUBE_AI_Init+0xac>)
 8010610:	2210      	movs	r2, #16
 8010612:	701a      	strb	r2, [r3, #0]
		outdata[1] = 0x28 ; // set frequency to 26Hz and FS to 4g
 8010614:	4b0e      	ldr	r3, [pc, #56]	; (8010650 <MX_X_CUBE_AI_Init+0xac>)
 8010616:	2228      	movs	r2, #40	; 0x28
 8010618:	705a      	strb	r2, [r3, #1]
		HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 801061a:	f04f 33ff 	mov.w	r3, #4294967295
 801061e:	9300      	str	r3, [sp, #0]
 8010620:	2302      	movs	r3, #2
 8010622:	4a0c      	ldr	r2, [pc, #48]	; (8010654 <MX_X_CUBE_AI_Init+0xb0>)
 8010624:	490a      	ldr	r1, [pc, #40]	; (8010650 <MX_X_CUBE_AI_Init+0xac>)
 8010626:	480c      	ldr	r0, [pc, #48]	; (8010658 <MX_X_CUBE_AI_Init+0xb4>)
 8010628:	f7f9 fe22 	bl	800a270 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801062c:	2201      	movs	r2, #1
 801062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010632:	4806      	ldr	r0, [pc, #24]	; (801064c <MX_X_CUBE_AI_Init+0xa8>)
 8010634:	f7f3 fdbe 	bl	80041b4 <HAL_GPIO_WritePin>


  printf("\r\nTEMPLATE - initialization\r\n");
 8010638:	480b      	ldr	r0, [pc, #44]	; (8010668 <MX_X_CUBE_AI_Init+0xc4>)
 801063a:	f006 fb3f 	bl	8016cbc <puts>

  ai_boostrap(data_activations0);
 801063e:	480b      	ldr	r0, [pc, #44]	; (801066c <MX_X_CUBE_AI_Init+0xc8>)
 8010640:	f7ff fcc4 	bl	800ffcc <ai_boostrap>
    /* USER CODE END 5 */
}
 8010644:	bf00      	nop
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	48001000 	.word	0x48001000
 8010650:	20002b50 	.word	0x20002b50
 8010654:	20002b4c 	.word	0x20002b4c
 8010658:	20000b80 	.word	0x20000b80
 801065c:	20002b52 	.word	0x20002b52
 8010660:	08018d90 	.word	0x08018d90
 8010664:	200029e0 	.word	0x200029e0
 8010668:	08018da0 	.word	0x08018da0
 801066c:	2000019c 	.word	0x2000019c

08010670 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8010676:	f04f 33ff 	mov.w	r3, #4294967295
 801067a:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 801067c:	4816      	ldr	r0, [pc, #88]	; (80106d8 <MX_X_CUBE_AI_Process+0x68>)
 801067e:	f006 fb1d 	bl	8016cbc <puts>

  if (svm) {
 8010682:	4b16      	ldr	r3, [pc, #88]	; (80106dc <MX_X_CUBE_AI_Process+0x6c>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d013      	beq.n	80106b2 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 801068a:	4815      	ldr	r0, [pc, #84]	; (80106e0 <MX_X_CUBE_AI_Process+0x70>)
 801068c:	f7ff fd2c 	bl	80100e8 <acquire_and_process_data>
 8010690:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8010698:	f7ff fcfc 	bl	8010094 <ai_run>
 801069c:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d103      	bne.n	80106ac <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80106a4:	480f      	ldr	r0, [pc, #60]	; (80106e4 <MX_X_CUBE_AI_Process+0x74>)
 80106a6:	f7ff ff19 	bl	80104dc <post_process>
 80106aa:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d0eb      	beq.n	801068a <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00a      	beq.n	80106ce <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80106b8:	2311      	movs	r3, #17
 80106ba:	703b      	strb	r3, [r7, #0]
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	2210      	movs	r2, #16
 80106c0:	f362 231f 	bfi	r3, r2, #8, #24
 80106c4:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80106c6:	4908      	ldr	r1, [pc, #32]	; (80106e8 <MX_X_CUBE_AI_Process+0x78>)
 80106c8:	6838      	ldr	r0, [r7, #0]
 80106ca:	f7ff fc5f 	bl	800ff8c <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80106ce:	bf00      	nop
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	08018dc0 	.word	0x08018dc0
 80106dc:	20002e08 	.word	0x20002e08
 80106e0:	20002b5c 	.word	0x20002b5c
 80106e4:	20002b60 	.word	0x20002b60
 80106e8:	08018ddc 	.word	0x08018ddc

080106ec <svm_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool svm_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_svm_activations_map, 1, params)) {
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	2101      	movs	r1, #1
 80106fa:	4827      	ldr	r0, [pc, #156]	; (8010798 <svm_configure_activations+0xac>)
 80106fc:	f000 faea 	bl	8010cd4 <ai_platform_get_activations_map>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d03d      	beq.n	8010782 <svm_configure_activations+0x96>
    /* Updating activations (byte) offsets */
    
    float_input_output_array.data = AI_PTR(g_svm_activations_map[0] + 0);
 8010706:	4b24      	ldr	r3, [pc, #144]	; (8010798 <svm_configure_activations+0xac>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a24      	ldr	r2, [pc, #144]	; (801079c <svm_configure_activations+0xb0>)
 801070c:	6093      	str	r3, [r2, #8]
    float_input_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 0);
 801070e:	4b22      	ldr	r3, [pc, #136]	; (8010798 <svm_configure_activations+0xac>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a22      	ldr	r2, [pc, #136]	; (801079c <svm_configure_activations+0xb0>)
 8010714:	60d3      	str	r3, [r2, #12]
    
    label_scratch0_array.data = AI_PTR(g_svm_activations_map[0] + 4);
 8010716:	4b20      	ldr	r3, [pc, #128]	; (8010798 <svm_configure_activations+0xac>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	3304      	adds	r3, #4
 801071c:	4a20      	ldr	r2, [pc, #128]	; (80107a0 <svm_configure_activations+0xb4>)
 801071e:	6093      	str	r3, [r2, #8]
    label_scratch0_array.data_start = AI_PTR(g_svm_activations_map[0] + 4);
 8010720:	4b1d      	ldr	r3, [pc, #116]	; (8010798 <svm_configure_activations+0xac>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	3304      	adds	r3, #4
 8010726:	4a1e      	ldr	r2, [pc, #120]	; (80107a0 <svm_configure_activations+0xb4>)
 8010728:	60d3      	str	r3, [r2, #12]
    
    label_output0_array.data = AI_PTR(g_svm_activations_map[0] + 632);
 801072a:	4b1b      	ldr	r3, [pc, #108]	; (8010798 <svm_configure_activations+0xac>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010732:	4a1c      	ldr	r2, [pc, #112]	; (80107a4 <svm_configure_activations+0xb8>)
 8010734:	6093      	str	r3, [r2, #8]
    label_output0_array.data_start = AI_PTR(g_svm_activations_map[0] + 632);
 8010736:	4b18      	ldr	r3, [pc, #96]	; (8010798 <svm_configure_activations+0xac>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801073e:	4a19      	ldr	r2, [pc, #100]	; (80107a4 <svm_configure_activations+0xb8>)
 8010740:	60d3      	str	r3, [r2, #12]
    
    label_output1_array.data = AI_PTR(g_svm_activations_map[0] + 636);
 8010742:	4b15      	ldr	r3, [pc, #84]	; (8010798 <svm_configure_activations+0xac>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801074a:	4a17      	ldr	r2, [pc, #92]	; (80107a8 <svm_configure_activations+0xbc>)
 801074c:	6093      	str	r3, [r2, #8]
    label_output1_array.data_start = AI_PTR(g_svm_activations_map[0] + 636);
 801074e:	4b12      	ldr	r3, [pc, #72]	; (8010798 <svm_configure_activations+0xac>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010756:	4a14      	ldr	r2, [pc, #80]	; (80107a8 <svm_configure_activations+0xbc>)
 8010758:	60d3      	str	r3, [r2, #12]
    
    output_probability_output_array.data = AI_PTR(g_svm_activations_map[0] + 0);
 801075a:	4b0f      	ldr	r3, [pc, #60]	; (8010798 <svm_configure_activations+0xac>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	4a13      	ldr	r2, [pc, #76]	; (80107ac <svm_configure_activations+0xc0>)
 8010760:	6093      	str	r3, [r2, #8]
    output_probability_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 0);
 8010762:	4b0d      	ldr	r3, [pc, #52]	; (8010798 <svm_configure_activations+0xac>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a11      	ldr	r2, [pc, #68]	; (80107ac <svm_configure_activations+0xc0>)
 8010768:	60d3      	str	r3, [r2, #12]
    
    output_label_output_array.data = AI_PTR(g_svm_activations_map[0] + 24);
 801076a:	4b0b      	ldr	r3, [pc, #44]	; (8010798 <svm_configure_activations+0xac>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3318      	adds	r3, #24
 8010770:	4a0f      	ldr	r2, [pc, #60]	; (80107b0 <svm_configure_activations+0xc4>)
 8010772:	6093      	str	r3, [r2, #8]
    output_label_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 24);
 8010774:	4b08      	ldr	r3, [pc, #32]	; (8010798 <svm_configure_activations+0xac>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	3318      	adds	r3, #24
 801077a:	4a0d      	ldr	r2, [pc, #52]	; (80107b0 <svm_configure_activations+0xc4>)
 801077c:	60d3      	str	r3, [r2, #12]
    
    return true;
 801077e:	2301      	movs	r3, #1
 8010780:	e005      	b.n	801078e <svm_configure_activations+0xa2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8010782:	2213      	movs	r2, #19
 8010784:	2130      	movs	r1, #48	; 0x30
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 fb88 	bl	8010e9c <ai_platform_network_set_error>
  return false;
 801078c:	2300      	movs	r3, #0
}
 801078e:	4618      	mov	r0, r3
 8010790:	3708      	adds	r7, #8
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	20002e14 	.word	0x20002e14
 801079c:	200001f0 	.word	0x200001f0
 80107a0:	200001b0 	.word	0x200001b0
 80107a4:	20000200 	.word	0x20000200
 80107a8:	20000220 	.word	0x20000220
 80107ac:	20000230 	.word	0x20000230
 80107b0:	20000250 	.word	0x20000250

080107b4 <svm_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool svm_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_svm_weights_map, 1, params)) {
 80107be:	683a      	ldr	r2, [r7, #0]
 80107c0:	2101      	movs	r1, #1
 80107c2:	4849      	ldr	r0, [pc, #292]	; (80108e8 <svm_configure_weights+0x134>)
 80107c4:	f000 fa32 	bl	8010c2c <ai_platform_get_weights_map>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f000 8082 	beq.w	80108d4 <svm_configure_weights+0x120>
    /* Updating weights (byte) offsets */
    
    label_rho_array.format |= AI_FMT_FLAG_CONST;
 80107d0:	4b46      	ldr	r3, [pc, #280]	; (80108ec <svm_configure_weights+0x138>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107d8:	4a44      	ldr	r2, [pc, #272]	; (80108ec <svm_configure_weights+0x138>)
 80107da:	6013      	str	r3, [r2, #0]
    label_rho_array.data = AI_PTR(g_svm_weights_map[0] + 0);
 80107dc:	4b42      	ldr	r3, [pc, #264]	; (80108e8 <svm_configure_weights+0x134>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4a42      	ldr	r2, [pc, #264]	; (80108ec <svm_configure_weights+0x138>)
 80107e2:	6093      	str	r3, [r2, #8]
    label_rho_array.data_start = AI_PTR(g_svm_weights_map[0] + 0);
 80107e4:	4b40      	ldr	r3, [pc, #256]	; (80108e8 <svm_configure_weights+0x134>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4a40      	ldr	r2, [pc, #256]	; (80108ec <svm_configure_weights+0x138>)
 80107ea:	60d3      	str	r3, [r2, #12]
    
    label_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 80107ec:	4b40      	ldr	r3, [pc, #256]	; (80108f0 <svm_configure_weights+0x13c>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107f4:	4a3e      	ldr	r2, [pc, #248]	; (80108f0 <svm_configure_weights+0x13c>)
 80107f6:	6013      	str	r3, [r2, #0]
    label_classlabels_ints_array.data = AI_PTR(g_svm_weights_map[0] + 12);
 80107f8:	4b3b      	ldr	r3, [pc, #236]	; (80108e8 <svm_configure_weights+0x134>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	330c      	adds	r3, #12
 80107fe:	4a3c      	ldr	r2, [pc, #240]	; (80108f0 <svm_configure_weights+0x13c>)
 8010800:	6093      	str	r3, [r2, #8]
    label_classlabels_ints_array.data_start = AI_PTR(g_svm_weights_map[0] + 12);
 8010802:	4b39      	ldr	r3, [pc, #228]	; (80108e8 <svm_configure_weights+0x134>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	330c      	adds	r3, #12
 8010808:	4a39      	ldr	r2, [pc, #228]	; (80108f0 <svm_configure_weights+0x13c>)
 801080a:	60d3      	str	r3, [r2, #12]
    
    label_vectors_per_class_array.format |= AI_FMT_FLAG_CONST;
 801080c:	4b39      	ldr	r3, [pc, #228]	; (80108f4 <svm_configure_weights+0x140>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010814:	4a37      	ldr	r2, [pc, #220]	; (80108f4 <svm_configure_weights+0x140>)
 8010816:	6013      	str	r3, [r2, #0]
    label_vectors_per_class_array.data = AI_PTR(g_svm_weights_map[0] + 16);
 8010818:	4b33      	ldr	r3, [pc, #204]	; (80108e8 <svm_configure_weights+0x134>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	3310      	adds	r3, #16
 801081e:	4a35      	ldr	r2, [pc, #212]	; (80108f4 <svm_configure_weights+0x140>)
 8010820:	6093      	str	r3, [r2, #8]
    label_vectors_per_class_array.data_start = AI_PTR(g_svm_weights_map[0] + 16);
 8010822:	4b31      	ldr	r3, [pc, #196]	; (80108e8 <svm_configure_weights+0x134>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3310      	adds	r3, #16
 8010828:	4a32      	ldr	r2, [pc, #200]	; (80108f4 <svm_configure_weights+0x140>)
 801082a:	60d3      	str	r3, [r2, #12]
    
    label_prob_a_array.format |= AI_FMT_FLAG_CONST;
 801082c:	4b32      	ldr	r3, [pc, #200]	; (80108f8 <svm_configure_weights+0x144>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010834:	4a30      	ldr	r2, [pc, #192]	; (80108f8 <svm_configure_weights+0x144>)
 8010836:	6013      	str	r3, [r2, #0]
    label_prob_a_array.data = AI_PTR(g_svm_weights_map[0] + 20);
 8010838:	4b2b      	ldr	r3, [pc, #172]	; (80108e8 <svm_configure_weights+0x134>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	3314      	adds	r3, #20
 801083e:	4a2e      	ldr	r2, [pc, #184]	; (80108f8 <svm_configure_weights+0x144>)
 8010840:	6093      	str	r3, [r2, #8]
    label_prob_a_array.data_start = AI_PTR(g_svm_weights_map[0] + 20);
 8010842:	4b29      	ldr	r3, [pc, #164]	; (80108e8 <svm_configure_weights+0x134>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	3314      	adds	r3, #20
 8010848:	4a2b      	ldr	r2, [pc, #172]	; (80108f8 <svm_configure_weights+0x144>)
 801084a:	60d3      	str	r3, [r2, #12]
    
    label_prob_b_array.format |= AI_FMT_FLAG_CONST;
 801084c:	4b2b      	ldr	r3, [pc, #172]	; (80108fc <svm_configure_weights+0x148>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010854:	4a29      	ldr	r2, [pc, #164]	; (80108fc <svm_configure_weights+0x148>)
 8010856:	6013      	str	r3, [r2, #0]
    label_prob_b_array.data = AI_PTR(g_svm_weights_map[0] + 32);
 8010858:	4b23      	ldr	r3, [pc, #140]	; (80108e8 <svm_configure_weights+0x134>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	3320      	adds	r3, #32
 801085e:	4a27      	ldr	r2, [pc, #156]	; (80108fc <svm_configure_weights+0x148>)
 8010860:	6093      	str	r3, [r2, #8]
    label_prob_b_array.data_start = AI_PTR(g_svm_weights_map[0] + 32);
 8010862:	4b21      	ldr	r3, [pc, #132]	; (80108e8 <svm_configure_weights+0x134>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	3320      	adds	r3, #32
 8010868:	4a24      	ldr	r2, [pc, #144]	; (80108fc <svm_configure_weights+0x148>)
 801086a:	60d3      	str	r3, [r2, #12]
    
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 801086c:	4b24      	ldr	r3, [pc, #144]	; (8010900 <svm_configure_weights+0x14c>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010874:	4a22      	ldr	r2, [pc, #136]	; (8010900 <svm_configure_weights+0x14c>)
 8010876:	6013      	str	r3, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_svm_weights_map[0] + 44);
 8010878:	4b1b      	ldr	r3, [pc, #108]	; (80108e8 <svm_configure_weights+0x134>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	332c      	adds	r3, #44	; 0x2c
 801087e:	4a20      	ldr	r2, [pc, #128]	; (8010900 <svm_configure_weights+0x14c>)
 8010880:	6093      	str	r3, [r2, #8]
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_svm_weights_map[0] + 44);
 8010882:	4b19      	ldr	r3, [pc, #100]	; (80108e8 <svm_configure_weights+0x134>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	332c      	adds	r3, #44	; 0x2c
 8010888:	4a1d      	ldr	r2, [pc, #116]	; (8010900 <svm_configure_weights+0x14c>)
 801088a:	60d3      	str	r3, [r2, #12]
    
    label_coefficients_array.format |= AI_FMT_FLAG_CONST;
 801088c:	4b1d      	ldr	r3, [pc, #116]	; (8010904 <svm_configure_weights+0x150>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010894:	4a1b      	ldr	r2, [pc, #108]	; (8010904 <svm_configure_weights+0x150>)
 8010896:	6013      	str	r3, [r2, #0]
    label_coefficients_array.data = AI_PTR(g_svm_weights_map[0] + 48);
 8010898:	4b13      	ldr	r3, [pc, #76]	; (80108e8 <svm_configure_weights+0x134>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3330      	adds	r3, #48	; 0x30
 801089e:	4a19      	ldr	r2, [pc, #100]	; (8010904 <svm_configure_weights+0x150>)
 80108a0:	6093      	str	r3, [r2, #8]
    label_coefficients_array.data_start = AI_PTR(g_svm_weights_map[0] + 48);
 80108a2:	4b11      	ldr	r3, [pc, #68]	; (80108e8 <svm_configure_weights+0x134>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3330      	adds	r3, #48	; 0x30
 80108a8:	4a16      	ldr	r2, [pc, #88]	; (8010904 <svm_configure_weights+0x150>)
 80108aa:	60d3      	str	r3, [r2, #12]
    
    label_support_vectors_array.format |= AI_FMT_FLAG_CONST;
 80108ac:	4b16      	ldr	r3, [pc, #88]	; (8010908 <svm_configure_weights+0x154>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80108b4:	4a14      	ldr	r2, [pc, #80]	; (8010908 <svm_configure_weights+0x154>)
 80108b6:	6013      	str	r3, [r2, #0]
    label_support_vectors_array.data = AI_PTR(g_svm_weights_map[0] + 1112);
 80108b8:	4b0b      	ldr	r3, [pc, #44]	; (80108e8 <svm_configure_weights+0x134>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80108c0:	4a11      	ldr	r2, [pc, #68]	; (8010908 <svm_configure_weights+0x154>)
 80108c2:	6093      	str	r3, [r2, #8]
    label_support_vectors_array.data_start = AI_PTR(g_svm_weights_map[0] + 1112);
 80108c4:	4b08      	ldr	r3, [pc, #32]	; (80108e8 <svm_configure_weights+0x134>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80108cc:	4a0e      	ldr	r2, [pc, #56]	; (8010908 <svm_configure_weights+0x154>)
 80108ce:	60d3      	str	r3, [r2, #12]
    
    return true;
 80108d0:	2301      	movs	r3, #1
 80108d2:	e005      	b.n	80108e0 <svm_configure_weights+0x12c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80108d4:	2212      	movs	r2, #18
 80108d6:	2130      	movs	r1, #48	; 0x30
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 fadf 	bl	8010e9c <ai_platform_network_set_error>
  return false;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	20002e18 	.word	0x20002e18
 80108ec:	200001a0 	.word	0x200001a0
 80108f0:	200001c0 	.word	0x200001c0
 80108f4:	200001d0 	.word	0x200001d0
 80108f8:	200001e0 	.word	0x200001e0
 80108fc:	20000210 	.word	0x20000210
 8010900:	20000240 	.word	0x20000240
 8010904:	20000260 	.word	0x20000260
 8010908:	20000270 	.word	0x20000270

0801090c <ai_svm_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_svm_get_error(ai_handle network)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f000 fa53 	bl	8010dc0 <ai_platform_network_get_error>
 801091a:	4603      	mov	r3, r0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <ai_svm_create>:

AI_API_ENTRY
ai_error ai_svm_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af02      	add	r7, sp, #8
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801092e:	2300      	movs	r3, #0
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	2305      	movs	r3, #5
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	2301      	movs	r3, #1
 8010938:	4a04      	ldr	r2, [pc, #16]	; (801094c <ai_svm_create+0x28>)
 801093a:	6839      	ldr	r1, [r7, #0]
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f000 fc59 	bl	80111f4 <ai_platform_network_create>
 8010942:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	20000798 	.word	0x20000798

08010950 <ai_svm_create_and_init>:

AI_API_ENTRY
ai_error ai_svm_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b096      	sub	sp, #88	; 0x58
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_svm_create(network, AI_SVM_DATA_CONFIG);
 801095c:	2100      	movs	r1, #0
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f7ff ffe0 	bl	8010924 <ai_svm_create>
 8010964:	4603      	mov	r3, r0
 8010966:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8010968:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <ai_svm_create_and_init+0x24>
        return err;
 8010970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010972:	e05d      	b.n	8010a30 <ai_svm_create_and_init+0xe0>
    if (ai_svm_data_params_get(&params) != true) {
 8010974:	f107 0314 	add.w	r3, r7, #20
 8010978:	4618      	mov	r0, r3
 801097a:	f000 f8dd 	bl	8010b38 <ai_svm_data_params_get>
 801097e:	4603      	mov	r3, r0
 8010980:	f083 0301 	eor.w	r3, r3, #1
 8010984:	b2db      	uxtb	r3, r3
 8010986:	2b00      	cmp	r3, #0
 8010988:	d008      	beq.n	801099c <ai_svm_create_and_init+0x4c>
        err = ai_svm_get_error(*network);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4618      	mov	r0, r3
 8010990:	f7ff ffbc 	bl	801090c <ai_svm_get_error>
 8010994:	4603      	mov	r3, r0
 8010996:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8010998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801099a:	e049      	b.n	8010a30 <ai_svm_create_and_init+0xe0>
    }
#if defined(AI_SVM_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d016      	beq.n	80109d0 <ai_svm_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80109a2:	2300      	movs	r3, #0
 80109a4:	657b      	str	r3, [r7, #84]	; 0x54
 80109a6:	e00e      	b.n	80109c6 <ai_svm_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80109a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	4413      	add	r3, r2
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	f107 0314 	add.w	r3, r7, #20
 80109b8:	330c      	adds	r3, #12
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 f922 	bl	8010c04 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80109c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109c2:	3301      	adds	r3, #1
 80109c4:	657b      	str	r3, [r7, #84]	; 0x54
 80109c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109c8:	461a      	mov	r2, r3
 80109ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109cc:	4293      	cmp	r3, r2
 80109ce:	dbeb      	blt.n	80109a8 <ai_svm_create_and_init+0x58>
    }
#endif
#if defined(AI_SVM_DATA_WEIGHTS_COUNT)
    if (weights) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d016      	beq.n	8010a04 <ai_svm_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80109d6:	2300      	movs	r3, #0
 80109d8:	653b      	str	r3, [r7, #80]	; 0x50
 80109da:	e00e      	b.n	80109fa <ai_svm_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80109dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	4413      	add	r3, r2
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	f107 0314 	add.w	r3, r7, #20
 80109ec:	3304      	adds	r3, #4
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 f908 	bl	8010c04 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80109f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109f6:	3301      	adds	r3, #1
 80109f8:	653b      	str	r3, [r7, #80]	; 0x50
 80109fa:	8b7b      	ldrh	r3, [r7, #26]
 80109fc:	461a      	mov	r2, r3
 80109fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a00:	4293      	cmp	r3, r2
 8010a02:	dbeb      	blt.n	80109dc <ai_svm_create_and_init+0x8c>
    }
#endif
    if (ai_svm_init(*network, &params) != true) {
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f107 0214 	add.w	r2, r7, #20
 8010a0c:	4611      	mov	r1, r2
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f000 f846 	bl	8010aa0 <ai_svm_init>
 8010a14:	4603      	mov	r3, r0
 8010a16:	f083 0301 	eor.w	r3, r3, #1
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d006      	beq.n	8010a2e <ai_svm_create_and_init+0xde>
        err = ai_svm_get_error(*network);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7ff ff71 	bl	801090c <ai_svm_get_error>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8010a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3758      	adds	r7, #88	; 0x58
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <ai_svm_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_svm_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d104      	bne.n	8010a52 <ai_svm_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8010a48:	4b06      	ldr	r3, [pc, #24]	; (8010a64 <ai_svm_inputs_get+0x2c>)
 8010a4a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4a06      	ldr	r2, [pc, #24]	; (8010a68 <ai_svm_inputs_get+0x30>)
 8010a50:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 fa27 	bl	8010ea8 <ai_platform_inputs_get>
 8010a5a:	4603      	mov	r3, r0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	20000798 	.word	0x20000798
 8010a68:	a1c00100 	.word	0xa1c00100

08010a6c <ai_svm_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_svm_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d104      	bne.n	8010a86 <ai_svm_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8010a7c:	4b06      	ldr	r3, [pc, #24]	; (8010a98 <ai_svm_outputs_get+0x2c>)
 8010a7e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	4a06      	ldr	r2, [pc, #24]	; (8010a9c <ai_svm_outputs_get+0x30>)
 8010a84:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8010a86:	6839      	ldr	r1, [r7, #0]
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 fae3 	bl	8011054 <ai_platform_outputs_get>
 8010a8e:	4603      	mov	r3, r0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	20000798 	.word	0x20000798
 8010a9c:	a1c00100 	.word	0xa1c00100

08010aa0 <ai_svm_init>:
}

AI_API_ENTRY
ai_bool ai_svm_init(
  ai_handle network, const ai_network_params* params)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 fc77 	bl	80113a0 <ai_platform_network_init>
 8010ab2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d101      	bne.n	8010abe <ai_svm_init+0x1e>
 8010aba:	2300      	movs	r3, #0
 8010abc:	e028      	b.n	8010b10 <ai_svm_init+0x70>

  ai_bool ok = true;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	72fb      	strb	r3, [r7, #11]
  ok &= svm_configure_weights(net_ctx, params);
 8010ac2:	6839      	ldr	r1, [r7, #0]
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f7ff fe75 	bl	80107b4 <svm_configure_weights>
 8010aca:	4603      	mov	r3, r0
 8010acc:	461a      	mov	r2, r3
 8010ace:	7afb      	ldrb	r3, [r7, #11]
 8010ad0:	4013      	ands	r3, r2
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	bf14      	ite	ne
 8010ad6:	2301      	movne	r3, #1
 8010ad8:	2300      	moveq	r3, #0
 8010ada:	72fb      	strb	r3, [r7, #11]
  ok &= svm_configure_activations(net_ctx, params);
 8010adc:	6839      	ldr	r1, [r7, #0]
 8010ade:	68f8      	ldr	r0, [r7, #12]
 8010ae0:	f7ff fe04 	bl	80106ec <svm_configure_activations>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	7afb      	ldrb	r3, [r7, #11]
 8010aea:	4013      	ands	r3, r2
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	bf14      	ite	ne
 8010af0:	2301      	movne	r3, #1
 8010af2:	2300      	moveq	r3, #0
 8010af4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fd40 	bl	801157c <ai_platform_network_post_init>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	7afb      	ldrb	r3, [r7, #11]
 8010b02:	4013      	ands	r3, r2
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	bf14      	ite	ne
 8010b08:	2301      	movne	r3, #1
 8010b0a:	2300      	moveq	r3, #0
 8010b0c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <ai_svm_run>:


AI_API_ENTRY
ai_i32 ai_svm_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	68b9      	ldr	r1, [r7, #8]
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	f000 fdaf 	bl	801168c <ai_platform_network_process>
 8010b2e:	4603      	mov	r3, r0
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3710      	adds	r7, #16
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <ai_svm_data_params_get>:
 * @ingroup svm_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_svm_data_params_get(ai_network_params* params)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b086      	sub	sp, #24
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d101      	bne.n	8010b4a <ai_svm_data_params_get+0x12>
 8010b46:	2300      	movs	r3, #0
 8010b48:	e016      	b.n	8010b78 <ai_svm_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8010b4a:	4a0d      	ldr	r2, [pc, #52]	; (8010b80 <ai_svm_data_params_get+0x48>)
 8010b4c:	f107 0310 	add.w	r3, r7, #16
 8010b50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b54:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SVM_DATA_ACTIVATIONS_COUNT, g_svm_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8010b58:	4a0a      	ldr	r2, [pc, #40]	; (8010b84 <ai_svm_data_params_get+0x4c>)
 8010b5a:	f107 0308 	add.w	r3, r7, #8
 8010b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b62:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SVM_DATA_WEIGHTS_COUNT, g_svm_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8010b66:	f107 0210 	add.w	r2, r7, #16
 8010b6a:	f107 0308 	add.w	r3, r7, #8
 8010b6e:	4619      	mov	r1, r3
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 f903 	bl	8010d7c <ai_platform_bind_network_params>
 8010b76:	4603      	mov	r3, r0
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3718      	adds	r7, #24
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	08018e10 	.word	0x08018e10
 8010b84:	08018e18 	.word	0x08018e18

08010b88 <ai_buffer_get_size>:
 8010b88:	b378      	cbz	r0, 8010bea <ai_buffer_get_size+0x62>
 8010b8a:	b410      	push	{r4}
 8010b8c:	6803      	ldr	r3, [r0, #0]
 8010b8e:	4a17      	ldr	r2, [pc, #92]	; (8010bec <ai_buffer_get_size+0x64>)
 8010b90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8010b94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d01e      	beq.n	8010bda <ai_buffer_get_size+0x52>
 8010b9c:	6984      	ldr	r4, [r0, #24]
 8010b9e:	6862      	ldr	r2, [r4, #4]
 8010ba0:	7d03      	ldrb	r3, [r0, #20]
 8010ba2:	6941      	ldr	r1, [r0, #20]
 8010ba4:	f1a3 0301 	sub.w	r3, r3, #1
 8010ba8:	fab3 f383 	clz	r3, r3
 8010bac:	095b      	lsrs	r3, r3, #5
 8010bae:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8010bb2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010bb6:	da0b      	bge.n	8010bd0 <ai_buffer_get_size+0x48>
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d102      	bne.n	8010bc2 <ai_buffer_get_size+0x3a>
 8010bbc:	2802      	cmp	r0, #2
 8010bbe:	d007      	beq.n	8010bd0 <ai_buffer_get_size+0x48>
 8010bc0:	2302      	movs	r3, #2
 8010bc2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010bc6:	3301      	adds	r3, #1
 8010bc8:	4298      	cmp	r0, r3
 8010bca:	fb01 f202 	mul.w	r2, r1, r2
 8010bce:	d1f3      	bne.n	8010bb8 <ai_buffer_get_size+0x30>
 8010bd0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8010bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bd8:	4770      	bx	lr
 8010bda:	2900      	cmp	r1, #0
 8010bdc:	d0de      	beq.n	8010b9c <ai_buffer_get_size+0x14>
 8010bde:	6984      	ldr	r4, [r0, #24]
 8010be0:	6863      	ldr	r3, [r4, #4]
 8010be2:	331f      	adds	r3, #31
 8010be4:	f023 021f 	bic.w	r2, r3, #31
 8010be8:	e7da      	b.n	8010ba0 <ai_buffer_get_size+0x18>
 8010bea:	4770      	bx	lr
 8010bec:	000400c0 	.word	0x000400c0

08010bf0 <ai_buffer_array_sane>:
 8010bf0:	b138      	cbz	r0, 8010c02 <ai_buffer_array_sane+0x12>
 8010bf2:	6843      	ldr	r3, [r0, #4]
 8010bf4:	b123      	cbz	r3, 8010c00 <ai_buffer_array_sane+0x10>
 8010bf6:	8840      	ldrh	r0, [r0, #2]
 8010bf8:	3800      	subs	r0, #0
 8010bfa:	bf18      	it	ne
 8010bfc:	2001      	movne	r0, #1
 8010bfe:	4770      	bx	lr
 8010c00:	4618      	mov	r0, r3
 8010c02:	4770      	bx	lr

08010c04 <ai_buffer_array_item_set_address>:
 8010c04:	b150      	cbz	r0, 8010c1c <ai_buffer_array_item_set_address+0x18>
 8010c06:	6843      	ldr	r3, [r0, #4]
 8010c08:	b14b      	cbz	r3, 8010c1e <ai_buffer_array_item_set_address+0x1a>
 8010c0a:	8840      	ldrh	r0, [r0, #2]
 8010c0c:	b900      	cbnz	r0, 8010c10 <ai_buffer_array_item_set_address+0xc>
 8010c0e:	4770      	bx	lr
 8010c10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010c14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c18:	2001      	movs	r0, #1
 8010c1a:	604a      	str	r2, [r1, #4]
 8010c1c:	4770      	bx	lr
 8010c1e:	4618      	mov	r0, r3
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop

08010c24 <_ai_platform_acquire_crc>:
 8010c24:	2001      	movs	r0, #1
 8010c26:	4770      	bx	lr

08010c28 <_ai_platform_release_crc>:
 8010c28:	4770      	bx	lr
 8010c2a:	bf00      	nop

08010c2c <ai_platform_get_weights_map>:
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	d037      	beq.n	8010ca0 <ai_platform_get_weights_map+0x74>
 8010c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c32:	4604      	mov	r4, r0
 8010c34:	b1a0      	cbz	r0, 8010c60 <ai_platform_get_weights_map+0x34>
 8010c36:	460f      	mov	r7, r1
 8010c38:	b191      	cbz	r1, 8010c60 <ai_platform_get_weights_map+0x34>
 8010c3a:	4b25      	ldr	r3, [pc, #148]	; (8010cd0 <ai_platform_get_weights_map+0xa4>)
 8010c3c:	6810      	ldr	r0, [r2, #0]
 8010c3e:	4298      	cmp	r0, r3
 8010c40:	4615      	mov	r5, r2
 8010c42:	d00f      	beq.n	8010c64 <ai_platform_get_weights_map+0x38>
 8010c44:	6855      	ldr	r5, [r2, #4]
 8010c46:	b15d      	cbz	r5, 8010c60 <ai_platform_get_weights_map+0x34>
 8010c48:	682e      	ldr	r6, [r5, #0]
 8010c4a:	429e      	cmp	r6, r3
 8010c4c:	d02a      	beq.n	8010ca4 <ai_platform_get_weights_map+0x78>
 8010c4e:	f1a1 0001 	sub.w	r0, r1, #1
 8010c52:	6025      	str	r5, [r4, #0]
 8010c54:	fab0 f080 	clz	r0, r0
 8010c58:	0940      	lsrs	r0, r0, #5
 8010c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c5c:	42a7      	cmp	r7, r4
 8010c5e:	d034      	beq.n	8010cca <ai_platform_get_weights_map+0x9e>
 8010c60:	2000      	movs	r0, #0
 8010c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c64:	1d10      	adds	r0, r2, #4
 8010c66:	f7ff ffc3 	bl	8010bf0 <ai_buffer_array_sane>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d0f8      	beq.n	8010c60 <ai_platform_get_weights_map+0x34>
 8010c6e:	88eb      	ldrh	r3, [r5, #6]
 8010c70:	429f      	cmp	r7, r3
 8010c72:	d1f5      	bne.n	8010c60 <ai_platform_get_weights_map+0x34>
 8010c74:	f04f 0e00 	mov.w	lr, #0
 8010c78:	1f23      	subs	r3, r4, #4
 8010c7a:	4670      	mov	r0, lr
 8010c7c:	68aa      	ldr	r2, [r5, #8]
 8010c7e:	eb02 0c0e 	add.w	ip, r2, lr
 8010c82:	f10e 0e1c 	add.w	lr, lr, #28
 8010c86:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010c8a:	b124      	cbz	r4, 8010c96 <ai_platform_get_weights_map+0x6a>
 8010c8c:	3001      	adds	r0, #1
 8010c8e:	4287      	cmp	r7, r0
 8010c90:	f843 4f04 	str.w	r4, [r3, #4]!
 8010c94:	d1f2      	bne.n	8010c7c <ai_platform_get_weights_map+0x50>
 8010c96:	1a38      	subs	r0, r7, r0
 8010c98:	fab0 f080 	clz	r0, r0
 8010c9c:	0940      	lsrs	r0, r0, #5
 8010c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	4770      	bx	lr
 8010ca4:	1f23      	subs	r3, r4, #4
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	2400      	movs	r4, #0
 8010caa:	e000      	b.n	8010cae <ai_platform_get_weights_map+0x82>
 8010cac:	4614      	mov	r4, r2
 8010cae:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8010cb2:	42b2      	cmp	r2, r6
 8010cb4:	d0d2      	beq.n	8010c5c <ai_platform_get_weights_map+0x30>
 8010cb6:	f843 2f04 	str.w	r2, [r3, #4]!
 8010cba:	1c62      	adds	r2, r4, #1
 8010cbc:	4297      	cmp	r7, r2
 8010cbe:	d1f5      	bne.n	8010cac <ai_platform_get_weights_map+0x80>
 8010cc0:	3402      	adds	r4, #2
 8010cc2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010cc6:	42b3      	cmp	r3, r6
 8010cc8:	d1ca      	bne.n	8010c60 <ai_platform_get_weights_map+0x34>
 8010cca:	2001      	movs	r0, #1
 8010ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	a1facade 	.word	0xa1facade

08010cd4 <ai_platform_get_activations_map>:
 8010cd4:	2a00      	cmp	r2, #0
 8010cd6:	d038      	beq.n	8010d4a <ai_platform_get_activations_map+0x76>
 8010cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cda:	4604      	mov	r4, r0
 8010cdc:	b1a0      	cbz	r0, 8010d08 <ai_platform_get_activations_map+0x34>
 8010cde:	460f      	mov	r7, r1
 8010ce0:	b191      	cbz	r1, 8010d08 <ai_platform_get_activations_map+0x34>
 8010ce2:	4b25      	ldr	r3, [pc, #148]	; (8010d78 <ai_platform_get_activations_map+0xa4>)
 8010ce4:	6810      	ldr	r0, [r2, #0]
 8010ce6:	4298      	cmp	r0, r3
 8010ce8:	4615      	mov	r5, r2
 8010cea:	d00f      	beq.n	8010d0c <ai_platform_get_activations_map+0x38>
 8010cec:	6a15      	ldr	r5, [r2, #32]
 8010cee:	b15d      	cbz	r5, 8010d08 <ai_platform_get_activations_map+0x34>
 8010cf0:	682e      	ldr	r6, [r5, #0]
 8010cf2:	429e      	cmp	r6, r3
 8010cf4:	d02b      	beq.n	8010d4e <ai_platform_get_activations_map+0x7a>
 8010cf6:	f1a1 0001 	sub.w	r0, r1, #1
 8010cfa:	6025      	str	r5, [r4, #0]
 8010cfc:	fab0 f080 	clz	r0, r0
 8010d00:	0940      	lsrs	r0, r0, #5
 8010d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d04:	42a7      	cmp	r7, r4
 8010d06:	d035      	beq.n	8010d74 <ai_platform_get_activations_map+0xa0>
 8010d08:	2000      	movs	r0, #0
 8010d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d0c:	f102 000c 	add.w	r0, r2, #12
 8010d10:	f7ff ff6e 	bl	8010bf0 <ai_buffer_array_sane>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	d0f7      	beq.n	8010d08 <ai_platform_get_activations_map+0x34>
 8010d18:	89eb      	ldrh	r3, [r5, #14]
 8010d1a:	429f      	cmp	r7, r3
 8010d1c:	d1f4      	bne.n	8010d08 <ai_platform_get_activations_map+0x34>
 8010d1e:	f04f 0e00 	mov.w	lr, #0
 8010d22:	1f23      	subs	r3, r4, #4
 8010d24:	4670      	mov	r0, lr
 8010d26:	692a      	ldr	r2, [r5, #16]
 8010d28:	eb02 0c0e 	add.w	ip, r2, lr
 8010d2c:	f10e 0e1c 	add.w	lr, lr, #28
 8010d30:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010d34:	b124      	cbz	r4, 8010d40 <ai_platform_get_activations_map+0x6c>
 8010d36:	3001      	adds	r0, #1
 8010d38:	4287      	cmp	r7, r0
 8010d3a:	f843 4f04 	str.w	r4, [r3, #4]!
 8010d3e:	d1f2      	bne.n	8010d26 <ai_platform_get_activations_map+0x52>
 8010d40:	1a38      	subs	r0, r7, r0
 8010d42:	fab0 f080 	clz	r0, r0
 8010d46:	0940      	lsrs	r0, r0, #5
 8010d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	4770      	bx	lr
 8010d4e:	1f23      	subs	r3, r4, #4
 8010d50:	4628      	mov	r0, r5
 8010d52:	2400      	movs	r4, #0
 8010d54:	e000      	b.n	8010d58 <ai_platform_get_activations_map+0x84>
 8010d56:	4614      	mov	r4, r2
 8010d58:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8010d5c:	42b2      	cmp	r2, r6
 8010d5e:	d0d1      	beq.n	8010d04 <ai_platform_get_activations_map+0x30>
 8010d60:	f843 2f04 	str.w	r2, [r3, #4]!
 8010d64:	1c62      	adds	r2, r4, #1
 8010d66:	4297      	cmp	r7, r2
 8010d68:	d1f5      	bne.n	8010d56 <ai_platform_get_activations_map+0x82>
 8010d6a:	3402      	adds	r4, #2
 8010d6c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010d70:	42b3      	cmp	r3, r6
 8010d72:	d1c9      	bne.n	8010d08 <ai_platform_get_activations_map+0x34>
 8010d74:	2001      	movs	r0, #1
 8010d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d78:	a1facade 	.word	0xa1facade

08010d7c <ai_platform_bind_network_params>:
 8010d7c:	b1a0      	cbz	r0, 8010da8 <ai_platform_bind_network_params+0x2c>
 8010d7e:	b1b1      	cbz	r1, 8010dae <ai_platform_bind_network_params+0x32>
 8010d80:	b1c2      	cbz	r2, 8010db4 <ai_platform_bind_network_params+0x38>
 8010d82:	b410      	push	{r4}
 8010d84:	4603      	mov	r3, r0
 8010d86:	4c0d      	ldr	r4, [pc, #52]	; (8010dbc <ai_platform_bind_network_params+0x40>)
 8010d88:	f843 4b04 	str.w	r4, [r3], #4
 8010d8c:	f100 0c0c 	add.w	ip, r0, #12
 8010d90:	c903      	ldmia	r1, {r0, r1}
 8010d92:	e883 0003 	stmia.w	r3, {r0, r1}
 8010d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d9a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d9e:	2301      	movs	r3, #1
 8010da0:	4618      	mov	r0, r3
 8010da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010da6:	4770      	bx	lr
 8010da8:	4603      	mov	r3, r0
 8010daa:	4618      	mov	r0, r3
 8010dac:	4770      	bx	lr
 8010dae:	460b      	mov	r3, r1
 8010db0:	4618      	mov	r0, r3
 8010db2:	4770      	bx	lr
 8010db4:	4613      	mov	r3, r2
 8010db6:	4618      	mov	r0, r3
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	a1facade 	.word	0xa1facade

08010dc0 <ai_platform_network_get_error>:
 8010dc0:	b510      	push	{r4, lr}
 8010dc2:	b1f0      	cbz	r0, 8010e02 <ai_platform_network_get_error+0x42>
 8010dc4:	4b2f      	ldr	r3, [pc, #188]	; (8010e84 <ai_platform_network_get_error+0xc4>)
 8010dc6:	6802      	ldr	r2, [r0, #0]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	4604      	mov	r4, r0
 8010dcc:	d119      	bne.n	8010e02 <ai_platform_network_get_error+0x42>
 8010dce:	f7ff ff29 	bl	8010c24 <_ai_platform_acquire_crc>
 8010dd2:	4b2d      	ldr	r3, [pc, #180]	; (8010e88 <ai_platform_network_get_error+0xc8>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010dde:	d03c      	beq.n	8010e5a <ai_platform_network_get_error+0x9a>
 8010de0:	4a2a      	ldr	r2, [pc, #168]	; (8010e8c <ai_platform_network_get_error+0xcc>)
 8010de2:	2301      	movs	r3, #1
 8010de4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010de8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d1fb      	bne.n	8010de8 <ai_platform_network_get_error+0x28>
 8010df0:	4b27      	ldr	r3, [pc, #156]	; (8010e90 <ai_platform_network_get_error+0xd0>)
 8010df2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010df6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010dfa:	4b26      	ldr	r3, [pc, #152]	; (8010e94 <ai_platform_network_get_error+0xd4>)
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d038      	beq.n	8010e72 <ai_platform_network_get_error+0xb2>
 8010e00:	e7fe      	b.n	8010e00 <ai_platform_network_get_error+0x40>
 8010e02:	f7ff ff0f 	bl	8010c24 <_ai_platform_acquire_crc>
 8010e06:	4b20      	ldr	r3, [pc, #128]	; (8010e88 <ai_platform_network_get_error+0xc8>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e12:	d010      	beq.n	8010e36 <ai_platform_network_get_error+0x76>
 8010e14:	4a1d      	ldr	r2, [pc, #116]	; (8010e8c <ai_platform_network_get_error+0xcc>)
 8010e16:	2301      	movs	r3, #1
 8010e18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010e1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d1fb      	bne.n	8010e1c <ai_platform_network_get_error+0x5c>
 8010e24:	4b1a      	ldr	r3, [pc, #104]	; (8010e90 <ai_platform_network_get_error+0xd0>)
 8010e26:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010e2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010e2e:	4b19      	ldr	r3, [pc, #100]	; (8010e94 <ai_platform_network_get_error+0xd4>)
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d00d      	beq.n	8010e50 <ai_platform_network_get_error+0x90>
 8010e34:	e7fe      	b.n	8010e34 <ai_platform_network_get_error+0x74>
 8010e36:	4a18      	ldr	r2, [pc, #96]	; (8010e98 <ai_platform_network_get_error+0xd8>)
 8010e38:	2301      	movs	r3, #1
 8010e3a:	6093      	str	r3, [r2, #8]
 8010e3c:	6893      	ldr	r3, [r2, #8]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d1fc      	bne.n	8010e3c <ai_platform_network_get_error+0x7c>
 8010e42:	4b13      	ldr	r3, [pc, #76]	; (8010e90 <ai_platform_network_get_error+0xd0>)
 8010e44:	6013      	str	r3, [r2, #0]
 8010e46:	6812      	ldr	r2, [r2, #0]
 8010e48:	4b12      	ldr	r3, [pc, #72]	; (8010e94 <ai_platform_network_get_error+0xd4>)
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d000      	beq.n	8010e50 <ai_platform_network_get_error+0x90>
 8010e4e:	e7fe      	b.n	8010e4e <ai_platform_network_get_error+0x8e>
 8010e50:	f7ff feea 	bl	8010c28 <_ai_platform_release_crc>
 8010e54:	f241 0010 	movw	r0, #4112	; 0x1010
 8010e58:	bd10      	pop	{r4, pc}
 8010e5a:	4a0f      	ldr	r2, [pc, #60]	; (8010e98 <ai_platform_network_get_error+0xd8>)
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	6093      	str	r3, [r2, #8]
 8010e60:	6893      	ldr	r3, [r2, #8]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d1fc      	bne.n	8010e60 <ai_platform_network_get_error+0xa0>
 8010e66:	4b0a      	ldr	r3, [pc, #40]	; (8010e90 <ai_platform_network_get_error+0xd0>)
 8010e68:	6013      	str	r3, [r2, #0]
 8010e6a:	6812      	ldr	r2, [r2, #0]
 8010e6c:	4b09      	ldr	r3, [pc, #36]	; (8010e94 <ai_platform_network_get_error+0xd4>)
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d107      	bne.n	8010e82 <ai_platform_network_get_error+0xc2>
 8010e72:	f7ff fed9 	bl	8010c28 <_ai_platform_release_crc>
 8010e76:	f104 0010 	add.w	r0, r4, #16
 8010e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e7e:	f000 be8d 	b.w	8011b9c <core_get_error>
 8010e82:	e7fe      	b.n	8010e82 <ai_platform_network_get_error+0xc2>
 8010e84:	a1c00100 	.word	0xa1c00100
 8010e88:	e0042000 	.word	0xe0042000
 8010e8c:	58024000 	.word	0x58024000
 8010e90:	f407a5c2 	.word	0xf407a5c2
 8010e94:	b5e8b5cd 	.word	0xb5e8b5cd
 8010e98:	40023000 	.word	0x40023000

08010e9c <ai_platform_network_set_error>:
 8010e9c:	b110      	cbz	r0, 8010ea4 <ai_platform_network_set_error+0x8>
 8010e9e:	3010      	adds	r0, #16
 8010ea0:	f000 be82 	b.w	8011ba8 <core_set_error>
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop

08010ea8 <ai_platform_inputs_get>:
 8010ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eac:	b085      	sub	sp, #20
 8010eae:	9102      	str	r1, [sp, #8]
 8010eb0:	b1f0      	cbz	r0, 8010ef0 <ai_platform_inputs_get+0x48>
 8010eb2:	4b62      	ldr	r3, [pc, #392]	; (801103c <ai_platform_inputs_get+0x194>)
 8010eb4:	6802      	ldr	r2, [r0, #0]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	4607      	mov	r7, r0
 8010eba:	d119      	bne.n	8010ef0 <ai_platform_inputs_get+0x48>
 8010ebc:	f7ff feb2 	bl	8010c24 <_ai_platform_acquire_crc>
 8010ec0:	4b5f      	ldr	r3, [pc, #380]	; (8011040 <ai_platform_inputs_get+0x198>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ecc:	d03d      	beq.n	8010f4a <ai_platform_inputs_get+0xa2>
 8010ece:	4a5d      	ldr	r2, [pc, #372]	; (8011044 <ai_platform_inputs_get+0x19c>)
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010ed6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1fb      	bne.n	8010ed6 <ai_platform_inputs_get+0x2e>
 8010ede:	4b5a      	ldr	r3, [pc, #360]	; (8011048 <ai_platform_inputs_get+0x1a0>)
 8010ee0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010ee4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010ee8:	4b58      	ldr	r3, [pc, #352]	; (801104c <ai_platform_inputs_get+0x1a4>)
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d039      	beq.n	8010f62 <ai_platform_inputs_get+0xba>
 8010eee:	e7fe      	b.n	8010eee <ai_platform_inputs_get+0x46>
 8010ef0:	f7ff fe98 	bl	8010c24 <_ai_platform_acquire_crc>
 8010ef4:	4b52      	ldr	r3, [pc, #328]	; (8011040 <ai_platform_inputs_get+0x198>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f00:	d010      	beq.n	8010f24 <ai_platform_inputs_get+0x7c>
 8010f02:	4a50      	ldr	r2, [pc, #320]	; (8011044 <ai_platform_inputs_get+0x19c>)
 8010f04:	2301      	movs	r3, #1
 8010f06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010f0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1fb      	bne.n	8010f0a <ai_platform_inputs_get+0x62>
 8010f12:	4b4d      	ldr	r3, [pc, #308]	; (8011048 <ai_platform_inputs_get+0x1a0>)
 8010f14:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010f18:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010f1c:	4b4b      	ldr	r3, [pc, #300]	; (801104c <ai_platform_inputs_get+0x1a4>)
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d00d      	beq.n	8010f3e <ai_platform_inputs_get+0x96>
 8010f22:	e7fe      	b.n	8010f22 <ai_platform_inputs_get+0x7a>
 8010f24:	4a4a      	ldr	r2, [pc, #296]	; (8011050 <ai_platform_inputs_get+0x1a8>)
 8010f26:	2301      	movs	r3, #1
 8010f28:	6093      	str	r3, [r2, #8]
 8010f2a:	6893      	ldr	r3, [r2, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1fc      	bne.n	8010f2a <ai_platform_inputs_get+0x82>
 8010f30:	4b45      	ldr	r3, [pc, #276]	; (8011048 <ai_platform_inputs_get+0x1a0>)
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	6812      	ldr	r2, [r2, #0]
 8010f36:	4b45      	ldr	r3, [pc, #276]	; (801104c <ai_platform_inputs_get+0x1a4>)
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d000      	beq.n	8010f3e <ai_platform_inputs_get+0x96>
 8010f3c:	e7fe      	b.n	8010f3c <ai_platform_inputs_get+0x94>
 8010f3e:	f7ff fe73 	bl	8010c28 <_ai_platform_release_crc>
 8010f42:	2000      	movs	r0, #0
 8010f44:	b005      	add	sp, #20
 8010f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4a:	4a41      	ldr	r2, [pc, #260]	; (8011050 <ai_platform_inputs_get+0x1a8>)
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	6093      	str	r3, [r2, #8]
 8010f50:	6893      	ldr	r3, [r2, #8]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d1fc      	bne.n	8010f50 <ai_platform_inputs_get+0xa8>
 8010f56:	4b3c      	ldr	r3, [pc, #240]	; (8011048 <ai_platform_inputs_get+0x1a0>)
 8010f58:	6013      	str	r3, [r2, #0]
 8010f5a:	6812      	ldr	r2, [r2, #0]
 8010f5c:	4b3b      	ldr	r3, [pc, #236]	; (801104c <ai_platform_inputs_get+0x1a4>)
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d155      	bne.n	801100e <ai_platform_inputs_get+0x166>
 8010f62:	f7ff fe61 	bl	8010c28 <_ai_platform_release_crc>
 8010f66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d051      	beq.n	8011010 <ai_platform_inputs_get+0x168>
 8010f6c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8010f70:	f1ba 0f00 	cmp.w	sl, #0
 8010f74:	d04c      	beq.n	8011010 <ai_platform_inputs_get+0x168>
 8010f76:	f04f 0b00 	mov.w	fp, #0
 8010f7a:	465d      	mov	r5, fp
 8010f7c:	9703      	str	r7, [sp, #12]
 8010f7e:	e016      	b.n	8010fae <ai_platform_inputs_get+0x106>
 8010f80:	9901      	ldr	r1, [sp, #4]
 8010f82:	2301      	movs	r3, #1
 8010f84:	507b      	str	r3, [r7, r1]
 8010f86:	69b1      	ldr	r1, [r6, #24]
 8010f88:	6849      	ldr	r1, [r1, #4]
 8010f8a:	6121      	str	r1, [r4, #16]
 8010f8c:	f04f 0301 	mov.w	r3, #1
 8010f90:	7523      	strb	r3, [r4, #20]
 8010f92:	e9c4 c200 	strd	ip, r2, [r4]
 8010f96:	6962      	ldr	r2, [r4, #20]
 8010f98:	60a0      	str	r0, [r4, #8]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	f369 221f 	bfi	r2, r9, #8, #24
 8010fa0:	f8c4 8018 	str.w	r8, [r4, #24]
 8010fa4:	60e3      	str	r3, [r4, #12]
 8010fa6:	3501      	adds	r5, #1
 8010fa8:	f10b 0b1c 	add.w	fp, fp, #28
 8010fac:	6162      	str	r2, [r4, #20]
 8010fae:	f8ba 3000 	ldrh.w	r3, [sl]
 8010fb2:	42ab      	cmp	r3, r5
 8010fb4:	b2aa      	uxth	r2, r5
 8010fb6:	d93a      	bls.n	801102e <ai_platform_inputs_get+0x186>
 8010fb8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010fbc:	00e9      	lsls	r1, r5, #3
 8010fbe:	9101      	str	r1, [sp, #4]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d034      	beq.n	801102e <ai_platform_inputs_get+0x186>
 8010fc4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8010fc8:	2e00      	cmp	r6, #0
 8010fca:	d030      	beq.n	801102e <ai_platform_inputs_get+0x186>
 8010fcc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010fd0:	69b2      	ldr	r2, [r6, #24]
 8010fd2:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8010fd6:	6810      	ldr	r0, [r2, #0]
 8010fd8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8010fdc:	68b3      	ldr	r3, [r6, #8]
 8010fde:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8010fe2:	f005 fc1f 	bl	8016824 <ai_array_to_buffer_fmt>
 8010fe6:	69b1      	ldr	r1, [r6, #24]
 8010fe8:	4684      	mov	ip, r0
 8010fea:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8010fee:	688a      	ldr	r2, [r1, #8]
 8010ff0:	445c      	add	r4, fp
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d0c8      	beq.n	8010f88 <ai_platform_inputs_get+0xe0>
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8010ffc:	6831      	ldr	r1, [r6, #0]
 8010ffe:	6041      	str	r1, [r0, #4]
 8011000:	b111      	cbz	r1, 8011008 <ai_platform_inputs_get+0x160>
 8011002:	8849      	ldrh	r1, [r1, #2]
 8011004:	2900      	cmp	r1, #0
 8011006:	d1bb      	bne.n	8010f80 <ai_platform_inputs_get+0xd8>
 8011008:	69b1      	ldr	r1, [r6, #24]
 801100a:	2000      	movs	r0, #0
 801100c:	e7bc      	b.n	8010f88 <ai_platform_inputs_get+0xe0>
 801100e:	e7fe      	b.n	801100e <ai_platform_inputs_get+0x166>
 8011010:	2218      	movs	r2, #24
 8011012:	2111      	movs	r1, #17
 8011014:	f107 0010 	add.w	r0, r7, #16
 8011018:	f000 fdc6 	bl	8011ba8 <core_set_error>
 801101c:	2200      	movs	r2, #0
 801101e:	4610      	mov	r0, r2
 8011020:	9b02      	ldr	r3, [sp, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d08e      	beq.n	8010f44 <ai_platform_inputs_get+0x9c>
 8011026:	801a      	strh	r2, [r3, #0]
 8011028:	b005      	add	sp, #20
 801102a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102e:	9f03      	ldr	r7, [sp, #12]
 8011030:	2a00      	cmp	r2, #0
 8011032:	d0ed      	beq.n	8011010 <ai_platform_inputs_get+0x168>
 8011034:	f8da 3008 	ldr.w	r3, [sl, #8]
 8011038:	6858      	ldr	r0, [r3, #4]
 801103a:	e7f1      	b.n	8011020 <ai_platform_inputs_get+0x178>
 801103c:	a1c00100 	.word	0xa1c00100
 8011040:	e0042000 	.word	0xe0042000
 8011044:	58024000 	.word	0x58024000
 8011048:	f407a5c2 	.word	0xf407a5c2
 801104c:	b5e8b5cd 	.word	0xb5e8b5cd
 8011050:	40023000 	.word	0x40023000

08011054 <ai_platform_outputs_get>:
 8011054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011058:	b085      	sub	sp, #20
 801105a:	9102      	str	r1, [sp, #8]
 801105c:	b1f0      	cbz	r0, 801109c <ai_platform_outputs_get+0x48>
 801105e:	4b5f      	ldr	r3, [pc, #380]	; (80111dc <ai_platform_outputs_get+0x188>)
 8011060:	6802      	ldr	r2, [r0, #0]
 8011062:	429a      	cmp	r2, r3
 8011064:	4607      	mov	r7, r0
 8011066:	d119      	bne.n	801109c <ai_platform_outputs_get+0x48>
 8011068:	f7ff fddc 	bl	8010c24 <_ai_platform_acquire_crc>
 801106c:	4b5c      	ldr	r3, [pc, #368]	; (80111e0 <ai_platform_outputs_get+0x18c>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011078:	d03d      	beq.n	80110f6 <ai_platform_outputs_get+0xa2>
 801107a:	4a5a      	ldr	r2, [pc, #360]	; (80111e4 <ai_platform_outputs_get+0x190>)
 801107c:	2301      	movs	r3, #1
 801107e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011082:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1fb      	bne.n	8011082 <ai_platform_outputs_get+0x2e>
 801108a:	4b57      	ldr	r3, [pc, #348]	; (80111e8 <ai_platform_outputs_get+0x194>)
 801108c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011090:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011094:	4b55      	ldr	r3, [pc, #340]	; (80111ec <ai_platform_outputs_get+0x198>)
 8011096:	429a      	cmp	r2, r3
 8011098:	d039      	beq.n	801110e <ai_platform_outputs_get+0xba>
 801109a:	e7fe      	b.n	801109a <ai_platform_outputs_get+0x46>
 801109c:	f7ff fdc2 	bl	8010c24 <_ai_platform_acquire_crc>
 80110a0:	4b4f      	ldr	r3, [pc, #316]	; (80111e0 <ai_platform_outputs_get+0x18c>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80110a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110ac:	d010      	beq.n	80110d0 <ai_platform_outputs_get+0x7c>
 80110ae:	4a4d      	ldr	r2, [pc, #308]	; (80111e4 <ai_platform_outputs_get+0x190>)
 80110b0:	2301      	movs	r3, #1
 80110b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80110b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d1fb      	bne.n	80110b6 <ai_platform_outputs_get+0x62>
 80110be:	4b4a      	ldr	r3, [pc, #296]	; (80111e8 <ai_platform_outputs_get+0x194>)
 80110c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80110c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80110c8:	4b48      	ldr	r3, [pc, #288]	; (80111ec <ai_platform_outputs_get+0x198>)
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d00d      	beq.n	80110ea <ai_platform_outputs_get+0x96>
 80110ce:	e7fe      	b.n	80110ce <ai_platform_outputs_get+0x7a>
 80110d0:	4a47      	ldr	r2, [pc, #284]	; (80111f0 <ai_platform_outputs_get+0x19c>)
 80110d2:	2301      	movs	r3, #1
 80110d4:	6093      	str	r3, [r2, #8]
 80110d6:	6893      	ldr	r3, [r2, #8]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1fc      	bne.n	80110d6 <ai_platform_outputs_get+0x82>
 80110dc:	4b42      	ldr	r3, [pc, #264]	; (80111e8 <ai_platform_outputs_get+0x194>)
 80110de:	6013      	str	r3, [r2, #0]
 80110e0:	6812      	ldr	r2, [r2, #0]
 80110e2:	4b42      	ldr	r3, [pc, #264]	; (80111ec <ai_platform_outputs_get+0x198>)
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d000      	beq.n	80110ea <ai_platform_outputs_get+0x96>
 80110e8:	e7fe      	b.n	80110e8 <ai_platform_outputs_get+0x94>
 80110ea:	f7ff fd9d 	bl	8010c28 <_ai_platform_release_crc>
 80110ee:	2000      	movs	r0, #0
 80110f0:	b005      	add	sp, #20
 80110f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f6:	4a3e      	ldr	r2, [pc, #248]	; (80111f0 <ai_platform_outputs_get+0x19c>)
 80110f8:	2301      	movs	r3, #1
 80110fa:	6093      	str	r3, [r2, #8]
 80110fc:	6893      	ldr	r3, [r2, #8]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1fc      	bne.n	80110fc <ai_platform_outputs_get+0xa8>
 8011102:	4b39      	ldr	r3, [pc, #228]	; (80111e8 <ai_platform_outputs_get+0x194>)
 8011104:	6013      	str	r3, [r2, #0]
 8011106:	6812      	ldr	r2, [r2, #0]
 8011108:	4b38      	ldr	r3, [pc, #224]	; (80111ec <ai_platform_outputs_get+0x198>)
 801110a:	429a      	cmp	r2, r3
 801110c:	d150      	bne.n	80111b0 <ai_platform_outputs_get+0x15c>
 801110e:	f7ff fd8b 	bl	8010c28 <_ai_platform_release_crc>
 8011112:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011114:	2b01      	cmp	r3, #1
 8011116:	d958      	bls.n	80111ca <ai_platform_outputs_get+0x176>
 8011118:	f04f 0b00 	mov.w	fp, #0
 801111c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8011120:	9703      	str	r7, [sp, #12]
 8011122:	465d      	mov	r5, fp
 8011124:	e016      	b.n	8011154 <ai_platform_outputs_get+0x100>
 8011126:	9901      	ldr	r1, [sp, #4]
 8011128:	2301      	movs	r3, #1
 801112a:	507b      	str	r3, [r7, r1]
 801112c:	69b1      	ldr	r1, [r6, #24]
 801112e:	6849      	ldr	r1, [r1, #4]
 8011130:	6121      	str	r1, [r4, #16]
 8011132:	f04f 0301 	mov.w	r3, #1
 8011136:	7523      	strb	r3, [r4, #20]
 8011138:	e9c4 c200 	strd	ip, r2, [r4]
 801113c:	6962      	ldr	r2, [r4, #20]
 801113e:	60a0      	str	r0, [r4, #8]
 8011140:	2300      	movs	r3, #0
 8011142:	f369 221f 	bfi	r2, r9, #8, #24
 8011146:	f8c4 8018 	str.w	r8, [r4, #24]
 801114a:	60e3      	str	r3, [r4, #12]
 801114c:	3501      	adds	r5, #1
 801114e:	f10b 0b1c 	add.w	fp, fp, #28
 8011152:	6162      	str	r2, [r4, #20]
 8011154:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8011158:	42ab      	cmp	r3, r5
 801115a:	b2aa      	uxth	r2, r5
 801115c:	d929      	bls.n	80111b2 <ai_platform_outputs_get+0x15e>
 801115e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8011162:	00e9      	lsls	r1, r5, #3
 8011164:	9101      	str	r1, [sp, #4]
 8011166:	b323      	cbz	r3, 80111b2 <ai_platform_outputs_get+0x15e>
 8011168:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801116c:	b30e      	cbz	r6, 80111b2 <ai_platform_outputs_get+0x15e>
 801116e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8011172:	69b2      	ldr	r2, [r6, #24]
 8011174:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8011178:	6810      	ldr	r0, [r2, #0]
 801117a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801117e:	68b3      	ldr	r3, [r6, #8]
 8011180:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8011184:	f005 fb4e 	bl	8016824 <ai_array_to_buffer_fmt>
 8011188:	69b1      	ldr	r1, [r6, #24]
 801118a:	4684      	mov	ip, r0
 801118c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8011190:	688a      	ldr	r2, [r1, #8]
 8011192:	445c      	add	r4, fp
 8011194:	2800      	cmp	r0, #0
 8011196:	d0ca      	beq.n	801112e <ai_platform_outputs_get+0xda>
 8011198:	2100      	movs	r1, #0
 801119a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 801119e:	6831      	ldr	r1, [r6, #0]
 80111a0:	6041      	str	r1, [r0, #4]
 80111a2:	b111      	cbz	r1, 80111aa <ai_platform_outputs_get+0x156>
 80111a4:	8849      	ldrh	r1, [r1, #2]
 80111a6:	2900      	cmp	r1, #0
 80111a8:	d1bd      	bne.n	8011126 <ai_platform_outputs_get+0xd2>
 80111aa:	69b1      	ldr	r1, [r6, #24]
 80111ac:	2000      	movs	r0, #0
 80111ae:	e7be      	b.n	801112e <ai_platform_outputs_get+0xda>
 80111b0:	e7fe      	b.n	80111b0 <ai_platform_outputs_get+0x15c>
 80111b2:	9f03      	ldr	r7, [sp, #12]
 80111b4:	b14a      	cbz	r2, 80111ca <ai_platform_outputs_get+0x176>
 80111b6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80111ba:	6858      	ldr	r0, [r3, #4]
 80111bc:	9b02      	ldr	r3, [sp, #8]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d096      	beq.n	80110f0 <ai_platform_outputs_get+0x9c>
 80111c2:	801a      	strh	r2, [r3, #0]
 80111c4:	b005      	add	sp, #20
 80111c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ca:	2218      	movs	r2, #24
 80111cc:	2111      	movs	r1, #17
 80111ce:	f107 0010 	add.w	r0, r7, #16
 80111d2:	f000 fce9 	bl	8011ba8 <core_set_error>
 80111d6:	2200      	movs	r2, #0
 80111d8:	4610      	mov	r0, r2
 80111da:	e7ef      	b.n	80111bc <ai_platform_outputs_get+0x168>
 80111dc:	a1c00100 	.word	0xa1c00100
 80111e0:	e0042000 	.word	0xe0042000
 80111e4:	58024000 	.word	0x58024000
 80111e8:	f407a5c2 	.word	0xf407a5c2
 80111ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80111f0:	40023000 	.word	0x40023000

080111f4 <ai_platform_network_create>:
 80111f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111f8:	b083      	sub	sp, #12
 80111fa:	4606      	mov	r6, r0
 80111fc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8011200:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8011204:	4615      	mov	r5, r2
 8011206:	461f      	mov	r7, r3
 8011208:	f7ff fd0c 	bl	8010c24 <_ai_platform_acquire_crc>
 801120c:	b188      	cbz	r0, 8011232 <ai_platform_network_create+0x3e>
 801120e:	4a5d      	ldr	r2, [pc, #372]	; (8011384 <ai_platform_network_create+0x190>)
 8011210:	6812      	ldr	r2, [r2, #0]
 8011212:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8011216:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801121a:	4603      	mov	r3, r0
 801121c:	d00e      	beq.n	801123c <ai_platform_network_create+0x48>
 801121e:	4a5a      	ldr	r2, [pc, #360]	; (8011388 <ai_platform_network_create+0x194>)
 8011220:	2118      	movs	r1, #24
 8011222:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8011226:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 801122a:	2918      	cmp	r1, #24
 801122c:	d018      	beq.n	8011260 <ai_platform_network_create+0x6c>
 801122e:	f7ff fcfb 	bl	8010c28 <_ai_platform_release_crc>
 8011232:	f244 1033 	movw	r0, #16691	; 0x4133
 8011236:	b003      	add	sp, #12
 8011238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801123c:	4a53      	ldr	r2, [pc, #332]	; (801138c <ai_platform_network_create+0x198>)
 801123e:	2101      	movs	r1, #1
 8011240:	6091      	str	r1, [r2, #8]
 8011242:	2114      	movs	r1, #20
 8011244:	e001      	b.n	801124a <ai_platform_network_create+0x56>
 8011246:	3901      	subs	r1, #1
 8011248:	d002      	beq.n	8011250 <ai_platform_network_create+0x5c>
 801124a:	6894      	ldr	r4, [r2, #8]
 801124c:	2c00      	cmp	r4, #0
 801124e:	d1fa      	bne.n	8011246 <ai_platform_network_create+0x52>
 8011250:	4a4e      	ldr	r2, [pc, #312]	; (801138c <ai_platform_network_create+0x198>)
 8011252:	6891      	ldr	r1, [r2, #8]
 8011254:	b911      	cbnz	r1, 801125c <ai_platform_network_create+0x68>
 8011256:	6812      	ldr	r2, [r2, #0]
 8011258:	3201      	adds	r2, #1
 801125a:	d008      	beq.n	801126e <ai_platform_network_create+0x7a>
 801125c:	4618      	mov	r0, r3
 801125e:	e7e6      	b.n	801122e <ai_platform_network_create+0x3a>
 8011260:	2101      	movs	r1, #1
 8011262:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8011266:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 801126a:	2900      	cmp	r1, #0
 801126c:	d1fb      	bne.n	8011266 <ai_platform_network_create+0x72>
 801126e:	4618      	mov	r0, r3
 8011270:	f7ff fcda 	bl	8010c28 <_ai_platform_release_crc>
 8011274:	f7ff fcd6 	bl	8010c24 <_ai_platform_acquire_crc>
 8011278:	4b42      	ldr	r3, [pc, #264]	; (8011384 <ai_platform_network_create+0x190>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011284:	d010      	beq.n	80112a8 <ai_platform_network_create+0xb4>
 8011286:	4b40      	ldr	r3, [pc, #256]	; (8011388 <ai_platform_network_create+0x194>)
 8011288:	2201      	movs	r2, #1
 801128a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801128e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8011292:	2900      	cmp	r1, #0
 8011294:	d1fb      	bne.n	801128e <ai_platform_network_create+0x9a>
 8011296:	4a3e      	ldr	r2, [pc, #248]	; (8011390 <ai_platform_network_create+0x19c>)
 8011298:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801129c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80112a0:	4b3c      	ldr	r3, [pc, #240]	; (8011394 <ai_platform_network_create+0x1a0>)
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d00c      	beq.n	80112c0 <ai_platform_network_create+0xcc>
 80112a6:	e7fe      	b.n	80112a6 <ai_platform_network_create+0xb2>
 80112a8:	4a38      	ldr	r2, [pc, #224]	; (801138c <ai_platform_network_create+0x198>)
 80112aa:	2301      	movs	r3, #1
 80112ac:	6093      	str	r3, [r2, #8]
 80112ae:	6893      	ldr	r3, [r2, #8]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d1fc      	bne.n	80112ae <ai_platform_network_create+0xba>
 80112b4:	4b36      	ldr	r3, [pc, #216]	; (8011390 <ai_platform_network_create+0x19c>)
 80112b6:	6013      	str	r3, [r2, #0]
 80112b8:	6812      	ldr	r2, [r2, #0]
 80112ba:	4b36      	ldr	r3, [pc, #216]	; (8011394 <ai_platform_network_create+0x1a0>)
 80112bc:	429a      	cmp	r2, r3
 80112be:	d122      	bne.n	8011306 <ai_platform_network_create+0x112>
 80112c0:	f7ff fcb2 	bl	8010c28 <_ai_platform_release_crc>
 80112c4:	b38e      	cbz	r6, 801132a <ai_platform_network_create+0x136>
 80112c6:	4b34      	ldr	r3, [pc, #208]	; (8011398 <ai_platform_network_create+0x1a4>)
 80112c8:	602b      	str	r3, [r5, #0]
 80112ca:	6035      	str	r5, [r6, #0]
 80112cc:	f000 fc64 	bl	8011b98 <core_init>
 80112d0:	b1d0      	cbz	r0, 8011308 <ai_platform_network_create+0x114>
 80112d2:	f7ff fca7 	bl	8010c24 <_ai_platform_acquire_crc>
 80112d6:	4b2b      	ldr	r3, [pc, #172]	; (8011384 <ai_platform_network_create+0x190>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80112de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112e2:	d025      	beq.n	8011330 <ai_platform_network_create+0x13c>
 80112e4:	4a28      	ldr	r2, [pc, #160]	; (8011388 <ai_platform_network_create+0x194>)
 80112e6:	2301      	movs	r3, #1
 80112e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80112ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d1fb      	bne.n	80112ec <ai_platform_network_create+0xf8>
 80112f4:	4b26      	ldr	r3, [pc, #152]	; (8011390 <ai_platform_network_create+0x19c>)
 80112f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80112fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80112fe:	4b25      	ldr	r3, [pc, #148]	; (8011394 <ai_platform_network_create+0x1a0>)
 8011300:	429a      	cmp	r2, r3
 8011302:	d022      	beq.n	801134a <ai_platform_network_create+0x156>
 8011304:	e7fe      	b.n	8011304 <ai_platform_network_create+0x110>
 8011306:	e7fe      	b.n	8011306 <ai_platform_network_create+0x112>
 8011308:	2430      	movs	r4, #48	; 0x30
 801130a:	2300      	movs	r3, #0
 801130c:	6033      	str	r3, [r6, #0]
 801130e:	2610      	movs	r6, #16
 8011310:	464a      	mov	r2, r9
 8011312:	4641      	mov	r1, r8
 8011314:	4638      	mov	r0, r7
 8011316:	f005 fa67 	bl	80167e8 <ai_version_get>
 801131a:	4603      	mov	r3, r0
 801131c:	2000      	movs	r0, #0
 801131e:	f364 0007 	bfi	r0, r4, #0, #8
 8011322:	64ab      	str	r3, [r5, #72]	; 0x48
 8011324:	f366 201f 	bfi	r0, r6, #8, #24
 8011328:	e785      	b.n	8011236 <ai_platform_network_create+0x42>
 801132a:	f241 0010 	movw	r0, #4112	; 0x1010
 801132e:	e782      	b.n	8011236 <ai_platform_network_create+0x42>
 8011330:	4a16      	ldr	r2, [pc, #88]	; (801138c <ai_platform_network_create+0x198>)
 8011332:	2301      	movs	r3, #1
 8011334:	6093      	str	r3, [r2, #8]
 8011336:	6893      	ldr	r3, [r2, #8]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1fc      	bne.n	8011336 <ai_platform_network_create+0x142>
 801133c:	4b14      	ldr	r3, [pc, #80]	; (8011390 <ai_platform_network_create+0x19c>)
 801133e:	6013      	str	r3, [r2, #0]
 8011340:	6812      	ldr	r2, [r2, #0]
 8011342:	4b14      	ldr	r3, [pc, #80]	; (8011394 <ai_platform_network_create+0x1a0>)
 8011344:	429a      	cmp	r2, r3
 8011346:	d000      	beq.n	801134a <ai_platform_network_create+0x156>
 8011348:	e7fe      	b.n	8011348 <ai_platform_network_create+0x154>
 801134a:	f7ff fc6d 	bl	8010c28 <_ai_platform_release_crc>
 801134e:	2200      	movs	r2, #0
 8011350:	4641      	mov	r1, r8
 8011352:	4638      	mov	r0, r7
 8011354:	f005 fa48 	bl	80167e8 <ai_version_get>
 8011358:	2200      	movs	r2, #0
 801135a:	4604      	mov	r4, r0
 801135c:	2105      	movs	r1, #5
 801135e:	2001      	movs	r0, #1
 8011360:	f005 fa42 	bl	80167e8 <ai_version_get>
 8011364:	4284      	cmp	r4, r0
 8011366:	d001      	beq.n	801136c <ai_platform_network_create+0x178>
 8011368:	2401      	movs	r4, #1
 801136a:	e7ce      	b.n	801130a <ai_platform_network_create+0x116>
 801136c:	4b0b      	ldr	r3, [pc, #44]	; (801139c <ai_platform_network_create+0x1a8>)
 801136e:	9301      	str	r3, [sp, #4]
 8011370:	a801      	add	r0, sp, #4
 8011372:	f005 f9a3 	bl	80166bc <ai_check_custom_types>
 8011376:	b110      	cbz	r0, 801137e <ai_platform_network_create+0x18a>
 8011378:	2600      	movs	r6, #0
 801137a:	4634      	mov	r4, r6
 801137c:	e7c8      	b.n	8011310 <ai_platform_network_create+0x11c>
 801137e:	2402      	movs	r4, #2
 8011380:	e7c3      	b.n	801130a <ai_platform_network_create+0x116>
 8011382:	bf00      	nop
 8011384:	e0042000 	.word	0xe0042000
 8011388:	58024000 	.word	0x58024000
 801138c:	40023000 	.word	0x40023000
 8011390:	f407a5c2 	.word	0xf407a5c2
 8011394:	b5e8b5cd 	.word	0xb5e8b5cd
 8011398:	a1c00100 	.word	0xa1c00100
 801139c:	84048403 	.word	0x84048403

080113a0 <ai_platform_network_init>:
 80113a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113a4:	b1f8      	cbz	r0, 80113e6 <ai_platform_network_init+0x46>
 80113a6:	4b6e      	ldr	r3, [pc, #440]	; (8011560 <ai_platform_network_init+0x1c0>)
 80113a8:	6802      	ldr	r2, [r0, #0]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	4604      	mov	r4, r0
 80113ae:	d11a      	bne.n	80113e6 <ai_platform_network_init+0x46>
 80113b0:	460e      	mov	r6, r1
 80113b2:	f7ff fc37 	bl	8010c24 <_ai_platform_acquire_crc>
 80113b6:	4b6b      	ldr	r3, [pc, #428]	; (8011564 <ai_platform_network_init+0x1c4>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113c2:	d03d      	beq.n	8011440 <ai_platform_network_init+0xa0>
 80113c4:	4a68      	ldr	r2, [pc, #416]	; (8011568 <ai_platform_network_init+0x1c8>)
 80113c6:	2301      	movs	r3, #1
 80113c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80113cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1fb      	bne.n	80113cc <ai_platform_network_init+0x2c>
 80113d4:	4b65      	ldr	r3, [pc, #404]	; (801156c <ai_platform_network_init+0x1cc>)
 80113d6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80113da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80113de:	4b64      	ldr	r3, [pc, #400]	; (8011570 <ai_platform_network_init+0x1d0>)
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d039      	beq.n	8011458 <ai_platform_network_init+0xb8>
 80113e4:	e7fe      	b.n	80113e4 <ai_platform_network_init+0x44>
 80113e6:	f7ff fc1d 	bl	8010c24 <_ai_platform_acquire_crc>
 80113ea:	4b5e      	ldr	r3, [pc, #376]	; (8011564 <ai_platform_network_init+0x1c4>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113f6:	d010      	beq.n	801141a <ai_platform_network_init+0x7a>
 80113f8:	4a5b      	ldr	r2, [pc, #364]	; (8011568 <ai_platform_network_init+0x1c8>)
 80113fa:	2301      	movs	r3, #1
 80113fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011400:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011404:	2b00      	cmp	r3, #0
 8011406:	d1fb      	bne.n	8011400 <ai_platform_network_init+0x60>
 8011408:	4b58      	ldr	r3, [pc, #352]	; (801156c <ai_platform_network_init+0x1cc>)
 801140a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801140e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011412:	4b57      	ldr	r3, [pc, #348]	; (8011570 <ai_platform_network_init+0x1d0>)
 8011414:	429a      	cmp	r2, r3
 8011416:	d00d      	beq.n	8011434 <ai_platform_network_init+0x94>
 8011418:	e7fe      	b.n	8011418 <ai_platform_network_init+0x78>
 801141a:	4a56      	ldr	r2, [pc, #344]	; (8011574 <ai_platform_network_init+0x1d4>)
 801141c:	2301      	movs	r3, #1
 801141e:	6093      	str	r3, [r2, #8]
 8011420:	6893      	ldr	r3, [r2, #8]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d1fc      	bne.n	8011420 <ai_platform_network_init+0x80>
 8011426:	4b51      	ldr	r3, [pc, #324]	; (801156c <ai_platform_network_init+0x1cc>)
 8011428:	6013      	str	r3, [r2, #0]
 801142a:	6812      	ldr	r2, [r2, #0]
 801142c:	4b50      	ldr	r3, [pc, #320]	; (8011570 <ai_platform_network_init+0x1d0>)
 801142e:	429a      	cmp	r2, r3
 8011430:	d000      	beq.n	8011434 <ai_platform_network_init+0x94>
 8011432:	e7fe      	b.n	8011432 <ai_platform_network_init+0x92>
 8011434:	f7ff fbf8 	bl	8010c28 <_ai_platform_release_crc>
 8011438:	2600      	movs	r6, #0
 801143a:	4630      	mov	r0, r6
 801143c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011440:	4a4c      	ldr	r2, [pc, #304]	; (8011574 <ai_platform_network_init+0x1d4>)
 8011442:	2301      	movs	r3, #1
 8011444:	6093      	str	r3, [r2, #8]
 8011446:	6893      	ldr	r3, [r2, #8]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d1fc      	bne.n	8011446 <ai_platform_network_init+0xa6>
 801144c:	4b47      	ldr	r3, [pc, #284]	; (801156c <ai_platform_network_init+0x1cc>)
 801144e:	6013      	str	r3, [r2, #0]
 8011450:	6812      	ldr	r2, [r2, #0]
 8011452:	4b47      	ldr	r3, [pc, #284]	; (8011570 <ai_platform_network_init+0x1d0>)
 8011454:	429a      	cmp	r2, r3
 8011456:	d11c      	bne.n	8011492 <ai_platform_network_init+0xf2>
 8011458:	f7ff fbe6 	bl	8010c28 <_ai_platform_release_crc>
 801145c:	2e00      	cmp	r6, #0
 801145e:	d06f      	beq.n	8011540 <ai_platform_network_init+0x1a0>
 8011460:	4b45      	ldr	r3, [pc, #276]	; (8011578 <ai_platform_network_init+0x1d8>)
 8011462:	6832      	ldr	r2, [r6, #0]
 8011464:	429a      	cmp	r2, r3
 8011466:	d115      	bne.n	8011494 <ai_platform_network_init+0xf4>
 8011468:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801146c:	6933      	ldr	r3, [r6, #16]
 801146e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8011472:	89f7      	ldrh	r7, [r6, #14]
 8011474:	62a3      	str	r3, [r4, #40]	; 0x28
 8011476:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801147a:	2303      	movs	r3, #3
 801147c:	84e7      	strh	r7, [r4, #38]	; 0x26
 801147e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8011482:	60e3      	str	r3, [r4, #12]
 8011484:	4620      	mov	r0, r4
 8011486:	4626      	mov	r6, r4
 8011488:	f005 f942 	bl	8016710 <ai_layers_init_all>
 801148c:	4630      	mov	r0, r6
 801148e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011492:	e7fe      	b.n	8011492 <ai_platform_network_init+0xf2>
 8011494:	2101      	movs	r1, #1
 8011496:	4630      	mov	r0, r6
 8011498:	4635      	mov	r5, r6
 801149a:	6876      	ldr	r6, [r6, #4]
 801149c:	f7ff fb74 	bl	8010b88 <ai_buffer_get_size>
 80114a0:	f105 081c 	add.w	r8, r5, #28
 80114a4:	4681      	mov	r9, r0
 80114a6:	2101      	movs	r1, #1
 80114a8:	4640      	mov	r0, r8
 80114aa:	6a2f      	ldr	r7, [r5, #32]
 80114ac:	f7ff fb6c 	bl	8010b88 <ai_buffer_get_size>
 80114b0:	f1b9 0f00 	cmp.w	r9, #0
 80114b4:	d025      	beq.n	8011502 <ai_platform_network_init+0x162>
 80114b6:	2201      	movs	r2, #1
 80114b8:	4696      	mov	lr, r2
 80114ba:	bb30      	cbnz	r0, 801150a <ai_platform_network_init+0x16a>
 80114bc:	4680      	mov	r8, r0
 80114be:	4607      	mov	r7, r0
 80114c0:	b376      	cbz	r6, 8011520 <ai_platform_network_init+0x180>
 80114c2:	8be3      	ldrh	r3, [r4, #30]
 80114c4:	4573      	cmp	r3, lr
 80114c6:	d323      	bcc.n	8011510 <ai_platform_network_init+0x170>
 80114c8:	b142      	cbz	r2, 80114dc <ai_platform_network_init+0x13c>
 80114ca:	46ac      	mov	ip, r5
 80114cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80114d0:	6a25      	ldr	r5, [r4, #32]
 80114d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114d4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80114d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80114dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80114de:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80114e2:	2600      	movs	r6, #0
 80114e4:	42bb      	cmp	r3, r7
 80114e6:	83a6      	strh	r6, [r4, #28]
 80114e8:	d323      	bcc.n	8011532 <ai_platform_network_init+0x192>
 80114ea:	b37f      	cbz	r7, 801154c <ai_platform_network_init+0x1ac>
 80114ec:	46c4      	mov	ip, r8
 80114ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80114f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80114f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114f6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80114fa:	46b6      	mov	lr, r6
 80114fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011500:	e7bb      	b.n	801147a <ai_platform_network_init+0xda>
 8011502:	464a      	mov	r2, r9
 8011504:	46ce      	mov	lr, r9
 8011506:	464d      	mov	r5, r9
 8011508:	e7d7      	b.n	80114ba <ai_platform_network_init+0x11a>
 801150a:	b30f      	cbz	r7, 8011550 <ai_platform_network_init+0x1b0>
 801150c:	2701      	movs	r7, #1
 801150e:	e7d7      	b.n	80114c0 <ai_platform_network_init+0x120>
 8011510:	2212      	movs	r2, #18
 8011512:	2116      	movs	r1, #22
 8011514:	f104 0010 	add.w	r0, r4, #16
 8011518:	f000 fb46 	bl	8011ba8 <core_set_error>
 801151c:	2600      	movs	r6, #0
 801151e:	e78c      	b.n	801143a <ai_platform_network_init+0x9a>
 8011520:	f1b9 0f00 	cmp.w	r9, #0
 8011524:	d0cd      	beq.n	80114c2 <ai_platform_network_init+0x122>
 8011526:	2110      	movs	r1, #16
 8011528:	2212      	movs	r2, #18
 801152a:	1860      	adds	r0, r4, r1
 801152c:	f000 fb3c 	bl	8011ba8 <core_set_error>
 8011530:	e783      	b.n	801143a <ai_platform_network_init+0x9a>
 8011532:	2213      	movs	r2, #19
 8011534:	2116      	movs	r1, #22
 8011536:	f104 0010 	add.w	r0, r4, #16
 801153a:	f000 fb35 	bl	8011ba8 <core_set_error>
 801153e:	e77c      	b.n	801143a <ai_platform_network_init+0x9a>
 8011540:	2110      	movs	r1, #16
 8011542:	2211      	movs	r2, #17
 8011544:	1860      	adds	r0, r4, r1
 8011546:	f000 fb2f 	bl	8011ba8 <core_set_error>
 801154a:	e776      	b.n	801143a <ai_platform_network_init+0x9a>
 801154c:	46be      	mov	lr, r7
 801154e:	e794      	b.n	801147a <ai_platform_network_init+0xda>
 8011550:	2110      	movs	r1, #16
 8011552:	2213      	movs	r2, #19
 8011554:	1860      	adds	r0, r4, r1
 8011556:	f000 fb27 	bl	8011ba8 <core_set_error>
 801155a:	463e      	mov	r6, r7
 801155c:	e76d      	b.n	801143a <ai_platform_network_init+0x9a>
 801155e:	bf00      	nop
 8011560:	a1c00100 	.word	0xa1c00100
 8011564:	e0042000 	.word	0xe0042000
 8011568:	58024000 	.word	0x58024000
 801156c:	f407a5c2 	.word	0xf407a5c2
 8011570:	b5e8b5cd 	.word	0xb5e8b5cd
 8011574:	40023000 	.word	0x40023000
 8011578:	a1facade 	.word	0xa1facade

0801157c <ai_platform_network_post_init>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	b1f0      	cbz	r0, 80115be <ai_platform_network_post_init+0x42>
 8011580:	4b3c      	ldr	r3, [pc, #240]	; (8011674 <ai_platform_network_post_init+0xf8>)
 8011582:	6802      	ldr	r2, [r0, #0]
 8011584:	429a      	cmp	r2, r3
 8011586:	4604      	mov	r4, r0
 8011588:	d119      	bne.n	80115be <ai_platform_network_post_init+0x42>
 801158a:	f7ff fb4b 	bl	8010c24 <_ai_platform_acquire_crc>
 801158e:	4b3a      	ldr	r3, [pc, #232]	; (8011678 <ai_platform_network_post_init+0xfc>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801159a:	d03b      	beq.n	8011614 <ai_platform_network_post_init+0x98>
 801159c:	4a37      	ldr	r2, [pc, #220]	; (801167c <ai_platform_network_post_init+0x100>)
 801159e:	2301      	movs	r3, #1
 80115a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80115a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d1fb      	bne.n	80115a4 <ai_platform_network_post_init+0x28>
 80115ac:	4b34      	ldr	r3, [pc, #208]	; (8011680 <ai_platform_network_post_init+0x104>)
 80115ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80115b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80115b6:	4b33      	ldr	r3, [pc, #204]	; (8011684 <ai_platform_network_post_init+0x108>)
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d037      	beq.n	801162c <ai_platform_network_post_init+0xb0>
 80115bc:	e7fe      	b.n	80115bc <ai_platform_network_post_init+0x40>
 80115be:	f7ff fb31 	bl	8010c24 <_ai_platform_acquire_crc>
 80115c2:	4b2d      	ldr	r3, [pc, #180]	; (8011678 <ai_platform_network_post_init+0xfc>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80115ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115ce:	d010      	beq.n	80115f2 <ai_platform_network_post_init+0x76>
 80115d0:	4a2a      	ldr	r2, [pc, #168]	; (801167c <ai_platform_network_post_init+0x100>)
 80115d2:	2301      	movs	r3, #1
 80115d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80115d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d1fb      	bne.n	80115d8 <ai_platform_network_post_init+0x5c>
 80115e0:	4b27      	ldr	r3, [pc, #156]	; (8011680 <ai_platform_network_post_init+0x104>)
 80115e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80115e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80115ea:	4b26      	ldr	r3, [pc, #152]	; (8011684 <ai_platform_network_post_init+0x108>)
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d00d      	beq.n	801160c <ai_platform_network_post_init+0x90>
 80115f0:	e7fe      	b.n	80115f0 <ai_platform_network_post_init+0x74>
 80115f2:	4a25      	ldr	r2, [pc, #148]	; (8011688 <ai_platform_network_post_init+0x10c>)
 80115f4:	2301      	movs	r3, #1
 80115f6:	6093      	str	r3, [r2, #8]
 80115f8:	6893      	ldr	r3, [r2, #8]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d1fc      	bne.n	80115f8 <ai_platform_network_post_init+0x7c>
 80115fe:	4b20      	ldr	r3, [pc, #128]	; (8011680 <ai_platform_network_post_init+0x104>)
 8011600:	6013      	str	r3, [r2, #0]
 8011602:	6812      	ldr	r2, [r2, #0]
 8011604:	4b1f      	ldr	r3, [pc, #124]	; (8011684 <ai_platform_network_post_init+0x108>)
 8011606:	429a      	cmp	r2, r3
 8011608:	d000      	beq.n	801160c <ai_platform_network_post_init+0x90>
 801160a:	e7fe      	b.n	801160a <ai_platform_network_post_init+0x8e>
 801160c:	f7ff fb0c 	bl	8010c28 <_ai_platform_release_crc>
 8011610:	2000      	movs	r0, #0
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	4a1c      	ldr	r2, [pc, #112]	; (8011688 <ai_platform_network_post_init+0x10c>)
 8011616:	2301      	movs	r3, #1
 8011618:	6093      	str	r3, [r2, #8]
 801161a:	6893      	ldr	r3, [r2, #8]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d1fc      	bne.n	801161a <ai_platform_network_post_init+0x9e>
 8011620:	4b17      	ldr	r3, [pc, #92]	; (8011680 <ai_platform_network_post_init+0x104>)
 8011622:	6013      	str	r3, [r2, #0]
 8011624:	6812      	ldr	r2, [r2, #0]
 8011626:	4b17      	ldr	r3, [pc, #92]	; (8011684 <ai_platform_network_post_init+0x108>)
 8011628:	429a      	cmp	r2, r3
 801162a:	d11a      	bne.n	8011662 <ai_platform_network_post_init+0xe6>
 801162c:	f7ff fafc 	bl	8010c28 <_ai_platform_release_crc>
 8011630:	68e3      	ldr	r3, [r4, #12]
 8011632:	f013 0502 	ands.w	r5, r3, #2
 8011636:	d015      	beq.n	8011664 <ai_platform_network_post_init+0xe8>
 8011638:	4620      	mov	r0, r4
 801163a:	f005 f877 	bl	801672c <ai_layers_post_init_all>
 801163e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011640:	b16b      	cbz	r3, 801165e <ai_platform_network_post_init+0xe2>
 8011642:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011644:	e007      	b.n	8011656 <ai_platform_network_post_init+0xda>
 8011646:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 801164a:	4798      	blx	r3
 801164c:	692b      	ldr	r3, [r5, #16]
 801164e:	42ab      	cmp	r3, r5
 8011650:	d005      	beq.n	801165e <ai_platform_network_post_init+0xe2>
 8011652:	b123      	cbz	r3, 801165e <ai_platform_network_post_init+0xe2>
 8011654:	461d      	mov	r5, r3
 8011656:	4629      	mov	r1, r5
 8011658:	2000      	movs	r0, #0
 801165a:	2d00      	cmp	r5, #0
 801165c:	d1f3      	bne.n	8011646 <ai_platform_network_post_init+0xca>
 801165e:	2001      	movs	r0, #1
 8011660:	bd38      	pop	{r3, r4, r5, pc}
 8011662:	e7fe      	b.n	8011662 <ai_platform_network_post_init+0xe6>
 8011664:	2210      	movs	r2, #16
 8011666:	2111      	movs	r1, #17
 8011668:	18a0      	adds	r0, r4, r2
 801166a:	f000 fa9d 	bl	8011ba8 <core_set_error>
 801166e:	4628      	mov	r0, r5
 8011670:	bd38      	pop	{r3, r4, r5, pc}
 8011672:	bf00      	nop
 8011674:	a1c00100 	.word	0xa1c00100
 8011678:	e0042000 	.word	0xe0042000
 801167c:	58024000 	.word	0x58024000
 8011680:	f407a5c2 	.word	0xf407a5c2
 8011684:	b5e8b5cd 	.word	0xb5e8b5cd
 8011688:	40023000 	.word	0x40023000

0801168c <ai_platform_network_process>:
 801168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011690:	460e      	mov	r6, r1
 8011692:	b085      	sub	sp, #20
 8011694:	4693      	mov	fp, r2
 8011696:	4605      	mov	r5, r0
 8011698:	b120      	cbz	r0, 80116a4 <ai_platform_network_process+0x18>
 801169a:	4bb8      	ldr	r3, [pc, #736]	; (801197c <ai_platform_network_process+0x2f0>)
 801169c:	6802      	ldr	r2, [r0, #0]
 801169e:	429a      	cmp	r2, r3
 80116a0:	bf18      	it	ne
 80116a2:	2500      	movne	r5, #0
 80116a4:	f7ff fabe 	bl	8010c24 <_ai_platform_acquire_crc>
 80116a8:	4bb5      	ldr	r3, [pc, #724]	; (8011980 <ai_platform_network_process+0x2f4>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116b4:	d010      	beq.n	80116d8 <ai_platform_network_process+0x4c>
 80116b6:	4ab3      	ldr	r2, [pc, #716]	; (8011984 <ai_platform_network_process+0x2f8>)
 80116b8:	2301      	movs	r3, #1
 80116ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80116be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1fb      	bne.n	80116be <ai_platform_network_process+0x32>
 80116c6:	4bb0      	ldr	r3, [pc, #704]	; (8011988 <ai_platform_network_process+0x2fc>)
 80116c8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80116cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80116d0:	4bae      	ldr	r3, [pc, #696]	; (801198c <ai_platform_network_process+0x300>)
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d00d      	beq.n	80116f2 <ai_platform_network_process+0x66>
 80116d6:	e7fe      	b.n	80116d6 <ai_platform_network_process+0x4a>
 80116d8:	4aad      	ldr	r2, [pc, #692]	; (8011990 <ai_platform_network_process+0x304>)
 80116da:	2301      	movs	r3, #1
 80116dc:	6093      	str	r3, [r2, #8]
 80116de:	6893      	ldr	r3, [r2, #8]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1fc      	bne.n	80116de <ai_platform_network_process+0x52>
 80116e4:	4ba8      	ldr	r3, [pc, #672]	; (8011988 <ai_platform_network_process+0x2fc>)
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	6812      	ldr	r2, [r2, #0]
 80116ea:	4ba8      	ldr	r3, [pc, #672]	; (801198c <ai_platform_network_process+0x300>)
 80116ec:	429a      	cmp	r2, r3
 80116ee:	f040 812c 	bne.w	801194a <ai_platform_network_process+0x2be>
 80116f2:	f7ff fa99 	bl	8010c28 <_ai_platform_release_crc>
 80116f6:	2d00      	cmp	r5, #0
 80116f8:	f000 8154 	beq.w	80119a4 <ai_platform_network_process+0x318>
 80116fc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f000 8124 	beq.w	801194c <ai_platform_network_process+0x2c0>
 8011704:	68eb      	ldr	r3, [r5, #12]
 8011706:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801170a:	f003 0303 	and.w	r3, r3, #3
 801170e:	2700      	movs	r7, #0
 8011710:	2b03      	cmp	r3, #3
 8011712:	616f      	str	r7, [r5, #20]
 8011714:	f040 813e 	bne.w	8011994 <ai_platform_network_process+0x308>
 8011718:	2e00      	cmp	r6, #0
 801171a:	f000 811d 	beq.w	8011958 <ai_platform_network_process+0x2cc>
 801171e:	f1ba 0f00 	cmp.w	sl, #0
 8011722:	f000 8119 	beq.w	8011958 <ai_platform_network_process+0x2cc>
 8011726:	f8ba 3000 	ldrh.w	r3, [sl]
 801172a:	2b00      	cmp	r3, #0
 801172c:	f000 8114 	beq.w	8011958 <ai_platform_network_process+0x2cc>
 8011730:	69b3      	ldr	r3, [r6, #24]
 8011732:	f8cd b00c 	str.w	fp, [sp, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	e9cd 3501 	strd	r3, r5, [sp, #4]
 801173c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d072      	beq.n	801182a <ai_platform_network_process+0x19e>
 8011744:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8011748:	2c00      	cmp	r4, #0
 801174a:	d06e      	beq.n	801182a <ai_platform_network_process+0x19e>
 801174c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8011750:	f8d3 9000 	ldr.w	r9, [r3]
 8011754:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8011758:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801175c:	f000 81e0 	beq.w	8011b20 <ai_platform_network_process+0x494>
 8011760:	69a3      	ldr	r3, [r4, #24]
 8011762:	2101      	movs	r1, #1
 8011764:	4630      	mov	r0, r6
 8011766:	685d      	ldr	r5, [r3, #4]
 8011768:	f7ff fa0e 	bl	8010b88 <ai_buffer_get_size>
 801176c:	4285      	cmp	r5, r0
 801176e:	f0c0 811b 	bcc.w	80119a8 <ai_platform_network_process+0x31c>
 8011772:	68e0      	ldr	r0, [r4, #12]
 8011774:	69b1      	ldr	r1, [r6, #24]
 8011776:	68c2      	ldr	r2, [r0, #12]
 8011778:	68cb      	ldr	r3, [r1, #12]
 801177a:	429a      	cmp	r2, r3
 801177c:	f040 8114 	bne.w	80119a8 <ai_platform_network_process+0x31c>
 8011780:	6882      	ldr	r2, [r0, #8]
 8011782:	688b      	ldr	r3, [r1, #8]
 8011784:	429a      	cmp	r2, r3
 8011786:	f040 810f 	bne.w	80119a8 <ai_platform_network_process+0x31c>
 801178a:	6842      	ldr	r2, [r0, #4]
 801178c:	684b      	ldr	r3, [r1, #4]
 801178e:	429a      	cmp	r2, r3
 8011790:	f040 810a 	bne.w	80119a8 <ai_platform_network_process+0x31c>
 8011794:	69a3      	ldr	r3, [r4, #24]
 8011796:	e9d3 0100 	ldrd	r0, r1, [r3]
 801179a:	f005 f8d7 	bl	801694c <ai_array_get_data_byte_size>
 801179e:	4605      	mov	r5, r0
 80117a0:	4620      	mov	r0, r4
 80117a2:	f005 f827 	bl	80167f4 <get_tensor_byte_size>
 80117a6:	4285      	cmp	r5, r0
 80117a8:	f0c0 80fe 	bcc.w	80119a8 <ai_platform_network_process+0x31c>
 80117ac:	69a3      	ldr	r3, [r4, #24]
 80117ae:	6818      	ldr	r0, [r3, #0]
 80117b0:	f005 f838 	bl	8016824 <ai_array_to_buffer_fmt>
 80117b4:	6833      	ldr	r3, [r6, #0]
 80117b6:	4058      	eors	r0, r3
 80117b8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80117bc:	f040 81bb 	bne.w	8011b36 <ai_platform_network_process+0x4aa>
 80117c0:	6873      	ldr	r3, [r6, #4]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f000 81ae 	beq.w	8011b24 <ai_platform_network_process+0x498>
 80117c8:	69b3      	ldr	r3, [r6, #24]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 819e 	beq.w	8011b0e <ai_platform_network_process+0x482>
 80117d2:	9a01      	ldr	r2, [sp, #4]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	bf38      	it	cc
 80117d8:	461a      	movcc	r2, r3
 80117da:	4620      	mov	r0, r4
 80117dc:	9201      	str	r2, [sp, #4]
 80117de:	f005 f809 	bl	80167f4 <get_tensor_byte_size>
 80117e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80117e6:	69b3      	ldr	r3, [r6, #24]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	fb00 f303 	mul.w	r3, r0, r3
 80117ee:	f8c8 300c 	str.w	r3, [r8, #12]
 80117f2:	6871      	ldr	r1, [r6, #4]
 80117f4:	f8c8 1004 	str.w	r1, [r8, #4]
 80117f8:	440b      	add	r3, r1
 80117fa:	f849 300b 	str.w	r3, [r9, fp]
 80117fe:	69a0      	ldr	r0, [r4, #24]
 8011800:	6803      	ldr	r3, [r0, #0]
 8011802:	009a      	lsls	r2, r3, #2
 8011804:	f107 0701 	add.w	r7, r7, #1
 8011808:	f106 061c 	add.w	r6, r6, #28
 801180c:	f100 80af 	bmi.w	801196e <ai_platform_network_process+0x2e2>
 8011810:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011814:	1a9b      	subs	r3, r3, r2
 8011816:	4419      	add	r1, r3
 8011818:	6081      	str	r1, [r0, #8]
 801181a:	69a3      	ldr	r3, [r4, #24]
 801181c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011820:	60da      	str	r2, [r3, #12]
 8011822:	f8ba 3000 	ldrh.w	r3, [sl]
 8011826:	42bb      	cmp	r3, r7
 8011828:	d888      	bhi.n	801173c <ai_platform_network_process+0xb0>
 801182a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 801182e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8011830:	f1bb 0f00 	cmp.w	fp, #0
 8011834:	f000 8188 	beq.w	8011b48 <ai_platform_network_process+0x4bc>
 8011838:	2a01      	cmp	r2, #1
 801183a:	f240 8160 	bls.w	8011afe <ai_platform_network_process+0x472>
 801183e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8011842:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011846:	2b00      	cmp	r3, #0
 8011848:	f000 8159 	beq.w	8011afe <ai_platform_network_process+0x472>
 801184c:	465e      	mov	r6, fp
 801184e:	2700      	movs	r7, #0
 8011850:	462c      	mov	r4, r5
 8011852:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011856:	2b00      	cmp	r3, #0
 8011858:	f000 80b4 	beq.w	80119c4 <ai_platform_network_process+0x338>
 801185c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8011860:	2d00      	cmp	r5, #0
 8011862:	f000 80af 	beq.w	80119c4 <ai_platform_network_process+0x338>
 8011866:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801186a:	f8d3 8000 	ldr.w	r8, [r3]
 801186e:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8011872:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8011876:	f000 8173 	beq.w	8011b60 <ai_platform_network_process+0x4d4>
 801187a:	69ab      	ldr	r3, [r5, #24]
 801187c:	2101      	movs	r1, #1
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	9302      	str	r3, [sp, #8]
 8011882:	4630      	mov	r0, r6
 8011884:	f7ff f980 	bl	8010b88 <ai_buffer_get_size>
 8011888:	9b02      	ldr	r3, [sp, #8]
 801188a:	4283      	cmp	r3, r0
 801188c:	f0c0 8136 	bcc.w	8011afc <ai_platform_network_process+0x470>
 8011890:	68e8      	ldr	r0, [r5, #12]
 8011892:	69b1      	ldr	r1, [r6, #24]
 8011894:	68c2      	ldr	r2, [r0, #12]
 8011896:	68cb      	ldr	r3, [r1, #12]
 8011898:	429a      	cmp	r2, r3
 801189a:	f040 812f 	bne.w	8011afc <ai_platform_network_process+0x470>
 801189e:	6882      	ldr	r2, [r0, #8]
 80118a0:	688b      	ldr	r3, [r1, #8]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	f040 812a 	bne.w	8011afc <ai_platform_network_process+0x470>
 80118a8:	6842      	ldr	r2, [r0, #4]
 80118aa:	684b      	ldr	r3, [r1, #4]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	f040 8125 	bne.w	8011afc <ai_platform_network_process+0x470>
 80118b2:	69ab      	ldr	r3, [r5, #24]
 80118b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80118b8:	f005 f848 	bl	801694c <ai_array_get_data_byte_size>
 80118bc:	9002      	str	r0, [sp, #8]
 80118be:	4628      	mov	r0, r5
 80118c0:	f004 ff98 	bl	80167f4 <get_tensor_byte_size>
 80118c4:	9b02      	ldr	r3, [sp, #8]
 80118c6:	4283      	cmp	r3, r0
 80118c8:	f0c0 8118 	bcc.w	8011afc <ai_platform_network_process+0x470>
 80118cc:	69ab      	ldr	r3, [r5, #24]
 80118ce:	6818      	ldr	r0, [r3, #0]
 80118d0:	f004 ffa8 	bl	8016824 <ai_array_to_buffer_fmt>
 80118d4:	6833      	ldr	r3, [r6, #0]
 80118d6:	4058      	eors	r0, r3
 80118d8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80118dc:	f040 8138 	bne.w	8011b50 <ai_platform_network_process+0x4c4>
 80118e0:	6873      	ldr	r3, [r6, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f000 814f 	beq.w	8011b86 <ai_platform_network_process+0x4fa>
 80118e8:	69b3      	ldr	r3, [r6, #24]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	f000 8141 	beq.w	8011b74 <ai_platform_network_process+0x4e8>
 80118f2:	9a01      	ldr	r2, [sp, #4]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	bf38      	it	cc
 80118f8:	461a      	movcc	r2, r3
 80118fa:	4628      	mov	r0, r5
 80118fc:	9201      	str	r2, [sp, #4]
 80118fe:	f004 ff79 	bl	80167f4 <get_tensor_byte_size>
 8011902:	f8ca 0008 	str.w	r0, [sl, #8]
 8011906:	69b3      	ldr	r3, [r6, #24]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	fb00 f303 	mul.w	r3, r0, r3
 801190e:	f8ca 300c 	str.w	r3, [sl, #12]
 8011912:	6871      	ldr	r1, [r6, #4]
 8011914:	f8ca 1004 	str.w	r1, [sl, #4]
 8011918:	440b      	add	r3, r1
 801191a:	f848 300b 	str.w	r3, [r8, fp]
 801191e:	69a8      	ldr	r0, [r5, #24]
 8011920:	6803      	ldr	r3, [r0, #0]
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	f107 0701 	add.w	r7, r7, #1
 8011928:	f106 061c 	add.w	r6, r6, #28
 801192c:	d445      	bmi.n	80119ba <ai_platform_network_process+0x32e>
 801192e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011932:	1a9b      	subs	r3, r3, r2
 8011934:	4419      	add	r1, r3
 8011936:	6081      	str	r1, [r0, #8]
 8011938:	69ab      	ldr	r3, [r5, #24]
 801193a:	f8da 2004 	ldr.w	r2, [sl, #4]
 801193e:	60da      	str	r2, [r3, #12]
 8011940:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011944:	429f      	cmp	r7, r3
 8011946:	d384      	bcc.n	8011852 <ai_platform_network_process+0x1c6>
 8011948:	e03c      	b.n	80119c4 <ai_platform_network_process+0x338>
 801194a:	e7fe      	b.n	801194a <ai_platform_network_process+0x2be>
 801194c:	68ea      	ldr	r2, [r5, #12]
 801194e:	616b      	str	r3, [r5, #20]
 8011950:	f002 0203 	and.w	r2, r2, #3
 8011954:	2a03      	cmp	r2, #3
 8011956:	d11d      	bne.n	8011994 <ai_platform_network_process+0x308>
 8011958:	2217      	movs	r2, #23
 801195a:	2112      	movs	r1, #18
 801195c:	f105 0010 	add.w	r0, r5, #16
 8011960:	f000 f922 	bl	8011ba8 <core_set_error>
 8011964:	2400      	movs	r4, #0
 8011966:	4620      	mov	r0, r4
 8011968:	b005      	add	sp, #20
 801196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011972:	429f      	cmp	r7, r3
 8011974:	f4ff aee2 	bcc.w	801173c <ai_platform_network_process+0xb0>
 8011978:	e757      	b.n	801182a <ai_platform_network_process+0x19e>
 801197a:	bf00      	nop
 801197c:	a1c00100 	.word	0xa1c00100
 8011980:	e0042000 	.word	0xe0042000
 8011984:	58024000 	.word	0x58024000
 8011988:	f407a5c2 	.word	0xf407a5c2
 801198c:	b5e8b5cd 	.word	0xb5e8b5cd
 8011990:	40023000 	.word	0x40023000
 8011994:	2230      	movs	r2, #48	; 0x30
 8011996:	2111      	movs	r1, #17
 8011998:	f105 0010 	add.w	r0, r5, #16
 801199c:	f000 f904 	bl	8011ba8 <core_set_error>
 80119a0:	2400      	movs	r4, #0
 80119a2:	e7e0      	b.n	8011966 <ai_platform_network_process+0x2da>
 80119a4:	462c      	mov	r4, r5
 80119a6:	e7de      	b.n	8011966 <ai_platform_network_process+0x2da>
 80119a8:	9d02      	ldr	r5, [sp, #8]
 80119aa:	2218      	movs	r2, #24
 80119ac:	2112      	movs	r1, #18
 80119ae:	f105 0010 	add.w	r0, r5, #16
 80119b2:	f000 f8f9 	bl	8011ba8 <core_set_error>
 80119b6:	2400      	movs	r4, #0
 80119b8:	e7d5      	b.n	8011966 <ai_platform_network_process+0x2da>
 80119ba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80119be:	429f      	cmp	r7, r3
 80119c0:	f4ff af47 	bcc.w	8011852 <ai_platform_network_process+0x1c6>
 80119c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80119c8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80119ca:	82a3      	strh	r3, [r4, #20]
 80119cc:	4625      	mov	r5, r4
 80119ce:	2a00      	cmp	r2, #0
 80119d0:	f040 808e 	bne.w	8011af0 <ai_platform_network_process+0x464>
 80119d4:	4616      	mov	r6, r2
 80119d6:	4617      	mov	r7, r2
 80119d8:	8aec      	ldrh	r4, [r5, #22]
 80119da:	429c      	cmp	r4, r3
 80119dc:	bf38      	it	cc
 80119de:	46ab      	movcc	fp, r5
 80119e0:	d2c1      	bcs.n	8011966 <ai_platform_network_process+0x2da>
 80119e2:	2e00      	cmp	r6, #0
 80119e4:	d030      	beq.n	8011a48 <ai_platform_network_process+0x3bc>
 80119e6:	f04f 0800 	mov.w	r8, #0
 80119ea:	e014      	b.n	8011a16 <ai_platform_network_process+0x38a>
 80119ec:	6882      	ldr	r2, [r0, #8]
 80119ee:	68c5      	ldr	r5, [r0, #12]
 80119f0:	6863      	ldr	r3, [r4, #4]
 80119f2:	1b52      	subs	r2, r2, r5
 80119f4:	4413      	add	r3, r2
 80119f6:	6083      	str	r3, [r0, #8]
 80119f8:	698b      	ldr	r3, [r1, #24]
 80119fa:	6862      	ldr	r2, [r4, #4]
 80119fc:	60da      	str	r2, [r3, #12]
 80119fe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8011a02:	f859 200a 	ldr.w	r2, [r9, sl]
 8011a06:	440b      	add	r3, r1
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	bf24      	itt	cs
 8011a0c:	68e3      	ldrcs	r3, [r4, #12]
 8011a0e:	1ad3      	subcs	r3, r2, r3
 8011a10:	6063      	str	r3, [r4, #4]
 8011a12:	f108 0801 	add.w	r8, r8, #1
 8011a16:	8833      	ldrh	r3, [r6, #0]
 8011a18:	4543      	cmp	r3, r8
 8011a1a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8011a1e:	d913      	bls.n	8011a48 <ai_platform_network_process+0x3bc>
 8011a20:	6873      	ldr	r3, [r6, #4]
 8011a22:	b18b      	cbz	r3, 8011a48 <ai_platform_network_process+0x3bc>
 8011a24:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8011a28:	b171      	cbz	r1, 8011a48 <ai_platform_network_process+0x3bc>
 8011a2a:	6988      	ldr	r0, [r1, #24]
 8011a2c:	68b2      	ldr	r2, [r6, #8]
 8011a2e:	6803      	ldr	r3, [r0, #0]
 8011a30:	f8d2 9000 	ldr.w	r9, [r2]
 8011a34:	009d      	lsls	r5, r3, #2
 8011a36:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8011a3a:	d5d7      	bpl.n	80119ec <ai_platform_network_process+0x360>
 8011a3c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8011a40:	6880      	ldr	r0, [r0, #8]
 8011a42:	f004 ffbf 	bl	80169c4 <memcpy>
 8011a46:	e7da      	b.n	80119fe <ai_platform_network_process+0x372>
 8011a48:	4658      	mov	r0, fp
 8011a4a:	f004 fe83 	bl	8016754 <ai_layers_forward_all>
 8011a4e:	2f00      	cmp	r7, #0
 8011a50:	d03f      	beq.n	8011ad2 <ai_platform_network_process+0x446>
 8011a52:	2400      	movs	r4, #0
 8011a54:	e016      	b.n	8011a84 <ai_platform_network_process+0x3f8>
 8011a56:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8011a5a:	f859 100a 	ldr.w	r1, [r9, sl]
 8011a5e:	4413      	add	r3, r2
 8011a60:	428b      	cmp	r3, r1
 8011a62:	bf24      	itt	cs
 8011a64:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8011a68:	1acb      	subcs	r3, r1, r3
 8011a6a:	f8c8 3004 	str.w	r3, [r8, #4]
 8011a6e:	6981      	ldr	r1, [r0, #24]
 8011a70:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8011a74:	1b52      	subs	r2, r2, r5
 8011a76:	4413      	add	r3, r2
 8011a78:	608b      	str	r3, [r1, #8]
 8011a7a:	6983      	ldr	r3, [r0, #24]
 8011a7c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011a80:	60da      	str	r2, [r3, #12]
 8011a82:	3401      	adds	r4, #1
 8011a84:	883b      	ldrh	r3, [r7, #0]
 8011a86:	42a3      	cmp	r3, r4
 8011a88:	d923      	bls.n	8011ad2 <ai_platform_network_process+0x446>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	b30b      	cbz	r3, 8011ad2 <ai_platform_network_process+0x446>
 8011a8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011a92:	b1f0      	cbz	r0, 8011ad2 <ai_platform_network_process+0x446>
 8011a94:	68ba      	ldr	r2, [r7, #8]
 8011a96:	6983      	ldr	r3, [r0, #24]
 8011a98:	f8d2 9000 	ldr.w	r9, [r2]
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	0092      	lsls	r2, r2, #2
 8011aa0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8011aa4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8011aa8:	d5d5      	bpl.n	8011a56 <ai_platform_network_process+0x3ca>
 8011aaa:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011aae:	6899      	ldr	r1, [r3, #8]
 8011ab0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011ab4:	f004 ff86 	bl	80169c4 <memcpy>
 8011ab8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8011abc:	f859 200a 	ldr.w	r2, [r9, sl]
 8011ac0:	440b      	add	r3, r1
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	bf24      	itt	cs
 8011ac6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8011aca:	1ad3      	subcs	r3, r2, r3
 8011acc:	f8c8 3004 	str.w	r3, [r8, #4]
 8011ad0:	e7d7      	b.n	8011a82 <ai_platform_network_process+0x3f6>
 8011ad2:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8011ad6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8011ada:	3401      	adds	r4, #1
 8011adc:	b2a4      	uxth	r4, r4
 8011ade:	42a3      	cmp	r3, r4
 8011ae0:	f8ab 4016 	strh.w	r4, [fp, #22]
 8011ae4:	f63f af7d 	bhi.w	80119e2 <ai_platform_network_process+0x356>
 8011ae8:	4620      	mov	r0, r4
 8011aea:	b005      	add	sp, #20
 8011aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af0:	2a01      	cmp	r2, #1
 8011af2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8011af4:	d03c      	beq.n	8011b70 <ai_platform_network_process+0x4e4>
 8011af6:	f106 070c 	add.w	r7, r6, #12
 8011afa:	e76d      	b.n	80119d8 <ai_platform_network_process+0x34c>
 8011afc:	4625      	mov	r5, r4
 8011afe:	2218      	movs	r2, #24
 8011b00:	2113      	movs	r1, #19
 8011b02:	f105 0010 	add.w	r0, r5, #16
 8011b06:	f000 f84f 	bl	8011ba8 <core_set_error>
 8011b0a:	2400      	movs	r4, #0
 8011b0c:	e72b      	b.n	8011966 <ai_platform_network_process+0x2da>
 8011b0e:	9d02      	ldr	r5, [sp, #8]
 8011b10:	4604      	mov	r4, r0
 8011b12:	2221      	movs	r2, #33	; 0x21
 8011b14:	2112      	movs	r1, #18
 8011b16:	f105 0010 	add.w	r0, r5, #16
 8011b1a:	f000 f845 	bl	8011ba8 <core_set_error>
 8011b1e:	e722      	b.n	8011966 <ai_platform_network_process+0x2da>
 8011b20:	9d02      	ldr	r5, [sp, #8]
 8011b22:	e719      	b.n	8011958 <ai_platform_network_process+0x2cc>
 8011b24:	9d02      	ldr	r5, [sp, #8]
 8011b26:	4604      	mov	r4, r0
 8011b28:	2217      	movs	r2, #23
 8011b2a:	2112      	movs	r1, #18
 8011b2c:	f105 0010 	add.w	r0, r5, #16
 8011b30:	f000 f83a 	bl	8011ba8 <core_set_error>
 8011b34:	e717      	b.n	8011966 <ai_platform_network_process+0x2da>
 8011b36:	9d02      	ldr	r5, [sp, #8]
 8011b38:	2219      	movs	r2, #25
 8011b3a:	2112      	movs	r1, #18
 8011b3c:	f105 0010 	add.w	r0, r5, #16
 8011b40:	f000 f832 	bl	8011ba8 <core_set_error>
 8011b44:	2400      	movs	r4, #0
 8011b46:	e70e      	b.n	8011966 <ai_platform_network_process+0x2da>
 8011b48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011b4c:	82ab      	strh	r3, [r5, #20]
 8011b4e:	e73e      	b.n	80119ce <ai_platform_network_process+0x342>
 8011b50:	f104 0010 	add.w	r0, r4, #16
 8011b54:	2219      	movs	r2, #25
 8011b56:	2113      	movs	r1, #19
 8011b58:	f000 f826 	bl	8011ba8 <core_set_error>
 8011b5c:	2400      	movs	r4, #0
 8011b5e:	e702      	b.n	8011966 <ai_platform_network_process+0x2da>
 8011b60:	f104 0010 	add.w	r0, r4, #16
 8011b64:	2217      	movs	r2, #23
 8011b66:	2113      	movs	r1, #19
 8011b68:	f000 f81e 	bl	8011ba8 <core_set_error>
 8011b6c:	4654      	mov	r4, sl
 8011b6e:	e6fa      	b.n	8011966 <ai_platform_network_process+0x2da>
 8011b70:	2700      	movs	r7, #0
 8011b72:	e731      	b.n	80119d8 <ai_platform_network_process+0x34c>
 8011b74:	4625      	mov	r5, r4
 8011b76:	2221      	movs	r2, #33	; 0x21
 8011b78:	4604      	mov	r4, r0
 8011b7a:	2113      	movs	r1, #19
 8011b7c:	f105 0010 	add.w	r0, r5, #16
 8011b80:	f000 f812 	bl	8011ba8 <core_set_error>
 8011b84:	e6ef      	b.n	8011966 <ai_platform_network_process+0x2da>
 8011b86:	4625      	mov	r5, r4
 8011b88:	2217      	movs	r2, #23
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	2113      	movs	r1, #19
 8011b8e:	f105 0010 	add.w	r0, r5, #16
 8011b92:	f000 f809 	bl	8011ba8 <core_set_error>
 8011b96:	e6e6      	b.n	8011966 <ai_platform_network_process+0x2da>

08011b98 <core_init>:
 8011b98:	2001      	movs	r0, #1
 8011b9a:	4770      	bx	lr

08011b9c <core_get_error>:
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	6800      	ldr	r0, [r0, #0]
 8011ba2:	601a      	str	r2, [r3, #0]
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop

08011ba8 <core_set_error>:
 8011ba8:	4603      	mov	r3, r0
 8011baa:	7800      	ldrb	r0, [r0, #0]
 8011bac:	b108      	cbz	r0, 8011bb2 <core_set_error+0xa>
 8011bae:	2000      	movs	r0, #0
 8011bb0:	4770      	bx	lr
 8011bb2:	7019      	strb	r1, [r3, #0]
 8011bb4:	6819      	ldr	r1, [r3, #0]
 8011bb6:	f362 211f 	bfi	r1, r2, #8, #24
 8011bba:	2001      	movs	r0, #1
 8011bbc:	6019      	str	r1, [r3, #0]
 8011bbe:	4770      	bx	lr

08011bc0 <_array_handle_get_as_float>:
 8011bc0:	b508      	push	{r3, lr}
 8011bc2:	4b34      	ldr	r3, [pc, #208]	; (8011c94 <_array_handle_get_as_float+0xd4>)
 8011bc4:	4299      	cmp	r1, r3
 8011bc6:	d058      	beq.n	8011c7a <_array_handle_get_as_float+0xba>
 8011bc8:	dc22      	bgt.n	8011c10 <_array_handle_get_as_float+0x50>
 8011bca:	4b33      	ldr	r3, [pc, #204]	; (8011c98 <_array_handle_get_as_float+0xd8>)
 8011bcc:	4299      	cmp	r1, r3
 8011bce:	d05b      	beq.n	8011c88 <_array_handle_get_as_float+0xc8>
 8011bd0:	dd10      	ble.n	8011bf4 <_array_handle_get_as_float+0x34>
 8011bd2:	4b32      	ldr	r3, [pc, #200]	; (8011c9c <_array_handle_get_as_float+0xdc>)
 8011bd4:	4299      	cmp	r1, r3
 8011bd6:	d035      	beq.n	8011c44 <_array_handle_get_as_float+0x84>
 8011bd8:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 8011bdc:	4299      	cmp	r1, r3
 8011bde:	d12e      	bne.n	8011c3e <_array_handle_get_as_float+0x7e>
 8011be0:	7803      	ldrb	r3, [r0, #0]
 8011be2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8011ca0 <_array_handle_get_as_float+0xe0>
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011bec:	bf08      	it	eq
 8011bee:	eeb0 0a67 	vmoveq.f32	s0, s15
 8011bf2:	bd08      	pop	{r3, pc}
 8011bf4:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8011bf8:	4299      	cmp	r1, r3
 8011bfa:	d02a      	beq.n	8011c52 <_array_handle_get_as_float+0x92>
 8011bfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011c00:	4299      	cmp	r1, r3
 8011c02:	d11c      	bne.n	8011c3e <_array_handle_get_as_float+0x7e>
 8011c04:	8803      	ldrh	r3, [r0, #0]
 8011c06:	ee00 3a10 	vmov	s0, r3
 8011c0a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8011c0e:	bd08      	pop	{r3, pc}
 8011c10:	4b24      	ldr	r3, [pc, #144]	; (8011ca4 <_array_handle_get_as_float+0xe4>)
 8011c12:	4299      	cmp	r1, r3
 8011c14:	d023      	beq.n	8011c5e <_array_handle_get_as_float+0x9e>
 8011c16:	dd05      	ble.n	8011c24 <_array_handle_get_as_float+0x64>
 8011c18:	4b23      	ldr	r3, [pc, #140]	; (8011ca8 <_array_handle_get_as_float+0xe8>)
 8011c1a:	4299      	cmp	r1, r3
 8011c1c:	d10f      	bne.n	8011c3e <_array_handle_get_as_float+0x7e>
 8011c1e:	ed90 0a00 	vldr	s0, [r0]
 8011c22:	bd08      	pop	{r3, pc}
 8011c24:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 8011c28:	4299      	cmp	r1, r3
 8011c2a:	d01f      	beq.n	8011c6c <_array_handle_get_as_float+0xac>
 8011c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c30:	4299      	cmp	r1, r3
 8011c32:	d104      	bne.n	8011c3e <_array_handle_get_as_float+0x7e>
 8011c34:	ed90 0a00 	vldr	s0, [r0]
 8011c38:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011c3c:	bd08      	pop	{r3, pc}
 8011c3e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011ca0 <_array_handle_get_as_float+0xe0>
 8011c42:	bd08      	pop	{r3, pc}
 8011c44:	e9d0 0100 	ldrd	r0, r1, [r0]
 8011c48:	f7ef f8b6 	bl	8000db8 <__aeabi_ul2f>
 8011c4c:	ee00 0a10 	vmov	s0, r0
 8011c50:	bd08      	pop	{r3, pc}
 8011c52:	7803      	ldrb	r3, [r0, #0]
 8011c54:	ee00 3a10 	vmov	s0, r3
 8011c58:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8011c5c:	bd08      	pop	{r3, pc}
 8011c5e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8011c62:	f7ef f8b1 	bl	8000dc8 <__aeabi_l2f>
 8011c66:	ee00 0a10 	vmov	s0, r0
 8011c6a:	bd08      	pop	{r3, pc}
 8011c6c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011c70:	ee00 3a10 	vmov	s0, r3
 8011c74:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011c78:	bd08      	pop	{r3, pc}
 8011c7a:	f990 3000 	ldrsb.w	r3, [r0]
 8011c7e:	ee00 3a10 	vmov	s0, r3
 8011c82:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011c86:	bd08      	pop	{r3, pc}
 8011c88:	ed90 0a00 	vldr	s0, [r0]
 8011c8c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8011c90:	bd08      	pop	{r3, pc}
 8011c92:	bf00      	nop
 8011c94:	00840440 	.word	0x00840440
 8011c98:	00041040 	.word	0x00041040
 8011c9c:	00042040 	.word	0x00042040
 8011ca0:	00000000 	.word	0x00000000
 8011ca4:	00842040 	.word	0x00842040
 8011ca8:	01821040 	.word	0x01821040

08011cac <forward_cast>:
 8011cac:	6983      	ldr	r3, [r0, #24]
 8011cae:	881a      	ldrh	r2, [r3, #0]
 8011cb0:	2a00      	cmp	r2, #0
 8011cb2:	f000 815c 	beq.w	8011f6e <forward_cast+0x2c2>
 8011cb6:	6859      	ldr	r1, [r3, #4]
 8011cb8:	684b      	ldr	r3, [r1, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f000 81bb 	beq.w	8012036 <forward_cast+0x38a>
 8011cc0:	2a01      	cmp	r2, #1
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f003 8722 	beq.w	8015b0c <forward_cast+0x3e60>
 8011cc8:	690a      	ldr	r2, [r1, #16]
 8011cca:	2a00      	cmp	r2, #0
 8011ccc:	f003 8721 	beq.w	8015b12 <forward_cast+0x3e66>
 8011cd0:	6812      	ldr	r2, [r2, #0]
 8011cd2:	b103      	cbz	r3, 8011cd6 <forward_cast+0x2a>
 8011cd4:	699b      	ldr	r3, [r3, #24]
 8011cd6:	2a00      	cmp	r2, #0
 8011cd8:	f003 871b 	beq.w	8015b12 <forward_cast+0x3e66>
 8011cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce0:	ed2d 8b02 	vpush	{d8}
 8011ce4:	6996      	ldr	r6, [r2, #24]
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	69c7      	ldr	r7, [r0, #28]
 8011cea:	6859      	ldr	r1, [r3, #4]
 8011cec:	68dd      	ldr	r5, [r3, #12]
 8011cee:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8011fc8 <forward_cast+0x31c>
 8011cf2:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
 8011cf6:	4610      	mov	r0, r2
 8011cf8:	6832      	ldr	r2, [r6, #0]
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	f022 4b7e 	bic.w	fp, r2, #4261412864	; 0xfe000000
 8011d00:	f004 fdfc 	bl	80168fc <ai_array_get_byte_size>
 8011d04:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
 8011d08:	f3cb 2383 	ubfx	r3, fp, #10, #4
 8011d0c:	4547      	cmp	r7, r8
 8011d0e:	68f6      	ldr	r6, [r6, #12]
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	eb05 0a00 	add.w	sl, r5, r0
 8011d16:	f3c4 2983 	ubfx	r9, r4, #10, #4
 8011d1a:	f000 81e2 	beq.w	80120e2 <forward_cast+0x436>
 8011d1e:	f300 8083 	bgt.w	8011e28 <forward_cast+0x17c>
 8011d22:	4ba2      	ldr	r3, [pc, #648]	; (8011fac <forward_cast+0x300>)
 8011d24:	429f      	cmp	r7, r3
 8011d26:	f000 8227 	beq.w	8012178 <forward_cast+0x4cc>
 8011d2a:	dd2c      	ble.n	8011d86 <forward_cast+0xda>
 8011d2c:	4aa0      	ldr	r2, [pc, #640]	; (8011fb0 <forward_cast+0x304>)
 8011d2e:	4297      	cmp	r7, r2
 8011d30:	d124      	bne.n	8011d7c <forward_cast+0xd0>
 8011d32:	45c3      	cmp	fp, r8
 8011d34:	f001 8055 	beq.w	8012de2 <forward_cast+0x1136>
 8011d38:	f300 85f4 	bgt.w	8012924 <forward_cast+0xc78>
 8011d3c:	459b      	cmp	fp, r3
 8011d3e:	f001 85aa 	beq.w	8013896 <forward_cast+0x1bea>
 8011d42:	f300 85d5 	bgt.w	80128f0 <forward_cast+0xc44>
 8011d46:	4b9b      	ldr	r3, [pc, #620]	; (8011fb4 <forward_cast+0x308>)
 8011d48:	459b      	cmp	fp, r3
 8011d4a:	f002 825c 	beq.w	8014206 <forward_cast+0x255a>
 8011d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011d52:	459b      	cmp	fp, r3
 8011d54:	d112      	bne.n	8011d7c <forward_cast+0xd0>
 8011d56:	4555      	cmp	r5, sl
 8011d58:	d210      	bcs.n	8011d7c <forward_cast+0xd0>
 8011d5a:	9f00      	ldr	r7, [sp, #0]
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	4621      	mov	r1, r4
 8011d60:	f7ff ff2e 	bl	8011bc0 <_array_handle_get_as_float>
 8011d64:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6c:	444d      	add	r5, r9
 8011d6e:	bf14      	ite	ne
 8011d70:	2301      	movne	r3, #1
 8011d72:	2300      	moveq	r3, #0
 8011d74:	45aa      	cmp	sl, r5
 8011d76:	8033      	strh	r3, [r6, #0]
 8011d78:	443e      	add	r6, r7
 8011d7a:	d8ef      	bhi.n	8011d5c <forward_cast+0xb0>
 8011d7c:	b003      	add	sp, #12
 8011d7e:	ecbd 8b02 	vpop	{d8}
 8011d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d86:	4a8b      	ldr	r2, [pc, #556]	; (8011fb4 <forward_cast+0x308>)
 8011d88:	4297      	cmp	r7, r2
 8011d8a:	f000 80f2 	beq.w	8011f72 <forward_cast+0x2c6>
 8011d8e:	498a      	ldr	r1, [pc, #552]	; (8011fb8 <forward_cast+0x30c>)
 8011d90:	428f      	cmp	r7, r1
 8011d92:	d1f3      	bne.n	8011d7c <forward_cast+0xd0>
 8011d94:	45c3      	cmp	fp, r8
 8011d96:	f000 8780 	beq.w	8012c9a <forward_cast+0xfee>
 8011d9a:	f300 86e7 	bgt.w	8012b6c <forward_cast+0xec0>
 8011d9e:	459b      	cmp	fp, r3
 8011da0:	f001 8784 	beq.w	8013cac <forward_cast+0x2000>
 8011da4:	4f81      	ldr	r7, [pc, #516]	; (8011fac <forward_cast+0x300>)
 8011da6:	45bb      	cmp	fp, r7
 8011da8:	f300 8554 	bgt.w	8012854 <forward_cast+0xba8>
 8011dac:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8011fb4 <forward_cast+0x308>
 8011db0:	45c3      	cmp	fp, r8
 8011db2:	f001 872d 	beq.w	8013c10 <forward_cast+0x1f64>
 8011db6:	4b80      	ldr	r3, [pc, #512]	; (8011fb8 <forward_cast+0x30c>)
 8011db8:	459b      	cmp	fp, r3
 8011dba:	d1df      	bne.n	8011d7c <forward_cast+0xd0>
 8011dbc:	4555      	cmp	r5, sl
 8011dbe:	d2dd      	bcs.n	8011d7c <forward_cast+0xd0>
 8011dc0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011fd0 <forward_cast+0x324>
 8011dc4:	4b7d      	ldr	r3, [pc, #500]	; (8011fbc <forward_cast+0x310>)
 8011dc6:	4a7e      	ldr	r2, [pc, #504]	; (8011fc0 <forward_cast+0x314>)
 8011dc8:	e019      	b.n	8011dfe <forward_cast+0x152>
 8011dca:	42bc      	cmp	r4, r7
 8011dcc:	f003 842b 	beq.w	8015626 <forward_cast+0x397a>
 8011dd0:	f341 80c0 	ble.w	8012f54 <forward_cast+0x12a8>
 8011dd4:	497b      	ldr	r1, [pc, #492]	; (8011fc4 <forward_cast+0x318>)
 8011dd6:	428c      	cmp	r4, r1
 8011dd8:	f003 83ef 	beq.w	80155ba <forward_cast+0x390e>
 8011ddc:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011de0:	428c      	cmp	r4, r1
 8011de2:	f041 83a5 	bne.w	8013530 <forward_cast+0x1884>
 8011de6:	7828      	ldrb	r0, [r5, #0]
 8011de8:	3800      	subs	r0, #0
 8011dea:	bf18      	it	ne
 8011dec:	2001      	movne	r0, #1
 8011dee:	f380 0010 	usat	r0, #16, r0
 8011df2:	9900      	ldr	r1, [sp, #0]
 8011df4:	8030      	strh	r0, [r6, #0]
 8011df6:	444d      	add	r5, r9
 8011df8:	45aa      	cmp	sl, r5
 8011dfa:	440e      	add	r6, r1
 8011dfc:	d9be      	bls.n	8011d7c <forward_cast+0xd0>
 8011dfe:	4972      	ldr	r1, [pc, #456]	; (8011fc8 <forward_cast+0x31c>)
 8011e00:	428c      	cmp	r4, r1
 8011e02:	f003 82df 	beq.w	80153c4 <forward_cast+0x3718>
 8011e06:	dde0      	ble.n	8011dca <forward_cast+0x11e>
 8011e08:	4970      	ldr	r1, [pc, #448]	; (8011fcc <forward_cast+0x320>)
 8011e0a:	428c      	cmp	r4, r1
 8011e0c:	f002 87b0 	beq.w	8014d70 <forward_cast+0x30c4>
 8011e10:	f341 82c5 	ble.w	801339e <forward_cast+0x16f2>
 8011e14:	455c      	cmp	r4, fp
 8011e16:	f041 838b 	bne.w	8013530 <forward_cast+0x1884>
 8011e1a:	edd5 7a00 	vldr	s15, [r5]
 8011e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e22:	ee17 0a90 	vmov	r0, s15
 8011e26:	e7e2      	b.n	8011dee <forward_cast+0x142>
 8011e28:	4b65      	ldr	r3, [pc, #404]	; (8011fc0 <forward_cast+0x314>)
 8011e2a:	429f      	cmp	r7, r3
 8011e2c:	f000 810c 	beq.w	8012048 <forward_cast+0x39c>
 8011e30:	4a67      	ldr	r2, [pc, #412]	; (8011fd0 <forward_cast+0x324>)
 8011e32:	4297      	cmp	r7, r2
 8011e34:	d149      	bne.n	8011eca <forward_cast+0x21e>
 8011e36:	45c3      	cmp	fp, r8
 8011e38:	f000 8765 	beq.w	8012d06 <forward_cast+0x105a>
 8011e3c:	f300 82cc 	bgt.w	80123d8 <forward_cast+0x72c>
 8011e40:	4a5a      	ldr	r2, [pc, #360]	; (8011fac <forward_cast+0x300>)
 8011e42:	4593      	cmp	fp, r2
 8011e44:	f001 847e 	beq.w	8013744 <forward_cast+0x1a98>
 8011e48:	f300 82b0 	bgt.w	80123ac <forward_cast+0x700>
 8011e4c:	4b59      	ldr	r3, [pc, #356]	; (8011fb4 <forward_cast+0x308>)
 8011e4e:	459b      	cmp	fp, r3
 8011e50:	f002 8344 	beq.w	80144dc <forward_cast+0x2830>
 8011e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e58:	459b      	cmp	fp, r3
 8011e5a:	d18f      	bne.n	8011d7c <forward_cast+0xd0>
 8011e5c:	4555      	cmp	r5, sl
 8011e5e:	d28d      	bcs.n	8011d7c <forward_cast+0xd0>
 8011e60:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8011fd0 <forward_cast+0x324>
 8011e64:	4f55      	ldr	r7, [pc, #340]	; (8011fbc <forward_cast+0x310>)
 8011e66:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011fc0 <forward_cast+0x314>
 8011e6a:	4b50      	ldr	r3, [pc, #320]	; (8011fac <forward_cast+0x300>)
 8011e6c:	4a55      	ldr	r2, [pc, #340]	; (8011fc4 <forward_cast+0x318>)
 8011e6e:	e016      	b.n	8011e9e <forward_cast+0x1f2>
 8011e70:	429c      	cmp	r4, r3
 8011e72:	f002 8541 	beq.w	80148f8 <forward_cast+0x2c4c>
 8011e76:	f341 8189 	ble.w	801318c <forward_cast+0x14e0>
 8011e7a:	4294      	cmp	r4, r2
 8011e7c:	f003 8254 	beq.w	8015328 <forward_cast+0x367c>
 8011e80:	494b      	ldr	r1, [pc, #300]	; (8011fb0 <forward_cast+0x304>)
 8011e82:	428c      	cmp	r4, r1
 8011e84:	f041 836f 	bne.w	8013566 <forward_cast+0x18ba>
 8011e88:	7829      	ldrb	r1, [r5, #0]
 8011e8a:	3900      	subs	r1, #0
 8011e8c:	bf18      	it	ne
 8011e8e:	2101      	movne	r1, #1
 8011e90:	8031      	strh	r1, [r6, #0]
 8011e92:	444d      	add	r5, r9
 8011e94:	9900      	ldr	r1, [sp, #0]
 8011e96:	45aa      	cmp	sl, r5
 8011e98:	440e      	add	r6, r1
 8011e9a:	f67f af6f 	bls.w	8011d7c <forward_cast+0xd0>
 8011e9e:	494a      	ldr	r1, [pc, #296]	; (8011fc8 <forward_cast+0x31c>)
 8011ea0:	428c      	cmp	r4, r1
 8011ea2:	f002 86a5 	beq.w	8014bf0 <forward_cast+0x2f44>
 8011ea6:	dde3      	ble.n	8011e70 <forward_cast+0x1c4>
 8011ea8:	4948      	ldr	r1, [pc, #288]	; (8011fcc <forward_cast+0x320>)
 8011eaa:	428c      	cmp	r4, r1
 8011eac:	f002 876e 	beq.w	8014d8c <forward_cast+0x30e0>
 8011eb0:	f341 8104 	ble.w	80130bc <forward_cast+0x1410>
 8011eb4:	4544      	cmp	r4, r8
 8011eb6:	f041 8356 	bne.w	8013566 <forward_cast+0x18ba>
 8011eba:	edd5 7a00 	vldr	s15, [r5]
 8011ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ec2:	ee17 1a90 	vmov	r1, s15
 8011ec6:	b289      	uxth	r1, r1
 8011ec8:	e7e2      	b.n	8011e90 <forward_cast+0x1e4>
 8011eca:	493c      	ldr	r1, [pc, #240]	; (8011fbc <forward_cast+0x310>)
 8011ecc:	428f      	cmp	r7, r1
 8011ece:	f47f af55 	bne.w	8011d7c <forward_cast+0xd0>
 8011ed2:	45c3      	cmp	fp, r8
 8011ed4:	f000 874d 	beq.w	8012d72 <forward_cast+0x10c6>
 8011ed8:	f300 8546 	bgt.w	8012968 <forward_cast+0xcbc>
 8011edc:	4b33      	ldr	r3, [pc, #204]	; (8011fac <forward_cast+0x300>)
 8011ede:	459b      	cmp	fp, r3
 8011ee0:	f001 8645 	beq.w	8013b6e <forward_cast+0x1ec2>
 8011ee4:	f300 8227 	bgt.w	8012336 <forward_cast+0x68a>
 8011ee8:	4f32      	ldr	r7, [pc, #200]	; (8011fb4 <forward_cast+0x308>)
 8011eea:	45bb      	cmp	fp, r7
 8011eec:	f001 85dd 	beq.w	8013aaa <forward_cast+0x1dfe>
 8011ef0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8011ef4:	459b      	cmp	fp, r3
 8011ef6:	f47f af41 	bne.w	8011d7c <forward_cast+0xd0>
 8011efa:	4555      	cmp	r5, sl
 8011efc:	f4bf af3e 	bcs.w	8011d7c <forward_cast+0xd0>
 8011f00:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8011fd0 <forward_cast+0x324>
 8011f04:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8011fbc <forward_cast+0x310>
 8011f08:	4b2d      	ldr	r3, [pc, #180]	; (8011fc0 <forward_cast+0x314>)
 8011f0a:	4a28      	ldr	r2, [pc, #160]	; (8011fac <forward_cast+0x300>)
 8011f0c:	e01a      	b.n	8011f44 <forward_cast+0x298>
 8011f0e:	4294      	cmp	r4, r2
 8011f10:	f002 85a7 	beq.w	8014a62 <forward_cast+0x2db6>
 8011f14:	f341 80c8 	ble.w	80130a8 <forward_cast+0x13fc>
 8011f18:	492a      	ldr	r1, [pc, #168]	; (8011fc4 <forward_cast+0x318>)
 8011f1a:	428c      	cmp	r4, r1
 8011f1c:	f002 8593 	beq.w	8014a46 <forward_cast+0x2d9a>
 8011f20:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011f24:	428c      	cmp	r4, r1
 8011f26:	f041 82cf 	bne.w	80134c8 <forward_cast+0x181c>
 8011f2a:	7828      	ldrb	r0, [r5, #0]
 8011f2c:	3800      	subs	r0, #0
 8011f2e:	bf18      	it	ne
 8011f30:	2001      	movne	r0, #1
 8011f32:	f300 000f 	ssat	r0, #16, r0
 8011f36:	9900      	ldr	r1, [sp, #0]
 8011f38:	8030      	strh	r0, [r6, #0]
 8011f3a:	444d      	add	r5, r9
 8011f3c:	45aa      	cmp	sl, r5
 8011f3e:	440e      	add	r6, r1
 8011f40:	f67f af1c 	bls.w	8011d7c <forward_cast+0xd0>
 8011f44:	4920      	ldr	r1, [pc, #128]	; (8011fc8 <forward_cast+0x31c>)
 8011f46:	428c      	cmp	r4, r1
 8011f48:	f002 855d 	beq.w	8014a06 <forward_cast+0x2d5a>
 8011f4c:	dddf      	ble.n	8011f0e <forward_cast+0x262>
 8011f4e:	491f      	ldr	r1, [pc, #124]	; (8011fcc <forward_cast+0x320>)
 8011f50:	428c      	cmp	r4, r1
 8011f52:	f003 84c0 	beq.w	80158d6 <forward_cast+0x3c2a>
 8011f56:	f341 8097 	ble.w	8013088 <forward_cast+0x13dc>
 8011f5a:	4544      	cmp	r4, r8
 8011f5c:	f041 82b4 	bne.w	80134c8 <forward_cast+0x181c>
 8011f60:	edd5 7a00 	vldr	s15, [r5]
 8011f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f68:	ee17 0a90 	vmov	r0, s15
 8011f6c:	e7e1      	b.n	8011f32 <forward_cast+0x286>
 8011f6e:	6853      	ldr	r3, [r2, #4]
 8011f70:	deff      	udf	#255	; 0xff
 8011f72:	45c3      	cmp	fp, r8
 8011f74:	f001 854b 	beq.w	8013a0e <forward_cast+0x1d62>
 8011f78:	f300 8448 	bgt.w	801280c <forward_cast+0xb60>
 8011f7c:	459b      	cmp	fp, r3
 8011f7e:	f001 84f5 	beq.w	801396c <forward_cast+0x1cc0>
 8011f82:	f300 842a 	bgt.w	80127da <forward_cast+0xb2e>
 8011f86:	4f0b      	ldr	r7, [pc, #44]	; (8011fb4 <forward_cast+0x308>)
 8011f88:	45bb      	cmp	fp, r7
 8011f8a:	f001 84da 	beq.w	8013942 <forward_cast+0x1c96>
 8011f8e:	4b0a      	ldr	r3, [pc, #40]	; (8011fb8 <forward_cast+0x30c>)
 8011f90:	459b      	cmp	fp, r3
 8011f92:	f47f aef3 	bne.w	8011d7c <forward_cast+0xd0>
 8011f96:	4555      	cmp	r5, sl
 8011f98:	f4bf aef0 	bcs.w	8011d7c <forward_cast+0xd0>
 8011f9c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8011fd0 <forward_cast+0x324>
 8011fa0:	f8df b018 	ldr.w	fp, [pc, #24]	; 8011fbc <forward_cast+0x310>
 8011fa4:	4b06      	ldr	r3, [pc, #24]	; (8011fc0 <forward_cast+0x314>)
 8011fa6:	4a01      	ldr	r2, [pc, #4]	; (8011fac <forward_cast+0x300>)
 8011fa8:	e030      	b.n	801200c <forward_cast+0x360>
 8011faa:	bf00      	nop
 8011fac:	00041040 	.word	0x00041040
 8011fb0:	00060440 	.word	0x00060440
 8011fb4:	00040440 	.word	0x00040440
 8011fb8:	00040840 	.word	0x00040840
 8011fbc:	00840840 	.word	0x00840840
 8011fc0:	00841040 	.word	0x00841040
 8011fc4:	00042040 	.word	0x00042040
 8011fc8:	00840440 	.word	0x00840440
 8011fcc:	00842040 	.word	0x00842040
 8011fd0:	01821040 	.word	0x01821040
 8011fd4:	4294      	cmp	r4, r2
 8011fd6:	f003 80bf 	beq.w	8015158 <forward_cast+0x34ac>
 8011fda:	f340 8792 	ble.w	8012f02 <forward_cast+0x1256>
 8011fde:	49b2      	ldr	r1, [pc, #712]	; (80122a8 <forward_cast+0x5fc>)
 8011fe0:	428c      	cmp	r4, r1
 8011fe2:	f003 80ab 	beq.w	801513c <forward_cast+0x3490>
 8011fe6:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011fea:	428c      	cmp	r4, r1
 8011fec:	f041 8297 	bne.w	801351e <forward_cast+0x1872>
 8011ff0:	7828      	ldrb	r0, [r5, #0]
 8011ff2:	3800      	subs	r0, #0
 8011ff4:	bf18      	it	ne
 8011ff6:	2001      	movne	r0, #1
 8011ff8:	f380 0008 	usat	r0, #8, r0
 8011ffc:	9900      	ldr	r1, [sp, #0]
 8011ffe:	444d      	add	r5, r9
 8012000:	b2c0      	uxtb	r0, r0
 8012002:	45aa      	cmp	sl, r5
 8012004:	8030      	strh	r0, [r6, #0]
 8012006:	440e      	add	r6, r1
 8012008:	f67f aeb8 	bls.w	8011d7c <forward_cast+0xd0>
 801200c:	49a7      	ldr	r1, [pc, #668]	; (80122ac <forward_cast+0x600>)
 801200e:	428c      	cmp	r4, r1
 8012010:	f003 812a 	beq.w	8015268 <forward_cast+0x35bc>
 8012014:	ddde      	ble.n	8011fd4 <forward_cast+0x328>
 8012016:	49a6      	ldr	r1, [pc, #664]	; (80122b0 <forward_cast+0x604>)
 8012018:	428c      	cmp	r4, r1
 801201a:	f002 86f6 	beq.w	8014e0a <forward_cast+0x315e>
 801201e:	f341 80ec 	ble.w	80131fa <forward_cast+0x154e>
 8012022:	4544      	cmp	r4, r8
 8012024:	f041 827b 	bne.w	801351e <forward_cast+0x1872>
 8012028:	edd5 7a00 	vldr	s15, [r5]
 801202c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012030:	ee17 0a90 	vmov	r0, s15
 8012034:	e7e0      	b.n	8011ff8 <forward_cast+0x34c>
 8012036:	2a01      	cmp	r2, #1
 8012038:	f003 8568 	beq.w	8015b0c <forward_cast+0x3e60>
 801203c:	690a      	ldr	r2, [r1, #16]
 801203e:	2a00      	cmp	r2, #0
 8012040:	f003 8567 	beq.w	8015b12 <forward_cast+0x3e66>
 8012044:	6812      	ldr	r2, [r2, #0]
 8012046:	e646      	b.n	8011cd6 <forward_cast+0x2a>
 8012048:	45c3      	cmp	fp, r8
 801204a:	f002 8298 	beq.w	801457e <forward_cast+0x28d2>
 801204e:	f300 82d0 	bgt.w	80125f2 <forward_cast+0x946>
 8012052:	4b98      	ldr	r3, [pc, #608]	; (80122b4 <forward_cast+0x608>)
 8012054:	459b      	cmp	fp, r3
 8012056:	f001 87e1 	beq.w	801401c <forward_cast+0x2370>
 801205a:	f300 81fa 	bgt.w	8012452 <forward_cast+0x7a6>
 801205e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8012062:	459b      	cmp	fp, r3
 8012064:	f001 8789 	beq.w	8013f7a <forward_cast+0x22ce>
 8012068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801206c:	459b      	cmp	fp, r3
 801206e:	f47f ae85 	bne.w	8011d7c <forward_cast+0xd0>
 8012072:	4555      	cmp	r5, sl
 8012074:	f4bf ae82 	bcs.w	8011d7c <forward_cast+0xd0>
 8012078:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80122cc <forward_cast+0x620>
 801207c:	4f8e      	ldr	r7, [pc, #568]	; (80122b8 <forward_cast+0x60c>)
 801207e:	f8df b248 	ldr.w	fp, [pc, #584]	; 80122c8 <forward_cast+0x61c>
 8012082:	4b8c      	ldr	r3, [pc, #560]	; (80122b4 <forward_cast+0x608>)
 8012084:	4a88      	ldr	r2, [pc, #544]	; (80122a8 <forward_cast+0x5fc>)
 8012086:	e016      	b.n	80120b6 <forward_cast+0x40a>
 8012088:	429c      	cmp	r4, r3
 801208a:	f003 8252 	beq.w	8015532 <forward_cast+0x3886>
 801208e:	f340 8792 	ble.w	8012fb6 <forward_cast+0x130a>
 8012092:	4294      	cmp	r4, r2
 8012094:	f003 81fa 	beq.w	801548c <forward_cast+0x37e0>
 8012098:	4988      	ldr	r1, [pc, #544]	; (80122bc <forward_cast+0x610>)
 801209a:	428c      	cmp	r4, r1
 801209c:	f041 824e 	bne.w	801353c <forward_cast+0x1890>
 80120a0:	7829      	ldrb	r1, [r5, #0]
 80120a2:	3900      	subs	r1, #0
 80120a4:	bf18      	it	ne
 80120a6:	2101      	movne	r1, #1
 80120a8:	8031      	strh	r1, [r6, #0]
 80120aa:	444d      	add	r5, r9
 80120ac:	9900      	ldr	r1, [sp, #0]
 80120ae:	45aa      	cmp	sl, r5
 80120b0:	440e      	add	r6, r1
 80120b2:	f67f ae63 	bls.w	8011d7c <forward_cast+0xd0>
 80120b6:	497d      	ldr	r1, [pc, #500]	; (80122ac <forward_cast+0x600>)
 80120b8:	428c      	cmp	r4, r1
 80120ba:	f002 8771 	beq.w	8014fa0 <forward_cast+0x32f4>
 80120be:	dde3      	ble.n	8012088 <forward_cast+0x3dc>
 80120c0:	497b      	ldr	r1, [pc, #492]	; (80122b0 <forward_cast+0x604>)
 80120c2:	428c      	cmp	r4, r1
 80120c4:	f003 8449 	beq.w	801595a <forward_cast+0x3cae>
 80120c8:	f341 8158 	ble.w	801337c <forward_cast+0x16d0>
 80120cc:	4544      	cmp	r4, r8
 80120ce:	f041 8235 	bne.w	801353c <forward_cast+0x1890>
 80120d2:	edd5 7a00 	vldr	s15, [r5]
 80120d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120da:	ee17 1a90 	vmov	r1, s15
 80120de:	b289      	uxth	r1, r1
 80120e0:	e7e2      	b.n	80120a8 <forward_cast+0x3fc>
 80120e2:	45bb      	cmp	fp, r7
 80120e4:	f001 82de 	beq.w	80136a4 <forward_cast+0x19f8>
 80120e8:	f300 80ce 	bgt.w	8012288 <forward_cast+0x5dc>
 80120ec:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80122b4 <forward_cast+0x608>
 80120f0:	45c3      	cmp	fp, r8
 80120f2:	f001 868f 	beq.w	8013e14 <forward_cast+0x2168>
 80120f6:	f300 808a 	bgt.w	801220e <forward_cast+0x562>
 80120fa:	4a71      	ldr	r2, [pc, #452]	; (80122c0 <forward_cast+0x614>)
 80120fc:	4593      	cmp	fp, r2
 80120fe:	f001 8626 	beq.w	8013d4e <forward_cast+0x20a2>
 8012102:	4b70      	ldr	r3, [pc, #448]	; (80122c4 <forward_cast+0x618>)
 8012104:	459b      	cmp	fp, r3
 8012106:	f47f ae39 	bne.w	8011d7c <forward_cast+0xd0>
 801210a:	4555      	cmp	r5, sl
 801210c:	f4bf ae36 	bcs.w	8011d7c <forward_cast+0xd0>
 8012110:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 80122cc <forward_cast+0x620>
 8012114:	4b68      	ldr	r3, [pc, #416]	; (80122b8 <forward_cast+0x60c>)
 8012116:	e01b      	b.n	8012150 <forward_cast+0x4a4>
 8012118:	4544      	cmp	r4, r8
 801211a:	f003 81fd 	beq.w	8015518 <forward_cast+0x386c>
 801211e:	f340 8763 	ble.w	8012fe8 <forward_cast+0x133c>
 8012122:	4961      	ldr	r1, [pc, #388]	; (80122a8 <forward_cast+0x5fc>)
 8012124:	428c      	cmp	r4, r1
 8012126:	f003 81e9 	beq.w	80154fc <forward_cast+0x3850>
 801212a:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 801212e:	428c      	cmp	r4, r1
 8012130:	f041 8213 	bne.w	801355a <forward_cast+0x18ae>
 8012134:	7828      	ldrb	r0, [r5, #0]
 8012136:	3800      	subs	r0, #0
 8012138:	bf18      	it	ne
 801213a:	2001      	movne	r0, #1
 801213c:	f300 0007 	ssat	r0, #8, r0
 8012140:	9900      	ldr	r1, [sp, #0]
 8012142:	444d      	add	r5, r9
 8012144:	b240      	sxtb	r0, r0
 8012146:	45aa      	cmp	sl, r5
 8012148:	8030      	strh	r0, [r6, #0]
 801214a:	440e      	add	r6, r1
 801214c:	f67f ae16 	bls.w	8011d7c <forward_cast+0xd0>
 8012150:	42bc      	cmp	r4, r7
 8012152:	f002 875c 	beq.w	801500e <forward_cast+0x3362>
 8012156:	dddf      	ble.n	8012118 <forward_cast+0x46c>
 8012158:	4955      	ldr	r1, [pc, #340]	; (80122b0 <forward_cast+0x604>)
 801215a:	428c      	cmp	r4, r1
 801215c:	f003 82e0 	beq.w	8015720 <forward_cast+0x3a74>
 8012160:	f341 8171 	ble.w	8013446 <forward_cast+0x179a>
 8012164:	455c      	cmp	r4, fp
 8012166:	f041 81f8 	bne.w	801355a <forward_cast+0x18ae>
 801216a:	edd5 7a00 	vldr	s15, [r5]
 801216e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012172:	ee17 0a90 	vmov	r0, s15
 8012176:	e7e1      	b.n	801213c <forward_cast+0x490>
 8012178:	45c3      	cmp	fp, r8
 801217a:	f001 832b 	beq.w	80137d4 <forward_cast+0x1b28>
 801217e:	f300 81e6 	bgt.w	801254e <forward_cast+0x8a2>
 8012182:	45bb      	cmp	fp, r7
 8012184:	f001 86ae 	beq.w	8013ee4 <forward_cast+0x2238>
 8012188:	f300 81a2 	bgt.w	80124d0 <forward_cast+0x824>
 801218c:	4b4c      	ldr	r3, [pc, #304]	; (80122c0 <forward_cast+0x614>)
 801218e:	459b      	cmp	fp, r3
 8012190:	f001 8657 	beq.w	8013e42 <forward_cast+0x2196>
 8012194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012198:	459b      	cmp	fp, r3
 801219a:	f47f adef 	bne.w	8011d7c <forward_cast+0xd0>
 801219e:	4555      	cmp	r5, sl
 80121a0:	f4bf adec 	bcs.w	8011d7c <forward_cast+0xd0>
 80121a4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80122cc <forward_cast+0x620>
 80121a8:	4f43      	ldr	r7, [pc, #268]	; (80122b8 <forward_cast+0x60c>)
 80121aa:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80122c8 <forward_cast+0x61c>
 80121ae:	4b41      	ldr	r3, [pc, #260]	; (80122b4 <forward_cast+0x608>)
 80121b0:	4a3d      	ldr	r2, [pc, #244]	; (80122a8 <forward_cast+0x5fc>)
 80121b2:	e016      	b.n	80121e2 <forward_cast+0x536>
 80121b4:	429c      	cmp	r4, r3
 80121b6:	f002 84fa 	beq.w	8014bae <forward_cast+0x2f02>
 80121ba:	f341 8046 	ble.w	801324a <forward_cast+0x159e>
 80121be:	4294      	cmp	r4, r2
 80121c0:	f002 83c3 	beq.w	801494a <forward_cast+0x2c9e>
 80121c4:	493d      	ldr	r1, [pc, #244]	; (80122bc <forward_cast+0x610>)
 80121c6:	428c      	cmp	r4, r1
 80121c8:	f041 8181 	bne.w	80134ce <forward_cast+0x1822>
 80121cc:	7829      	ldrb	r1, [r5, #0]
 80121ce:	3900      	subs	r1, #0
 80121d0:	bf18      	it	ne
 80121d2:	2101      	movne	r1, #1
 80121d4:	8031      	strh	r1, [r6, #0]
 80121d6:	444d      	add	r5, r9
 80121d8:	9900      	ldr	r1, [sp, #0]
 80121da:	45aa      	cmp	sl, r5
 80121dc:	440e      	add	r6, r1
 80121de:	f67f adcd 	bls.w	8011d7c <forward_cast+0xd0>
 80121e2:	4932      	ldr	r1, [pc, #200]	; (80122ac <forward_cast+0x600>)
 80121e4:	428c      	cmp	r4, r1
 80121e6:	f002 8607 	beq.w	8014df8 <forward_cast+0x314c>
 80121ea:	dde3      	ble.n	80121b4 <forward_cast+0x508>
 80121ec:	4930      	ldr	r1, [pc, #192]	; (80122b0 <forward_cast+0x604>)
 80121ee:	428c      	cmp	r4, r1
 80121f0:	f003 82a4 	beq.w	801573c <forward_cast+0x3a90>
 80121f4:	f340 87ba 	ble.w	801316c <forward_cast+0x14c0>
 80121f8:	4544      	cmp	r4, r8
 80121fa:	f041 8168 	bne.w	80134ce <forward_cast+0x1822>
 80121fe:	edd5 7a00 	vldr	s15, [r5]
 8012202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012206:	ee17 1a90 	vmov	r1, s15
 801220a:	b289      	uxth	r1, r1
 801220c:	e7e2      	b.n	80121d4 <forward_cast+0x528>
 801220e:	4b2b      	ldr	r3, [pc, #172]	; (80122bc <forward_cast+0x610>)
 8012210:	459b      	cmp	fp, r3
 8012212:	f47f adb3 	bne.w	8011d7c <forward_cast+0xd0>
 8012216:	4555      	cmp	r5, sl
 8012218:	f4bf adb0 	bcs.w	8011d7c <forward_cast+0xd0>
 801221c:	2300      	movs	r3, #0
 801221e:	4619      	mov	r1, r3
 8012220:	4a29      	ldr	r2, [pc, #164]	; (80122c8 <forward_cast+0x61c>)
 8012222:	464b      	mov	r3, r9
 8012224:	46b9      	mov	r9, r7
 8012226:	4637      	mov	r7, r6
 8012228:	460e      	mov	r6, r1
 801222a:	e018      	b.n	801225e <forward_cast+0x5b2>
 801222c:	4544      	cmp	r4, r8
 801222e:	f002 83aa 	beq.w	8014986 <forward_cast+0x2cda>
 8012232:	f340 878f 	ble.w	8013154 <forward_cast+0x14a8>
 8012236:	491c      	ldr	r1, [pc, #112]	; (80122a8 <forward_cast+0x5fc>)
 8012238:	428c      	cmp	r4, r1
 801223a:	f002 8395 	beq.w	8014968 <forward_cast+0x2cbc>
 801223e:	455c      	cmp	r4, fp
 8012240:	f041 8148 	bne.w	80134d4 <forward_cast+0x1828>
 8012244:	7828      	ldrb	r0, [r5, #0]
 8012246:	3800      	subs	r0, #0
 8012248:	bf18      	it	ne
 801224a:	2001      	movne	r0, #1
 801224c:	f300 0007 	ssat	r0, #8, r0
 8012250:	9900      	ldr	r1, [sp, #0]
 8012252:	55b8      	strb	r0, [r7, r6]
 8012254:	441d      	add	r5, r3
 8012256:	45aa      	cmp	sl, r5
 8012258:	440e      	add	r6, r1
 801225a:	f67f ad8f 	bls.w	8011d7c <forward_cast+0xd0>
 801225e:	454c      	cmp	r4, r9
 8012260:	f002 85cf 	beq.w	8014e02 <forward_cast+0x3156>
 8012264:	dde2      	ble.n	801222c <forward_cast+0x580>
 8012266:	4912      	ldr	r1, [pc, #72]	; (80122b0 <forward_cast+0x604>)
 8012268:	428c      	cmp	r4, r1
 801226a:	f002 85b6 	beq.w	8014dda <forward_cast+0x312e>
 801226e:	f340 8735 	ble.w	80130dc <forward_cast+0x1430>
 8012272:	4916      	ldr	r1, [pc, #88]	; (80122cc <forward_cast+0x620>)
 8012274:	428c      	cmp	r4, r1
 8012276:	f041 812d 	bne.w	80134d4 <forward_cast+0x1828>
 801227a:	edd5 7a00 	vldr	s15, [r5]
 801227e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012282:	ee17 0a90 	vmov	r0, s15
 8012286:	e7e1      	b.n	801224c <forward_cast+0x5a0>
 8012288:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80122c8 <forward_cast+0x61c>
 801228c:	45c3      	cmp	fp, r8
 801228e:	f001 876b 	beq.w	8014168 <forward_cast+0x24bc>
 8012292:	4a0e      	ldr	r2, [pc, #56]	; (80122cc <forward_cast+0x620>)
 8012294:	4593      	cmp	fp, r2
 8012296:	f040 83ac 	bne.w	80129f2 <forward_cast+0xd46>
 801229a:	4555      	cmp	r5, sl
 801229c:	f4bf ad6e 	bcs.w	8011d7c <forward_cast+0xd0>
 80122a0:	4b01      	ldr	r3, [pc, #4]	; (80122a8 <forward_cast+0x5fc>)
 80122a2:	4a06      	ldr	r2, [pc, #24]	; (80122bc <forward_cast+0x610>)
 80122a4:	e033      	b.n	801230e <forward_cast+0x662>
 80122a6:	bf00      	nop
 80122a8:	00042040 	.word	0x00042040
 80122ac:	00840440 	.word	0x00840440
 80122b0:	00842040 	.word	0x00842040
 80122b4:	00041040 	.word	0x00041040
 80122b8:	00840840 	.word	0x00840840
 80122bc:	00060440 	.word	0x00060440
 80122c0:	00040440 	.word	0x00040440
 80122c4:	00040840 	.word	0x00040840
 80122c8:	00841040 	.word	0x00841040
 80122cc:	01821040 	.word	0x01821040
 80122d0:	49a6      	ldr	r1, [pc, #664]	; (801256c <forward_cast+0x8c0>)
 80122d2:	428c      	cmp	r4, r1
 80122d4:	f002 84c7 	beq.w	8014c66 <forward_cast+0x2fba>
 80122d8:	f340 85ee 	ble.w	8012eb8 <forward_cast+0x120c>
 80122dc:	429c      	cmp	r4, r3
 80122de:	f002 84b4 	beq.w	8014c4a <forward_cast+0x2f9e>
 80122e2:	4294      	cmp	r4, r2
 80122e4:	f041 8109 	bne.w	80134fa <forward_cast+0x184e>
 80122e8:	7828      	ldrb	r0, [r5, #0]
 80122ea:	3800      	subs	r0, #0
 80122ec:	bf18      	it	ne
 80122ee:	2001      	movne	r0, #1
 80122f0:	f300 0007 	ssat	r0, #8, r0
 80122f4:	b240      	sxtb	r0, r0
 80122f6:	ee07 0a90 	vmov	s15, r0
 80122fa:	9900      	ldr	r1, [sp, #0]
 80122fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012300:	444d      	add	r5, r9
 8012302:	45aa      	cmp	sl, r5
 8012304:	edc6 7a00 	vstr	s15, [r6]
 8012308:	440e      	add	r6, r1
 801230a:	f67f ad37 	bls.w	8011d7c <forward_cast+0xd0>
 801230e:	42bc      	cmp	r4, r7
 8012310:	f002 8411 	beq.w	8014b36 <forward_cast+0x2e8a>
 8012314:	dddc      	ble.n	80122d0 <forward_cast+0x624>
 8012316:	4996      	ldr	r1, [pc, #600]	; (8012570 <forward_cast+0x8c4>)
 8012318:	428c      	cmp	r4, r1
 801231a:	f002 83f6 	beq.w	8014b0a <forward_cast+0x2e5e>
 801231e:	f340 87fb 	ble.w	8013318 <forward_cast+0x166c>
 8012322:	455c      	cmp	r4, fp
 8012324:	f041 80e9 	bne.w	80134fa <forward_cast+0x184e>
 8012328:	edd5 7a00 	vldr	s15, [r5]
 801232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012330:	ee17 0a90 	vmov	r0, s15
 8012334:	e7dc      	b.n	80122f0 <forward_cast+0x644>
 8012336:	4b8f      	ldr	r3, [pc, #572]	; (8012574 <forward_cast+0x8c8>)
 8012338:	459b      	cmp	fp, r3
 801233a:	f47f ad1f 	bne.w	8011d7c <forward_cast+0xd0>
 801233e:	4555      	cmp	r5, sl
 8012340:	f4bf ad1c 	bcs.w	8011d7c <forward_cast+0xd0>
 8012344:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8012570 <forward_cast+0x8c4>
 8012348:	4b8b      	ldr	r3, [pc, #556]	; (8012578 <forward_cast+0x8cc>)
 801234a:	4a88      	ldr	r2, [pc, #544]	; (801256c <forward_cast+0x8c0>)
 801234c:	2700      	movs	r7, #0
 801234e:	e018      	b.n	8012382 <forward_cast+0x6d6>
 8012350:	4294      	cmp	r4, r2
 8012352:	f003 815b 	beq.w	801560c <forward_cast+0x3960>
 8012356:	f340 8607 	ble.w	8012f68 <forward_cast+0x12bc>
 801235a:	4988      	ldr	r1, [pc, #544]	; (801257c <forward_cast+0x8d0>)
 801235c:	428c      	cmp	r4, r1
 801235e:	f003 8103 	beq.w	8015568 <forward_cast+0x38bc>
 8012362:	455c      	cmp	r4, fp
 8012364:	f041 80de 	bne.w	8013524 <forward_cast+0x1878>
 8012368:	7828      	ldrb	r0, [r5, #0]
 801236a:	3800      	subs	r0, #0
 801236c:	bf18      	it	ne
 801236e:	2001      	movne	r0, #1
 8012370:	f300 000f 	ssat	r0, #16, r0
 8012374:	9900      	ldr	r1, [sp, #0]
 8012376:	55f0      	strb	r0, [r6, r7]
 8012378:	444d      	add	r5, r9
 801237a:	45aa      	cmp	sl, r5
 801237c:	440f      	add	r7, r1
 801237e:	f67f acfd 	bls.w	8011d7c <forward_cast+0xd0>
 8012382:	497f      	ldr	r1, [pc, #508]	; (8012580 <forward_cast+0x8d4>)
 8012384:	428c      	cmp	r4, r1
 8012386:	f002 876b 	beq.w	8015260 <forward_cast+0x35b4>
 801238a:	dde1      	ble.n	8012350 <forward_cast+0x6a4>
 801238c:	4544      	cmp	r4, r8
 801238e:	f002 83a6 	beq.w	8014ade <forward_cast+0x2e32>
 8012392:	f340 87b0 	ble.w	80132f6 <forward_cast+0x164a>
 8012396:	497b      	ldr	r1, [pc, #492]	; (8012584 <forward_cast+0x8d8>)
 8012398:	428c      	cmp	r4, r1
 801239a:	f041 80c3 	bne.w	8013524 <forward_cast+0x1878>
 801239e:	edd5 7a00 	vldr	s15, [r5]
 80123a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123a6:	ee17 0a90 	vmov	r0, s15
 80123aa:	e7e1      	b.n	8012370 <forward_cast+0x6c4>
 80123ac:	4b71      	ldr	r3, [pc, #452]	; (8012574 <forward_cast+0x8c8>)
 80123ae:	459b      	cmp	fp, r3
 80123b0:	f47f ace4 	bne.w	8011d7c <forward_cast+0xd0>
 80123b4:	4555      	cmp	r5, sl
 80123b6:	f4bf ace1 	bcs.w	8011d7c <forward_cast+0xd0>
 80123ba:	9f00      	ldr	r7, [sp, #0]
 80123bc:	4628      	mov	r0, r5
 80123be:	4621      	mov	r1, r4
 80123c0:	f7ff fbfe 	bl	8011bc0 <_array_handle_get_as_float>
 80123c4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80123c8:	444d      	add	r5, r9
 80123ca:	ee17 3a90 	vmov	r3, s15
 80123ce:	45aa      	cmp	sl, r5
 80123d0:	7033      	strb	r3, [r6, #0]
 80123d2:	443e      	add	r6, r7
 80123d4:	d8f2      	bhi.n	80123bc <forward_cast+0x710>
 80123d6:	e4d1      	b.n	8011d7c <forward_cast+0xd0>
 80123d8:	459b      	cmp	fp, r3
 80123da:	f001 87e4 	beq.w	80143a6 <forward_cast+0x26fa>
 80123de:	45bb      	cmp	fp, r7
 80123e0:	f040 8147 	bne.w	8012672 <forward_cast+0x9c6>
 80123e4:	4555      	cmp	r5, sl
 80123e6:	f4bf acc9 	bcs.w	8011d7c <forward_cast+0xd0>
 80123ea:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8012588 <forward_cast+0x8dc>
 80123ee:	4a64      	ldr	r2, [pc, #400]	; (8012580 <forward_cast+0x8d4>)
 80123f0:	4b5f      	ldr	r3, [pc, #380]	; (8012570 <forward_cast+0x8c4>)
 80123f2:	f8df b190 	ldr.w	fp, [pc, #400]	; 8012584 <forward_cast+0x8d8>
 80123f6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 801256c <forward_cast+0x8c0>
 80123fa:	4f60      	ldr	r7, [pc, #384]	; (801257c <forward_cast+0x8d0>)
 80123fc:	e01a      	b.n	8012434 <forward_cast+0x788>
 80123fe:	4544      	cmp	r4, r8
 8012400:	f002 847d 	beq.w	8014cfe <forward_cast+0x3052>
 8012404:	f340 8513 	ble.w	8012e2e <forward_cast+0x1182>
 8012408:	42bc      	cmp	r4, r7
 801240a:	f002 8414 	beq.w	8014c36 <forward_cast+0x2f8a>
 801240e:	4959      	ldr	r1, [pc, #356]	; (8012574 <forward_cast+0x8c8>)
 8012410:	428c      	cmp	r4, r1
 8012412:	f041 806e 	bne.w	80134f2 <forward_cast+0x1846>
 8012416:	7829      	ldrb	r1, [r5, #0]
 8012418:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801241c:	2900      	cmp	r1, #0
 801241e:	bf08      	it	eq
 8012420:	eef0 7a48 	vmoveq.f32	s15, s16
 8012424:	9900      	ldr	r1, [sp, #0]
 8012426:	edc6 7a00 	vstr	s15, [r6]
 801242a:	444d      	add	r5, r9
 801242c:	45aa      	cmp	sl, r5
 801242e:	440e      	add	r6, r1
 8012430:	f67f aca4 	bls.w	8011d7c <forward_cast+0xd0>
 8012434:	4294      	cmp	r4, r2
 8012436:	f002 819f 	beq.w	8014778 <forward_cast+0x2acc>
 801243a:	dde0      	ble.n	80123fe <forward_cast+0x752>
 801243c:	429c      	cmp	r4, r3
 801243e:	f002 848d 	beq.w	8014d5c <forward_cast+0x30b0>
 8012442:	f340 8749 	ble.w	80132d8 <forward_cast+0x162c>
 8012446:	455c      	cmp	r4, fp
 8012448:	f041 8053 	bne.w	80134f2 <forward_cast+0x1846>
 801244c:	edd5 7a00 	vldr	s15, [r5]
 8012450:	e7e8      	b.n	8012424 <forward_cast+0x778>
 8012452:	4b48      	ldr	r3, [pc, #288]	; (8012574 <forward_cast+0x8c8>)
 8012454:	459b      	cmp	fp, r3
 8012456:	f47f ac91 	bne.w	8011d7c <forward_cast+0xd0>
 801245a:	4555      	cmp	r5, sl
 801245c:	f4bf ac8e 	bcs.w	8011d7c <forward_cast+0xd0>
 8012460:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8012584 <forward_cast+0x8d8>
 8012464:	f8df b124 	ldr.w	fp, [pc, #292]	; 801258c <forward_cast+0x8e0>
 8012468:	4b43      	ldr	r3, [pc, #268]	; (8012578 <forward_cast+0x8cc>)
 801246a:	4a40      	ldr	r2, [pc, #256]	; (801256c <forward_cast+0x8c0>)
 801246c:	2700      	movs	r7, #0
 801246e:	e018      	b.n	80124a2 <forward_cast+0x7f6>
 8012470:	4294      	cmp	r4, r2
 8012472:	f002 8324 	beq.w	8014abe <forward_cast+0x2e12>
 8012476:	f340 86d0 	ble.w	801321a <forward_cast+0x156e>
 801247a:	4940      	ldr	r1, [pc, #256]	; (801257c <forward_cast+0x8d0>)
 801247c:	428c      	cmp	r4, r1
 801247e:	f002 830e 	beq.w	8014a9e <forward_cast+0x2df2>
 8012482:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8012486:	428c      	cmp	r4, r1
 8012488:	f041 8019 	bne.w	80134be <forward_cast+0x1812>
 801248c:	7829      	ldrb	r1, [r5, #0]
 801248e:	3900      	subs	r1, #0
 8012490:	bf18      	it	ne
 8012492:	2101      	movne	r1, #1
 8012494:	55f1      	strb	r1, [r6, r7]
 8012496:	444d      	add	r5, r9
 8012498:	9900      	ldr	r1, [sp, #0]
 801249a:	45aa      	cmp	sl, r5
 801249c:	440f      	add	r7, r1
 801249e:	f67f ac6d 	bls.w	8011d7c <forward_cast+0xd0>
 80124a2:	4937      	ldr	r1, [pc, #220]	; (8012580 <forward_cast+0x8d4>)
 80124a4:	428c      	cmp	r4, r1
 80124a6:	f000 86c1 	beq.w	801322c <forward_cast+0x1580>
 80124aa:	dde1      	ble.n	8012470 <forward_cast+0x7c4>
 80124ac:	4930      	ldr	r1, [pc, #192]	; (8012570 <forward_cast+0x8c4>)
 80124ae:	428c      	cmp	r4, r1
 80124b0:	f002 855c 	beq.w	8014f6c <forward_cast+0x32c0>
 80124b4:	f340 86ff 	ble.w	80132b6 <forward_cast+0x160a>
 80124b8:	4544      	cmp	r4, r8
 80124ba:	f041 8000 	bne.w	80134be <forward_cast+0x1812>
 80124be:	edd5 7a00 	vldr	s15, [r5]
 80124c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80124ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80124ce:	e7e1      	b.n	8012494 <forward_cast+0x7e8>
 80124d0:	4b28      	ldr	r3, [pc, #160]	; (8012574 <forward_cast+0x8c8>)
 80124d2:	459b      	cmp	fp, r3
 80124d4:	f47f ac52 	bne.w	8011d7c <forward_cast+0xd0>
 80124d8:	4555      	cmp	r5, sl
 80124da:	f4bf ac4f 	bcs.w	8011d7c <forward_cast+0xd0>
 80124de:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8012584 <forward_cast+0x8d8>
 80124e2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 801258c <forward_cast+0x8e0>
 80124e6:	4b24      	ldr	r3, [pc, #144]	; (8012578 <forward_cast+0x8cc>)
 80124e8:	4a20      	ldr	r2, [pc, #128]	; (801256c <forward_cast+0x8c0>)
 80124ea:	2700      	movs	r7, #0
 80124ec:	e018      	b.n	8012520 <forward_cast+0x874>
 80124ee:	4294      	cmp	r4, r2
 80124f0:	f002 80ce 	beq.w	8014690 <forward_cast+0x29e4>
 80124f4:	f340 869d 	ble.w	8013232 <forward_cast+0x1586>
 80124f8:	4920      	ldr	r1, [pc, #128]	; (801257c <forward_cast+0x8d0>)
 80124fa:	428c      	cmp	r4, r1
 80124fc:	f002 82bf 	beq.w	8014a7e <forward_cast+0x2dd2>
 8012500:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8012504:	428c      	cmp	r4, r1
 8012506:	f040 87d7 	bne.w	80134b8 <forward_cast+0x180c>
 801250a:	7829      	ldrb	r1, [r5, #0]
 801250c:	3900      	subs	r1, #0
 801250e:	bf18      	it	ne
 8012510:	2101      	movne	r1, #1
 8012512:	55f1      	strb	r1, [r6, r7]
 8012514:	444d      	add	r5, r9
 8012516:	9900      	ldr	r1, [sp, #0]
 8012518:	45aa      	cmp	sl, r5
 801251a:	440f      	add	r7, r1
 801251c:	f67f ac2e 	bls.w	8011d7c <forward_cast+0xd0>
 8012520:	4917      	ldr	r1, [pc, #92]	; (8012580 <forward_cast+0x8d4>)
 8012522:	428c      	cmp	r4, r1
 8012524:	f000 868e 	beq.w	8013244 <forward_cast+0x1598>
 8012528:	dde1      	ble.n	80124ee <forward_cast+0x842>
 801252a:	4911      	ldr	r1, [pc, #68]	; (8012570 <forward_cast+0x8c4>)
 801252c:	428c      	cmp	r4, r1
 801252e:	f002 81ee 	beq.w	801490e <forward_cast+0x2c62>
 8012532:	f340 8641 	ble.w	80131b8 <forward_cast+0x150c>
 8012536:	4544      	cmp	r4, r8
 8012538:	f040 87be 	bne.w	80134b8 <forward_cast+0x180c>
 801253c:	edd5 7a00 	vldr	s15, [r5]
 8012540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012544:	edcd 7a01 	vstr	s15, [sp, #4]
 8012548:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801254c:	e7e1      	b.n	8012512 <forward_cast+0x866>
 801254e:	4a0a      	ldr	r2, [pc, #40]	; (8012578 <forward_cast+0x8cc>)
 8012550:	4593      	cmp	fp, r2
 8012552:	f001 85c0 	beq.w	80140d6 <forward_cast+0x242a>
 8012556:	4b0b      	ldr	r3, [pc, #44]	; (8012584 <forward_cast+0x8d8>)
 8012558:	459b      	cmp	fp, r3
 801255a:	f040 80c6 	bne.w	80126ea <forward_cast+0xa3e>
 801255e:	4555      	cmp	r5, sl
 8012560:	f4bf ac0c 	bcs.w	8011d7c <forward_cast+0xd0>
 8012564:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8012588 <forward_cast+0x8dc>
 8012568:	4b08      	ldr	r3, [pc, #32]	; (801258c <forward_cast+0x8e0>)
 801256a:	e02e      	b.n	80125ca <forward_cast+0x91e>
 801256c:	00041040 	.word	0x00041040
 8012570:	00842040 	.word	0x00842040
 8012574:	00060440 	.word	0x00060440
 8012578:	00841040 	.word	0x00841040
 801257c:	00042040 	.word	0x00042040
 8012580:	00840440 	.word	0x00840440
 8012584:	01821040 	.word	0x01821040
 8012588:	00000000 	.word	0x00000000
 801258c:	00840840 	.word	0x00840840
 8012590:	42bc      	cmp	r4, r7
 8012592:	f002 812c 	beq.w	80147ee <forward_cast+0x2b42>
 8012596:	f340 843a 	ble.w	8012e0e <forward_cast+0x1162>
 801259a:	49b4      	ldr	r1, [pc, #720]	; (801286c <forward_cast+0xbc0>)
 801259c:	428c      	cmp	r4, r1
 801259e:	f002 813e 	beq.w	801481e <forward_cast+0x2b72>
 80125a2:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80125a6:	428c      	cmp	r4, r1
 80125a8:	f040 879f 	bne.w	80134ea <forward_cast+0x183e>
 80125ac:	7829      	ldrb	r1, [r5, #0]
 80125ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80125b2:	2900      	cmp	r1, #0
 80125b4:	bf08      	it	eq
 80125b6:	eef0 7a48 	vmoveq.f32	s15, s16
 80125ba:	9900      	ldr	r1, [sp, #0]
 80125bc:	edc6 7a00 	vstr	s15, [r6]
 80125c0:	444d      	add	r5, r9
 80125c2:	45aa      	cmp	sl, r5
 80125c4:	440e      	add	r6, r1
 80125c6:	f67f abd9 	bls.w	8011d7c <forward_cast+0xd0>
 80125ca:	4544      	cmp	r4, r8
 80125cc:	f002 80e5 	beq.w	801479a <forward_cast+0x2aee>
 80125d0:	ddde      	ble.n	8012590 <forward_cast+0x8e4>
 80125d2:	49a7      	ldr	r1, [pc, #668]	; (8012870 <forward_cast+0xbc4>)
 80125d4:	428c      	cmp	r4, r1
 80125d6:	f002 8604 	beq.w	80151e2 <forward_cast+0x3536>
 80125da:	f340 8746 	ble.w	801346a <forward_cast+0x17be>
 80125de:	455c      	cmp	r4, fp
 80125e0:	f040 8783 	bne.w	80134ea <forward_cast+0x183e>
 80125e4:	edd5 7a00 	vldr	s15, [r5]
 80125e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125f0:	e7e3      	b.n	80125ba <forward_cast+0x90e>
 80125f2:	45bb      	cmp	fp, r7
 80125f4:	f000 87ba 	beq.w	801356c <forward_cast+0x18c0>
 80125f8:	4b9e      	ldr	r3, [pc, #632]	; (8012874 <forward_cast+0xbc8>)
 80125fa:	459b      	cmp	fp, r3
 80125fc:	f040 80b1 	bne.w	8012762 <forward_cast+0xab6>
 8012600:	4555      	cmp	r5, sl
 8012602:	f4bf abbb 	bcs.w	8011d7c <forward_cast+0xd0>
 8012606:	ed9f 8a9c 	vldr	s16, [pc, #624]	; 8012878 <forward_cast+0xbcc>
 801260a:	4a99      	ldr	r2, [pc, #612]	; (8012870 <forward_cast+0xbc4>)
 801260c:	4b9b      	ldr	r3, [pc, #620]	; (801287c <forward_cast+0xbd0>)
 801260e:	e01d      	b.n	801264c <forward_cast+0x9a0>
 8012610:	499b      	ldr	r1, [pc, #620]	; (8012880 <forward_cast+0xbd4>)
 8012612:	428c      	cmp	r4, r1
 8012614:	f002 8757 	beq.w	80154c6 <forward_cast+0x381a>
 8012618:	f340 847d 	ble.w	8012f16 <forward_cast+0x126a>
 801261c:	4993      	ldr	r1, [pc, #588]	; (801286c <forward_cast+0xbc0>)
 801261e:	428c      	cmp	r4, r1
 8012620:	f002 8743 	beq.w	80154aa <forward_cast+0x37fe>
 8012624:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8012628:	428c      	cmp	r4, r1
 801262a:	f040 878a 	bne.w	8013542 <forward_cast+0x1896>
 801262e:	7829      	ldrb	r1, [r5, #0]
 8012630:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012634:	2900      	cmp	r1, #0
 8012636:	bf08      	it	eq
 8012638:	eef0 7a48 	vmoveq.f32	s15, s16
 801263c:	9900      	ldr	r1, [sp, #0]
 801263e:	edc6 7a00 	vstr	s15, [r6]
 8012642:	444d      	add	r5, r9
 8012644:	45aa      	cmp	sl, r5
 8012646:	440e      	add	r6, r1
 8012648:	f67f ab98 	bls.w	8011d7c <forward_cast+0xd0>
 801264c:	4544      	cmp	r4, r8
 801264e:	f002 8706 	beq.w	801545e <forward_cast+0x37b2>
 8012652:	dddd      	ble.n	8012610 <forward_cast+0x964>
 8012654:	4294      	cmp	r4, r2
 8012656:	f002 85b2 	beq.w	80151be <forward_cast+0x3512>
 801265a:	f340 866f 	ble.w	801333c <forward_cast+0x1690>
 801265e:	455c      	cmp	r4, fp
 8012660:	f040 876f 	bne.w	8013542 <forward_cast+0x1896>
 8012664:	edd5 7a00 	vldr	s15, [r5]
 8012668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801266c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012670:	e7e4      	b.n	801263c <forward_cast+0x990>
 8012672:	4b82      	ldr	r3, [pc, #520]	; (801287c <forward_cast+0xbd0>)
 8012674:	459b      	cmp	fp, r3
 8012676:	f47f ab81 	bne.w	8011d7c <forward_cast+0xd0>
 801267a:	4555      	cmp	r5, sl
 801267c:	f4bf ab7e 	bcs.w	8011d7c <forward_cast+0xd0>
 8012680:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8012874 <forward_cast+0xbc8>
 8012684:	4f7d      	ldr	r7, [pc, #500]	; (801287c <forward_cast+0xbd0>)
 8012686:	f8df b204 	ldr.w	fp, [pc, #516]	; 801288c <forward_cast+0xbe0>
 801268a:	4b7d      	ldr	r3, [pc, #500]	; (8012880 <forward_cast+0xbd4>)
 801268c:	4a77      	ldr	r2, [pc, #476]	; (801286c <forward_cast+0xbc0>)
 801268e:	e016      	b.n	80126be <forward_cast+0xa12>
 8012690:	429c      	cmp	r4, r3
 8012692:	f002 861c 	beq.w	80152ce <forward_cast+0x3622>
 8012696:	f340 8480 	ble.w	8012f9a <forward_cast+0x12ee>
 801269a:	4294      	cmp	r4, r2
 801269c:	f002 8608 	beq.w	80152b0 <forward_cast+0x3604>
 80126a0:	4978      	ldr	r1, [pc, #480]	; (8012884 <forward_cast+0xbd8>)
 80126a2:	428c      	cmp	r4, r1
 80126a4:	f040 8735 	bne.w	8013512 <forward_cast+0x1866>
 80126a8:	7829      	ldrb	r1, [r5, #0]
 80126aa:	3900      	subs	r1, #0
 80126ac:	bf18      	it	ne
 80126ae:	2101      	movne	r1, #1
 80126b0:	8031      	strh	r1, [r6, #0]
 80126b2:	444d      	add	r5, r9
 80126b4:	9900      	ldr	r1, [sp, #0]
 80126b6:	45aa      	cmp	sl, r5
 80126b8:	440e      	add	r6, r1
 80126ba:	f67f ab5f 	bls.w	8011d7c <forward_cast+0xd0>
 80126be:	4972      	ldr	r1, [pc, #456]	; (8012888 <forward_cast+0xbdc>)
 80126c0:	428c      	cmp	r4, r1
 80126c2:	f002 8616 	beq.w	80152f2 <forward_cast+0x3646>
 80126c6:	dde3      	ble.n	8012690 <forward_cast+0x9e4>
 80126c8:	4969      	ldr	r1, [pc, #420]	; (8012870 <forward_cast+0xbc4>)
 80126ca:	428c      	cmp	r4, r1
 80126cc:	f002 8564 	beq.w	8015198 <forward_cast+0x34ec>
 80126d0:	f340 8685 	ble.w	80133de <forward_cast+0x1732>
 80126d4:	4544      	cmp	r4, r8
 80126d6:	f040 871c 	bne.w	8013512 <forward_cast+0x1866>
 80126da:	edd5 7a00 	vldr	s15, [r5]
 80126de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126e2:	ee17 1a90 	vmov	r1, s15
 80126e6:	b209      	sxth	r1, r1
 80126e8:	e7e2      	b.n	80126b0 <forward_cast+0xa04>
 80126ea:	4b64      	ldr	r3, [pc, #400]	; (801287c <forward_cast+0xbd0>)
 80126ec:	459b      	cmp	fp, r3
 80126ee:	f47f ab45 	bne.w	8011d7c <forward_cast+0xd0>
 80126f2:	4555      	cmp	r5, sl
 80126f4:	f4bf ab42 	bcs.w	8011d7c <forward_cast+0xd0>
 80126f8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8012874 <forward_cast+0xbc8>
 80126fc:	4f5f      	ldr	r7, [pc, #380]	; (801287c <forward_cast+0xbd0>)
 80126fe:	f8df b18c 	ldr.w	fp, [pc, #396]	; 801288c <forward_cast+0xbe0>
 8012702:	4b5f      	ldr	r3, [pc, #380]	; (8012880 <forward_cast+0xbd4>)
 8012704:	4a59      	ldr	r2, [pc, #356]	; (801286c <forward_cast+0xbc0>)
 8012706:	e016      	b.n	8012736 <forward_cast+0xa8a>
 8012708:	429c      	cmp	r4, r3
 801270a:	f002 8597 	beq.w	801523c <forward_cast+0x3590>
 801270e:	f340 8413 	ble.w	8012f38 <forward_cast+0x128c>
 8012712:	4294      	cmp	r4, r2
 8012714:	f002 8503 	beq.w	801511e <forward_cast+0x3472>
 8012718:	495a      	ldr	r1, [pc, #360]	; (8012884 <forward_cast+0xbd8>)
 801271a:	428c      	cmp	r4, r1
 801271c:	f040 86fc 	bne.w	8013518 <forward_cast+0x186c>
 8012720:	7829      	ldrb	r1, [r5, #0]
 8012722:	3900      	subs	r1, #0
 8012724:	bf18      	it	ne
 8012726:	2101      	movne	r1, #1
 8012728:	8031      	strh	r1, [r6, #0]
 801272a:	444d      	add	r5, r9
 801272c:	9900      	ldr	r1, [sp, #0]
 801272e:	45aa      	cmp	sl, r5
 8012730:	440e      	add	r6, r1
 8012732:	f67f ab23 	bls.w	8011d7c <forward_cast+0xd0>
 8012736:	4954      	ldr	r1, [pc, #336]	; (8012888 <forward_cast+0xbdc>)
 8012738:	428c      	cmp	r4, r1
 801273a:	f002 85de 	beq.w	80152fa <forward_cast+0x364e>
 801273e:	dde3      	ble.n	8012708 <forward_cast+0xa5c>
 8012740:	494b      	ldr	r1, [pc, #300]	; (8012870 <forward_cast+0xbc4>)
 8012742:	428c      	cmp	r4, r1
 8012744:	f002 8594 	beq.w	8015270 <forward_cast+0x35c4>
 8012748:	f340 8458 	ble.w	8012ffc <forward_cast+0x1350>
 801274c:	4544      	cmp	r4, r8
 801274e:	f040 86e3 	bne.w	8013518 <forward_cast+0x186c>
 8012752:	edd5 7a00 	vldr	s15, [r5]
 8012756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801275a:	ee17 1a90 	vmov	r1, s15
 801275e:	b209      	sxth	r1, r1
 8012760:	e7e2      	b.n	8012728 <forward_cast+0xa7c>
 8012762:	4b46      	ldr	r3, [pc, #280]	; (801287c <forward_cast+0xbd0>)
 8012764:	459b      	cmp	fp, r3
 8012766:	f47f ab09 	bne.w	8011d7c <forward_cast+0xd0>
 801276a:	4555      	cmp	r5, sl
 801276c:	f4bf ab06 	bcs.w	8011d7c <forward_cast+0xd0>
 8012770:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8012874 <forward_cast+0xbc8>
 8012774:	4f41      	ldr	r7, [pc, #260]	; (801287c <forward_cast+0xbd0>)
 8012776:	f8df b114 	ldr.w	fp, [pc, #276]	; 801288c <forward_cast+0xbe0>
 801277a:	4b41      	ldr	r3, [pc, #260]	; (8012880 <forward_cast+0xbd4>)
 801277c:	4a3b      	ldr	r2, [pc, #236]	; (801286c <forward_cast+0xbc0>)
 801277e:	e016      	b.n	80127ae <forward_cast+0xb02>
 8012780:	429c      	cmp	r4, r3
 8012782:	f002 8674 	beq.w	801546e <forward_cast+0x37c2>
 8012786:	f340 8588 	ble.w	801329a <forward_cast+0x15ee>
 801278a:	4294      	cmp	r4, r2
 801278c:	f002 85bd 	beq.w	801530a <forward_cast+0x365e>
 8012790:	493c      	ldr	r1, [pc, #240]	; (8012884 <forward_cast+0xbd8>)
 8012792:	428c      	cmp	r4, r1
 8012794:	f040 86e4 	bne.w	8013560 <forward_cast+0x18b4>
 8012798:	7829      	ldrb	r1, [r5, #0]
 801279a:	3900      	subs	r1, #0
 801279c:	bf18      	it	ne
 801279e:	2101      	movne	r1, #1
 80127a0:	8031      	strh	r1, [r6, #0]
 80127a2:	444d      	add	r5, r9
 80127a4:	9900      	ldr	r1, [sp, #0]
 80127a6:	45aa      	cmp	sl, r5
 80127a8:	440e      	add	r6, r1
 80127aa:	f67f aae7 	bls.w	8011d7c <forward_cast+0xd0>
 80127ae:	4936      	ldr	r1, [pc, #216]	; (8012888 <forward_cast+0xbdc>)
 80127b0:	428c      	cmp	r4, r1
 80127b2:	f002 8219 	beq.w	8014be8 <forward_cast+0x2f3c>
 80127b6:	dde3      	ble.n	8012780 <forward_cast+0xad4>
 80127b8:	492d      	ldr	r1, [pc, #180]	; (8012870 <forward_cast+0xbc4>)
 80127ba:	428c      	cmp	r4, r1
 80127bc:	f002 84d9 	beq.w	8015172 <forward_cast+0x34c6>
 80127c0:	f340 849e 	ble.w	8013100 <forward_cast+0x1454>
 80127c4:	4544      	cmp	r4, r8
 80127c6:	f040 86cb 	bne.w	8013560 <forward_cast+0x18b4>
 80127ca:	edd5 7a00 	vldr	s15, [r5]
 80127ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127d2:	ee17 1a90 	vmov	r1, s15
 80127d6:	b209      	sxth	r1, r1
 80127d8:	e7e2      	b.n	80127a0 <forward_cast+0xaf4>
 80127da:	4b2a      	ldr	r3, [pc, #168]	; (8012884 <forward_cast+0xbd8>)
 80127dc:	459b      	cmp	fp, r3
 80127de:	f47f aacd 	bne.w	8011d7c <forward_cast+0xd0>
 80127e2:	4555      	cmp	r5, sl
 80127e4:	f4bf aaca 	bcs.w	8011d7c <forward_cast+0xd0>
 80127e8:	9f00      	ldr	r7, [sp, #0]
 80127ea:	4621      	mov	r1, r4
 80127ec:	4628      	mov	r0, r5
 80127ee:	f7ff f9e7 	bl	8011bc0 <_array_handle_get_as_float>
 80127f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80127f6:	ee17 3a90 	vmov	r3, s15
 80127fa:	f383 0308 	usat	r3, #8, r3
 80127fe:	444d      	add	r5, r9
 8012800:	45aa      	cmp	sl, r5
 8012802:	7033      	strb	r3, [r6, #0]
 8012804:	443e      	add	r6, r7
 8012806:	d8f0      	bhi.n	80127ea <forward_cast+0xb3e>
 8012808:	f7ff bab8 	b.w	8011d7c <forward_cast+0xd0>
 801280c:	4b1f      	ldr	r3, [pc, #124]	; (801288c <forward_cast+0xbe0>)
 801280e:	459b      	cmp	fp, r3
 8012810:	f001 850f 	beq.w	8014232 <forward_cast+0x2586>
 8012814:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8012818:	459b      	cmp	fp, r3
 801281a:	f040 81ea 	bne.w	8012bf2 <forward_cast+0xf46>
 801281e:	4555      	cmp	r5, sl
 8012820:	f4bf aaac 	bcs.w	8011d7c <forward_cast+0xd0>
 8012824:	9f00      	ldr	r7, [sp, #0]
 8012826:	4621      	mov	r1, r4
 8012828:	4628      	mov	r0, r5
 801282a:	f7ff f9c9 	bl	8011bc0 <_array_handle_get_as_float>
 801282e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012832:	ee17 3a90 	vmov	r3, s15
 8012836:	f383 0308 	usat	r3, #8, r3
 801283a:	b2db      	uxtb	r3, r3
 801283c:	ee07 3a90 	vmov	s15, r3
 8012840:	444d      	add	r5, r9
 8012842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012846:	45aa      	cmp	sl, r5
 8012848:	edc6 7a00 	vstr	s15, [r6]
 801284c:	443e      	add	r6, r7
 801284e:	d8ea      	bhi.n	8012826 <forward_cast+0xb7a>
 8012850:	f7ff ba94 	b.w	8011d7c <forward_cast+0xd0>
 8012854:	4b0b      	ldr	r3, [pc, #44]	; (8012884 <forward_cast+0xbd8>)
 8012856:	459b      	cmp	fp, r3
 8012858:	f47f aa90 	bne.w	8011d7c <forward_cast+0xd0>
 801285c:	4555      	cmp	r5, sl
 801285e:	f4bf aa8d 	bcs.w	8011d7c <forward_cast+0xd0>
 8012862:	4b06      	ldr	r3, [pc, #24]	; (801287c <forward_cast+0xbd0>)
 8012864:	4a09      	ldr	r2, [pc, #36]	; (801288c <forward_cast+0xbe0>)
 8012866:	f04f 0800 	mov.w	r8, #0
 801286a:	e02b      	b.n	80128c4 <forward_cast+0xc18>
 801286c:	00042040 	.word	0x00042040
 8012870:	00842040 	.word	0x00842040
 8012874:	01821040 	.word	0x01821040
 8012878:	00000000 	.word	0x00000000
 801287c:	00840840 	.word	0x00840840
 8012880:	00041040 	.word	0x00041040
 8012884:	00060440 	.word	0x00060440
 8012888:	00840440 	.word	0x00840440
 801288c:	00841040 	.word	0x00841040
 8012890:	42bc      	cmp	r4, r7
 8012892:	f002 8685 	beq.w	80155a0 <forward_cast+0x38f4>
 8012896:	f340 839b 	ble.w	8012fd0 <forward_cast+0x1324>
 801289a:	49ac      	ldr	r1, [pc, #688]	; (8012b4c <forward_cast+0xea0>)
 801289c:	428c      	cmp	r4, r1
 801289e:	f002 8671 	beq.w	8015584 <forward_cast+0x38d8>
 80128a2:	455c      	cmp	r4, fp
 80128a4:	f040 8641 	bne.w	801352a <forward_cast+0x187e>
 80128a8:	7828      	ldrb	r0, [r5, #0]
 80128aa:	3800      	subs	r0, #0
 80128ac:	bf18      	it	ne
 80128ae:	2001      	movne	r0, #1
 80128b0:	f380 0010 	usat	r0, #16, r0
 80128b4:	9900      	ldr	r1, [sp, #0]
 80128b6:	f806 0008 	strb.w	r0, [r6, r8]
 80128ba:	444d      	add	r5, r9
 80128bc:	45aa      	cmp	sl, r5
 80128be:	4488      	add	r8, r1
 80128c0:	f67f aa5c 	bls.w	8011d7c <forward_cast+0xd0>
 80128c4:	49a2      	ldr	r1, [pc, #648]	; (8012b50 <forward_cast+0xea4>)
 80128c6:	428c      	cmp	r4, r1
 80128c8:	f002 851b 	beq.w	8015302 <forward_cast+0x3656>
 80128cc:	dde0      	ble.n	8012890 <forward_cast+0xbe4>
 80128ce:	49a1      	ldr	r1, [pc, #644]	; (8012b54 <forward_cast+0xea8>)
 80128d0:	428c      	cmp	r4, r1
 80128d2:	f002 826d 	beq.w	8014db0 <forward_cast+0x3104>
 80128d6:	f340 8572 	ble.w	80133be <forward_cast+0x1712>
 80128da:	499f      	ldr	r1, [pc, #636]	; (8012b58 <forward_cast+0xeac>)
 80128dc:	428c      	cmp	r4, r1
 80128de:	f040 8624 	bne.w	801352a <forward_cast+0x187e>
 80128e2:	edd5 7a00 	vldr	s15, [r5]
 80128e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128ea:	ee17 0a90 	vmov	r0, s15
 80128ee:	e7df      	b.n	80128b0 <forward_cast+0xc04>
 80128f0:	4b9a      	ldr	r3, [pc, #616]	; (8012b5c <forward_cast+0xeb0>)
 80128f2:	459b      	cmp	fp, r3
 80128f4:	f47f aa42 	bne.w	8011d7c <forward_cast+0xd0>
 80128f8:	4555      	cmp	r5, sl
 80128fa:	f4bf aa3f 	bcs.w	8011d7c <forward_cast+0xd0>
 80128fe:	9f00      	ldr	r7, [sp, #0]
 8012900:	4628      	mov	r0, r5
 8012902:	4621      	mov	r1, r4
 8012904:	f7ff f95c 	bl	8011bc0 <_array_handle_get_as_float>
 8012908:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801290c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012910:	444d      	add	r5, r9
 8012912:	bf14      	ite	ne
 8012914:	2301      	movne	r3, #1
 8012916:	2300      	moveq	r3, #0
 8012918:	45aa      	cmp	sl, r5
 801291a:	7033      	strb	r3, [r6, #0]
 801291c:	443e      	add	r6, r7
 801291e:	d8ef      	bhi.n	8012900 <forward_cast+0xc54>
 8012920:	f7ff ba2c 	b.w	8011d7c <forward_cast+0xd0>
 8012924:	4b8e      	ldr	r3, [pc, #568]	; (8012b60 <forward_cast+0xeb4>)
 8012926:	459b      	cmp	fp, r3
 8012928:	f001 84d4 	beq.w	80142d4 <forward_cast+0x2628>
 801292c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8012930:	459b      	cmp	fp, r3
 8012932:	f040 8096 	bne.w	8012a62 <forward_cast+0xdb6>
 8012936:	4555      	cmp	r5, sl
 8012938:	f4bf aa20 	bcs.w	8011d7c <forward_cast+0xd0>
 801293c:	f04f 0800 	mov.w	r8, #0
 8012940:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8012944:	4628      	mov	r0, r5
 8012946:	4621      	mov	r1, r4
 8012948:	f7ff f93a 	bl	8011bc0 <_array_handle_get_as_float>
 801294c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012954:	444d      	add	r5, r9
 8012956:	f000 85a6 	beq.w	80134a6 <forward_cast+0x17fa>
 801295a:	9b00      	ldr	r3, [sp, #0]
 801295c:	6037      	str	r7, [r6, #0]
 801295e:	45aa      	cmp	sl, r5
 8012960:	441e      	add	r6, r3
 8012962:	d8ef      	bhi.n	8012944 <forward_cast+0xc98>
 8012964:	f7ff ba0a 	b.w	8011d7c <forward_cast+0xd0>
 8012968:	459b      	cmp	fp, r3
 801296a:	f001 8566 	beq.w	801443a <forward_cast+0x278e>
 801296e:	4593      	cmp	fp, r2
 8012970:	f040 80b2 	bne.w	8012ad8 <forward_cast+0xe2c>
 8012974:	4555      	cmp	r5, sl
 8012976:	f4bf aa01 	bcs.w	8011d7c <forward_cast+0xd0>
 801297a:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8012b58 <forward_cast+0xeac>
 801297e:	4f79      	ldr	r7, [pc, #484]	; (8012b64 <forward_cast+0xeb8>)
 8012980:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8012b60 <forward_cast+0xeb4>
 8012984:	4b78      	ldr	r3, [pc, #480]	; (8012b68 <forward_cast+0xebc>)
 8012986:	4a71      	ldr	r2, [pc, #452]	; (8012b4c <forward_cast+0xea0>)
 8012988:	e01e      	b.n	80129c8 <forward_cast+0xd1c>
 801298a:	429c      	cmp	r4, r3
 801298c:	f002 8631 	beq.w	80155f2 <forward_cast+0x3946>
 8012990:	f340 82ab 	ble.w	8012eea <forward_cast+0x123e>
 8012994:	4294      	cmp	r4, r2
 8012996:	f002 861e 	beq.w	80155d6 <forward_cast+0x392a>
 801299a:	4970      	ldr	r1, [pc, #448]	; (8012b5c <forward_cast+0xeb0>)
 801299c:	428c      	cmp	r4, r1
 801299e:	f040 85ca 	bne.w	8013536 <forward_cast+0x188a>
 80129a2:	7828      	ldrb	r0, [r5, #0]
 80129a4:	3800      	subs	r0, #0
 80129a6:	bf18      	it	ne
 80129a8:	2001      	movne	r0, #1
 80129aa:	f300 000f 	ssat	r0, #16, r0
 80129ae:	b200      	sxth	r0, r0
 80129b0:	ee07 0a90 	vmov	s15, r0
 80129b4:	9900      	ldr	r1, [sp, #0]
 80129b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129ba:	444d      	add	r5, r9
 80129bc:	45aa      	cmp	sl, r5
 80129be:	edc6 7a00 	vstr	s15, [r6]
 80129c2:	440e      	add	r6, r1
 80129c4:	f67f a9da 	bls.w	8011d7c <forward_cast+0xd0>
 80129c8:	4961      	ldr	r1, [pc, #388]	; (8012b50 <forward_cast+0xea4>)
 80129ca:	428c      	cmp	r4, r1
 80129cc:	f002 82f1 	beq.w	8014fb2 <forward_cast+0x3306>
 80129d0:	dddb      	ble.n	801298a <forward_cast+0xcde>
 80129d2:	4960      	ldr	r1, [pc, #384]	; (8012b54 <forward_cast+0xea8>)
 80129d4:	428c      	cmp	r4, r1
 80129d6:	f003 8018 	beq.w	8015a0a <forward_cast+0x3d5e>
 80129da:	f340 84bf 	ble.w	801335c <forward_cast+0x16b0>
 80129de:	4544      	cmp	r4, r8
 80129e0:	f040 85a9 	bne.w	8013536 <forward_cast+0x188a>
 80129e4:	edd5 7a00 	vldr	s15, [r5]
 80129e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129ec:	ee17 0a90 	vmov	r0, s15
 80129f0:	e7db      	b.n	80129aa <forward_cast+0xcfe>
 80129f2:	4b5c      	ldr	r3, [pc, #368]	; (8012b64 <forward_cast+0xeb8>)
 80129f4:	459b      	cmp	fp, r3
 80129f6:	f47f a9c1 	bne.w	8011d7c <forward_cast+0xd0>
 80129fa:	4555      	cmp	r5, sl
 80129fc:	f4bf a9be 	bcs.w	8011d7c <forward_cast+0xd0>
 8012a00:	4b52      	ldr	r3, [pc, #328]	; (8012b4c <forward_cast+0xea0>)
 8012a02:	e01a      	b.n	8012a3a <forward_cast+0xd8e>
 8012a04:	4958      	ldr	r1, [pc, #352]	; (8012b68 <forward_cast+0xebc>)
 8012a06:	428c      	cmp	r4, r1
 8012a08:	f002 816c 	beq.w	8014ce4 <forward_cast+0x3038>
 8012a0c:	f340 8261 	ble.w	8012ed2 <forward_cast+0x1226>
 8012a10:	429c      	cmp	r4, r3
 8012a12:	f002 8159 	beq.w	8014cc8 <forward_cast+0x301c>
 8012a16:	4951      	ldr	r1, [pc, #324]	; (8012b5c <forward_cast+0xeb0>)
 8012a18:	428c      	cmp	r4, r1
 8012a1a:	f040 8574 	bne.w	8013506 <forward_cast+0x185a>
 8012a1e:	7828      	ldrb	r0, [r5, #0]
 8012a20:	3800      	subs	r0, #0
 8012a22:	bf18      	it	ne
 8012a24:	2001      	movne	r0, #1
 8012a26:	f300 0007 	ssat	r0, #8, r0
 8012a2a:	9900      	ldr	r1, [sp, #0]
 8012a2c:	444d      	add	r5, r9
 8012a2e:	b240      	sxtb	r0, r0
 8012a30:	45aa      	cmp	sl, r5
 8012a32:	8030      	strh	r0, [r6, #0]
 8012a34:	440e      	add	r6, r1
 8012a36:	f67f a9a1 	bls.w	8011d7c <forward_cast+0xd0>
 8012a3a:	42bc      	cmp	r4, r7
 8012a3c:	f002 807f 	beq.w	8014b3e <forward_cast+0x2e92>
 8012a40:	dde0      	ble.n	8012a04 <forward_cast+0xd58>
 8012a42:	4944      	ldr	r1, [pc, #272]	; (8012b54 <forward_cast+0xea8>)
 8012a44:	428c      	cmp	r4, r1
 8012a46:	f002 81f2 	beq.w	8014e2e <forward_cast+0x3182>
 8012a4a:	f340 851d 	ble.w	8013488 <forward_cast+0x17dc>
 8012a4e:	4294      	cmp	r4, r2
 8012a50:	f040 8559 	bne.w	8013506 <forward_cast+0x185a>
 8012a54:	edd5 7a00 	vldr	s15, [r5]
 8012a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a5c:	ee17 0a90 	vmov	r0, s15
 8012a60:	e7e1      	b.n	8012a26 <forward_cast+0xd7a>
 8012a62:	4b40      	ldr	r3, [pc, #256]	; (8012b64 <forward_cast+0xeb8>)
 8012a64:	459b      	cmp	fp, r3
 8012a66:	f47f a989 	bne.w	8011d7c <forward_cast+0xd0>
 8012a6a:	4555      	cmp	r5, sl
 8012a6c:	f4bf a986 	bcs.w	8011d7c <forward_cast+0xd0>
 8012a70:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8012b54 <forward_cast+0xea8>
 8012a74:	4f38      	ldr	r7, [pc, #224]	; (8012b58 <forward_cast+0xeac>)
 8012a76:	4b35      	ldr	r3, [pc, #212]	; (8012b4c <forward_cast+0xea0>)
 8012a78:	4a38      	ldr	r2, [pc, #224]	; (8012b5c <forward_cast+0xeb0>)
 8012a7a:	e016      	b.n	8012aaa <forward_cast+0xdfe>
 8012a7c:	493a      	ldr	r1, [pc, #232]	; (8012b68 <forward_cast+0xebc>)
 8012a7e:	428c      	cmp	r4, r1
 8012a80:	f002 814a 	beq.w	8014d18 <forward_cast+0x306c>
 8012a84:	f340 81f6 	ble.w	8012e74 <forward_cast+0x11c8>
 8012a88:	429c      	cmp	r4, r3
 8012a8a:	f002 80fd 	beq.w	8014c88 <forward_cast+0x2fdc>
 8012a8e:	4294      	cmp	r4, r2
 8012a90:	f040 8536 	bne.w	8013500 <forward_cast+0x1854>
 8012a94:	7829      	ldrb	r1, [r5, #0]
 8012a96:	3900      	subs	r1, #0
 8012a98:	bf18      	it	ne
 8012a9a:	2101      	movne	r1, #1
 8012a9c:	8031      	strh	r1, [r6, #0]
 8012a9e:	444d      	add	r5, r9
 8012aa0:	9900      	ldr	r1, [sp, #0]
 8012aa2:	45aa      	cmp	sl, r5
 8012aa4:	440e      	add	r6, r1
 8012aa6:	f67f a969 	bls.w	8011d7c <forward_cast+0xd0>
 8012aaa:	4929      	ldr	r1, [pc, #164]	; (8012b50 <forward_cast+0xea4>)
 8012aac:	428c      	cmp	r4, r1
 8012aae:	f002 804a 	beq.w	8014b46 <forward_cast+0x2e9a>
 8012ab2:	dde3      	ble.n	8012a7c <forward_cast+0xdd0>
 8012ab4:	4544      	cmp	r4, r8
 8012ab6:	f002 83a6 	beq.w	8015206 <forward_cast+0x355a>
 8012aba:	f340 81ea 	ble.w	8012e92 <forward_cast+0x11e6>
 8012abe:	42bc      	cmp	r4, r7
 8012ac0:	f040 851e 	bne.w	8013500 <forward_cast+0x1854>
 8012ac4:	edd5 7a00 	vldr	s15, [r5]
 8012ac8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad0:	bf14      	ite	ne
 8012ad2:	2101      	movne	r1, #1
 8012ad4:	2100      	moveq	r1, #0
 8012ad6:	e7e1      	b.n	8012a9c <forward_cast+0xdf0>
 8012ad8:	4b22      	ldr	r3, [pc, #136]	; (8012b64 <forward_cast+0xeb8>)
 8012ada:	459b      	cmp	fp, r3
 8012adc:	f47f a94e 	bne.w	8011d7c <forward_cast+0xd0>
 8012ae0:	4555      	cmp	r5, sl
 8012ae2:	f4bf a94b 	bcs.w	8011d7c <forward_cast+0xd0>
 8012ae6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8012b54 <forward_cast+0xea8>
 8012aea:	4f1b      	ldr	r7, [pc, #108]	; (8012b58 <forward_cast+0xeac>)
 8012aec:	4b17      	ldr	r3, [pc, #92]	; (8012b4c <forward_cast+0xea0>)
 8012aee:	4a1b      	ldr	r2, [pc, #108]	; (8012b5c <forward_cast+0xeb0>)
 8012af0:	e018      	b.n	8012b24 <forward_cast+0xe78>
 8012af2:	491d      	ldr	r1, [pc, #116]	; (8012b68 <forward_cast+0xebc>)
 8012af4:	428c      	cmp	r4, r1
 8012af6:	f002 852a 	beq.w	801554e <forward_cast+0x38a2>
 8012afa:	f340 8242 	ble.w	8012f82 <forward_cast+0x12d6>
 8012afe:	429c      	cmp	r4, r3
 8012b00:	f002 84ee 	beq.w	80154e0 <forward_cast+0x3834>
 8012b04:	4294      	cmp	r4, r2
 8012b06:	f040 8525 	bne.w	8013554 <forward_cast+0x18a8>
 8012b0a:	7828      	ldrb	r0, [r5, #0]
 8012b0c:	3800      	subs	r0, #0
 8012b0e:	bf18      	it	ne
 8012b10:	2001      	movne	r0, #1
 8012b12:	f300 000f 	ssat	r0, #16, r0
 8012b16:	9900      	ldr	r1, [sp, #0]
 8012b18:	8030      	strh	r0, [r6, #0]
 8012b1a:	444d      	add	r5, r9
 8012b1c:	45aa      	cmp	sl, r5
 8012b1e:	440e      	add	r6, r1
 8012b20:	f67f a92c 	bls.w	8011d7c <forward_cast+0xd0>
 8012b24:	490a      	ldr	r1, [pc, #40]	; (8012b50 <forward_cast+0xea4>)
 8012b26:	428c      	cmp	r4, r1
 8012b28:	f002 82f5 	beq.w	8015116 <forward_cast+0x346a>
 8012b2c:	dde1      	ble.n	8012af2 <forward_cast+0xe46>
 8012b2e:	4544      	cmp	r4, r8
 8012b30:	f002 85e8 	beq.w	8015704 <forward_cast+0x3a58>
 8012b34:	f340 8464 	ble.w	8013400 <forward_cast+0x1754>
 8012b38:	42bc      	cmp	r4, r7
 8012b3a:	f040 850b 	bne.w	8013554 <forward_cast+0x18a8>
 8012b3e:	edd5 7a00 	vldr	s15, [r5]
 8012b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b46:	ee17 0a90 	vmov	r0, s15
 8012b4a:	e7e2      	b.n	8012b12 <forward_cast+0xe66>
 8012b4c:	00042040 	.word	0x00042040
 8012b50:	00840440 	.word	0x00840440
 8012b54:	00842040 	.word	0x00842040
 8012b58:	01821040 	.word	0x01821040
 8012b5c:	00060440 	.word	0x00060440
 8012b60:	00841040 	.word	0x00841040
 8012b64:	00840840 	.word	0x00840840
 8012b68:	00041040 	.word	0x00041040
 8012b6c:	4bb8      	ldr	r3, [pc, #736]	; (8012e50 <forward_cast+0x11a4>)
 8012b6e:	459b      	cmp	fp, r3
 8012b70:	f000 8547 	beq.w	8013602 <forward_cast+0x1956>
 8012b74:	4fb7      	ldr	r7, [pc, #732]	; (8012e54 <forward_cast+0x11a8>)
 8012b76:	45bb      	cmp	fp, r7
 8012b78:	d155      	bne.n	8012c26 <forward_cast+0xf7a>
 8012b7a:	4555      	cmp	r5, sl
 8012b7c:	f4bf a8fe 	bcs.w	8011d7c <forward_cast+0xd0>
 8012b80:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8012e6c <forward_cast+0x11c0>
 8012b84:	4fb4      	ldr	r7, [pc, #720]	; (8012e58 <forward_cast+0x11ac>)
 8012b86:	4bb5      	ldr	r3, [pc, #724]	; (8012e5c <forward_cast+0x11b0>)
 8012b88:	4ab5      	ldr	r2, [pc, #724]	; (8012e60 <forward_cast+0x11b4>)
 8012b8a:	e01e      	b.n	8012bca <forward_cast+0xf1e>
 8012b8c:	49b5      	ldr	r1, [pc, #724]	; (8012e64 <forward_cast+0x11b8>)
 8012b8e:	428c      	cmp	r4, r1
 8012b90:	f002 834a 	beq.w	8015228 <forward_cast+0x357c>
 8012b94:	f340 8242 	ble.w	801301c <forward_cast+0x1370>
 8012b98:	429c      	cmp	r4, r3
 8012b9a:	f002 837b 	beq.w	8015294 <forward_cast+0x35e8>
 8012b9e:	4294      	cmp	r4, r2
 8012ba0:	f040 84b4 	bne.w	801350c <forward_cast+0x1860>
 8012ba4:	7828      	ldrb	r0, [r5, #0]
 8012ba6:	3800      	subs	r0, #0
 8012ba8:	bf18      	it	ne
 8012baa:	2001      	movne	r0, #1
 8012bac:	f380 0010 	usat	r0, #16, r0
 8012bb0:	b280      	uxth	r0, r0
 8012bb2:	ee07 0a90 	vmov	s15, r0
 8012bb6:	9900      	ldr	r1, [sp, #0]
 8012bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bbc:	444d      	add	r5, r9
 8012bbe:	45aa      	cmp	sl, r5
 8012bc0:	edc6 7a00 	vstr	s15, [r6]
 8012bc4:	440e      	add	r6, r1
 8012bc6:	f67f a8d9 	bls.w	8011d7c <forward_cast+0xd0>
 8012bca:	49a7      	ldr	r1, [pc, #668]	; (8012e68 <forward_cast+0x11bc>)
 8012bcc:	428c      	cmp	r4, r1
 8012bce:	f002 838c 	beq.w	80152ea <forward_cast+0x363e>
 8012bd2:	dddb      	ble.n	8012b8c <forward_cast+0xee0>
 8012bd4:	4544      	cmp	r4, r8
 8012bd6:	f001 86aa 	beq.w	801492e <forward_cast+0x2c82>
 8012bda:	f340 82fe 	ble.w	80131da <forward_cast+0x152e>
 8012bde:	455c      	cmp	r4, fp
 8012be0:	f040 8494 	bne.w	801350c <forward_cast+0x1860>
 8012be4:	edd5 7a00 	vldr	s15, [r5]
 8012be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bec:	ee17 0a90 	vmov	r0, s15
 8012bf0:	e7dc      	b.n	8012bac <forward_cast+0xf00>
 8012bf2:	4b99      	ldr	r3, [pc, #612]	; (8012e58 <forward_cast+0x11ac>)
 8012bf4:	459b      	cmp	fp, r3
 8012bf6:	f47f a8c1 	bne.w	8011d7c <forward_cast+0xd0>
 8012bfa:	4555      	cmp	r5, sl
 8012bfc:	f4bf a8be 	bcs.w	8011d7c <forward_cast+0xd0>
 8012c00:	9f00      	ldr	r7, [sp, #0]
 8012c02:	4621      	mov	r1, r4
 8012c04:	4628      	mov	r0, r5
 8012c06:	f7fe ffdb 	bl	8011bc0 <_array_handle_get_as_float>
 8012c0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012c0e:	ee17 3a90 	vmov	r3, s15
 8012c12:	f383 0308 	usat	r3, #8, r3
 8012c16:	444d      	add	r5, r9
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	45aa      	cmp	sl, r5
 8012c1c:	8033      	strh	r3, [r6, #0]
 8012c1e:	443e      	add	r6, r7
 8012c20:	d8ef      	bhi.n	8012c02 <forward_cast+0xf56>
 8012c22:	f7ff b8ab 	b.w	8011d7c <forward_cast+0xd0>
 8012c26:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012c2a:	459b      	cmp	fp, r3
 8012c2c:	f47f a8a6 	bne.w	8011d7c <forward_cast+0xd0>
 8012c30:	4555      	cmp	r5, sl
 8012c32:	f4bf a8a3 	bcs.w	8011d7c <forward_cast+0xd0>
 8012c36:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8012e6c <forward_cast+0x11c0>
 8012c3a:	4b88      	ldr	r3, [pc, #544]	; (8012e5c <forward_cast+0x11b0>)
 8012c3c:	4a88      	ldr	r2, [pc, #544]	; (8012e60 <forward_cast+0x11b4>)
 8012c3e:	e018      	b.n	8012c72 <forward_cast+0xfc6>
 8012c40:	4988      	ldr	r1, [pc, #544]	; (8012e64 <forward_cast+0x11b8>)
 8012c42:	428c      	cmp	r4, r1
 8012c44:	f001 87be 	beq.w	8014bc4 <forward_cast+0x2f18>
 8012c48:	f340 8212 	ble.w	8013070 <forward_cast+0x13c4>
 8012c4c:	429c      	cmp	r4, r3
 8012c4e:	f001 86a8 	beq.w	80149a2 <forward_cast+0x2cf6>
 8012c52:	4294      	cmp	r4, r2
 8012c54:	f040 8441 	bne.w	80134da <forward_cast+0x182e>
 8012c58:	7828      	ldrb	r0, [r5, #0]
 8012c5a:	3800      	subs	r0, #0
 8012c5c:	bf18      	it	ne
 8012c5e:	2001      	movne	r0, #1
 8012c60:	f380 0010 	usat	r0, #16, r0
 8012c64:	9900      	ldr	r1, [sp, #0]
 8012c66:	8030      	strh	r0, [r6, #0]
 8012c68:	444d      	add	r5, r9
 8012c6a:	45aa      	cmp	sl, r5
 8012c6c:	440e      	add	r6, r1
 8012c6e:	f67f a885 	bls.w	8011d7c <forward_cast+0xd0>
 8012c72:	497d      	ldr	r1, [pc, #500]	; (8012e68 <forward_cast+0x11bc>)
 8012c74:	428c      	cmp	r4, r1
 8012c76:	f001 87b3 	beq.w	8014be0 <forward_cast+0x2f34>
 8012c7a:	dde1      	ble.n	8012c40 <forward_cast+0xf94>
 8012c7c:	4544      	cmp	r4, r8
 8012c7e:	f002 8153 	beq.w	8014f28 <forward_cast+0x327c>
 8012c82:	f340 8257 	ble.w	8013134 <forward_cast+0x1488>
 8012c86:	42bc      	cmp	r4, r7
 8012c88:	f040 8427 	bne.w	80134da <forward_cast+0x182e>
 8012c8c:	edd5 7a00 	vldr	s15, [r5]
 8012c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c94:	ee17 0a90 	vmov	r0, s15
 8012c98:	e7e2      	b.n	8012c60 <forward_cast+0xfb4>
 8012c9a:	4555      	cmp	r5, sl
 8012c9c:	f4bf a86e 	bcs.w	8011d7c <forward_cast+0xd0>
 8012ca0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8012e6c <forward_cast+0x11c0>
 8012ca4:	2700      	movs	r7, #0
 8012ca6:	e01a      	b.n	8012cde <forward_cast+0x1032>
 8012ca8:	429c      	cmp	r4, r3
 8012caa:	f002 835a 	beq.w	8015362 <forward_cast+0x36b6>
 8012cae:	f340 8238 	ble.w	8013122 <forward_cast+0x1476>
 8012cb2:	496a      	ldr	r1, [pc, #424]	; (8012e5c <forward_cast+0x11b0>)
 8012cb4:	428c      	cmp	r4, r1
 8012cb6:	f001 85a4 	beq.w	8014802 <forward_cast+0x2b56>
 8012cba:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8012cbe:	428c      	cmp	r4, r1
 8012cc0:	f040 8410 	bne.w	80134e4 <forward_cast+0x1838>
 8012cc4:	7828      	ldrb	r0, [r5, #0]
 8012cc6:	3800      	subs	r0, #0
 8012cc8:	bf18      	it	ne
 8012cca:	2001      	movne	r0, #1
 8012ccc:	f380 0010 	usat	r0, #16, r0
 8012cd0:	9900      	ldr	r1, [sp, #0]
 8012cd2:	55f0      	strb	r0, [r6, r7]
 8012cd4:	444d      	add	r5, r9
 8012cd6:	45aa      	cmp	sl, r5
 8012cd8:	440f      	add	r7, r1
 8012cda:	f67f a84f 	bls.w	8011d7c <forward_cast+0xd0>
 8012cde:	455c      	cmp	r4, fp
 8012ce0:	f001 85f2 	beq.w	80148c8 <forward_cast+0x2c1c>
 8012ce4:	dde0      	ble.n	8012ca8 <forward_cast+0xffc>
 8012ce6:	4544      	cmp	r4, r8
 8012ce8:	f002 86a5 	beq.w	8015a36 <forward_cast+0x3d8a>
 8012cec:	f340 81ae 	ble.w	801304c <forward_cast+0x13a0>
 8012cf0:	4958      	ldr	r1, [pc, #352]	; (8012e54 <forward_cast+0x11a8>)
 8012cf2:	428c      	cmp	r4, r1
 8012cf4:	f040 83f6 	bne.w	80134e4 <forward_cast+0x1838>
 8012cf8:	edd5 7a00 	vldr	s15, [r5]
 8012cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d00:	ee17 0a90 	vmov	r0, s15
 8012d04:	e7e2      	b.n	8012ccc <forward_cast+0x1020>
 8012d06:	4555      	cmp	r5, sl
 8012d08:	f4bf a838 	bcs.w	8011d7c <forward_cast+0xd0>
 8012d0c:	4a53      	ldr	r2, [pc, #332]	; (8012e5c <forward_cast+0x11b0>)
 8012d0e:	f04f 0800 	mov.w	r8, #0
 8012d12:	e018      	b.n	8012d46 <forward_cast+0x109a>
 8012d14:	4953      	ldr	r1, [pc, #332]	; (8012e64 <forward_cast+0x11b8>)
 8012d16:	428c      	cmp	r4, r1
 8012d18:	f001 85c6 	beq.w	80148a8 <forward_cast+0x2bfc>
 8012d1c:	f340 82a2 	ble.w	8013264 <forward_cast+0x15b8>
 8012d20:	4294      	cmp	r4, r2
 8012d22:	f001 8680 	beq.w	8014a26 <forward_cast+0x2d7a>
 8012d26:	494e      	ldr	r1, [pc, #312]	; (8012e60 <forward_cast+0x11b4>)
 8012d28:	428c      	cmp	r4, r1
 8012d2a:	f040 83cb 	bne.w	80134c4 <forward_cast+0x1818>
 8012d2e:	7829      	ldrb	r1, [r5, #0]
 8012d30:	3900      	subs	r1, #0
 8012d32:	bf18      	it	ne
 8012d34:	2101      	movne	r1, #1
 8012d36:	f806 1008 	strb.w	r1, [r6, r8]
 8012d3a:	444d      	add	r5, r9
 8012d3c:	9900      	ldr	r1, [sp, #0]
 8012d3e:	45aa      	cmp	sl, r5
 8012d40:	4488      	add	r8, r1
 8012d42:	f67f a81b 	bls.w	8011d7c <forward_cast+0xd0>
 8012d46:	455c      	cmp	r4, fp
 8012d48:	f000 8295 	beq.w	8013276 <forward_cast+0x15ca>
 8012d4c:	dde2      	ble.n	8012d14 <forward_cast+0x1068>
 8012d4e:	4947      	ldr	r1, [pc, #284]	; (8012e6c <forward_cast+0x11c0>)
 8012d50:	428c      	cmp	r4, r1
 8012d52:	f002 8681 	beq.w	8015a58 <forward_cast+0x3dac>
 8012d56:	f340 8364 	ble.w	8013422 <forward_cast+0x1776>
 8012d5a:	42bc      	cmp	r4, r7
 8012d5c:	f040 83b2 	bne.w	80134c4 <forward_cast+0x1818>
 8012d60:	edd5 7a00 	vldr	s15, [r5]
 8012d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d68:	edcd 7a01 	vstr	s15, [sp, #4]
 8012d6c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8012d70:	e7e1      	b.n	8012d36 <forward_cast+0x108a>
 8012d72:	4555      	cmp	r5, sl
 8012d74:	bf38      	it	cc
 8012d76:	f04f 0800 	movcc.w	r8, #0
 8012d7a:	d31e      	bcc.n	8012dba <forward_cast+0x110e>
 8012d7c:	f7fe bffe 	b.w	8011d7c <forward_cast+0xd0>
 8012d80:	4938      	ldr	r1, [pc, #224]	; (8012e64 <forward_cast+0x11b8>)
 8012d82:	428c      	cmp	r4, r1
 8012d84:	f001 8629 	beq.w	80149da <forward_cast+0x2d2e>
 8012d88:	f340 8154 	ble.w	8013034 <forward_cast+0x1388>
 8012d8c:	4933      	ldr	r1, [pc, #204]	; (8012e5c <forward_cast+0x11b0>)
 8012d8e:	428c      	cmp	r4, r1
 8012d90:	f001 8615 	beq.w	80149be <forward_cast+0x2d12>
 8012d94:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8012d98:	428c      	cmp	r4, r1
 8012d9a:	f040 83a1 	bne.w	80134e0 <forward_cast+0x1834>
 8012d9e:	7828      	ldrb	r0, [r5, #0]
 8012da0:	3800      	subs	r0, #0
 8012da2:	bf18      	it	ne
 8012da4:	2001      	movne	r0, #1
 8012da6:	f300 000f 	ssat	r0, #16, r0
 8012daa:	9900      	ldr	r1, [sp, #0]
 8012dac:	f806 0008 	strb.w	r0, [r6, r8]
 8012db0:	444d      	add	r5, r9
 8012db2:	45aa      	cmp	sl, r5
 8012db4:	4488      	add	r8, r1
 8012db6:	f67e afe1 	bls.w	8011d7c <forward_cast+0xd0>
 8012dba:	455c      	cmp	r4, fp
 8012dbc:	f001 8580 	beq.w	80148c0 <forward_cast+0x2c14>
 8012dc0:	ddde      	ble.n	8012d80 <forward_cast+0x10d4>
 8012dc2:	492a      	ldr	r1, [pc, #168]	; (8012e6c <forward_cast+0x11c0>)
 8012dc4:	428c      	cmp	r4, r1
 8012dc6:	f002 82be 	beq.w	8015346 <forward_cast+0x369a>
 8012dca:	f340 8257 	ble.w	801327c <forward_cast+0x15d0>
 8012dce:	4294      	cmp	r4, r2
 8012dd0:	f040 8386 	bne.w	80134e0 <forward_cast+0x1834>
 8012dd4:	edd5 7a00 	vldr	s15, [r5]
 8012dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ddc:	ee17 0a90 	vmov	r0, s15
 8012de0:	e7e1      	b.n	8012da6 <forward_cast+0x10fa>
 8012de2:	4555      	cmp	r5, sl
 8012de4:	f4be afca 	bcs.w	8011d7c <forward_cast+0xd0>
 8012de8:	9f00      	ldr	r7, [sp, #0]
 8012dea:	4628      	mov	r0, r5
 8012dec:	4621      	mov	r1, r4
 8012dee:	f7fe fee7 	bl	8011bc0 <_array_handle_get_as_float>
 8012df2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfa:	444d      	add	r5, r9
 8012dfc:	bf14      	ite	ne
 8012dfe:	2301      	movne	r3, #1
 8012e00:	2300      	moveq	r3, #0
 8012e02:	45aa      	cmp	sl, r5
 8012e04:	7033      	strb	r3, [r6, #0]
 8012e06:	443e      	add	r6, r7
 8012e08:	d8ef      	bhi.n	8012dea <forward_cast+0x113e>
 8012e0a:	f7fe bfb7 	b.w	8011d7c <forward_cast+0xd0>
 8012e0e:	4918      	ldr	r1, [pc, #96]	; (8012e70 <forward_cast+0x11c4>)
 8012e10:	428c      	cmp	r4, r1
 8012e12:	f001 877a 	beq.w	8014d0a <forward_cast+0x305e>
 8012e16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e1a:	428c      	cmp	r4, r1
 8012e1c:	f040 8365 	bne.w	80134ea <forward_cast+0x183e>
 8012e20:	8829      	ldrh	r1, [r5, #0]
 8012e22:	ee07 1a90 	vmov	s15, r1
 8012e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e2a:	f7ff bbc6 	b.w	80125ba <forward_cast+0x90e>
 8012e2e:	4910      	ldr	r1, [pc, #64]	; (8012e70 <forward_cast+0x11c4>)
 8012e30:	428c      	cmp	r4, r1
 8012e32:	f001 877e 	beq.w	8014d32 <forward_cast+0x3086>
 8012e36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e3a:	428c      	cmp	r4, r1
 8012e3c:	f040 8359 	bne.w	80134f2 <forward_cast+0x1846>
 8012e40:	8829      	ldrh	r1, [r5, #0]
 8012e42:	ee07 1a90 	vmov	s15, r1
 8012e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e4a:	f7ff baeb 	b.w	8012424 <forward_cast+0x778>
 8012e4e:	bf00      	nop
 8012e50:	00841040 	.word	0x00841040
 8012e54:	01821040 	.word	0x01821040
 8012e58:	00840840 	.word	0x00840840
 8012e5c:	00042040 	.word	0x00042040
 8012e60:	00060440 	.word	0x00060440
 8012e64:	00041040 	.word	0x00041040
 8012e68:	00840440 	.word	0x00840440
 8012e6c:	00842040 	.word	0x00842040
 8012e70:	00040440 	.word	0x00040440
 8012e74:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8012e78:	428c      	cmp	r4, r1
 8012e7a:	f43f ae0b 	beq.w	8012a94 <forward_cast+0xde8>
 8012e7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e82:	428c      	cmp	r4, r1
 8012e84:	f040 833c 	bne.w	8013500 <forward_cast+0x1854>
 8012e88:	8829      	ldrh	r1, [r5, #0]
 8012e8a:	3900      	subs	r1, #0
 8012e8c:	bf18      	it	ne
 8012e8e:	2101      	movne	r1, #1
 8012e90:	e604      	b.n	8012a9c <forward_cast+0xdf0>
 8012e92:	455c      	cmp	r4, fp
 8012e94:	f001 86f1 	beq.w	8014c7a <forward_cast+0x2fce>
 8012e98:	49c3      	ldr	r1, [pc, #780]	; (80131a8 <forward_cast+0x14fc>)
 8012e9a:	428c      	cmp	r4, r1
 8012e9c:	f040 8330 	bne.w	8013500 <forward_cast+0x1854>
 8012ea0:	edd5 7a00 	vldr	s15, [r5]
 8012ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ea8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb0:	bf14      	ite	ne
 8012eb2:	2101      	movne	r1, #1
 8012eb4:	2100      	moveq	r1, #0
 8012eb6:	e5f1      	b.n	8012a9c <forward_cast+0xdf0>
 8012eb8:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8012ebc:	428c      	cmp	r4, r1
 8012ebe:	f001 871b 	beq.w	8014cf8 <forward_cast+0x304c>
 8012ec2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012ec6:	428c      	cmp	r4, r1
 8012ec8:	f040 8317 	bne.w	80134fa <forward_cast+0x184e>
 8012ecc:	8828      	ldrh	r0, [r5, #0]
 8012ece:	f7ff ba0f 	b.w	80122f0 <forward_cast+0x644>
 8012ed2:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8012ed6:	428c      	cmp	r4, r1
 8012ed8:	f002 8395 	beq.w	8015606 <forward_cast+0x395a>
 8012edc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012ee0:	428c      	cmp	r4, r1
 8012ee2:	f040 8310 	bne.w	8013506 <forward_cast+0x185a>
 8012ee6:	8828      	ldrh	r0, [r5, #0]
 8012ee8:	e59d      	b.n	8012a26 <forward_cast+0xd7a>
 8012eea:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012eee:	428c      	cmp	r4, r1
 8012ef0:	f002 813c 	beq.w	801516c <forward_cast+0x34c0>
 8012ef4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012ef8:	428c      	cmp	r4, r1
 8012efa:	f040 831c 	bne.w	8013536 <forward_cast+0x188a>
 8012efe:	8828      	ldrh	r0, [r5, #0]
 8012f00:	e553      	b.n	80129aa <forward_cast+0xcfe>
 8012f02:	42bc      	cmp	r4, r7
 8012f04:	f002 82e9 	beq.w	80154da <forward_cast+0x382e>
 8012f08:	49a8      	ldr	r1, [pc, #672]	; (80131ac <forward_cast+0x1500>)
 8012f0a:	428c      	cmp	r4, r1
 8012f0c:	f040 8307 	bne.w	801351e <forward_cast+0x1872>
 8012f10:	8828      	ldrh	r0, [r5, #0]
 8012f12:	f7ff b871 	b.w	8011ff8 <forward_cast+0x34c>
 8012f16:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8012f1a:	428c      	cmp	r4, r1
 8012f1c:	f002 8199 	beq.w	8015252 <forward_cast+0x35a6>
 8012f20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012f24:	428c      	cmp	r4, r1
 8012f26:	f040 830c 	bne.w	8013542 <forward_cast+0x1896>
 8012f2a:	8829      	ldrh	r1, [r5, #0]
 8012f2c:	ee07 1a90 	vmov	s15, r1
 8012f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f34:	f7ff bb82 	b.w	801263c <forward_cast+0x990>
 8012f38:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012f3c:	428c      	cmp	r4, r1
 8012f3e:	f002 837c 	beq.w	801563a <forward_cast+0x398e>
 8012f42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012f46:	428c      	cmp	r4, r1
 8012f48:	f040 82e6 	bne.w	8013518 <forward_cast+0x186c>
 8012f4c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012f50:	f7ff bbea 	b.w	8012728 <forward_cast+0xa7c>
 8012f54:	4544      	cmp	r4, r8
 8012f56:	f002 8363 	beq.w	8015620 <forward_cast+0x3974>
 8012f5a:	4994      	ldr	r1, [pc, #592]	; (80131ac <forward_cast+0x1500>)
 8012f5c:	428c      	cmp	r4, r1
 8012f5e:	f040 82e7 	bne.w	8013530 <forward_cast+0x1884>
 8012f62:	8828      	ldrh	r0, [r5, #0]
 8012f64:	f7fe bf43 	b.w	8011dee <forward_cast+0x142>
 8012f68:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012f6c:	428c      	cmp	r4, r1
 8012f6e:	f002 82f8 	beq.w	8015562 <forward_cast+0x38b6>
 8012f72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012f76:	428c      	cmp	r4, r1
 8012f78:	f040 82d4 	bne.w	8013524 <forward_cast+0x1878>
 8012f7c:	8828      	ldrh	r0, [r5, #0]
 8012f7e:	f7ff b9f7 	b.w	8012370 <forward_cast+0x6c4>
 8012f82:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8012f86:	428c      	cmp	r4, r1
 8012f88:	f002 81ac 	beq.w	80152e4 <forward_cast+0x3638>
 8012f8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012f90:	428c      	cmp	r4, r1
 8012f92:	f040 82df 	bne.w	8013554 <forward_cast+0x18a8>
 8012f96:	8828      	ldrh	r0, [r5, #0]
 8012f98:	e5bb      	b.n	8012b12 <forward_cast+0xe66>
 8012f9a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012f9e:	428c      	cmp	r4, r1
 8012fa0:	f002 82d2 	beq.w	8015548 <forward_cast+0x389c>
 8012fa4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012fa8:	428c      	cmp	r4, r1
 8012faa:	f040 82b2 	bne.w	8013512 <forward_cast+0x1866>
 8012fae:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012fb2:	f7ff bb7d 	b.w	80126b0 <forward_cast+0xa04>
 8012fb6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012fba:	428c      	cmp	r4, r1
 8012fbc:	f002 82fa 	beq.w	80155b4 <forward_cast+0x3908>
 8012fc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012fc4:	428c      	cmp	r4, r1
 8012fc6:	f040 82b9 	bne.w	801353c <forward_cast+0x1890>
 8012fca:	8829      	ldrh	r1, [r5, #0]
 8012fcc:	f7ff b86c 	b.w	80120a8 <forward_cast+0x3fc>
 8012fd0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012fd4:	428c      	cmp	r4, r1
 8012fd6:	f002 82a9 	beq.w	801552c <forward_cast+0x3880>
 8012fda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012fde:	428c      	cmp	r4, r1
 8012fe0:	f040 82a3 	bne.w	801352a <forward_cast+0x187e>
 8012fe4:	8828      	ldrh	r0, [r5, #0]
 8012fe6:	e463      	b.n	80128b0 <forward_cast+0xc04>
 8012fe8:	4294      	cmp	r4, r2
 8012fea:	f002 8150 	beq.w	801528e <forward_cast+0x35e2>
 8012fee:	496f      	ldr	r1, [pc, #444]	; (80131ac <forward_cast+0x1500>)
 8012ff0:	428c      	cmp	r4, r1
 8012ff2:	f040 82b2 	bne.w	801355a <forward_cast+0x18ae>
 8012ff6:	8828      	ldrh	r0, [r5, #0]
 8012ff8:	f7ff b8a0 	b.w	801213c <forward_cast+0x490>
 8012ffc:	42bc      	cmp	r4, r7
 8012ffe:	d0a5      	beq.n	8012f4c <forward_cast+0x12a0>
 8013000:	455c      	cmp	r4, fp
 8013002:	f040 8289 	bne.w	8013518 <forward_cast+0x186c>
 8013006:	edd5 7a00 	vldr	s15, [r5]
 801300a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801300e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013012:	ee17 1a90 	vmov	r1, s15
 8013016:	b209      	sxth	r1, r1
 8013018:	f7ff bb86 	b.w	8012728 <forward_cast+0xa7c>
 801301c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8013020:	428c      	cmp	r4, r1
 8013022:	f001 84e4 	beq.w	80149ee <forward_cast+0x2d42>
 8013026:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801302a:	428c      	cmp	r4, r1
 801302c:	f040 826e 	bne.w	801350c <forward_cast+0x1860>
 8013030:	8828      	ldrh	r0, [r5, #0]
 8013032:	e5bb      	b.n	8012bac <forward_cast+0xf00>
 8013034:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8013038:	428c      	cmp	r4, r1
 801303a:	f002 850a 	beq.w	8015a52 <forward_cast+0x3da6>
 801303e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013042:	428c      	cmp	r4, r1
 8013044:	f040 824c 	bne.w	80134e0 <forward_cast+0x1834>
 8013048:	8828      	ldrh	r0, [r5, #0]
 801304a:	e6ac      	b.n	8012da6 <forward_cast+0x10fa>
 801304c:	4958      	ldr	r1, [pc, #352]	; (80131b0 <forward_cast+0x1504>)
 801304e:	428c      	cmp	r4, r1
 8013050:	f001 85c2 	beq.w	8014bd8 <forward_cast+0x2f2c>
 8013054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013058:	428c      	cmp	r4, r1
 801305a:	f040 8243 	bne.w	80134e4 <forward_cast+0x1838>
 801305e:	edd5 7a00 	vldr	s15, [r5]
 8013062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013066:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801306a:	ee17 0a90 	vmov	r0, s15
 801306e:	e62d      	b.n	8012ccc <forward_cast+0x1020>
 8013070:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8013074:	428c      	cmp	r4, r1
 8013076:	f002 843c 	beq.w	80158f2 <forward_cast+0x3c46>
 801307a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801307e:	428c      	cmp	r4, r1
 8013080:	f040 822b 	bne.w	80134da <forward_cast+0x182e>
 8013084:	8828      	ldrh	r0, [r5, #0]
 8013086:	e5eb      	b.n	8012c60 <forward_cast+0xfb4>
 8013088:	455c      	cmp	r4, fp
 801308a:	f001 84f4 	beq.w	8014a76 <forward_cast+0x2dca>
 801308e:	429c      	cmp	r4, r3
 8013090:	f040 821a 	bne.w	80134c8 <forward_cast+0x181c>
 8013094:	edd5 7a00 	vldr	s15, [r5]
 8013098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801309c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130a0:	ee17 0a90 	vmov	r0, s15
 80130a4:	f7fe bf45 	b.w	8011f32 <forward_cast+0x286>
 80130a8:	42bc      	cmp	r4, r7
 80130aa:	f001 867e 	beq.w	8014daa <forward_cast+0x30fe>
 80130ae:	493f      	ldr	r1, [pc, #252]	; (80131ac <forward_cast+0x1500>)
 80130b0:	428c      	cmp	r4, r1
 80130b2:	f040 8209 	bne.w	80134c8 <forward_cast+0x181c>
 80130b6:	8828      	ldrh	r0, [r5, #0]
 80130b8:	f7fe bf3b 	b.w	8011f32 <forward_cast+0x286>
 80130bc:	42bc      	cmp	r4, r7
 80130be:	d06f      	beq.n	80131a0 <forward_cast+0x14f4>
 80130c0:	455c      	cmp	r4, fp
 80130c2:	f040 8250 	bne.w	8013566 <forward_cast+0x18ba>
 80130c6:	edd5 7a00 	vldr	s15, [r5]
 80130ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80130d2:	ee17 1a90 	vmov	r1, s15
 80130d6:	b289      	uxth	r1, r1
 80130d8:	f7fe beda 	b.w	8011e90 <forward_cast+0x1e4>
 80130dc:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80130e0:	428c      	cmp	r4, r1
 80130e2:	f002 8055 	beq.w	8015190 <forward_cast+0x34e4>
 80130e6:	4294      	cmp	r4, r2
 80130e8:	f040 81f4 	bne.w	80134d4 <forward_cast+0x1828>
 80130ec:	edd5 7a00 	vldr	s15, [r5]
 80130f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130f8:	ee17 0a90 	vmov	r0, s15
 80130fc:	f7ff b8a6 	b.w	801224c <forward_cast+0x5a0>
 8013100:	42bc      	cmp	r4, r7
 8013102:	f000 80d4 	beq.w	80132ae <forward_cast+0x1602>
 8013106:	455c      	cmp	r4, fp
 8013108:	f040 822a 	bne.w	8013560 <forward_cast+0x18b4>
 801310c:	edd5 7a00 	vldr	s15, [r5]
 8013110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013118:	ee17 1a90 	vmov	r1, s15
 801311c:	b209      	sxth	r1, r1
 801311e:	f7ff bb3f 	b.w	80127a0 <forward_cast+0xaf4>
 8013122:	4294      	cmp	r4, r2
 8013124:	f001 870e 	beq.w	8014f44 <forward_cast+0x3298>
 8013128:	4920      	ldr	r1, [pc, #128]	; (80131ac <forward_cast+0x1500>)
 801312a:	428c      	cmp	r4, r1
 801312c:	f040 81da 	bne.w	80134e4 <forward_cast+0x1838>
 8013130:	8828      	ldrh	r0, [r5, #0]
 8013132:	e5cb      	b.n	8012ccc <forward_cast+0x1020>
 8013134:	455c      	cmp	r4, fp
 8013136:	f001 8430 	beq.w	801499a <forward_cast+0x2cee>
 801313a:	491b      	ldr	r1, [pc, #108]	; (80131a8 <forward_cast+0x14fc>)
 801313c:	428c      	cmp	r4, r1
 801313e:	f040 81cc 	bne.w	80134da <forward_cast+0x182e>
 8013142:	edd5 7a00 	vldr	s15, [r5]
 8013146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801314a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801314e:	ee17 0a90 	vmov	r0, s15
 8013152:	e585      	b.n	8012c60 <forward_cast+0xfb4>
 8013154:	4917      	ldr	r1, [pc, #92]	; (80131b4 <forward_cast+0x1508>)
 8013156:	428c      	cmp	r4, r1
 8013158:	f002 82ff 	beq.w	801575a <forward_cast+0x3aae>
 801315c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013160:	428c      	cmp	r4, r1
 8013162:	f040 81b7 	bne.w	80134d4 <forward_cast+0x1828>
 8013166:	8828      	ldrh	r0, [r5, #0]
 8013168:	f7ff b870 	b.w	801224c <forward_cast+0x5a0>
 801316c:	42bc      	cmp	r4, r7
 801316e:	d076      	beq.n	801325e <forward_cast+0x15b2>
 8013170:	455c      	cmp	r4, fp
 8013172:	f040 81ac 	bne.w	80134ce <forward_cast+0x1822>
 8013176:	edd5 7a00 	vldr	s15, [r5]
 801317a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801317e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013182:	ee17 1a90 	vmov	r1, s15
 8013186:	b289      	uxth	r1, r1
 8013188:	f7ff b824 	b.w	80121d4 <forward_cast+0x528>
 801318c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013190:	428c      	cmp	r4, r1
 8013192:	f001 861f 	beq.w	8014dd4 <forward_cast+0x3128>
 8013196:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801319a:	428c      	cmp	r4, r1
 801319c:	f040 81e3 	bne.w	8013566 <forward_cast+0x18ba>
 80131a0:	8829      	ldrh	r1, [r5, #0]
 80131a2:	f7fe be75 	b.w	8011e90 <forward_cast+0x1e4>
 80131a6:	bf00      	nop
 80131a8:	00841040 	.word	0x00841040
 80131ac:	00040840 	.word	0x00040840
 80131b0:	00840840 	.word	0x00840840
 80131b4:	00040440 	.word	0x00040440
 80131b8:	455c      	cmp	r4, fp
 80131ba:	d043      	beq.n	8013244 <forward_cast+0x1598>
 80131bc:	429c      	cmp	r4, r3
 80131be:	f040 817b 	bne.w	80134b8 <forward_cast+0x180c>
 80131c2:	edd5 7a00 	vldr	s15, [r5]
 80131c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131ce:	edcd 7a01 	vstr	s15, [sp, #4]
 80131d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80131d6:	f7ff b99c 	b.w	8012512 <forward_cast+0x866>
 80131da:	42bc      	cmp	r4, r7
 80131dc:	f001 8623 	beq.w	8014e26 <forward_cast+0x317a>
 80131e0:	49da      	ldr	r1, [pc, #872]	; (801354c <forward_cast+0x18a0>)
 80131e2:	428c      	cmp	r4, r1
 80131e4:	f040 8192 	bne.w	801350c <forward_cast+0x1860>
 80131e8:	edd5 7a00 	vldr	s15, [r5]
 80131ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131f4:	ee17 0a90 	vmov	r0, s15
 80131f8:	e4d8      	b.n	8012bac <forward_cast+0xf00>
 80131fa:	455c      	cmp	r4, fp
 80131fc:	f001 846b 	beq.w	8014ad6 <forward_cast+0x2e2a>
 8013200:	429c      	cmp	r4, r3
 8013202:	f040 818c 	bne.w	801351e <forward_cast+0x1872>
 8013206:	edd5 7a00 	vldr	s15, [r5]
 801320a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801320e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013212:	ee17 0a90 	vmov	r0, s15
 8013216:	f7fe beef 	b.w	8011ff8 <forward_cast+0x34c>
 801321a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801321e:	428c      	cmp	r4, r1
 8013220:	d004      	beq.n	801322c <forward_cast+0x1580>
 8013222:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013226:	428c      	cmp	r4, r1
 8013228:	f040 8149 	bne.w	80134be <forward_cast+0x1812>
 801322c:	7829      	ldrb	r1, [r5, #0]
 801322e:	f7ff b931 	b.w	8012494 <forward_cast+0x7e8>
 8013232:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013236:	428c      	cmp	r4, r1
 8013238:	d004      	beq.n	8013244 <forward_cast+0x1598>
 801323a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801323e:	428c      	cmp	r4, r1
 8013240:	f040 813a 	bne.w	80134b8 <forward_cast+0x180c>
 8013244:	7829      	ldrb	r1, [r5, #0]
 8013246:	f7ff b964 	b.w	8012512 <forward_cast+0x866>
 801324a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801324e:	428c      	cmp	r4, r1
 8013250:	f001 833e 	beq.w	80148d0 <forward_cast+0x2c24>
 8013254:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013258:	428c      	cmp	r4, r1
 801325a:	f040 8138 	bne.w	80134ce <forward_cast+0x1822>
 801325e:	8829      	ldrh	r1, [r5, #0]
 8013260:	f7fe bfb8 	b.w	80121d4 <forward_cast+0x528>
 8013264:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8013268:	428c      	cmp	r4, r1
 801326a:	d004      	beq.n	8013276 <forward_cast+0x15ca>
 801326c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013270:	428c      	cmp	r4, r1
 8013272:	f040 8127 	bne.w	80134c4 <forward_cast+0x1818>
 8013276:	f995 1000 	ldrsb.w	r1, [r5]
 801327a:	e55c      	b.n	8012d36 <forward_cast+0x108a>
 801327c:	42bc      	cmp	r4, r7
 801327e:	f002 8101 	beq.w	8015484 <forward_cast+0x37d8>
 8013282:	429c      	cmp	r4, r3
 8013284:	f040 812c 	bne.w	80134e0 <forward_cast+0x1834>
 8013288:	edd5 7a00 	vldr	s15, [r5]
 801328c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013294:	ee17 0a90 	vmov	r0, s15
 8013298:	e585      	b.n	8012da6 <forward_cast+0x10fa>
 801329a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801329e:	428c      	cmp	r4, r1
 80132a0:	f001 8661 	beq.w	8014f66 <forward_cast+0x32ba>
 80132a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80132a8:	428c      	cmp	r4, r1
 80132aa:	f040 8159 	bne.w	8013560 <forward_cast+0x18b4>
 80132ae:	f9b5 1000 	ldrsh.w	r1, [r5]
 80132b2:	f7ff ba75 	b.w	80127a0 <forward_cast+0xaf4>
 80132b6:	455c      	cmp	r4, fp
 80132b8:	d0b8      	beq.n	801322c <forward_cast+0x1580>
 80132ba:	429c      	cmp	r4, r3
 80132bc:	f040 80ff 	bne.w	80134be <forward_cast+0x1812>
 80132c0:	edd5 7a00 	vldr	s15, [r5]
 80132c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80132d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80132d4:	f7ff b8de 	b.w	8012494 <forward_cast+0x7e8>
 80132d8:	499d      	ldr	r1, [pc, #628]	; (8013550 <forward_cast+0x18a4>)
 80132da:	428c      	cmp	r4, r1
 80132dc:	f001 840d 	beq.w	8014afa <forward_cast+0x2e4e>
 80132e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132e4:	428c      	cmp	r4, r1
 80132e6:	f040 8104 	bne.w	80134f2 <forward_cast+0x1846>
 80132ea:	edd5 7a00 	vldr	s15, [r5]
 80132ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132f2:	f7ff b897 	b.w	8012424 <forward_cast+0x778>
 80132f6:	4996      	ldr	r1, [pc, #600]	; (8013550 <forward_cast+0x18a4>)
 80132f8:	428c      	cmp	r4, r1
 80132fa:	f001 8414 	beq.w	8014b26 <forward_cast+0x2e7a>
 80132fe:	429c      	cmp	r4, r3
 8013300:	f040 8110 	bne.w	8013524 <forward_cast+0x1878>
 8013304:	edd5 7a00 	vldr	s15, [r5]
 8013308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801330c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013310:	ee17 0a90 	vmov	r0, s15
 8013314:	f7ff b82c 	b.w	8012370 <forward_cast+0x6c4>
 8013318:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801331c:	428c      	cmp	r4, r1
 801331e:	f001 875c 	beq.w	80151da <forward_cast+0x352e>
 8013322:	4544      	cmp	r4, r8
 8013324:	f040 80e9 	bne.w	80134fa <forward_cast+0x184e>
 8013328:	edd5 7a00 	vldr	s15, [r5]
 801332c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013334:	ee17 0a90 	vmov	r0, s15
 8013338:	f7fe bfda 	b.w	80122f0 <forward_cast+0x644>
 801333c:	429c      	cmp	r4, r3
 801333e:	f002 8372 	beq.w	8015a26 <forward_cast+0x3d7a>
 8013342:	42bc      	cmp	r4, r7
 8013344:	f040 80fd 	bne.w	8013542 <forward_cast+0x1896>
 8013348:	edd5 7a00 	vldr	s15, [r5]
 801334c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013358:	f7ff b970 	b.w	801263c <forward_cast+0x990>
 801335c:	42bc      	cmp	r4, r7
 801335e:	f002 830b 	beq.w	8015978 <forward_cast+0x3ccc>
 8013362:	455c      	cmp	r4, fp
 8013364:	f040 80e7 	bne.w	8013536 <forward_cast+0x188a>
 8013368:	edd5 7a00 	vldr	s15, [r5]
 801336c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013374:	ee17 0a90 	vmov	r0, s15
 8013378:	f7ff bb17 	b.w	80129aa <forward_cast+0xcfe>
 801337c:	42bc      	cmp	r4, r7
 801337e:	f43f ae24 	beq.w	8012fca <forward_cast+0x131e>
 8013382:	455c      	cmp	r4, fp
 8013384:	f040 80da 	bne.w	801353c <forward_cast+0x1890>
 8013388:	edd5 7a00 	vldr	s15, [r5]
 801338c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013394:	ee17 1a90 	vmov	r1, s15
 8013398:	b289      	uxth	r1, r1
 801339a:	f7fe be85 	b.w	80120a8 <forward_cast+0x3fc>
 801339e:	429c      	cmp	r4, r3
 80133a0:	f001 8514 	beq.w	8014dcc <forward_cast+0x3120>
 80133a4:	4294      	cmp	r4, r2
 80133a6:	f040 80c3 	bne.w	8013530 <forward_cast+0x1884>
 80133aa:	edd5 7a00 	vldr	s15, [r5]
 80133ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133b6:	ee17 0a90 	vmov	r0, s15
 80133ba:	f7fe bd18 	b.w	8011dee <forward_cast+0x142>
 80133be:	429c      	cmp	r4, r3
 80133c0:	f001 86f9 	beq.w	80151b6 <forward_cast+0x350a>
 80133c4:	4294      	cmp	r4, r2
 80133c6:	f040 80b0 	bne.w	801352a <forward_cast+0x187e>
 80133ca:	edd5 7a00 	vldr	s15, [r5]
 80133ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133d6:	ee17 0a90 	vmov	r0, s15
 80133da:	f7ff ba69 	b.w	80128b0 <forward_cast+0xc04>
 80133de:	42bc      	cmp	r4, r7
 80133e0:	f43f ade5 	beq.w	8012fae <forward_cast+0x1302>
 80133e4:	455c      	cmp	r4, fp
 80133e6:	f040 8094 	bne.w	8013512 <forward_cast+0x1866>
 80133ea:	edd5 7a00 	vldr	s15, [r5]
 80133ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133f6:	ee17 1a90 	vmov	r1, s15
 80133fa:	b209      	sxth	r1, r1
 80133fc:	f7ff b958 	b.w	80126b0 <forward_cast+0xa04>
 8013400:	455c      	cmp	r4, fp
 8013402:	f002 8339 	beq.w	8015a78 <forward_cast+0x3dcc>
 8013406:	4951      	ldr	r1, [pc, #324]	; (801354c <forward_cast+0x18a0>)
 8013408:	428c      	cmp	r4, r1
 801340a:	f040 80a3 	bne.w	8013554 <forward_cast+0x18a8>
 801340e:	edd5 7a00 	vldr	s15, [r5]
 8013412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801341a:	ee17 0a90 	vmov	r0, s15
 801341e:	f7ff bb78 	b.w	8012b12 <forward_cast+0xe66>
 8013422:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8013426:	428c      	cmp	r4, r1
 8013428:	f43f af25 	beq.w	8013276 <forward_cast+0x15ca>
 801342c:	429c      	cmp	r4, r3
 801342e:	d149      	bne.n	80134c4 <forward_cast+0x1818>
 8013430:	edd5 7a00 	vldr	s15, [r5]
 8013434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801343c:	edcd 7a01 	vstr	s15, [sp, #4]
 8013440:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8013444:	e477      	b.n	8012d36 <forward_cast+0x108a>
 8013446:	429c      	cmp	r4, r3
 8013448:	f001 86d9 	beq.w	80151fe <forward_cast+0x3552>
 801344c:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 8013450:	428c      	cmp	r4, r1
 8013452:	f040 8082 	bne.w	801355a <forward_cast+0x18ae>
 8013456:	edd5 7a00 	vldr	s15, [r5]
 801345a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801345e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013462:	ee17 0a90 	vmov	r0, s15
 8013466:	f7fe be69 	b.w	801213c <forward_cast+0x490>
 801346a:	429c      	cmp	r4, r3
 801346c:	f001 84ed 	beq.w	8014e4a <forward_cast+0x319e>
 8013470:	4294      	cmp	r4, r2
 8013472:	d13a      	bne.n	80134ea <forward_cast+0x183e>
 8013474:	edd5 7a00 	vldr	s15, [r5]
 8013478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801347c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013484:	f7ff b899 	b.w	80125ba <forward_cast+0x90e>
 8013488:	455c      	cmp	r4, fp
 801348a:	f001 8463 	beq.w	8014d54 <forward_cast+0x30a8>
 801348e:	4544      	cmp	r4, r8
 8013490:	d139      	bne.n	8013506 <forward_cast+0x185a>
 8013492:	edd5 7a00 	vldr	s15, [r5]
 8013496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801349a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801349e:	ee17 0a90 	vmov	r0, s15
 80134a2:	f7ff bac0 	b.w	8012a26 <forward_cast+0xd7a>
 80134a6:	9b00      	ldr	r3, [sp, #0]
 80134a8:	f8c6 8000 	str.w	r8, [r6]
 80134ac:	45aa      	cmp	sl, r5
 80134ae:	441e      	add	r6, r3
 80134b0:	f63f aa48 	bhi.w	8012944 <forward_cast+0xc98>
 80134b4:	f7fe bc62 	b.w	8011d7c <forward_cast+0xd0>
 80134b8:	2100      	movs	r1, #0
 80134ba:	f7ff b82a 	b.w	8012512 <forward_cast+0x866>
 80134be:	2100      	movs	r1, #0
 80134c0:	f7fe bfe8 	b.w	8012494 <forward_cast+0x7e8>
 80134c4:	2100      	movs	r1, #0
 80134c6:	e436      	b.n	8012d36 <forward_cast+0x108a>
 80134c8:	2000      	movs	r0, #0
 80134ca:	f7fe bd32 	b.w	8011f32 <forward_cast+0x286>
 80134ce:	2100      	movs	r1, #0
 80134d0:	f7fe be80 	b.w	80121d4 <forward_cast+0x528>
 80134d4:	2000      	movs	r0, #0
 80134d6:	f7fe beb9 	b.w	801224c <forward_cast+0x5a0>
 80134da:	2000      	movs	r0, #0
 80134dc:	f7ff bbc0 	b.w	8012c60 <forward_cast+0xfb4>
 80134e0:	2000      	movs	r0, #0
 80134e2:	e460      	b.n	8012da6 <forward_cast+0x10fa>
 80134e4:	2000      	movs	r0, #0
 80134e6:	f7ff bbf1 	b.w	8012ccc <forward_cast+0x1020>
 80134ea:	eef0 7a48 	vmov.f32	s15, s16
 80134ee:	f7ff b864 	b.w	80125ba <forward_cast+0x90e>
 80134f2:	eef0 7a48 	vmov.f32	s15, s16
 80134f6:	f7fe bf95 	b.w	8012424 <forward_cast+0x778>
 80134fa:	2000      	movs	r0, #0
 80134fc:	f7fe bef8 	b.w	80122f0 <forward_cast+0x644>
 8013500:	2100      	movs	r1, #0
 8013502:	f7ff bacb 	b.w	8012a9c <forward_cast+0xdf0>
 8013506:	2000      	movs	r0, #0
 8013508:	f7ff ba8d 	b.w	8012a26 <forward_cast+0xd7a>
 801350c:	2000      	movs	r0, #0
 801350e:	f7ff bb4d 	b.w	8012bac <forward_cast+0xf00>
 8013512:	2100      	movs	r1, #0
 8013514:	f7ff b8cc 	b.w	80126b0 <forward_cast+0xa04>
 8013518:	2100      	movs	r1, #0
 801351a:	f7ff b905 	b.w	8012728 <forward_cast+0xa7c>
 801351e:	2000      	movs	r0, #0
 8013520:	f7fe bd6a 	b.w	8011ff8 <forward_cast+0x34c>
 8013524:	2000      	movs	r0, #0
 8013526:	f7fe bf23 	b.w	8012370 <forward_cast+0x6c4>
 801352a:	2000      	movs	r0, #0
 801352c:	f7ff b9c0 	b.w	80128b0 <forward_cast+0xc04>
 8013530:	2000      	movs	r0, #0
 8013532:	f7fe bc5c 	b.w	8011dee <forward_cast+0x142>
 8013536:	2000      	movs	r0, #0
 8013538:	f7ff ba37 	b.w	80129aa <forward_cast+0xcfe>
 801353c:	2100      	movs	r1, #0
 801353e:	f7fe bdb3 	b.w	80120a8 <forward_cast+0x3fc>
 8013542:	eef0 7a48 	vmov.f32	s15, s16
 8013546:	f7ff b879 	b.w	801263c <forward_cast+0x990>
 801354a:	bf00      	nop
 801354c:	00841040 	.word	0x00841040
 8013550:	00840840 	.word	0x00840840
 8013554:	2000      	movs	r0, #0
 8013556:	f7ff badc 	b.w	8012b12 <forward_cast+0xe66>
 801355a:	2000      	movs	r0, #0
 801355c:	f7fe bdee 	b.w	801213c <forward_cast+0x490>
 8013560:	2100      	movs	r1, #0
 8013562:	f7ff b91d 	b.w	80127a0 <forward_cast+0xaf4>
 8013566:	2100      	movs	r1, #0
 8013568:	f7fe bc92 	b.w	8011e90 <forward_cast+0x1e4>
 801356c:	4555      	cmp	r5, sl
 801356e:	f4be ac05 	bcs.w	8011d7c <forward_cast+0xd0>
 8013572:	4f9c      	ldr	r7, [pc, #624]	; (80137e4 <forward_cast+0x1b38>)
 8013574:	4b9c      	ldr	r3, [pc, #624]	; (80137e8 <forward_cast+0x1b3c>)
 8013576:	4a9d      	ldr	r2, [pc, #628]	; (80137ec <forward_cast+0x1b40>)
 8013578:	e014      	b.n	80135a4 <forward_cast+0x18f8>
 801357a:	499d      	ldr	r1, [pc, #628]	; (80137f0 <forward_cast+0x1b44>)
 801357c:	428c      	cmp	r4, r1
 801357e:	f001 8764 	beq.w	801544a <forward_cast+0x379e>
 8013582:	dd21      	ble.n	80135c8 <forward_cast+0x191c>
 8013584:	429c      	cmp	r4, r3
 8013586:	f001 8707 	beq.w	8015398 <forward_cast+0x36ec>
 801358a:	4294      	cmp	r4, r2
 801358c:	d137      	bne.n	80135fe <forward_cast+0x1952>
 801358e:	7828      	ldrb	r0, [r5, #0]
 8013590:	3800      	subs	r0, #0
 8013592:	bf18      	it	ne
 8013594:	2001      	movne	r0, #1
 8013596:	9900      	ldr	r1, [sp, #0]
 8013598:	6030      	str	r0, [r6, #0]
 801359a:	444d      	add	r5, r9
 801359c:	45aa      	cmp	sl, r5
 801359e:	440e      	add	r6, r1
 80135a0:	f67e abec 	bls.w	8011d7c <forward_cast+0xd0>
 80135a4:	4544      	cmp	r4, r8
 80135a6:	f001 8709 	beq.w	80153bc <forward_cast+0x3710>
 80135aa:	dde6      	ble.n	801357a <forward_cast+0x18ce>
 80135ac:	4991      	ldr	r1, [pc, #580]	; (80137f4 <forward_cast+0x1b48>)
 80135ae:	428c      	cmp	r4, r1
 80135b0:	f001 86e1 	beq.w	8015376 <forward_cast+0x36ca>
 80135b4:	dd13      	ble.n	80135de <forward_cast+0x1932>
 80135b6:	42bc      	cmp	r4, r7
 80135b8:	d121      	bne.n	80135fe <forward_cast+0x1952>
 80135ba:	edd5 7a00 	vldr	s15, [r5]
 80135be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135c2:	ee17 0a90 	vmov	r0, s15
 80135c6:	e7e6      	b.n	8013596 <forward_cast+0x18ea>
 80135c8:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 80135cc:	428c      	cmp	r4, r1
 80135ce:	f001 86e0 	beq.w	8015392 <forward_cast+0x36e6>
 80135d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80135d6:	428c      	cmp	r4, r1
 80135d8:	d111      	bne.n	80135fe <forward_cast+0x1952>
 80135da:	8828      	ldrh	r0, [r5, #0]
 80135dc:	e7db      	b.n	8013596 <forward_cast+0x18ea>
 80135de:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80135e2:	428c      	cmp	r4, r1
 80135e4:	f001 86e6 	beq.w	80153b4 <forward_cast+0x3708>
 80135e8:	455c      	cmp	r4, fp
 80135ea:	d108      	bne.n	80135fe <forward_cast+0x1952>
 80135ec:	edd5 7a00 	vldr	s15, [r5]
 80135f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135f8:	ee17 0a90 	vmov	r0, s15
 80135fc:	e7cb      	b.n	8013596 <forward_cast+0x18ea>
 80135fe:	2000      	movs	r0, #0
 8013600:	e7c9      	b.n	8013596 <forward_cast+0x18ea>
 8013602:	4555      	cmp	r5, sl
 8013604:	f4be abba 	bcs.w	8011d7c <forward_cast+0xd0>
 8013608:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80137e4 <forward_cast+0x1b38>
 801360c:	4f7a      	ldr	r7, [pc, #488]	; (80137f8 <forward_cast+0x1b4c>)
 801360e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8013804 <forward_cast+0x1b58>
 8013612:	4b77      	ldr	r3, [pc, #476]	; (80137f0 <forward_cast+0x1b44>)
 8013614:	4a74      	ldr	r2, [pc, #464]	; (80137e8 <forward_cast+0x1b3c>)
 8013616:	e017      	b.n	8013648 <forward_cast+0x199c>
 8013618:	429c      	cmp	r4, r3
 801361a:	f001 86db 	beq.w	80153d4 <forward_cast+0x3728>
 801361e:	dd26      	ble.n	801366e <forward_cast+0x19c2>
 8013620:	4294      	cmp	r4, r2
 8013622:	f001 8700 	beq.w	8015426 <forward_cast+0x377a>
 8013626:	4971      	ldr	r1, [pc, #452]	; (80137ec <forward_cast+0x1b40>)
 8013628:	428c      	cmp	r4, r1
 801362a:	d139      	bne.n	80136a0 <forward_cast+0x19f4>
 801362c:	7828      	ldrb	r0, [r5, #0]
 801362e:	3800      	subs	r0, #0
 8013630:	bf18      	it	ne
 8013632:	2001      	movne	r0, #1
 8013634:	f380 0010 	usat	r0, #16, r0
 8013638:	9900      	ldr	r1, [sp, #0]
 801363a:	444d      	add	r5, r9
 801363c:	b280      	uxth	r0, r0
 801363e:	45aa      	cmp	sl, r5
 8013640:	6030      	str	r0, [r6, #0]
 8013642:	440e      	add	r6, r1
 8013644:	f67e ab9a 	bls.w	8011d7c <forward_cast+0xd0>
 8013648:	496c      	ldr	r1, [pc, #432]	; (80137fc <forward_cast+0x1b50>)
 801364a:	428c      	cmp	r4, r1
 801364c:	f001 86be 	beq.w	80153cc <forward_cast+0x3720>
 8013650:	dde2      	ble.n	8013618 <forward_cast+0x196c>
 8013652:	4968      	ldr	r1, [pc, #416]	; (80137f4 <forward_cast+0x1b48>)
 8013654:	428c      	cmp	r4, r1
 8013656:	f001 86d5 	beq.w	8015404 <forward_cast+0x3758>
 801365a:	dd13      	ble.n	8013684 <forward_cast+0x19d8>
 801365c:	4544      	cmp	r4, r8
 801365e:	d11f      	bne.n	80136a0 <forward_cast+0x19f4>
 8013660:	edd5 7a00 	vldr	s15, [r5]
 8013664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013668:	ee17 0a90 	vmov	r0, s15
 801366c:	e7e2      	b.n	8013634 <forward_cast+0x1988>
 801366e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013672:	428c      	cmp	r4, r1
 8013674:	f001 86d4 	beq.w	8015420 <forward_cast+0x3774>
 8013678:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801367c:	428c      	cmp	r4, r1
 801367e:	d10f      	bne.n	80136a0 <forward_cast+0x19f4>
 8013680:	8828      	ldrh	r0, [r5, #0]
 8013682:	e7d7      	b.n	8013634 <forward_cast+0x1988>
 8013684:	42bc      	cmp	r4, r7
 8013686:	f001 86dc 	beq.w	8015442 <forward_cast+0x3796>
 801368a:	455c      	cmp	r4, fp
 801368c:	d108      	bne.n	80136a0 <forward_cast+0x19f4>
 801368e:	edd5 7a00 	vldr	s15, [r5]
 8013692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801369a:	ee17 0a90 	vmov	r0, s15
 801369e:	e7c9      	b.n	8013634 <forward_cast+0x1988>
 80136a0:	2000      	movs	r0, #0
 80136a2:	e7c7      	b.n	8013634 <forward_cast+0x1988>
 80136a4:	4555      	cmp	r5, sl
 80136a6:	f4be ab69 	bcs.w	8011d7c <forward_cast+0xd0>
 80136aa:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80137e4 <forward_cast+0x1b38>
 80136ae:	4b50      	ldr	r3, [pc, #320]	; (80137f0 <forward_cast+0x1b44>)
 80136b0:	4a4d      	ldr	r2, [pc, #308]	; (80137e8 <forward_cast+0x1b3c>)
 80136b2:	2700      	movs	r7, #0
 80136b4:	e016      	b.n	80136e4 <forward_cast+0x1a38>
 80136b6:	429c      	cmp	r4, r3
 80136b8:	f001 8468 	beq.w	8014f8c <forward_cast+0x32e0>
 80136bc:	dd24      	ble.n	8013708 <forward_cast+0x1a5c>
 80136be:	4294      	cmp	r4, r2
 80136c0:	f001 87cf 	beq.w	8015662 <forward_cast+0x39b6>
 80136c4:	4949      	ldr	r1, [pc, #292]	; (80137ec <forward_cast+0x1b40>)
 80136c6:	428c      	cmp	r4, r1
 80136c8:	d13a      	bne.n	8013740 <forward_cast+0x1a94>
 80136ca:	7828      	ldrb	r0, [r5, #0]
 80136cc:	3800      	subs	r0, #0
 80136ce:	bf18      	it	ne
 80136d0:	2001      	movne	r0, #1
 80136d2:	f300 0007 	ssat	r0, #8, r0
 80136d6:	9900      	ldr	r1, [sp, #0]
 80136d8:	55f0      	strb	r0, [r6, r7]
 80136da:	444d      	add	r5, r9
 80136dc:	45aa      	cmp	sl, r5
 80136de:	440f      	add	r7, r1
 80136e0:	f67e ab4c 	bls.w	8011d7c <forward_cast+0xd0>
 80136e4:	455c      	cmp	r4, fp
 80136e6:	f001 8460 	beq.w	8014faa <forward_cast+0x32fe>
 80136ea:	dde4      	ble.n	80136b6 <forward_cast+0x1a0a>
 80136ec:	4941      	ldr	r1, [pc, #260]	; (80137f4 <forward_cast+0x1b48>)
 80136ee:	428c      	cmp	r4, r1
 80136f0:	f001 87a6 	beq.w	8015640 <forward_cast+0x3994>
 80136f4:	dd12      	ble.n	801371c <forward_cast+0x1a70>
 80136f6:	4544      	cmp	r4, r8
 80136f8:	d122      	bne.n	8013740 <forward_cast+0x1a94>
 80136fa:	edd5 7a00 	vldr	s15, [r5]
 80136fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013702:	ee17 0a90 	vmov	r0, s15
 8013706:	e7e4      	b.n	80136d2 <forward_cast+0x1a26>
 8013708:	493d      	ldr	r1, [pc, #244]	; (8013800 <forward_cast+0x1b54>)
 801370a:	428c      	cmp	r4, r1
 801370c:	f001 87a6 	beq.w	801565c <forward_cast+0x39b0>
 8013710:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013714:	428c      	cmp	r4, r1
 8013716:	d113      	bne.n	8013740 <forward_cast+0x1a94>
 8013718:	8828      	ldrh	r0, [r5, #0]
 801371a:	e7da      	b.n	80136d2 <forward_cast+0x1a26>
 801371c:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8013720:	428c      	cmp	r4, r1
 8013722:	f001 87ac 	beq.w	801567e <forward_cast+0x39d2>
 8013726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801372a:	428c      	cmp	r4, r1
 801372c:	d108      	bne.n	8013740 <forward_cast+0x1a94>
 801372e:	edd5 7a00 	vldr	s15, [r5]
 8013732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801373a:	ee17 0a90 	vmov	r0, s15
 801373e:	e7c8      	b.n	80136d2 <forward_cast+0x1a26>
 8013740:	2000      	movs	r0, #0
 8013742:	e7c6      	b.n	80136d2 <forward_cast+0x1a26>
 8013744:	4555      	cmp	r5, sl
 8013746:	f4be ab19 	bcs.w	8011d7c <forward_cast+0xd0>
 801374a:	4a28      	ldr	r2, [pc, #160]	; (80137ec <forward_cast+0x1b40>)
 801374c:	e014      	b.n	8013778 <forward_cast+0x1acc>
 801374e:	455c      	cmp	r4, fp
 8013750:	f001 8465 	beq.w	801501e <forward_cast+0x3372>
 8013754:	dd22      	ble.n	801379c <forward_cast+0x1af0>
 8013756:	4924      	ldr	r1, [pc, #144]	; (80137e8 <forward_cast+0x1b3c>)
 8013758:	428c      	cmp	r4, r1
 801375a:	f001 843f 	beq.w	8014fdc <forward_cast+0x3330>
 801375e:	4294      	cmp	r4, r2
 8013760:	d136      	bne.n	80137d0 <forward_cast+0x1b24>
 8013762:	7828      	ldrb	r0, [r5, #0]
 8013764:	3800      	subs	r0, #0
 8013766:	bf18      	it	ne
 8013768:	2001      	movne	r0, #1
 801376a:	9900      	ldr	r1, [sp, #0]
 801376c:	6030      	str	r0, [r6, #0]
 801376e:	444d      	add	r5, r9
 8013770:	45aa      	cmp	sl, r5
 8013772:	440e      	add	r6, r1
 8013774:	f67e ab02 	bls.w	8011d7c <forward_cast+0xd0>
 8013778:	4544      	cmp	r4, r8
 801377a:	f001 844c 	beq.w	8015016 <forward_cast+0x336a>
 801377e:	dde6      	ble.n	801374e <forward_cast+0x1aa2>
 8013780:	491c      	ldr	r1, [pc, #112]	; (80137f4 <forward_cast+0x1b48>)
 8013782:	428c      	cmp	r4, r1
 8013784:	f001 8419 	beq.w	8014fba <forward_cast+0x330e>
 8013788:	dd12      	ble.n	80137b0 <forward_cast+0x1b04>
 801378a:	42bc      	cmp	r4, r7
 801378c:	d120      	bne.n	80137d0 <forward_cast+0x1b24>
 801378e:	edd5 7a00 	vldr	s15, [r5]
 8013792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013796:	ee17 0a90 	vmov	r0, s15
 801379a:	e7e6      	b.n	801376a <forward_cast+0x1abe>
 801379c:	4918      	ldr	r1, [pc, #96]	; (8013800 <forward_cast+0x1b54>)
 801379e:	428c      	cmp	r4, r1
 80137a0:	f001 8419 	beq.w	8014fd6 <forward_cast+0x332a>
 80137a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80137a8:	428c      	cmp	r4, r1
 80137aa:	d111      	bne.n	80137d0 <forward_cast+0x1b24>
 80137ac:	8828      	ldrh	r0, [r5, #0]
 80137ae:	e7dc      	b.n	801376a <forward_cast+0x1abe>
 80137b0:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80137b4:	428c      	cmp	r4, r1
 80137b6:	f001 841f 	beq.w	8014ff8 <forward_cast+0x334c>
 80137ba:	429c      	cmp	r4, r3
 80137bc:	d108      	bne.n	80137d0 <forward_cast+0x1b24>
 80137be:	edd5 7a00 	vldr	s15, [r5]
 80137c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137ca:	ee17 0a90 	vmov	r0, s15
 80137ce:	e7cc      	b.n	801376a <forward_cast+0x1abe>
 80137d0:	2000      	movs	r0, #0
 80137d2:	e7ca      	b.n	801376a <forward_cast+0x1abe>
 80137d4:	4555      	cmp	r5, sl
 80137d6:	f4be aad1 	bcs.w	8011d7c <forward_cast+0xd0>
 80137da:	4b0a      	ldr	r3, [pc, #40]	; (8013804 <forward_cast+0x1b58>)
 80137dc:	4a02      	ldr	r2, [pc, #8]	; (80137e8 <forward_cast+0x1b3c>)
 80137de:	f04f 0800 	mov.w	r8, #0
 80137e2:	e027      	b.n	8013834 <forward_cast+0x1b88>
 80137e4:	01821040 	.word	0x01821040
 80137e8:	00042040 	.word	0x00042040
 80137ec:	00060440 	.word	0x00060440
 80137f0:	00041040 	.word	0x00041040
 80137f4:	00842040 	.word	0x00842040
 80137f8:	00840840 	.word	0x00840840
 80137fc:	00840440 	.word	0x00840440
 8013800:	00040440 	.word	0x00040440
 8013804:	00841040 	.word	0x00841040
 8013808:	42bc      	cmp	r4, r7
 801380a:	f001 8478 	beq.w	80150fe <forward_cast+0x3452>
 801380e:	dd25      	ble.n	801385c <forward_cast+0x1bb0>
 8013810:	4294      	cmp	r4, r2
 8013812:	f001 8464 	beq.w	80150de <forward_cast+0x3432>
 8013816:	49a9      	ldr	r1, [pc, #676]	; (8013abc <forward_cast+0x1e10>)
 8013818:	428c      	cmp	r4, r1
 801381a:	d13a      	bne.n	8013892 <forward_cast+0x1be6>
 801381c:	7829      	ldrb	r1, [r5, #0]
 801381e:	3900      	subs	r1, #0
 8013820:	bf18      	it	ne
 8013822:	2101      	movne	r1, #1
 8013824:	f806 1008 	strb.w	r1, [r6, r8]
 8013828:	444d      	add	r5, r9
 801382a:	9900      	ldr	r1, [sp, #0]
 801382c:	45aa      	cmp	sl, r5
 801382e:	4488      	add	r8, r1
 8013830:	f67e aaa4 	bls.w	8011d7c <forward_cast+0xd0>
 8013834:	455c      	cmp	r4, fp
 8013836:	d018      	beq.n	801386a <forward_cast+0x1bbe>
 8013838:	dde6      	ble.n	8013808 <forward_cast+0x1b5c>
 801383a:	49a1      	ldr	r1, [pc, #644]	; (8013ac0 <forward_cast+0x1e14>)
 801383c:	428c      	cmp	r4, r1
 801383e:	f001 843e 	beq.w	80150be <forward_cast+0x3412>
 8013842:	dd15      	ble.n	8013870 <forward_cast+0x1bc4>
 8013844:	499f      	ldr	r1, [pc, #636]	; (8013ac4 <forward_cast+0x1e18>)
 8013846:	428c      	cmp	r4, r1
 8013848:	d123      	bne.n	8013892 <forward_cast+0x1be6>
 801384a:	edd5 7a00 	vldr	s15, [r5]
 801384e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013852:	edcd 7a01 	vstr	s15, [sp, #4]
 8013856:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801385a:	e7e3      	b.n	8013824 <forward_cast+0x1b78>
 801385c:	499a      	ldr	r1, [pc, #616]	; (8013ac8 <forward_cast+0x1e1c>)
 801385e:	428c      	cmp	r4, r1
 8013860:	d003      	beq.n	801386a <forward_cast+0x1bbe>
 8013862:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013866:	428c      	cmp	r4, r1
 8013868:	d113      	bne.n	8013892 <forward_cast+0x1be6>
 801386a:	f995 1000 	ldrsb.w	r1, [r5]
 801386e:	e7d9      	b.n	8013824 <forward_cast+0x1b78>
 8013870:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8013874:	428c      	cmp	r4, r1
 8013876:	d0f8      	beq.n	801386a <forward_cast+0x1bbe>
 8013878:	429c      	cmp	r4, r3
 801387a:	d10a      	bne.n	8013892 <forward_cast+0x1be6>
 801387c:	edd5 7a00 	vldr	s15, [r5]
 8013880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013888:	edcd 7a01 	vstr	s15, [sp, #4]
 801388c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8013890:	e7c8      	b.n	8013824 <forward_cast+0x1b78>
 8013892:	2100      	movs	r1, #0
 8013894:	e7c6      	b.n	8013824 <forward_cast+0x1b78>
 8013896:	4555      	cmp	r5, sl
 8013898:	f4be aa70 	bcs.w	8011d7c <forward_cast+0xd0>
 801389c:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8013ac4 <forward_cast+0x1e18>
 80138a0:	4f8a      	ldr	r7, [pc, #552]	; (8013acc <forward_cast+0x1e20>)
 80138a2:	f8df b238 	ldr.w	fp, [pc, #568]	; 8013adc <forward_cast+0x1e30>
 80138a6:	4b8a      	ldr	r3, [pc, #552]	; (8013ad0 <forward_cast+0x1e24>)
 80138a8:	4a8a      	ldr	r2, [pc, #552]	; (8013ad4 <forward_cast+0x1e28>)
 80138aa:	e014      	b.n	80138d6 <forward_cast+0x1c2a>
 80138ac:	429c      	cmp	r4, r3
 80138ae:	f001 83c0 	beq.w	8015032 <forward_cast+0x3386>
 80138b2:	dd26      	ble.n	8013902 <forward_cast+0x1c56>
 80138b4:	4294      	cmp	r4, r2
 80138b6:	f001 83ea 	beq.w	801508e <forward_cast+0x33e2>
 80138ba:	4980      	ldr	r1, [pc, #512]	; (8013abc <forward_cast+0x1e10>)
 80138bc:	428c      	cmp	r4, r1
 80138be:	d13e      	bne.n	801393e <forward_cast+0x1c92>
 80138c0:	7829      	ldrb	r1, [r5, #0]
 80138c2:	3900      	subs	r1, #0
 80138c4:	bf18      	it	ne
 80138c6:	2101      	movne	r1, #1
 80138c8:	6031      	str	r1, [r6, #0]
 80138ca:	444d      	add	r5, r9
 80138cc:	9900      	ldr	r1, [sp, #0]
 80138ce:	45aa      	cmp	sl, r5
 80138d0:	440e      	add	r6, r1
 80138d2:	f67e aa53 	bls.w	8011d7c <forward_cast+0xd0>
 80138d6:	4980      	ldr	r1, [pc, #512]	; (8013ad8 <forward_cast+0x1e2c>)
 80138d8:	428c      	cmp	r4, r1
 80138da:	f001 8391 	beq.w	8015000 <forward_cast+0x3354>
 80138de:	dde5      	ble.n	80138ac <forward_cast+0x1c00>
 80138e0:	4977      	ldr	r1, [pc, #476]	; (8013ac0 <forward_cast+0x1e14>)
 80138e2:	428c      	cmp	r4, r1
 80138e4:	f001 83c2 	beq.w	801506c <forward_cast+0x33c0>
 80138e8:	dd18      	ble.n	801391c <forward_cast+0x1c70>
 80138ea:	4544      	cmp	r4, r8
 80138ec:	d127      	bne.n	801393e <forward_cast+0x1c92>
 80138ee:	edd5 7a00 	vldr	s15, [r5]
 80138f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80138f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138fa:	bf14      	ite	ne
 80138fc:	2101      	movne	r1, #1
 80138fe:	2100      	moveq	r1, #0
 8013900:	e7e2      	b.n	80138c8 <forward_cast+0x1c1c>
 8013902:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013906:	428c      	cmp	r4, r1
 8013908:	d0da      	beq.n	80138c0 <forward_cast+0x1c14>
 801390a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801390e:	428c      	cmp	r4, r1
 8013910:	d115      	bne.n	801393e <forward_cast+0x1c92>
 8013912:	8829      	ldrh	r1, [r5, #0]
 8013914:	3900      	subs	r1, #0
 8013916:	bf18      	it	ne
 8013918:	2101      	movne	r1, #1
 801391a:	e7d5      	b.n	80138c8 <forward_cast+0x1c1c>
 801391c:	42bc      	cmp	r4, r7
 801391e:	f001 83c7 	beq.w	80150b0 <forward_cast+0x3404>
 8013922:	455c      	cmp	r4, fp
 8013924:	d10b      	bne.n	801393e <forward_cast+0x1c92>
 8013926:	edd5 7a00 	vldr	s15, [r5]
 801392a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801392e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013936:	bf14      	ite	ne
 8013938:	2101      	movne	r1, #1
 801393a:	2100      	moveq	r1, #0
 801393c:	e7c4      	b.n	80138c8 <forward_cast+0x1c1c>
 801393e:	2100      	movs	r1, #0
 8013940:	e7c2      	b.n	80138c8 <forward_cast+0x1c1c>
 8013942:	4555      	cmp	r5, sl
 8013944:	f4be aa1a 	bcs.w	8011d7c <forward_cast+0xd0>
 8013948:	9f00      	ldr	r7, [sp, #0]
 801394a:	4621      	mov	r1, r4
 801394c:	4628      	mov	r0, r5
 801394e:	f7fe f937 	bl	8011bc0 <_array_handle_get_as_float>
 8013952:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013956:	ee17 3a90 	vmov	r3, s15
 801395a:	f383 0308 	usat	r3, #8, r3
 801395e:	444d      	add	r5, r9
 8013960:	45aa      	cmp	sl, r5
 8013962:	7033      	strb	r3, [r6, #0]
 8013964:	443e      	add	r6, r7
 8013966:	d8f0      	bhi.n	801394a <forward_cast+0x1c9e>
 8013968:	f7fe ba08 	b.w	8011d7c <forward_cast+0xd0>
 801396c:	4555      	cmp	r5, sl
 801396e:	f4be aa05 	bcs.w	8011d7c <forward_cast+0xd0>
 8013972:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8013ac4 <forward_cast+0x1e18>
 8013976:	4f55      	ldr	r7, [pc, #340]	; (8013acc <forward_cast+0x1e20>)
 8013978:	f8df b160 	ldr.w	fp, [pc, #352]	; 8013adc <forward_cast+0x1e30>
 801397c:	4b54      	ldr	r3, [pc, #336]	; (8013ad0 <forward_cast+0x1e24>)
 801397e:	4a55      	ldr	r2, [pc, #340]	; (8013ad4 <forward_cast+0x1e28>)
 8013980:	e017      	b.n	80139b2 <forward_cast+0x1d06>
 8013982:	429c      	cmp	r4, r3
 8013984:	f001 8726 	beq.w	80157d4 <forward_cast+0x3b28>
 8013988:	dd26      	ble.n	80139d8 <forward_cast+0x1d2c>
 801398a:	4294      	cmp	r4, r2
 801398c:	f001 86f9 	beq.w	8015782 <forward_cast+0x3ad6>
 8013990:	494a      	ldr	r1, [pc, #296]	; (8013abc <forward_cast+0x1e10>)
 8013992:	428c      	cmp	r4, r1
 8013994:	d139      	bne.n	8013a0a <forward_cast+0x1d5e>
 8013996:	7828      	ldrb	r0, [r5, #0]
 8013998:	3800      	subs	r0, #0
 801399a:	bf18      	it	ne
 801399c:	2001      	movne	r0, #1
 801399e:	f380 0008 	usat	r0, #8, r0
 80139a2:	9900      	ldr	r1, [sp, #0]
 80139a4:	444d      	add	r5, r9
 80139a6:	b2c0      	uxtb	r0, r0
 80139a8:	45aa      	cmp	sl, r5
 80139aa:	6030      	str	r0, [r6, #0]
 80139ac:	440e      	add	r6, r1
 80139ae:	f67e a9e5 	bls.w	8011d7c <forward_cast+0xd0>
 80139b2:	4949      	ldr	r1, [pc, #292]	; (8013ad8 <forward_cast+0x1e2c>)
 80139b4:	428c      	cmp	r4, r1
 80139b6:	f001 8709 	beq.w	80157cc <forward_cast+0x3b20>
 80139ba:	dde2      	ble.n	8013982 <forward_cast+0x1cd6>
 80139bc:	4940      	ldr	r1, [pc, #256]	; (8013ac0 <forward_cast+0x1e14>)
 80139be:	428c      	cmp	r4, r1
 80139c0:	f001 86ce 	beq.w	8015760 <forward_cast+0x3ab4>
 80139c4:	dd13      	ble.n	80139ee <forward_cast+0x1d42>
 80139c6:	4544      	cmp	r4, r8
 80139c8:	d11f      	bne.n	8013a0a <forward_cast+0x1d5e>
 80139ca:	edd5 7a00 	vldr	s15, [r5]
 80139ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139d2:	ee17 0a90 	vmov	r0, s15
 80139d6:	e7e2      	b.n	801399e <forward_cast+0x1cf2>
 80139d8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80139dc:	428c      	cmp	r4, r1
 80139de:	f001 86cd 	beq.w	801577c <forward_cast+0x3ad0>
 80139e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80139e6:	428c      	cmp	r4, r1
 80139e8:	d10f      	bne.n	8013a0a <forward_cast+0x1d5e>
 80139ea:	8828      	ldrh	r0, [r5, #0]
 80139ec:	e7d7      	b.n	801399e <forward_cast+0x1cf2>
 80139ee:	42bc      	cmp	r4, r7
 80139f0:	f001 86e4 	beq.w	80157bc <forward_cast+0x3b10>
 80139f4:	455c      	cmp	r4, fp
 80139f6:	d108      	bne.n	8013a0a <forward_cast+0x1d5e>
 80139f8:	edd5 7a00 	vldr	s15, [r5]
 80139fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a04:	ee17 0a90 	vmov	r0, s15
 8013a08:	e7c9      	b.n	801399e <forward_cast+0x1cf2>
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	e7c7      	b.n	801399e <forward_cast+0x1cf2>
 8013a0e:	4555      	cmp	r5, sl
 8013a10:	f4be a9b4 	bcs.w	8011d7c <forward_cast+0xd0>
 8013a14:	4a31      	ldr	r2, [pc, #196]	; (8013adc <forward_cast+0x1e30>)
 8013a16:	f04f 0800 	mov.w	r8, #0
 8013a1a:	e019      	b.n	8013a50 <forward_cast+0x1da4>
 8013a1c:	429c      	cmp	r4, r3
 8013a1e:	f001 8636 	beq.w	801568e <forward_cast+0x39e2>
 8013a22:	dd28      	ble.n	8013a76 <forward_cast+0x1dca>
 8013a24:	492b      	ldr	r1, [pc, #172]	; (8013ad4 <forward_cast+0x1e28>)
 8013a26:	428c      	cmp	r4, r1
 8013a28:	f001 86ef 	beq.w	801580a <forward_cast+0x3b5e>
 8013a2c:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8013a30:	428c      	cmp	r4, r1
 8013a32:	d138      	bne.n	8013aa6 <forward_cast+0x1dfa>
 8013a34:	7828      	ldrb	r0, [r5, #0]
 8013a36:	3800      	subs	r0, #0
 8013a38:	bf18      	it	ne
 8013a3a:	2001      	movne	r0, #1
 8013a3c:	f380 0008 	usat	r0, #8, r0
 8013a40:	9900      	ldr	r1, [sp, #0]
 8013a42:	f806 0008 	strb.w	r0, [r6, r8]
 8013a46:	444d      	add	r5, r9
 8013a48:	45aa      	cmp	sl, r5
 8013a4a:	4488      	add	r8, r1
 8013a4c:	f67e a996 	bls.w	8011d7c <forward_cast+0xd0>
 8013a50:	455c      	cmp	r4, fp
 8013a52:	f001 86b7 	beq.w	80157c4 <forward_cast+0x3b18>
 8013a56:	dde1      	ble.n	8013a1c <forward_cast+0x1d70>
 8013a58:	4919      	ldr	r1, [pc, #100]	; (8013ac0 <forward_cast+0x1e14>)
 8013a5a:	428c      	cmp	r4, r1
 8013a5c:	f001 86c4 	beq.w	80157e8 <forward_cast+0x3b3c>
 8013a60:	dd11      	ble.n	8013a86 <forward_cast+0x1dda>
 8013a62:	4918      	ldr	r1, [pc, #96]	; (8013ac4 <forward_cast+0x1e18>)
 8013a64:	428c      	cmp	r4, r1
 8013a66:	d11e      	bne.n	8013aa6 <forward_cast+0x1dfa>
 8013a68:	edd5 7a00 	vldr	s15, [r5]
 8013a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a70:	ee17 0a90 	vmov	r0, s15
 8013a74:	e7e2      	b.n	8013a3c <forward_cast+0x1d90>
 8013a76:	42bc      	cmp	r4, r7
 8013a78:	f001 86c4 	beq.w	8015804 <forward_cast+0x3b58>
 8013a7c:	4918      	ldr	r1, [pc, #96]	; (8013ae0 <forward_cast+0x1e34>)
 8013a7e:	428c      	cmp	r4, r1
 8013a80:	d111      	bne.n	8013aa6 <forward_cast+0x1dfa>
 8013a82:	8828      	ldrh	r0, [r5, #0]
 8013a84:	e7da      	b.n	8013a3c <forward_cast+0x1d90>
 8013a86:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8013a8a:	428c      	cmp	r4, r1
 8013a8c:	f001 86cb 	beq.w	8015826 <forward_cast+0x3b7a>
 8013a90:	4294      	cmp	r4, r2
 8013a92:	d108      	bne.n	8013aa6 <forward_cast+0x1dfa>
 8013a94:	edd5 7a00 	vldr	s15, [r5]
 8013a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013aa0:	ee17 0a90 	vmov	r0, s15
 8013aa4:	e7ca      	b.n	8013a3c <forward_cast+0x1d90>
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	e7c8      	b.n	8013a3c <forward_cast+0x1d90>
 8013aaa:	4555      	cmp	r5, sl
 8013aac:	f4be a966 	bcs.w	8011d7c <forward_cast+0xd0>
 8013ab0:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8013ac0 <forward_cast+0x1e14>
 8013ab4:	4b09      	ldr	r3, [pc, #36]	; (8013adc <forward_cast+0x1e30>)
 8013ab6:	4a06      	ldr	r2, [pc, #24]	; (8013ad0 <forward_cast+0x1e24>)
 8013ab8:	2700      	movs	r7, #0
 8013aba:	e02c      	b.n	8013b16 <forward_cast+0x1e6a>
 8013abc:	00060440 	.word	0x00060440
 8013ac0:	00842040 	.word	0x00842040
 8013ac4:	01821040 	.word	0x01821040
 8013ac8:	00040440 	.word	0x00040440
 8013acc:	00840840 	.word	0x00840840
 8013ad0:	00041040 	.word	0x00041040
 8013ad4:	00042040 	.word	0x00042040
 8013ad8:	00840440 	.word	0x00840440
 8013adc:	00841040 	.word	0x00841040
 8013ae0:	00040840 	.word	0x00040840
 8013ae4:	4294      	cmp	r4, r2
 8013ae6:	f001 86ec 	beq.w	80158c2 <forward_cast+0x3c16>
 8013aea:	dd27      	ble.n	8013b3c <forward_cast+0x1e90>
 8013aec:	499d      	ldr	r1, [pc, #628]	; (8013d64 <forward_cast+0x20b8>)
 8013aee:	428c      	cmp	r4, r1
 8013af0:	f001 86ae 	beq.w	8015850 <forward_cast+0x3ba4>
 8013af4:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8013af8:	428c      	cmp	r4, r1
 8013afa:	d136      	bne.n	8013b6a <forward_cast+0x1ebe>
 8013afc:	7828      	ldrb	r0, [r5, #0]
 8013afe:	3800      	subs	r0, #0
 8013b00:	bf18      	it	ne
 8013b02:	2001      	movne	r0, #1
 8013b04:	f300 000f 	ssat	r0, #16, r0
 8013b08:	9900      	ldr	r1, [sp, #0]
 8013b0a:	55f0      	strb	r0, [r6, r7]
 8013b0c:	444d      	add	r5, r9
 8013b0e:	45aa      	cmp	sl, r5
 8013b10:	440f      	add	r7, r1
 8013b12:	f67e a933 	bls.w	8011d7c <forward_cast+0xd0>
 8013b16:	4994      	ldr	r1, [pc, #592]	; (8013d68 <forward_cast+0x20bc>)
 8013b18:	428c      	cmp	r4, r1
 8013b1a:	f001 86ce 	beq.w	80158ba <forward_cast+0x3c0e>
 8013b1e:	dde1      	ble.n	8013ae4 <forward_cast+0x1e38>
 8013b20:	4544      	cmp	r4, r8
 8013b22:	f001 8684 	beq.w	801582e <forward_cast+0x3b82>
 8013b26:	dd11      	ble.n	8013b4c <forward_cast+0x1ea0>
 8013b28:	4990      	ldr	r1, [pc, #576]	; (8013d6c <forward_cast+0x20c0>)
 8013b2a:	428c      	cmp	r4, r1
 8013b2c:	d11d      	bne.n	8013b6a <forward_cast+0x1ebe>
 8013b2e:	edd5 7a00 	vldr	s15, [r5]
 8013b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b36:	ee17 0a90 	vmov	r0, s15
 8013b3a:	e7e3      	b.n	8013b04 <forward_cast+0x1e58>
 8013b3c:	455c      	cmp	r4, fp
 8013b3e:	f001 8684 	beq.w	801584a <forward_cast+0x3b9e>
 8013b42:	498b      	ldr	r1, [pc, #556]	; (8013d70 <forward_cast+0x20c4>)
 8013b44:	428c      	cmp	r4, r1
 8013b46:	d110      	bne.n	8013b6a <forward_cast+0x1ebe>
 8013b48:	8828      	ldrh	r0, [r5, #0]
 8013b4a:	e7db      	b.n	8013b04 <forward_cast+0x1e58>
 8013b4c:	4989      	ldr	r1, [pc, #548]	; (8013d74 <forward_cast+0x20c8>)
 8013b4e:	428c      	cmp	r4, r1
 8013b50:	f001 868c 	beq.w	801586c <forward_cast+0x3bc0>
 8013b54:	429c      	cmp	r4, r3
 8013b56:	d108      	bne.n	8013b6a <forward_cast+0x1ebe>
 8013b58:	edd5 7a00 	vldr	s15, [r5]
 8013b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b64:	ee17 0a90 	vmov	r0, s15
 8013b68:	e7cc      	b.n	8013b04 <forward_cast+0x1e58>
 8013b6a:	2000      	movs	r0, #0
 8013b6c:	e7ca      	b.n	8013b04 <forward_cast+0x1e58>
 8013b6e:	4555      	cmp	r5, sl
 8013b70:	f4be a904 	bcs.w	8011d7c <forward_cast+0xd0>
 8013b74:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8013d6c <forward_cast+0x20c0>
 8013b78:	4f7e      	ldr	r7, [pc, #504]	; (8013d74 <forward_cast+0x20c8>)
 8013b7a:	f8df b208 	ldr.w	fp, [pc, #520]	; 8013d84 <forward_cast+0x20d8>
 8013b7e:	4b7e      	ldr	r3, [pc, #504]	; (8013d78 <forward_cast+0x20cc>)
 8013b80:	4a78      	ldr	r2, [pc, #480]	; (8013d64 <forward_cast+0x20b8>)
 8013b82:	e017      	b.n	8013bb4 <forward_cast+0x1f08>
 8013b84:	429c      	cmp	r4, r3
 8013b86:	f001 86de 	beq.w	8015946 <forward_cast+0x3c9a>
 8013b8a:	dd26      	ble.n	8013bda <forward_cast+0x1f2e>
 8013b8c:	4294      	cmp	r4, r2
 8013b8e:	f001 8682 	beq.w	8015896 <forward_cast+0x3bea>
 8013b92:	497a      	ldr	r1, [pc, #488]	; (8013d7c <forward_cast+0x20d0>)
 8013b94:	428c      	cmp	r4, r1
 8013b96:	d139      	bne.n	8013c0c <forward_cast+0x1f60>
 8013b98:	7828      	ldrb	r0, [r5, #0]
 8013b9a:	3800      	subs	r0, #0
 8013b9c:	bf18      	it	ne
 8013b9e:	2001      	movne	r0, #1
 8013ba0:	f300 000f 	ssat	r0, #16, r0
 8013ba4:	9900      	ldr	r1, [sp, #0]
 8013ba6:	444d      	add	r5, r9
 8013ba8:	b200      	sxth	r0, r0
 8013baa:	45aa      	cmp	sl, r5
 8013bac:	6030      	str	r0, [r6, #0]
 8013bae:	440e      	add	r6, r1
 8013bb0:	f67e a8e4 	bls.w	8011d7c <forward_cast+0xd0>
 8013bb4:	496c      	ldr	r1, [pc, #432]	; (8013d68 <forward_cast+0x20bc>)
 8013bb6:	428c      	cmp	r4, r1
 8013bb8:	f001 8565 	beq.w	8015686 <forward_cast+0x39da>
 8013bbc:	dde2      	ble.n	8013b84 <forward_cast+0x1ed8>
 8013bbe:	4970      	ldr	r1, [pc, #448]	; (8013d80 <forward_cast+0x20d4>)
 8013bc0:	428c      	cmp	r4, r1
 8013bc2:	f001 8657 	beq.w	8015874 <forward_cast+0x3bc8>
 8013bc6:	dd13      	ble.n	8013bf0 <forward_cast+0x1f44>
 8013bc8:	4544      	cmp	r4, r8
 8013bca:	d11f      	bne.n	8013c0c <forward_cast+0x1f60>
 8013bcc:	edd5 7a00 	vldr	s15, [r5]
 8013bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bd4:	ee17 0a90 	vmov	r0, s15
 8013bd8:	e7e2      	b.n	8013ba0 <forward_cast+0x1ef4>
 8013bda:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013bde:	428c      	cmp	r4, r1
 8013be0:	f001 8656 	beq.w	8015890 <forward_cast+0x3be4>
 8013be4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013be8:	428c      	cmp	r4, r1
 8013bea:	d10f      	bne.n	8013c0c <forward_cast+0x1f60>
 8013bec:	8828      	ldrh	r0, [r5, #0]
 8013bee:	e7d7      	b.n	8013ba0 <forward_cast+0x1ef4>
 8013bf0:	42bc      	cmp	r4, r7
 8013bf2:	f001 865e 	beq.w	80158b2 <forward_cast+0x3c06>
 8013bf6:	455c      	cmp	r4, fp
 8013bf8:	d108      	bne.n	8013c0c <forward_cast+0x1f60>
 8013bfa:	edd5 7a00 	vldr	s15, [r5]
 8013bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c06:	ee17 0a90 	vmov	r0, s15
 8013c0a:	e7c9      	b.n	8013ba0 <forward_cast+0x1ef4>
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	e7c7      	b.n	8013ba0 <forward_cast+0x1ef4>
 8013c10:	4555      	cmp	r5, sl
 8013c12:	f4be a8b3 	bcs.w	8011d7c <forward_cast+0xd0>
 8013c16:	4b57      	ldr	r3, [pc, #348]	; (8013d74 <forward_cast+0x20c8>)
 8013c18:	4a5a      	ldr	r2, [pc, #360]	; (8013d84 <forward_cast+0x20d8>)
 8013c1a:	f04f 0800 	mov.w	r8, #0
 8013c1e:	e019      	b.n	8013c54 <forward_cast+0x1fa8>
 8013c20:	42bc      	cmp	r4, r7
 8013c22:	f001 8542 	beq.w	80156aa <forward_cast+0x39fe>
 8013c26:	dd29      	ble.n	8013c7c <forward_cast+0x1fd0>
 8013c28:	494e      	ldr	r1, [pc, #312]	; (8013d64 <forward_cast+0x20b8>)
 8013c2a:	428c      	cmp	r4, r1
 8013c2c:	f001 8558 	beq.w	80156e0 <forward_cast+0x3a34>
 8013c30:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8013c34:	428c      	cmp	r4, r1
 8013c36:	d137      	bne.n	8013ca8 <forward_cast+0x1ffc>
 8013c38:	7828      	ldrb	r0, [r5, #0]
 8013c3a:	3800      	subs	r0, #0
 8013c3c:	bf18      	it	ne
 8013c3e:	2001      	movne	r0, #1
 8013c40:	f380 0010 	usat	r0, #16, r0
 8013c44:	9900      	ldr	r1, [sp, #0]
 8013c46:	f806 0008 	strb.w	r0, [r6, r8]
 8013c4a:	444d      	add	r5, r9
 8013c4c:	45aa      	cmp	sl, r5
 8013c4e:	4488      	add	r8, r1
 8013c50:	f67e a894 	bls.w	8011d7c <forward_cast+0xd0>
 8013c54:	4944      	ldr	r1, [pc, #272]	; (8013d68 <forward_cast+0x20bc>)
 8013c56:	428c      	cmp	r4, r1
 8013c58:	f001 8523 	beq.w	80156a2 <forward_cast+0x39f6>
 8013c5c:	dde0      	ble.n	8013c20 <forward_cast+0x1f74>
 8013c5e:	4948      	ldr	r1, [pc, #288]	; (8013d80 <forward_cast+0x20d4>)
 8013c60:	428c      	cmp	r4, r1
 8013c62:	f001 852c 	beq.w	80156be <forward_cast+0x3a12>
 8013c66:	dd11      	ble.n	8013c8c <forward_cast+0x1fe0>
 8013c68:	4940      	ldr	r1, [pc, #256]	; (8013d6c <forward_cast+0x20c0>)
 8013c6a:	428c      	cmp	r4, r1
 8013c6c:	d11c      	bne.n	8013ca8 <forward_cast+0x1ffc>
 8013c6e:	edd5 7a00 	vldr	s15, [r5]
 8013c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c76:	ee17 0a90 	vmov	r0, s15
 8013c7a:	e7e1      	b.n	8013c40 <forward_cast+0x1f94>
 8013c7c:	455c      	cmp	r4, fp
 8013c7e:	f001 852c 	beq.w	80156da <forward_cast+0x3a2e>
 8013c82:	493b      	ldr	r1, [pc, #236]	; (8013d70 <forward_cast+0x20c4>)
 8013c84:	428c      	cmp	r4, r1
 8013c86:	d10f      	bne.n	8013ca8 <forward_cast+0x1ffc>
 8013c88:	8828      	ldrh	r0, [r5, #0]
 8013c8a:	e7d9      	b.n	8013c40 <forward_cast+0x1f94>
 8013c8c:	429c      	cmp	r4, r3
 8013c8e:	f001 8535 	beq.w	80156fc <forward_cast+0x3a50>
 8013c92:	4294      	cmp	r4, r2
 8013c94:	d108      	bne.n	8013ca8 <forward_cast+0x1ffc>
 8013c96:	edd5 7a00 	vldr	s15, [r5]
 8013c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ca2:	ee17 0a90 	vmov	r0, s15
 8013ca6:	e7cb      	b.n	8013c40 <forward_cast+0x1f94>
 8013ca8:	2000      	movs	r0, #0
 8013caa:	e7c9      	b.n	8013c40 <forward_cast+0x1f94>
 8013cac:	4555      	cmp	r5, sl
 8013cae:	f4be a865 	bcs.w	8011d7c <forward_cast+0xd0>
 8013cb2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8013d6c <forward_cast+0x20c0>
 8013cb6:	4f2f      	ldr	r7, [pc, #188]	; (8013d74 <forward_cast+0x20c8>)
 8013cb8:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8013d84 <forward_cast+0x20d8>
 8013cbc:	4b2e      	ldr	r3, [pc, #184]	; (8013d78 <forward_cast+0x20cc>)
 8013cbe:	4a29      	ldr	r2, [pc, #164]	; (8013d64 <forward_cast+0x20b8>)
 8013cc0:	e017      	b.n	8013cf2 <forward_cast+0x2046>
 8013cc2:	429c      	cmp	r4, r3
 8013cc4:	f001 8126 	beq.w	8014f14 <forward_cast+0x3268>
 8013cc8:	dd26      	ble.n	8013d18 <forward_cast+0x206c>
 8013cca:	4294      	cmp	r4, r2
 8013ccc:	f001 8625 	beq.w	801591a <forward_cast+0x3c6e>
 8013cd0:	492a      	ldr	r1, [pc, #168]	; (8013d7c <forward_cast+0x20d0>)
 8013cd2:	428c      	cmp	r4, r1
 8013cd4:	d139      	bne.n	8013d4a <forward_cast+0x209e>
 8013cd6:	7828      	ldrb	r0, [r5, #0]
 8013cd8:	3800      	subs	r0, #0
 8013cda:	bf18      	it	ne
 8013cdc:	2001      	movne	r0, #1
 8013cde:	f380 0010 	usat	r0, #16, r0
 8013ce2:	9900      	ldr	r1, [sp, #0]
 8013ce4:	444d      	add	r5, r9
 8013ce6:	b280      	uxth	r0, r0
 8013ce8:	45aa      	cmp	sl, r5
 8013cea:	6030      	str	r0, [r6, #0]
 8013cec:	440e      	add	r6, r1
 8013cee:	f67e a845 	bls.w	8011d7c <forward_cast+0xd0>
 8013cf2:	491d      	ldr	r1, [pc, #116]	; (8013d68 <forward_cast+0x20bc>)
 8013cf4:	428c      	cmp	r4, r1
 8013cf6:	f001 8622 	beq.w	801593e <forward_cast+0x3c92>
 8013cfa:	dde2      	ble.n	8013cc2 <forward_cast+0x2016>
 8013cfc:	4920      	ldr	r1, [pc, #128]	; (8013d80 <forward_cast+0x20d4>)
 8013cfe:	428c      	cmp	r4, r1
 8013d00:	f001 85fa 	beq.w	80158f8 <forward_cast+0x3c4c>
 8013d04:	dd13      	ble.n	8013d2e <forward_cast+0x2082>
 8013d06:	4544      	cmp	r4, r8
 8013d08:	d11f      	bne.n	8013d4a <forward_cast+0x209e>
 8013d0a:	edd5 7a00 	vldr	s15, [r5]
 8013d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d12:	ee17 0a90 	vmov	r0, s15
 8013d16:	e7e2      	b.n	8013cde <forward_cast+0x2032>
 8013d18:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013d1c:	428c      	cmp	r4, r1
 8013d1e:	f001 85f9 	beq.w	8015914 <forward_cast+0x3c68>
 8013d22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013d26:	428c      	cmp	r4, r1
 8013d28:	d10f      	bne.n	8013d4a <forward_cast+0x209e>
 8013d2a:	8828      	ldrh	r0, [r5, #0]
 8013d2c:	e7d7      	b.n	8013cde <forward_cast+0x2032>
 8013d2e:	42bc      	cmp	r4, r7
 8013d30:	f001 8601 	beq.w	8015936 <forward_cast+0x3c8a>
 8013d34:	455c      	cmp	r4, fp
 8013d36:	d108      	bne.n	8013d4a <forward_cast+0x209e>
 8013d38:	edd5 7a00 	vldr	s15, [r5]
 8013d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d44:	ee17 0a90 	vmov	r0, s15
 8013d48:	e7c9      	b.n	8013cde <forward_cast+0x2032>
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	e7c7      	b.n	8013cde <forward_cast+0x2032>
 8013d4e:	4555      	cmp	r5, sl
 8013d50:	f4be a814 	bcs.w	8011d7c <forward_cast+0xd0>
 8013d54:	2300      	movs	r3, #0
 8013d56:	4619      	mov	r1, r3
 8013d58:	4a0a      	ldr	r2, [pc, #40]	; (8013d84 <forward_cast+0x20d8>)
 8013d5a:	464b      	mov	r3, r9
 8013d5c:	46b9      	mov	r9, r7
 8013d5e:	4637      	mov	r7, r6
 8013d60:	460e      	mov	r6, r1
 8013d62:	e02a      	b.n	8013dba <forward_cast+0x210e>
 8013d64:	00042040 	.word	0x00042040
 8013d68:	00840440 	.word	0x00840440
 8013d6c:	01821040 	.word	0x01821040
 8013d70:	00040840 	.word	0x00040840
 8013d74:	00840840 	.word	0x00840840
 8013d78:	00041040 	.word	0x00041040
 8013d7c:	00060440 	.word	0x00060440
 8013d80:	00842040 	.word	0x00842040
 8013d84:	00841040 	.word	0x00841040
 8013d88:	4544      	cmp	r4, r8
 8013d8a:	f001 80e2 	beq.w	8014f52 <forward_cast+0x32a6>
 8013d8e:	dd27      	ble.n	8013de0 <forward_cast+0x2134>
 8013d90:	49a5      	ldr	r1, [pc, #660]	; (8014028 <forward_cast+0x237c>)
 8013d92:	428c      	cmp	r4, r1
 8013d94:	f001 8606 	beq.w	80159a4 <forward_cast+0x3cf8>
 8013d98:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8013d9c:	428c      	cmp	r4, r1
 8013d9e:	d137      	bne.n	8013e10 <forward_cast+0x2164>
 8013da0:	7828      	ldrb	r0, [r5, #0]
 8013da2:	3800      	subs	r0, #0
 8013da4:	bf18      	it	ne
 8013da6:	2001      	movne	r0, #1
 8013da8:	f300 0007 	ssat	r0, #8, r0
 8013dac:	9900      	ldr	r1, [sp, #0]
 8013dae:	55b8      	strb	r0, [r7, r6]
 8013db0:	441d      	add	r5, r3
 8013db2:	45aa      	cmp	sl, r5
 8013db4:	440e      	add	r6, r1
 8013db6:	f67d afe1 	bls.w	8011d7c <forward_cast+0xd0>
 8013dba:	454c      	cmp	r4, r9
 8013dbc:	f001 80c5 	beq.w	8014f4a <forward_cast+0x329e>
 8013dc0:	dde2      	ble.n	8013d88 <forward_cast+0x20dc>
 8013dc2:	499a      	ldr	r1, [pc, #616]	; (801402c <forward_cast+0x2380>)
 8013dc4:	428c      	cmp	r4, r1
 8013dc6:	f001 85db 	beq.w	8015980 <forward_cast+0x3cd4>
 8013dca:	dd11      	ble.n	8013df0 <forward_cast+0x2144>
 8013dcc:	4998      	ldr	r1, [pc, #608]	; (8014030 <forward_cast+0x2384>)
 8013dce:	428c      	cmp	r4, r1
 8013dd0:	d11e      	bne.n	8013e10 <forward_cast+0x2164>
 8013dd2:	edd5 7a00 	vldr	s15, [r5]
 8013dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013dda:	ee17 0a90 	vmov	r0, s15
 8013dde:	e7e3      	b.n	8013da8 <forward_cast+0x20fc>
 8013de0:	455c      	cmp	r4, fp
 8013de2:	f001 85dc 	beq.w	801599e <forward_cast+0x3cf2>
 8013de6:	4993      	ldr	r1, [pc, #588]	; (8014034 <forward_cast+0x2388>)
 8013de8:	428c      	cmp	r4, r1
 8013dea:	d111      	bne.n	8013e10 <forward_cast+0x2164>
 8013dec:	8828      	ldrh	r0, [r5, #0]
 8013dee:	e7db      	b.n	8013da8 <forward_cast+0x20fc>
 8013df0:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8013df4:	428c      	cmp	r4, r1
 8013df6:	f001 85e4 	beq.w	80159c2 <forward_cast+0x3d16>
 8013dfa:	4294      	cmp	r4, r2
 8013dfc:	d108      	bne.n	8013e10 <forward_cast+0x2164>
 8013dfe:	edd5 7a00 	vldr	s15, [r5]
 8013e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e0a:	ee17 0a90 	vmov	r0, s15
 8013e0e:	e7cb      	b.n	8013da8 <forward_cast+0x20fc>
 8013e10:	2000      	movs	r0, #0
 8013e12:	e7c9      	b.n	8013da8 <forward_cast+0x20fc>
 8013e14:	4555      	cmp	r5, sl
 8013e16:	bf38      	it	cc
 8013e18:	461f      	movcc	r7, r3
 8013e1a:	f4bd afaf 	bcs.w	8011d7c <forward_cast+0xd0>
 8013e1e:	4621      	mov	r1, r4
 8013e20:	4628      	mov	r0, r5
 8013e22:	f7fd fecd 	bl	8011bc0 <_array_handle_get_as_float>
 8013e26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013e2a:	ee17 3a90 	vmov	r3, s15
 8013e2e:	f303 0307 	ssat	r3, #8, r3
 8013e32:	444d      	add	r5, r9
 8013e34:	b25b      	sxtb	r3, r3
 8013e36:	45aa      	cmp	sl, r5
 8013e38:	6033      	str	r3, [r6, #0]
 8013e3a:	443e      	add	r6, r7
 8013e3c:	d8ef      	bhi.n	8013e1e <forward_cast+0x2172>
 8013e3e:	f7fd bf9d 	b.w	8011d7c <forward_cast+0xd0>
 8013e42:	4555      	cmp	r5, sl
 8013e44:	f4bd af9a 	bcs.w	8011d7c <forward_cast+0xd0>
 8013e48:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8014030 <forward_cast+0x2384>
 8013e4c:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801404c <forward_cast+0x23a0>
 8013e50:	4b79      	ldr	r3, [pc, #484]	; (8014038 <forward_cast+0x238c>)
 8013e52:	4a7a      	ldr	r2, [pc, #488]	; (801403c <forward_cast+0x2390>)
 8013e54:	2700      	movs	r7, #0
 8013e56:	e016      	b.n	8013e86 <forward_cast+0x21da>
 8013e58:	4294      	cmp	r4, r2
 8013e5a:	f000 87fe 	beq.w	8014e5a <forward_cast+0x31ae>
 8013e5e:	dd26      	ble.n	8013eae <forward_cast+0x2202>
 8013e60:	4971      	ldr	r1, [pc, #452]	; (8014028 <forward_cast+0x237c>)
 8013e62:	428c      	cmp	r4, r1
 8013e64:	f001 8046 	beq.w	8014ef4 <forward_cast+0x3248>
 8013e68:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8013e6c:	428c      	cmp	r4, r1
 8013e6e:	d137      	bne.n	8013ee0 <forward_cast+0x2234>
 8013e70:	7829      	ldrb	r1, [r5, #0]
 8013e72:	3900      	subs	r1, #0
 8013e74:	bf18      	it	ne
 8013e76:	2101      	movne	r1, #1
 8013e78:	55f1      	strb	r1, [r6, r7]
 8013e7a:	444d      	add	r5, r9
 8013e7c:	9900      	ldr	r1, [sp, #0]
 8013e7e:	45aa      	cmp	sl, r5
 8013e80:	440f      	add	r7, r1
 8013e82:	f67d af7b 	bls.w	8011d7c <forward_cast+0xd0>
 8013e86:	496e      	ldr	r1, [pc, #440]	; (8014040 <forward_cast+0x2394>)
 8013e88:	428c      	cmp	r4, r1
 8013e8a:	d018      	beq.n	8013ebe <forward_cast+0x2212>
 8013e8c:	dde4      	ble.n	8013e58 <forward_cast+0x21ac>
 8013e8e:	4967      	ldr	r1, [pc, #412]	; (801402c <forward_cast+0x2380>)
 8013e90:	428c      	cmp	r4, r1
 8013e92:	f000 87ee 	beq.w	8014e72 <forward_cast+0x31c6>
 8013e96:	dd14      	ble.n	8013ec2 <forward_cast+0x2216>
 8013e98:	4544      	cmp	r4, r8
 8013e9a:	d121      	bne.n	8013ee0 <forward_cast+0x2234>
 8013e9c:	edd5 7a00 	vldr	s15, [r5]
 8013ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ea4:	edcd 7a01 	vstr	s15, [sp, #4]
 8013ea8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013eac:	e7e4      	b.n	8013e78 <forward_cast+0x21cc>
 8013eae:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013eb2:	428c      	cmp	r4, r1
 8013eb4:	d003      	beq.n	8013ebe <forward_cast+0x2212>
 8013eb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013eba:	428c      	cmp	r4, r1
 8013ebc:	d110      	bne.n	8013ee0 <forward_cast+0x2234>
 8013ebe:	7829      	ldrb	r1, [r5, #0]
 8013ec0:	e7da      	b.n	8013e78 <forward_cast+0x21cc>
 8013ec2:	455c      	cmp	r4, fp
 8013ec4:	d0fb      	beq.n	8013ebe <forward_cast+0x2212>
 8013ec6:	429c      	cmp	r4, r3
 8013ec8:	d10a      	bne.n	8013ee0 <forward_cast+0x2234>
 8013eca:	edd5 7a00 	vldr	s15, [r5]
 8013ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ed6:	edcd 7a01 	vstr	s15, [sp, #4]
 8013eda:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013ede:	e7cb      	b.n	8013e78 <forward_cast+0x21cc>
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	e7c9      	b.n	8013e78 <forward_cast+0x21cc>
 8013ee4:	4555      	cmp	r5, sl
 8013ee6:	f4bd af49 	bcs.w	8011d7c <forward_cast+0xd0>
 8013eea:	4f51      	ldr	r7, [pc, #324]	; (8014030 <forward_cast+0x2384>)
 8013eec:	4b4e      	ldr	r3, [pc, #312]	; (8014028 <forward_cast+0x237c>)
 8013eee:	4a55      	ldr	r2, [pc, #340]	; (8014044 <forward_cast+0x2398>)
 8013ef0:	e013      	b.n	8013f1a <forward_cast+0x226e>
 8013ef2:	455c      	cmp	r4, fp
 8013ef4:	f000 87d1 	beq.w	8014e9a <forward_cast+0x31ee>
 8013ef8:	dd21      	ble.n	8013f3e <forward_cast+0x2292>
 8013efa:	429c      	cmp	r4, r3
 8013efc:	f000 87e8 	beq.w	8014ed0 <forward_cast+0x3224>
 8013f00:	4294      	cmp	r4, r2
 8013f02:	d138      	bne.n	8013f76 <forward_cast+0x22ca>
 8013f04:	7828      	ldrb	r0, [r5, #0]
 8013f06:	3800      	subs	r0, #0
 8013f08:	bf18      	it	ne
 8013f0a:	2001      	movne	r0, #1
 8013f0c:	9900      	ldr	r1, [sp, #0]
 8013f0e:	6030      	str	r0, [r6, #0]
 8013f10:	444d      	add	r5, r9
 8013f12:	45aa      	cmp	sl, r5
 8013f14:	440e      	add	r6, r1
 8013f16:	f67d af31 	bls.w	8011d7c <forward_cast+0xd0>
 8013f1a:	4544      	cmp	r4, r8
 8013f1c:	f000 87b9 	beq.w	8014e92 <forward_cast+0x31e6>
 8013f20:	dde7      	ble.n	8013ef2 <forward_cast+0x2246>
 8013f22:	4942      	ldr	r1, [pc, #264]	; (801402c <forward_cast+0x2380>)
 8013f24:	428c      	cmp	r4, r1
 8013f26:	f000 87c2 	beq.w	8014eae <forward_cast+0x3202>
 8013f2a:	dd12      	ble.n	8013f52 <forward_cast+0x22a6>
 8013f2c:	42bc      	cmp	r4, r7
 8013f2e:	d122      	bne.n	8013f76 <forward_cast+0x22ca>
 8013f30:	edd5 7a00 	vldr	s15, [r5]
 8013f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f38:	ee17 0a90 	vmov	r0, s15
 8013f3c:	e7e6      	b.n	8013f0c <forward_cast+0x2260>
 8013f3e:	4942      	ldr	r1, [pc, #264]	; (8014048 <forward_cast+0x239c>)
 8013f40:	428c      	cmp	r4, r1
 8013f42:	f000 87c2 	beq.w	8014eca <forward_cast+0x321e>
 8013f46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013f4a:	428c      	cmp	r4, r1
 8013f4c:	d113      	bne.n	8013f76 <forward_cast+0x22ca>
 8013f4e:	8828      	ldrh	r0, [r5, #0]
 8013f50:	e7dc      	b.n	8013f0c <forward_cast+0x2260>
 8013f52:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8013f56:	428c      	cmp	r4, r1
 8013f58:	f000 87c8 	beq.w	8014eec <forward_cast+0x3240>
 8013f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f60:	428c      	cmp	r4, r1
 8013f62:	d108      	bne.n	8013f76 <forward_cast+0x22ca>
 8013f64:	edd5 7a00 	vldr	s15, [r5]
 8013f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f70:	ee17 0a90 	vmov	r0, s15
 8013f74:	e7ca      	b.n	8013f0c <forward_cast+0x2260>
 8013f76:	2000      	movs	r0, #0
 8013f78:	e7c8      	b.n	8013f0c <forward_cast+0x2260>
 8013f7a:	4555      	cmp	r5, sl
 8013f7c:	f4bd aefe 	bcs.w	8011d7c <forward_cast+0xd0>
 8013f80:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8014030 <forward_cast+0x2384>
 8013f84:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801404c <forward_cast+0x23a0>
 8013f88:	4b2b      	ldr	r3, [pc, #172]	; (8014038 <forward_cast+0x238c>)
 8013f8a:	4a2c      	ldr	r2, [pc, #176]	; (801403c <forward_cast+0x2390>)
 8013f8c:	2700      	movs	r7, #0
 8013f8e:	e016      	b.n	8013fbe <forward_cast+0x2312>
 8013f90:	4294      	cmp	r4, r2
 8013f92:	f000 8636 	beq.w	8014c02 <forward_cast+0x2f56>
 8013f96:	dd26      	ble.n	8013fe6 <forward_cast+0x233a>
 8013f98:	4923      	ldr	r1, [pc, #140]	; (8014028 <forward_cast+0x237c>)
 8013f9a:	428c      	cmp	r4, r1
 8013f9c:	f001 8525 	beq.w	80159ea <forward_cast+0x3d3e>
 8013fa0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8013fa4:	428c      	cmp	r4, r1
 8013fa6:	d137      	bne.n	8014018 <forward_cast+0x236c>
 8013fa8:	7829      	ldrb	r1, [r5, #0]
 8013faa:	3900      	subs	r1, #0
 8013fac:	bf18      	it	ne
 8013fae:	2101      	movne	r1, #1
 8013fb0:	55f1      	strb	r1, [r6, r7]
 8013fb2:	444d      	add	r5, r9
 8013fb4:	9900      	ldr	r1, [sp, #0]
 8013fb6:	45aa      	cmp	sl, r5
 8013fb8:	440f      	add	r7, r1
 8013fba:	f67d aedf 	bls.w	8011d7c <forward_cast+0xd0>
 8013fbe:	4920      	ldr	r1, [pc, #128]	; (8014040 <forward_cast+0x2394>)
 8013fc0:	428c      	cmp	r4, r1
 8013fc2:	d018      	beq.n	8013ff6 <forward_cast+0x234a>
 8013fc4:	dde4      	ble.n	8013f90 <forward_cast+0x22e4>
 8013fc6:	4919      	ldr	r1, [pc, #100]	; (801402c <forward_cast+0x2380>)
 8013fc8:	428c      	cmp	r4, r1
 8013fca:	f001 84fe 	beq.w	80159ca <forward_cast+0x3d1e>
 8013fce:	dd14      	ble.n	8013ffa <forward_cast+0x234e>
 8013fd0:	4544      	cmp	r4, r8
 8013fd2:	d121      	bne.n	8014018 <forward_cast+0x236c>
 8013fd4:	edd5 7a00 	vldr	s15, [r5]
 8013fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013fdc:	edcd 7a01 	vstr	s15, [sp, #4]
 8013fe0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013fe4:	e7e4      	b.n	8013fb0 <forward_cast+0x2304>
 8013fe6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013fea:	428c      	cmp	r4, r1
 8013fec:	d003      	beq.n	8013ff6 <forward_cast+0x234a>
 8013fee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013ff2:	428c      	cmp	r4, r1
 8013ff4:	d110      	bne.n	8014018 <forward_cast+0x236c>
 8013ff6:	7829      	ldrb	r1, [r5, #0]
 8013ff8:	e7da      	b.n	8013fb0 <forward_cast+0x2304>
 8013ffa:	455c      	cmp	r4, fp
 8013ffc:	d0fb      	beq.n	8013ff6 <forward_cast+0x234a>
 8013ffe:	429c      	cmp	r4, r3
 8014000:	d10a      	bne.n	8014018 <forward_cast+0x236c>
 8014002:	edd5 7a00 	vldr	s15, [r5]
 8014006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801400a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801400e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014012:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014016:	e7cb      	b.n	8013fb0 <forward_cast+0x2304>
 8014018:	2100      	movs	r1, #0
 801401a:	e7c9      	b.n	8013fb0 <forward_cast+0x2304>
 801401c:	4555      	cmp	r5, sl
 801401e:	f4bd aead 	bcs.w	8011d7c <forward_cast+0xd0>
 8014022:	4b01      	ldr	r3, [pc, #4]	; (8014028 <forward_cast+0x237c>)
 8014024:	4a07      	ldr	r2, [pc, #28]	; (8014044 <forward_cast+0x2398>)
 8014026:	e027      	b.n	8014078 <forward_cast+0x23cc>
 8014028:	00042040 	.word	0x00042040
 801402c:	00842040 	.word	0x00842040
 8014030:	01821040 	.word	0x01821040
 8014034:	00040840 	.word	0x00040840
 8014038:	00841040 	.word	0x00841040
 801403c:	00041040 	.word	0x00041040
 8014040:	00840440 	.word	0x00840440
 8014044:	00060440 	.word	0x00060440
 8014048:	00040440 	.word	0x00040440
 801404c:	00840840 	.word	0x00840840
 8014050:	455c      	cmp	r4, fp
 8014052:	f000 8675 	beq.w	8014d40 <forward_cast+0x3094>
 8014056:	dd22      	ble.n	801409e <forward_cast+0x23f2>
 8014058:	429c      	cmp	r4, r3
 801405a:	f001 8522 	beq.w	8015aa2 <forward_cast+0x3df6>
 801405e:	4294      	cmp	r4, r2
 8014060:	d137      	bne.n	80140d2 <forward_cast+0x2426>
 8014062:	7828      	ldrb	r0, [r5, #0]
 8014064:	3800      	subs	r0, #0
 8014066:	bf18      	it	ne
 8014068:	2001      	movne	r0, #1
 801406a:	9900      	ldr	r1, [sp, #0]
 801406c:	6030      	str	r0, [r6, #0]
 801406e:	444d      	add	r5, r9
 8014070:	45aa      	cmp	sl, r5
 8014072:	440e      	add	r6, r1
 8014074:	f67d ae82 	bls.w	8011d7c <forward_cast+0xd0>
 8014078:	4544      	cmp	r4, r8
 801407a:	f000 85be 	beq.w	8014bfa <forward_cast+0x2f4e>
 801407e:	dde7      	ble.n	8014050 <forward_cast+0x23a4>
 8014080:	499a      	ldr	r1, [pc, #616]	; (80142ec <forward_cast+0x2640>)
 8014082:	428c      	cmp	r4, r1
 8014084:	f001 84fc 	beq.w	8015a80 <forward_cast+0x3dd4>
 8014088:	dd13      	ble.n	80140b2 <forward_cast+0x2406>
 801408a:	4999      	ldr	r1, [pc, #612]	; (80142f0 <forward_cast+0x2644>)
 801408c:	428c      	cmp	r4, r1
 801408e:	d120      	bne.n	80140d2 <forward_cast+0x2426>
 8014090:	edd5 7a00 	vldr	s15, [r5]
 8014094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014098:	ee17 0a90 	vmov	r0, s15
 801409c:	e7e5      	b.n	801406a <forward_cast+0x23be>
 801409e:	4995      	ldr	r1, [pc, #596]	; (80142f4 <forward_cast+0x2648>)
 80140a0:	428c      	cmp	r4, r1
 80140a2:	f001 84fb 	beq.w	8015a9c <forward_cast+0x3df0>
 80140a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80140aa:	428c      	cmp	r4, r1
 80140ac:	d111      	bne.n	80140d2 <forward_cast+0x2426>
 80140ae:	8828      	ldrh	r0, [r5, #0]
 80140b0:	e7db      	b.n	801406a <forward_cast+0x23be>
 80140b2:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80140b6:	428c      	cmp	r4, r1
 80140b8:	f001 8501 	beq.w	8015abe <forward_cast+0x3e12>
 80140bc:	42bc      	cmp	r4, r7
 80140be:	d108      	bne.n	80140d2 <forward_cast+0x2426>
 80140c0:	edd5 7a00 	vldr	s15, [r5]
 80140c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140cc:	ee17 0a90 	vmov	r0, s15
 80140d0:	e7cb      	b.n	801406a <forward_cast+0x23be>
 80140d2:	2000      	movs	r0, #0
 80140d4:	e7c9      	b.n	801406a <forward_cast+0x23be>
 80140d6:	4555      	cmp	r5, sl
 80140d8:	f4bd ae50 	bcs.w	8011d7c <forward_cast+0xd0>
 80140dc:	4b86      	ldr	r3, [pc, #536]	; (80142f8 <forward_cast+0x264c>)
 80140de:	4a87      	ldr	r2, [pc, #540]	; (80142fc <forward_cast+0x2650>)
 80140e0:	e013      	b.n	801410a <forward_cast+0x245e>
 80140e2:	42bc      	cmp	r4, r7
 80140e4:	f000 859d 	beq.w	8014c22 <forward_cast+0x2f76>
 80140e8:	dd22      	ble.n	8014130 <forward_cast+0x2484>
 80140ea:	429c      	cmp	r4, r3
 80140ec:	f001 84fc 	beq.w	8015ae8 <forward_cast+0x3e3c>
 80140f0:	4294      	cmp	r4, r2
 80140f2:	d137      	bne.n	8014164 <forward_cast+0x24b8>
 80140f4:	7828      	ldrb	r0, [r5, #0]
 80140f6:	3800      	subs	r0, #0
 80140f8:	bf18      	it	ne
 80140fa:	2001      	movne	r0, #1
 80140fc:	9900      	ldr	r1, [sp, #0]
 80140fe:	6030      	str	r0, [r6, #0]
 8014100:	444d      	add	r5, r9
 8014102:	45aa      	cmp	sl, r5
 8014104:	440e      	add	r6, r1
 8014106:	f67d ae39 	bls.w	8011d7c <forward_cast+0xd0>
 801410a:	4544      	cmp	r4, r8
 801410c:	f000 8585 	beq.w	8014c1a <forward_cast+0x2f6e>
 8014110:	dde7      	ble.n	80140e2 <forward_cast+0x2436>
 8014112:	4976      	ldr	r1, [pc, #472]	; (80142ec <forward_cast+0x2640>)
 8014114:	428c      	cmp	r4, r1
 8014116:	f001 84d6 	beq.w	8015ac6 <forward_cast+0x3e1a>
 801411a:	dd13      	ble.n	8014144 <forward_cast+0x2498>
 801411c:	4974      	ldr	r1, [pc, #464]	; (80142f0 <forward_cast+0x2644>)
 801411e:	428c      	cmp	r4, r1
 8014120:	d120      	bne.n	8014164 <forward_cast+0x24b8>
 8014122:	edd5 7a00 	vldr	s15, [r5]
 8014126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801412a:	ee17 0a90 	vmov	r0, s15
 801412e:	e7e5      	b.n	80140fc <forward_cast+0x2450>
 8014130:	4970      	ldr	r1, [pc, #448]	; (80142f4 <forward_cast+0x2648>)
 8014132:	428c      	cmp	r4, r1
 8014134:	f001 84d5 	beq.w	8015ae2 <forward_cast+0x3e36>
 8014138:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801413c:	428c      	cmp	r4, r1
 801413e:	d111      	bne.n	8014164 <forward_cast+0x24b8>
 8014140:	8828      	ldrh	r0, [r5, #0]
 8014142:	e7db      	b.n	80140fc <forward_cast+0x2450>
 8014144:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8014148:	428c      	cmp	r4, r1
 801414a:	f001 84db 	beq.w	8015b04 <forward_cast+0x3e58>
 801414e:	455c      	cmp	r4, fp
 8014150:	d108      	bne.n	8014164 <forward_cast+0x24b8>
 8014152:	edd5 7a00 	vldr	s15, [r5]
 8014156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801415a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801415e:	ee17 0a90 	vmov	r0, s15
 8014162:	e7cb      	b.n	80140fc <forward_cast+0x2450>
 8014164:	2000      	movs	r0, #0
 8014166:	e7c9      	b.n	80140fc <forward_cast+0x2450>
 8014168:	4555      	cmp	r5, sl
 801416a:	f4bd ae07 	bcs.w	8011d7c <forward_cast+0xd0>
 801416e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80142f0 <forward_cast+0x2644>
 8014172:	4b61      	ldr	r3, [pc, #388]	; (80142f8 <forward_cast+0x264c>)
 8014174:	4a61      	ldr	r2, [pc, #388]	; (80142fc <forward_cast+0x2650>)
 8014176:	e017      	b.n	80141a8 <forward_cast+0x24fc>
 8014178:	4961      	ldr	r1, [pc, #388]	; (8014300 <forward_cast+0x2654>)
 801417a:	428c      	cmp	r4, r1
 801417c:	f000 850d 	beq.w	8014b9a <forward_cast+0x2eee>
 8014180:	dd24      	ble.n	80141cc <forward_cast+0x2520>
 8014182:	429c      	cmp	r4, r3
 8014184:	f000 84f7 	beq.w	8014b76 <forward_cast+0x2eca>
 8014188:	4294      	cmp	r4, r2
 801418a:	d13a      	bne.n	8014202 <forward_cast+0x2556>
 801418c:	7828      	ldrb	r0, [r5, #0]
 801418e:	3800      	subs	r0, #0
 8014190:	bf18      	it	ne
 8014192:	2001      	movne	r0, #1
 8014194:	f300 0007 	ssat	r0, #8, r0
 8014198:	9900      	ldr	r1, [sp, #0]
 801419a:	444d      	add	r5, r9
 801419c:	b240      	sxtb	r0, r0
 801419e:	45aa      	cmp	sl, r5
 80141a0:	6030      	str	r0, [r6, #0]
 80141a2:	440e      	add	r6, r1
 80141a4:	f67d adea 	bls.w	8011d7c <forward_cast+0xd0>
 80141a8:	42bc      	cmp	r4, r7
 80141aa:	f000 84c0 	beq.w	8014b2e <forward_cast+0x2e82>
 80141ae:	dde3      	ble.n	8014178 <forward_cast+0x24cc>
 80141b0:	494e      	ldr	r1, [pc, #312]	; (80142ec <forward_cast+0x2640>)
 80141b2:	428c      	cmp	r4, r1
 80141b4:	f000 84ce 	beq.w	8014b54 <forward_cast+0x2ea8>
 80141b8:	dd13      	ble.n	80141e2 <forward_cast+0x2536>
 80141ba:	4544      	cmp	r4, r8
 80141bc:	d121      	bne.n	8014202 <forward_cast+0x2556>
 80141be:	edd5 7a00 	vldr	s15, [r5]
 80141c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141c6:	ee17 0a90 	vmov	r0, s15
 80141ca:	e7e3      	b.n	8014194 <forward_cast+0x24e8>
 80141cc:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 80141d0:	428c      	cmp	r4, r1
 80141d2:	f000 84cd 	beq.w	8014b70 <forward_cast+0x2ec4>
 80141d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80141da:	428c      	cmp	r4, r1
 80141dc:	d111      	bne.n	8014202 <forward_cast+0x2556>
 80141de:	8828      	ldrh	r0, [r5, #0]
 80141e0:	e7d8      	b.n	8014194 <forward_cast+0x24e8>
 80141e2:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80141e6:	428c      	cmp	r4, r1
 80141e8:	f000 84d3 	beq.w	8014b92 <forward_cast+0x2ee6>
 80141ec:	455c      	cmp	r4, fp
 80141ee:	d108      	bne.n	8014202 <forward_cast+0x2556>
 80141f0:	edd5 7a00 	vldr	s15, [r5]
 80141f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141fc:	ee17 0a90 	vmov	r0, s15
 8014200:	e7c8      	b.n	8014194 <forward_cast+0x24e8>
 8014202:	2000      	movs	r0, #0
 8014204:	e7c6      	b.n	8014194 <forward_cast+0x24e8>
 8014206:	4555      	cmp	r5, sl
 8014208:	f4bd adb8 	bcs.w	8011d7c <forward_cast+0xd0>
 801420c:	9f00      	ldr	r7, [sp, #0]
 801420e:	4628      	mov	r0, r5
 8014210:	4621      	mov	r1, r4
 8014212:	f7fd fcd5 	bl	8011bc0 <_array_handle_get_as_float>
 8014216:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421e:	444d      	add	r5, r9
 8014220:	bf14      	ite	ne
 8014222:	2301      	movne	r3, #1
 8014224:	2300      	moveq	r3, #0
 8014226:	45aa      	cmp	sl, r5
 8014228:	7033      	strb	r3, [r6, #0]
 801422a:	443e      	add	r6, r7
 801422c:	d8ef      	bhi.n	801420e <forward_cast+0x2562>
 801422e:	f7fd bda5 	b.w	8011d7c <forward_cast+0xd0>
 8014232:	4555      	cmp	r5, sl
 8014234:	f4bd ada2 	bcs.w	8011d7c <forward_cast+0xd0>
 8014238:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80142f0 <forward_cast+0x2644>
 801423c:	4f31      	ldr	r7, [pc, #196]	; (8014304 <forward_cast+0x2658>)
 801423e:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 801430c <forward_cast+0x2660>
 8014242:	4b2f      	ldr	r3, [pc, #188]	; (8014300 <forward_cast+0x2654>)
 8014244:	4a2c      	ldr	r2, [pc, #176]	; (80142f8 <forward_cast+0x264c>)
 8014246:	e017      	b.n	8014278 <forward_cast+0x25cc>
 8014248:	429c      	cmp	r4, r3
 801424a:	f000 829d 	beq.w	8014788 <forward_cast+0x2adc>
 801424e:	dd26      	ble.n	801429e <forward_cast+0x25f2>
 8014250:	4294      	cmp	r4, r2
 8014252:	f000 82b9 	beq.w	80147c8 <forward_cast+0x2b1c>
 8014256:	4929      	ldr	r1, [pc, #164]	; (80142fc <forward_cast+0x2650>)
 8014258:	428c      	cmp	r4, r1
 801425a:	d139      	bne.n	80142d0 <forward_cast+0x2624>
 801425c:	7828      	ldrb	r0, [r5, #0]
 801425e:	3800      	subs	r0, #0
 8014260:	bf18      	it	ne
 8014262:	2001      	movne	r0, #1
 8014264:	f380 0008 	usat	r0, #8, r0
 8014268:	9900      	ldr	r1, [sp, #0]
 801426a:	444d      	add	r5, r9
 801426c:	b2c0      	uxtb	r0, r0
 801426e:	45aa      	cmp	sl, r5
 8014270:	6030      	str	r0, [r6, #0]
 8014272:	440e      	add	r6, r1
 8014274:	f67d ad82 	bls.w	8011d7c <forward_cast+0xd0>
 8014278:	4923      	ldr	r1, [pc, #140]	; (8014308 <forward_cast+0x265c>)
 801427a:	428c      	cmp	r4, r1
 801427c:	f000 82b4 	beq.w	80147e8 <forward_cast+0x2b3c>
 8014280:	dde2      	ble.n	8014248 <forward_cast+0x259c>
 8014282:	491a      	ldr	r1, [pc, #104]	; (80142ec <forward_cast+0x2640>)
 8014284:	428c      	cmp	r4, r1
 8014286:	f000 8290 	beq.w	80147aa <forward_cast+0x2afe>
 801428a:	dd13      	ble.n	80142b4 <forward_cast+0x2608>
 801428c:	4544      	cmp	r4, r8
 801428e:	d11f      	bne.n	80142d0 <forward_cast+0x2624>
 8014290:	edd5 7a00 	vldr	s15, [r5]
 8014294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014298:	ee17 0a90 	vmov	r0, s15
 801429c:	e7e2      	b.n	8014264 <forward_cast+0x25b8>
 801429e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80142a2:	428c      	cmp	r4, r1
 80142a4:	f000 828e 	beq.w	80147c4 <forward_cast+0x2b18>
 80142a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80142ac:	428c      	cmp	r4, r1
 80142ae:	d10f      	bne.n	80142d0 <forward_cast+0x2624>
 80142b0:	8828      	ldrh	r0, [r5, #0]
 80142b2:	e7d7      	b.n	8014264 <forward_cast+0x25b8>
 80142b4:	42bc      	cmp	r4, r7
 80142b6:	f000 8294 	beq.w	80147e2 <forward_cast+0x2b36>
 80142ba:	455c      	cmp	r4, fp
 80142bc:	d108      	bne.n	80142d0 <forward_cast+0x2624>
 80142be:	edd5 7a00 	vldr	s15, [r5]
 80142c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142ca:	ee17 0a90 	vmov	r0, s15
 80142ce:	e7c9      	b.n	8014264 <forward_cast+0x25b8>
 80142d0:	2000      	movs	r0, #0
 80142d2:	e7c7      	b.n	8014264 <forward_cast+0x25b8>
 80142d4:	4555      	cmp	r5, sl
 80142d6:	f4bd ad51 	bcs.w	8011d7c <forward_cast+0xd0>
 80142da:	f8df 8014 	ldr.w	r8, [pc, #20]	; 80142f0 <forward_cast+0x2644>
 80142de:	4f09      	ldr	r7, [pc, #36]	; (8014304 <forward_cast+0x2658>)
 80142e0:	f8df b028 	ldr.w	fp, [pc, #40]	; 801430c <forward_cast+0x2660>
 80142e4:	4b06      	ldr	r3, [pc, #24]	; (8014300 <forward_cast+0x2654>)
 80142e6:	4a04      	ldr	r2, [pc, #16]	; (80142f8 <forward_cast+0x264c>)
 80142e8:	e027      	b.n	801433a <forward_cast+0x268e>
 80142ea:	bf00      	nop
 80142ec:	00842040 	.word	0x00842040
 80142f0:	01821040 	.word	0x01821040
 80142f4:	00040440 	.word	0x00040440
 80142f8:	00042040 	.word	0x00042040
 80142fc:	00060440 	.word	0x00060440
 8014300:	00041040 	.word	0x00041040
 8014304:	00840840 	.word	0x00840840
 8014308:	00840440 	.word	0x00840440
 801430c:	00841040 	.word	0x00841040
 8014310:	429c      	cmp	r4, r3
 8014312:	f000 8298 	beq.w	8014846 <forward_cast+0x2b9a>
 8014316:	dd26      	ble.n	8014366 <forward_cast+0x26ba>
 8014318:	4294      	cmp	r4, r2
 801431a:	f000 82a0 	beq.w	801485e <forward_cast+0x2bb2>
 801431e:	499c      	ldr	r1, [pc, #624]	; (8014590 <forward_cast+0x28e4>)
 8014320:	428c      	cmp	r4, r1
 8014322:	d13e      	bne.n	80143a2 <forward_cast+0x26f6>
 8014324:	7829      	ldrb	r1, [r5, #0]
 8014326:	3900      	subs	r1, #0
 8014328:	bf18      	it	ne
 801432a:	2101      	movne	r1, #1
 801432c:	6031      	str	r1, [r6, #0]
 801432e:	444d      	add	r5, r9
 8014330:	9900      	ldr	r1, [sp, #0]
 8014332:	45aa      	cmp	sl, r5
 8014334:	440e      	add	r6, r1
 8014336:	f67d ad21 	bls.w	8011d7c <forward_cast+0xd0>
 801433a:	4996      	ldr	r1, [pc, #600]	; (8014594 <forward_cast+0x28e8>)
 801433c:	428c      	cmp	r4, r1
 801433e:	f000 827c 	beq.w	801483a <forward_cast+0x2b8e>
 8014342:	dde5      	ble.n	8014310 <forward_cast+0x2664>
 8014344:	4994      	ldr	r1, [pc, #592]	; (8014598 <forward_cast+0x28ec>)
 8014346:	428c      	cmp	r4, r1
 8014348:	f000 8206 	beq.w	8014758 <forward_cast+0x2aac>
 801434c:	dd18      	ble.n	8014380 <forward_cast+0x26d4>
 801434e:	4544      	cmp	r4, r8
 8014350:	d127      	bne.n	80143a2 <forward_cast+0x26f6>
 8014352:	edd5 7a00 	vldr	s15, [r5]
 8014356:	eef5 7a40 	vcmp.f32	s15, #0.0
 801435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435e:	bf14      	ite	ne
 8014360:	2101      	movne	r1, #1
 8014362:	2100      	moveq	r1, #0
 8014364:	e7e2      	b.n	801432c <forward_cast+0x2680>
 8014366:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801436a:	428c      	cmp	r4, r1
 801436c:	d0da      	beq.n	8014324 <forward_cast+0x2678>
 801436e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014372:	428c      	cmp	r4, r1
 8014374:	d115      	bne.n	80143a2 <forward_cast+0x26f6>
 8014376:	8829      	ldrh	r1, [r5, #0]
 8014378:	3900      	subs	r1, #0
 801437a:	bf18      	it	ne
 801437c:	2101      	movne	r1, #1
 801437e:	e7d5      	b.n	801432c <forward_cast+0x2680>
 8014380:	42bc      	cmp	r4, r7
 8014382:	f000 827c 	beq.w	801487e <forward_cast+0x2bd2>
 8014386:	455c      	cmp	r4, fp
 8014388:	d10b      	bne.n	80143a2 <forward_cast+0x26f6>
 801438a:	edd5 7a00 	vldr	s15, [r5]
 801438e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014392:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439a:	bf14      	ite	ne
 801439c:	2101      	movne	r1, #1
 801439e:	2100      	moveq	r1, #0
 80143a0:	e7c4      	b.n	801432c <forward_cast+0x2680>
 80143a2:	2100      	movs	r1, #0
 80143a4:	e7c2      	b.n	801432c <forward_cast+0x2680>
 80143a6:	4555      	cmp	r5, sl
 80143a8:	f4bd ace8 	bcs.w	8011d7c <forward_cast+0xd0>
 80143ac:	4b7b      	ldr	r3, [pc, #492]	; (801459c <forward_cast+0x28f0>)
 80143ae:	4a78      	ldr	r2, [pc, #480]	; (8014590 <forward_cast+0x28e4>)
 80143b0:	e014      	b.n	80143dc <forward_cast+0x2730>
 80143b2:	497b      	ldr	r1, [pc, #492]	; (80145a0 <forward_cast+0x28f4>)
 80143b4:	428c      	cmp	r4, r1
 80143b6:	f000 832d 	beq.w	8014a14 <forward_cast+0x2d68>
 80143ba:	dd21      	ble.n	8014400 <forward_cast+0x2754>
 80143bc:	429c      	cmp	r4, r3
 80143be:	f000 819c 	beq.w	80146fa <forward_cast+0x2a4e>
 80143c2:	4294      	cmp	r4, r2
 80143c4:	d137      	bne.n	8014436 <forward_cast+0x278a>
 80143c6:	7828      	ldrb	r0, [r5, #0]
 80143c8:	3800      	subs	r0, #0
 80143ca:	bf18      	it	ne
 80143cc:	2001      	movne	r0, #1
 80143ce:	9900      	ldr	r1, [sp, #0]
 80143d0:	6030      	str	r0, [r6, #0]
 80143d2:	444d      	add	r5, r9
 80143d4:	45aa      	cmp	sl, r5
 80143d6:	440e      	add	r6, r1
 80143d8:	f67d acd0 	bls.w	8011d7c <forward_cast+0xd0>
 80143dc:	4544      	cmp	r4, r8
 80143de:	f000 8316 	beq.w	8014a0e <forward_cast+0x2d62>
 80143e2:	dde6      	ble.n	80143b2 <forward_cast+0x2706>
 80143e4:	496c      	ldr	r1, [pc, #432]	; (8014598 <forward_cast+0x28ec>)
 80143e6:	428c      	cmp	r4, r1
 80143e8:	f000 8178 	beq.w	80146dc <forward_cast+0x2a30>
 80143ec:	dd13      	ble.n	8014416 <forward_cast+0x276a>
 80143ee:	42bc      	cmp	r4, r7
 80143f0:	d121      	bne.n	8014436 <forward_cast+0x278a>
 80143f2:	edd5 7a00 	vldr	s15, [r5]
 80143f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80143fa:	ee17 0a90 	vmov	r0, s15
 80143fe:	e7e6      	b.n	80143ce <forward_cast+0x2722>
 8014400:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8014404:	428c      	cmp	r4, r1
 8014406:	f000 8176 	beq.w	80146f6 <forward_cast+0x2a4a>
 801440a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801440e:	428c      	cmp	r4, r1
 8014410:	d111      	bne.n	8014436 <forward_cast+0x278a>
 8014412:	8828      	ldrh	r0, [r5, #0]
 8014414:	e7db      	b.n	80143ce <forward_cast+0x2722>
 8014416:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801441a:	428c      	cmp	r4, r1
 801441c:	f000 817a 	beq.w	8014714 <forward_cast+0x2a68>
 8014420:	455c      	cmp	r4, fp
 8014422:	d108      	bne.n	8014436 <forward_cast+0x278a>
 8014424:	edd5 7a00 	vldr	s15, [r5]
 8014428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801442c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014430:	ee17 0a90 	vmov	r0, s15
 8014434:	e7cb      	b.n	80143ce <forward_cast+0x2722>
 8014436:	2000      	movs	r0, #0
 8014438:	e7c9      	b.n	80143ce <forward_cast+0x2722>
 801443a:	4555      	cmp	r5, sl
 801443c:	f4bd ac9e 	bcs.w	8011d7c <forward_cast+0xd0>
 8014440:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80145ac <forward_cast+0x2900>
 8014444:	4f57      	ldr	r7, [pc, #348]	; (80145a4 <forward_cast+0x28f8>)
 8014446:	f8df b160 	ldr.w	fp, [pc, #352]	; 80145a8 <forward_cast+0x28fc>
 801444a:	4b55      	ldr	r3, [pc, #340]	; (80145a0 <forward_cast+0x28f4>)
 801444c:	4a53      	ldr	r2, [pc, #332]	; (801459c <forward_cast+0x28f0>)
 801444e:	e017      	b.n	8014480 <forward_cast+0x27d4>
 8014450:	429c      	cmp	r4, r3
 8014452:	f000 82cf 	beq.w	80149f4 <forward_cast+0x2d48>
 8014456:	dd26      	ble.n	80144a6 <forward_cast+0x27fa>
 8014458:	4294      	cmp	r4, r2
 801445a:	f000 816d 	beq.w	8014738 <forward_cast+0x2a8c>
 801445e:	494c      	ldr	r1, [pc, #304]	; (8014590 <forward_cast+0x28e4>)
 8014460:	428c      	cmp	r4, r1
 8014462:	d139      	bne.n	80144d8 <forward_cast+0x282c>
 8014464:	7828      	ldrb	r0, [r5, #0]
 8014466:	3800      	subs	r0, #0
 8014468:	bf18      	it	ne
 801446a:	2001      	movne	r0, #1
 801446c:	f300 000f 	ssat	r0, #16, r0
 8014470:	9900      	ldr	r1, [sp, #0]
 8014472:	444d      	add	r5, r9
 8014474:	b200      	sxth	r0, r0
 8014476:	45aa      	cmp	sl, r5
 8014478:	6030      	str	r0, [r6, #0]
 801447a:	440e      	add	r6, r1
 801447c:	f67d ac7e 	bls.w	8011d7c <forward_cast+0xd0>
 8014480:	4944      	ldr	r1, [pc, #272]	; (8014594 <forward_cast+0x28e8>)
 8014482:	428c      	cmp	r4, r1
 8014484:	f000 8101 	beq.w	801468a <forward_cast+0x29de>
 8014488:	dde2      	ble.n	8014450 <forward_cast+0x27a4>
 801448a:	4943      	ldr	r1, [pc, #268]	; (8014598 <forward_cast+0x28ec>)
 801448c:	428c      	cmp	r4, r1
 801448e:	f000 8144 	beq.w	801471a <forward_cast+0x2a6e>
 8014492:	dd13      	ble.n	80144bc <forward_cast+0x2810>
 8014494:	4544      	cmp	r4, r8
 8014496:	d11f      	bne.n	80144d8 <forward_cast+0x282c>
 8014498:	edd5 7a00 	vldr	s15, [r5]
 801449c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144a0:	ee17 0a90 	vmov	r0, s15
 80144a4:	e7e2      	b.n	801446c <forward_cast+0x27c0>
 80144a6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80144aa:	428c      	cmp	r4, r1
 80144ac:	f000 8142 	beq.w	8014734 <forward_cast+0x2a88>
 80144b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80144b4:	428c      	cmp	r4, r1
 80144b6:	d10f      	bne.n	80144d8 <forward_cast+0x282c>
 80144b8:	8828      	ldrh	r0, [r5, #0]
 80144ba:	e7d7      	b.n	801446c <forward_cast+0x27c0>
 80144bc:	42bc      	cmp	r4, r7
 80144be:	f000 8148 	beq.w	8014752 <forward_cast+0x2aa6>
 80144c2:	455c      	cmp	r4, fp
 80144c4:	d108      	bne.n	80144d8 <forward_cast+0x282c>
 80144c6:	edd5 7a00 	vldr	s15, [r5]
 80144ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144d2:	ee17 0a90 	vmov	r0, s15
 80144d6:	e7c9      	b.n	801446c <forward_cast+0x27c0>
 80144d8:	2000      	movs	r0, #0
 80144da:	e7c7      	b.n	801446c <forward_cast+0x27c0>
 80144dc:	4555      	cmp	r5, sl
 80144de:	f4bd ac4d 	bcs.w	8011d7c <forward_cast+0xd0>
 80144e2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80145ac <forward_cast+0x2900>
 80144e6:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80145a4 <forward_cast+0x28f8>
 80144ea:	4b2f      	ldr	r3, [pc, #188]	; (80145a8 <forward_cast+0x28fc>)
 80144ec:	4a2c      	ldr	r2, [pc, #176]	; (80145a0 <forward_cast+0x28f4>)
 80144ee:	2700      	movs	r7, #0
 80144f0:	e016      	b.n	8014520 <forward_cast+0x2874>
 80144f2:	4294      	cmp	r4, r2
 80144f4:	f000 80d8 	beq.w	80146a8 <forward_cast+0x29fc>
 80144f8:	dd26      	ble.n	8014548 <forward_cast+0x289c>
 80144fa:	4928      	ldr	r1, [pc, #160]	; (801459c <forward_cast+0x28f0>)
 80144fc:	428c      	cmp	r4, r1
 80144fe:	f000 81c4 	beq.w	801488a <forward_cast+0x2bde>
 8014502:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8014506:	428c      	cmp	r4, r1
 8014508:	d137      	bne.n	801457a <forward_cast+0x28ce>
 801450a:	7829      	ldrb	r1, [r5, #0]
 801450c:	3900      	subs	r1, #0
 801450e:	bf18      	it	ne
 8014510:	2101      	movne	r1, #1
 8014512:	55f1      	strb	r1, [r6, r7]
 8014514:	444d      	add	r5, r9
 8014516:	9900      	ldr	r1, [sp, #0]
 8014518:	45aa      	cmp	sl, r5
 801451a:	440f      	add	r7, r1
 801451c:	f67d ac2e 	bls.w	8011d7c <forward_cast+0xd0>
 8014520:	491c      	ldr	r1, [pc, #112]	; (8014594 <forward_cast+0x28e8>)
 8014522:	428c      	cmp	r4, r1
 8014524:	d018      	beq.n	8014558 <forward_cast+0x28ac>
 8014526:	dde4      	ble.n	80144f2 <forward_cast+0x2846>
 8014528:	491b      	ldr	r1, [pc, #108]	; (8014598 <forward_cast+0x28ec>)
 801452a:	428c      	cmp	r4, r1
 801452c:	f000 80c7 	beq.w	80146be <forward_cast+0x2a12>
 8014530:	dd14      	ble.n	801455c <forward_cast+0x28b0>
 8014532:	4544      	cmp	r4, r8
 8014534:	d121      	bne.n	801457a <forward_cast+0x28ce>
 8014536:	edd5 7a00 	vldr	s15, [r5]
 801453a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801453e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014542:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014546:	e7e4      	b.n	8014512 <forward_cast+0x2866>
 8014548:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801454c:	428c      	cmp	r4, r1
 801454e:	d003      	beq.n	8014558 <forward_cast+0x28ac>
 8014550:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014554:	428c      	cmp	r4, r1
 8014556:	d110      	bne.n	801457a <forward_cast+0x28ce>
 8014558:	7829      	ldrb	r1, [r5, #0]
 801455a:	e7da      	b.n	8014512 <forward_cast+0x2866>
 801455c:	455c      	cmp	r4, fp
 801455e:	d0fb      	beq.n	8014558 <forward_cast+0x28ac>
 8014560:	429c      	cmp	r4, r3
 8014562:	d10a      	bne.n	801457a <forward_cast+0x28ce>
 8014564:	edd5 7a00 	vldr	s15, [r5]
 8014568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801456c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014570:	edcd 7a01 	vstr	s15, [sp, #4]
 8014574:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014578:	e7cb      	b.n	8014512 <forward_cast+0x2866>
 801457a:	2100      	movs	r1, #0
 801457c:	e7c9      	b.n	8014512 <forward_cast+0x2866>
 801457e:	4555      	cmp	r5, sl
 8014580:	f4bd abfc 	bcs.w	8011d7c <forward_cast+0xd0>
 8014584:	4b06      	ldr	r3, [pc, #24]	; (80145a0 <forward_cast+0x28f4>)
 8014586:	4a05      	ldr	r2, [pc, #20]	; (801459c <forward_cast+0x28f0>)
 8014588:	f04f 0800 	mov.w	r8, #0
 801458c:	e024      	b.n	80145d8 <forward_cast+0x292c>
 801458e:	bf00      	nop
 8014590:	00060440 	.word	0x00060440
 8014594:	00840440 	.word	0x00840440
 8014598:	00842040 	.word	0x00842040
 801459c:	00042040 	.word	0x00042040
 80145a0:	00041040 	.word	0x00041040
 80145a4:	00840840 	.word	0x00840840
 80145a8:	00841040 	.word	0x00841040
 80145ac:	01821040 	.word	0x01821040
 80145b0:	429c      	cmp	r4, r3
 80145b2:	d050      	beq.n	8014656 <forward_cast+0x29aa>
 80145b4:	dd23      	ble.n	80145fe <forward_cast+0x2952>
 80145b6:	4294      	cmp	r4, r2
 80145b8:	d03e      	beq.n	8014638 <forward_cast+0x298c>
 80145ba:	49c7      	ldr	r1, [pc, #796]	; (80148d8 <forward_cast+0x2c2c>)
 80145bc:	428c      	cmp	r4, r1
 80145be:	d139      	bne.n	8014634 <forward_cast+0x2988>
 80145c0:	7829      	ldrb	r1, [r5, #0]
 80145c2:	3900      	subs	r1, #0
 80145c4:	bf18      	it	ne
 80145c6:	2101      	movne	r1, #1
 80145c8:	f806 1008 	strb.w	r1, [r6, r8]
 80145cc:	444d      	add	r5, r9
 80145ce:	9900      	ldr	r1, [sp, #0]
 80145d0:	45aa      	cmp	sl, r5
 80145d2:	4488      	add	r8, r1
 80145d4:	f67d abd2 	bls.w	8011d7c <forward_cast+0xd0>
 80145d8:	455c      	cmp	r4, fp
 80145da:	d017      	beq.n	801460c <forward_cast+0x2960>
 80145dc:	dde8      	ble.n	80145b0 <forward_cast+0x2904>
 80145de:	49bf      	ldr	r1, [pc, #764]	; (80148dc <forward_cast+0x2c30>)
 80145e0:	428c      	cmp	r4, r1
 80145e2:	d043      	beq.n	801466c <forward_cast+0x29c0>
 80145e4:	dd15      	ble.n	8014612 <forward_cast+0x2966>
 80145e6:	49be      	ldr	r1, [pc, #760]	; (80148e0 <forward_cast+0x2c34>)
 80145e8:	428c      	cmp	r4, r1
 80145ea:	d123      	bne.n	8014634 <forward_cast+0x2988>
 80145ec:	edd5 7a00 	vldr	s15, [r5]
 80145f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145f4:	edcd 7a01 	vstr	s15, [sp, #4]
 80145f8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80145fc:	e7e4      	b.n	80145c8 <forward_cast+0x291c>
 80145fe:	49b9      	ldr	r1, [pc, #740]	; (80148e4 <forward_cast+0x2c38>)
 8014600:	428c      	cmp	r4, r1
 8014602:	d003      	beq.n	801460c <forward_cast+0x2960>
 8014604:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014608:	428c      	cmp	r4, r1
 801460a:	d113      	bne.n	8014634 <forward_cast+0x2988>
 801460c:	f995 1000 	ldrsb.w	r1, [r5]
 8014610:	e7da      	b.n	80145c8 <forward_cast+0x291c>
 8014612:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8014616:	428c      	cmp	r4, r1
 8014618:	d0f8      	beq.n	801460c <forward_cast+0x2960>
 801461a:	42bc      	cmp	r4, r7
 801461c:	d10a      	bne.n	8014634 <forward_cast+0x2988>
 801461e:	edd5 7a00 	vldr	s15, [r5]
 8014622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801462a:	edcd 7a01 	vstr	s15, [sp, #4]
 801462e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8014632:	e7c9      	b.n	80145c8 <forward_cast+0x291c>
 8014634:	2100      	movs	r1, #0
 8014636:	e7c7      	b.n	80145c8 <forward_cast+0x291c>
 8014638:	e9d5 0100 	ldrd	r0, r1, [r5]
 801463c:	f7ec fbbc 	bl	8000db8 <__aeabi_ul2f>
 8014640:	ee07 0a90 	vmov	s15, r0
 8014644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014648:	4aa7      	ldr	r2, [pc, #668]	; (80148e8 <forward_cast+0x2c3c>)
 801464a:	edcd 7a01 	vstr	s15, [sp, #4]
 801464e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8014652:	4ba6      	ldr	r3, [pc, #664]	; (80148ec <forward_cast+0x2c40>)
 8014654:	e7b8      	b.n	80145c8 <forward_cast+0x291c>
 8014656:	edd5 7a00 	vldr	s15, [r5]
 801465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801465e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014662:	edcd 7a01 	vstr	s15, [sp, #4]
 8014666:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801466a:	e7ad      	b.n	80145c8 <forward_cast+0x291c>
 801466c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014670:	f7ec fbaa 	bl	8000dc8 <__aeabi_l2f>
 8014674:	ee07 0a90 	vmov	s15, r0
 8014678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801467c:	4b9b      	ldr	r3, [pc, #620]	; (80148ec <forward_cast+0x2c40>)
 801467e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014682:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8014686:	4a98      	ldr	r2, [pc, #608]	; (80148e8 <forward_cast+0x2c3c>)
 8014688:	e79e      	b.n	80145c8 <forward_cast+0x291c>
 801468a:	f995 0000 	ldrsb.w	r0, [r5]
 801468e:	e6ed      	b.n	801446c <forward_cast+0x27c0>
 8014690:	edd5 7a00 	vldr	s15, [r5]
 8014694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801469c:	edcd 7a01 	vstr	s15, [sp, #4]
 80146a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80146a4:	f7fd bf35 	b.w	8012512 <forward_cast+0x866>
 80146a8:	edd5 7a00 	vldr	s15, [r5]
 80146ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80146b4:	edcd 7a01 	vstr	s15, [sp, #4]
 80146b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80146bc:	e729      	b.n	8014512 <forward_cast+0x2866>
 80146be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80146c2:	f7ec fb81 	bl	8000dc8 <__aeabi_l2f>
 80146c6:	ee07 0a90 	vmov	s15, r0
 80146ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80146ce:	4b88      	ldr	r3, [pc, #544]	; (80148f0 <forward_cast+0x2c44>)
 80146d0:	edcd 7a01 	vstr	s15, [sp, #4]
 80146d4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80146d8:	4a84      	ldr	r2, [pc, #528]	; (80148ec <forward_cast+0x2c40>)
 80146da:	e71a      	b.n	8014512 <forward_cast+0x2866>
 80146dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80146e0:	f7ec fb72 	bl	8000dc8 <__aeabi_l2f>
 80146e4:	ee07 0a90 	vmov	s15, r0
 80146e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146ec:	4b7e      	ldr	r3, [pc, #504]	; (80148e8 <forward_cast+0x2c3c>)
 80146ee:	4a7a      	ldr	r2, [pc, #488]	; (80148d8 <forward_cast+0x2c2c>)
 80146f0:	ee17 0a90 	vmov	r0, s15
 80146f4:	e66b      	b.n	80143ce <forward_cast+0x2722>
 80146f6:	7828      	ldrb	r0, [r5, #0]
 80146f8:	e669      	b.n	80143ce <forward_cast+0x2722>
 80146fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80146fe:	f7ec fb5b 	bl	8000db8 <__aeabi_ul2f>
 8014702:	ee07 0a90 	vmov	s15, r0
 8014706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801470a:	4a73      	ldr	r2, [pc, #460]	; (80148d8 <forward_cast+0x2c2c>)
 801470c:	4b76      	ldr	r3, [pc, #472]	; (80148e8 <forward_cast+0x2c3c>)
 801470e:	ee17 0a90 	vmov	r0, s15
 8014712:	e65c      	b.n	80143ce <forward_cast+0x2722>
 8014714:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014718:	e659      	b.n	80143ce <forward_cast+0x2722>
 801471a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801471e:	f7ec fb53 	bl	8000dc8 <__aeabi_l2f>
 8014722:	ee07 0a90 	vmov	s15, r0
 8014726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801472a:	4b70      	ldr	r3, [pc, #448]	; (80148ec <forward_cast+0x2c40>)
 801472c:	4a6e      	ldr	r2, [pc, #440]	; (80148e8 <forward_cast+0x2c3c>)
 801472e:	ee17 0a90 	vmov	r0, s15
 8014732:	e69b      	b.n	801446c <forward_cast+0x27c0>
 8014734:	7828      	ldrb	r0, [r5, #0]
 8014736:	e699      	b.n	801446c <forward_cast+0x27c0>
 8014738:	e9d5 0100 	ldrd	r0, r1, [r5]
 801473c:	f7ec fb3c 	bl	8000db8 <__aeabi_ul2f>
 8014740:	ee07 0a90 	vmov	s15, r0
 8014744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014748:	4a67      	ldr	r2, [pc, #412]	; (80148e8 <forward_cast+0x2c3c>)
 801474a:	4b68      	ldr	r3, [pc, #416]	; (80148ec <forward_cast+0x2c40>)
 801474c:	ee17 0a90 	vmov	r0, s15
 8014750:	e68c      	b.n	801446c <forward_cast+0x27c0>
 8014752:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014756:	e689      	b.n	801446c <forward_cast+0x27c0>
 8014758:	e9d5 0100 	ldrd	r0, r1, [r5]
 801475c:	f7ec fb34 	bl	8000dc8 <__aeabi_l2f>
 8014760:	ee07 0a90 	vmov	s15, r0
 8014764:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801476c:	4b5f      	ldr	r3, [pc, #380]	; (80148ec <forward_cast+0x2c40>)
 801476e:	4a5e      	ldr	r2, [pc, #376]	; (80148e8 <forward_cast+0x2c3c>)
 8014770:	bf14      	ite	ne
 8014772:	2101      	movne	r1, #1
 8014774:	2100      	moveq	r1, #0
 8014776:	e5d9      	b.n	801432c <forward_cast+0x2680>
 8014778:	f995 1000 	ldrsb.w	r1, [r5]
 801477c:	ee07 1a90 	vmov	s15, r1
 8014780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014784:	f7fd be4e 	b.w	8012424 <forward_cast+0x778>
 8014788:	edd5 7a00 	vldr	s15, [r5]
 801478c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014794:	ee17 0a90 	vmov	r0, s15
 8014798:	e564      	b.n	8014264 <forward_cast+0x25b8>
 801479a:	f995 1000 	ldrsb.w	r1, [r5]
 801479e:	ee07 1a90 	vmov	s15, r1
 80147a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147a6:	f7fd bf08 	b.w	80125ba <forward_cast+0x90e>
 80147aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80147ae:	f7ec fb0b 	bl	8000dc8 <__aeabi_l2f>
 80147b2:	ee07 0a90 	vmov	s15, r0
 80147b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147ba:	4b4c      	ldr	r3, [pc, #304]	; (80148ec <forward_cast+0x2c40>)
 80147bc:	4a4a      	ldr	r2, [pc, #296]	; (80148e8 <forward_cast+0x2c3c>)
 80147be:	ee17 0a90 	vmov	r0, s15
 80147c2:	e54f      	b.n	8014264 <forward_cast+0x25b8>
 80147c4:	7828      	ldrb	r0, [r5, #0]
 80147c6:	e54d      	b.n	8014264 <forward_cast+0x25b8>
 80147c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80147cc:	f7ec faf4 	bl	8000db8 <__aeabi_ul2f>
 80147d0:	ee07 0a90 	vmov	s15, r0
 80147d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147d8:	4a43      	ldr	r2, [pc, #268]	; (80148e8 <forward_cast+0x2c3c>)
 80147da:	4b44      	ldr	r3, [pc, #272]	; (80148ec <forward_cast+0x2c40>)
 80147dc:	ee17 0a90 	vmov	r0, s15
 80147e0:	e540      	b.n	8014264 <forward_cast+0x25b8>
 80147e2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80147e6:	e53d      	b.n	8014264 <forward_cast+0x25b8>
 80147e8:	f995 0000 	ldrsb.w	r0, [r5]
 80147ec:	e53a      	b.n	8014264 <forward_cast+0x25b8>
 80147ee:	edd5 7a00 	vldr	s15, [r5]
 80147f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147fe:	f7fd bedc 	b.w	80125ba <forward_cast+0x90e>
 8014802:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014806:	f7ec fad7 	bl	8000db8 <__aeabi_ul2f>
 801480a:	ee07 0a90 	vmov	s15, r0
 801480e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014812:	4a34      	ldr	r2, [pc, #208]	; (80148e4 <forward_cast+0x2c38>)
 8014814:	4b35      	ldr	r3, [pc, #212]	; (80148ec <forward_cast+0x2c40>)
 8014816:	ee17 0a90 	vmov	r0, s15
 801481a:	f7fe ba57 	b.w	8012ccc <forward_cast+0x1020>
 801481e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014822:	f7ec fac9 	bl	8000db8 <__aeabi_ul2f>
 8014826:	ee07 0a90 	vmov	s15, r0
 801482a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801482e:	4b31      	ldr	r3, [pc, #196]	; (80148f4 <forward_cast+0x2c48>)
 8014830:	4a2f      	ldr	r2, [pc, #188]	; (80148f0 <forward_cast+0x2c44>)
 8014832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014836:	f7fd bec0 	b.w	80125ba <forward_cast+0x90e>
 801483a:	f995 1000 	ldrsb.w	r1, [r5]
 801483e:	3900      	subs	r1, #0
 8014840:	bf18      	it	ne
 8014842:	2101      	movne	r1, #1
 8014844:	e572      	b.n	801432c <forward_cast+0x2680>
 8014846:	edd5 7a00 	vldr	s15, [r5]
 801484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801484e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014856:	bf14      	ite	ne
 8014858:	2101      	movne	r1, #1
 801485a:	2100      	moveq	r1, #0
 801485c:	e566      	b.n	801432c <forward_cast+0x2680>
 801485e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014862:	f7ec faa9 	bl	8000db8 <__aeabi_ul2f>
 8014866:	ee07 0a90 	vmov	s15, r0
 801486a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014872:	4a1d      	ldr	r2, [pc, #116]	; (80148e8 <forward_cast+0x2c3c>)
 8014874:	4b1d      	ldr	r3, [pc, #116]	; (80148ec <forward_cast+0x2c40>)
 8014876:	bf14      	ite	ne
 8014878:	2101      	movne	r1, #1
 801487a:	2100      	moveq	r1, #0
 801487c:	e556      	b.n	801432c <forward_cast+0x2680>
 801487e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014882:	3900      	subs	r1, #0
 8014884:	bf18      	it	ne
 8014886:	2101      	movne	r1, #1
 8014888:	e550      	b.n	801432c <forward_cast+0x2680>
 801488a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801488e:	f7ec fa93 	bl	8000db8 <__aeabi_ul2f>
 8014892:	ee07 0a90 	vmov	s15, r0
 8014896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801489a:	4a14      	ldr	r2, [pc, #80]	; (80148ec <forward_cast+0x2c40>)
 801489c:	edcd 7a01 	vstr	s15, [sp, #4]
 80148a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80148a4:	4b12      	ldr	r3, [pc, #72]	; (80148f0 <forward_cast+0x2c44>)
 80148a6:	e634      	b.n	8014512 <forward_cast+0x2866>
 80148a8:	edd5 7a00 	vldr	s15, [r5]
 80148ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80148b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148b4:	edcd 7a01 	vstr	s15, [sp, #4]
 80148b8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80148bc:	f7fe ba3b 	b.w	8012d36 <forward_cast+0x108a>
 80148c0:	f995 0000 	ldrsb.w	r0, [r5]
 80148c4:	f7fe ba6f 	b.w	8012da6 <forward_cast+0x10fa>
 80148c8:	f995 0000 	ldrsb.w	r0, [r5]
 80148cc:	f7fe b9fe 	b.w	8012ccc <forward_cast+0x1020>
 80148d0:	7829      	ldrb	r1, [r5, #0]
 80148d2:	f7fd bc7f 	b.w	80121d4 <forward_cast+0x528>
 80148d6:	bf00      	nop
 80148d8:	00060440 	.word	0x00060440
 80148dc:	00842040 	.word	0x00842040
 80148e0:	01821040 	.word	0x01821040
 80148e4:	00040440 	.word	0x00040440
 80148e8:	00042040 	.word	0x00042040
 80148ec:	00041040 	.word	0x00041040
 80148f0:	00841040 	.word	0x00841040
 80148f4:	00840840 	.word	0x00840840
 80148f8:	edd5 7a00 	vldr	s15, [r5]
 80148fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014904:	ee17 1a90 	vmov	r1, s15
 8014908:	b289      	uxth	r1, r1
 801490a:	f7fd bac1 	b.w	8011e90 <forward_cast+0x1e4>
 801490e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014912:	f7ec fa59 	bl	8000dc8 <__aeabi_l2f>
 8014916:	ee07 0a90 	vmov	s15, r0
 801491a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801491e:	4be3      	ldr	r3, [pc, #908]	; (8014cac <forward_cast+0x3000>)
 8014920:	edcd 7a01 	vstr	s15, [sp, #4]
 8014924:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014928:	4ae1      	ldr	r2, [pc, #900]	; (8014cb0 <forward_cast+0x3004>)
 801492a:	f7fd bdf2 	b.w	8012512 <forward_cast+0x866>
 801492e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014932:	f7ec fa49 	bl	8000dc8 <__aeabi_l2f>
 8014936:	ee07 0a90 	vmov	s15, r0
 801493a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801493e:	4bdd      	ldr	r3, [pc, #884]	; (8014cb4 <forward_cast+0x3008>)
 8014940:	4add      	ldr	r2, [pc, #884]	; (8014cb8 <forward_cast+0x300c>)
 8014942:	ee17 0a90 	vmov	r0, s15
 8014946:	f7fe b931 	b.w	8012bac <forward_cast+0xf00>
 801494a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801494e:	f7ec fa33 	bl	8000db8 <__aeabi_ul2f>
 8014952:	ee07 0a90 	vmov	s15, r0
 8014956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801495a:	4ad6      	ldr	r2, [pc, #856]	; (8014cb4 <forward_cast+0x3008>)
 801495c:	ee17 3a90 	vmov	r3, s15
 8014960:	b299      	uxth	r1, r3
 8014962:	4bd3      	ldr	r3, [pc, #844]	; (8014cb0 <forward_cast+0x3004>)
 8014964:	f7fd bc36 	b.w	80121d4 <forward_cast+0x528>
 8014968:	e9d5 0100 	ldrd	r0, r1, [r5]
 801496c:	9301      	str	r3, [sp, #4]
 801496e:	f7ec fa23 	bl	8000db8 <__aeabi_ul2f>
 8014972:	ee07 0a90 	vmov	s15, r0
 8014976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801497a:	9b01      	ldr	r3, [sp, #4]
 801497c:	4acb      	ldr	r2, [pc, #812]	; (8014cac <forward_cast+0x3000>)
 801497e:	ee17 0a90 	vmov	r0, s15
 8014982:	f7fd bc63 	b.w	801224c <forward_cast+0x5a0>
 8014986:	edd5 7a00 	vldr	s15, [r5]
 801498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801498e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014992:	ee17 0a90 	vmov	r0, s15
 8014996:	f7fd bc59 	b.w	801224c <forward_cast+0x5a0>
 801499a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801499e:	f7fe b95f 	b.w	8012c60 <forward_cast+0xfb4>
 80149a2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80149a6:	f7ec fa07 	bl	8000db8 <__aeabi_ul2f>
 80149aa:	ee07 0a90 	vmov	s15, r0
 80149ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149b2:	4ac1      	ldr	r2, [pc, #772]	; (8014cb8 <forward_cast+0x300c>)
 80149b4:	4bbf      	ldr	r3, [pc, #764]	; (8014cb4 <forward_cast+0x3008>)
 80149b6:	ee17 0a90 	vmov	r0, s15
 80149ba:	f7fe b951 	b.w	8012c60 <forward_cast+0xfb4>
 80149be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80149c2:	f7ec f9f9 	bl	8000db8 <__aeabi_ul2f>
 80149c6:	ee07 0a90 	vmov	s15, r0
 80149ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149ce:	4abb      	ldr	r2, [pc, #748]	; (8014cbc <forward_cast+0x3010>)
 80149d0:	4bb6      	ldr	r3, [pc, #728]	; (8014cac <forward_cast+0x3000>)
 80149d2:	ee17 0a90 	vmov	r0, s15
 80149d6:	f7fe b9e6 	b.w	8012da6 <forward_cast+0x10fa>
 80149da:	edd5 7a00 	vldr	s15, [r5]
 80149de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80149e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149e6:	ee17 0a90 	vmov	r0, s15
 80149ea:	f7fe b9dc 	b.w	8012da6 <forward_cast+0x10fa>
 80149ee:	7828      	ldrb	r0, [r5, #0]
 80149f0:	f7fe b8dc 	b.w	8012bac <forward_cast+0xf00>
 80149f4:	edd5 7a00 	vldr	s15, [r5]
 80149f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80149fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a00:	ee17 0a90 	vmov	r0, s15
 8014a04:	e532      	b.n	801446c <forward_cast+0x27c0>
 8014a06:	f995 0000 	ldrsb.w	r0, [r5]
 8014a0a:	f7fd ba92 	b.w	8011f32 <forward_cast+0x286>
 8014a0e:	f995 0000 	ldrsb.w	r0, [r5]
 8014a12:	e4dc      	b.n	80143ce <forward_cast+0x2722>
 8014a14:	edd5 7a00 	vldr	s15, [r5]
 8014a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a20:	ee17 0a90 	vmov	r0, s15
 8014a24:	e4d3      	b.n	80143ce <forward_cast+0x2722>
 8014a26:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014a2a:	f7ec f9c5 	bl	8000db8 <__aeabi_ul2f>
 8014a2e:	ee07 0a90 	vmov	s15, r0
 8014a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a36:	4a9f      	ldr	r2, [pc, #636]	; (8014cb4 <forward_cast+0x3008>)
 8014a38:	edcd 7a01 	vstr	s15, [sp, #4]
 8014a3c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8014a40:	4b9a      	ldr	r3, [pc, #616]	; (8014cac <forward_cast+0x3000>)
 8014a42:	f7fe b978 	b.w	8012d36 <forward_cast+0x108a>
 8014a46:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014a4a:	f7ec f9b5 	bl	8000db8 <__aeabi_ul2f>
 8014a4e:	ee07 0a90 	vmov	s15, r0
 8014a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a56:	4a96      	ldr	r2, [pc, #600]	; (8014cb0 <forward_cast+0x3004>)
 8014a58:	4b94      	ldr	r3, [pc, #592]	; (8014cac <forward_cast+0x3000>)
 8014a5a:	ee17 0a90 	vmov	r0, s15
 8014a5e:	f7fd ba68 	b.w	8011f32 <forward_cast+0x286>
 8014a62:	edd5 7a00 	vldr	s15, [r5]
 8014a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a6e:	ee17 0a90 	vmov	r0, s15
 8014a72:	f7fd ba5e 	b.w	8011f32 <forward_cast+0x286>
 8014a76:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014a7a:	f7fd ba5a 	b.w	8011f32 <forward_cast+0x286>
 8014a7e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014a82:	f7ec f999 	bl	8000db8 <__aeabi_ul2f>
 8014a86:	ee07 0a90 	vmov	s15, r0
 8014a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a8e:	4a88      	ldr	r2, [pc, #544]	; (8014cb0 <forward_cast+0x3004>)
 8014a90:	edcd 7a01 	vstr	s15, [sp, #4]
 8014a94:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014a98:	4b84      	ldr	r3, [pc, #528]	; (8014cac <forward_cast+0x3000>)
 8014a9a:	f7fd bd3a 	b.w	8012512 <forward_cast+0x866>
 8014a9e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014aa2:	f7ec f989 	bl	8000db8 <__aeabi_ul2f>
 8014aa6:	ee07 0a90 	vmov	s15, r0
 8014aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aae:	4a80      	ldr	r2, [pc, #512]	; (8014cb0 <forward_cast+0x3004>)
 8014ab0:	edcd 7a01 	vstr	s15, [sp, #4]
 8014ab4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014ab8:	4b7c      	ldr	r3, [pc, #496]	; (8014cac <forward_cast+0x3000>)
 8014aba:	f7fd bceb 	b.w	8012494 <forward_cast+0x7e8>
 8014abe:	edd5 7a00 	vldr	s15, [r5]
 8014ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aca:	edcd 7a01 	vstr	s15, [sp, #4]
 8014ace:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014ad2:	f7fd bcdf 	b.w	8012494 <forward_cast+0x7e8>
 8014ad6:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014ada:	f7fd ba8d 	b.w	8011ff8 <forward_cast+0x34c>
 8014ade:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014ae2:	f7ec f971 	bl	8000dc8 <__aeabi_l2f>
 8014ae6:	ee07 0a90 	vmov	s15, r0
 8014aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aee:	4b6f      	ldr	r3, [pc, #444]	; (8014cac <forward_cast+0x3000>)
 8014af0:	4a6f      	ldr	r2, [pc, #444]	; (8014cb0 <forward_cast+0x3004>)
 8014af2:	ee17 0a90 	vmov	r0, s15
 8014af6:	f7fd bc3b 	b.w	8012370 <forward_cast+0x6c4>
 8014afa:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014afe:	ee07 1a90 	vmov	s15, r1
 8014b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b06:	f7fd bc8d 	b.w	8012424 <forward_cast+0x778>
 8014b0a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014b0e:	f7ec f95b 	bl	8000dc8 <__aeabi_l2f>
 8014b12:	ee07 0a90 	vmov	s15, r0
 8014b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b1a:	4b66      	ldr	r3, [pc, #408]	; (8014cb4 <forward_cast+0x3008>)
 8014b1c:	4a66      	ldr	r2, [pc, #408]	; (8014cb8 <forward_cast+0x300c>)
 8014b1e:	ee17 0a90 	vmov	r0, s15
 8014b22:	f7fd bbe5 	b.w	80122f0 <forward_cast+0x644>
 8014b26:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014b2a:	f7fd bc21 	b.w	8012370 <forward_cast+0x6c4>
 8014b2e:	f995 0000 	ldrsb.w	r0, [r5]
 8014b32:	f7ff bb2f 	b.w	8014194 <forward_cast+0x24e8>
 8014b36:	f995 0000 	ldrsb.w	r0, [r5]
 8014b3a:	f7fd bbd9 	b.w	80122f0 <forward_cast+0x644>
 8014b3e:	f995 0000 	ldrsb.w	r0, [r5]
 8014b42:	f7fd bf70 	b.w	8012a26 <forward_cast+0xd7a>
 8014b46:	f995 1000 	ldrsb.w	r1, [r5]
 8014b4a:	3900      	subs	r1, #0
 8014b4c:	bf18      	it	ne
 8014b4e:	2101      	movne	r1, #1
 8014b50:	f7fd bfa4 	b.w	8012a9c <forward_cast+0xdf0>
 8014b54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014b58:	f7ec f936 	bl	8000dc8 <__aeabi_l2f>
 8014b5c:	ee07 0a90 	vmov	s15, r0
 8014b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b64:	4b53      	ldr	r3, [pc, #332]	; (8014cb4 <forward_cast+0x3008>)
 8014b66:	4a54      	ldr	r2, [pc, #336]	; (8014cb8 <forward_cast+0x300c>)
 8014b68:	ee17 0a90 	vmov	r0, s15
 8014b6c:	f7ff bb12 	b.w	8014194 <forward_cast+0x24e8>
 8014b70:	7828      	ldrb	r0, [r5, #0]
 8014b72:	f7ff bb0f 	b.w	8014194 <forward_cast+0x24e8>
 8014b76:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014b7a:	f7ec f91d 	bl	8000db8 <__aeabi_ul2f>
 8014b7e:	ee07 0a90 	vmov	s15, r0
 8014b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b86:	4a4c      	ldr	r2, [pc, #304]	; (8014cb8 <forward_cast+0x300c>)
 8014b88:	4b4a      	ldr	r3, [pc, #296]	; (8014cb4 <forward_cast+0x3008>)
 8014b8a:	ee17 0a90 	vmov	r0, s15
 8014b8e:	f7ff bb01 	b.w	8014194 <forward_cast+0x24e8>
 8014b92:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014b96:	f7ff bafd 	b.w	8014194 <forward_cast+0x24e8>
 8014b9a:	edd5 7a00 	vldr	s15, [r5]
 8014b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ba6:	ee17 0a90 	vmov	r0, s15
 8014baa:	f7ff baf3 	b.w	8014194 <forward_cast+0x24e8>
 8014bae:	edd5 7a00 	vldr	s15, [r5]
 8014bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014bba:	ee17 1a90 	vmov	r1, s15
 8014bbe:	b289      	uxth	r1, r1
 8014bc0:	f7fd bb08 	b.w	80121d4 <forward_cast+0x528>
 8014bc4:	edd5 7a00 	vldr	s15, [r5]
 8014bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014bd0:	ee17 0a90 	vmov	r0, s15
 8014bd4:	f7fe b844 	b.w	8012c60 <forward_cast+0xfb4>
 8014bd8:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014bdc:	f7fe b876 	b.w	8012ccc <forward_cast+0x1020>
 8014be0:	f995 0000 	ldrsb.w	r0, [r5]
 8014be4:	f7fe b83c 	b.w	8012c60 <forward_cast+0xfb4>
 8014be8:	f995 1000 	ldrsb.w	r1, [r5]
 8014bec:	f7fd bdd8 	b.w	80127a0 <forward_cast+0xaf4>
 8014bf0:	f995 1000 	ldrsb.w	r1, [r5]
 8014bf4:	b289      	uxth	r1, r1
 8014bf6:	f7fd b94b 	b.w	8011e90 <forward_cast+0x1e4>
 8014bfa:	f995 0000 	ldrsb.w	r0, [r5]
 8014bfe:	f7ff ba34 	b.w	801406a <forward_cast+0x23be>
 8014c02:	edd5 7a00 	vldr	s15, [r5]
 8014c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c0e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014c12:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014c16:	f7ff b9cb 	b.w	8013fb0 <forward_cast+0x2304>
 8014c1a:	f995 0000 	ldrsb.w	r0, [r5]
 8014c1e:	f7ff ba6d 	b.w	80140fc <forward_cast+0x2450>
 8014c22:	edd5 7a00 	vldr	s15, [r5]
 8014c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c2e:	ee17 0a90 	vmov	r0, s15
 8014c32:	f7ff ba63 	b.w	80140fc <forward_cast+0x2450>
 8014c36:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014c3a:	f7ec f8bd 	bl	8000db8 <__aeabi_ul2f>
 8014c3e:	4b20      	ldr	r3, [pc, #128]	; (8014cc0 <forward_cast+0x3014>)
 8014c40:	4a20      	ldr	r2, [pc, #128]	; (8014cc4 <forward_cast+0x3018>)
 8014c42:	ee07 0a90 	vmov	s15, r0
 8014c46:	f7fd bbed 	b.w	8012424 <forward_cast+0x778>
 8014c4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014c4e:	f7ec f8b3 	bl	8000db8 <__aeabi_ul2f>
 8014c52:	ee07 0a90 	vmov	s15, r0
 8014c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c5a:	4a17      	ldr	r2, [pc, #92]	; (8014cb8 <forward_cast+0x300c>)
 8014c5c:	4b15      	ldr	r3, [pc, #84]	; (8014cb4 <forward_cast+0x3008>)
 8014c5e:	ee17 0a90 	vmov	r0, s15
 8014c62:	f7fd bb45 	b.w	80122f0 <forward_cast+0x644>
 8014c66:	edd5 7a00 	vldr	s15, [r5]
 8014c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c72:	ee17 0a90 	vmov	r0, s15
 8014c76:	f7fd bb3b 	b.w	80122f0 <forward_cast+0x644>
 8014c7a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014c7e:	3900      	subs	r1, #0
 8014c80:	bf18      	it	ne
 8014c82:	2101      	movne	r1, #1
 8014c84:	f7fd bf0a 	b.w	8012a9c <forward_cast+0xdf0>
 8014c88:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014c8c:	f7ec f894 	bl	8000db8 <__aeabi_ul2f>
 8014c90:	ee07 0a90 	vmov	s15, r0
 8014c94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c9c:	4a06      	ldr	r2, [pc, #24]	; (8014cb8 <forward_cast+0x300c>)
 8014c9e:	4b05      	ldr	r3, [pc, #20]	; (8014cb4 <forward_cast+0x3008>)
 8014ca0:	bf14      	ite	ne
 8014ca2:	2101      	movne	r1, #1
 8014ca4:	2100      	moveq	r1, #0
 8014ca6:	f7fd bef9 	b.w	8012a9c <forward_cast+0xdf0>
 8014caa:	bf00      	nop
 8014cac:	00841040 	.word	0x00841040
 8014cb0:	00041040 	.word	0x00041040
 8014cb4:	00042040 	.word	0x00042040
 8014cb8:	00060440 	.word	0x00060440
 8014cbc:	01821040 	.word	0x01821040
 8014cc0:	00842040 	.word	0x00842040
 8014cc4:	00840440 	.word	0x00840440
 8014cc8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014ccc:	f7ec f874 	bl	8000db8 <__aeabi_ul2f>
 8014cd0:	ee07 0a90 	vmov	s15, r0
 8014cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014cd8:	4bdc      	ldr	r3, [pc, #880]	; (801504c <forward_cast+0x33a0>)
 8014cda:	4add      	ldr	r2, [pc, #884]	; (8015050 <forward_cast+0x33a4>)
 8014cdc:	ee17 0a90 	vmov	r0, s15
 8014ce0:	f7fd bea1 	b.w	8012a26 <forward_cast+0xd7a>
 8014ce4:	edd5 7a00 	vldr	s15, [r5]
 8014ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014cf0:	ee17 0a90 	vmov	r0, s15
 8014cf4:	f7fd be97 	b.w	8012a26 <forward_cast+0xd7a>
 8014cf8:	7828      	ldrb	r0, [r5, #0]
 8014cfa:	f7fd baf9 	b.w	80122f0 <forward_cast+0x644>
 8014cfe:	edd5 7a00 	vldr	s15, [r5]
 8014d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d06:	f7fd bb8d 	b.w	8012424 <forward_cast+0x778>
 8014d0a:	7829      	ldrb	r1, [r5, #0]
 8014d0c:	ee07 1a90 	vmov	s15, r1
 8014d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d14:	f7fd bc51 	b.w	80125ba <forward_cast+0x90e>
 8014d18:	edd5 7a00 	vldr	s15, [r5]
 8014d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d28:	bf14      	ite	ne
 8014d2a:	2101      	movne	r1, #1
 8014d2c:	2100      	moveq	r1, #0
 8014d2e:	f7fd beb5 	b.w	8012a9c <forward_cast+0xdf0>
 8014d32:	7829      	ldrb	r1, [r5, #0]
 8014d34:	ee07 1a90 	vmov	s15, r1
 8014d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d3c:	f7fd bb72 	b.w	8012424 <forward_cast+0x778>
 8014d40:	edd5 7a00 	vldr	s15, [r5]
 8014d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d4c:	ee17 0a90 	vmov	r0, s15
 8014d50:	f7ff b98b 	b.w	801406a <forward_cast+0x23be>
 8014d54:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014d58:	f7fd be65 	b.w	8012a26 <forward_cast+0xd7a>
 8014d5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014d60:	f7ec f832 	bl	8000dc8 <__aeabi_l2f>
 8014d64:	4abb      	ldr	r2, [pc, #748]	; (8015054 <forward_cast+0x33a8>)
 8014d66:	4bbc      	ldr	r3, [pc, #752]	; (8015058 <forward_cast+0x33ac>)
 8014d68:	ee07 0a90 	vmov	s15, r0
 8014d6c:	f7fd bb5a 	b.w	8012424 <forward_cast+0x778>
 8014d70:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014d74:	f7ec f828 	bl	8000dc8 <__aeabi_l2f>
 8014d78:	ee07 0a90 	vmov	s15, r0
 8014d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d80:	4bb6      	ldr	r3, [pc, #728]	; (801505c <forward_cast+0x33b0>)
 8014d82:	4ab7      	ldr	r2, [pc, #732]	; (8015060 <forward_cast+0x33b4>)
 8014d84:	ee17 0a90 	vmov	r0, s15
 8014d88:	f7fd b831 	b.w	8011dee <forward_cast+0x142>
 8014d8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014d90:	f7ec f81a 	bl	8000dc8 <__aeabi_l2f>
 8014d94:	ee07 0a90 	vmov	s15, r0
 8014d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014d9c:	4aab      	ldr	r2, [pc, #684]	; (801504c <forward_cast+0x33a0>)
 8014d9e:	ee17 3a90 	vmov	r3, s15
 8014da2:	b299      	uxth	r1, r3
 8014da4:	4baf      	ldr	r3, [pc, #700]	; (8015064 <forward_cast+0x33b8>)
 8014da6:	f7fd b873 	b.w	8011e90 <forward_cast+0x1e4>
 8014daa:	7828      	ldrb	r0, [r5, #0]
 8014dac:	f7fd b8c1 	b.w	8011f32 <forward_cast+0x286>
 8014db0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014db4:	f7ec f808 	bl	8000dc8 <__aeabi_l2f>
 8014db8:	ee07 0a90 	vmov	s15, r0
 8014dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014dc0:	4ba6      	ldr	r3, [pc, #664]	; (801505c <forward_cast+0x33b0>)
 8014dc2:	4aa7      	ldr	r2, [pc, #668]	; (8015060 <forward_cast+0x33b4>)
 8014dc4:	ee17 0a90 	vmov	r0, s15
 8014dc8:	f7fd bd72 	b.w	80128b0 <forward_cast+0xc04>
 8014dcc:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014dd0:	f7fd b80d 	b.w	8011dee <forward_cast+0x142>
 8014dd4:	7829      	ldrb	r1, [r5, #0]
 8014dd6:	f7fd b85b 	b.w	8011e90 <forward_cast+0x1e4>
 8014dda:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014dde:	9301      	str	r3, [sp, #4]
 8014de0:	f7eb fff2 	bl	8000dc8 <__aeabi_l2f>
 8014de4:	ee07 0a90 	vmov	s15, r0
 8014de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014dec:	4a9c      	ldr	r2, [pc, #624]	; (8015060 <forward_cast+0x33b4>)
 8014dee:	9b01      	ldr	r3, [sp, #4]
 8014df0:	ee17 0a90 	vmov	r0, s15
 8014df4:	f7fd ba2a 	b.w	801224c <forward_cast+0x5a0>
 8014df8:	f995 1000 	ldrsb.w	r1, [r5]
 8014dfc:	b289      	uxth	r1, r1
 8014dfe:	f7fd b9e9 	b.w	80121d4 <forward_cast+0x528>
 8014e02:	f995 0000 	ldrsb.w	r0, [r5]
 8014e06:	f7fd ba21 	b.w	801224c <forward_cast+0x5a0>
 8014e0a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014e0e:	f7eb ffdb 	bl	8000dc8 <__aeabi_l2f>
 8014e12:	ee07 0a90 	vmov	s15, r0
 8014e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e1a:	4b91      	ldr	r3, [pc, #580]	; (8015060 <forward_cast+0x33b4>)
 8014e1c:	4a91      	ldr	r2, [pc, #580]	; (8015064 <forward_cast+0x33b8>)
 8014e1e:	ee17 0a90 	vmov	r0, s15
 8014e22:	f7fd b8e9 	b.w	8011ff8 <forward_cast+0x34c>
 8014e26:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014e2a:	f7fd bebf 	b.w	8012bac <forward_cast+0xf00>
 8014e2e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014e32:	f7eb ffc9 	bl	8000dc8 <__aeabi_l2f>
 8014e36:	ee07 0a90 	vmov	s15, r0
 8014e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e3e:	4a84      	ldr	r2, [pc, #528]	; (8015050 <forward_cast+0x33a4>)
 8014e40:	4b82      	ldr	r3, [pc, #520]	; (801504c <forward_cast+0x33a0>)
 8014e42:	ee17 0a90 	vmov	r0, s15
 8014e46:	f7fd bdee 	b.w	8012a26 <forward_cast+0xd7a>
 8014e4a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014e4e:	ee07 1a90 	vmov	s15, r1
 8014e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e56:	f7fd bbb0 	b.w	80125ba <forward_cast+0x90e>
 8014e5a:	edd5 7a00 	vldr	s15, [r5]
 8014e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e66:	edcd 7a01 	vstr	s15, [sp, #4]
 8014e6a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014e6e:	f7ff b803 	b.w	8013e78 <forward_cast+0x21cc>
 8014e72:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014e76:	f7eb ffa7 	bl	8000dc8 <__aeabi_l2f>
 8014e7a:	ee07 0a90 	vmov	s15, r0
 8014e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e82:	4b77      	ldr	r3, [pc, #476]	; (8015060 <forward_cast+0x33b4>)
 8014e84:	edcd 7a01 	vstr	s15, [sp, #4]
 8014e88:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014e8c:	4a75      	ldr	r2, [pc, #468]	; (8015064 <forward_cast+0x33b8>)
 8014e8e:	f7fe bff3 	b.w	8013e78 <forward_cast+0x21cc>
 8014e92:	f995 0000 	ldrsb.w	r0, [r5]
 8014e96:	f7ff b839 	b.w	8013f0c <forward_cast+0x2260>
 8014e9a:	edd5 7a00 	vldr	s15, [r5]
 8014e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ea6:	ee17 0a90 	vmov	r0, s15
 8014eaa:	f7ff b82f 	b.w	8013f0c <forward_cast+0x2260>
 8014eae:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014eb2:	f7eb ff89 	bl	8000dc8 <__aeabi_l2f>
 8014eb6:	ee07 0a90 	vmov	s15, r0
 8014eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ebe:	4b63      	ldr	r3, [pc, #396]	; (801504c <forward_cast+0x33a0>)
 8014ec0:	4a69      	ldr	r2, [pc, #420]	; (8015068 <forward_cast+0x33bc>)
 8014ec2:	ee17 0a90 	vmov	r0, s15
 8014ec6:	f7ff b821 	b.w	8013f0c <forward_cast+0x2260>
 8014eca:	7828      	ldrb	r0, [r5, #0]
 8014ecc:	f7ff b81e 	b.w	8013f0c <forward_cast+0x2260>
 8014ed0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014ed4:	f7eb ff70 	bl	8000db8 <__aeabi_ul2f>
 8014ed8:	ee07 0a90 	vmov	s15, r0
 8014edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ee0:	4a61      	ldr	r2, [pc, #388]	; (8015068 <forward_cast+0x33bc>)
 8014ee2:	4b5a      	ldr	r3, [pc, #360]	; (801504c <forward_cast+0x33a0>)
 8014ee4:	ee17 0a90 	vmov	r0, s15
 8014ee8:	f7ff b810 	b.w	8013f0c <forward_cast+0x2260>
 8014eec:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014ef0:	f7ff b80c 	b.w	8013f0c <forward_cast+0x2260>
 8014ef4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014ef8:	f7eb ff5e 	bl	8000db8 <__aeabi_ul2f>
 8014efc:	ee07 0a90 	vmov	s15, r0
 8014f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f04:	4a57      	ldr	r2, [pc, #348]	; (8015064 <forward_cast+0x33b8>)
 8014f06:	edcd 7a01 	vstr	s15, [sp, #4]
 8014f0a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014f0e:	4b54      	ldr	r3, [pc, #336]	; (8015060 <forward_cast+0x33b4>)
 8014f10:	f7fe bfb2 	b.w	8013e78 <forward_cast+0x21cc>
 8014f14:	edd5 7a00 	vldr	s15, [r5]
 8014f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f20:	ee17 0a90 	vmov	r0, s15
 8014f24:	f7fe bedb 	b.w	8013cde <forward_cast+0x2032>
 8014f28:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014f2c:	f7eb ff4c 	bl	8000dc8 <__aeabi_l2f>
 8014f30:	ee07 0a90 	vmov	s15, r0
 8014f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f38:	4b44      	ldr	r3, [pc, #272]	; (801504c <forward_cast+0x33a0>)
 8014f3a:	4a4b      	ldr	r2, [pc, #300]	; (8015068 <forward_cast+0x33bc>)
 8014f3c:	ee17 0a90 	vmov	r0, s15
 8014f40:	f7fd be8e 	b.w	8012c60 <forward_cast+0xfb4>
 8014f44:	7828      	ldrb	r0, [r5, #0]
 8014f46:	f7fd bec1 	b.w	8012ccc <forward_cast+0x1020>
 8014f4a:	f995 0000 	ldrsb.w	r0, [r5]
 8014f4e:	f7fe bf2b 	b.w	8013da8 <forward_cast+0x20fc>
 8014f52:	edd5 7a00 	vldr	s15, [r5]
 8014f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f5e:	ee17 0a90 	vmov	r0, s15
 8014f62:	f7fe bf21 	b.w	8013da8 <forward_cast+0x20fc>
 8014f66:	7829      	ldrb	r1, [r5, #0]
 8014f68:	f7fd bc1a 	b.w	80127a0 <forward_cast+0xaf4>
 8014f6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014f70:	f7eb ff2a 	bl	8000dc8 <__aeabi_l2f>
 8014f74:	ee07 0a90 	vmov	s15, r0
 8014f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f7c:	4b38      	ldr	r3, [pc, #224]	; (8015060 <forward_cast+0x33b4>)
 8014f7e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014f82:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014f86:	4a37      	ldr	r2, [pc, #220]	; (8015064 <forward_cast+0x33b8>)
 8014f88:	f7fd ba84 	b.w	8012494 <forward_cast+0x7e8>
 8014f8c:	edd5 7a00 	vldr	s15, [r5]
 8014f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f98:	ee17 0a90 	vmov	r0, s15
 8014f9c:	f7fe bb99 	b.w	80136d2 <forward_cast+0x1a26>
 8014fa0:	f995 1000 	ldrsb.w	r1, [r5]
 8014fa4:	b289      	uxth	r1, r1
 8014fa6:	f7fd b87f 	b.w	80120a8 <forward_cast+0x3fc>
 8014faa:	f995 0000 	ldrsb.w	r0, [r5]
 8014fae:	f7fe bb90 	b.w	80136d2 <forward_cast+0x1a26>
 8014fb2:	f995 0000 	ldrsb.w	r0, [r5]
 8014fb6:	f7fd bcf8 	b.w	80129aa <forward_cast+0xcfe>
 8014fba:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014fbe:	f7eb ff03 	bl	8000dc8 <__aeabi_l2f>
 8014fc2:	ee07 0a90 	vmov	s15, r0
 8014fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014fca:	4b25      	ldr	r3, [pc, #148]	; (8015060 <forward_cast+0x33b4>)
 8014fcc:	4a26      	ldr	r2, [pc, #152]	; (8015068 <forward_cast+0x33bc>)
 8014fce:	ee17 0a90 	vmov	r0, s15
 8014fd2:	f7fe bbca 	b.w	801376a <forward_cast+0x1abe>
 8014fd6:	7828      	ldrb	r0, [r5, #0]
 8014fd8:	f7fe bbc7 	b.w	801376a <forward_cast+0x1abe>
 8014fdc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014fe0:	f7eb feea 	bl	8000db8 <__aeabi_ul2f>
 8014fe4:	ee07 0a90 	vmov	s15, r0
 8014fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014fec:	4a1e      	ldr	r2, [pc, #120]	; (8015068 <forward_cast+0x33bc>)
 8014fee:	4b1c      	ldr	r3, [pc, #112]	; (8015060 <forward_cast+0x33b4>)
 8014ff0:	ee17 0a90 	vmov	r0, s15
 8014ff4:	f7fe bbb9 	b.w	801376a <forward_cast+0x1abe>
 8014ff8:	f9b5 0000 	ldrsh.w	r0, [r5]
 8014ffc:	f7fe bbb5 	b.w	801376a <forward_cast+0x1abe>
 8015000:	f995 1000 	ldrsb.w	r1, [r5]
 8015004:	3900      	subs	r1, #0
 8015006:	bf18      	it	ne
 8015008:	2101      	movne	r1, #1
 801500a:	f7fe bc5d 	b.w	80138c8 <forward_cast+0x1c1c>
 801500e:	f995 0000 	ldrsb.w	r0, [r5]
 8015012:	f7fd b893 	b.w	801213c <forward_cast+0x490>
 8015016:	f995 0000 	ldrsb.w	r0, [r5]
 801501a:	f7fe bba6 	b.w	801376a <forward_cast+0x1abe>
 801501e:	edd5 7a00 	vldr	s15, [r5]
 8015022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801502a:	ee17 0a90 	vmov	r0, s15
 801502e:	f7fe bb9c 	b.w	801376a <forward_cast+0x1abe>
 8015032:	edd5 7a00 	vldr	s15, [r5]
 8015036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801503a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015042:	bf14      	ite	ne
 8015044:	2101      	movne	r1, #1
 8015046:	2100      	moveq	r1, #0
 8015048:	f7fe bc3e 	b.w	80138c8 <forward_cast+0x1c1c>
 801504c:	00042040 	.word	0x00042040
 8015050:	01821040 	.word	0x01821040
 8015054:	00840440 	.word	0x00840440
 8015058:	00842040 	.word	0x00842040
 801505c:	00840840 	.word	0x00840840
 8015060:	00841040 	.word	0x00841040
 8015064:	00041040 	.word	0x00041040
 8015068:	00060440 	.word	0x00060440
 801506c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015070:	f7eb feaa 	bl	8000dc8 <__aeabi_l2f>
 8015074:	ee07 0a90 	vmov	s15, r0
 8015078:	eef5 7a40 	vcmp.f32	s15, #0.0
 801507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015080:	4bd9      	ldr	r3, [pc, #868]	; (80153e8 <forward_cast+0x373c>)
 8015082:	4ada      	ldr	r2, [pc, #872]	; (80153ec <forward_cast+0x3740>)
 8015084:	bf14      	ite	ne
 8015086:	2101      	movne	r1, #1
 8015088:	2100      	moveq	r1, #0
 801508a:	f7fe bc1d 	b.w	80138c8 <forward_cast+0x1c1c>
 801508e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015092:	f7eb fe91 	bl	8000db8 <__aeabi_ul2f>
 8015096:	ee07 0a90 	vmov	s15, r0
 801509a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a2:	4ad2      	ldr	r2, [pc, #840]	; (80153ec <forward_cast+0x3740>)
 80150a4:	4bd0      	ldr	r3, [pc, #832]	; (80153e8 <forward_cast+0x373c>)
 80150a6:	bf14      	ite	ne
 80150a8:	2101      	movne	r1, #1
 80150aa:	2100      	moveq	r1, #0
 80150ac:	f7fe bc0c 	b.w	80138c8 <forward_cast+0x1c1c>
 80150b0:	f9b5 1000 	ldrsh.w	r1, [r5]
 80150b4:	3900      	subs	r1, #0
 80150b6:	bf18      	it	ne
 80150b8:	2101      	movne	r1, #1
 80150ba:	f7fe bc05 	b.w	80138c8 <forward_cast+0x1c1c>
 80150be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80150c2:	f7eb fe81 	bl	8000dc8 <__aeabi_l2f>
 80150c6:	ee07 0a90 	vmov	s15, r0
 80150ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150ce:	4bc8      	ldr	r3, [pc, #800]	; (80153f0 <forward_cast+0x3744>)
 80150d0:	edcd 7a01 	vstr	s15, [sp, #4]
 80150d4:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80150d8:	4ac4      	ldr	r2, [pc, #784]	; (80153ec <forward_cast+0x3740>)
 80150da:	f7fe bba3 	b.w	8013824 <forward_cast+0x1b78>
 80150de:	e9d5 0100 	ldrd	r0, r1, [r5]
 80150e2:	f7eb fe69 	bl	8000db8 <__aeabi_ul2f>
 80150e6:	ee07 0a90 	vmov	s15, r0
 80150ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150ee:	4abf      	ldr	r2, [pc, #764]	; (80153ec <forward_cast+0x3740>)
 80150f0:	edcd 7a01 	vstr	s15, [sp, #4]
 80150f4:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80150f8:	4bbd      	ldr	r3, [pc, #756]	; (80153f0 <forward_cast+0x3744>)
 80150fa:	f7fe bb93 	b.w	8013824 <forward_cast+0x1b78>
 80150fe:	edd5 7a00 	vldr	s15, [r5]
 8015102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801510a:	edcd 7a01 	vstr	s15, [sp, #4]
 801510e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8015112:	f7fe bb87 	b.w	8013824 <forward_cast+0x1b78>
 8015116:	f995 0000 	ldrsb.w	r0, [r5]
 801511a:	f7fd bcfa 	b.w	8012b12 <forward_cast+0xe66>
 801511e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015122:	f7eb fe49 	bl	8000db8 <__aeabi_ul2f>
 8015126:	ee07 0a90 	vmov	s15, r0
 801512a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801512e:	4aaf      	ldr	r2, [pc, #700]	; (80153ec <forward_cast+0x3740>)
 8015130:	ee17 3a90 	vmov	r3, s15
 8015134:	b219      	sxth	r1, r3
 8015136:	4bac      	ldr	r3, [pc, #688]	; (80153e8 <forward_cast+0x373c>)
 8015138:	f7fd baf6 	b.w	8012728 <forward_cast+0xa7c>
 801513c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015140:	f7eb fe3a 	bl	8000db8 <__aeabi_ul2f>
 8015144:	ee07 0a90 	vmov	s15, r0
 8015148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801514c:	4aa6      	ldr	r2, [pc, #664]	; (80153e8 <forward_cast+0x373c>)
 801514e:	4ba8      	ldr	r3, [pc, #672]	; (80153f0 <forward_cast+0x3744>)
 8015150:	ee17 0a90 	vmov	r0, s15
 8015154:	f7fc bf50 	b.w	8011ff8 <forward_cast+0x34c>
 8015158:	edd5 7a00 	vldr	s15, [r5]
 801515c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015164:	ee17 0a90 	vmov	r0, s15
 8015168:	f7fc bf46 	b.w	8011ff8 <forward_cast+0x34c>
 801516c:	7828      	ldrb	r0, [r5, #0]
 801516e:	f7fd bc1c 	b.w	80129aa <forward_cast+0xcfe>
 8015172:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015176:	f7eb fe27 	bl	8000dc8 <__aeabi_l2f>
 801517a:	ee07 0a90 	vmov	s15, r0
 801517e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015182:	4a9a      	ldr	r2, [pc, #616]	; (80153ec <forward_cast+0x3740>)
 8015184:	ee17 3a90 	vmov	r3, s15
 8015188:	b219      	sxth	r1, r3
 801518a:	4b97      	ldr	r3, [pc, #604]	; (80153e8 <forward_cast+0x373c>)
 801518c:	f7fd bb08 	b.w	80127a0 <forward_cast+0xaf4>
 8015190:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015194:	f7fd b85a 	b.w	801224c <forward_cast+0x5a0>
 8015198:	e9d5 0100 	ldrd	r0, r1, [r5]
 801519c:	f7eb fe14 	bl	8000dc8 <__aeabi_l2f>
 80151a0:	ee07 0a90 	vmov	s15, r0
 80151a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151a8:	4a90      	ldr	r2, [pc, #576]	; (80153ec <forward_cast+0x3740>)
 80151aa:	ee17 3a90 	vmov	r3, s15
 80151ae:	b219      	sxth	r1, r3
 80151b0:	4b8d      	ldr	r3, [pc, #564]	; (80153e8 <forward_cast+0x373c>)
 80151b2:	f7fd ba7d 	b.w	80126b0 <forward_cast+0xa04>
 80151b6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80151ba:	f7fd bb79 	b.w	80128b0 <forward_cast+0xc04>
 80151be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80151c2:	f7eb fe01 	bl	8000dc8 <__aeabi_l2f>
 80151c6:	ee07 0a90 	vmov	s15, r0
 80151ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151ce:	4a89      	ldr	r2, [pc, #548]	; (80153f4 <forward_cast+0x3748>)
 80151d0:	4b89      	ldr	r3, [pc, #548]	; (80153f8 <forward_cast+0x374c>)
 80151d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151d6:	f7fd ba31 	b.w	801263c <forward_cast+0x990>
 80151da:	f9b5 0000 	ldrsh.w	r0, [r5]
 80151de:	f7fd b887 	b.w	80122f0 <forward_cast+0x644>
 80151e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80151e6:	f7eb fdef 	bl	8000dc8 <__aeabi_l2f>
 80151ea:	ee07 0a90 	vmov	s15, r0
 80151ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151f2:	4a7f      	ldr	r2, [pc, #508]	; (80153f0 <forward_cast+0x3744>)
 80151f4:	4b80      	ldr	r3, [pc, #512]	; (80153f8 <forward_cast+0x374c>)
 80151f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80151fa:	f7fd b9de 	b.w	80125ba <forward_cast+0x90e>
 80151fe:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015202:	f7fc bf9b 	b.w	801213c <forward_cast+0x490>
 8015206:	e9d5 0100 	ldrd	r0, r1, [r5]
 801520a:	f7eb fddd 	bl	8000dc8 <__aeabi_l2f>
 801520e:	ee07 0a90 	vmov	s15, r0
 8015212:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521a:	4b74      	ldr	r3, [pc, #464]	; (80153ec <forward_cast+0x3740>)
 801521c:	4a77      	ldr	r2, [pc, #476]	; (80153fc <forward_cast+0x3750>)
 801521e:	bf14      	ite	ne
 8015220:	2101      	movne	r1, #1
 8015222:	2100      	moveq	r1, #0
 8015224:	f7fd bc3a 	b.w	8012a9c <forward_cast+0xdf0>
 8015228:	edd5 7a00 	vldr	s15, [r5]
 801522c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015234:	ee17 0a90 	vmov	r0, s15
 8015238:	f7fd bcb8 	b.w	8012bac <forward_cast+0xf00>
 801523c:	edd5 7a00 	vldr	s15, [r5]
 8015240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015248:	ee17 1a90 	vmov	r1, s15
 801524c:	b209      	sxth	r1, r1
 801524e:	f7fd ba6b 	b.w	8012728 <forward_cast+0xa7c>
 8015252:	7829      	ldrb	r1, [r5, #0]
 8015254:	ee07 1a90 	vmov	s15, r1
 8015258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801525c:	f7fd b9ee 	b.w	801263c <forward_cast+0x990>
 8015260:	f995 0000 	ldrsb.w	r0, [r5]
 8015264:	f7fd b884 	b.w	8012370 <forward_cast+0x6c4>
 8015268:	f995 0000 	ldrsb.w	r0, [r5]
 801526c:	f7fc bec4 	b.w	8011ff8 <forward_cast+0x34c>
 8015270:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015274:	f7eb fda8 	bl	8000dc8 <__aeabi_l2f>
 8015278:	ee07 0a90 	vmov	s15, r0
 801527c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015280:	4a5a      	ldr	r2, [pc, #360]	; (80153ec <forward_cast+0x3740>)
 8015282:	ee17 3a90 	vmov	r3, s15
 8015286:	b219      	sxth	r1, r3
 8015288:	4b57      	ldr	r3, [pc, #348]	; (80153e8 <forward_cast+0x373c>)
 801528a:	f7fd ba4d 	b.w	8012728 <forward_cast+0xa7c>
 801528e:	7828      	ldrb	r0, [r5, #0]
 8015290:	f7fc bf54 	b.w	801213c <forward_cast+0x490>
 8015294:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015298:	f7eb fd8e 	bl	8000db8 <__aeabi_ul2f>
 801529c:	ee07 0a90 	vmov	s15, r0
 80152a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152a4:	4a55      	ldr	r2, [pc, #340]	; (80153fc <forward_cast+0x3750>)
 80152a6:	4b51      	ldr	r3, [pc, #324]	; (80153ec <forward_cast+0x3740>)
 80152a8:	ee17 0a90 	vmov	r0, s15
 80152ac:	f7fd bc7e 	b.w	8012bac <forward_cast+0xf00>
 80152b0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80152b4:	f7eb fd80 	bl	8000db8 <__aeabi_ul2f>
 80152b8:	ee07 0a90 	vmov	s15, r0
 80152bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152c0:	4a4a      	ldr	r2, [pc, #296]	; (80153ec <forward_cast+0x3740>)
 80152c2:	ee17 3a90 	vmov	r3, s15
 80152c6:	b219      	sxth	r1, r3
 80152c8:	4b47      	ldr	r3, [pc, #284]	; (80153e8 <forward_cast+0x373c>)
 80152ca:	f7fd b9f1 	b.w	80126b0 <forward_cast+0xa04>
 80152ce:	edd5 7a00 	vldr	s15, [r5]
 80152d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152da:	ee17 1a90 	vmov	r1, s15
 80152de:	b209      	sxth	r1, r1
 80152e0:	f7fd b9e6 	b.w	80126b0 <forward_cast+0xa04>
 80152e4:	7828      	ldrb	r0, [r5, #0]
 80152e6:	f7fd bc14 	b.w	8012b12 <forward_cast+0xe66>
 80152ea:	f995 0000 	ldrsb.w	r0, [r5]
 80152ee:	f7fd bc5d 	b.w	8012bac <forward_cast+0xf00>
 80152f2:	f995 1000 	ldrsb.w	r1, [r5]
 80152f6:	f7fd b9db 	b.w	80126b0 <forward_cast+0xa04>
 80152fa:	f995 1000 	ldrsb.w	r1, [r5]
 80152fe:	f7fd ba13 	b.w	8012728 <forward_cast+0xa7c>
 8015302:	f995 0000 	ldrsb.w	r0, [r5]
 8015306:	f7fd bad3 	b.w	80128b0 <forward_cast+0xc04>
 801530a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801530e:	f7eb fd53 	bl	8000db8 <__aeabi_ul2f>
 8015312:	ee07 0a90 	vmov	s15, r0
 8015316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801531a:	4a34      	ldr	r2, [pc, #208]	; (80153ec <forward_cast+0x3740>)
 801531c:	ee17 3a90 	vmov	r3, s15
 8015320:	b219      	sxth	r1, r3
 8015322:	4b31      	ldr	r3, [pc, #196]	; (80153e8 <forward_cast+0x373c>)
 8015324:	f7fd ba3c 	b.w	80127a0 <forward_cast+0xaf4>
 8015328:	e9d5 0100 	ldrd	r0, r1, [r5]
 801532c:	f7eb fd44 	bl	8000db8 <__aeabi_ul2f>
 8015330:	ee07 0a90 	vmov	s15, r0
 8015334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015338:	4a2c      	ldr	r2, [pc, #176]	; (80153ec <forward_cast+0x3740>)
 801533a:	ee17 3a90 	vmov	r3, s15
 801533e:	b299      	uxth	r1, r3
 8015340:	4b29      	ldr	r3, [pc, #164]	; (80153e8 <forward_cast+0x373c>)
 8015342:	f7fc bda5 	b.w	8011e90 <forward_cast+0x1e4>
 8015346:	e9d5 0100 	ldrd	r0, r1, [r5]
 801534a:	f7eb fd3d 	bl	8000dc8 <__aeabi_l2f>
 801534e:	ee07 0a90 	vmov	s15, r0
 8015352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015356:	4b26      	ldr	r3, [pc, #152]	; (80153f0 <forward_cast+0x3744>)
 8015358:	4a29      	ldr	r2, [pc, #164]	; (8015400 <forward_cast+0x3754>)
 801535a:	ee17 0a90 	vmov	r0, s15
 801535e:	f7fd bd22 	b.w	8012da6 <forward_cast+0x10fa>
 8015362:	edd5 7a00 	vldr	s15, [r5]
 8015366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801536a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801536e:	ee17 0a90 	vmov	r0, s15
 8015372:	f7fd bcab 	b.w	8012ccc <forward_cast+0x1020>
 8015376:	e9d5 0100 	ldrd	r0, r1, [r5]
 801537a:	f7eb fd25 	bl	8000dc8 <__aeabi_l2f>
 801537e:	ee07 0a90 	vmov	s15, r0
 8015382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015386:	4b19      	ldr	r3, [pc, #100]	; (80153ec <forward_cast+0x3740>)
 8015388:	4a1c      	ldr	r2, [pc, #112]	; (80153fc <forward_cast+0x3750>)
 801538a:	ee17 0a90 	vmov	r0, s15
 801538e:	f7fe b902 	b.w	8013596 <forward_cast+0x18ea>
 8015392:	7828      	ldrb	r0, [r5, #0]
 8015394:	f7fe b8ff 	b.w	8013596 <forward_cast+0x18ea>
 8015398:	e9d5 0100 	ldrd	r0, r1, [r5]
 801539c:	f7eb fd0c 	bl	8000db8 <__aeabi_ul2f>
 80153a0:	ee07 0a90 	vmov	s15, r0
 80153a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80153a8:	4a14      	ldr	r2, [pc, #80]	; (80153fc <forward_cast+0x3750>)
 80153aa:	4b10      	ldr	r3, [pc, #64]	; (80153ec <forward_cast+0x3740>)
 80153ac:	ee17 0a90 	vmov	r0, s15
 80153b0:	f7fe b8f1 	b.w	8013596 <forward_cast+0x18ea>
 80153b4:	f9b5 0000 	ldrsh.w	r0, [r5]
 80153b8:	f7fe b8ed 	b.w	8013596 <forward_cast+0x18ea>
 80153bc:	f995 0000 	ldrsb.w	r0, [r5]
 80153c0:	f7fe b8e9 	b.w	8013596 <forward_cast+0x18ea>
 80153c4:	f995 0000 	ldrsb.w	r0, [r5]
 80153c8:	f7fc bd11 	b.w	8011dee <forward_cast+0x142>
 80153cc:	f995 0000 	ldrsb.w	r0, [r5]
 80153d0:	f7fe b930 	b.w	8013634 <forward_cast+0x1988>
 80153d4:	edd5 7a00 	vldr	s15, [r5]
 80153d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80153dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80153e0:	ee17 0a90 	vmov	r0, s15
 80153e4:	f7fe b926 	b.w	8013634 <forward_cast+0x1988>
 80153e8:	00041040 	.word	0x00041040
 80153ec:	00042040 	.word	0x00042040
 80153f0:	00841040 	.word	0x00841040
 80153f4:	00842040 	.word	0x00842040
 80153f8:	00840840 	.word	0x00840840
 80153fc:	00060440 	.word	0x00060440
 8015400:	01821040 	.word	0x01821040
 8015404:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015408:	f7eb fcde 	bl	8000dc8 <__aeabi_l2f>
 801540c:	ee07 0a90 	vmov	s15, r0
 8015410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015414:	4be2      	ldr	r3, [pc, #904]	; (80157a0 <forward_cast+0x3af4>)
 8015416:	4ae3      	ldr	r2, [pc, #908]	; (80157a4 <forward_cast+0x3af8>)
 8015418:	ee17 0a90 	vmov	r0, s15
 801541c:	f7fe b90a 	b.w	8013634 <forward_cast+0x1988>
 8015420:	7828      	ldrb	r0, [r5, #0]
 8015422:	f7fe b907 	b.w	8013634 <forward_cast+0x1988>
 8015426:	e9d5 0100 	ldrd	r0, r1, [r5]
 801542a:	f7eb fcc5 	bl	8000db8 <__aeabi_ul2f>
 801542e:	ee07 0a90 	vmov	s15, r0
 8015432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015436:	4adb      	ldr	r2, [pc, #876]	; (80157a4 <forward_cast+0x3af8>)
 8015438:	4bd9      	ldr	r3, [pc, #868]	; (80157a0 <forward_cast+0x3af4>)
 801543a:	ee17 0a90 	vmov	r0, s15
 801543e:	f7fe b8f9 	b.w	8013634 <forward_cast+0x1988>
 8015442:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015446:	f7fe b8f5 	b.w	8013634 <forward_cast+0x1988>
 801544a:	edd5 7a00 	vldr	s15, [r5]
 801544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015456:	ee17 0a90 	vmov	r0, s15
 801545a:	f7fe b89c 	b.w	8013596 <forward_cast+0x18ea>
 801545e:	f995 1000 	ldrsb.w	r1, [r5]
 8015462:	ee07 1a90 	vmov	s15, r1
 8015466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801546a:	f7fd b8e7 	b.w	801263c <forward_cast+0x990>
 801546e:	edd5 7a00 	vldr	s15, [r5]
 8015472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801547a:	ee17 1a90 	vmov	r1, s15
 801547e:	b209      	sxth	r1, r1
 8015480:	f7fd b98e 	b.w	80127a0 <forward_cast+0xaf4>
 8015484:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015488:	f7fd bc8d 	b.w	8012da6 <forward_cast+0x10fa>
 801548c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015490:	f7eb fc92 	bl	8000db8 <__aeabi_ul2f>
 8015494:	ee07 0a90 	vmov	s15, r0
 8015498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801549c:	4ac1      	ldr	r2, [pc, #772]	; (80157a4 <forward_cast+0x3af8>)
 801549e:	ee17 3a90 	vmov	r3, s15
 80154a2:	b299      	uxth	r1, r3
 80154a4:	4bbe      	ldr	r3, [pc, #760]	; (80157a0 <forward_cast+0x3af4>)
 80154a6:	f7fc bdff 	b.w	80120a8 <forward_cast+0x3fc>
 80154aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80154ae:	f7eb fc83 	bl	8000db8 <__aeabi_ul2f>
 80154b2:	ee07 0a90 	vmov	s15, r0
 80154b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154ba:	4bbb      	ldr	r3, [pc, #748]	; (80157a8 <forward_cast+0x3afc>)
 80154bc:	4abb      	ldr	r2, [pc, #748]	; (80157ac <forward_cast+0x3b00>)
 80154be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154c2:	f7fd b8bb 	b.w	801263c <forward_cast+0x990>
 80154c6:	edd5 7a00 	vldr	s15, [r5]
 80154ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80154ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154d6:	f7fd b8b1 	b.w	801263c <forward_cast+0x990>
 80154da:	7828      	ldrb	r0, [r5, #0]
 80154dc:	f7fc bd8c 	b.w	8011ff8 <forward_cast+0x34c>
 80154e0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80154e4:	f7eb fc68 	bl	8000db8 <__aeabi_ul2f>
 80154e8:	ee07 0a90 	vmov	s15, r0
 80154ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154f0:	4aaf      	ldr	r2, [pc, #700]	; (80157b0 <forward_cast+0x3b04>)
 80154f2:	4bac      	ldr	r3, [pc, #688]	; (80157a4 <forward_cast+0x3af8>)
 80154f4:	ee17 0a90 	vmov	r0, s15
 80154f8:	f7fd bb0b 	b.w	8012b12 <forward_cast+0xe66>
 80154fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015500:	f7eb fc5a 	bl	8000db8 <__aeabi_ul2f>
 8015504:	ee07 0a90 	vmov	s15, r0
 8015508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801550c:	4ba6      	ldr	r3, [pc, #664]	; (80157a8 <forward_cast+0x3afc>)
 801550e:	4aa9      	ldr	r2, [pc, #676]	; (80157b4 <forward_cast+0x3b08>)
 8015510:	ee17 0a90 	vmov	r0, s15
 8015514:	f7fc be12 	b.w	801213c <forward_cast+0x490>
 8015518:	edd5 7a00 	vldr	s15, [r5]
 801551c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015524:	ee17 0a90 	vmov	r0, s15
 8015528:	f7fc be08 	b.w	801213c <forward_cast+0x490>
 801552c:	7828      	ldrb	r0, [r5, #0]
 801552e:	f7fd b9bf 	b.w	80128b0 <forward_cast+0xc04>
 8015532:	edd5 7a00 	vldr	s15, [r5]
 8015536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801553a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801553e:	ee17 1a90 	vmov	r1, s15
 8015542:	b289      	uxth	r1, r1
 8015544:	f7fc bdb0 	b.w	80120a8 <forward_cast+0x3fc>
 8015548:	7829      	ldrb	r1, [r5, #0]
 801554a:	f7fd b8b1 	b.w	80126b0 <forward_cast+0xa04>
 801554e:	edd5 7a00 	vldr	s15, [r5]
 8015552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801555a:	ee17 0a90 	vmov	r0, s15
 801555e:	f7fd bad8 	b.w	8012b12 <forward_cast+0xe66>
 8015562:	7828      	ldrb	r0, [r5, #0]
 8015564:	f7fc bf04 	b.w	8012370 <forward_cast+0x6c4>
 8015568:	e9d5 0100 	ldrd	r0, r1, [r5]
 801556c:	f7eb fc24 	bl	8000db8 <__aeabi_ul2f>
 8015570:	ee07 0a90 	vmov	s15, r0
 8015574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015578:	4a89      	ldr	r2, [pc, #548]	; (80157a0 <forward_cast+0x3af4>)
 801557a:	4b8f      	ldr	r3, [pc, #572]	; (80157b8 <forward_cast+0x3b0c>)
 801557c:	ee17 0a90 	vmov	r0, s15
 8015580:	f7fc bef6 	b.w	8012370 <forward_cast+0x6c4>
 8015584:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015588:	f7eb fc16 	bl	8000db8 <__aeabi_ul2f>
 801558c:	ee07 0a90 	vmov	s15, r0
 8015590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015594:	4a88      	ldr	r2, [pc, #544]	; (80157b8 <forward_cast+0x3b0c>)
 8015596:	4b84      	ldr	r3, [pc, #528]	; (80157a8 <forward_cast+0x3afc>)
 8015598:	ee17 0a90 	vmov	r0, s15
 801559c:	f7fd b988 	b.w	80128b0 <forward_cast+0xc04>
 80155a0:	edd5 7a00 	vldr	s15, [r5]
 80155a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80155a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155ac:	ee17 0a90 	vmov	r0, s15
 80155b0:	f7fd b97e 	b.w	80128b0 <forward_cast+0xc04>
 80155b4:	7829      	ldrb	r1, [r5, #0]
 80155b6:	f7fc bd77 	b.w	80120a8 <forward_cast+0x3fc>
 80155ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80155be:	f7eb fbfb 	bl	8000db8 <__aeabi_ul2f>
 80155c2:	ee07 0a90 	vmov	s15, r0
 80155c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155ca:	4a7b      	ldr	r2, [pc, #492]	; (80157b8 <forward_cast+0x3b0c>)
 80155cc:	4b76      	ldr	r3, [pc, #472]	; (80157a8 <forward_cast+0x3afc>)
 80155ce:	ee17 0a90 	vmov	r0, s15
 80155d2:	f7fc bc0c 	b.w	8011dee <forward_cast+0x142>
 80155d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80155da:	f7eb fbed 	bl	8000db8 <__aeabi_ul2f>
 80155de:	ee07 0a90 	vmov	s15, r0
 80155e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155e6:	4a6f      	ldr	r2, [pc, #444]	; (80157a4 <forward_cast+0x3af8>)
 80155e8:	4b6d      	ldr	r3, [pc, #436]	; (80157a0 <forward_cast+0x3af4>)
 80155ea:	ee17 0a90 	vmov	r0, s15
 80155ee:	f7fd b9dc 	b.w	80129aa <forward_cast+0xcfe>
 80155f2:	edd5 7a00 	vldr	s15, [r5]
 80155f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80155fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155fe:	ee17 0a90 	vmov	r0, s15
 8015602:	f7fd b9d2 	b.w	80129aa <forward_cast+0xcfe>
 8015606:	7828      	ldrb	r0, [r5, #0]
 8015608:	f7fd ba0d 	b.w	8012a26 <forward_cast+0xd7a>
 801560c:	edd5 7a00 	vldr	s15, [r5]
 8015610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015618:	ee17 0a90 	vmov	r0, s15
 801561c:	f7fc bea8 	b.w	8012370 <forward_cast+0x6c4>
 8015620:	7828      	ldrb	r0, [r5, #0]
 8015622:	f7fc bbe4 	b.w	8011dee <forward_cast+0x142>
 8015626:	edd5 7a00 	vldr	s15, [r5]
 801562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801562e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015632:	ee17 0a90 	vmov	r0, s15
 8015636:	f7fc bbda 	b.w	8011dee <forward_cast+0x142>
 801563a:	7829      	ldrb	r1, [r5, #0]
 801563c:	f7fd b874 	b.w	8012728 <forward_cast+0xa7c>
 8015640:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015644:	f7eb fbc0 	bl	8000dc8 <__aeabi_l2f>
 8015648:	ee07 0a90 	vmov	s15, r0
 801564c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015650:	4b53      	ldr	r3, [pc, #332]	; (80157a0 <forward_cast+0x3af4>)
 8015652:	4a54      	ldr	r2, [pc, #336]	; (80157a4 <forward_cast+0x3af8>)
 8015654:	ee17 0a90 	vmov	r0, s15
 8015658:	f7fe b83b 	b.w	80136d2 <forward_cast+0x1a26>
 801565c:	7828      	ldrb	r0, [r5, #0]
 801565e:	f7fe b838 	b.w	80136d2 <forward_cast+0x1a26>
 8015662:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015666:	f7eb fba7 	bl	8000db8 <__aeabi_ul2f>
 801566a:	ee07 0a90 	vmov	s15, r0
 801566e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015672:	4a4c      	ldr	r2, [pc, #304]	; (80157a4 <forward_cast+0x3af8>)
 8015674:	4b4a      	ldr	r3, [pc, #296]	; (80157a0 <forward_cast+0x3af4>)
 8015676:	ee17 0a90 	vmov	r0, s15
 801567a:	f7fe b82a 	b.w	80136d2 <forward_cast+0x1a26>
 801567e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015682:	f7fe b826 	b.w	80136d2 <forward_cast+0x1a26>
 8015686:	f995 0000 	ldrsb.w	r0, [r5]
 801568a:	f7fe ba89 	b.w	8013ba0 <forward_cast+0x1ef4>
 801568e:	edd5 7a00 	vldr	s15, [r5]
 8015692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801569a:	ee17 0a90 	vmov	r0, s15
 801569e:	f7fe b9cd 	b.w	8013a3c <forward_cast+0x1d90>
 80156a2:	f995 0000 	ldrsb.w	r0, [r5]
 80156a6:	f7fe bacb 	b.w	8013c40 <forward_cast+0x1f94>
 80156aa:	edd5 7a00 	vldr	s15, [r5]
 80156ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80156b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156b6:	ee17 0a90 	vmov	r0, s15
 80156ba:	f7fe bac1 	b.w	8013c40 <forward_cast+0x1f94>
 80156be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80156c2:	f7eb fb81 	bl	8000dc8 <__aeabi_l2f>
 80156c6:	ee07 0a90 	vmov	s15, r0
 80156ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156ce:	4b36      	ldr	r3, [pc, #216]	; (80157a8 <forward_cast+0x3afc>)
 80156d0:	4a39      	ldr	r2, [pc, #228]	; (80157b8 <forward_cast+0x3b0c>)
 80156d2:	ee17 0a90 	vmov	r0, s15
 80156d6:	f7fe bab3 	b.w	8013c40 <forward_cast+0x1f94>
 80156da:	7828      	ldrb	r0, [r5, #0]
 80156dc:	f7fe bab0 	b.w	8013c40 <forward_cast+0x1f94>
 80156e0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80156e4:	f7eb fb68 	bl	8000db8 <__aeabi_ul2f>
 80156e8:	ee07 0a90 	vmov	s15, r0
 80156ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156f0:	4a31      	ldr	r2, [pc, #196]	; (80157b8 <forward_cast+0x3b0c>)
 80156f2:	4b2d      	ldr	r3, [pc, #180]	; (80157a8 <forward_cast+0x3afc>)
 80156f4:	ee17 0a90 	vmov	r0, s15
 80156f8:	f7fe baa2 	b.w	8013c40 <forward_cast+0x1f94>
 80156fc:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015700:	f7fe ba9e 	b.w	8013c40 <forward_cast+0x1f94>
 8015704:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015708:	f7eb fb5e 	bl	8000dc8 <__aeabi_l2f>
 801570c:	ee07 0a90 	vmov	s15, r0
 8015710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015714:	4b23      	ldr	r3, [pc, #140]	; (80157a4 <forward_cast+0x3af8>)
 8015716:	4a26      	ldr	r2, [pc, #152]	; (80157b0 <forward_cast+0x3b04>)
 8015718:	ee17 0a90 	vmov	r0, s15
 801571c:	f7fd b9f9 	b.w	8012b12 <forward_cast+0xe66>
 8015720:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015724:	f7eb fb50 	bl	8000dc8 <__aeabi_l2f>
 8015728:	ee07 0a90 	vmov	s15, r0
 801572c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015730:	4a20      	ldr	r2, [pc, #128]	; (80157b4 <forward_cast+0x3b08>)
 8015732:	4b1d      	ldr	r3, [pc, #116]	; (80157a8 <forward_cast+0x3afc>)
 8015734:	ee17 0a90 	vmov	r0, s15
 8015738:	f7fc bd00 	b.w	801213c <forward_cast+0x490>
 801573c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015740:	f7eb fb42 	bl	8000dc8 <__aeabi_l2f>
 8015744:	ee07 0a90 	vmov	s15, r0
 8015748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801574c:	4a15      	ldr	r2, [pc, #84]	; (80157a4 <forward_cast+0x3af8>)
 801574e:	ee17 3a90 	vmov	r3, s15
 8015752:	b299      	uxth	r1, r3
 8015754:	4b12      	ldr	r3, [pc, #72]	; (80157a0 <forward_cast+0x3af4>)
 8015756:	f7fc bd3d 	b.w	80121d4 <forward_cast+0x528>
 801575a:	7828      	ldrb	r0, [r5, #0]
 801575c:	f7fc bd76 	b.w	801224c <forward_cast+0x5a0>
 8015760:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015764:	f7eb fb30 	bl	8000dc8 <__aeabi_l2f>
 8015768:	ee07 0a90 	vmov	s15, r0
 801576c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015770:	4b0b      	ldr	r3, [pc, #44]	; (80157a0 <forward_cast+0x3af4>)
 8015772:	4a0c      	ldr	r2, [pc, #48]	; (80157a4 <forward_cast+0x3af8>)
 8015774:	ee17 0a90 	vmov	r0, s15
 8015778:	f7fe b911 	b.w	801399e <forward_cast+0x1cf2>
 801577c:	7828      	ldrb	r0, [r5, #0]
 801577e:	f7fe b90e 	b.w	801399e <forward_cast+0x1cf2>
 8015782:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015786:	f7eb fb17 	bl	8000db8 <__aeabi_ul2f>
 801578a:	ee07 0a90 	vmov	s15, r0
 801578e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015792:	4a04      	ldr	r2, [pc, #16]	; (80157a4 <forward_cast+0x3af8>)
 8015794:	4b02      	ldr	r3, [pc, #8]	; (80157a0 <forward_cast+0x3af4>)
 8015796:	ee17 0a90 	vmov	r0, s15
 801579a:	f7fe b900 	b.w	801399e <forward_cast+0x1cf2>
 801579e:	bf00      	nop
 80157a0:	00041040 	.word	0x00041040
 80157a4:	00042040 	.word	0x00042040
 80157a8:	00840840 	.word	0x00840840
 80157ac:	00842040 	.word	0x00842040
 80157b0:	00060440 	.word	0x00060440
 80157b4:	00040440 	.word	0x00040440
 80157b8:	00841040 	.word	0x00841040
 80157bc:	f9b5 0000 	ldrsh.w	r0, [r5]
 80157c0:	f7fe b8ed 	b.w	801399e <forward_cast+0x1cf2>
 80157c4:	f995 0000 	ldrsb.w	r0, [r5]
 80157c8:	f7fe b938 	b.w	8013a3c <forward_cast+0x1d90>
 80157cc:	f995 0000 	ldrsb.w	r0, [r5]
 80157d0:	f7fe b8e5 	b.w	801399e <forward_cast+0x1cf2>
 80157d4:	edd5 7a00 	vldr	s15, [r5]
 80157d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80157dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157e0:	ee17 0a90 	vmov	r0, s15
 80157e4:	f7fe b8db 	b.w	801399e <forward_cast+0x1cf2>
 80157e8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80157ec:	f7eb faec 	bl	8000dc8 <__aeabi_l2f>
 80157f0:	ee07 0a90 	vmov	s15, r0
 80157f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157f8:	4bc7      	ldr	r3, [pc, #796]	; (8015b18 <forward_cast+0x3e6c>)
 80157fa:	4ac8      	ldr	r2, [pc, #800]	; (8015b1c <forward_cast+0x3e70>)
 80157fc:	ee17 0a90 	vmov	r0, s15
 8015800:	f7fe b91c 	b.w	8013a3c <forward_cast+0x1d90>
 8015804:	7828      	ldrb	r0, [r5, #0]
 8015806:	f7fe b919 	b.w	8013a3c <forward_cast+0x1d90>
 801580a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801580e:	f7eb fad3 	bl	8000db8 <__aeabi_ul2f>
 8015812:	ee07 0a90 	vmov	s15, r0
 8015816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801581a:	4ac0      	ldr	r2, [pc, #768]	; (8015b1c <forward_cast+0x3e70>)
 801581c:	4bbe      	ldr	r3, [pc, #760]	; (8015b18 <forward_cast+0x3e6c>)
 801581e:	ee17 0a90 	vmov	r0, s15
 8015822:	f7fe b90b 	b.w	8013a3c <forward_cast+0x1d90>
 8015826:	f9b5 0000 	ldrsh.w	r0, [r5]
 801582a:	f7fe b907 	b.w	8013a3c <forward_cast+0x1d90>
 801582e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015832:	f7eb fac9 	bl	8000dc8 <__aeabi_l2f>
 8015836:	ee07 0a90 	vmov	s15, r0
 801583a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801583e:	4bb7      	ldr	r3, [pc, #732]	; (8015b1c <forward_cast+0x3e70>)
 8015840:	4ab5      	ldr	r2, [pc, #724]	; (8015b18 <forward_cast+0x3e6c>)
 8015842:	ee17 0a90 	vmov	r0, s15
 8015846:	f7fe b95d 	b.w	8013b04 <forward_cast+0x1e58>
 801584a:	7828      	ldrb	r0, [r5, #0]
 801584c:	f7fe b95a 	b.w	8013b04 <forward_cast+0x1e58>
 8015850:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015854:	f7eb fab0 	bl	8000db8 <__aeabi_ul2f>
 8015858:	ee07 0a90 	vmov	s15, r0
 801585c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015860:	4aad      	ldr	r2, [pc, #692]	; (8015b18 <forward_cast+0x3e6c>)
 8015862:	4bae      	ldr	r3, [pc, #696]	; (8015b1c <forward_cast+0x3e70>)
 8015864:	ee17 0a90 	vmov	r0, s15
 8015868:	f7fe b94c 	b.w	8013b04 <forward_cast+0x1e58>
 801586c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015870:	f7fe b948 	b.w	8013b04 <forward_cast+0x1e58>
 8015874:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015878:	f7eb faa6 	bl	8000dc8 <__aeabi_l2f>
 801587c:	ee07 0a90 	vmov	s15, r0
 8015880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015884:	4ba4      	ldr	r3, [pc, #656]	; (8015b18 <forward_cast+0x3e6c>)
 8015886:	4aa6      	ldr	r2, [pc, #664]	; (8015b20 <forward_cast+0x3e74>)
 8015888:	ee17 0a90 	vmov	r0, s15
 801588c:	f7fe b988 	b.w	8013ba0 <forward_cast+0x1ef4>
 8015890:	7828      	ldrb	r0, [r5, #0]
 8015892:	f7fe b985 	b.w	8013ba0 <forward_cast+0x1ef4>
 8015896:	e9d5 0100 	ldrd	r0, r1, [r5]
 801589a:	f7eb fa8d 	bl	8000db8 <__aeabi_ul2f>
 801589e:	ee07 0a90 	vmov	s15, r0
 80158a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80158a6:	4a9e      	ldr	r2, [pc, #632]	; (8015b20 <forward_cast+0x3e74>)
 80158a8:	4b9b      	ldr	r3, [pc, #620]	; (8015b18 <forward_cast+0x3e6c>)
 80158aa:	ee17 0a90 	vmov	r0, s15
 80158ae:	f7fe b977 	b.w	8013ba0 <forward_cast+0x1ef4>
 80158b2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80158b6:	f7fe b973 	b.w	8013ba0 <forward_cast+0x1ef4>
 80158ba:	f995 0000 	ldrsb.w	r0, [r5]
 80158be:	f7fe b921 	b.w	8013b04 <forward_cast+0x1e58>
 80158c2:	edd5 7a00 	vldr	s15, [r5]
 80158c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80158ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80158ce:	ee17 0a90 	vmov	r0, s15
 80158d2:	f7fe b917 	b.w	8013b04 <forward_cast+0x1e58>
 80158d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80158da:	f7eb fa75 	bl	8000dc8 <__aeabi_l2f>
 80158de:	ee07 0a90 	vmov	s15, r0
 80158e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80158e6:	4b8d      	ldr	r3, [pc, #564]	; (8015b1c <forward_cast+0x3e70>)
 80158e8:	4a8b      	ldr	r2, [pc, #556]	; (8015b18 <forward_cast+0x3e6c>)
 80158ea:	ee17 0a90 	vmov	r0, s15
 80158ee:	f7fc bb20 	b.w	8011f32 <forward_cast+0x286>
 80158f2:	7828      	ldrb	r0, [r5, #0]
 80158f4:	f7fd b9b4 	b.w	8012c60 <forward_cast+0xfb4>
 80158f8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80158fc:	f7eb fa64 	bl	8000dc8 <__aeabi_l2f>
 8015900:	ee07 0a90 	vmov	s15, r0
 8015904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015908:	4b83      	ldr	r3, [pc, #524]	; (8015b18 <forward_cast+0x3e6c>)
 801590a:	4a85      	ldr	r2, [pc, #532]	; (8015b20 <forward_cast+0x3e74>)
 801590c:	ee17 0a90 	vmov	r0, s15
 8015910:	f7fe b9e5 	b.w	8013cde <forward_cast+0x2032>
 8015914:	7828      	ldrb	r0, [r5, #0]
 8015916:	f7fe b9e2 	b.w	8013cde <forward_cast+0x2032>
 801591a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801591e:	f7eb fa4b 	bl	8000db8 <__aeabi_ul2f>
 8015922:	ee07 0a90 	vmov	s15, r0
 8015926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801592a:	4a7d      	ldr	r2, [pc, #500]	; (8015b20 <forward_cast+0x3e74>)
 801592c:	4b7a      	ldr	r3, [pc, #488]	; (8015b18 <forward_cast+0x3e6c>)
 801592e:	ee17 0a90 	vmov	r0, s15
 8015932:	f7fe b9d4 	b.w	8013cde <forward_cast+0x2032>
 8015936:	f9b5 0000 	ldrsh.w	r0, [r5]
 801593a:	f7fe b9d0 	b.w	8013cde <forward_cast+0x2032>
 801593e:	f995 0000 	ldrsb.w	r0, [r5]
 8015942:	f7fe b9cc 	b.w	8013cde <forward_cast+0x2032>
 8015946:	edd5 7a00 	vldr	s15, [r5]
 801594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801594e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015952:	ee17 0a90 	vmov	r0, s15
 8015956:	f7fe b923 	b.w	8013ba0 <forward_cast+0x1ef4>
 801595a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801595e:	f7eb fa33 	bl	8000dc8 <__aeabi_l2f>
 8015962:	ee07 0a90 	vmov	s15, r0
 8015966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801596a:	4a6d      	ldr	r2, [pc, #436]	; (8015b20 <forward_cast+0x3e74>)
 801596c:	ee17 3a90 	vmov	r3, s15
 8015970:	b299      	uxth	r1, r3
 8015972:	4b69      	ldr	r3, [pc, #420]	; (8015b18 <forward_cast+0x3e6c>)
 8015974:	f7fc bb98 	b.w	80120a8 <forward_cast+0x3fc>
 8015978:	f9b5 0000 	ldrsh.w	r0, [r5]
 801597c:	f7fd b815 	b.w	80129aa <forward_cast+0xcfe>
 8015980:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015984:	9301      	str	r3, [sp, #4]
 8015986:	f7eb fa1f 	bl	8000dc8 <__aeabi_l2f>
 801598a:	ee07 0a90 	vmov	s15, r0
 801598e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015992:	4a62      	ldr	r2, [pc, #392]	; (8015b1c <forward_cast+0x3e70>)
 8015994:	9b01      	ldr	r3, [sp, #4]
 8015996:	ee17 0a90 	vmov	r0, s15
 801599a:	f7fe ba05 	b.w	8013da8 <forward_cast+0x20fc>
 801599e:	7828      	ldrb	r0, [r5, #0]
 80159a0:	f7fe ba02 	b.w	8013da8 <forward_cast+0x20fc>
 80159a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80159a8:	9301      	str	r3, [sp, #4]
 80159aa:	f7eb fa05 	bl	8000db8 <__aeabi_ul2f>
 80159ae:	ee07 0a90 	vmov	s15, r0
 80159b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80159b6:	9b01      	ldr	r3, [sp, #4]
 80159b8:	4a58      	ldr	r2, [pc, #352]	; (8015b1c <forward_cast+0x3e70>)
 80159ba:	ee17 0a90 	vmov	r0, s15
 80159be:	f7fe b9f3 	b.w	8013da8 <forward_cast+0x20fc>
 80159c2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80159c6:	f7fe b9ef 	b.w	8013da8 <forward_cast+0x20fc>
 80159ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80159ce:	f7eb f9fb 	bl	8000dc8 <__aeabi_l2f>
 80159d2:	ee07 0a90 	vmov	s15, r0
 80159d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80159da:	4b50      	ldr	r3, [pc, #320]	; (8015b1c <forward_cast+0x3e70>)
 80159dc:	edcd 7a01 	vstr	s15, [sp, #4]
 80159e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80159e4:	4a4c      	ldr	r2, [pc, #304]	; (8015b18 <forward_cast+0x3e6c>)
 80159e6:	f7fe bae3 	b.w	8013fb0 <forward_cast+0x2304>
 80159ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80159ee:	f7eb f9e3 	bl	8000db8 <__aeabi_ul2f>
 80159f2:	ee07 0a90 	vmov	s15, r0
 80159f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80159fa:	4a47      	ldr	r2, [pc, #284]	; (8015b18 <forward_cast+0x3e6c>)
 80159fc:	edcd 7a01 	vstr	s15, [sp, #4]
 8015a00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8015a04:	4b45      	ldr	r3, [pc, #276]	; (8015b1c <forward_cast+0x3e70>)
 8015a06:	f7fe bad3 	b.w	8013fb0 <forward_cast+0x2304>
 8015a0a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015a0e:	f7eb f9db 	bl	8000dc8 <__aeabi_l2f>
 8015a12:	ee07 0a90 	vmov	s15, r0
 8015a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015a1a:	4b3f      	ldr	r3, [pc, #252]	; (8015b18 <forward_cast+0x3e6c>)
 8015a1c:	4a40      	ldr	r2, [pc, #256]	; (8015b20 <forward_cast+0x3e74>)
 8015a1e:	ee17 0a90 	vmov	r0, s15
 8015a22:	f7fc bfc2 	b.w	80129aa <forward_cast+0xcfe>
 8015a26:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015a2a:	ee07 1a90 	vmov	s15, r1
 8015a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a32:	f7fc be03 	b.w	801263c <forward_cast+0x990>
 8015a36:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015a3a:	f7eb f9c5 	bl	8000dc8 <__aeabi_l2f>
 8015a3e:	ee07 0a90 	vmov	s15, r0
 8015a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015a46:	4b34      	ldr	r3, [pc, #208]	; (8015b18 <forward_cast+0x3e6c>)
 8015a48:	4a36      	ldr	r2, [pc, #216]	; (8015b24 <forward_cast+0x3e78>)
 8015a4a:	ee17 0a90 	vmov	r0, s15
 8015a4e:	f7fd b93d 	b.w	8012ccc <forward_cast+0x1020>
 8015a52:	7828      	ldrb	r0, [r5, #0]
 8015a54:	f7fd b9a7 	b.w	8012da6 <forward_cast+0x10fa>
 8015a58:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015a5c:	f7eb f9b4 	bl	8000dc8 <__aeabi_l2f>
 8015a60:	ee07 0a90 	vmov	s15, r0
 8015a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015a68:	4b2c      	ldr	r3, [pc, #176]	; (8015b1c <forward_cast+0x3e70>)
 8015a6a:	edcd 7a01 	vstr	s15, [sp, #4]
 8015a6e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8015a72:	4a2b      	ldr	r2, [pc, #172]	; (8015b20 <forward_cast+0x3e74>)
 8015a74:	f7fd b95f 	b.w	8012d36 <forward_cast+0x108a>
 8015a78:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015a7c:	f7fd b849 	b.w	8012b12 <forward_cast+0xe66>
 8015a80:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015a84:	f7eb f9a0 	bl	8000dc8 <__aeabi_l2f>
 8015a88:	ee07 0a90 	vmov	s15, r0
 8015a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015a90:	4b23      	ldr	r3, [pc, #140]	; (8015b20 <forward_cast+0x3e74>)
 8015a92:	4a25      	ldr	r2, [pc, #148]	; (8015b28 <forward_cast+0x3e7c>)
 8015a94:	ee17 0a90 	vmov	r0, s15
 8015a98:	f7fe bae7 	b.w	801406a <forward_cast+0x23be>
 8015a9c:	7828      	ldrb	r0, [r5, #0]
 8015a9e:	f7fe bae4 	b.w	801406a <forward_cast+0x23be>
 8015aa2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015aa6:	f7eb f987 	bl	8000db8 <__aeabi_ul2f>
 8015aaa:	ee07 0a90 	vmov	s15, r0
 8015aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ab2:	4a1d      	ldr	r2, [pc, #116]	; (8015b28 <forward_cast+0x3e7c>)
 8015ab4:	4b1a      	ldr	r3, [pc, #104]	; (8015b20 <forward_cast+0x3e74>)
 8015ab6:	ee17 0a90 	vmov	r0, s15
 8015aba:	f7fe bad6 	b.w	801406a <forward_cast+0x23be>
 8015abe:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015ac2:	f7fe bad2 	b.w	801406a <forward_cast+0x23be>
 8015ac6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015aca:	f7eb f97d 	bl	8000dc8 <__aeabi_l2f>
 8015ace:	ee07 0a90 	vmov	s15, r0
 8015ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ad6:	4b12      	ldr	r3, [pc, #72]	; (8015b20 <forward_cast+0x3e74>)
 8015ad8:	4a13      	ldr	r2, [pc, #76]	; (8015b28 <forward_cast+0x3e7c>)
 8015ada:	ee17 0a90 	vmov	r0, s15
 8015ade:	f7fe bb0d 	b.w	80140fc <forward_cast+0x2450>
 8015ae2:	7828      	ldrb	r0, [r5, #0]
 8015ae4:	f7fe bb0a 	b.w	80140fc <forward_cast+0x2450>
 8015ae8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015aec:	f7eb f964 	bl	8000db8 <__aeabi_ul2f>
 8015af0:	ee07 0a90 	vmov	s15, r0
 8015af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015af8:	4a0b      	ldr	r2, [pc, #44]	; (8015b28 <forward_cast+0x3e7c>)
 8015afa:	4b09      	ldr	r3, [pc, #36]	; (8015b20 <forward_cast+0x3e74>)
 8015afc:	ee17 0a90 	vmov	r0, s15
 8015b00:	f7fe bafc 	b.w	80140fc <forward_cast+0x2450>
 8015b04:	f9b5 0000 	ldrsh.w	r0, [r5]
 8015b08:	f7fe baf8 	b.w	80140fc <forward_cast+0x2450>
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	deff      	udf	#255	; 0xff
 8015b12:	2300      	movs	r3, #0
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	deff      	udf	#255	; 0xff
 8015b18:	00041040 	.word	0x00041040
 8015b1c:	00841040 	.word	0x00841040
 8015b20:	00042040 	.word	0x00042040
 8015b24:	00040440 	.word	0x00040440
 8015b28:	00060440 	.word	0x00060440

08015b2c <forward_zipmap>:
 8015b2c:	6983      	ldr	r3, [r0, #24]
 8015b2e:	881a      	ldrh	r2, [r3, #0]
 8015b30:	2a00      	cmp	r2, #0
 8015b32:	d047      	beq.n	8015bc4 <forward_zipmap+0x98>
 8015b34:	b470      	push	{r4, r5, r6}
 8015b36:	685d      	ldr	r5, [r3, #4]
 8015b38:	686b      	ldr	r3, [r5, #4]
 8015b3a:	b103      	cbz	r3, 8015b3e <forward_zipmap+0x12>
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2a01      	cmp	r2, #1
 8015b40:	f000 8094 	beq.w	8015c6c <forward_zipmap+0x140>
 8015b44:	6929      	ldr	r1, [r5, #16]
 8015b46:	2900      	cmp	r1, #0
 8015b48:	f000 808c 	beq.w	8015c64 <forward_zipmap+0x138>
 8015b4c:	680c      	ldr	r4, [r1, #0]
 8015b4e:	68d8      	ldr	r0, [r3, #12]
 8015b50:	6999      	ldr	r1, [r3, #24]
 8015b52:	69a3      	ldr	r3, [r4, #24]
 8015b54:	68c4      	ldr	r4, [r0, #12]
 8015b56:	6840      	ldr	r0, [r0, #4]
 8015b58:	6889      	ldr	r1, [r1, #8]
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	2a02      	cmp	r2, #2
 8015b5e:	fb00 f404 	mul.w	r4, r0, r4
 8015b62:	f000 8086 	beq.w	8015c72 <forward_zipmap+0x146>
 8015b66:	69ea      	ldr	r2, [r5, #28]
 8015b68:	2a00      	cmp	r2, #0
 8015b6a:	d07d      	beq.n	8015c68 <forward_zipmap+0x13c>
 8015b6c:	6812      	ldr	r2, [r2, #0]
 8015b6e:	6990      	ldr	r0, [r2, #24]
 8015b70:	68d5      	ldr	r5, [r2, #12]
 8015b72:	6802      	ldr	r2, [r0, #0]
 8015b74:	686d      	ldr	r5, [r5, #4]
 8015b76:	6886      	ldr	r6, [r0, #8]
 8015b78:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8015b7c:	b304      	cbz	r4, 8015bc0 <forward_zipmap+0x94>
 8015b7e:	2a10      	cmp	r2, #16
 8015b80:	d022      	beq.n	8015bc8 <forward_zipmap+0x9c>
 8015b82:	2a08      	cmp	r2, #8
 8015b84:	d03f      	beq.n	8015c06 <forward_zipmap+0xda>
 8015b86:	2000      	movs	r0, #0
 8015b88:	4684      	mov	ip, r0
 8015b8a:	4285      	cmp	r5, r0
 8015b8c:	bf14      	ite	ne
 8015b8e:	4602      	movne	r2, r0
 8015b90:	2200      	moveq	r2, #0
 8015b92:	f103 0308 	add.w	r3, r3, #8
 8015b96:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8015b9a:	ee07 2a90 	vmov	s15, r2
 8015b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ba2:	f10c 0c01 	add.w	ip, ip, #1
 8015ba6:	ee17 2a90 	vmov	r2, s15
 8015baa:	f843 2c08 	str.w	r2, [r3, #-8]
 8015bae:	f851 2b04 	ldr.w	r2, [r1], #4
 8015bb2:	f843 2c04 	str.w	r2, [r3, #-4]
 8015bb6:	bf14      	ite	ne
 8015bb8:	3001      	addne	r0, #1
 8015bba:	2001      	moveq	r0, #1
 8015bbc:	4564      	cmp	r4, ip
 8015bbe:	d1e4      	bne.n	8015b8a <forward_zipmap+0x5e>
 8015bc0:	bc70      	pop	{r4, r5, r6}
 8015bc2:	4770      	bx	lr
 8015bc4:	6853      	ldr	r3, [r2, #4]
 8015bc6:	deff      	udf	#255	; 0xff
 8015bc8:	2000      	movs	r0, #0
 8015bca:	4684      	mov	ip, r0
 8015bcc:	4285      	cmp	r5, r0
 8015bce:	bf14      	ite	ne
 8015bd0:	4602      	movne	r2, r0
 8015bd2:	2200      	moveq	r2, #0
 8015bd4:	f103 0308 	add.w	r3, r3, #8
 8015bd8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8015bdc:	ee07 2a90 	vmov	s15, r2
 8015be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015be4:	f10c 0c01 	add.w	ip, ip, #1
 8015be8:	ee17 2a90 	vmov	r2, s15
 8015bec:	f843 2c08 	str.w	r2, [r3, #-8]
 8015bf0:	f851 2b04 	ldr.w	r2, [r1], #4
 8015bf4:	f843 2c04 	str.w	r2, [r3, #-4]
 8015bf8:	bf14      	ite	ne
 8015bfa:	3001      	addne	r0, #1
 8015bfc:	2001      	moveq	r0, #1
 8015bfe:	4564      	cmp	r4, ip
 8015c00:	d1e4      	bne.n	8015bcc <forward_zipmap+0xa0>
 8015c02:	bc70      	pop	{r4, r5, r6}
 8015c04:	4770      	bx	lr
 8015c06:	2200      	movs	r2, #0
 8015c08:	4610      	mov	r0, r2
 8015c0a:	4295      	cmp	r5, r2
 8015c0c:	f100 0001 	add.w	r0, r0, #1
 8015c10:	d017      	beq.n	8015c42 <forward_zipmap+0x116>
 8015c12:	f816 c002 	ldrb.w	ip, [r6, r2]
 8015c16:	ee07 ca90 	vmov	s15, ip
 8015c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c1e:	4284      	cmp	r4, r0
 8015c20:	ee17 ca90 	vmov	ip, s15
 8015c24:	f8c3 c000 	str.w	ip, [r3]
 8015c28:	f851 cb04 	ldr.w	ip, [r1], #4
 8015c2c:	f8c3 c004 	str.w	ip, [r3, #4]
 8015c30:	f102 0201 	add.w	r2, r2, #1
 8015c34:	f103 0308 	add.w	r3, r3, #8
 8015c38:	d0c2      	beq.n	8015bc0 <forward_zipmap+0x94>
 8015c3a:	4295      	cmp	r5, r2
 8015c3c:	f100 0001 	add.w	r0, r0, #1
 8015c40:	d1e7      	bne.n	8015c12 <forward_zipmap+0xe6>
 8015c42:	7832      	ldrb	r2, [r6, #0]
 8015c44:	ee07 2a90 	vmov	s15, r2
 8015c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c4c:	4284      	cmp	r4, r0
 8015c4e:	ee17 2a90 	vmov	r2, s15
 8015c52:	601a      	str	r2, [r3, #0]
 8015c54:	f851 2b04 	ldr.w	r2, [r1], #4
 8015c58:	605a      	str	r2, [r3, #4]
 8015c5a:	f103 0308 	add.w	r3, r3, #8
 8015c5e:	d0af      	beq.n	8015bc0 <forward_zipmap+0x94>
 8015c60:	2201      	movs	r2, #1
 8015c62:	e7d2      	b.n	8015c0a <forward_zipmap+0xde>
 8015c64:	698b      	ldr	r3, [r1, #24]
 8015c66:	deff      	udf	#255	; 0xff
 8015c68:	68d3      	ldr	r3, [r2, #12]
 8015c6a:	deff      	udf	#255	; 0xff
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	deff      	udf	#255	; 0xff
 8015c72:	2300      	movs	r3, #0
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	deff      	udf	#255	; 0xff

08015c78 <svc_ovo_output>:
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	6886      	ldr	r6, [r0, #8]
 8015c7e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8015c80:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
 8015c84:	b08d      	sub	sp, #52	; 0x34
 8015c86:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8015c8a:	1e71      	subs	r1, r6, #1
 8015c8c:	461d      	mov	r5, r3
 8015c8e:	9307      	str	r3, [sp, #28]
 8015c90:	fb06 f301 	mul.w	r3, r6, r1
 8015c94:	9103      	str	r1, [sp, #12]
 8015c96:	9408      	str	r4, [sp, #32]
 8015c98:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8015c9c:	eb05 0ec3 	add.w	lr, r5, r3, lsl #3
 8015ca0:	2900      	cmp	r1, #0
 8015ca2:	f000 80b4 	beq.w	8015e0e <svc_ovo_output+0x196>
 8015ca6:	2e00      	cmp	r6, #0
 8015ca8:	d052      	beq.n	8015d50 <svc_ovo_output+0xd8>
 8015caa:	00b1      	lsls	r1, r6, #2
 8015cac:	e9cd ec00 	strd	lr, ip, [sp]
 8015cb0:	e9cd ce0a 	strd	ip, lr, [sp, #40]	; 0x28
 8015cb4:	4602      	mov	r2, r0
 8015cb6:	9104      	str	r1, [sp, #16]
 8015cb8:	2100      	movs	r1, #0
 8015cba:	4628      	mov	r0, r5
 8015cbc:	9502      	str	r5, [sp, #8]
 8015cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8015cc0:	468a      	mov	sl, r1
 8015cc2:	46b1      	mov	r9, r6
 8015cc4:	4690      	mov	r8, r2
 8015cc6:	e9dd ec00 	ldrd	lr, ip, [sp]
 8015cca:	9d05      	ldr	r5, [sp, #20]
 8015ccc:	9f02      	ldr	r7, [sp, #8]
 8015cce:	4656      	mov	r6, sl
 8015cd0:	2400      	movs	r4, #0
 8015cd2:	f10a 0a01 	add.w	sl, sl, #1
 8015cd6:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8015cda:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8015cde:	2b08      	cmp	r3, #8
 8015ce0:	f000 80a3 	beq.w	8015e2a <svc_ovo_output+0x1b2>
 8015ce4:	2b10      	cmp	r3, #16
 8015ce6:	bf0c      	ite	eq
 8015ce8:	f832 0014 	ldrheq.w	r0, [r2, r4, lsl #1]
 8015cec:	f852 0024 	ldrne.w	r0, [r2, r4, lsl #2]
 8015cf0:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8015e30 <svc_ovo_output+0x1b8>
 8015cf4:	b178      	cbz	r0, 8015d16 <svc_ovo_output+0x9e>
 8015cf6:	4629      	mov	r1, r5
 8015cf8:	465a      	mov	r2, fp
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	ecf2 6a01 	vldmia	r2!, {s13}
 8015d00:	ecb1 7a01 	vldmia	r1!, {s14}
 8015d04:	3301      	adds	r3, #1
 8015d06:	4283      	cmp	r3, r0
 8015d08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015d0c:	d1f6      	bne.n	8015cfc <svc_ovo_output+0x84>
 8015d0e:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 8015d12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8015d16:	42a6      	cmp	r6, r4
 8015d18:	ece7 7a01 	vstmia	r7!, {s15}
 8015d1c:	f84c 4b04 	str.w	r4, [ip], #4
 8015d20:	f104 0401 	add.w	r4, r4, #1
 8015d24:	d276      	bcs.n	8015e14 <svc_ovo_output+0x19c>
 8015d26:	45a1      	cmp	r9, r4
 8015d28:	f84e 6b04 	str.w	r6, [lr], #4
 8015d2c:	d1d3      	bne.n	8015cd6 <svc_ovo_output+0x5e>
 8015d2e:	9b04      	ldr	r3, [sp, #16]
 8015d30:	9a02      	ldr	r2, [sp, #8]
 8015d32:	441a      	add	r2, r3
 8015d34:	9202      	str	r2, [sp, #8]
 8015d36:	9a01      	ldr	r2, [sp, #4]
 8015d38:	441a      	add	r2, r3
 8015d3a:	9201      	str	r2, [sp, #4]
 8015d3c:	9a00      	ldr	r2, [sp, #0]
 8015d3e:	441a      	add	r2, r3
 8015d40:	9b03      	ldr	r3, [sp, #12]
 8015d42:	9200      	str	r2, [sp, #0]
 8015d44:	4553      	cmp	r3, sl
 8015d46:	d1be      	bne.n	8015cc6 <svc_ovo_output+0x4e>
 8015d48:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	; 0x28
 8015d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d4e:	464e      	mov	r6, r9
 8015d50:	2700      	movs	r7, #0
 8015d52:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015d56:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015d5a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015d5e:	46b9      	mov	r9, r7
 8015d60:	f109 0901 	add.w	r9, r9, #1
 8015d64:	454e      	cmp	r6, r9
 8015d66:	bf88      	it	hi
 8015d68:	464c      	movhi	r4, r9
 8015d6a:	d918      	bls.n	8015d9e <svc_ovo_output+0x126>
 8015d6c:	b1a3      	cbz	r3, 8015d98 <svc_ovo_output+0x120>
 8015d6e:	f1ae 0104 	sub.w	r1, lr, #4
 8015d72:	4650      	mov	r0, sl
 8015d74:	2200      	movs	r2, #0
 8015d76:	e004      	b.n	8015d82 <svc_ovo_output+0x10a>
 8015d78:	3201      	adds	r2, #1
 8015d7a:	4293      	cmp	r3, r2
 8015d7c:	f100 0004 	add.w	r0, r0, #4
 8015d80:	d00a      	beq.n	8015d98 <svc_ovo_output+0x120>
 8015d82:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8015d86:	42a5      	cmp	r5, r4
 8015d88:	d1f6      	bne.n	8015d78 <svc_ovo_output+0x100>
 8015d8a:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
 8015d8e:	42bd      	cmp	r5, r7
 8015d90:	d1f2      	bne.n	8015d78 <svc_ovo_output+0x100>
 8015d92:	6802      	ldr	r2, [r0, #0]
 8015d94:	f848 2b04 	str.w	r2, [r8], #4
 8015d98:	3401      	adds	r4, #1
 8015d9a:	42a6      	cmp	r6, r4
 8015d9c:	d1e6      	bne.n	8015d6c <svc_ovo_output+0xf4>
 8015d9e:	45cb      	cmp	fp, r9
 8015da0:	f107 0701 	add.w	r7, r7, #1
 8015da4:	d1dc      	bne.n	8015d60 <svc_ovo_output+0xe8>
 8015da6:	e9dd ba06 	ldrd	fp, sl, [sp, #24]
 8015daa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015dae:	f04f 0800 	mov.w	r8, #0
 8015db2:	4647      	mov	r7, r8
 8015db4:	f108 0801 	add.w	r8, r8, #1
 8015db8:	45b0      	cmp	r8, r6
 8015dba:	bf38      	it	cc
 8015dbc:	4644      	movcc	r4, r8
 8015dbe:	d223      	bcs.n	8015e08 <svc_ovo_output+0x190>
 8015dc0:	b1fb      	cbz	r3, 8015e02 <svc_ovo_output+0x18a>
 8015dc2:	f1ac 0104 	sub.w	r1, ip, #4
 8015dc6:	4650      	mov	r0, sl
 8015dc8:	2200      	movs	r2, #0
 8015dca:	e004      	b.n	8015dd6 <svc_ovo_output+0x15e>
 8015dcc:	3201      	adds	r2, #1
 8015dce:	4293      	cmp	r3, r2
 8015dd0:	f100 0004 	add.w	r0, r0, #4
 8015dd4:	d015      	beq.n	8015e02 <svc_ovo_output+0x18a>
 8015dd6:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8015dda:	42a5      	cmp	r5, r4
 8015ddc:	d1f6      	bne.n	8015dcc <svc_ovo_output+0x154>
 8015dde:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
 8015de2:	42bd      	cmp	r5, r7
 8015de4:	d1f2      	bne.n	8015dcc <svc_ovo_output+0x154>
 8015de6:	465a      	mov	r2, fp
 8015de8:	ecf2 6a01 	vldmia	r2!, {s13}
 8015dec:	ecf9 7a01 	vldmia	r9!, {s15}
 8015df0:	ed90 7a00 	vldr	s14, [r0]
 8015df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015dfc:	edcb 7a00 	vstr	s15, [fp]
 8015e00:	4693      	mov	fp, r2
 8015e02:	3401      	adds	r4, #1
 8015e04:	42a6      	cmp	r6, r4
 8015e06:	d1db      	bne.n	8015dc0 <svc_ovo_output+0x148>
 8015e08:	9a03      	ldr	r2, [sp, #12]
 8015e0a:	4542      	cmp	r2, r8
 8015e0c:	d1d1      	bne.n	8015db2 <svc_ovo_output+0x13a>
 8015e0e:	b00d      	add	sp, #52	; 0x34
 8015e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e14:	45a1      	cmp	r9, r4
 8015e16:	f84e ab04 	str.w	sl, [lr], #4
 8015e1a:	d088      	beq.n	8015d2e <svc_ovo_output+0xb6>
 8015e1c:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8015e20:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8015e24:	2b08      	cmp	r3, #8
 8015e26:	f47f af5d 	bne.w	8015ce4 <svc_ovo_output+0x6c>
 8015e2a:	5d10      	ldrb	r0, [r2, r4]
 8015e2c:	e760      	b.n	8015cf0 <svc_ovo_output+0x78>
 8015e2e:	bf00      	nop
 8015e30:	00000000 	.word	0x00000000

08015e34 <svc_ovo_classification_vote>:
 8015e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e38:	6884      	ldr	r4, [r0, #8]
 8015e3a:	4606      	mov	r6, r0
 8015e3c:	4692      	mov	sl, r2
 8015e3e:	b3bc      	cbz	r4, 8015eb0 <svc_ovo_classification_vote+0x7c>
 8015e40:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8015e44:	4618      	mov	r0, r3
 8015e46:	460d      	mov	r5, r1
 8015e48:	4642      	mov	r2, r8
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	f000 fdc8 	bl	80169e0 <memset>
 8015e50:	2c01      	cmp	r4, #1
 8015e52:	4603      	mov	r3, r0
 8015e54:	d02c      	beq.n	8015eb0 <svc_ovo_classification_vote+0x7c>
 8015e56:	4480      	add	r8, r0
 8015e58:	f1a8 0904 	sub.w	r9, r8, #4
 8015e5c:	4680      	mov	r8, r0
 8015e5e:	2001      	movs	r0, #1
 8015e60:	4641      	mov	r1, r8
 8015e62:	f108 0804 	add.w	r8, r8, #4
 8015e66:	46c6      	mov	lr, r8
 8015e68:	4684      	mov	ip, r0
 8015e6a:	462a      	mov	r2, r5
 8015e6c:	e008      	b.n	8015e80 <svc_ovo_classification_vote+0x4c>
 8015e6e:	680f      	ldr	r7, [r1, #0]
 8015e70:	f10c 0c01 	add.w	ip, ip, #1
 8015e74:	3701      	adds	r7, #1
 8015e76:	4564      	cmp	r4, ip
 8015e78:	600f      	str	r7, [r1, #0]
 8015e7a:	f10e 0e04 	add.w	lr, lr, #4
 8015e7e:	d911      	bls.n	8015ea4 <svc_ovo_classification_vote+0x70>
 8015e80:	ecf2 7a01 	vldmia	r2!, {s15}
 8015e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e8c:	dcef      	bgt.n	8015e6e <svc_ovo_classification_vote+0x3a>
 8015e8e:	f8de 7000 	ldr.w	r7, [lr]
 8015e92:	f10c 0c01 	add.w	ip, ip, #1
 8015e96:	3701      	adds	r7, #1
 8015e98:	4564      	cmp	r4, ip
 8015e9a:	f8ce 7000 	str.w	r7, [lr]
 8015e9e:	f10e 0e04 	add.w	lr, lr, #4
 8015ea2:	d8ed      	bhi.n	8015e80 <svc_ovo_classification_vote+0x4c>
 8015ea4:	3001      	adds	r0, #1
 8015ea6:	eba9 0101 	sub.w	r1, r9, r1
 8015eaa:	4284      	cmp	r4, r0
 8015eac:	440d      	add	r5, r1
 8015eae:	d1d7      	bne.n	8015e60 <svc_ovo_classification_vote+0x2c>
 8015eb0:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
 8015eb4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8015eb6:	2908      	cmp	r1, #8
 8015eb8:	d041      	beq.n	8015f3e <svc_ovo_classification_vote+0x10a>
 8015eba:	2910      	cmp	r1, #16
 8015ebc:	d01f      	beq.n	8015efe <svc_ovo_classification_vote+0xca>
 8015ebe:	edd3 7a00 	vldr	s15, [r3]
 8015ec2:	6811      	ldr	r1, [r2, #0]
 8015ec4:	2c01      	cmp	r4, #1
 8015ec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015eca:	d914      	bls.n	8015ef6 <svc_ovo_classification_vote+0xc2>
 8015ecc:	1f18      	subs	r0, r3, #4
 8015ece:	3204      	adds	r2, #4
 8015ed0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8015ed4:	edd3 7a01 	vldr	s15, [r3, #4]
 8015ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015edc:	3304      	adds	r3, #4
 8015ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee6:	bf44      	itt	mi
 8015ee8:	6811      	ldrmi	r1, [r2, #0]
 8015eea:	eeb0 7a67 	vmovmi.f32	s14, s15
 8015eee:	429c      	cmp	r4, r3
 8015ef0:	f102 0204 	add.w	r2, r2, #4
 8015ef4:	d1ee      	bne.n	8015ed4 <svc_ovo_classification_vote+0xa0>
 8015ef6:	f8ca 1000 	str.w	r1, [sl]
 8015efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015efe:	edd3 7a00 	vldr	s15, [r3]
 8015f02:	8811      	ldrh	r1, [r2, #0]
 8015f04:	2c01      	cmp	r4, #1
 8015f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015f0a:	d9f4      	bls.n	8015ef6 <svc_ovo_classification_vote+0xc2>
 8015f0c:	1f18      	subs	r0, r3, #4
 8015f0e:	3202      	adds	r2, #2
 8015f10:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8015f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8015f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f26:	bfc4      	itt	gt
 8015f28:	8811      	ldrhgt	r1, [r2, #0]
 8015f2a:	eeb0 7a67 	vmovgt.f32	s14, s15
 8015f2e:	42a3      	cmp	r3, r4
 8015f30:	f102 0202 	add.w	r2, r2, #2
 8015f34:	d1ee      	bne.n	8015f14 <svc_ovo_classification_vote+0xe0>
 8015f36:	f8ca 1000 	str.w	r1, [sl]
 8015f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f3e:	edd3 7a00 	vldr	s15, [r3]
 8015f42:	7811      	ldrb	r1, [r2, #0]
 8015f44:	2c01      	cmp	r4, #1
 8015f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015f4a:	d9d4      	bls.n	8015ef6 <svc_ovo_classification_vote+0xc2>
 8015f4c:	1f18      	subs	r0, r3, #4
 8015f4e:	3201      	adds	r2, #1
 8015f50:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8015f54:	edd3 7a01 	vldr	s15, [r3, #4]
 8015f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f5c:	3304      	adds	r3, #4
 8015f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f66:	bfc4      	itt	gt
 8015f68:	7811      	ldrbgt	r1, [r2, #0]
 8015f6a:	eeb0 7a67 	vmovgt.f32	s14, s15
 8015f6e:	42a3      	cmp	r3, r4
 8015f70:	f102 0201 	add.w	r2, r2, #1
 8015f74:	d1ee      	bne.n	8015f54 <svc_ovo_classification_vote+0x120>
 8015f76:	f8ca 1000 	str.w	r1, [sl]
 8015f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f7e:	bf00      	nop

08015f80 <svc_iter_prob_estimate>:
 8015f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f84:	b089      	sub	sp, #36	; 0x24
 8015f86:	6883      	ldr	r3, [r0, #8]
 8015f88:	9304      	str	r3, [sp, #16]
 8015f8a:	4615      	mov	r5, r2
 8015f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f8e:	fb03 f903 	mul.w	r9, r3, r3
 8015f92:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015f96:	9203      	str	r2, [sp, #12]
 8015f98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f9a:	eb02 09c9 	add.w	r9, r2, r9, lsl #3
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	f000 8158 	beq.w	8016254 <svc_iter_prob_estimate+0x2d4>
 8015fa4:	2b01      	cmp	r3, #1
 8015fa6:	f000 8158 	beq.w	801625a <svc_iter_prob_estimate+0x2da>
 8015faa:	f103 0b01 	add.w	fp, r3, #1
 8015fae:	ea4f 088b 	mov.w	r8, fp, lsl #2
 8015fb2:	3204      	adds	r2, #4
 8015fb4:	f103 3eff 	add.w	lr, r3, #4294967295
 8015fb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8015fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fc0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8015fc4:	9201      	str	r2, [sp, #4]
 8015fc6:	4694      	mov	ip, r2
 8015fc8:	f1a8 0604 	sub.w	r6, r8, #4
 8015fcc:	2701      	movs	r7, #1
 8015fce:	f1a8 0a08 	sub.w	sl, r8, #8
 8015fd2:	4699      	mov	r9, r3
 8015fd4:	4608      	mov	r0, r1
 8015fd6:	eb0a 020c 	add.w	r2, sl, ip
 8015fda:	4664      	mov	r4, ip
 8015fdc:	463b      	mov	r3, r7
 8015fde:	edd0 7a00 	vldr	s15, [r0]
 8015fe2:	ece4 7a01 	vstmia	r4!, {s15}
 8015fe6:	ecf0 7a01 	vldmia	r0!, {s15}
 8015fea:	3301      	adds	r3, #1
 8015fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ff0:	4599      	cmp	r9, r3
 8015ff2:	edc2 7a00 	vstr	s15, [r2]
 8015ff6:	4432      	add	r2, r6
 8015ff8:	d8f1      	bhi.n	8015fde <svc_iter_prob_estimate+0x5e>
 8015ffa:	3701      	adds	r7, #1
 8015ffc:	45b9      	cmp	r9, r7
 8015ffe:	4471      	add	r1, lr
 8016000:	44c4      	add	ip, r8
 8016002:	f1ae 0e04 	sub.w	lr, lr, #4
 8016006:	d1e5      	bne.n	8015fd4 <svc_iter_prob_estimate+0x54>
 8016008:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801600c:	eddd 7a04 	vldr	s15, [sp, #16]
 8016010:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016012:	9b03      	ldr	r3, [sp, #12]
 8016014:	f8cd 9018 	str.w	r9, [sp, #24]
 8016018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801601c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016020:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8016024:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016028:	f1aa 0004 	sub.w	r0, sl, #4
 801602c:	1882      	adds	r2, r0, r2
 801602e:	9202      	str	r2, [sp, #8]
 8016030:	461a      	mov	r2, r3
 8016032:	3204      	adds	r2, #4
 8016034:	f04f 0e00 	mov.w	lr, #0
 8016038:	9205      	str	r2, [sp, #20]
 801603a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801603e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016042:	9507      	str	r5, [sp, #28]
 8016044:	f1aa 0208 	sub.w	r2, sl, #8
 8016048:	eb03 0b00 	add.w	fp, r3, r0
 801604c:	eddf 6a86 	vldr	s13, [pc, #536]	; 8016268 <svc_iter_prob_estimate+0x2e8>
 8016050:	9201      	str	r2, [sp, #4]
 8016052:	461e      	mov	r6, r3
 8016054:	4677      	mov	r7, lr
 8016056:	46ac      	mov	ip, r5
 8016058:	ecac 6a01 	vstmia	ip!, {s12}
 801605c:	edc3 6a00 	vstr	s13, [r3]
 8016060:	b34f      	cbz	r7, 80160b6 <svc_iter_prob_estimate+0x136>
 8016062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016064:	9c03      	ldr	r4, [sp, #12]
 8016066:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801606a:	edd2 7a00 	vldr	s15, [r2]
 801606e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016072:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8016076:	edc3 7a00 	vstr	s15, [r3]
 801607a:	6811      	ldr	r1, [r2, #0]
 801607c:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 8016080:	2f01      	cmp	r7, #1
 8016082:	6011      	str	r1, [r2, #0]
 8016084:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8016088:	ea4f 028e 	mov.w	r2, lr, lsl #2
 801608c:	d013      	beq.n	80160b6 <svc_iter_prob_estimate+0x136>
 801608e:	9c02      	ldr	r4, [sp, #8]
 8016090:	4421      	add	r1, r4
 8016092:	9c05      	ldr	r4, [sp, #20]
 8016094:	4422      	add	r2, r4
 8016096:	465c      	mov	r4, fp
 8016098:	ed91 7a00 	vldr	s14, [r1]
 801609c:	edd3 7a00 	vldr	s15, [r3]
 80160a0:	eee7 7a07 	vfma.f32	s15, s14, s14
 80160a4:	4401      	add	r1, r0
 80160a6:	edc3 7a00 	vstr	s15, [r3]
 80160aa:	6825      	ldr	r5, [r4, #0]
 80160ac:	f842 5b04 	str.w	r5, [r2], #4
 80160b0:	42b2      	cmp	r2, r6
 80160b2:	4404      	add	r4, r0
 80160b4:	d1f0      	bne.n	8016098 <svc_iter_prob_estimate+0x118>
 80160b6:	3701      	adds	r7, #1
 80160b8:	45b9      	cmp	r9, r7
 80160ba:	d020      	beq.n	80160fe <svc_iter_prob_estimate+0x17e>
 80160bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80160be:	9a01      	ldr	r2, [sp, #4]
 80160c0:	44ce      	add	lr, r9
 80160c2:	eb01 058e 	add.w	r5, r1, lr, lsl #2
 80160c6:	4442      	add	r2, r8
 80160c8:	1d34      	adds	r4, r6, #4
 80160ca:	4641      	mov	r1, r8
 80160cc:	ed92 7a00 	vldr	s14, [r2]
 80160d0:	edd3 7a00 	vldr	s15, [r3]
 80160d4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80160d8:	edc3 7a00 	vstr	s15, [r3]
 80160dc:	edd2 7a00 	vldr	s15, [r2]
 80160e0:	ecb1 7a01 	vldmia	r1!, {s14}
 80160e4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80160e8:	42a9      	cmp	r1, r5
 80160ea:	4402      	add	r2, r0
 80160ec:	ece4 7a01 	vstmia	r4!, {s15}
 80160f0:	d1ec      	bne.n	80160cc <svc_iter_prob_estimate+0x14c>
 80160f2:	4453      	add	r3, sl
 80160f4:	44d0      	add	r8, sl
 80160f6:	4456      	add	r6, sl
 80160f8:	f10b 0b04 	add.w	fp, fp, #4
 80160fc:	e7ac      	b.n	8016058 <svc_iter_prob_estimate+0xd8>
 80160fe:	e9dd 9506 	ldrd	r9, r5, [sp, #24]
 8016102:	eddd 7a04 	vldr	s15, [sp, #16]
 8016106:	9b04      	ldr	r3, [sp, #16]
 8016108:	9a03      	ldr	r2, [sp, #12]
 801610a:	ed9f 4a58 	vldr	s8, [pc, #352]	; 801626c <svc_iter_prob_estimate+0x2ec>
 801610e:	eddf 4a56 	vldr	s9, [pc, #344]	; 8016268 <svc_iter_prob_estimate+0x2e8>
 8016112:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 8016116:	eddf 7a56 	vldr	s15, [pc, #344]	; 8016270 <svc_iter_prob_estimate+0x2f0>
 801611a:	eec7 3a83 	vdiv.f32	s7, s15, s6
 801611e:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
 8016122:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016126:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801612a:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 801612e:	eb09 0783 	add.w	r7, r9, r3, lsl #2
 8016132:	2364      	movs	r3, #100	; 0x64
 8016134:	00b6      	lsls	r6, r6, #2
 8016136:	9202      	str	r2, [sp, #8]
 8016138:	9301      	str	r3, [sp, #4]
 801613a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801613e:	9b04      	ldr	r3, [sp, #16]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d07c      	beq.n	801623e <svc_iter_prob_estimate+0x2be>
 8016144:	eddf 5a48 	vldr	s11, [pc, #288]	; 8016268 <svc_iter_prob_estimate+0x2e8>
 8016148:	9902      	ldr	r1, [sp, #8]
 801614a:	462c      	mov	r4, r5
 801614c:	4648      	mov	r0, r9
 801614e:	eddf 7a46 	vldr	s15, [pc, #280]	; 8016268 <svc_iter_prob_estimate+0x2e8>
 8016152:	ece0 4a01 	vstmia	r0!, {s9}
 8016156:	1873      	adds	r3, r6, r1
 8016158:	462a      	mov	r2, r5
 801615a:	ecf3 6a01 	vldmia	r3!, {s13}
 801615e:	ecb2 7a01 	vldmia	r2!, {s14}
 8016162:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016166:	428b      	cmp	r3, r1
 8016168:	ed40 7a01 	vstr	s15, [r0, #-4]
 801616c:	d1f5      	bne.n	801615a <svc_iter_prob_estimate+0x1da>
 801616e:	ecb4 7a01 	vldmia	r4!, {s14}
 8016172:	45a3      	cmp	fp, r4
 8016174:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016178:	eb03 0108 	add.w	r1, r3, r8
 801617c:	d1e7      	bne.n	801614e <svc_iter_prob_estimate+0x1ce>
 801617e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8016268 <svc_iter_prob_estimate+0x2e8>
 8016182:	464b      	mov	r3, r9
 8016184:	ecf3 7a01 	vldmia	r3!, {s15}
 8016188:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801618c:	eef0 7ae7 	vabs.f32	s15, s15
 8016190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016198:	bfb8      	it	lt
 801619a:	eeb0 7a67 	vmovlt.f32	s14, s15
 801619e:	42bb      	cmp	r3, r7
 80161a0:	d1f0      	bne.n	8016184 <svc_iter_prob_estimate+0x204>
 80161a2:	eeb4 7ae3 	vcmpe.f32	s14, s7
 80161a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161aa:	d445      	bmi.n	8016238 <svc_iter_prob_estimate+0x2b8>
 80161ac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80161b0:	9802      	ldr	r0, [sp, #8]
 80161b2:	46ae      	mov	lr, r5
 80161b4:	464c      	mov	r4, r9
 80161b6:	edd4 6a00 	vldr	s13, [r4]
 80161ba:	ed9c 7a00 	vldr	s14, [ip]
 80161be:	edde 7a00 	vldr	s15, [lr]
 80161c2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80161c6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80161ca:	1831      	adds	r1, r6, r0
 80161cc:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80161d0:	462a      	mov	r2, r5
 80161d2:	464b      	mov	r3, r9
 80161d4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80161d8:	ee76 6a05 	vadd.f32	s13, s12, s10
 80161dc:	ecee 7a01 	vstmia	lr!, {s15}
 80161e0:	ecf4 7a01 	vldmia	r4!, {s15}
 80161e4:	ed9c 7a00 	vldr	s14, [ip]
 80161e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80161ec:	ee66 2aa6 	vmul.f32	s5, s13, s13
 80161f0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80161f4:	ee85 7a26 	vdiv.f32	s14, s10, s13
 80161f8:	eef0 6a65 	vmov.f32	s13, s11
 80161fc:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016200:	eec6 5aa2 	vdiv.f32	s11, s13, s5
 8016204:	ecf1 6a01 	vldmia	r1!, {s13}
 8016208:	edd3 7a00 	vldr	s15, [r3]
 801620c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016210:	4281      	cmp	r1, r0
 8016212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016216:	ece3 7a01 	vstmia	r3!, {s15}
 801621a:	edd2 7a00 	vldr	s15, [r2]
 801621e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016222:	ece2 7a01 	vstmia	r2!, {s15}
 8016226:	d1ed      	bne.n	8016204 <svc_iter_prob_estimate+0x284>
 8016228:	42a7      	cmp	r7, r4
 801622a:	4440      	add	r0, r8
 801622c:	44d4      	add	ip, sl
 801622e:	d1c2      	bne.n	80161b6 <svc_iter_prob_estimate+0x236>
 8016230:	9b01      	ldr	r3, [sp, #4]
 8016232:	3b01      	subs	r3, #1
 8016234:	9301      	str	r3, [sp, #4]
 8016236:	d182      	bne.n	801613e <svc_iter_prob_estimate+0x1be>
 8016238:	b009      	add	sp, #36	; 0x24
 801623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623e:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8016242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016246:	dcf7      	bgt.n	8016238 <svc_iter_prob_estimate+0x2b8>
 8016248:	9b01      	ldr	r3, [sp, #4]
 801624a:	3b01      	subs	r3, #1
 801624c:	9301      	str	r3, [sp, #4]
 801624e:	f47f af76 	bne.w	801613e <svc_iter_prob_estimate+0x1be>
 8016252:	e7f1      	b.n	8016238 <svc_iter_prob_estimate+0x2b8>
 8016254:	f04f 0a04 	mov.w	sl, #4
 8016258:	e753      	b.n	8016102 <svc_iter_prob_estimate+0x182>
 801625a:	4613      	mov	r3, r2
 801625c:	3304      	adds	r3, #4
 801625e:	f04f 0b02 	mov.w	fp, #2
 8016262:	9301      	str	r3, [sp, #4]
 8016264:	e6d2      	b.n	801600c <svc_iter_prob_estimate+0x8c>
 8016266:	bf00      	nop
 8016268:	00000000 	.word	0x00000000
 801626c:	34000000 	.word	0x34000000
 8016270:	3ba3d70a 	.word	0x3ba3d70a

08016274 <svc_decoder>:
 8016274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016278:	ed2d 8b06 	vpush	{d8-d10}
 801627c:	e9d3 9a01 	ldrd	r9, sl, [r3, #4]
 8016280:	b087      	sub	sp, #28
 8016282:	461d      	mov	r5, r3
 8016284:	ee0a 2a10 	vmov	s20, r2
 8016288:	f10a 36ff 	add.w	r6, sl, #4294967295
 801628c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801628e:	7d5b      	ldrb	r3, [r3, #21]
 8016290:	9102      	str	r1, [sp, #8]
 8016292:	fb0a f606 	mul.w	r6, sl, r6
 8016296:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801629a:	0876      	lsrs	r6, r6, #1
 801629c:	7d2a      	ldrb	r2, [r5, #20]
 801629e:	9203      	str	r2, [sp, #12]
 80162a0:	4607      	mov	r7, r0
 80162a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80162a6:	2b03      	cmp	r3, #3
 80162a8:	f200 8140 	bhi.w	801652c <svc_decoder+0x2b8>
 80162ac:	e8df f003 	tbb	[pc, r3]
 80162b0:	0258ab8e 	.word	0x0258ab8e
 80162b4:	edd5 8a06 	vldr	s17, [r5, #24]
 80162b8:	ed95 8a07 	vldr	s16, [r5, #28]
 80162bc:	682b      	ldr	r3, [r5, #0]
 80162be:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80162c0:	f1b9 0f00 	cmp.w	r9, #0
 80162c4:	d024      	beq.n	8016310 <svc_decoder+0x9c>
 80162c6:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80162ca:	ee09 6a10 	vmov	s18, r6
 80162ce:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80162d2:	465e      	mov	r6, fp
 80162d4:	461f      	mov	r7, r3
 80162d6:	4683      	mov	fp, r0
 80162d8:	eeb0 0a48 	vmov.f32	s0, s16
 80162dc:	b187      	cbz	r7, 8016300 <svc_decoder+0x8c>
 80162de:	eddf 7a96 	vldr	s15, [pc, #600]	; 8016538 <svc_decoder+0x2c4>
 80162e2:	465b      	mov	r3, fp
 80162e4:	eb04 0209 	add.w	r2, r4, r9
 80162e8:	ecb4 7a01 	vldmia	r4!, {s14}
 80162ec:	ecf3 6a01 	vldmia	r3!, {s13}
 80162f0:	4294      	cmp	r4, r2
 80162f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80162f6:	d1f7      	bne.n	80162e8 <svc_decoder+0x74>
 80162f8:	eeb0 0a48 	vmov.f32	s0, s16
 80162fc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8016300:	f001 fd5a 	bl	8017db8 <tanhf>
 8016304:	eca6 0a01 	vstmia	r6!, {s0}
 8016308:	45b0      	cmp	r8, r6
 801630a:	d1e5      	bne.n	80162d8 <svc_decoder+0x64>
 801630c:	ee19 6a10 	vmov	r6, s18
 8016310:	2300      	movs	r3, #0
 8016312:	ee08 3a90 	vmov	s17, r3
 8016316:	9b03      	ldr	r3, [sp, #12]
 8016318:	9916      	ldr	r1, [sp, #88]	; 0x58
 801631a:	2b00      	cmp	r3, #0
 801631c:	f040 80b3 	bne.w	8016486 <svc_decoder+0x212>
 8016320:	9c02      	ldr	r4, [sp, #8]
 8016322:	4633      	mov	r3, r6
 8016324:	4622      	mov	r2, r4
 8016326:	4628      	mov	r0, r5
 8016328:	f7ff fca6 	bl	8015c78 <svc_ovo_output>
 801632c:	ee1a 2a10 	vmov	r2, s20
 8016330:	4633      	mov	r3, r6
 8016332:	4621      	mov	r1, r4
 8016334:	4628      	mov	r0, r5
 8016336:	f7ff fd7d 	bl	8015e34 <svc_ovo_classification_vote>
 801633a:	f1ba 0f02 	cmp.w	sl, #2
 801633e:	d108      	bne.n	8016352 <svc_decoder+0xde>
 8016340:	9b02      	ldr	r3, [sp, #8]
 8016342:	edd3 7a00 	vldr	s15, [r3]
 8016346:	eeb1 7a67 	vneg.f32	s14, s15
 801634a:	edc3 7a01 	vstr	s15, [r3, #4]
 801634e:	ed83 7a00 	vstr	s14, [r3]
 8016352:	ee18 0a90 	vmov	r0, s17
 8016356:	b007      	add	sp, #28
 8016358:	ecbd 8b06 	vpop	{d8-d10}
 801635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016360:	ed95 8a06 	vldr	s16, [r5, #24]
 8016364:	682a      	ldr	r2, [r5, #0]
 8016366:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8016368:	f1b9 0f00 	cmp.w	r9, #0
 801636c:	d0d0      	beq.n	8016310 <svc_decoder+0x9c>
 801636e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016370:	9504      	str	r5, [sp, #16]
 8016372:	f04f 0b00 	mov.w	fp, #0
 8016376:	0091      	lsls	r1, r2, #2
 8016378:	ee08 6a90 	vmov	s17, r6
 801637c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016380:	465e      	mov	r6, fp
 8016382:	46a0      	mov	r8, r4
 8016384:	468b      	mov	fp, r1
 8016386:	4605      	mov	r5, r0
 8016388:	4617      	mov	r7, r2
 801638a:	461c      	mov	r4, r3
 801638c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016390:	b197      	cbz	r7, 80163b8 <svc_decoder+0x144>
 8016392:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8016538 <svc_decoder+0x2c4>
 8016396:	462b      	mov	r3, r5
 8016398:	eb04 020b 	add.w	r2, r4, fp
 801639c:	ecb4 7a01 	vldmia	r4!, {s14}
 80163a0:	ecf3 7a01 	vldmia	r3!, {s15}
 80163a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80163a8:	4294      	cmp	r4, r2
 80163aa:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80163ae:	d1f5      	bne.n	801639c <svc_decoder+0x128>
 80163b0:	ee20 0a48 	vnmul.f32	s0, s0, s16
 80163b4:	f001 fd7e 	bl	8017eb4 <expf>
 80163b8:	3601      	adds	r6, #1
 80163ba:	45b1      	cmp	r9, r6
 80163bc:	eca8 0a01 	vstmia	r8!, {s0}
 80163c0:	d1e4      	bne.n	801638c <svc_decoder+0x118>
 80163c2:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 80163c6:	ee18 6a90 	vmov	r6, s17
 80163ca:	e7a1      	b.n	8016310 <svc_decoder+0x9c>
 80163cc:	682a      	ldr	r2, [r5, #0]
 80163ce:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80163d0:	f1b9 0f00 	cmp.w	r9, #0
 80163d4:	d09c      	beq.n	8016310 <svc_decoder+0x9c>
 80163d6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80163d8:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80163dc:	2100      	movs	r1, #0
 80163de:	eddf 7a56 	vldr	s15, [pc, #344]	; 8016538 <svc_decoder+0x2c4>
 80163e2:	b152      	cbz	r2, 80163fa <svc_decoder+0x186>
 80163e4:	463b      	mov	r3, r7
 80163e6:	eb04 0c0b 	add.w	ip, r4, fp
 80163ea:	ecb4 7a01 	vldmia	r4!, {s14}
 80163ee:	ecf3 6a01 	vldmia	r3!, {s13}
 80163f2:	4564      	cmp	r4, ip
 80163f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80163f8:	d1f7      	bne.n	80163ea <svc_decoder+0x176>
 80163fa:	3101      	adds	r1, #1
 80163fc:	4589      	cmp	r9, r1
 80163fe:	ece0 7a01 	vstmia	r0!, {s15}
 8016402:	d1ec      	bne.n	80163de <svc_decoder+0x16a>
 8016404:	e784      	b.n	8016310 <svc_decoder+0x9c>
 8016406:	ed95 9a06 	vldr	s18, [r5, #24]
 801640a:	edd5 8a07 	vldr	s17, [r5, #28]
 801640e:	682a      	ldr	r2, [r5, #0]
 8016410:	6a29      	ldr	r1, [r5, #32]
 8016412:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8016414:	f1b9 0f00 	cmp.w	r9, #0
 8016418:	f43f af7a 	beq.w	8016310 <svc_decoder+0x9c>
 801641c:	ee07 1a90 	vmov	s15, r1
 8016420:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016422:	9504      	str	r5, [sp, #16]
 8016424:	f04f 0b00 	mov.w	fp, #0
 8016428:	0091      	lsls	r1, r2, #2
 801642a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 801642e:	ee09 6a90 	vmov	s19, r6
 8016432:	f8cd 8014 	str.w	r8, [sp, #20]
 8016436:	465e      	mov	r6, fp
 8016438:	46a0      	mov	r8, r4
 801643a:	468b      	mov	fp, r1
 801643c:	4605      	mov	r5, r0
 801643e:	4617      	mov	r7, r2
 8016440:	461c      	mov	r4, r3
 8016442:	eeb0 0a68 	vmov.f32	s0, s17
 8016446:	b187      	cbz	r7, 801646a <svc_decoder+0x1f6>
 8016448:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016538 <svc_decoder+0x2c4>
 801644c:	462b      	mov	r3, r5
 801644e:	eb04 020b 	add.w	r2, r4, fp
 8016452:	ecb4 7a01 	vldmia	r4!, {s14}
 8016456:	ecf3 6a01 	vldmia	r3!, {s13}
 801645a:	4294      	cmp	r4, r2
 801645c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016460:	d1f7      	bne.n	8016452 <svc_decoder+0x1de>
 8016462:	eeb0 0a68 	vmov.f32	s0, s17
 8016466:	eea9 0a27 	vfma.f32	s0, s18, s15
 801646a:	3601      	adds	r6, #1
 801646c:	eef0 0a48 	vmov.f32	s1, s16
 8016470:	f001 fd56 	bl	8017f20 <powf>
 8016474:	45b1      	cmp	r9, r6
 8016476:	eca8 0a01 	vstmia	r8!, {s0}
 801647a:	d1e2      	bne.n	8016442 <svc_decoder+0x1ce>
 801647c:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 8016480:	ee19 6a90 	vmov	r6, s19
 8016484:	e744      	b.n	8016310 <svc_decoder+0x9c>
 8016486:	4633      	mov	r3, r6
 8016488:	4642      	mov	r2, r8
 801648a:	4628      	mov	r0, r5
 801648c:	f7ff fbf4 	bl	8015c78 <svc_ovo_output>
 8016490:	4633      	mov	r3, r6
 8016492:	ee1a 2a10 	vmov	r2, s20
 8016496:	4641      	mov	r1, r8
 8016498:	4628      	mov	r0, r5
 801649a:	f7ff fccb 	bl	8015e34 <svc_ovo_classification_vote>
 801649e:	68ab      	ldr	r3, [r5, #8]
 80164a0:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
 80164a4:	f8d5 a03c 	ldr.w	sl, [r5, #60]	; 0x3c
 80164a8:	f103 3bff 	add.w	fp, r3, #4294967295
 80164ac:	fb03 fb0b 	mul.w	fp, r3, fp
 80164b0:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
 80164b4:	d01d      	beq.n	80164f2 <svc_decoder+0x27e>
 80164b6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80164ba:	4647      	mov	r7, r8
 80164bc:	2400      	movs	r4, #0
 80164be:	ecf7 6a01 	vldmia	r7!, {s13}
 80164c2:	ecb9 7a01 	vldmia	r9!, {s14}
 80164c6:	ecfa 7a01 	vldmia	sl!, {s15}
 80164ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80164ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80164d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164d6:	eeb1 0a67 	vneg.f32	s0, s15
 80164da:	db19      	blt.n	8016510 <svc_decoder+0x29c>
 80164dc:	f001 fcea 	bl	8017eb4 <expf>
 80164e0:	ee30 7a08 	vadd.f32	s14, s0, s16
 80164e4:	3401      	adds	r4, #1
 80164e6:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80164ea:	45a3      	cmp	fp, r4
 80164ec:	ed47 7a01 	vstr	s15, [r7, #-4]
 80164f0:	d1e5      	bne.n	80164be <svc_decoder+0x24a>
 80164f2:	4628      	mov	r0, r5
 80164f4:	ee1a 3a10 	vmov	r3, s20
 80164f8:	9a02      	ldr	r2, [sp, #8]
 80164fa:	9600      	str	r6, [sp, #0]
 80164fc:	4641      	mov	r1, r8
 80164fe:	f7ff fd3f 	bl	8015f80 <svc_iter_prob_estimate>
 8016502:	ee18 0a90 	vmov	r0, s17
 8016506:	b007      	add	sp, #28
 8016508:	ecbd 8b06 	vpop	{d8-d10}
 801650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016510:	eeb0 0a67 	vmov.f32	s0, s15
 8016514:	f001 fcce 	bl	8017eb4 <expf>
 8016518:	ee30 0a08 	vadd.f32	s0, s0, s16
 801651c:	3401      	adds	r4, #1
 801651e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8016522:	45a3      	cmp	fp, r4
 8016524:	ed47 7a01 	vstr	s15, [r7, #-4]
 8016528:	d1c9      	bne.n	80164be <svc_decoder+0x24a>
 801652a:	e7e2      	b.n	80164f2 <svc_decoder+0x27e>
 801652c:	f06f 0301 	mvn.w	r3, #1
 8016530:	ee08 3a90 	vmov	s17, r3
 8016534:	e6ef      	b.n	8016316 <svc_decoder+0xa2>
 8016536:	bf00      	nop
 8016538:	00000000 	.word	0x00000000

0801653c <forward_svc>:
 801653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016540:	6983      	ldr	r3, [r0, #24]
 8016542:	881c      	ldrh	r4, [r3, #0]
 8016544:	b09b      	sub	sp, #108	; 0x6c
 8016546:	2c00      	cmp	r4, #0
 8016548:	f000 80b0 	beq.w	80166ac <forward_svc+0x170>
 801654c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8016550:	4602      	mov	r2, r0
 8016552:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8016556:	2c01      	cmp	r4, #1
 8016558:	bf14      	ite	ne
 801655a:	f109 030c 	addne.w	r3, r9, #12
 801655e:	2300      	moveq	r3, #0
 8016560:	b100      	cbz	r0, 8016564 <forward_svc+0x28>
 8016562:	6800      	ldr	r0, [r0, #0]
 8016564:	6859      	ldr	r1, [r3, #4]
 8016566:	2900      	cmp	r1, #0
 8016568:	f000 8096 	beq.w	8016698 <forward_svc+0x15c>
 801656c:	e9d1 8100 	ldrd	r8, r1, [r1]
 8016570:	2c02      	cmp	r4, #2
 8016572:	f240 809f 	bls.w	80166b4 <forward_svc+0x178>
 8016576:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801657a:	2b00      	cmp	r3, #0
 801657c:	f000 808e 	beq.w	801669c <forward_svc+0x160>
 8016580:	e9d3 6e00 	ldrd	r6, lr, [r3]
 8016584:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 8016588:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801658c:	2c03      	cmp	r4, #3
 801658e:	f000 8091 	beq.w	80166b4 <forward_svc+0x178>
 8016592:	f8d9 4028 	ldr.w	r4, [r9, #40]	; 0x28
 8016596:	2c00      	cmp	r4, #0
 8016598:	f000 808a 	beq.w	80166b0 <forward_svc+0x174>
 801659c:	6824      	ldr	r4, [r4, #0]
 801659e:	69a4      	ldr	r4, [r4, #24]
 80165a0:	68a4      	ldr	r4, [r4, #8]
 80165a2:	9407      	str	r4, [sp, #28]
 80165a4:	f892 4029 	ldrb.w	r4, [r2, #41]	; 0x29
 80165a8:	2c00      	cmp	r4, #0
 80165aa:	d16e      	bne.n	801668a <forward_svc+0x14e>
 80165ac:	4623      	mov	r3, r4
 80165ae:	46a3      	mov	fp, r4
 80165b0:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80165b4:	6989      	ldr	r1, [r1, #24]
 80165b6:	f8d8 9008 	ldr.w	r9, [r8, #8]
 80165ba:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80165be:	69b6      	ldr	r6, [r6, #24]
 80165c0:	edd1 7a02 	vldr	s15, [r1, #8]
 80165c4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80165c8:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80165cc:	69ad      	ldr	r5, [r5, #24]
 80165ce:	68b6      	ldr	r6, [r6, #8]
 80165d0:	9103      	str	r1, [sp, #12]
 80165d2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80165d6:	f8dc c018 	ldr.w	ip, [ip, #24]
 80165da:	69bf      	ldr	r7, [r7, #24]
 80165dc:	9605      	str	r6, [sp, #20]
 80165de:	9104      	str	r1, [sp, #16]
 80165e0:	68c6      	ldr	r6, [r0, #12]
 80165e2:	68a9      	ldr	r1, [r5, #8]
 80165e4:	6980      	ldr	r0, [r0, #24]
 80165e6:	f8de 500c 	ldr.w	r5, [lr, #12]
 80165ea:	f8de e018 	ldr.w	lr, [lr, #24]
 80165ee:	6876      	ldr	r6, [r6, #4]
 80165f0:	68ed      	ldr	r5, [r5, #12]
 80165f2:	f8de a008 	ldr.w	sl, [lr, #8]
 80165f6:	6880      	ldr	r0, [r0, #8]
 80165f8:	f8dc e008 	ldr.w	lr, [ip, #8]
 80165fc:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8016600:	9106      	str	r1, [sp, #24]
 8016602:	fbb5 f5f6 	udiv	r5, r5, r6
 8016606:	2c00      	cmp	r4, #0
 8016608:	d043      	beq.n	8016692 <forward_svc+0x156>
 801660a:	f8db b018 	ldr.w	fp, [fp, #24]
 801660e:	699b      	ldr	r3, [r3, #24]
 8016610:	f8db b008 	ldr.w	fp, [fp, #8]
 8016614:	689b      	ldr	r3, [r3, #8]
 8016616:	9907      	ldr	r1, [sp, #28]
 8016618:	f8dc c000 	ldr.w	ip, [ip]
 801661c:	683f      	ldr	r7, [r7, #0]
 801661e:	9100      	str	r1, [sp, #0]
 8016620:	9903      	ldr	r1, [sp, #12]
 8016622:	910b      	str	r1, [sp, #44]	; 0x2c
 8016624:	9904      	ldr	r1, [sp, #16]
 8016626:	910d      	str	r1, [sp, #52]	; 0x34
 8016628:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
 801662c:	9905      	ldr	r1, [sp, #20]
 801662e:	69d4      	ldr	r4, [r2, #28]
 8016630:	940f      	str	r4, [sp, #60]	; 0x3c
 8016632:	6a14      	ldr	r4, [r2, #32]
 8016634:	9410      	str	r4, [sp, #64]	; 0x40
 8016636:	e9cd 1a13 	strd	r1, sl, [sp, #76]	; 0x4c
 801663a:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 801663e:	9906      	ldr	r1, [sp, #24]
 8016640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016642:	9115      	str	r1, [sp, #84]	; 0x54
 8016644:	9318      	str	r3, [sp, #96]	; 0x60
 8016646:	ee17 1a90 	vmov	r1, s15
 801664a:	f3cc 1cc6 	ubfx	ip, ip, #7, #7
 801664e:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
 8016652:	9211      	str	r2, [sp, #68]	; 0x44
 8016654:	f3c7 17c6 	ubfx	r7, r7, #7, #7
 8016658:	ab09      	add	r3, sp, #36	; 0x24
 801665a:	aa08      	add	r2, sp, #32
 801665c:	2400      	movs	r4, #0
 801665e:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
 8016662:	e9cd eb16 	strd	lr, fp, [sp, #88]	; 0x58
 8016666:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 801666a:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 801666e:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
 8016672:	9408      	str	r4, [sp, #32]
 8016674:	f7ff fdfe 	bl	8016274 <svc_decoder>
 8016678:	eddd 7a08 	vldr	s15, [sp, #32]
 801667c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016680:	edc9 7a00 	vstr	s15, [r9]
 8016684:	b01b      	add	sp, #108	; 0x6c
 8016686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801668a:	b16b      	cbz	r3, 80166a8 <forward_svc+0x16c>
 801668c:	e9d3 b305 	ldrd	fp, r3, [r3, #20]
 8016690:	e78e      	b.n	80165b0 <forward_svc+0x74>
 8016692:	4623      	mov	r3, r4
 8016694:	46a3      	mov	fp, r4
 8016696:	e7be      	b.n	8016616 <forward_svc+0xda>
 8016698:	4688      	mov	r8, r1
 801669a:	e769      	b.n	8016570 <forward_svc+0x34>
 801669c:	461f      	mov	r7, r3
 801669e:	461d      	mov	r5, r3
 80166a0:	469e      	mov	lr, r3
 80166a2:	461e      	mov	r6, r3
 80166a4:	469c      	mov	ip, r3
 80166a6:	e771      	b.n	801658c <forward_svc+0x50>
 80166a8:	469b      	mov	fp, r3
 80166aa:	e781      	b.n	80165b0 <forward_svc+0x74>
 80166ac:	6863      	ldr	r3, [r4, #4]
 80166ae:	deff      	udf	#255	; 0xff
 80166b0:	69a3      	ldr	r3, [r4, #24]
 80166b2:	deff      	udf	#255	; 0xff
 80166b4:	2300      	movs	r3, #0
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	deff      	udf	#255	; 0xff
 80166ba:	bf00      	nop

080166bc <ai_check_custom_types>:
 80166bc:	b082      	sub	sp, #8
 80166be:	4b13      	ldr	r3, [pc, #76]	; (801670c <ai_check_custom_types+0x50>)
 80166c0:	9301      	str	r3, [sp, #4]
 80166c2:	b118      	cbz	r0, 80166cc <ai_check_custom_types+0x10>
 80166c4:	7803      	ldrb	r3, [r0, #0]
 80166c6:	2b03      	cmp	r3, #3
 80166c8:	d002      	beq.n	80166d0 <ai_check_custom_types+0x14>
 80166ca:	2000      	movs	r0, #0
 80166cc:	b002      	add	sp, #8
 80166ce:	4770      	bx	lr
 80166d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80166d4:	4293      	cmp	r3, r2
 80166d6:	d004      	beq.n	80166e2 <ai_check_custom_types+0x26>
 80166d8:	2001      	movs	r0, #1
 80166da:	f080 0001 	eor.w	r0, r0, #1
 80166de:	b002      	add	sp, #8
 80166e0:	4770      	bx	lr
 80166e2:	7842      	ldrb	r2, [r0, #1]
 80166e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	f100 0001 	add.w	r0, r0, #1
 80166ee:	d1f3      	bne.n	80166d8 <ai_check_custom_types+0x1c>
 80166f0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80166f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80166f8:	429a      	cmp	r2, r3
 80166fa:	d1ed      	bne.n	80166d8 <ai_check_custom_types+0x1c>
 80166fc:	7842      	ldrb	r2, [r0, #1]
 80166fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016702:	429a      	cmp	r2, r3
 8016704:	d1e8      	bne.n	80166d8 <ai_check_custom_types+0x1c>
 8016706:	2000      	movs	r0, #0
 8016708:	e7e7      	b.n	80166da <ai_check_custom_types+0x1e>
 801670a:	bf00      	nop
 801670c:	84048403 	.word	0x84048403

08016710 <ai_layers_init_all>:
 8016710:	4601      	mov	r1, r0
 8016712:	2000      	movs	r0, #0
 8016714:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8016716:	b143      	cbz	r3, 801672a <ai_layers_init_all+0x1a>
 8016718:	691a      	ldr	r2, [r3, #16]
 801671a:	60d9      	str	r1, [r3, #12]
 801671c:	429a      	cmp	r2, r3
 801671e:	f100 0001 	add.w	r0, r0, #1
 8016722:	d002      	beq.n	801672a <ai_layers_init_all+0x1a>
 8016724:	b10a      	cbz	r2, 801672a <ai_layers_init_all+0x1a>
 8016726:	4613      	mov	r3, r2
 8016728:	e7f5      	b.n	8016716 <ai_layers_init_all+0x6>
 801672a:	4770      	bx	lr

0801672c <ai_layers_post_init_all>:
 801672c:	b538      	push	{r3, r4, r5, lr}
 801672e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8016730:	2500      	movs	r5, #0
 8016732:	b16c      	cbz	r4, 8016750 <ai_layers_post_init_all+0x24>
 8016734:	6863      	ldr	r3, [r4, #4]
 8016736:	07db      	lsls	r3, r3, #31
 8016738:	d504      	bpl.n	8016744 <ai_layers_post_init_all+0x18>
 801673a:	6a23      	ldr	r3, [r4, #32]
 801673c:	4620      	mov	r0, r4
 801673e:	b10b      	cbz	r3, 8016744 <ai_layers_post_init_all+0x18>
 8016740:	4798      	blx	r3
 8016742:	3501      	adds	r5, #1
 8016744:	6923      	ldr	r3, [r4, #16]
 8016746:	42a3      	cmp	r3, r4
 8016748:	d002      	beq.n	8016750 <ai_layers_post_init_all+0x24>
 801674a:	b10b      	cbz	r3, 8016750 <ai_layers_post_init_all+0x24>
 801674c:	461c      	mov	r4, r3
 801674e:	e7f0      	b.n	8016732 <ai_layers_post_init_all+0x6>
 8016750:	4628      	mov	r0, r5
 8016752:	bd38      	pop	{r3, r4, r5, pc}

08016754 <ai_layers_forward_all>:
 8016754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016758:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 801675c:	4604      	mov	r4, r0
 801675e:	f1b8 0f00 	cmp.w	r8, #0
 8016762:	d02b      	beq.n	80167bc <ai_layers_forward_all+0x68>
 8016764:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8016766:	6381      	str	r1, [r0, #56]	; 0x38
 8016768:	b321      	cbz	r1, 80167b4 <ai_layers_forward_all+0x60>
 801676a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801676c:	2001      	movs	r0, #1
 801676e:	47c0      	blx	r8
 8016770:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016772:	b1fe      	cbz	r6, 80167b4 <ai_layers_forward_all+0x60>
 8016774:	2700      	movs	r7, #0
 8016776:	4631      	mov	r1, r6
 8016778:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801677a:	2002      	movs	r0, #2
 801677c:	47c0      	blx	r8
 801677e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8016780:	4628      	mov	r0, r5
 8016782:	696b      	ldr	r3, [r5, #20]
 8016784:	4798      	blx	r3
 8016786:	692e      	ldr	r6, [r5, #16]
 8016788:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801678a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801678c:	42b5      	cmp	r5, r6
 801678e:	f04f 0003 	mov.w	r0, #3
 8016792:	d007      	beq.n	80167a4 <ai_layers_forward_all+0x50>
 8016794:	47c0      	blx	r8
 8016796:	3701      	adds	r7, #1
 8016798:	63a6      	str	r6, [r4, #56]	; 0x38
 801679a:	2e00      	cmp	r6, #0
 801679c:	d1eb      	bne.n	8016776 <ai_layers_forward_all+0x22>
 801679e:	4638      	mov	r0, r7
 80167a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a4:	2003      	movs	r0, #3
 80167a6:	47c0      	blx	r8
 80167a8:	2300      	movs	r3, #0
 80167aa:	3701      	adds	r7, #1
 80167ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80167ae:	4638      	mov	r0, r7
 80167b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167b4:	2700      	movs	r7, #0
 80167b6:	4638      	mov	r0, r7
 80167b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167bc:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80167be:	6385      	str	r5, [r0, #56]	; 0x38
 80167c0:	2d00      	cmp	r5, #0
 80167c2:	d0f7      	beq.n	80167b4 <ai_layers_forward_all+0x60>
 80167c4:	4647      	mov	r7, r8
 80167c6:	696b      	ldr	r3, [r5, #20]
 80167c8:	4628      	mov	r0, r5
 80167ca:	4798      	blx	r3
 80167cc:	462b      	mov	r3, r5
 80167ce:	692d      	ldr	r5, [r5, #16]
 80167d0:	429d      	cmp	r5, r3
 80167d2:	d004      	beq.n	80167de <ai_layers_forward_all+0x8a>
 80167d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80167d6:	3701      	adds	r7, #1
 80167d8:	2d00      	cmp	r5, #0
 80167da:	d1f4      	bne.n	80167c6 <ai_layers_forward_all+0x72>
 80167dc:	e7df      	b.n	801679e <ai_layers_forward_all+0x4a>
 80167de:	2300      	movs	r3, #0
 80167e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80167e2:	3701      	adds	r7, #1
 80167e4:	e7db      	b.n	801679e <ai_layers_forward_all+0x4a>
 80167e6:	bf00      	nop

080167e8 <ai_version_get>:
 80167e8:	0212      	lsls	r2, r2, #8
 80167ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80167ee:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80167f2:	4770      	bx	lr

080167f4 <get_tensor_byte_size>:
 80167f4:	b410      	push	{r4}
 80167f6:	6983      	ldr	r3, [r0, #24]
 80167f8:	68c4      	ldr	r4, [r0, #12]
 80167fa:	6941      	ldr	r1, [r0, #20]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	68e0      	ldr	r0, [r4, #12]
 8016800:	4a07      	ldr	r2, [pc, #28]	; (8016820 <get_tensor_byte_size+0x2c>)
 8016802:	68c9      	ldr	r1, [r1, #12]
 8016804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016808:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 801680c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016810:	fb01 f000 	mul.w	r0, r1, r0
 8016814:	4293      	cmp	r3, r2
 8016816:	bf04      	itt	eq
 8016818:	3007      	addeq	r0, #7
 801681a:	08c0      	lsreq	r0, r0, #3
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	000400c0 	.word	0x000400c0

08016824 <ai_array_to_buffer_fmt>:
 8016824:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8016828:	2b02      	cmp	r3, #2
 801682a:	d050      	beq.n	80168ce <ai_array_to_buffer_fmt+0xaa>
 801682c:	4b2a      	ldr	r3, [pc, #168]	; (80168d8 <ai_array_to_buffer_fmt+0xb4>)
 801682e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8016832:	429a      	cmp	r2, r3
 8016834:	d00b      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 8016836:	dc1c      	bgt.n	8016872 <ai_array_to_buffer_fmt+0x4e>
 8016838:	4b28      	ldr	r3, [pc, #160]	; (80168dc <ai_array_to_buffer_fmt+0xb8>)
 801683a:	429a      	cmp	r2, r3
 801683c:	d007      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 801683e:	dd0b      	ble.n	8016858 <ai_array_to_buffer_fmt+0x34>
 8016840:	4b27      	ldr	r3, [pc, #156]	; (80168e0 <ai_array_to_buffer_fmt+0xbc>)
 8016842:	429a      	cmp	r2, r3
 8016844:	d003      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 8016846:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801684a:	429a      	cmp	r2, r3
 801684c:	d131      	bne.n	80168b2 <ai_array_to_buffer_fmt+0x8e>
 801684e:	4613      	mov	r3, r2
 8016850:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8016854:	4318      	orrs	r0, r3
 8016856:	4770      	bx	lr
 8016858:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801685c:	429a      	cmp	r2, r3
 801685e:	d0f6      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 8016860:	dd2c      	ble.n	80168bc <ai_array_to_buffer_fmt+0x98>
 8016862:	4b20      	ldr	r3, [pc, #128]	; (80168e4 <ai_array_to_buffer_fmt+0xc0>)
 8016864:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8016868:	429a      	cmp	r2, r3
 801686a:	bf18      	it	ne
 801686c:	2340      	movne	r3, #64	; 0x40
 801686e:	4318      	orrs	r0, r3
 8016870:	4770      	bx	lr
 8016872:	4b1d      	ldr	r3, [pc, #116]	; (80168e8 <ai_array_to_buffer_fmt+0xc4>)
 8016874:	429a      	cmp	r2, r3
 8016876:	d0ea      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 8016878:	dd0e      	ble.n	8016898 <ai_array_to_buffer_fmt+0x74>
 801687a:	4b1c      	ldr	r3, [pc, #112]	; (80168ec <ai_array_to_buffer_fmt+0xc8>)
 801687c:	429a      	cmp	r2, r3
 801687e:	d0e6      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 8016880:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8016884:	429a      	cmp	r2, r3
 8016886:	d0e2      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 8016888:	4b19      	ldr	r3, [pc, #100]	; (80168f0 <ai_array_to_buffer_fmt+0xcc>)
 801688a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801688e:	429a      	cmp	r2, r3
 8016890:	bf18      	it	ne
 8016892:	2340      	movne	r3, #64	; 0x40
 8016894:	4318      	orrs	r0, r3
 8016896:	4770      	bx	lr
 8016898:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801689c:	429a      	cmp	r2, r3
 801689e:	d0d6      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 80168a0:	3307      	adds	r3, #7
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d0d3      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 80168a6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80168aa:	429a      	cmp	r2, r3
 80168ac:	bf18      	it	ne
 80168ae:	2340      	movne	r3, #64	; 0x40
 80168b0:	e7ce      	b.n	8016850 <ai_array_to_buffer_fmt+0x2c>
 80168b2:	4b10      	ldr	r3, [pc, #64]	; (80168f4 <ai_array_to_buffer_fmt+0xd0>)
 80168b4:	429a      	cmp	r2, r3
 80168b6:	bf18      	it	ne
 80168b8:	2340      	movne	r3, #64	; 0x40
 80168ba:	e7c9      	b.n	8016850 <ai_array_to_buffer_fmt+0x2c>
 80168bc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d0c4      	beq.n	801684e <ai_array_to_buffer_fmt+0x2a>
 80168c4:	3380      	adds	r3, #128	; 0x80
 80168c6:	429a      	cmp	r2, r3
 80168c8:	bf18      	it	ne
 80168ca:	2340      	movne	r3, #64	; 0x40
 80168cc:	e7c0      	b.n	8016850 <ai_array_to_buffer_fmt+0x2c>
 80168ce:	4b0a      	ldr	r3, [pc, #40]	; (80168f8 <ai_array_to_buffer_fmt+0xd4>)
 80168d0:	4003      	ands	r3, r0
 80168d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80168d6:	e7bb      	b.n	8016850 <ai_array_to_buffer_fmt+0x2c>
 80168d8:	00840040 	.word	0x00840040
 80168dc:	00040840 	.word	0x00040840
 80168e0:	00041040 	.word	0x00041040
 80168e4:	00040447 	.word	0x00040447
 80168e8:	00840840 	.word	0x00840840
 80168ec:	00841040 	.word	0x00841040
 80168f0:	0084084f 	.word	0x0084084f
 80168f4:	0004084f 	.word	0x0004084f
 80168f8:	00803fff 	.word	0x00803fff

080168fc <ai_array_get_byte_size>:
 80168fc:	b319      	cbz	r1, 8016946 <ai_array_get_byte_size+0x4a>
 80168fe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8016902:	fb03 f101 	mul.w	r1, r3, r1
 8016906:	3107      	adds	r1, #7
 8016908:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801690c:	f021 0307 	bic.w	r3, r1, #7
 8016910:	2a04      	cmp	r2, #4
 8016912:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8016916:	fa23 f101 	lsr.w	r1, r3, r1
 801691a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 801691e:	d00b      	beq.n	8016938 <ai_array_get_byte_size+0x3c>
 8016920:	2a08      	cmp	r2, #8
 8016922:	d002      	beq.n	801692a <ai_array_get_byte_size+0x2e>
 8016924:	3107      	adds	r1, #7
 8016926:	08c8      	lsrs	r0, r1, #3
 8016928:	4770      	bx	lr
 801692a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801692e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8016932:	3107      	adds	r1, #7
 8016934:	08c8      	lsrs	r0, r1, #3
 8016936:	4770      	bx	lr
 8016938:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801693c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8016940:	3107      	adds	r1, #7
 8016942:	08c8      	lsrs	r0, r1, #3
 8016944:	4770      	bx	lr
 8016946:	4608      	mov	r0, r1
 8016948:	4770      	bx	lr
 801694a:	bf00      	nop

0801694c <ai_array_get_data_byte_size>:
 801694c:	b169      	cbz	r1, 801696a <ai_array_get_data_byte_size+0x1e>
 801694e:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8016952:	fb02 f101 	mul.w	r1, r2, r1
 8016956:	1dcb      	adds	r3, r1, #7
 8016958:	f023 0307 	bic.w	r3, r3, #7
 801695c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8016960:	fa23 f000 	lsr.w	r0, r3, r0
 8016964:	3007      	adds	r0, #7
 8016966:	08c0      	lsrs	r0, r0, #3
 8016968:	4770      	bx	lr
 801696a:	4608      	mov	r0, r1
 801696c:	4770      	bx	lr
 801696e:	bf00      	nop

08016970 <__errno>:
 8016970:	4b01      	ldr	r3, [pc, #4]	; (8016978 <__errno+0x8>)
 8016972:	6818      	ldr	r0, [r3, #0]
 8016974:	4770      	bx	lr
 8016976:	bf00      	nop
 8016978:	2000083c 	.word	0x2000083c

0801697c <__libc_init_array>:
 801697c:	b570      	push	{r4, r5, r6, lr}
 801697e:	4d0d      	ldr	r5, [pc, #52]	; (80169b4 <__libc_init_array+0x38>)
 8016980:	4c0d      	ldr	r4, [pc, #52]	; (80169b8 <__libc_init_array+0x3c>)
 8016982:	1b64      	subs	r4, r4, r5
 8016984:	10a4      	asrs	r4, r4, #2
 8016986:	2600      	movs	r6, #0
 8016988:	42a6      	cmp	r6, r4
 801698a:	d109      	bne.n	80169a0 <__libc_init_array+0x24>
 801698c:	4d0b      	ldr	r5, [pc, #44]	; (80169bc <__libc_init_array+0x40>)
 801698e:	4c0c      	ldr	r4, [pc, #48]	; (80169c0 <__libc_init_array+0x44>)
 8016990:	f002 f964 	bl	8018c5c <_init>
 8016994:	1b64      	subs	r4, r4, r5
 8016996:	10a4      	asrs	r4, r4, #2
 8016998:	2600      	movs	r6, #0
 801699a:	42a6      	cmp	r6, r4
 801699c:	d105      	bne.n	80169aa <__libc_init_array+0x2e>
 801699e:	bd70      	pop	{r4, r5, r6, pc}
 80169a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80169a4:	4798      	blx	r3
 80169a6:	3601      	adds	r6, #1
 80169a8:	e7ee      	b.n	8016988 <__libc_init_array+0xc>
 80169aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80169ae:	4798      	blx	r3
 80169b0:	3601      	adds	r6, #1
 80169b2:	e7f2      	b.n	801699a <__libc_init_array+0x1e>
 80169b4:	080195d8 	.word	0x080195d8
 80169b8:	080195d8 	.word	0x080195d8
 80169bc:	080195d8 	.word	0x080195d8
 80169c0:	080195dc 	.word	0x080195dc

080169c4 <memcpy>:
 80169c4:	440a      	add	r2, r1
 80169c6:	4291      	cmp	r1, r2
 80169c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80169cc:	d100      	bne.n	80169d0 <memcpy+0xc>
 80169ce:	4770      	bx	lr
 80169d0:	b510      	push	{r4, lr}
 80169d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169da:	4291      	cmp	r1, r2
 80169dc:	d1f9      	bne.n	80169d2 <memcpy+0xe>
 80169de:	bd10      	pop	{r4, pc}

080169e0 <memset>:
 80169e0:	4402      	add	r2, r0
 80169e2:	4603      	mov	r3, r0
 80169e4:	4293      	cmp	r3, r2
 80169e6:	d100      	bne.n	80169ea <memset+0xa>
 80169e8:	4770      	bx	lr
 80169ea:	f803 1b01 	strb.w	r1, [r3], #1
 80169ee:	e7f9      	b.n	80169e4 <memset+0x4>

080169f0 <_free_r>:
 80169f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169f2:	2900      	cmp	r1, #0
 80169f4:	d044      	beq.n	8016a80 <_free_r+0x90>
 80169f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169fa:	9001      	str	r0, [sp, #4]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	f1a1 0404 	sub.w	r4, r1, #4
 8016a02:	bfb8      	it	lt
 8016a04:	18e4      	addlt	r4, r4, r3
 8016a06:	f000 fc85 	bl	8017314 <__malloc_lock>
 8016a0a:	4a1e      	ldr	r2, [pc, #120]	; (8016a84 <_free_r+0x94>)
 8016a0c:	9801      	ldr	r0, [sp, #4]
 8016a0e:	6813      	ldr	r3, [r2, #0]
 8016a10:	b933      	cbnz	r3, 8016a20 <_free_r+0x30>
 8016a12:	6063      	str	r3, [r4, #4]
 8016a14:	6014      	str	r4, [r2, #0]
 8016a16:	b003      	add	sp, #12
 8016a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a1c:	f000 bc80 	b.w	8017320 <__malloc_unlock>
 8016a20:	42a3      	cmp	r3, r4
 8016a22:	d908      	bls.n	8016a36 <_free_r+0x46>
 8016a24:	6825      	ldr	r5, [r4, #0]
 8016a26:	1961      	adds	r1, r4, r5
 8016a28:	428b      	cmp	r3, r1
 8016a2a:	bf01      	itttt	eq
 8016a2c:	6819      	ldreq	r1, [r3, #0]
 8016a2e:	685b      	ldreq	r3, [r3, #4]
 8016a30:	1949      	addeq	r1, r1, r5
 8016a32:	6021      	streq	r1, [r4, #0]
 8016a34:	e7ed      	b.n	8016a12 <_free_r+0x22>
 8016a36:	461a      	mov	r2, r3
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	b10b      	cbz	r3, 8016a40 <_free_r+0x50>
 8016a3c:	42a3      	cmp	r3, r4
 8016a3e:	d9fa      	bls.n	8016a36 <_free_r+0x46>
 8016a40:	6811      	ldr	r1, [r2, #0]
 8016a42:	1855      	adds	r5, r2, r1
 8016a44:	42a5      	cmp	r5, r4
 8016a46:	d10b      	bne.n	8016a60 <_free_r+0x70>
 8016a48:	6824      	ldr	r4, [r4, #0]
 8016a4a:	4421      	add	r1, r4
 8016a4c:	1854      	adds	r4, r2, r1
 8016a4e:	42a3      	cmp	r3, r4
 8016a50:	6011      	str	r1, [r2, #0]
 8016a52:	d1e0      	bne.n	8016a16 <_free_r+0x26>
 8016a54:	681c      	ldr	r4, [r3, #0]
 8016a56:	685b      	ldr	r3, [r3, #4]
 8016a58:	6053      	str	r3, [r2, #4]
 8016a5a:	4421      	add	r1, r4
 8016a5c:	6011      	str	r1, [r2, #0]
 8016a5e:	e7da      	b.n	8016a16 <_free_r+0x26>
 8016a60:	d902      	bls.n	8016a68 <_free_r+0x78>
 8016a62:	230c      	movs	r3, #12
 8016a64:	6003      	str	r3, [r0, #0]
 8016a66:	e7d6      	b.n	8016a16 <_free_r+0x26>
 8016a68:	6825      	ldr	r5, [r4, #0]
 8016a6a:	1961      	adds	r1, r4, r5
 8016a6c:	428b      	cmp	r3, r1
 8016a6e:	bf04      	itt	eq
 8016a70:	6819      	ldreq	r1, [r3, #0]
 8016a72:	685b      	ldreq	r3, [r3, #4]
 8016a74:	6063      	str	r3, [r4, #4]
 8016a76:	bf04      	itt	eq
 8016a78:	1949      	addeq	r1, r1, r5
 8016a7a:	6021      	streq	r1, [r4, #0]
 8016a7c:	6054      	str	r4, [r2, #4]
 8016a7e:	e7ca      	b.n	8016a16 <_free_r+0x26>
 8016a80:	b003      	add	sp, #12
 8016a82:	bd30      	pop	{r4, r5, pc}
 8016a84:	20002ec4 	.word	0x20002ec4

08016a88 <sbrk_aligned>:
 8016a88:	b570      	push	{r4, r5, r6, lr}
 8016a8a:	4e0e      	ldr	r6, [pc, #56]	; (8016ac4 <sbrk_aligned+0x3c>)
 8016a8c:	460c      	mov	r4, r1
 8016a8e:	6831      	ldr	r1, [r6, #0]
 8016a90:	4605      	mov	r5, r0
 8016a92:	b911      	cbnz	r1, 8016a9a <sbrk_aligned+0x12>
 8016a94:	f000 f91a 	bl	8016ccc <_sbrk_r>
 8016a98:	6030      	str	r0, [r6, #0]
 8016a9a:	4621      	mov	r1, r4
 8016a9c:	4628      	mov	r0, r5
 8016a9e:	f000 f915 	bl	8016ccc <_sbrk_r>
 8016aa2:	1c43      	adds	r3, r0, #1
 8016aa4:	d00a      	beq.n	8016abc <sbrk_aligned+0x34>
 8016aa6:	1cc4      	adds	r4, r0, #3
 8016aa8:	f024 0403 	bic.w	r4, r4, #3
 8016aac:	42a0      	cmp	r0, r4
 8016aae:	d007      	beq.n	8016ac0 <sbrk_aligned+0x38>
 8016ab0:	1a21      	subs	r1, r4, r0
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	f000 f90a 	bl	8016ccc <_sbrk_r>
 8016ab8:	3001      	adds	r0, #1
 8016aba:	d101      	bne.n	8016ac0 <sbrk_aligned+0x38>
 8016abc:	f04f 34ff 	mov.w	r4, #4294967295
 8016ac0:	4620      	mov	r0, r4
 8016ac2:	bd70      	pop	{r4, r5, r6, pc}
 8016ac4:	20002ec8 	.word	0x20002ec8

08016ac8 <_malloc_r>:
 8016ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016acc:	1ccd      	adds	r5, r1, #3
 8016ace:	f025 0503 	bic.w	r5, r5, #3
 8016ad2:	3508      	adds	r5, #8
 8016ad4:	2d0c      	cmp	r5, #12
 8016ad6:	bf38      	it	cc
 8016ad8:	250c      	movcc	r5, #12
 8016ada:	2d00      	cmp	r5, #0
 8016adc:	4607      	mov	r7, r0
 8016ade:	db01      	blt.n	8016ae4 <_malloc_r+0x1c>
 8016ae0:	42a9      	cmp	r1, r5
 8016ae2:	d905      	bls.n	8016af0 <_malloc_r+0x28>
 8016ae4:	230c      	movs	r3, #12
 8016ae6:	603b      	str	r3, [r7, #0]
 8016ae8:	2600      	movs	r6, #0
 8016aea:	4630      	mov	r0, r6
 8016aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016af0:	4e2e      	ldr	r6, [pc, #184]	; (8016bac <_malloc_r+0xe4>)
 8016af2:	f000 fc0f 	bl	8017314 <__malloc_lock>
 8016af6:	6833      	ldr	r3, [r6, #0]
 8016af8:	461c      	mov	r4, r3
 8016afa:	bb34      	cbnz	r4, 8016b4a <_malloc_r+0x82>
 8016afc:	4629      	mov	r1, r5
 8016afe:	4638      	mov	r0, r7
 8016b00:	f7ff ffc2 	bl	8016a88 <sbrk_aligned>
 8016b04:	1c43      	adds	r3, r0, #1
 8016b06:	4604      	mov	r4, r0
 8016b08:	d14d      	bne.n	8016ba6 <_malloc_r+0xde>
 8016b0a:	6834      	ldr	r4, [r6, #0]
 8016b0c:	4626      	mov	r6, r4
 8016b0e:	2e00      	cmp	r6, #0
 8016b10:	d140      	bne.n	8016b94 <_malloc_r+0xcc>
 8016b12:	6823      	ldr	r3, [r4, #0]
 8016b14:	4631      	mov	r1, r6
 8016b16:	4638      	mov	r0, r7
 8016b18:	eb04 0803 	add.w	r8, r4, r3
 8016b1c:	f000 f8d6 	bl	8016ccc <_sbrk_r>
 8016b20:	4580      	cmp	r8, r0
 8016b22:	d13a      	bne.n	8016b9a <_malloc_r+0xd2>
 8016b24:	6821      	ldr	r1, [r4, #0]
 8016b26:	3503      	adds	r5, #3
 8016b28:	1a6d      	subs	r5, r5, r1
 8016b2a:	f025 0503 	bic.w	r5, r5, #3
 8016b2e:	3508      	adds	r5, #8
 8016b30:	2d0c      	cmp	r5, #12
 8016b32:	bf38      	it	cc
 8016b34:	250c      	movcc	r5, #12
 8016b36:	4629      	mov	r1, r5
 8016b38:	4638      	mov	r0, r7
 8016b3a:	f7ff ffa5 	bl	8016a88 <sbrk_aligned>
 8016b3e:	3001      	adds	r0, #1
 8016b40:	d02b      	beq.n	8016b9a <_malloc_r+0xd2>
 8016b42:	6823      	ldr	r3, [r4, #0]
 8016b44:	442b      	add	r3, r5
 8016b46:	6023      	str	r3, [r4, #0]
 8016b48:	e00e      	b.n	8016b68 <_malloc_r+0xa0>
 8016b4a:	6822      	ldr	r2, [r4, #0]
 8016b4c:	1b52      	subs	r2, r2, r5
 8016b4e:	d41e      	bmi.n	8016b8e <_malloc_r+0xc6>
 8016b50:	2a0b      	cmp	r2, #11
 8016b52:	d916      	bls.n	8016b82 <_malloc_r+0xba>
 8016b54:	1961      	adds	r1, r4, r5
 8016b56:	42a3      	cmp	r3, r4
 8016b58:	6025      	str	r5, [r4, #0]
 8016b5a:	bf18      	it	ne
 8016b5c:	6059      	strne	r1, [r3, #4]
 8016b5e:	6863      	ldr	r3, [r4, #4]
 8016b60:	bf08      	it	eq
 8016b62:	6031      	streq	r1, [r6, #0]
 8016b64:	5162      	str	r2, [r4, r5]
 8016b66:	604b      	str	r3, [r1, #4]
 8016b68:	4638      	mov	r0, r7
 8016b6a:	f104 060b 	add.w	r6, r4, #11
 8016b6e:	f000 fbd7 	bl	8017320 <__malloc_unlock>
 8016b72:	f026 0607 	bic.w	r6, r6, #7
 8016b76:	1d23      	adds	r3, r4, #4
 8016b78:	1af2      	subs	r2, r6, r3
 8016b7a:	d0b6      	beq.n	8016aea <_malloc_r+0x22>
 8016b7c:	1b9b      	subs	r3, r3, r6
 8016b7e:	50a3      	str	r3, [r4, r2]
 8016b80:	e7b3      	b.n	8016aea <_malloc_r+0x22>
 8016b82:	6862      	ldr	r2, [r4, #4]
 8016b84:	42a3      	cmp	r3, r4
 8016b86:	bf0c      	ite	eq
 8016b88:	6032      	streq	r2, [r6, #0]
 8016b8a:	605a      	strne	r2, [r3, #4]
 8016b8c:	e7ec      	b.n	8016b68 <_malloc_r+0xa0>
 8016b8e:	4623      	mov	r3, r4
 8016b90:	6864      	ldr	r4, [r4, #4]
 8016b92:	e7b2      	b.n	8016afa <_malloc_r+0x32>
 8016b94:	4634      	mov	r4, r6
 8016b96:	6876      	ldr	r6, [r6, #4]
 8016b98:	e7b9      	b.n	8016b0e <_malloc_r+0x46>
 8016b9a:	230c      	movs	r3, #12
 8016b9c:	603b      	str	r3, [r7, #0]
 8016b9e:	4638      	mov	r0, r7
 8016ba0:	f000 fbbe 	bl	8017320 <__malloc_unlock>
 8016ba4:	e7a1      	b.n	8016aea <_malloc_r+0x22>
 8016ba6:	6025      	str	r5, [r4, #0]
 8016ba8:	e7de      	b.n	8016b68 <_malloc_r+0xa0>
 8016baa:	bf00      	nop
 8016bac:	20002ec4 	.word	0x20002ec4

08016bb0 <iprintf>:
 8016bb0:	b40f      	push	{r0, r1, r2, r3}
 8016bb2:	4b0a      	ldr	r3, [pc, #40]	; (8016bdc <iprintf+0x2c>)
 8016bb4:	b513      	push	{r0, r1, r4, lr}
 8016bb6:	681c      	ldr	r4, [r3, #0]
 8016bb8:	b124      	cbz	r4, 8016bc4 <iprintf+0x14>
 8016bba:	69a3      	ldr	r3, [r4, #24]
 8016bbc:	b913      	cbnz	r3, 8016bc4 <iprintf+0x14>
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f000 faa2 	bl	8017108 <__sinit>
 8016bc4:	ab05      	add	r3, sp, #20
 8016bc6:	9a04      	ldr	r2, [sp, #16]
 8016bc8:	68a1      	ldr	r1, [r4, #8]
 8016bca:	9301      	str	r3, [sp, #4]
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f000 fd61 	bl	8017694 <_vfiprintf_r>
 8016bd2:	b002      	add	sp, #8
 8016bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bd8:	b004      	add	sp, #16
 8016bda:	4770      	bx	lr
 8016bdc:	2000083c 	.word	0x2000083c

08016be0 <_puts_r>:
 8016be0:	b570      	push	{r4, r5, r6, lr}
 8016be2:	460e      	mov	r6, r1
 8016be4:	4605      	mov	r5, r0
 8016be6:	b118      	cbz	r0, 8016bf0 <_puts_r+0x10>
 8016be8:	6983      	ldr	r3, [r0, #24]
 8016bea:	b90b      	cbnz	r3, 8016bf0 <_puts_r+0x10>
 8016bec:	f000 fa8c 	bl	8017108 <__sinit>
 8016bf0:	69ab      	ldr	r3, [r5, #24]
 8016bf2:	68ac      	ldr	r4, [r5, #8]
 8016bf4:	b913      	cbnz	r3, 8016bfc <_puts_r+0x1c>
 8016bf6:	4628      	mov	r0, r5
 8016bf8:	f000 fa86 	bl	8017108 <__sinit>
 8016bfc:	4b2c      	ldr	r3, [pc, #176]	; (8016cb0 <_puts_r+0xd0>)
 8016bfe:	429c      	cmp	r4, r3
 8016c00:	d120      	bne.n	8016c44 <_puts_r+0x64>
 8016c02:	686c      	ldr	r4, [r5, #4]
 8016c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c06:	07db      	lsls	r3, r3, #31
 8016c08:	d405      	bmi.n	8016c16 <_puts_r+0x36>
 8016c0a:	89a3      	ldrh	r3, [r4, #12]
 8016c0c:	0598      	lsls	r0, r3, #22
 8016c0e:	d402      	bmi.n	8016c16 <_puts_r+0x36>
 8016c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c12:	f000 fb17 	bl	8017244 <__retarget_lock_acquire_recursive>
 8016c16:	89a3      	ldrh	r3, [r4, #12]
 8016c18:	0719      	lsls	r1, r3, #28
 8016c1a:	d51d      	bpl.n	8016c58 <_puts_r+0x78>
 8016c1c:	6923      	ldr	r3, [r4, #16]
 8016c1e:	b1db      	cbz	r3, 8016c58 <_puts_r+0x78>
 8016c20:	3e01      	subs	r6, #1
 8016c22:	68a3      	ldr	r3, [r4, #8]
 8016c24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c28:	3b01      	subs	r3, #1
 8016c2a:	60a3      	str	r3, [r4, #8]
 8016c2c:	bb39      	cbnz	r1, 8016c7e <_puts_r+0x9e>
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	da38      	bge.n	8016ca4 <_puts_r+0xc4>
 8016c32:	4622      	mov	r2, r4
 8016c34:	210a      	movs	r1, #10
 8016c36:	4628      	mov	r0, r5
 8016c38:	f000 f88c 	bl	8016d54 <__swbuf_r>
 8016c3c:	3001      	adds	r0, #1
 8016c3e:	d011      	beq.n	8016c64 <_puts_r+0x84>
 8016c40:	250a      	movs	r5, #10
 8016c42:	e011      	b.n	8016c68 <_puts_r+0x88>
 8016c44:	4b1b      	ldr	r3, [pc, #108]	; (8016cb4 <_puts_r+0xd4>)
 8016c46:	429c      	cmp	r4, r3
 8016c48:	d101      	bne.n	8016c4e <_puts_r+0x6e>
 8016c4a:	68ac      	ldr	r4, [r5, #8]
 8016c4c:	e7da      	b.n	8016c04 <_puts_r+0x24>
 8016c4e:	4b1a      	ldr	r3, [pc, #104]	; (8016cb8 <_puts_r+0xd8>)
 8016c50:	429c      	cmp	r4, r3
 8016c52:	bf08      	it	eq
 8016c54:	68ec      	ldreq	r4, [r5, #12]
 8016c56:	e7d5      	b.n	8016c04 <_puts_r+0x24>
 8016c58:	4621      	mov	r1, r4
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	f000 f8cc 	bl	8016df8 <__swsetup_r>
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d0dd      	beq.n	8016c20 <_puts_r+0x40>
 8016c64:	f04f 35ff 	mov.w	r5, #4294967295
 8016c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c6a:	07da      	lsls	r2, r3, #31
 8016c6c:	d405      	bmi.n	8016c7a <_puts_r+0x9a>
 8016c6e:	89a3      	ldrh	r3, [r4, #12]
 8016c70:	059b      	lsls	r3, r3, #22
 8016c72:	d402      	bmi.n	8016c7a <_puts_r+0x9a>
 8016c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c76:	f000 fae6 	bl	8017246 <__retarget_lock_release_recursive>
 8016c7a:	4628      	mov	r0, r5
 8016c7c:	bd70      	pop	{r4, r5, r6, pc}
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	da04      	bge.n	8016c8c <_puts_r+0xac>
 8016c82:	69a2      	ldr	r2, [r4, #24]
 8016c84:	429a      	cmp	r2, r3
 8016c86:	dc06      	bgt.n	8016c96 <_puts_r+0xb6>
 8016c88:	290a      	cmp	r1, #10
 8016c8a:	d004      	beq.n	8016c96 <_puts_r+0xb6>
 8016c8c:	6823      	ldr	r3, [r4, #0]
 8016c8e:	1c5a      	adds	r2, r3, #1
 8016c90:	6022      	str	r2, [r4, #0]
 8016c92:	7019      	strb	r1, [r3, #0]
 8016c94:	e7c5      	b.n	8016c22 <_puts_r+0x42>
 8016c96:	4622      	mov	r2, r4
 8016c98:	4628      	mov	r0, r5
 8016c9a:	f000 f85b 	bl	8016d54 <__swbuf_r>
 8016c9e:	3001      	adds	r0, #1
 8016ca0:	d1bf      	bne.n	8016c22 <_puts_r+0x42>
 8016ca2:	e7df      	b.n	8016c64 <_puts_r+0x84>
 8016ca4:	6823      	ldr	r3, [r4, #0]
 8016ca6:	250a      	movs	r5, #10
 8016ca8:	1c5a      	adds	r2, r3, #1
 8016caa:	6022      	str	r2, [r4, #0]
 8016cac:	701d      	strb	r5, [r3, #0]
 8016cae:	e7db      	b.n	8016c68 <_puts_r+0x88>
 8016cb0:	08019534 	.word	0x08019534
 8016cb4:	08019554 	.word	0x08019554
 8016cb8:	08019514 	.word	0x08019514

08016cbc <puts>:
 8016cbc:	4b02      	ldr	r3, [pc, #8]	; (8016cc8 <puts+0xc>)
 8016cbe:	4601      	mov	r1, r0
 8016cc0:	6818      	ldr	r0, [r3, #0]
 8016cc2:	f7ff bf8d 	b.w	8016be0 <_puts_r>
 8016cc6:	bf00      	nop
 8016cc8:	2000083c 	.word	0x2000083c

08016ccc <_sbrk_r>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	4d06      	ldr	r5, [pc, #24]	; (8016ce8 <_sbrk_r+0x1c>)
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	4604      	mov	r4, r0
 8016cd4:	4608      	mov	r0, r1
 8016cd6:	602b      	str	r3, [r5, #0]
 8016cd8:	f7eb faee 	bl	80022b8 <_sbrk>
 8016cdc:	1c43      	adds	r3, r0, #1
 8016cde:	d102      	bne.n	8016ce6 <_sbrk_r+0x1a>
 8016ce0:	682b      	ldr	r3, [r5, #0]
 8016ce2:	b103      	cbz	r3, 8016ce6 <_sbrk_r+0x1a>
 8016ce4:	6023      	str	r3, [r4, #0]
 8016ce6:	bd38      	pop	{r3, r4, r5, pc}
 8016ce8:	20002ed0 	.word	0x20002ed0

08016cec <sniprintf>:
 8016cec:	b40c      	push	{r2, r3}
 8016cee:	b530      	push	{r4, r5, lr}
 8016cf0:	4b17      	ldr	r3, [pc, #92]	; (8016d50 <sniprintf+0x64>)
 8016cf2:	1e0c      	subs	r4, r1, #0
 8016cf4:	681d      	ldr	r5, [r3, #0]
 8016cf6:	b09d      	sub	sp, #116	; 0x74
 8016cf8:	da08      	bge.n	8016d0c <sniprintf+0x20>
 8016cfa:	238b      	movs	r3, #139	; 0x8b
 8016cfc:	602b      	str	r3, [r5, #0]
 8016cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8016d02:	b01d      	add	sp, #116	; 0x74
 8016d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d08:	b002      	add	sp, #8
 8016d0a:	4770      	bx	lr
 8016d0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016d10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d14:	bf14      	ite	ne
 8016d16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016d1a:	4623      	moveq	r3, r4
 8016d1c:	9304      	str	r3, [sp, #16]
 8016d1e:	9307      	str	r3, [sp, #28]
 8016d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d24:	9002      	str	r0, [sp, #8]
 8016d26:	9006      	str	r0, [sp, #24]
 8016d28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016d2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016d2e:	ab21      	add	r3, sp, #132	; 0x84
 8016d30:	a902      	add	r1, sp, #8
 8016d32:	4628      	mov	r0, r5
 8016d34:	9301      	str	r3, [sp, #4]
 8016d36:	f000 fb83 	bl	8017440 <_svfiprintf_r>
 8016d3a:	1c43      	adds	r3, r0, #1
 8016d3c:	bfbc      	itt	lt
 8016d3e:	238b      	movlt	r3, #139	; 0x8b
 8016d40:	602b      	strlt	r3, [r5, #0]
 8016d42:	2c00      	cmp	r4, #0
 8016d44:	d0dd      	beq.n	8016d02 <sniprintf+0x16>
 8016d46:	9b02      	ldr	r3, [sp, #8]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	701a      	strb	r2, [r3, #0]
 8016d4c:	e7d9      	b.n	8016d02 <sniprintf+0x16>
 8016d4e:	bf00      	nop
 8016d50:	2000083c 	.word	0x2000083c

08016d54 <__swbuf_r>:
 8016d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d56:	460e      	mov	r6, r1
 8016d58:	4614      	mov	r4, r2
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	b118      	cbz	r0, 8016d66 <__swbuf_r+0x12>
 8016d5e:	6983      	ldr	r3, [r0, #24]
 8016d60:	b90b      	cbnz	r3, 8016d66 <__swbuf_r+0x12>
 8016d62:	f000 f9d1 	bl	8017108 <__sinit>
 8016d66:	4b21      	ldr	r3, [pc, #132]	; (8016dec <__swbuf_r+0x98>)
 8016d68:	429c      	cmp	r4, r3
 8016d6a:	d12b      	bne.n	8016dc4 <__swbuf_r+0x70>
 8016d6c:	686c      	ldr	r4, [r5, #4]
 8016d6e:	69a3      	ldr	r3, [r4, #24]
 8016d70:	60a3      	str	r3, [r4, #8]
 8016d72:	89a3      	ldrh	r3, [r4, #12]
 8016d74:	071a      	lsls	r2, r3, #28
 8016d76:	d52f      	bpl.n	8016dd8 <__swbuf_r+0x84>
 8016d78:	6923      	ldr	r3, [r4, #16]
 8016d7a:	b36b      	cbz	r3, 8016dd8 <__swbuf_r+0x84>
 8016d7c:	6923      	ldr	r3, [r4, #16]
 8016d7e:	6820      	ldr	r0, [r4, #0]
 8016d80:	1ac0      	subs	r0, r0, r3
 8016d82:	6963      	ldr	r3, [r4, #20]
 8016d84:	b2f6      	uxtb	r6, r6
 8016d86:	4283      	cmp	r3, r0
 8016d88:	4637      	mov	r7, r6
 8016d8a:	dc04      	bgt.n	8016d96 <__swbuf_r+0x42>
 8016d8c:	4621      	mov	r1, r4
 8016d8e:	4628      	mov	r0, r5
 8016d90:	f000 f926 	bl	8016fe0 <_fflush_r>
 8016d94:	bb30      	cbnz	r0, 8016de4 <__swbuf_r+0x90>
 8016d96:	68a3      	ldr	r3, [r4, #8]
 8016d98:	3b01      	subs	r3, #1
 8016d9a:	60a3      	str	r3, [r4, #8]
 8016d9c:	6823      	ldr	r3, [r4, #0]
 8016d9e:	1c5a      	adds	r2, r3, #1
 8016da0:	6022      	str	r2, [r4, #0]
 8016da2:	701e      	strb	r6, [r3, #0]
 8016da4:	6963      	ldr	r3, [r4, #20]
 8016da6:	3001      	adds	r0, #1
 8016da8:	4283      	cmp	r3, r0
 8016daa:	d004      	beq.n	8016db6 <__swbuf_r+0x62>
 8016dac:	89a3      	ldrh	r3, [r4, #12]
 8016dae:	07db      	lsls	r3, r3, #31
 8016db0:	d506      	bpl.n	8016dc0 <__swbuf_r+0x6c>
 8016db2:	2e0a      	cmp	r6, #10
 8016db4:	d104      	bne.n	8016dc0 <__swbuf_r+0x6c>
 8016db6:	4621      	mov	r1, r4
 8016db8:	4628      	mov	r0, r5
 8016dba:	f000 f911 	bl	8016fe0 <_fflush_r>
 8016dbe:	b988      	cbnz	r0, 8016de4 <__swbuf_r+0x90>
 8016dc0:	4638      	mov	r0, r7
 8016dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dc4:	4b0a      	ldr	r3, [pc, #40]	; (8016df0 <__swbuf_r+0x9c>)
 8016dc6:	429c      	cmp	r4, r3
 8016dc8:	d101      	bne.n	8016dce <__swbuf_r+0x7a>
 8016dca:	68ac      	ldr	r4, [r5, #8]
 8016dcc:	e7cf      	b.n	8016d6e <__swbuf_r+0x1a>
 8016dce:	4b09      	ldr	r3, [pc, #36]	; (8016df4 <__swbuf_r+0xa0>)
 8016dd0:	429c      	cmp	r4, r3
 8016dd2:	bf08      	it	eq
 8016dd4:	68ec      	ldreq	r4, [r5, #12]
 8016dd6:	e7ca      	b.n	8016d6e <__swbuf_r+0x1a>
 8016dd8:	4621      	mov	r1, r4
 8016dda:	4628      	mov	r0, r5
 8016ddc:	f000 f80c 	bl	8016df8 <__swsetup_r>
 8016de0:	2800      	cmp	r0, #0
 8016de2:	d0cb      	beq.n	8016d7c <__swbuf_r+0x28>
 8016de4:	f04f 37ff 	mov.w	r7, #4294967295
 8016de8:	e7ea      	b.n	8016dc0 <__swbuf_r+0x6c>
 8016dea:	bf00      	nop
 8016dec:	08019534 	.word	0x08019534
 8016df0:	08019554 	.word	0x08019554
 8016df4:	08019514 	.word	0x08019514

08016df8 <__swsetup_r>:
 8016df8:	4b32      	ldr	r3, [pc, #200]	; (8016ec4 <__swsetup_r+0xcc>)
 8016dfa:	b570      	push	{r4, r5, r6, lr}
 8016dfc:	681d      	ldr	r5, [r3, #0]
 8016dfe:	4606      	mov	r6, r0
 8016e00:	460c      	mov	r4, r1
 8016e02:	b125      	cbz	r5, 8016e0e <__swsetup_r+0x16>
 8016e04:	69ab      	ldr	r3, [r5, #24]
 8016e06:	b913      	cbnz	r3, 8016e0e <__swsetup_r+0x16>
 8016e08:	4628      	mov	r0, r5
 8016e0a:	f000 f97d 	bl	8017108 <__sinit>
 8016e0e:	4b2e      	ldr	r3, [pc, #184]	; (8016ec8 <__swsetup_r+0xd0>)
 8016e10:	429c      	cmp	r4, r3
 8016e12:	d10f      	bne.n	8016e34 <__swsetup_r+0x3c>
 8016e14:	686c      	ldr	r4, [r5, #4]
 8016e16:	89a3      	ldrh	r3, [r4, #12]
 8016e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e1c:	0719      	lsls	r1, r3, #28
 8016e1e:	d42c      	bmi.n	8016e7a <__swsetup_r+0x82>
 8016e20:	06dd      	lsls	r5, r3, #27
 8016e22:	d411      	bmi.n	8016e48 <__swsetup_r+0x50>
 8016e24:	2309      	movs	r3, #9
 8016e26:	6033      	str	r3, [r6, #0]
 8016e28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e2c:	81a3      	strh	r3, [r4, #12]
 8016e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8016e32:	e03e      	b.n	8016eb2 <__swsetup_r+0xba>
 8016e34:	4b25      	ldr	r3, [pc, #148]	; (8016ecc <__swsetup_r+0xd4>)
 8016e36:	429c      	cmp	r4, r3
 8016e38:	d101      	bne.n	8016e3e <__swsetup_r+0x46>
 8016e3a:	68ac      	ldr	r4, [r5, #8]
 8016e3c:	e7eb      	b.n	8016e16 <__swsetup_r+0x1e>
 8016e3e:	4b24      	ldr	r3, [pc, #144]	; (8016ed0 <__swsetup_r+0xd8>)
 8016e40:	429c      	cmp	r4, r3
 8016e42:	bf08      	it	eq
 8016e44:	68ec      	ldreq	r4, [r5, #12]
 8016e46:	e7e6      	b.n	8016e16 <__swsetup_r+0x1e>
 8016e48:	0758      	lsls	r0, r3, #29
 8016e4a:	d512      	bpl.n	8016e72 <__swsetup_r+0x7a>
 8016e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e4e:	b141      	cbz	r1, 8016e62 <__swsetup_r+0x6a>
 8016e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e54:	4299      	cmp	r1, r3
 8016e56:	d002      	beq.n	8016e5e <__swsetup_r+0x66>
 8016e58:	4630      	mov	r0, r6
 8016e5a:	f7ff fdc9 	bl	80169f0 <_free_r>
 8016e5e:	2300      	movs	r3, #0
 8016e60:	6363      	str	r3, [r4, #52]	; 0x34
 8016e62:	89a3      	ldrh	r3, [r4, #12]
 8016e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e68:	81a3      	strh	r3, [r4, #12]
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	6063      	str	r3, [r4, #4]
 8016e6e:	6923      	ldr	r3, [r4, #16]
 8016e70:	6023      	str	r3, [r4, #0]
 8016e72:	89a3      	ldrh	r3, [r4, #12]
 8016e74:	f043 0308 	orr.w	r3, r3, #8
 8016e78:	81a3      	strh	r3, [r4, #12]
 8016e7a:	6923      	ldr	r3, [r4, #16]
 8016e7c:	b94b      	cbnz	r3, 8016e92 <__swsetup_r+0x9a>
 8016e7e:	89a3      	ldrh	r3, [r4, #12]
 8016e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e88:	d003      	beq.n	8016e92 <__swsetup_r+0x9a>
 8016e8a:	4621      	mov	r1, r4
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	f000 fa01 	bl	8017294 <__smakebuf_r>
 8016e92:	89a0      	ldrh	r0, [r4, #12]
 8016e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e98:	f010 0301 	ands.w	r3, r0, #1
 8016e9c:	d00a      	beq.n	8016eb4 <__swsetup_r+0xbc>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	60a3      	str	r3, [r4, #8]
 8016ea2:	6963      	ldr	r3, [r4, #20]
 8016ea4:	425b      	negs	r3, r3
 8016ea6:	61a3      	str	r3, [r4, #24]
 8016ea8:	6923      	ldr	r3, [r4, #16]
 8016eaa:	b943      	cbnz	r3, 8016ebe <__swsetup_r+0xc6>
 8016eac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016eb0:	d1ba      	bne.n	8016e28 <__swsetup_r+0x30>
 8016eb2:	bd70      	pop	{r4, r5, r6, pc}
 8016eb4:	0781      	lsls	r1, r0, #30
 8016eb6:	bf58      	it	pl
 8016eb8:	6963      	ldrpl	r3, [r4, #20]
 8016eba:	60a3      	str	r3, [r4, #8]
 8016ebc:	e7f4      	b.n	8016ea8 <__swsetup_r+0xb0>
 8016ebe:	2000      	movs	r0, #0
 8016ec0:	e7f7      	b.n	8016eb2 <__swsetup_r+0xba>
 8016ec2:	bf00      	nop
 8016ec4:	2000083c 	.word	0x2000083c
 8016ec8:	08019534 	.word	0x08019534
 8016ecc:	08019554 	.word	0x08019554
 8016ed0:	08019514 	.word	0x08019514

08016ed4 <__sflush_r>:
 8016ed4:	898a      	ldrh	r2, [r1, #12]
 8016ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eda:	4605      	mov	r5, r0
 8016edc:	0710      	lsls	r0, r2, #28
 8016ede:	460c      	mov	r4, r1
 8016ee0:	d458      	bmi.n	8016f94 <__sflush_r+0xc0>
 8016ee2:	684b      	ldr	r3, [r1, #4]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	dc05      	bgt.n	8016ef4 <__sflush_r+0x20>
 8016ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	dc02      	bgt.n	8016ef4 <__sflush_r+0x20>
 8016eee:	2000      	movs	r0, #0
 8016ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ef6:	2e00      	cmp	r6, #0
 8016ef8:	d0f9      	beq.n	8016eee <__sflush_r+0x1a>
 8016efa:	2300      	movs	r3, #0
 8016efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f00:	682f      	ldr	r7, [r5, #0]
 8016f02:	602b      	str	r3, [r5, #0]
 8016f04:	d032      	beq.n	8016f6c <__sflush_r+0x98>
 8016f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f08:	89a3      	ldrh	r3, [r4, #12]
 8016f0a:	075a      	lsls	r2, r3, #29
 8016f0c:	d505      	bpl.n	8016f1a <__sflush_r+0x46>
 8016f0e:	6863      	ldr	r3, [r4, #4]
 8016f10:	1ac0      	subs	r0, r0, r3
 8016f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f14:	b10b      	cbz	r3, 8016f1a <__sflush_r+0x46>
 8016f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f18:	1ac0      	subs	r0, r0, r3
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f20:	6a21      	ldr	r1, [r4, #32]
 8016f22:	4628      	mov	r0, r5
 8016f24:	47b0      	blx	r6
 8016f26:	1c43      	adds	r3, r0, #1
 8016f28:	89a3      	ldrh	r3, [r4, #12]
 8016f2a:	d106      	bne.n	8016f3a <__sflush_r+0x66>
 8016f2c:	6829      	ldr	r1, [r5, #0]
 8016f2e:	291d      	cmp	r1, #29
 8016f30:	d82c      	bhi.n	8016f8c <__sflush_r+0xb8>
 8016f32:	4a2a      	ldr	r2, [pc, #168]	; (8016fdc <__sflush_r+0x108>)
 8016f34:	40ca      	lsrs	r2, r1
 8016f36:	07d6      	lsls	r6, r2, #31
 8016f38:	d528      	bpl.n	8016f8c <__sflush_r+0xb8>
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	6062      	str	r2, [r4, #4]
 8016f3e:	04d9      	lsls	r1, r3, #19
 8016f40:	6922      	ldr	r2, [r4, #16]
 8016f42:	6022      	str	r2, [r4, #0]
 8016f44:	d504      	bpl.n	8016f50 <__sflush_r+0x7c>
 8016f46:	1c42      	adds	r2, r0, #1
 8016f48:	d101      	bne.n	8016f4e <__sflush_r+0x7a>
 8016f4a:	682b      	ldr	r3, [r5, #0]
 8016f4c:	b903      	cbnz	r3, 8016f50 <__sflush_r+0x7c>
 8016f4e:	6560      	str	r0, [r4, #84]	; 0x54
 8016f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f52:	602f      	str	r7, [r5, #0]
 8016f54:	2900      	cmp	r1, #0
 8016f56:	d0ca      	beq.n	8016eee <__sflush_r+0x1a>
 8016f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f5c:	4299      	cmp	r1, r3
 8016f5e:	d002      	beq.n	8016f66 <__sflush_r+0x92>
 8016f60:	4628      	mov	r0, r5
 8016f62:	f7ff fd45 	bl	80169f0 <_free_r>
 8016f66:	2000      	movs	r0, #0
 8016f68:	6360      	str	r0, [r4, #52]	; 0x34
 8016f6a:	e7c1      	b.n	8016ef0 <__sflush_r+0x1c>
 8016f6c:	6a21      	ldr	r1, [r4, #32]
 8016f6e:	2301      	movs	r3, #1
 8016f70:	4628      	mov	r0, r5
 8016f72:	47b0      	blx	r6
 8016f74:	1c41      	adds	r1, r0, #1
 8016f76:	d1c7      	bne.n	8016f08 <__sflush_r+0x34>
 8016f78:	682b      	ldr	r3, [r5, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d0c4      	beq.n	8016f08 <__sflush_r+0x34>
 8016f7e:	2b1d      	cmp	r3, #29
 8016f80:	d001      	beq.n	8016f86 <__sflush_r+0xb2>
 8016f82:	2b16      	cmp	r3, #22
 8016f84:	d101      	bne.n	8016f8a <__sflush_r+0xb6>
 8016f86:	602f      	str	r7, [r5, #0]
 8016f88:	e7b1      	b.n	8016eee <__sflush_r+0x1a>
 8016f8a:	89a3      	ldrh	r3, [r4, #12]
 8016f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f90:	81a3      	strh	r3, [r4, #12]
 8016f92:	e7ad      	b.n	8016ef0 <__sflush_r+0x1c>
 8016f94:	690f      	ldr	r7, [r1, #16]
 8016f96:	2f00      	cmp	r7, #0
 8016f98:	d0a9      	beq.n	8016eee <__sflush_r+0x1a>
 8016f9a:	0793      	lsls	r3, r2, #30
 8016f9c:	680e      	ldr	r6, [r1, #0]
 8016f9e:	bf08      	it	eq
 8016fa0:	694b      	ldreq	r3, [r1, #20]
 8016fa2:	600f      	str	r7, [r1, #0]
 8016fa4:	bf18      	it	ne
 8016fa6:	2300      	movne	r3, #0
 8016fa8:	eba6 0807 	sub.w	r8, r6, r7
 8016fac:	608b      	str	r3, [r1, #8]
 8016fae:	f1b8 0f00 	cmp.w	r8, #0
 8016fb2:	dd9c      	ble.n	8016eee <__sflush_r+0x1a>
 8016fb4:	6a21      	ldr	r1, [r4, #32]
 8016fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016fb8:	4643      	mov	r3, r8
 8016fba:	463a      	mov	r2, r7
 8016fbc:	4628      	mov	r0, r5
 8016fbe:	47b0      	blx	r6
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	dc06      	bgt.n	8016fd2 <__sflush_r+0xfe>
 8016fc4:	89a3      	ldrh	r3, [r4, #12]
 8016fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fca:	81a3      	strh	r3, [r4, #12]
 8016fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8016fd0:	e78e      	b.n	8016ef0 <__sflush_r+0x1c>
 8016fd2:	4407      	add	r7, r0
 8016fd4:	eba8 0800 	sub.w	r8, r8, r0
 8016fd8:	e7e9      	b.n	8016fae <__sflush_r+0xda>
 8016fda:	bf00      	nop
 8016fdc:	20400001 	.word	0x20400001

08016fe0 <_fflush_r>:
 8016fe0:	b538      	push	{r3, r4, r5, lr}
 8016fe2:	690b      	ldr	r3, [r1, #16]
 8016fe4:	4605      	mov	r5, r0
 8016fe6:	460c      	mov	r4, r1
 8016fe8:	b913      	cbnz	r3, 8016ff0 <_fflush_r+0x10>
 8016fea:	2500      	movs	r5, #0
 8016fec:	4628      	mov	r0, r5
 8016fee:	bd38      	pop	{r3, r4, r5, pc}
 8016ff0:	b118      	cbz	r0, 8016ffa <_fflush_r+0x1a>
 8016ff2:	6983      	ldr	r3, [r0, #24]
 8016ff4:	b90b      	cbnz	r3, 8016ffa <_fflush_r+0x1a>
 8016ff6:	f000 f887 	bl	8017108 <__sinit>
 8016ffa:	4b14      	ldr	r3, [pc, #80]	; (801704c <_fflush_r+0x6c>)
 8016ffc:	429c      	cmp	r4, r3
 8016ffe:	d11b      	bne.n	8017038 <_fflush_r+0x58>
 8017000:	686c      	ldr	r4, [r5, #4]
 8017002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d0ef      	beq.n	8016fea <_fflush_r+0xa>
 801700a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801700c:	07d0      	lsls	r0, r2, #31
 801700e:	d404      	bmi.n	801701a <_fflush_r+0x3a>
 8017010:	0599      	lsls	r1, r3, #22
 8017012:	d402      	bmi.n	801701a <_fflush_r+0x3a>
 8017014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017016:	f000 f915 	bl	8017244 <__retarget_lock_acquire_recursive>
 801701a:	4628      	mov	r0, r5
 801701c:	4621      	mov	r1, r4
 801701e:	f7ff ff59 	bl	8016ed4 <__sflush_r>
 8017022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017024:	07da      	lsls	r2, r3, #31
 8017026:	4605      	mov	r5, r0
 8017028:	d4e0      	bmi.n	8016fec <_fflush_r+0xc>
 801702a:	89a3      	ldrh	r3, [r4, #12]
 801702c:	059b      	lsls	r3, r3, #22
 801702e:	d4dd      	bmi.n	8016fec <_fflush_r+0xc>
 8017030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017032:	f000 f908 	bl	8017246 <__retarget_lock_release_recursive>
 8017036:	e7d9      	b.n	8016fec <_fflush_r+0xc>
 8017038:	4b05      	ldr	r3, [pc, #20]	; (8017050 <_fflush_r+0x70>)
 801703a:	429c      	cmp	r4, r3
 801703c:	d101      	bne.n	8017042 <_fflush_r+0x62>
 801703e:	68ac      	ldr	r4, [r5, #8]
 8017040:	e7df      	b.n	8017002 <_fflush_r+0x22>
 8017042:	4b04      	ldr	r3, [pc, #16]	; (8017054 <_fflush_r+0x74>)
 8017044:	429c      	cmp	r4, r3
 8017046:	bf08      	it	eq
 8017048:	68ec      	ldreq	r4, [r5, #12]
 801704a:	e7da      	b.n	8017002 <_fflush_r+0x22>
 801704c:	08019534 	.word	0x08019534
 8017050:	08019554 	.word	0x08019554
 8017054:	08019514 	.word	0x08019514

08017058 <std>:
 8017058:	2300      	movs	r3, #0
 801705a:	b510      	push	{r4, lr}
 801705c:	4604      	mov	r4, r0
 801705e:	e9c0 3300 	strd	r3, r3, [r0]
 8017062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017066:	6083      	str	r3, [r0, #8]
 8017068:	8181      	strh	r1, [r0, #12]
 801706a:	6643      	str	r3, [r0, #100]	; 0x64
 801706c:	81c2      	strh	r2, [r0, #14]
 801706e:	6183      	str	r3, [r0, #24]
 8017070:	4619      	mov	r1, r3
 8017072:	2208      	movs	r2, #8
 8017074:	305c      	adds	r0, #92	; 0x5c
 8017076:	f7ff fcb3 	bl	80169e0 <memset>
 801707a:	4b05      	ldr	r3, [pc, #20]	; (8017090 <std+0x38>)
 801707c:	6263      	str	r3, [r4, #36]	; 0x24
 801707e:	4b05      	ldr	r3, [pc, #20]	; (8017094 <std+0x3c>)
 8017080:	62a3      	str	r3, [r4, #40]	; 0x28
 8017082:	4b05      	ldr	r3, [pc, #20]	; (8017098 <std+0x40>)
 8017084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017086:	4b05      	ldr	r3, [pc, #20]	; (801709c <std+0x44>)
 8017088:	6224      	str	r4, [r4, #32]
 801708a:	6323      	str	r3, [r4, #48]	; 0x30
 801708c:	bd10      	pop	{r4, pc}
 801708e:	bf00      	nop
 8017090:	08017c1d 	.word	0x08017c1d
 8017094:	08017c3f 	.word	0x08017c3f
 8017098:	08017c77 	.word	0x08017c77
 801709c:	08017c9b 	.word	0x08017c9b

080170a0 <_cleanup_r>:
 80170a0:	4901      	ldr	r1, [pc, #4]	; (80170a8 <_cleanup_r+0x8>)
 80170a2:	f000 b8af 	b.w	8017204 <_fwalk_reent>
 80170a6:	bf00      	nop
 80170a8:	08016fe1 	.word	0x08016fe1

080170ac <__sfmoreglue>:
 80170ac:	b570      	push	{r4, r5, r6, lr}
 80170ae:	2268      	movs	r2, #104	; 0x68
 80170b0:	1e4d      	subs	r5, r1, #1
 80170b2:	4355      	muls	r5, r2
 80170b4:	460e      	mov	r6, r1
 80170b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80170ba:	f7ff fd05 	bl	8016ac8 <_malloc_r>
 80170be:	4604      	mov	r4, r0
 80170c0:	b140      	cbz	r0, 80170d4 <__sfmoreglue+0x28>
 80170c2:	2100      	movs	r1, #0
 80170c4:	e9c0 1600 	strd	r1, r6, [r0]
 80170c8:	300c      	adds	r0, #12
 80170ca:	60a0      	str	r0, [r4, #8]
 80170cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80170d0:	f7ff fc86 	bl	80169e0 <memset>
 80170d4:	4620      	mov	r0, r4
 80170d6:	bd70      	pop	{r4, r5, r6, pc}

080170d8 <__sfp_lock_acquire>:
 80170d8:	4801      	ldr	r0, [pc, #4]	; (80170e0 <__sfp_lock_acquire+0x8>)
 80170da:	f000 b8b3 	b.w	8017244 <__retarget_lock_acquire_recursive>
 80170de:	bf00      	nop
 80170e0:	20002ecd 	.word	0x20002ecd

080170e4 <__sfp_lock_release>:
 80170e4:	4801      	ldr	r0, [pc, #4]	; (80170ec <__sfp_lock_release+0x8>)
 80170e6:	f000 b8ae 	b.w	8017246 <__retarget_lock_release_recursive>
 80170ea:	bf00      	nop
 80170ec:	20002ecd 	.word	0x20002ecd

080170f0 <__sinit_lock_acquire>:
 80170f0:	4801      	ldr	r0, [pc, #4]	; (80170f8 <__sinit_lock_acquire+0x8>)
 80170f2:	f000 b8a7 	b.w	8017244 <__retarget_lock_acquire_recursive>
 80170f6:	bf00      	nop
 80170f8:	20002ece 	.word	0x20002ece

080170fc <__sinit_lock_release>:
 80170fc:	4801      	ldr	r0, [pc, #4]	; (8017104 <__sinit_lock_release+0x8>)
 80170fe:	f000 b8a2 	b.w	8017246 <__retarget_lock_release_recursive>
 8017102:	bf00      	nop
 8017104:	20002ece 	.word	0x20002ece

08017108 <__sinit>:
 8017108:	b510      	push	{r4, lr}
 801710a:	4604      	mov	r4, r0
 801710c:	f7ff fff0 	bl	80170f0 <__sinit_lock_acquire>
 8017110:	69a3      	ldr	r3, [r4, #24]
 8017112:	b11b      	cbz	r3, 801711c <__sinit+0x14>
 8017114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017118:	f7ff bff0 	b.w	80170fc <__sinit_lock_release>
 801711c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017120:	6523      	str	r3, [r4, #80]	; 0x50
 8017122:	4b13      	ldr	r3, [pc, #76]	; (8017170 <__sinit+0x68>)
 8017124:	4a13      	ldr	r2, [pc, #76]	; (8017174 <__sinit+0x6c>)
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	62a2      	str	r2, [r4, #40]	; 0x28
 801712a:	42a3      	cmp	r3, r4
 801712c:	bf04      	itt	eq
 801712e:	2301      	moveq	r3, #1
 8017130:	61a3      	streq	r3, [r4, #24]
 8017132:	4620      	mov	r0, r4
 8017134:	f000 f820 	bl	8017178 <__sfp>
 8017138:	6060      	str	r0, [r4, #4]
 801713a:	4620      	mov	r0, r4
 801713c:	f000 f81c 	bl	8017178 <__sfp>
 8017140:	60a0      	str	r0, [r4, #8]
 8017142:	4620      	mov	r0, r4
 8017144:	f000 f818 	bl	8017178 <__sfp>
 8017148:	2200      	movs	r2, #0
 801714a:	60e0      	str	r0, [r4, #12]
 801714c:	2104      	movs	r1, #4
 801714e:	6860      	ldr	r0, [r4, #4]
 8017150:	f7ff ff82 	bl	8017058 <std>
 8017154:	68a0      	ldr	r0, [r4, #8]
 8017156:	2201      	movs	r2, #1
 8017158:	2109      	movs	r1, #9
 801715a:	f7ff ff7d 	bl	8017058 <std>
 801715e:	68e0      	ldr	r0, [r4, #12]
 8017160:	2202      	movs	r2, #2
 8017162:	2112      	movs	r1, #18
 8017164:	f7ff ff78 	bl	8017058 <std>
 8017168:	2301      	movs	r3, #1
 801716a:	61a3      	str	r3, [r4, #24]
 801716c:	e7d2      	b.n	8017114 <__sinit+0xc>
 801716e:	bf00      	nop
 8017170:	08019510 	.word	0x08019510
 8017174:	080170a1 	.word	0x080170a1

08017178 <__sfp>:
 8017178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801717a:	4607      	mov	r7, r0
 801717c:	f7ff ffac 	bl	80170d8 <__sfp_lock_acquire>
 8017180:	4b1e      	ldr	r3, [pc, #120]	; (80171fc <__sfp+0x84>)
 8017182:	681e      	ldr	r6, [r3, #0]
 8017184:	69b3      	ldr	r3, [r6, #24]
 8017186:	b913      	cbnz	r3, 801718e <__sfp+0x16>
 8017188:	4630      	mov	r0, r6
 801718a:	f7ff ffbd 	bl	8017108 <__sinit>
 801718e:	3648      	adds	r6, #72	; 0x48
 8017190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017194:	3b01      	subs	r3, #1
 8017196:	d503      	bpl.n	80171a0 <__sfp+0x28>
 8017198:	6833      	ldr	r3, [r6, #0]
 801719a:	b30b      	cbz	r3, 80171e0 <__sfp+0x68>
 801719c:	6836      	ldr	r6, [r6, #0]
 801719e:	e7f7      	b.n	8017190 <__sfp+0x18>
 80171a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80171a4:	b9d5      	cbnz	r5, 80171dc <__sfp+0x64>
 80171a6:	4b16      	ldr	r3, [pc, #88]	; (8017200 <__sfp+0x88>)
 80171a8:	60e3      	str	r3, [r4, #12]
 80171aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80171ae:	6665      	str	r5, [r4, #100]	; 0x64
 80171b0:	f000 f847 	bl	8017242 <__retarget_lock_init_recursive>
 80171b4:	f7ff ff96 	bl	80170e4 <__sfp_lock_release>
 80171b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80171bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80171c0:	6025      	str	r5, [r4, #0]
 80171c2:	61a5      	str	r5, [r4, #24]
 80171c4:	2208      	movs	r2, #8
 80171c6:	4629      	mov	r1, r5
 80171c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80171cc:	f7ff fc08 	bl	80169e0 <memset>
 80171d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80171d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80171d8:	4620      	mov	r0, r4
 80171da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171dc:	3468      	adds	r4, #104	; 0x68
 80171de:	e7d9      	b.n	8017194 <__sfp+0x1c>
 80171e0:	2104      	movs	r1, #4
 80171e2:	4638      	mov	r0, r7
 80171e4:	f7ff ff62 	bl	80170ac <__sfmoreglue>
 80171e8:	4604      	mov	r4, r0
 80171ea:	6030      	str	r0, [r6, #0]
 80171ec:	2800      	cmp	r0, #0
 80171ee:	d1d5      	bne.n	801719c <__sfp+0x24>
 80171f0:	f7ff ff78 	bl	80170e4 <__sfp_lock_release>
 80171f4:	230c      	movs	r3, #12
 80171f6:	603b      	str	r3, [r7, #0]
 80171f8:	e7ee      	b.n	80171d8 <__sfp+0x60>
 80171fa:	bf00      	nop
 80171fc:	08019510 	.word	0x08019510
 8017200:	ffff0001 	.word	0xffff0001

08017204 <_fwalk_reent>:
 8017204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017208:	4606      	mov	r6, r0
 801720a:	4688      	mov	r8, r1
 801720c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017210:	2700      	movs	r7, #0
 8017212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017216:	f1b9 0901 	subs.w	r9, r9, #1
 801721a:	d505      	bpl.n	8017228 <_fwalk_reent+0x24>
 801721c:	6824      	ldr	r4, [r4, #0]
 801721e:	2c00      	cmp	r4, #0
 8017220:	d1f7      	bne.n	8017212 <_fwalk_reent+0xe>
 8017222:	4638      	mov	r0, r7
 8017224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017228:	89ab      	ldrh	r3, [r5, #12]
 801722a:	2b01      	cmp	r3, #1
 801722c:	d907      	bls.n	801723e <_fwalk_reent+0x3a>
 801722e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017232:	3301      	adds	r3, #1
 8017234:	d003      	beq.n	801723e <_fwalk_reent+0x3a>
 8017236:	4629      	mov	r1, r5
 8017238:	4630      	mov	r0, r6
 801723a:	47c0      	blx	r8
 801723c:	4307      	orrs	r7, r0
 801723e:	3568      	adds	r5, #104	; 0x68
 8017240:	e7e9      	b.n	8017216 <_fwalk_reent+0x12>

08017242 <__retarget_lock_init_recursive>:
 8017242:	4770      	bx	lr

08017244 <__retarget_lock_acquire_recursive>:
 8017244:	4770      	bx	lr

08017246 <__retarget_lock_release_recursive>:
 8017246:	4770      	bx	lr

08017248 <__swhatbuf_r>:
 8017248:	b570      	push	{r4, r5, r6, lr}
 801724a:	460e      	mov	r6, r1
 801724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017250:	2900      	cmp	r1, #0
 8017252:	b096      	sub	sp, #88	; 0x58
 8017254:	4614      	mov	r4, r2
 8017256:	461d      	mov	r5, r3
 8017258:	da08      	bge.n	801726c <__swhatbuf_r+0x24>
 801725a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801725e:	2200      	movs	r2, #0
 8017260:	602a      	str	r2, [r5, #0]
 8017262:	061a      	lsls	r2, r3, #24
 8017264:	d410      	bmi.n	8017288 <__swhatbuf_r+0x40>
 8017266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801726a:	e00e      	b.n	801728a <__swhatbuf_r+0x42>
 801726c:	466a      	mov	r2, sp
 801726e:	f000 fd3b 	bl	8017ce8 <_fstat_r>
 8017272:	2800      	cmp	r0, #0
 8017274:	dbf1      	blt.n	801725a <__swhatbuf_r+0x12>
 8017276:	9a01      	ldr	r2, [sp, #4]
 8017278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801727c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017280:	425a      	negs	r2, r3
 8017282:	415a      	adcs	r2, r3
 8017284:	602a      	str	r2, [r5, #0]
 8017286:	e7ee      	b.n	8017266 <__swhatbuf_r+0x1e>
 8017288:	2340      	movs	r3, #64	; 0x40
 801728a:	2000      	movs	r0, #0
 801728c:	6023      	str	r3, [r4, #0]
 801728e:	b016      	add	sp, #88	; 0x58
 8017290:	bd70      	pop	{r4, r5, r6, pc}
	...

08017294 <__smakebuf_r>:
 8017294:	898b      	ldrh	r3, [r1, #12]
 8017296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017298:	079d      	lsls	r5, r3, #30
 801729a:	4606      	mov	r6, r0
 801729c:	460c      	mov	r4, r1
 801729e:	d507      	bpl.n	80172b0 <__smakebuf_r+0x1c>
 80172a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80172a4:	6023      	str	r3, [r4, #0]
 80172a6:	6123      	str	r3, [r4, #16]
 80172a8:	2301      	movs	r3, #1
 80172aa:	6163      	str	r3, [r4, #20]
 80172ac:	b002      	add	sp, #8
 80172ae:	bd70      	pop	{r4, r5, r6, pc}
 80172b0:	ab01      	add	r3, sp, #4
 80172b2:	466a      	mov	r2, sp
 80172b4:	f7ff ffc8 	bl	8017248 <__swhatbuf_r>
 80172b8:	9900      	ldr	r1, [sp, #0]
 80172ba:	4605      	mov	r5, r0
 80172bc:	4630      	mov	r0, r6
 80172be:	f7ff fc03 	bl	8016ac8 <_malloc_r>
 80172c2:	b948      	cbnz	r0, 80172d8 <__smakebuf_r+0x44>
 80172c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172c8:	059a      	lsls	r2, r3, #22
 80172ca:	d4ef      	bmi.n	80172ac <__smakebuf_r+0x18>
 80172cc:	f023 0303 	bic.w	r3, r3, #3
 80172d0:	f043 0302 	orr.w	r3, r3, #2
 80172d4:	81a3      	strh	r3, [r4, #12]
 80172d6:	e7e3      	b.n	80172a0 <__smakebuf_r+0xc>
 80172d8:	4b0d      	ldr	r3, [pc, #52]	; (8017310 <__smakebuf_r+0x7c>)
 80172da:	62b3      	str	r3, [r6, #40]	; 0x28
 80172dc:	89a3      	ldrh	r3, [r4, #12]
 80172de:	6020      	str	r0, [r4, #0]
 80172e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172e4:	81a3      	strh	r3, [r4, #12]
 80172e6:	9b00      	ldr	r3, [sp, #0]
 80172e8:	6163      	str	r3, [r4, #20]
 80172ea:	9b01      	ldr	r3, [sp, #4]
 80172ec:	6120      	str	r0, [r4, #16]
 80172ee:	b15b      	cbz	r3, 8017308 <__smakebuf_r+0x74>
 80172f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172f4:	4630      	mov	r0, r6
 80172f6:	f000 fd09 	bl	8017d0c <_isatty_r>
 80172fa:	b128      	cbz	r0, 8017308 <__smakebuf_r+0x74>
 80172fc:	89a3      	ldrh	r3, [r4, #12]
 80172fe:	f023 0303 	bic.w	r3, r3, #3
 8017302:	f043 0301 	orr.w	r3, r3, #1
 8017306:	81a3      	strh	r3, [r4, #12]
 8017308:	89a0      	ldrh	r0, [r4, #12]
 801730a:	4305      	orrs	r5, r0
 801730c:	81a5      	strh	r5, [r4, #12]
 801730e:	e7cd      	b.n	80172ac <__smakebuf_r+0x18>
 8017310:	080170a1 	.word	0x080170a1

08017314 <__malloc_lock>:
 8017314:	4801      	ldr	r0, [pc, #4]	; (801731c <__malloc_lock+0x8>)
 8017316:	f7ff bf95 	b.w	8017244 <__retarget_lock_acquire_recursive>
 801731a:	bf00      	nop
 801731c:	20002ecc 	.word	0x20002ecc

08017320 <__malloc_unlock>:
 8017320:	4801      	ldr	r0, [pc, #4]	; (8017328 <__malloc_unlock+0x8>)
 8017322:	f7ff bf90 	b.w	8017246 <__retarget_lock_release_recursive>
 8017326:	bf00      	nop
 8017328:	20002ecc 	.word	0x20002ecc

0801732c <_realloc_r>:
 801732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017330:	4680      	mov	r8, r0
 8017332:	4614      	mov	r4, r2
 8017334:	460e      	mov	r6, r1
 8017336:	b921      	cbnz	r1, 8017342 <_realloc_r+0x16>
 8017338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801733c:	4611      	mov	r1, r2
 801733e:	f7ff bbc3 	b.w	8016ac8 <_malloc_r>
 8017342:	b92a      	cbnz	r2, 8017350 <_realloc_r+0x24>
 8017344:	f7ff fb54 	bl	80169f0 <_free_r>
 8017348:	4625      	mov	r5, r4
 801734a:	4628      	mov	r0, r5
 801734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017350:	f000 fd18 	bl	8017d84 <_malloc_usable_size_r>
 8017354:	4284      	cmp	r4, r0
 8017356:	4607      	mov	r7, r0
 8017358:	d802      	bhi.n	8017360 <_realloc_r+0x34>
 801735a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801735e:	d812      	bhi.n	8017386 <_realloc_r+0x5a>
 8017360:	4621      	mov	r1, r4
 8017362:	4640      	mov	r0, r8
 8017364:	f7ff fbb0 	bl	8016ac8 <_malloc_r>
 8017368:	4605      	mov	r5, r0
 801736a:	2800      	cmp	r0, #0
 801736c:	d0ed      	beq.n	801734a <_realloc_r+0x1e>
 801736e:	42bc      	cmp	r4, r7
 8017370:	4622      	mov	r2, r4
 8017372:	4631      	mov	r1, r6
 8017374:	bf28      	it	cs
 8017376:	463a      	movcs	r2, r7
 8017378:	f7ff fb24 	bl	80169c4 <memcpy>
 801737c:	4631      	mov	r1, r6
 801737e:	4640      	mov	r0, r8
 8017380:	f7ff fb36 	bl	80169f0 <_free_r>
 8017384:	e7e1      	b.n	801734a <_realloc_r+0x1e>
 8017386:	4635      	mov	r5, r6
 8017388:	e7df      	b.n	801734a <_realloc_r+0x1e>

0801738a <__ssputs_r>:
 801738a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801738e:	688e      	ldr	r6, [r1, #8]
 8017390:	429e      	cmp	r6, r3
 8017392:	4682      	mov	sl, r0
 8017394:	460c      	mov	r4, r1
 8017396:	4690      	mov	r8, r2
 8017398:	461f      	mov	r7, r3
 801739a:	d838      	bhi.n	801740e <__ssputs_r+0x84>
 801739c:	898a      	ldrh	r2, [r1, #12]
 801739e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80173a2:	d032      	beq.n	801740a <__ssputs_r+0x80>
 80173a4:	6825      	ldr	r5, [r4, #0]
 80173a6:	6909      	ldr	r1, [r1, #16]
 80173a8:	eba5 0901 	sub.w	r9, r5, r1
 80173ac:	6965      	ldr	r5, [r4, #20]
 80173ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173b6:	3301      	adds	r3, #1
 80173b8:	444b      	add	r3, r9
 80173ba:	106d      	asrs	r5, r5, #1
 80173bc:	429d      	cmp	r5, r3
 80173be:	bf38      	it	cc
 80173c0:	461d      	movcc	r5, r3
 80173c2:	0553      	lsls	r3, r2, #21
 80173c4:	d531      	bpl.n	801742a <__ssputs_r+0xa0>
 80173c6:	4629      	mov	r1, r5
 80173c8:	f7ff fb7e 	bl	8016ac8 <_malloc_r>
 80173cc:	4606      	mov	r6, r0
 80173ce:	b950      	cbnz	r0, 80173e6 <__ssputs_r+0x5c>
 80173d0:	230c      	movs	r3, #12
 80173d2:	f8ca 3000 	str.w	r3, [sl]
 80173d6:	89a3      	ldrh	r3, [r4, #12]
 80173d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173dc:	81a3      	strh	r3, [r4, #12]
 80173de:	f04f 30ff 	mov.w	r0, #4294967295
 80173e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173e6:	6921      	ldr	r1, [r4, #16]
 80173e8:	464a      	mov	r2, r9
 80173ea:	f7ff faeb 	bl	80169c4 <memcpy>
 80173ee:	89a3      	ldrh	r3, [r4, #12]
 80173f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80173f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173f8:	81a3      	strh	r3, [r4, #12]
 80173fa:	6126      	str	r6, [r4, #16]
 80173fc:	6165      	str	r5, [r4, #20]
 80173fe:	444e      	add	r6, r9
 8017400:	eba5 0509 	sub.w	r5, r5, r9
 8017404:	6026      	str	r6, [r4, #0]
 8017406:	60a5      	str	r5, [r4, #8]
 8017408:	463e      	mov	r6, r7
 801740a:	42be      	cmp	r6, r7
 801740c:	d900      	bls.n	8017410 <__ssputs_r+0x86>
 801740e:	463e      	mov	r6, r7
 8017410:	6820      	ldr	r0, [r4, #0]
 8017412:	4632      	mov	r2, r6
 8017414:	4641      	mov	r1, r8
 8017416:	f000 fc9b 	bl	8017d50 <memmove>
 801741a:	68a3      	ldr	r3, [r4, #8]
 801741c:	1b9b      	subs	r3, r3, r6
 801741e:	60a3      	str	r3, [r4, #8]
 8017420:	6823      	ldr	r3, [r4, #0]
 8017422:	4433      	add	r3, r6
 8017424:	6023      	str	r3, [r4, #0]
 8017426:	2000      	movs	r0, #0
 8017428:	e7db      	b.n	80173e2 <__ssputs_r+0x58>
 801742a:	462a      	mov	r2, r5
 801742c:	f7ff ff7e 	bl	801732c <_realloc_r>
 8017430:	4606      	mov	r6, r0
 8017432:	2800      	cmp	r0, #0
 8017434:	d1e1      	bne.n	80173fa <__ssputs_r+0x70>
 8017436:	6921      	ldr	r1, [r4, #16]
 8017438:	4650      	mov	r0, sl
 801743a:	f7ff fad9 	bl	80169f0 <_free_r>
 801743e:	e7c7      	b.n	80173d0 <__ssputs_r+0x46>

08017440 <_svfiprintf_r>:
 8017440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017444:	4698      	mov	r8, r3
 8017446:	898b      	ldrh	r3, [r1, #12]
 8017448:	061b      	lsls	r3, r3, #24
 801744a:	b09d      	sub	sp, #116	; 0x74
 801744c:	4607      	mov	r7, r0
 801744e:	460d      	mov	r5, r1
 8017450:	4614      	mov	r4, r2
 8017452:	d50e      	bpl.n	8017472 <_svfiprintf_r+0x32>
 8017454:	690b      	ldr	r3, [r1, #16]
 8017456:	b963      	cbnz	r3, 8017472 <_svfiprintf_r+0x32>
 8017458:	2140      	movs	r1, #64	; 0x40
 801745a:	f7ff fb35 	bl	8016ac8 <_malloc_r>
 801745e:	6028      	str	r0, [r5, #0]
 8017460:	6128      	str	r0, [r5, #16]
 8017462:	b920      	cbnz	r0, 801746e <_svfiprintf_r+0x2e>
 8017464:	230c      	movs	r3, #12
 8017466:	603b      	str	r3, [r7, #0]
 8017468:	f04f 30ff 	mov.w	r0, #4294967295
 801746c:	e0d1      	b.n	8017612 <_svfiprintf_r+0x1d2>
 801746e:	2340      	movs	r3, #64	; 0x40
 8017470:	616b      	str	r3, [r5, #20]
 8017472:	2300      	movs	r3, #0
 8017474:	9309      	str	r3, [sp, #36]	; 0x24
 8017476:	2320      	movs	r3, #32
 8017478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801747c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017480:	2330      	movs	r3, #48	; 0x30
 8017482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801762c <_svfiprintf_r+0x1ec>
 8017486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801748a:	f04f 0901 	mov.w	r9, #1
 801748e:	4623      	mov	r3, r4
 8017490:	469a      	mov	sl, r3
 8017492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017496:	b10a      	cbz	r2, 801749c <_svfiprintf_r+0x5c>
 8017498:	2a25      	cmp	r2, #37	; 0x25
 801749a:	d1f9      	bne.n	8017490 <_svfiprintf_r+0x50>
 801749c:	ebba 0b04 	subs.w	fp, sl, r4
 80174a0:	d00b      	beq.n	80174ba <_svfiprintf_r+0x7a>
 80174a2:	465b      	mov	r3, fp
 80174a4:	4622      	mov	r2, r4
 80174a6:	4629      	mov	r1, r5
 80174a8:	4638      	mov	r0, r7
 80174aa:	f7ff ff6e 	bl	801738a <__ssputs_r>
 80174ae:	3001      	adds	r0, #1
 80174b0:	f000 80aa 	beq.w	8017608 <_svfiprintf_r+0x1c8>
 80174b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174b6:	445a      	add	r2, fp
 80174b8:	9209      	str	r2, [sp, #36]	; 0x24
 80174ba:	f89a 3000 	ldrb.w	r3, [sl]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	f000 80a2 	beq.w	8017608 <_svfiprintf_r+0x1c8>
 80174c4:	2300      	movs	r3, #0
 80174c6:	f04f 32ff 	mov.w	r2, #4294967295
 80174ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174ce:	f10a 0a01 	add.w	sl, sl, #1
 80174d2:	9304      	str	r3, [sp, #16]
 80174d4:	9307      	str	r3, [sp, #28]
 80174d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174da:	931a      	str	r3, [sp, #104]	; 0x68
 80174dc:	4654      	mov	r4, sl
 80174de:	2205      	movs	r2, #5
 80174e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174e4:	4851      	ldr	r0, [pc, #324]	; (801762c <_svfiprintf_r+0x1ec>)
 80174e6:	f7e8 fe93 	bl	8000210 <memchr>
 80174ea:	9a04      	ldr	r2, [sp, #16]
 80174ec:	b9d8      	cbnz	r0, 8017526 <_svfiprintf_r+0xe6>
 80174ee:	06d0      	lsls	r0, r2, #27
 80174f0:	bf44      	itt	mi
 80174f2:	2320      	movmi	r3, #32
 80174f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174f8:	0711      	lsls	r1, r2, #28
 80174fa:	bf44      	itt	mi
 80174fc:	232b      	movmi	r3, #43	; 0x2b
 80174fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017502:	f89a 3000 	ldrb.w	r3, [sl]
 8017506:	2b2a      	cmp	r3, #42	; 0x2a
 8017508:	d015      	beq.n	8017536 <_svfiprintf_r+0xf6>
 801750a:	9a07      	ldr	r2, [sp, #28]
 801750c:	4654      	mov	r4, sl
 801750e:	2000      	movs	r0, #0
 8017510:	f04f 0c0a 	mov.w	ip, #10
 8017514:	4621      	mov	r1, r4
 8017516:	f811 3b01 	ldrb.w	r3, [r1], #1
 801751a:	3b30      	subs	r3, #48	; 0x30
 801751c:	2b09      	cmp	r3, #9
 801751e:	d94e      	bls.n	80175be <_svfiprintf_r+0x17e>
 8017520:	b1b0      	cbz	r0, 8017550 <_svfiprintf_r+0x110>
 8017522:	9207      	str	r2, [sp, #28]
 8017524:	e014      	b.n	8017550 <_svfiprintf_r+0x110>
 8017526:	eba0 0308 	sub.w	r3, r0, r8
 801752a:	fa09 f303 	lsl.w	r3, r9, r3
 801752e:	4313      	orrs	r3, r2
 8017530:	9304      	str	r3, [sp, #16]
 8017532:	46a2      	mov	sl, r4
 8017534:	e7d2      	b.n	80174dc <_svfiprintf_r+0x9c>
 8017536:	9b03      	ldr	r3, [sp, #12]
 8017538:	1d19      	adds	r1, r3, #4
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	9103      	str	r1, [sp, #12]
 801753e:	2b00      	cmp	r3, #0
 8017540:	bfbb      	ittet	lt
 8017542:	425b      	neglt	r3, r3
 8017544:	f042 0202 	orrlt.w	r2, r2, #2
 8017548:	9307      	strge	r3, [sp, #28]
 801754a:	9307      	strlt	r3, [sp, #28]
 801754c:	bfb8      	it	lt
 801754e:	9204      	strlt	r2, [sp, #16]
 8017550:	7823      	ldrb	r3, [r4, #0]
 8017552:	2b2e      	cmp	r3, #46	; 0x2e
 8017554:	d10c      	bne.n	8017570 <_svfiprintf_r+0x130>
 8017556:	7863      	ldrb	r3, [r4, #1]
 8017558:	2b2a      	cmp	r3, #42	; 0x2a
 801755a:	d135      	bne.n	80175c8 <_svfiprintf_r+0x188>
 801755c:	9b03      	ldr	r3, [sp, #12]
 801755e:	1d1a      	adds	r2, r3, #4
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	9203      	str	r2, [sp, #12]
 8017564:	2b00      	cmp	r3, #0
 8017566:	bfb8      	it	lt
 8017568:	f04f 33ff 	movlt.w	r3, #4294967295
 801756c:	3402      	adds	r4, #2
 801756e:	9305      	str	r3, [sp, #20]
 8017570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801763c <_svfiprintf_r+0x1fc>
 8017574:	7821      	ldrb	r1, [r4, #0]
 8017576:	2203      	movs	r2, #3
 8017578:	4650      	mov	r0, sl
 801757a:	f7e8 fe49 	bl	8000210 <memchr>
 801757e:	b140      	cbz	r0, 8017592 <_svfiprintf_r+0x152>
 8017580:	2340      	movs	r3, #64	; 0x40
 8017582:	eba0 000a 	sub.w	r0, r0, sl
 8017586:	fa03 f000 	lsl.w	r0, r3, r0
 801758a:	9b04      	ldr	r3, [sp, #16]
 801758c:	4303      	orrs	r3, r0
 801758e:	3401      	adds	r4, #1
 8017590:	9304      	str	r3, [sp, #16]
 8017592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017596:	4826      	ldr	r0, [pc, #152]	; (8017630 <_svfiprintf_r+0x1f0>)
 8017598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801759c:	2206      	movs	r2, #6
 801759e:	f7e8 fe37 	bl	8000210 <memchr>
 80175a2:	2800      	cmp	r0, #0
 80175a4:	d038      	beq.n	8017618 <_svfiprintf_r+0x1d8>
 80175a6:	4b23      	ldr	r3, [pc, #140]	; (8017634 <_svfiprintf_r+0x1f4>)
 80175a8:	bb1b      	cbnz	r3, 80175f2 <_svfiprintf_r+0x1b2>
 80175aa:	9b03      	ldr	r3, [sp, #12]
 80175ac:	3307      	adds	r3, #7
 80175ae:	f023 0307 	bic.w	r3, r3, #7
 80175b2:	3308      	adds	r3, #8
 80175b4:	9303      	str	r3, [sp, #12]
 80175b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175b8:	4433      	add	r3, r6
 80175ba:	9309      	str	r3, [sp, #36]	; 0x24
 80175bc:	e767      	b.n	801748e <_svfiprintf_r+0x4e>
 80175be:	fb0c 3202 	mla	r2, ip, r2, r3
 80175c2:	460c      	mov	r4, r1
 80175c4:	2001      	movs	r0, #1
 80175c6:	e7a5      	b.n	8017514 <_svfiprintf_r+0xd4>
 80175c8:	2300      	movs	r3, #0
 80175ca:	3401      	adds	r4, #1
 80175cc:	9305      	str	r3, [sp, #20]
 80175ce:	4619      	mov	r1, r3
 80175d0:	f04f 0c0a 	mov.w	ip, #10
 80175d4:	4620      	mov	r0, r4
 80175d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175da:	3a30      	subs	r2, #48	; 0x30
 80175dc:	2a09      	cmp	r2, #9
 80175de:	d903      	bls.n	80175e8 <_svfiprintf_r+0x1a8>
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d0c5      	beq.n	8017570 <_svfiprintf_r+0x130>
 80175e4:	9105      	str	r1, [sp, #20]
 80175e6:	e7c3      	b.n	8017570 <_svfiprintf_r+0x130>
 80175e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80175ec:	4604      	mov	r4, r0
 80175ee:	2301      	movs	r3, #1
 80175f0:	e7f0      	b.n	80175d4 <_svfiprintf_r+0x194>
 80175f2:	ab03      	add	r3, sp, #12
 80175f4:	9300      	str	r3, [sp, #0]
 80175f6:	462a      	mov	r2, r5
 80175f8:	4b0f      	ldr	r3, [pc, #60]	; (8017638 <_svfiprintf_r+0x1f8>)
 80175fa:	a904      	add	r1, sp, #16
 80175fc:	4638      	mov	r0, r7
 80175fe:	f3af 8000 	nop.w
 8017602:	1c42      	adds	r2, r0, #1
 8017604:	4606      	mov	r6, r0
 8017606:	d1d6      	bne.n	80175b6 <_svfiprintf_r+0x176>
 8017608:	89ab      	ldrh	r3, [r5, #12]
 801760a:	065b      	lsls	r3, r3, #25
 801760c:	f53f af2c 	bmi.w	8017468 <_svfiprintf_r+0x28>
 8017610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017612:	b01d      	add	sp, #116	; 0x74
 8017614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017618:	ab03      	add	r3, sp, #12
 801761a:	9300      	str	r3, [sp, #0]
 801761c:	462a      	mov	r2, r5
 801761e:	4b06      	ldr	r3, [pc, #24]	; (8017638 <_svfiprintf_r+0x1f8>)
 8017620:	a904      	add	r1, sp, #16
 8017622:	4638      	mov	r0, r7
 8017624:	f000 f9d4 	bl	80179d0 <_printf_i>
 8017628:	e7eb      	b.n	8017602 <_svfiprintf_r+0x1c2>
 801762a:	bf00      	nop
 801762c:	08019574 	.word	0x08019574
 8017630:	0801957e 	.word	0x0801957e
 8017634:	00000000 	.word	0x00000000
 8017638:	0801738b 	.word	0x0801738b
 801763c:	0801957a 	.word	0x0801957a

08017640 <__sfputc_r>:
 8017640:	6893      	ldr	r3, [r2, #8]
 8017642:	3b01      	subs	r3, #1
 8017644:	2b00      	cmp	r3, #0
 8017646:	b410      	push	{r4}
 8017648:	6093      	str	r3, [r2, #8]
 801764a:	da08      	bge.n	801765e <__sfputc_r+0x1e>
 801764c:	6994      	ldr	r4, [r2, #24]
 801764e:	42a3      	cmp	r3, r4
 8017650:	db01      	blt.n	8017656 <__sfputc_r+0x16>
 8017652:	290a      	cmp	r1, #10
 8017654:	d103      	bne.n	801765e <__sfputc_r+0x1e>
 8017656:	f85d 4b04 	ldr.w	r4, [sp], #4
 801765a:	f7ff bb7b 	b.w	8016d54 <__swbuf_r>
 801765e:	6813      	ldr	r3, [r2, #0]
 8017660:	1c58      	adds	r0, r3, #1
 8017662:	6010      	str	r0, [r2, #0]
 8017664:	7019      	strb	r1, [r3, #0]
 8017666:	4608      	mov	r0, r1
 8017668:	f85d 4b04 	ldr.w	r4, [sp], #4
 801766c:	4770      	bx	lr

0801766e <__sfputs_r>:
 801766e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017670:	4606      	mov	r6, r0
 8017672:	460f      	mov	r7, r1
 8017674:	4614      	mov	r4, r2
 8017676:	18d5      	adds	r5, r2, r3
 8017678:	42ac      	cmp	r4, r5
 801767a:	d101      	bne.n	8017680 <__sfputs_r+0x12>
 801767c:	2000      	movs	r0, #0
 801767e:	e007      	b.n	8017690 <__sfputs_r+0x22>
 8017680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017684:	463a      	mov	r2, r7
 8017686:	4630      	mov	r0, r6
 8017688:	f7ff ffda 	bl	8017640 <__sfputc_r>
 801768c:	1c43      	adds	r3, r0, #1
 801768e:	d1f3      	bne.n	8017678 <__sfputs_r+0xa>
 8017690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017694 <_vfiprintf_r>:
 8017694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017698:	460d      	mov	r5, r1
 801769a:	b09d      	sub	sp, #116	; 0x74
 801769c:	4614      	mov	r4, r2
 801769e:	4698      	mov	r8, r3
 80176a0:	4606      	mov	r6, r0
 80176a2:	b118      	cbz	r0, 80176ac <_vfiprintf_r+0x18>
 80176a4:	6983      	ldr	r3, [r0, #24]
 80176a6:	b90b      	cbnz	r3, 80176ac <_vfiprintf_r+0x18>
 80176a8:	f7ff fd2e 	bl	8017108 <__sinit>
 80176ac:	4b89      	ldr	r3, [pc, #548]	; (80178d4 <_vfiprintf_r+0x240>)
 80176ae:	429d      	cmp	r5, r3
 80176b0:	d11b      	bne.n	80176ea <_vfiprintf_r+0x56>
 80176b2:	6875      	ldr	r5, [r6, #4]
 80176b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176b6:	07d9      	lsls	r1, r3, #31
 80176b8:	d405      	bmi.n	80176c6 <_vfiprintf_r+0x32>
 80176ba:	89ab      	ldrh	r3, [r5, #12]
 80176bc:	059a      	lsls	r2, r3, #22
 80176be:	d402      	bmi.n	80176c6 <_vfiprintf_r+0x32>
 80176c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176c2:	f7ff fdbf 	bl	8017244 <__retarget_lock_acquire_recursive>
 80176c6:	89ab      	ldrh	r3, [r5, #12]
 80176c8:	071b      	lsls	r3, r3, #28
 80176ca:	d501      	bpl.n	80176d0 <_vfiprintf_r+0x3c>
 80176cc:	692b      	ldr	r3, [r5, #16]
 80176ce:	b9eb      	cbnz	r3, 801770c <_vfiprintf_r+0x78>
 80176d0:	4629      	mov	r1, r5
 80176d2:	4630      	mov	r0, r6
 80176d4:	f7ff fb90 	bl	8016df8 <__swsetup_r>
 80176d8:	b1c0      	cbz	r0, 801770c <_vfiprintf_r+0x78>
 80176da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176dc:	07dc      	lsls	r4, r3, #31
 80176de:	d50e      	bpl.n	80176fe <_vfiprintf_r+0x6a>
 80176e0:	f04f 30ff 	mov.w	r0, #4294967295
 80176e4:	b01d      	add	sp, #116	; 0x74
 80176e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176ea:	4b7b      	ldr	r3, [pc, #492]	; (80178d8 <_vfiprintf_r+0x244>)
 80176ec:	429d      	cmp	r5, r3
 80176ee:	d101      	bne.n	80176f4 <_vfiprintf_r+0x60>
 80176f0:	68b5      	ldr	r5, [r6, #8]
 80176f2:	e7df      	b.n	80176b4 <_vfiprintf_r+0x20>
 80176f4:	4b79      	ldr	r3, [pc, #484]	; (80178dc <_vfiprintf_r+0x248>)
 80176f6:	429d      	cmp	r5, r3
 80176f8:	bf08      	it	eq
 80176fa:	68f5      	ldreq	r5, [r6, #12]
 80176fc:	e7da      	b.n	80176b4 <_vfiprintf_r+0x20>
 80176fe:	89ab      	ldrh	r3, [r5, #12]
 8017700:	0598      	lsls	r0, r3, #22
 8017702:	d4ed      	bmi.n	80176e0 <_vfiprintf_r+0x4c>
 8017704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017706:	f7ff fd9e 	bl	8017246 <__retarget_lock_release_recursive>
 801770a:	e7e9      	b.n	80176e0 <_vfiprintf_r+0x4c>
 801770c:	2300      	movs	r3, #0
 801770e:	9309      	str	r3, [sp, #36]	; 0x24
 8017710:	2320      	movs	r3, #32
 8017712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017716:	f8cd 800c 	str.w	r8, [sp, #12]
 801771a:	2330      	movs	r3, #48	; 0x30
 801771c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80178e0 <_vfiprintf_r+0x24c>
 8017720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017724:	f04f 0901 	mov.w	r9, #1
 8017728:	4623      	mov	r3, r4
 801772a:	469a      	mov	sl, r3
 801772c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017730:	b10a      	cbz	r2, 8017736 <_vfiprintf_r+0xa2>
 8017732:	2a25      	cmp	r2, #37	; 0x25
 8017734:	d1f9      	bne.n	801772a <_vfiprintf_r+0x96>
 8017736:	ebba 0b04 	subs.w	fp, sl, r4
 801773a:	d00b      	beq.n	8017754 <_vfiprintf_r+0xc0>
 801773c:	465b      	mov	r3, fp
 801773e:	4622      	mov	r2, r4
 8017740:	4629      	mov	r1, r5
 8017742:	4630      	mov	r0, r6
 8017744:	f7ff ff93 	bl	801766e <__sfputs_r>
 8017748:	3001      	adds	r0, #1
 801774a:	f000 80aa 	beq.w	80178a2 <_vfiprintf_r+0x20e>
 801774e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017750:	445a      	add	r2, fp
 8017752:	9209      	str	r2, [sp, #36]	; 0x24
 8017754:	f89a 3000 	ldrb.w	r3, [sl]
 8017758:	2b00      	cmp	r3, #0
 801775a:	f000 80a2 	beq.w	80178a2 <_vfiprintf_r+0x20e>
 801775e:	2300      	movs	r3, #0
 8017760:	f04f 32ff 	mov.w	r2, #4294967295
 8017764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017768:	f10a 0a01 	add.w	sl, sl, #1
 801776c:	9304      	str	r3, [sp, #16]
 801776e:	9307      	str	r3, [sp, #28]
 8017770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017774:	931a      	str	r3, [sp, #104]	; 0x68
 8017776:	4654      	mov	r4, sl
 8017778:	2205      	movs	r2, #5
 801777a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801777e:	4858      	ldr	r0, [pc, #352]	; (80178e0 <_vfiprintf_r+0x24c>)
 8017780:	f7e8 fd46 	bl	8000210 <memchr>
 8017784:	9a04      	ldr	r2, [sp, #16]
 8017786:	b9d8      	cbnz	r0, 80177c0 <_vfiprintf_r+0x12c>
 8017788:	06d1      	lsls	r1, r2, #27
 801778a:	bf44      	itt	mi
 801778c:	2320      	movmi	r3, #32
 801778e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017792:	0713      	lsls	r3, r2, #28
 8017794:	bf44      	itt	mi
 8017796:	232b      	movmi	r3, #43	; 0x2b
 8017798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801779c:	f89a 3000 	ldrb.w	r3, [sl]
 80177a0:	2b2a      	cmp	r3, #42	; 0x2a
 80177a2:	d015      	beq.n	80177d0 <_vfiprintf_r+0x13c>
 80177a4:	9a07      	ldr	r2, [sp, #28]
 80177a6:	4654      	mov	r4, sl
 80177a8:	2000      	movs	r0, #0
 80177aa:	f04f 0c0a 	mov.w	ip, #10
 80177ae:	4621      	mov	r1, r4
 80177b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177b4:	3b30      	subs	r3, #48	; 0x30
 80177b6:	2b09      	cmp	r3, #9
 80177b8:	d94e      	bls.n	8017858 <_vfiprintf_r+0x1c4>
 80177ba:	b1b0      	cbz	r0, 80177ea <_vfiprintf_r+0x156>
 80177bc:	9207      	str	r2, [sp, #28]
 80177be:	e014      	b.n	80177ea <_vfiprintf_r+0x156>
 80177c0:	eba0 0308 	sub.w	r3, r0, r8
 80177c4:	fa09 f303 	lsl.w	r3, r9, r3
 80177c8:	4313      	orrs	r3, r2
 80177ca:	9304      	str	r3, [sp, #16]
 80177cc:	46a2      	mov	sl, r4
 80177ce:	e7d2      	b.n	8017776 <_vfiprintf_r+0xe2>
 80177d0:	9b03      	ldr	r3, [sp, #12]
 80177d2:	1d19      	adds	r1, r3, #4
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	9103      	str	r1, [sp, #12]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	bfbb      	ittet	lt
 80177dc:	425b      	neglt	r3, r3
 80177de:	f042 0202 	orrlt.w	r2, r2, #2
 80177e2:	9307      	strge	r3, [sp, #28]
 80177e4:	9307      	strlt	r3, [sp, #28]
 80177e6:	bfb8      	it	lt
 80177e8:	9204      	strlt	r2, [sp, #16]
 80177ea:	7823      	ldrb	r3, [r4, #0]
 80177ec:	2b2e      	cmp	r3, #46	; 0x2e
 80177ee:	d10c      	bne.n	801780a <_vfiprintf_r+0x176>
 80177f0:	7863      	ldrb	r3, [r4, #1]
 80177f2:	2b2a      	cmp	r3, #42	; 0x2a
 80177f4:	d135      	bne.n	8017862 <_vfiprintf_r+0x1ce>
 80177f6:	9b03      	ldr	r3, [sp, #12]
 80177f8:	1d1a      	adds	r2, r3, #4
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	9203      	str	r2, [sp, #12]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	bfb8      	it	lt
 8017802:	f04f 33ff 	movlt.w	r3, #4294967295
 8017806:	3402      	adds	r4, #2
 8017808:	9305      	str	r3, [sp, #20]
 801780a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80178f0 <_vfiprintf_r+0x25c>
 801780e:	7821      	ldrb	r1, [r4, #0]
 8017810:	2203      	movs	r2, #3
 8017812:	4650      	mov	r0, sl
 8017814:	f7e8 fcfc 	bl	8000210 <memchr>
 8017818:	b140      	cbz	r0, 801782c <_vfiprintf_r+0x198>
 801781a:	2340      	movs	r3, #64	; 0x40
 801781c:	eba0 000a 	sub.w	r0, r0, sl
 8017820:	fa03 f000 	lsl.w	r0, r3, r0
 8017824:	9b04      	ldr	r3, [sp, #16]
 8017826:	4303      	orrs	r3, r0
 8017828:	3401      	adds	r4, #1
 801782a:	9304      	str	r3, [sp, #16]
 801782c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017830:	482c      	ldr	r0, [pc, #176]	; (80178e4 <_vfiprintf_r+0x250>)
 8017832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017836:	2206      	movs	r2, #6
 8017838:	f7e8 fcea 	bl	8000210 <memchr>
 801783c:	2800      	cmp	r0, #0
 801783e:	d03f      	beq.n	80178c0 <_vfiprintf_r+0x22c>
 8017840:	4b29      	ldr	r3, [pc, #164]	; (80178e8 <_vfiprintf_r+0x254>)
 8017842:	bb1b      	cbnz	r3, 801788c <_vfiprintf_r+0x1f8>
 8017844:	9b03      	ldr	r3, [sp, #12]
 8017846:	3307      	adds	r3, #7
 8017848:	f023 0307 	bic.w	r3, r3, #7
 801784c:	3308      	adds	r3, #8
 801784e:	9303      	str	r3, [sp, #12]
 8017850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017852:	443b      	add	r3, r7
 8017854:	9309      	str	r3, [sp, #36]	; 0x24
 8017856:	e767      	b.n	8017728 <_vfiprintf_r+0x94>
 8017858:	fb0c 3202 	mla	r2, ip, r2, r3
 801785c:	460c      	mov	r4, r1
 801785e:	2001      	movs	r0, #1
 8017860:	e7a5      	b.n	80177ae <_vfiprintf_r+0x11a>
 8017862:	2300      	movs	r3, #0
 8017864:	3401      	adds	r4, #1
 8017866:	9305      	str	r3, [sp, #20]
 8017868:	4619      	mov	r1, r3
 801786a:	f04f 0c0a 	mov.w	ip, #10
 801786e:	4620      	mov	r0, r4
 8017870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017874:	3a30      	subs	r2, #48	; 0x30
 8017876:	2a09      	cmp	r2, #9
 8017878:	d903      	bls.n	8017882 <_vfiprintf_r+0x1ee>
 801787a:	2b00      	cmp	r3, #0
 801787c:	d0c5      	beq.n	801780a <_vfiprintf_r+0x176>
 801787e:	9105      	str	r1, [sp, #20]
 8017880:	e7c3      	b.n	801780a <_vfiprintf_r+0x176>
 8017882:	fb0c 2101 	mla	r1, ip, r1, r2
 8017886:	4604      	mov	r4, r0
 8017888:	2301      	movs	r3, #1
 801788a:	e7f0      	b.n	801786e <_vfiprintf_r+0x1da>
 801788c:	ab03      	add	r3, sp, #12
 801788e:	9300      	str	r3, [sp, #0]
 8017890:	462a      	mov	r2, r5
 8017892:	4b16      	ldr	r3, [pc, #88]	; (80178ec <_vfiprintf_r+0x258>)
 8017894:	a904      	add	r1, sp, #16
 8017896:	4630      	mov	r0, r6
 8017898:	f3af 8000 	nop.w
 801789c:	4607      	mov	r7, r0
 801789e:	1c78      	adds	r0, r7, #1
 80178a0:	d1d6      	bne.n	8017850 <_vfiprintf_r+0x1bc>
 80178a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178a4:	07d9      	lsls	r1, r3, #31
 80178a6:	d405      	bmi.n	80178b4 <_vfiprintf_r+0x220>
 80178a8:	89ab      	ldrh	r3, [r5, #12]
 80178aa:	059a      	lsls	r2, r3, #22
 80178ac:	d402      	bmi.n	80178b4 <_vfiprintf_r+0x220>
 80178ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178b0:	f7ff fcc9 	bl	8017246 <__retarget_lock_release_recursive>
 80178b4:	89ab      	ldrh	r3, [r5, #12]
 80178b6:	065b      	lsls	r3, r3, #25
 80178b8:	f53f af12 	bmi.w	80176e0 <_vfiprintf_r+0x4c>
 80178bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178be:	e711      	b.n	80176e4 <_vfiprintf_r+0x50>
 80178c0:	ab03      	add	r3, sp, #12
 80178c2:	9300      	str	r3, [sp, #0]
 80178c4:	462a      	mov	r2, r5
 80178c6:	4b09      	ldr	r3, [pc, #36]	; (80178ec <_vfiprintf_r+0x258>)
 80178c8:	a904      	add	r1, sp, #16
 80178ca:	4630      	mov	r0, r6
 80178cc:	f000 f880 	bl	80179d0 <_printf_i>
 80178d0:	e7e4      	b.n	801789c <_vfiprintf_r+0x208>
 80178d2:	bf00      	nop
 80178d4:	08019534 	.word	0x08019534
 80178d8:	08019554 	.word	0x08019554
 80178dc:	08019514 	.word	0x08019514
 80178e0:	08019574 	.word	0x08019574
 80178e4:	0801957e 	.word	0x0801957e
 80178e8:	00000000 	.word	0x00000000
 80178ec:	0801766f 	.word	0x0801766f
 80178f0:	0801957a 	.word	0x0801957a

080178f4 <_printf_common>:
 80178f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178f8:	4616      	mov	r6, r2
 80178fa:	4699      	mov	r9, r3
 80178fc:	688a      	ldr	r2, [r1, #8]
 80178fe:	690b      	ldr	r3, [r1, #16]
 8017900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017904:	4293      	cmp	r3, r2
 8017906:	bfb8      	it	lt
 8017908:	4613      	movlt	r3, r2
 801790a:	6033      	str	r3, [r6, #0]
 801790c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017910:	4607      	mov	r7, r0
 8017912:	460c      	mov	r4, r1
 8017914:	b10a      	cbz	r2, 801791a <_printf_common+0x26>
 8017916:	3301      	adds	r3, #1
 8017918:	6033      	str	r3, [r6, #0]
 801791a:	6823      	ldr	r3, [r4, #0]
 801791c:	0699      	lsls	r1, r3, #26
 801791e:	bf42      	ittt	mi
 8017920:	6833      	ldrmi	r3, [r6, #0]
 8017922:	3302      	addmi	r3, #2
 8017924:	6033      	strmi	r3, [r6, #0]
 8017926:	6825      	ldr	r5, [r4, #0]
 8017928:	f015 0506 	ands.w	r5, r5, #6
 801792c:	d106      	bne.n	801793c <_printf_common+0x48>
 801792e:	f104 0a19 	add.w	sl, r4, #25
 8017932:	68e3      	ldr	r3, [r4, #12]
 8017934:	6832      	ldr	r2, [r6, #0]
 8017936:	1a9b      	subs	r3, r3, r2
 8017938:	42ab      	cmp	r3, r5
 801793a:	dc26      	bgt.n	801798a <_printf_common+0x96>
 801793c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017940:	1e13      	subs	r3, r2, #0
 8017942:	6822      	ldr	r2, [r4, #0]
 8017944:	bf18      	it	ne
 8017946:	2301      	movne	r3, #1
 8017948:	0692      	lsls	r2, r2, #26
 801794a:	d42b      	bmi.n	80179a4 <_printf_common+0xb0>
 801794c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017950:	4649      	mov	r1, r9
 8017952:	4638      	mov	r0, r7
 8017954:	47c0      	blx	r8
 8017956:	3001      	adds	r0, #1
 8017958:	d01e      	beq.n	8017998 <_printf_common+0xa4>
 801795a:	6823      	ldr	r3, [r4, #0]
 801795c:	68e5      	ldr	r5, [r4, #12]
 801795e:	6832      	ldr	r2, [r6, #0]
 8017960:	f003 0306 	and.w	r3, r3, #6
 8017964:	2b04      	cmp	r3, #4
 8017966:	bf08      	it	eq
 8017968:	1aad      	subeq	r5, r5, r2
 801796a:	68a3      	ldr	r3, [r4, #8]
 801796c:	6922      	ldr	r2, [r4, #16]
 801796e:	bf0c      	ite	eq
 8017970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017974:	2500      	movne	r5, #0
 8017976:	4293      	cmp	r3, r2
 8017978:	bfc4      	itt	gt
 801797a:	1a9b      	subgt	r3, r3, r2
 801797c:	18ed      	addgt	r5, r5, r3
 801797e:	2600      	movs	r6, #0
 8017980:	341a      	adds	r4, #26
 8017982:	42b5      	cmp	r5, r6
 8017984:	d11a      	bne.n	80179bc <_printf_common+0xc8>
 8017986:	2000      	movs	r0, #0
 8017988:	e008      	b.n	801799c <_printf_common+0xa8>
 801798a:	2301      	movs	r3, #1
 801798c:	4652      	mov	r2, sl
 801798e:	4649      	mov	r1, r9
 8017990:	4638      	mov	r0, r7
 8017992:	47c0      	blx	r8
 8017994:	3001      	adds	r0, #1
 8017996:	d103      	bne.n	80179a0 <_printf_common+0xac>
 8017998:	f04f 30ff 	mov.w	r0, #4294967295
 801799c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179a0:	3501      	adds	r5, #1
 80179a2:	e7c6      	b.n	8017932 <_printf_common+0x3e>
 80179a4:	18e1      	adds	r1, r4, r3
 80179a6:	1c5a      	adds	r2, r3, #1
 80179a8:	2030      	movs	r0, #48	; 0x30
 80179aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179ae:	4422      	add	r2, r4
 80179b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179b8:	3302      	adds	r3, #2
 80179ba:	e7c7      	b.n	801794c <_printf_common+0x58>
 80179bc:	2301      	movs	r3, #1
 80179be:	4622      	mov	r2, r4
 80179c0:	4649      	mov	r1, r9
 80179c2:	4638      	mov	r0, r7
 80179c4:	47c0      	blx	r8
 80179c6:	3001      	adds	r0, #1
 80179c8:	d0e6      	beq.n	8017998 <_printf_common+0xa4>
 80179ca:	3601      	adds	r6, #1
 80179cc:	e7d9      	b.n	8017982 <_printf_common+0x8e>
	...

080179d0 <_printf_i>:
 80179d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179d4:	7e0f      	ldrb	r7, [r1, #24]
 80179d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80179d8:	2f78      	cmp	r7, #120	; 0x78
 80179da:	4691      	mov	r9, r2
 80179dc:	4680      	mov	r8, r0
 80179de:	460c      	mov	r4, r1
 80179e0:	469a      	mov	sl, r3
 80179e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80179e6:	d807      	bhi.n	80179f8 <_printf_i+0x28>
 80179e8:	2f62      	cmp	r7, #98	; 0x62
 80179ea:	d80a      	bhi.n	8017a02 <_printf_i+0x32>
 80179ec:	2f00      	cmp	r7, #0
 80179ee:	f000 80d8 	beq.w	8017ba2 <_printf_i+0x1d2>
 80179f2:	2f58      	cmp	r7, #88	; 0x58
 80179f4:	f000 80a3 	beq.w	8017b3e <_printf_i+0x16e>
 80179f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a00:	e03a      	b.n	8017a78 <_printf_i+0xa8>
 8017a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a06:	2b15      	cmp	r3, #21
 8017a08:	d8f6      	bhi.n	80179f8 <_printf_i+0x28>
 8017a0a:	a101      	add	r1, pc, #4	; (adr r1, 8017a10 <_printf_i+0x40>)
 8017a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a10:	08017a69 	.word	0x08017a69
 8017a14:	08017a7d 	.word	0x08017a7d
 8017a18:	080179f9 	.word	0x080179f9
 8017a1c:	080179f9 	.word	0x080179f9
 8017a20:	080179f9 	.word	0x080179f9
 8017a24:	080179f9 	.word	0x080179f9
 8017a28:	08017a7d 	.word	0x08017a7d
 8017a2c:	080179f9 	.word	0x080179f9
 8017a30:	080179f9 	.word	0x080179f9
 8017a34:	080179f9 	.word	0x080179f9
 8017a38:	080179f9 	.word	0x080179f9
 8017a3c:	08017b89 	.word	0x08017b89
 8017a40:	08017aad 	.word	0x08017aad
 8017a44:	08017b6b 	.word	0x08017b6b
 8017a48:	080179f9 	.word	0x080179f9
 8017a4c:	080179f9 	.word	0x080179f9
 8017a50:	08017bab 	.word	0x08017bab
 8017a54:	080179f9 	.word	0x080179f9
 8017a58:	08017aad 	.word	0x08017aad
 8017a5c:	080179f9 	.word	0x080179f9
 8017a60:	080179f9 	.word	0x080179f9
 8017a64:	08017b73 	.word	0x08017b73
 8017a68:	682b      	ldr	r3, [r5, #0]
 8017a6a:	1d1a      	adds	r2, r3, #4
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	602a      	str	r2, [r5, #0]
 8017a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a78:	2301      	movs	r3, #1
 8017a7a:	e0a3      	b.n	8017bc4 <_printf_i+0x1f4>
 8017a7c:	6820      	ldr	r0, [r4, #0]
 8017a7e:	6829      	ldr	r1, [r5, #0]
 8017a80:	0606      	lsls	r6, r0, #24
 8017a82:	f101 0304 	add.w	r3, r1, #4
 8017a86:	d50a      	bpl.n	8017a9e <_printf_i+0xce>
 8017a88:	680e      	ldr	r6, [r1, #0]
 8017a8a:	602b      	str	r3, [r5, #0]
 8017a8c:	2e00      	cmp	r6, #0
 8017a8e:	da03      	bge.n	8017a98 <_printf_i+0xc8>
 8017a90:	232d      	movs	r3, #45	; 0x2d
 8017a92:	4276      	negs	r6, r6
 8017a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a98:	485e      	ldr	r0, [pc, #376]	; (8017c14 <_printf_i+0x244>)
 8017a9a:	230a      	movs	r3, #10
 8017a9c:	e019      	b.n	8017ad2 <_printf_i+0x102>
 8017a9e:	680e      	ldr	r6, [r1, #0]
 8017aa0:	602b      	str	r3, [r5, #0]
 8017aa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017aa6:	bf18      	it	ne
 8017aa8:	b236      	sxthne	r6, r6
 8017aaa:	e7ef      	b.n	8017a8c <_printf_i+0xbc>
 8017aac:	682b      	ldr	r3, [r5, #0]
 8017aae:	6820      	ldr	r0, [r4, #0]
 8017ab0:	1d19      	adds	r1, r3, #4
 8017ab2:	6029      	str	r1, [r5, #0]
 8017ab4:	0601      	lsls	r1, r0, #24
 8017ab6:	d501      	bpl.n	8017abc <_printf_i+0xec>
 8017ab8:	681e      	ldr	r6, [r3, #0]
 8017aba:	e002      	b.n	8017ac2 <_printf_i+0xf2>
 8017abc:	0646      	lsls	r6, r0, #25
 8017abe:	d5fb      	bpl.n	8017ab8 <_printf_i+0xe8>
 8017ac0:	881e      	ldrh	r6, [r3, #0]
 8017ac2:	4854      	ldr	r0, [pc, #336]	; (8017c14 <_printf_i+0x244>)
 8017ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8017ac6:	bf0c      	ite	eq
 8017ac8:	2308      	moveq	r3, #8
 8017aca:	230a      	movne	r3, #10
 8017acc:	2100      	movs	r1, #0
 8017ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017ad2:	6865      	ldr	r5, [r4, #4]
 8017ad4:	60a5      	str	r5, [r4, #8]
 8017ad6:	2d00      	cmp	r5, #0
 8017ad8:	bfa2      	ittt	ge
 8017ada:	6821      	ldrge	r1, [r4, #0]
 8017adc:	f021 0104 	bicge.w	r1, r1, #4
 8017ae0:	6021      	strge	r1, [r4, #0]
 8017ae2:	b90e      	cbnz	r6, 8017ae8 <_printf_i+0x118>
 8017ae4:	2d00      	cmp	r5, #0
 8017ae6:	d04d      	beq.n	8017b84 <_printf_i+0x1b4>
 8017ae8:	4615      	mov	r5, r2
 8017aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8017aee:	fb03 6711 	mls	r7, r3, r1, r6
 8017af2:	5dc7      	ldrb	r7, [r0, r7]
 8017af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017af8:	4637      	mov	r7, r6
 8017afa:	42bb      	cmp	r3, r7
 8017afc:	460e      	mov	r6, r1
 8017afe:	d9f4      	bls.n	8017aea <_printf_i+0x11a>
 8017b00:	2b08      	cmp	r3, #8
 8017b02:	d10b      	bne.n	8017b1c <_printf_i+0x14c>
 8017b04:	6823      	ldr	r3, [r4, #0]
 8017b06:	07de      	lsls	r6, r3, #31
 8017b08:	d508      	bpl.n	8017b1c <_printf_i+0x14c>
 8017b0a:	6923      	ldr	r3, [r4, #16]
 8017b0c:	6861      	ldr	r1, [r4, #4]
 8017b0e:	4299      	cmp	r1, r3
 8017b10:	bfde      	ittt	le
 8017b12:	2330      	movle	r3, #48	; 0x30
 8017b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017b1c:	1b52      	subs	r2, r2, r5
 8017b1e:	6122      	str	r2, [r4, #16]
 8017b20:	f8cd a000 	str.w	sl, [sp]
 8017b24:	464b      	mov	r3, r9
 8017b26:	aa03      	add	r2, sp, #12
 8017b28:	4621      	mov	r1, r4
 8017b2a:	4640      	mov	r0, r8
 8017b2c:	f7ff fee2 	bl	80178f4 <_printf_common>
 8017b30:	3001      	adds	r0, #1
 8017b32:	d14c      	bne.n	8017bce <_printf_i+0x1fe>
 8017b34:	f04f 30ff 	mov.w	r0, #4294967295
 8017b38:	b004      	add	sp, #16
 8017b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b3e:	4835      	ldr	r0, [pc, #212]	; (8017c14 <_printf_i+0x244>)
 8017b40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017b44:	6829      	ldr	r1, [r5, #0]
 8017b46:	6823      	ldr	r3, [r4, #0]
 8017b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8017b4c:	6029      	str	r1, [r5, #0]
 8017b4e:	061d      	lsls	r5, r3, #24
 8017b50:	d514      	bpl.n	8017b7c <_printf_i+0x1ac>
 8017b52:	07df      	lsls	r7, r3, #31
 8017b54:	bf44      	itt	mi
 8017b56:	f043 0320 	orrmi.w	r3, r3, #32
 8017b5a:	6023      	strmi	r3, [r4, #0]
 8017b5c:	b91e      	cbnz	r6, 8017b66 <_printf_i+0x196>
 8017b5e:	6823      	ldr	r3, [r4, #0]
 8017b60:	f023 0320 	bic.w	r3, r3, #32
 8017b64:	6023      	str	r3, [r4, #0]
 8017b66:	2310      	movs	r3, #16
 8017b68:	e7b0      	b.n	8017acc <_printf_i+0xfc>
 8017b6a:	6823      	ldr	r3, [r4, #0]
 8017b6c:	f043 0320 	orr.w	r3, r3, #32
 8017b70:	6023      	str	r3, [r4, #0]
 8017b72:	2378      	movs	r3, #120	; 0x78
 8017b74:	4828      	ldr	r0, [pc, #160]	; (8017c18 <_printf_i+0x248>)
 8017b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b7a:	e7e3      	b.n	8017b44 <_printf_i+0x174>
 8017b7c:	0659      	lsls	r1, r3, #25
 8017b7e:	bf48      	it	mi
 8017b80:	b2b6      	uxthmi	r6, r6
 8017b82:	e7e6      	b.n	8017b52 <_printf_i+0x182>
 8017b84:	4615      	mov	r5, r2
 8017b86:	e7bb      	b.n	8017b00 <_printf_i+0x130>
 8017b88:	682b      	ldr	r3, [r5, #0]
 8017b8a:	6826      	ldr	r6, [r4, #0]
 8017b8c:	6961      	ldr	r1, [r4, #20]
 8017b8e:	1d18      	adds	r0, r3, #4
 8017b90:	6028      	str	r0, [r5, #0]
 8017b92:	0635      	lsls	r5, r6, #24
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	d501      	bpl.n	8017b9c <_printf_i+0x1cc>
 8017b98:	6019      	str	r1, [r3, #0]
 8017b9a:	e002      	b.n	8017ba2 <_printf_i+0x1d2>
 8017b9c:	0670      	lsls	r0, r6, #25
 8017b9e:	d5fb      	bpl.n	8017b98 <_printf_i+0x1c8>
 8017ba0:	8019      	strh	r1, [r3, #0]
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	6123      	str	r3, [r4, #16]
 8017ba6:	4615      	mov	r5, r2
 8017ba8:	e7ba      	b.n	8017b20 <_printf_i+0x150>
 8017baa:	682b      	ldr	r3, [r5, #0]
 8017bac:	1d1a      	adds	r2, r3, #4
 8017bae:	602a      	str	r2, [r5, #0]
 8017bb0:	681d      	ldr	r5, [r3, #0]
 8017bb2:	6862      	ldr	r2, [r4, #4]
 8017bb4:	2100      	movs	r1, #0
 8017bb6:	4628      	mov	r0, r5
 8017bb8:	f7e8 fb2a 	bl	8000210 <memchr>
 8017bbc:	b108      	cbz	r0, 8017bc2 <_printf_i+0x1f2>
 8017bbe:	1b40      	subs	r0, r0, r5
 8017bc0:	6060      	str	r0, [r4, #4]
 8017bc2:	6863      	ldr	r3, [r4, #4]
 8017bc4:	6123      	str	r3, [r4, #16]
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bcc:	e7a8      	b.n	8017b20 <_printf_i+0x150>
 8017bce:	6923      	ldr	r3, [r4, #16]
 8017bd0:	462a      	mov	r2, r5
 8017bd2:	4649      	mov	r1, r9
 8017bd4:	4640      	mov	r0, r8
 8017bd6:	47d0      	blx	sl
 8017bd8:	3001      	adds	r0, #1
 8017bda:	d0ab      	beq.n	8017b34 <_printf_i+0x164>
 8017bdc:	6823      	ldr	r3, [r4, #0]
 8017bde:	079b      	lsls	r3, r3, #30
 8017be0:	d413      	bmi.n	8017c0a <_printf_i+0x23a>
 8017be2:	68e0      	ldr	r0, [r4, #12]
 8017be4:	9b03      	ldr	r3, [sp, #12]
 8017be6:	4298      	cmp	r0, r3
 8017be8:	bfb8      	it	lt
 8017bea:	4618      	movlt	r0, r3
 8017bec:	e7a4      	b.n	8017b38 <_printf_i+0x168>
 8017bee:	2301      	movs	r3, #1
 8017bf0:	4632      	mov	r2, r6
 8017bf2:	4649      	mov	r1, r9
 8017bf4:	4640      	mov	r0, r8
 8017bf6:	47d0      	blx	sl
 8017bf8:	3001      	adds	r0, #1
 8017bfa:	d09b      	beq.n	8017b34 <_printf_i+0x164>
 8017bfc:	3501      	adds	r5, #1
 8017bfe:	68e3      	ldr	r3, [r4, #12]
 8017c00:	9903      	ldr	r1, [sp, #12]
 8017c02:	1a5b      	subs	r3, r3, r1
 8017c04:	42ab      	cmp	r3, r5
 8017c06:	dcf2      	bgt.n	8017bee <_printf_i+0x21e>
 8017c08:	e7eb      	b.n	8017be2 <_printf_i+0x212>
 8017c0a:	2500      	movs	r5, #0
 8017c0c:	f104 0619 	add.w	r6, r4, #25
 8017c10:	e7f5      	b.n	8017bfe <_printf_i+0x22e>
 8017c12:	bf00      	nop
 8017c14:	08019585 	.word	0x08019585
 8017c18:	08019596 	.word	0x08019596

08017c1c <__sread>:
 8017c1c:	b510      	push	{r4, lr}
 8017c1e:	460c      	mov	r4, r1
 8017c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c24:	f000 f8b6 	bl	8017d94 <_read_r>
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	bfab      	itete	ge
 8017c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8017c30:	181b      	addge	r3, r3, r0
 8017c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c36:	bfac      	ite	ge
 8017c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c3a:	81a3      	strhlt	r3, [r4, #12]
 8017c3c:	bd10      	pop	{r4, pc}

08017c3e <__swrite>:
 8017c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c42:	461f      	mov	r7, r3
 8017c44:	898b      	ldrh	r3, [r1, #12]
 8017c46:	05db      	lsls	r3, r3, #23
 8017c48:	4605      	mov	r5, r0
 8017c4a:	460c      	mov	r4, r1
 8017c4c:	4616      	mov	r6, r2
 8017c4e:	d505      	bpl.n	8017c5c <__swrite+0x1e>
 8017c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c54:	2302      	movs	r3, #2
 8017c56:	2200      	movs	r2, #0
 8017c58:	f000 f868 	bl	8017d2c <_lseek_r>
 8017c5c:	89a3      	ldrh	r3, [r4, #12]
 8017c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c66:	81a3      	strh	r3, [r4, #12]
 8017c68:	4632      	mov	r2, r6
 8017c6a:	463b      	mov	r3, r7
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c72:	f000 b817 	b.w	8017ca4 <_write_r>

08017c76 <__sseek>:
 8017c76:	b510      	push	{r4, lr}
 8017c78:	460c      	mov	r4, r1
 8017c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c7e:	f000 f855 	bl	8017d2c <_lseek_r>
 8017c82:	1c43      	adds	r3, r0, #1
 8017c84:	89a3      	ldrh	r3, [r4, #12]
 8017c86:	bf15      	itete	ne
 8017c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c92:	81a3      	strheq	r3, [r4, #12]
 8017c94:	bf18      	it	ne
 8017c96:	81a3      	strhne	r3, [r4, #12]
 8017c98:	bd10      	pop	{r4, pc}

08017c9a <__sclose>:
 8017c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c9e:	f000 b813 	b.w	8017cc8 <_close_r>
	...

08017ca4 <_write_r>:
 8017ca4:	b538      	push	{r3, r4, r5, lr}
 8017ca6:	4d07      	ldr	r5, [pc, #28]	; (8017cc4 <_write_r+0x20>)
 8017ca8:	4604      	mov	r4, r0
 8017caa:	4608      	mov	r0, r1
 8017cac:	4611      	mov	r1, r2
 8017cae:	2200      	movs	r2, #0
 8017cb0:	602a      	str	r2, [r5, #0]
 8017cb2:	461a      	mov	r2, r3
 8017cb4:	f000 ffca 	bl	8018c4c <_write>
 8017cb8:	1c43      	adds	r3, r0, #1
 8017cba:	d102      	bne.n	8017cc2 <_write_r+0x1e>
 8017cbc:	682b      	ldr	r3, [r5, #0]
 8017cbe:	b103      	cbz	r3, 8017cc2 <_write_r+0x1e>
 8017cc0:	6023      	str	r3, [r4, #0]
 8017cc2:	bd38      	pop	{r3, r4, r5, pc}
 8017cc4:	20002ed0 	.word	0x20002ed0

08017cc8 <_close_r>:
 8017cc8:	b538      	push	{r3, r4, r5, lr}
 8017cca:	4d06      	ldr	r5, [pc, #24]	; (8017ce4 <_close_r+0x1c>)
 8017ccc:	2300      	movs	r3, #0
 8017cce:	4604      	mov	r4, r0
 8017cd0:	4608      	mov	r0, r1
 8017cd2:	602b      	str	r3, [r5, #0]
 8017cd4:	f000 ff92 	bl	8018bfc <_close>
 8017cd8:	1c43      	adds	r3, r0, #1
 8017cda:	d102      	bne.n	8017ce2 <_close_r+0x1a>
 8017cdc:	682b      	ldr	r3, [r5, #0]
 8017cde:	b103      	cbz	r3, 8017ce2 <_close_r+0x1a>
 8017ce0:	6023      	str	r3, [r4, #0]
 8017ce2:	bd38      	pop	{r3, r4, r5, pc}
 8017ce4:	20002ed0 	.word	0x20002ed0

08017ce8 <_fstat_r>:
 8017ce8:	b538      	push	{r3, r4, r5, lr}
 8017cea:	4d07      	ldr	r5, [pc, #28]	; (8017d08 <_fstat_r+0x20>)
 8017cec:	2300      	movs	r3, #0
 8017cee:	4604      	mov	r4, r0
 8017cf0:	4608      	mov	r0, r1
 8017cf2:	4611      	mov	r1, r2
 8017cf4:	602b      	str	r3, [r5, #0]
 8017cf6:	f000 ff89 	bl	8018c0c <_fstat>
 8017cfa:	1c43      	adds	r3, r0, #1
 8017cfc:	d102      	bne.n	8017d04 <_fstat_r+0x1c>
 8017cfe:	682b      	ldr	r3, [r5, #0]
 8017d00:	b103      	cbz	r3, 8017d04 <_fstat_r+0x1c>
 8017d02:	6023      	str	r3, [r4, #0]
 8017d04:	bd38      	pop	{r3, r4, r5, pc}
 8017d06:	bf00      	nop
 8017d08:	20002ed0 	.word	0x20002ed0

08017d0c <_isatty_r>:
 8017d0c:	b538      	push	{r3, r4, r5, lr}
 8017d0e:	4d06      	ldr	r5, [pc, #24]	; (8017d28 <_isatty_r+0x1c>)
 8017d10:	2300      	movs	r3, #0
 8017d12:	4604      	mov	r4, r0
 8017d14:	4608      	mov	r0, r1
 8017d16:	602b      	str	r3, [r5, #0]
 8017d18:	f000 ff80 	bl	8018c1c <_isatty>
 8017d1c:	1c43      	adds	r3, r0, #1
 8017d1e:	d102      	bne.n	8017d26 <_isatty_r+0x1a>
 8017d20:	682b      	ldr	r3, [r5, #0]
 8017d22:	b103      	cbz	r3, 8017d26 <_isatty_r+0x1a>
 8017d24:	6023      	str	r3, [r4, #0]
 8017d26:	bd38      	pop	{r3, r4, r5, pc}
 8017d28:	20002ed0 	.word	0x20002ed0

08017d2c <_lseek_r>:
 8017d2c:	b538      	push	{r3, r4, r5, lr}
 8017d2e:	4d07      	ldr	r5, [pc, #28]	; (8017d4c <_lseek_r+0x20>)
 8017d30:	4604      	mov	r4, r0
 8017d32:	4608      	mov	r0, r1
 8017d34:	4611      	mov	r1, r2
 8017d36:	2200      	movs	r2, #0
 8017d38:	602a      	str	r2, [r5, #0]
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	f000 ff76 	bl	8018c2c <_lseek>
 8017d40:	1c43      	adds	r3, r0, #1
 8017d42:	d102      	bne.n	8017d4a <_lseek_r+0x1e>
 8017d44:	682b      	ldr	r3, [r5, #0]
 8017d46:	b103      	cbz	r3, 8017d4a <_lseek_r+0x1e>
 8017d48:	6023      	str	r3, [r4, #0]
 8017d4a:	bd38      	pop	{r3, r4, r5, pc}
 8017d4c:	20002ed0 	.word	0x20002ed0

08017d50 <memmove>:
 8017d50:	4288      	cmp	r0, r1
 8017d52:	b510      	push	{r4, lr}
 8017d54:	eb01 0402 	add.w	r4, r1, r2
 8017d58:	d902      	bls.n	8017d60 <memmove+0x10>
 8017d5a:	4284      	cmp	r4, r0
 8017d5c:	4623      	mov	r3, r4
 8017d5e:	d807      	bhi.n	8017d70 <memmove+0x20>
 8017d60:	1e43      	subs	r3, r0, #1
 8017d62:	42a1      	cmp	r1, r4
 8017d64:	d008      	beq.n	8017d78 <memmove+0x28>
 8017d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d6e:	e7f8      	b.n	8017d62 <memmove+0x12>
 8017d70:	4402      	add	r2, r0
 8017d72:	4601      	mov	r1, r0
 8017d74:	428a      	cmp	r2, r1
 8017d76:	d100      	bne.n	8017d7a <memmove+0x2a>
 8017d78:	bd10      	pop	{r4, pc}
 8017d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d82:	e7f7      	b.n	8017d74 <memmove+0x24>

08017d84 <_malloc_usable_size_r>:
 8017d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d88:	1f18      	subs	r0, r3, #4
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	bfbc      	itt	lt
 8017d8e:	580b      	ldrlt	r3, [r1, r0]
 8017d90:	18c0      	addlt	r0, r0, r3
 8017d92:	4770      	bx	lr

08017d94 <_read_r>:
 8017d94:	b538      	push	{r3, r4, r5, lr}
 8017d96:	4d07      	ldr	r5, [pc, #28]	; (8017db4 <_read_r+0x20>)
 8017d98:	4604      	mov	r4, r0
 8017d9a:	4608      	mov	r0, r1
 8017d9c:	4611      	mov	r1, r2
 8017d9e:	2200      	movs	r2, #0
 8017da0:	602a      	str	r2, [r5, #0]
 8017da2:	461a      	mov	r2, r3
 8017da4:	f000 ff4a 	bl	8018c3c <_read>
 8017da8:	1c43      	adds	r3, r0, #1
 8017daa:	d102      	bne.n	8017db2 <_read_r+0x1e>
 8017dac:	682b      	ldr	r3, [r5, #0]
 8017dae:	b103      	cbz	r3, 8017db2 <_read_r+0x1e>
 8017db0:	6023      	str	r3, [r4, #0]
 8017db2:	bd38      	pop	{r3, r4, r5, pc}
 8017db4:	20002ed0 	.word	0x20002ed0

08017db8 <tanhf>:
 8017db8:	b510      	push	{r4, lr}
 8017dba:	ee10 4a10 	vmov	r4, s0
 8017dbe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017dc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017dc6:	ed2d 8b02 	vpush	{d8}
 8017dca:	eeb0 7a40 	vmov.f32	s14, s0
 8017dce:	db0c      	blt.n	8017dea <tanhf+0x32>
 8017dd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017dd4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8017dd8:	2c00      	cmp	r4, #0
 8017dda:	bfac      	ite	ge
 8017ddc:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8017de0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8017de4:	ecbd 8b02 	vpop	{d8}
 8017de8:	bd10      	pop	{r4, pc}
 8017dea:	4a1b      	ldr	r2, [pc, #108]	; (8017e58 <tanhf+0xa0>)
 8017dec:	4293      	cmp	r3, r2
 8017dee:	dc30      	bgt.n	8017e52 <tanhf+0x9a>
 8017df0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8017df4:	da06      	bge.n	8017e04 <tanhf+0x4c>
 8017df6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017dfa:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017dfe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017e02:	e7ef      	b.n	8017de4 <tanhf+0x2c>
 8017e04:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8017e08:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8017e0c:	db12      	blt.n	8017e34 <tanhf+0x7c>
 8017e0e:	f000 fe6f 	bl	8018af0 <fabsf>
 8017e12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017e16:	f000 fd4f 	bl	80188b8 <expm1f>
 8017e1a:	ee30 0a08 	vadd.f32	s0, s0, s16
 8017e1e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8017e22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017e26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017e2a:	2c00      	cmp	r4, #0
 8017e2c:	bfb8      	it	lt
 8017e2e:	eeb1 0a40 	vneglt.f32	s0, s0
 8017e32:	e7d7      	b.n	8017de4 <tanhf+0x2c>
 8017e34:	f000 fe5c 	bl	8018af0 <fabsf>
 8017e38:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8017e3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017e40:	f000 fd3a 	bl	80188b8 <expm1f>
 8017e44:	ee70 7a08 	vadd.f32	s15, s0, s16
 8017e48:	eeb1 7a40 	vneg.f32	s14, s0
 8017e4c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017e50:	e7eb      	b.n	8017e2a <tanhf+0x72>
 8017e52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017e56:	e7e8      	b.n	8017e2a <tanhf+0x72>
 8017e58:	41afffff 	.word	0x41afffff

08017e5c <sqrt>:
 8017e5c:	b538      	push	{r3, r4, r5, lr}
 8017e5e:	ed2d 8b02 	vpush	{d8}
 8017e62:	ec55 4b10 	vmov	r4, r5, d0
 8017e66:	f000 f8b3 	bl	8017fd0 <__ieee754_sqrt>
 8017e6a:	4622      	mov	r2, r4
 8017e6c:	462b      	mov	r3, r5
 8017e6e:	4620      	mov	r0, r4
 8017e70:	4629      	mov	r1, r5
 8017e72:	eeb0 8a40 	vmov.f32	s16, s0
 8017e76:	eef0 8a60 	vmov.f32	s17, s1
 8017e7a:	f7e8 fe6f 	bl	8000b5c <__aeabi_dcmpun>
 8017e7e:	b990      	cbnz	r0, 8017ea6 <sqrt+0x4a>
 8017e80:	2200      	movs	r2, #0
 8017e82:	2300      	movs	r3, #0
 8017e84:	4620      	mov	r0, r4
 8017e86:	4629      	mov	r1, r5
 8017e88:	f7e8 fe40 	bl	8000b0c <__aeabi_dcmplt>
 8017e8c:	b158      	cbz	r0, 8017ea6 <sqrt+0x4a>
 8017e8e:	f7fe fd6f 	bl	8016970 <__errno>
 8017e92:	2321      	movs	r3, #33	; 0x21
 8017e94:	6003      	str	r3, [r0, #0]
 8017e96:	2200      	movs	r2, #0
 8017e98:	2300      	movs	r3, #0
 8017e9a:	4610      	mov	r0, r2
 8017e9c:	4619      	mov	r1, r3
 8017e9e:	f7e8 fced 	bl	800087c <__aeabi_ddiv>
 8017ea2:	ec41 0b18 	vmov	d8, r0, r1
 8017ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8017eaa:	eef0 0a68 	vmov.f32	s1, s17
 8017eae:	ecbd 8b02 	vpop	{d8}
 8017eb2:	bd38      	pop	{r3, r4, r5, pc}

08017eb4 <expf>:
 8017eb4:	b508      	push	{r3, lr}
 8017eb6:	ed2d 8b02 	vpush	{d8}
 8017eba:	eef0 8a40 	vmov.f32	s17, s0
 8017ebe:	f000 f939 	bl	8018134 <__ieee754_expf>
 8017ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8017ec6:	eeb0 0a68 	vmov.f32	s0, s17
 8017eca:	f000 fe18 	bl	8018afe <finitef>
 8017ece:	b160      	cbz	r0, 8017eea <expf+0x36>
 8017ed0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017f10 <expf+0x5c>
 8017ed4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017edc:	dd0a      	ble.n	8017ef4 <expf+0x40>
 8017ede:	f7fe fd47 	bl	8016970 <__errno>
 8017ee2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8017f14 <expf+0x60>
 8017ee6:	2322      	movs	r3, #34	; 0x22
 8017ee8:	6003      	str	r3, [r0, #0]
 8017eea:	eeb0 0a48 	vmov.f32	s0, s16
 8017eee:	ecbd 8b02 	vpop	{d8}
 8017ef2:	bd08      	pop	{r3, pc}
 8017ef4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017f18 <expf+0x64>
 8017ef8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f00:	d5f3      	bpl.n	8017eea <expf+0x36>
 8017f02:	f7fe fd35 	bl	8016970 <__errno>
 8017f06:	2322      	movs	r3, #34	; 0x22
 8017f08:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8017f1c <expf+0x68>
 8017f0c:	6003      	str	r3, [r0, #0]
 8017f0e:	e7ec      	b.n	8017eea <expf+0x36>
 8017f10:	42b17180 	.word	0x42b17180
 8017f14:	7f800000 	.word	0x7f800000
 8017f18:	c2cff1b5 	.word	0xc2cff1b5
 8017f1c:	00000000 	.word	0x00000000

08017f20 <powf>:
 8017f20:	b508      	push	{r3, lr}
 8017f22:	ed2d 8b04 	vpush	{d8-d9}
 8017f26:	eeb0 8a60 	vmov.f32	s16, s1
 8017f2a:	eeb0 9a40 	vmov.f32	s18, s0
 8017f2e:	f000 f9cf 	bl	80182d0 <__ieee754_powf>
 8017f32:	eeb4 8a48 	vcmp.f32	s16, s16
 8017f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f3a:	eef0 8a40 	vmov.f32	s17, s0
 8017f3e:	d63e      	bvs.n	8017fbe <powf+0x9e>
 8017f40:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f48:	d112      	bne.n	8017f70 <powf+0x50>
 8017f4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f52:	d039      	beq.n	8017fc8 <powf+0xa8>
 8017f54:	eeb0 0a48 	vmov.f32	s0, s16
 8017f58:	f000 fdd1 	bl	8018afe <finitef>
 8017f5c:	b378      	cbz	r0, 8017fbe <powf+0x9e>
 8017f5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f66:	d52a      	bpl.n	8017fbe <powf+0x9e>
 8017f68:	f7fe fd02 	bl	8016970 <__errno>
 8017f6c:	2322      	movs	r3, #34	; 0x22
 8017f6e:	e014      	b.n	8017f9a <powf+0x7a>
 8017f70:	f000 fdc5 	bl	8018afe <finitef>
 8017f74:	b998      	cbnz	r0, 8017f9e <powf+0x7e>
 8017f76:	eeb0 0a49 	vmov.f32	s0, s18
 8017f7a:	f000 fdc0 	bl	8018afe <finitef>
 8017f7e:	b170      	cbz	r0, 8017f9e <powf+0x7e>
 8017f80:	eeb0 0a48 	vmov.f32	s0, s16
 8017f84:	f000 fdbb 	bl	8018afe <finitef>
 8017f88:	b148      	cbz	r0, 8017f9e <powf+0x7e>
 8017f8a:	eef4 8a68 	vcmp.f32	s17, s17
 8017f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f92:	d7e9      	bvc.n	8017f68 <powf+0x48>
 8017f94:	f7fe fcec 	bl	8016970 <__errno>
 8017f98:	2321      	movs	r3, #33	; 0x21
 8017f9a:	6003      	str	r3, [r0, #0]
 8017f9c:	e00f      	b.n	8017fbe <powf+0x9e>
 8017f9e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa6:	d10a      	bne.n	8017fbe <powf+0x9e>
 8017fa8:	eeb0 0a49 	vmov.f32	s0, s18
 8017fac:	f000 fda7 	bl	8018afe <finitef>
 8017fb0:	b128      	cbz	r0, 8017fbe <powf+0x9e>
 8017fb2:	eeb0 0a48 	vmov.f32	s0, s16
 8017fb6:	f000 fda2 	bl	8018afe <finitef>
 8017fba:	2800      	cmp	r0, #0
 8017fbc:	d1d4      	bne.n	8017f68 <powf+0x48>
 8017fbe:	eeb0 0a68 	vmov.f32	s0, s17
 8017fc2:	ecbd 8b04 	vpop	{d8-d9}
 8017fc6:	bd08      	pop	{r3, pc}
 8017fc8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017fcc:	e7f7      	b.n	8017fbe <powf+0x9e>
	...

08017fd0 <__ieee754_sqrt>:
 8017fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd4:	ec55 4b10 	vmov	r4, r5, d0
 8017fd8:	4e55      	ldr	r6, [pc, #340]	; (8018130 <__ieee754_sqrt+0x160>)
 8017fda:	43ae      	bics	r6, r5
 8017fdc:	ee10 0a10 	vmov	r0, s0
 8017fe0:	ee10 3a10 	vmov	r3, s0
 8017fe4:	462a      	mov	r2, r5
 8017fe6:	4629      	mov	r1, r5
 8017fe8:	d110      	bne.n	801800c <__ieee754_sqrt+0x3c>
 8017fea:	ee10 2a10 	vmov	r2, s0
 8017fee:	462b      	mov	r3, r5
 8017ff0:	f7e8 fb1a 	bl	8000628 <__aeabi_dmul>
 8017ff4:	4602      	mov	r2, r0
 8017ff6:	460b      	mov	r3, r1
 8017ff8:	4620      	mov	r0, r4
 8017ffa:	4629      	mov	r1, r5
 8017ffc:	f7e8 f95e 	bl	80002bc <__adddf3>
 8018000:	4604      	mov	r4, r0
 8018002:	460d      	mov	r5, r1
 8018004:	ec45 4b10 	vmov	d0, r4, r5
 8018008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801800c:	2d00      	cmp	r5, #0
 801800e:	dc10      	bgt.n	8018032 <__ieee754_sqrt+0x62>
 8018010:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018014:	4330      	orrs	r0, r6
 8018016:	d0f5      	beq.n	8018004 <__ieee754_sqrt+0x34>
 8018018:	b15d      	cbz	r5, 8018032 <__ieee754_sqrt+0x62>
 801801a:	ee10 2a10 	vmov	r2, s0
 801801e:	462b      	mov	r3, r5
 8018020:	ee10 0a10 	vmov	r0, s0
 8018024:	f7e8 f948 	bl	80002b8 <__aeabi_dsub>
 8018028:	4602      	mov	r2, r0
 801802a:	460b      	mov	r3, r1
 801802c:	f7e8 fc26 	bl	800087c <__aeabi_ddiv>
 8018030:	e7e6      	b.n	8018000 <__ieee754_sqrt+0x30>
 8018032:	1512      	asrs	r2, r2, #20
 8018034:	d074      	beq.n	8018120 <__ieee754_sqrt+0x150>
 8018036:	07d4      	lsls	r4, r2, #31
 8018038:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801803c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018040:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018044:	bf5e      	ittt	pl
 8018046:	0fda      	lsrpl	r2, r3, #31
 8018048:	005b      	lslpl	r3, r3, #1
 801804a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801804e:	2400      	movs	r4, #0
 8018050:	0fda      	lsrs	r2, r3, #31
 8018052:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018056:	107f      	asrs	r7, r7, #1
 8018058:	005b      	lsls	r3, r3, #1
 801805a:	2516      	movs	r5, #22
 801805c:	4620      	mov	r0, r4
 801805e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018062:	1886      	adds	r6, r0, r2
 8018064:	428e      	cmp	r6, r1
 8018066:	bfde      	ittt	le
 8018068:	1b89      	suble	r1, r1, r6
 801806a:	18b0      	addle	r0, r6, r2
 801806c:	18a4      	addle	r4, r4, r2
 801806e:	0049      	lsls	r1, r1, #1
 8018070:	3d01      	subs	r5, #1
 8018072:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018076:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801807a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801807e:	d1f0      	bne.n	8018062 <__ieee754_sqrt+0x92>
 8018080:	462a      	mov	r2, r5
 8018082:	f04f 0e20 	mov.w	lr, #32
 8018086:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801808a:	4281      	cmp	r1, r0
 801808c:	eb06 0c05 	add.w	ip, r6, r5
 8018090:	dc02      	bgt.n	8018098 <__ieee754_sqrt+0xc8>
 8018092:	d113      	bne.n	80180bc <__ieee754_sqrt+0xec>
 8018094:	459c      	cmp	ip, r3
 8018096:	d811      	bhi.n	80180bc <__ieee754_sqrt+0xec>
 8018098:	f1bc 0f00 	cmp.w	ip, #0
 801809c:	eb0c 0506 	add.w	r5, ip, r6
 80180a0:	da43      	bge.n	801812a <__ieee754_sqrt+0x15a>
 80180a2:	2d00      	cmp	r5, #0
 80180a4:	db41      	blt.n	801812a <__ieee754_sqrt+0x15a>
 80180a6:	f100 0801 	add.w	r8, r0, #1
 80180aa:	1a09      	subs	r1, r1, r0
 80180ac:	459c      	cmp	ip, r3
 80180ae:	bf88      	it	hi
 80180b0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80180b4:	eba3 030c 	sub.w	r3, r3, ip
 80180b8:	4432      	add	r2, r6
 80180ba:	4640      	mov	r0, r8
 80180bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80180c0:	f1be 0e01 	subs.w	lr, lr, #1
 80180c4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80180c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80180cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80180d0:	d1db      	bne.n	801808a <__ieee754_sqrt+0xba>
 80180d2:	430b      	orrs	r3, r1
 80180d4:	d006      	beq.n	80180e4 <__ieee754_sqrt+0x114>
 80180d6:	1c50      	adds	r0, r2, #1
 80180d8:	bf13      	iteet	ne
 80180da:	3201      	addne	r2, #1
 80180dc:	3401      	addeq	r4, #1
 80180de:	4672      	moveq	r2, lr
 80180e0:	f022 0201 	bicne.w	r2, r2, #1
 80180e4:	1063      	asrs	r3, r4, #1
 80180e6:	0852      	lsrs	r2, r2, #1
 80180e8:	07e1      	lsls	r1, r4, #31
 80180ea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80180ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80180f2:	bf48      	it	mi
 80180f4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80180f8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80180fc:	4614      	mov	r4, r2
 80180fe:	e781      	b.n	8018004 <__ieee754_sqrt+0x34>
 8018100:	0ad9      	lsrs	r1, r3, #11
 8018102:	3815      	subs	r0, #21
 8018104:	055b      	lsls	r3, r3, #21
 8018106:	2900      	cmp	r1, #0
 8018108:	d0fa      	beq.n	8018100 <__ieee754_sqrt+0x130>
 801810a:	02cd      	lsls	r5, r1, #11
 801810c:	d50a      	bpl.n	8018124 <__ieee754_sqrt+0x154>
 801810e:	f1c2 0420 	rsb	r4, r2, #32
 8018112:	fa23 f404 	lsr.w	r4, r3, r4
 8018116:	1e55      	subs	r5, r2, #1
 8018118:	4093      	lsls	r3, r2
 801811a:	4321      	orrs	r1, r4
 801811c:	1b42      	subs	r2, r0, r5
 801811e:	e78a      	b.n	8018036 <__ieee754_sqrt+0x66>
 8018120:	4610      	mov	r0, r2
 8018122:	e7f0      	b.n	8018106 <__ieee754_sqrt+0x136>
 8018124:	0049      	lsls	r1, r1, #1
 8018126:	3201      	adds	r2, #1
 8018128:	e7ef      	b.n	801810a <__ieee754_sqrt+0x13a>
 801812a:	4680      	mov	r8, r0
 801812c:	e7bd      	b.n	80180aa <__ieee754_sqrt+0xda>
 801812e:	bf00      	nop
 8018130:	7ff00000 	.word	0x7ff00000

08018134 <__ieee754_expf>:
 8018134:	ee10 2a10 	vmov	r2, s0
 8018138:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801813c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018140:	d902      	bls.n	8018148 <__ieee754_expf+0x14>
 8018142:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018146:	4770      	bx	lr
 8018148:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801814c:	d106      	bne.n	801815c <__ieee754_expf+0x28>
 801814e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8018288 <__ieee754_expf+0x154>
 8018152:	2b00      	cmp	r3, #0
 8018154:	bf18      	it	ne
 8018156:	eeb0 0a67 	vmovne.f32	s0, s15
 801815a:	4770      	bx	lr
 801815c:	484b      	ldr	r0, [pc, #300]	; (801828c <__ieee754_expf+0x158>)
 801815e:	4282      	cmp	r2, r0
 8018160:	dd02      	ble.n	8018168 <__ieee754_expf+0x34>
 8018162:	2000      	movs	r0, #0
 8018164:	f000 bba2 	b.w	80188ac <__math_oflowf>
 8018168:	2a00      	cmp	r2, #0
 801816a:	da05      	bge.n	8018178 <__ieee754_expf+0x44>
 801816c:	4a48      	ldr	r2, [pc, #288]	; (8018290 <__ieee754_expf+0x15c>)
 801816e:	4291      	cmp	r1, r2
 8018170:	d902      	bls.n	8018178 <__ieee754_expf+0x44>
 8018172:	2000      	movs	r0, #0
 8018174:	f000 bb94 	b.w	80188a0 <__math_uflowf>
 8018178:	4a46      	ldr	r2, [pc, #280]	; (8018294 <__ieee754_expf+0x160>)
 801817a:	4291      	cmp	r1, r2
 801817c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018180:	d952      	bls.n	8018228 <__ieee754_expf+0xf4>
 8018182:	4a45      	ldr	r2, [pc, #276]	; (8018298 <__ieee754_expf+0x164>)
 8018184:	4291      	cmp	r1, r2
 8018186:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801818a:	d834      	bhi.n	80181f6 <__ieee754_expf+0xc2>
 801818c:	4943      	ldr	r1, [pc, #268]	; (801829c <__ieee754_expf+0x168>)
 801818e:	4411      	add	r1, r2
 8018190:	ed91 7a00 	vldr	s14, [r1]
 8018194:	4942      	ldr	r1, [pc, #264]	; (80182a0 <__ieee754_expf+0x16c>)
 8018196:	440a      	add	r2, r1
 8018198:	edd2 7a00 	vldr	s15, [r2]
 801819c:	ee30 7a47 	vsub.f32	s14, s0, s14
 80181a0:	f1c3 0201 	rsb	r2, r3, #1
 80181a4:	1ad2      	subs	r2, r2, r3
 80181a6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80181aa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80181ae:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80182a4 <__ieee754_expf+0x170>
 80181b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80182a8 <__ieee754_expf+0x174>
 80181b6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80181ba:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80182ac <__ieee754_expf+0x178>
 80181be:	eea6 5a86 	vfma.f32	s10, s13, s12
 80181c2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80182b0 <__ieee754_expf+0x17c>
 80181c6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80181ca:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80182b4 <__ieee754_expf+0x180>
 80181ce:	eea6 5a86 	vfma.f32	s10, s13, s12
 80181d2:	eef0 6a40 	vmov.f32	s13, s0
 80181d6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80181da:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80181de:	ee20 5a26 	vmul.f32	s10, s0, s13
 80181e2:	bb92      	cbnz	r2, 801824a <__ieee754_expf+0x116>
 80181e4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80181e8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80181ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80181f0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80181f4:	4770      	bx	lr
 80181f6:	4b30      	ldr	r3, [pc, #192]	; (80182b8 <__ieee754_expf+0x184>)
 80181f8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80182bc <__ieee754_expf+0x188>
 80181fc:	eddf 6a30 	vldr	s13, [pc, #192]	; 80182c0 <__ieee754_expf+0x18c>
 8018200:	4413      	add	r3, r2
 8018202:	edd3 7a00 	vldr	s15, [r3]
 8018206:	eee0 7a07 	vfma.f32	s15, s0, s14
 801820a:	eeb0 7a40 	vmov.f32	s14, s0
 801820e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018212:	ee17 2a90 	vmov	r2, s15
 8018216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801821a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801821e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80182c4 <__ieee754_expf+0x190>
 8018222:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018226:	e7be      	b.n	80181a6 <__ieee754_expf+0x72>
 8018228:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801822c:	d20b      	bcs.n	8018246 <__ieee754_expf+0x112>
 801822e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80182c8 <__ieee754_expf+0x194>
 8018232:	ee70 6a26 	vadd.f32	s13, s0, s13
 8018236:	eef4 6ae5 	vcmpe.f32	s13, s11
 801823a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801823e:	dd02      	ble.n	8018246 <__ieee754_expf+0x112>
 8018240:	ee30 0a25 	vadd.f32	s0, s0, s11
 8018244:	4770      	bx	lr
 8018246:	2200      	movs	r2, #0
 8018248:	e7af      	b.n	80181aa <__ieee754_expf+0x76>
 801824a:	ee76 6a66 	vsub.f32	s13, s12, s13
 801824e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8018252:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8018256:	bfb8      	it	lt
 8018258:	3264      	addlt	r2, #100	; 0x64
 801825a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801825e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8018262:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8018266:	ee17 3a90 	vmov	r3, s15
 801826a:	bfab      	itete	ge
 801826c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8018270:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018274:	ee00 3a10 	vmovge	s0, r3
 8018278:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80182cc <__ieee754_expf+0x198>
 801827c:	bfbc      	itt	lt
 801827e:	ee00 3a10 	vmovlt	s0, r3
 8018282:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8018286:	4770      	bx	lr
 8018288:	00000000 	.word	0x00000000
 801828c:	42b17217 	.word	0x42b17217
 8018290:	42cff1b5 	.word	0x42cff1b5
 8018294:	3eb17218 	.word	0x3eb17218
 8018298:	3f851591 	.word	0x3f851591
 801829c:	080195b0 	.word	0x080195b0
 80182a0:	080195b8 	.word	0x080195b8
 80182a4:	3331bb4c 	.word	0x3331bb4c
 80182a8:	b5ddea0e 	.word	0xb5ddea0e
 80182ac:	388ab355 	.word	0x388ab355
 80182b0:	bb360b61 	.word	0xbb360b61
 80182b4:	3e2aaaab 	.word	0x3e2aaaab
 80182b8:	080195a8 	.word	0x080195a8
 80182bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80182c0:	3f317180 	.word	0x3f317180
 80182c4:	3717f7d1 	.word	0x3717f7d1
 80182c8:	7149f2ca 	.word	0x7149f2ca
 80182cc:	0d800000 	.word	0x0d800000

080182d0 <__ieee754_powf>:
 80182d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182d4:	ee10 4a90 	vmov	r4, s1
 80182d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80182dc:	ed2d 8b02 	vpush	{d8}
 80182e0:	ee10 6a10 	vmov	r6, s0
 80182e4:	eeb0 8a40 	vmov.f32	s16, s0
 80182e8:	eef0 8a60 	vmov.f32	s17, s1
 80182ec:	d10c      	bne.n	8018308 <__ieee754_powf+0x38>
 80182ee:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80182f2:	0076      	lsls	r6, r6, #1
 80182f4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80182f8:	f240 8296 	bls.w	8018828 <__ieee754_powf+0x558>
 80182fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018300:	ecbd 8b02 	vpop	{d8}
 8018304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018308:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801830c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8018310:	dcf4      	bgt.n	80182fc <__ieee754_powf+0x2c>
 8018312:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018316:	dd08      	ble.n	801832a <__ieee754_powf+0x5a>
 8018318:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 801831c:	d1ee      	bne.n	80182fc <__ieee754_powf+0x2c>
 801831e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8018322:	0064      	lsls	r4, r4, #1
 8018324:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8018328:	e7e6      	b.n	80182f8 <__ieee754_powf+0x28>
 801832a:	2e00      	cmp	r6, #0
 801832c:	da20      	bge.n	8018370 <__ieee754_powf+0xa0>
 801832e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8018332:	da2d      	bge.n	8018390 <__ieee754_powf+0xc0>
 8018334:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018338:	f2c0 827f 	blt.w	801883a <__ieee754_powf+0x56a>
 801833c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8018340:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018344:	fa48 f703 	asr.w	r7, r8, r3
 8018348:	fa07 f303 	lsl.w	r3, r7, r3
 801834c:	4543      	cmp	r3, r8
 801834e:	f040 8274 	bne.w	801883a <__ieee754_powf+0x56a>
 8018352:	f007 0701 	and.w	r7, r7, #1
 8018356:	f1c7 0702 	rsb	r7, r7, #2
 801835a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801835e:	d11f      	bne.n	80183a0 <__ieee754_powf+0xd0>
 8018360:	2c00      	cmp	r4, #0
 8018362:	f280 8267 	bge.w	8018834 <__ieee754_powf+0x564>
 8018366:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801836a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801836e:	e7c7      	b.n	8018300 <__ieee754_powf+0x30>
 8018370:	2700      	movs	r7, #0
 8018372:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018376:	d1f0      	bne.n	801835a <__ieee754_powf+0x8a>
 8018378:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801837c:	f000 8254 	beq.w	8018828 <__ieee754_powf+0x558>
 8018380:	dd08      	ble.n	8018394 <__ieee754_powf+0xc4>
 8018382:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801868c <__ieee754_powf+0x3bc>
 8018386:	2c00      	cmp	r4, #0
 8018388:	bfa8      	it	ge
 801838a:	eeb0 0a68 	vmovge.f32	s0, s17
 801838e:	e7b7      	b.n	8018300 <__ieee754_powf+0x30>
 8018390:	2702      	movs	r7, #2
 8018392:	e7ee      	b.n	8018372 <__ieee754_powf+0xa2>
 8018394:	2c00      	cmp	r4, #0
 8018396:	f280 824a 	bge.w	801882e <__ieee754_powf+0x55e>
 801839a:	eeb1 0a68 	vneg.f32	s0, s17
 801839e:	e7af      	b.n	8018300 <__ieee754_powf+0x30>
 80183a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80183a4:	d102      	bne.n	80183ac <__ieee754_powf+0xdc>
 80183a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80183aa:	e7a9      	b.n	8018300 <__ieee754_powf+0x30>
 80183ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80183b0:	eeb0 0a48 	vmov.f32	s0, s16
 80183b4:	d107      	bne.n	80183c6 <__ieee754_powf+0xf6>
 80183b6:	2e00      	cmp	r6, #0
 80183b8:	db05      	blt.n	80183c6 <__ieee754_powf+0xf6>
 80183ba:	ecbd 8b02 	vpop	{d8}
 80183be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183c2:	f000 ba53 	b.w	801886c <__ieee754_sqrtf>
 80183c6:	f000 fb93 	bl	8018af0 <fabsf>
 80183ca:	b125      	cbz	r5, 80183d6 <__ieee754_powf+0x106>
 80183cc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80183d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80183d4:	d116      	bne.n	8018404 <__ieee754_powf+0x134>
 80183d6:	2c00      	cmp	r4, #0
 80183d8:	bfbc      	itt	lt
 80183da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80183de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80183e2:	2e00      	cmp	r6, #0
 80183e4:	da8c      	bge.n	8018300 <__ieee754_powf+0x30>
 80183e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80183ea:	ea55 0307 	orrs.w	r3, r5, r7
 80183ee:	d104      	bne.n	80183fa <__ieee754_powf+0x12a>
 80183f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80183f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80183f8:	e782      	b.n	8018300 <__ieee754_powf+0x30>
 80183fa:	2f01      	cmp	r7, #1
 80183fc:	d180      	bne.n	8018300 <__ieee754_powf+0x30>
 80183fe:	eeb1 0a40 	vneg.f32	s0, s0
 8018402:	e77d      	b.n	8018300 <__ieee754_powf+0x30>
 8018404:	0ff0      	lsrs	r0, r6, #31
 8018406:	3801      	subs	r0, #1
 8018408:	ea57 0300 	orrs.w	r3, r7, r0
 801840c:	d104      	bne.n	8018418 <__ieee754_powf+0x148>
 801840e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018412:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018416:	e773      	b.n	8018300 <__ieee754_powf+0x30>
 8018418:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801841c:	dd74      	ble.n	8018508 <__ieee754_powf+0x238>
 801841e:	4b9c      	ldr	r3, [pc, #624]	; (8018690 <__ieee754_powf+0x3c0>)
 8018420:	429d      	cmp	r5, r3
 8018422:	dc08      	bgt.n	8018436 <__ieee754_powf+0x166>
 8018424:	2c00      	cmp	r4, #0
 8018426:	da0b      	bge.n	8018440 <__ieee754_powf+0x170>
 8018428:	2000      	movs	r0, #0
 801842a:	ecbd 8b02 	vpop	{d8}
 801842e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018432:	f000 ba3b 	b.w	80188ac <__math_oflowf>
 8018436:	4b97      	ldr	r3, [pc, #604]	; (8018694 <__ieee754_powf+0x3c4>)
 8018438:	429d      	cmp	r5, r3
 801843a:	dd08      	ble.n	801844e <__ieee754_powf+0x17e>
 801843c:	2c00      	cmp	r4, #0
 801843e:	dcf3      	bgt.n	8018428 <__ieee754_powf+0x158>
 8018440:	2000      	movs	r0, #0
 8018442:	ecbd 8b02 	vpop	{d8}
 8018446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801844a:	f000 ba29 	b.w	80188a0 <__math_uflowf>
 801844e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018452:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018456:	eddf 6a90 	vldr	s13, [pc, #576]	; 8018698 <__ieee754_powf+0x3c8>
 801845a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801845e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018462:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018466:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801846a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018472:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801869c <__ieee754_powf+0x3cc>
 8018476:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801847a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80186a0 <__ieee754_powf+0x3d0>
 801847e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018482:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80186a4 <__ieee754_powf+0x3d4>
 8018486:	eef0 6a67 	vmov.f32	s13, s15
 801848a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801848e:	ee16 3a90 	vmov	r3, s13
 8018492:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018496:	f023 030f 	bic.w	r3, r3, #15
 801849a:	ee00 3a90 	vmov	s1, r3
 801849e:	eee0 0a47 	vfms.f32	s1, s0, s14
 80184a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80184a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80184aa:	f024 040f 	bic.w	r4, r4, #15
 80184ae:	ee07 4a10 	vmov	s14, r4
 80184b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80184b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80184ba:	ee07 3a90 	vmov	s15, r3
 80184be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80184c2:	3f01      	subs	r7, #1
 80184c4:	ea57 0200 	orrs.w	r2, r7, r0
 80184c8:	ee07 4a10 	vmov	s14, r4
 80184cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80184d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80184d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80184d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80184dc:	ee17 4a10 	vmov	r4, s14
 80184e0:	bf08      	it	eq
 80184e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80184e6:	2c00      	cmp	r4, #0
 80184e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80184ec:	f340 817e 	ble.w	80187ec <__ieee754_powf+0x51c>
 80184f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80184f4:	f340 80f8 	ble.w	80186e8 <__ieee754_powf+0x418>
 80184f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80184fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018500:	bf4c      	ite	mi
 8018502:	2001      	movmi	r0, #1
 8018504:	2000      	movpl	r0, #0
 8018506:	e790      	b.n	801842a <__ieee754_powf+0x15a>
 8018508:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801850c:	bf01      	itttt	eq
 801850e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80186a8 <__ieee754_powf+0x3d8>
 8018512:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018516:	f06f 0217 	mvneq.w	r2, #23
 801851a:	ee17 5a90 	vmoveq	r5, s15
 801851e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018522:	bf18      	it	ne
 8018524:	2200      	movne	r2, #0
 8018526:	3b7f      	subs	r3, #127	; 0x7f
 8018528:	4413      	add	r3, r2
 801852a:	4a60      	ldr	r2, [pc, #384]	; (80186ac <__ieee754_powf+0x3dc>)
 801852c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8018530:	4295      	cmp	r5, r2
 8018532:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8018536:	dd06      	ble.n	8018546 <__ieee754_powf+0x276>
 8018538:	4a5d      	ldr	r2, [pc, #372]	; (80186b0 <__ieee754_powf+0x3e0>)
 801853a:	4295      	cmp	r5, r2
 801853c:	f340 80a4 	ble.w	8018688 <__ieee754_powf+0x3b8>
 8018540:	3301      	adds	r3, #1
 8018542:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018546:	2500      	movs	r5, #0
 8018548:	4a5a      	ldr	r2, [pc, #360]	; (80186b4 <__ieee754_powf+0x3e4>)
 801854a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801854e:	ee07 1a90 	vmov	s15, r1
 8018552:	ed92 7a00 	vldr	s14, [r2]
 8018556:	4a58      	ldr	r2, [pc, #352]	; (80186b8 <__ieee754_powf+0x3e8>)
 8018558:	ee37 6a27 	vadd.f32	s12, s14, s15
 801855c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018560:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018564:	1049      	asrs	r1, r1, #1
 8018566:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801856a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801856e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8018572:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8018576:	ee06 1a10 	vmov	s12, r1
 801857a:	ee65 4a26 	vmul.f32	s9, s10, s13
 801857e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8018582:	ee14 6a90 	vmov	r6, s9
 8018586:	4016      	ands	r6, r2
 8018588:	ee05 6a90 	vmov	s11, r6
 801858c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8018590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018594:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80186bc <__ieee754_powf+0x3ec>
 8018598:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801859c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80185a0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80185a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80186c0 <__ieee754_powf+0x3f0>
 80185a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80185ac:	eddf 6a45 	vldr	s13, [pc, #276]	; 80186c4 <__ieee754_powf+0x3f4>
 80185b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80185b4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8018698 <__ieee754_powf+0x3c8>
 80185b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80185bc:	eddf 6a42 	vldr	s13, [pc, #264]	; 80186c8 <__ieee754_powf+0x3f8>
 80185c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80185c4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80186cc <__ieee754_powf+0x3fc>
 80185c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80185cc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80185d0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80185d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80185d8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80185dc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80185e0:	eef0 7a45 	vmov.f32	s15, s10
 80185e4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80185e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80185ec:	ee17 1a90 	vmov	r1, s15
 80185f0:	4011      	ands	r1, r2
 80185f2:	ee07 1a90 	vmov	s15, r1
 80185f6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80185fa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80185fe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018602:	ee27 7a24 	vmul.f32	s14, s14, s9
 8018606:	eea6 7a27 	vfma.f32	s14, s12, s15
 801860a:	eeb0 6a47 	vmov.f32	s12, s14
 801860e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018612:	ee16 1a10 	vmov	r1, s12
 8018616:	4011      	ands	r1, r2
 8018618:	ee06 1a90 	vmov	s13, r1
 801861c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8018620:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80186d0 <__ieee754_powf+0x400>
 8018624:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80186d4 <__ieee754_powf+0x404>
 8018628:	ee37 7a66 	vsub.f32	s14, s14, s13
 801862c:	ee06 1a10 	vmov	s12, r1
 8018630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018634:	eddf 7a28 	vldr	s15, [pc, #160]	; 80186d8 <__ieee754_powf+0x408>
 8018638:	4928      	ldr	r1, [pc, #160]	; (80186dc <__ieee754_powf+0x40c>)
 801863a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801863e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8018642:	edd1 7a00 	vldr	s15, [r1]
 8018646:	ee37 7a27 	vadd.f32	s14, s14, s15
 801864a:	ee07 3a90 	vmov	s15, r3
 801864e:	4b24      	ldr	r3, [pc, #144]	; (80186e0 <__ieee754_powf+0x410>)
 8018650:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018654:	eef0 7a47 	vmov.f32	s15, s14
 8018658:	eee6 7a25 	vfma.f32	s15, s12, s11
 801865c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8018660:	edd5 0a00 	vldr	s1, [r5]
 8018664:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801866c:	ee17 3a90 	vmov	r3, s15
 8018670:	4013      	ands	r3, r2
 8018672:	ee07 3a90 	vmov	s15, r3
 8018676:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801867a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801867e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018682:	ee77 7a66 	vsub.f32	s15, s14, s13
 8018686:	e70e      	b.n	80184a6 <__ieee754_powf+0x1d6>
 8018688:	2501      	movs	r5, #1
 801868a:	e75d      	b.n	8018548 <__ieee754_powf+0x278>
 801868c:	00000000 	.word	0x00000000
 8018690:	3f7ffff3 	.word	0x3f7ffff3
 8018694:	3f800007 	.word	0x3f800007
 8018698:	3eaaaaab 	.word	0x3eaaaaab
 801869c:	3fb8aa3b 	.word	0x3fb8aa3b
 80186a0:	36eca570 	.word	0x36eca570
 80186a4:	3fb8aa00 	.word	0x3fb8aa00
 80186a8:	4b800000 	.word	0x4b800000
 80186ac:	001cc471 	.word	0x001cc471
 80186b0:	005db3d6 	.word	0x005db3d6
 80186b4:	080195c0 	.word	0x080195c0
 80186b8:	fffff000 	.word	0xfffff000
 80186bc:	3e6c3255 	.word	0x3e6c3255
 80186c0:	3e53f142 	.word	0x3e53f142
 80186c4:	3e8ba305 	.word	0x3e8ba305
 80186c8:	3edb6db7 	.word	0x3edb6db7
 80186cc:	3f19999a 	.word	0x3f19999a
 80186d0:	3f76384f 	.word	0x3f76384f
 80186d4:	3f763800 	.word	0x3f763800
 80186d8:	369dc3a0 	.word	0x369dc3a0
 80186dc:	080195d0 	.word	0x080195d0
 80186e0:	080195c8 	.word	0x080195c8
 80186e4:	3338aa3c 	.word	0x3338aa3c
 80186e8:	f040 8095 	bne.w	8018816 <__ieee754_powf+0x546>
 80186ec:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80186e4 <__ieee754_powf+0x414>
 80186f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80186f4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80186f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80186fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018700:	f73f aefa 	bgt.w	80184f8 <__ieee754_powf+0x228>
 8018704:	15db      	asrs	r3, r3, #23
 8018706:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801870a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801870e:	4103      	asrs	r3, r0
 8018710:	4423      	add	r3, r4
 8018712:	494b      	ldr	r1, [pc, #300]	; (8018840 <__ieee754_powf+0x570>)
 8018714:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018718:	3a7f      	subs	r2, #127	; 0x7f
 801871a:	4111      	asrs	r1, r2
 801871c:	ea23 0101 	bic.w	r1, r3, r1
 8018720:	ee07 1a10 	vmov	s14, r1
 8018724:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8018728:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801872c:	f1c2 0217 	rsb	r2, r2, #23
 8018730:	4110      	asrs	r0, r2
 8018732:	2c00      	cmp	r4, #0
 8018734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018738:	bfb8      	it	lt
 801873a:	4240      	neglt	r0, r0
 801873c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8018740:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8018844 <__ieee754_powf+0x574>
 8018744:	eddf 6a40 	vldr	s13, [pc, #256]	; 8018848 <__ieee754_powf+0x578>
 8018748:	ee17 3a10 	vmov	r3, s14
 801874c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018750:	f023 030f 	bic.w	r3, r3, #15
 8018754:	ee07 3a10 	vmov	s14, r3
 8018758:	ee77 7a67 	vsub.f32	s15, s14, s15
 801875c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8018760:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018764:	eddf 7a39 	vldr	s15, [pc, #228]	; 801884c <__ieee754_powf+0x57c>
 8018768:	eea0 0aa7 	vfma.f32	s0, s1, s15
 801876c:	eef0 7a40 	vmov.f32	s15, s0
 8018770:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018774:	eeb0 6a67 	vmov.f32	s12, s15
 8018778:	eea7 6a66 	vfms.f32	s12, s14, s13
 801877c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8018780:	ee30 0a46 	vsub.f32	s0, s0, s12
 8018784:	eddf 6a32 	vldr	s13, [pc, #200]	; 8018850 <__ieee754_powf+0x580>
 8018788:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8018854 <__ieee754_powf+0x584>
 801878c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8018790:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8018858 <__ieee754_powf+0x588>
 8018794:	eea6 6a87 	vfma.f32	s12, s13, s14
 8018798:	eddf 6a30 	vldr	s13, [pc, #192]	; 801885c <__ieee754_powf+0x58c>
 801879c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80187a0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8018860 <__ieee754_powf+0x590>
 80187a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80187a8:	eef0 6a67 	vmov.f32	s13, s15
 80187ac:	eee6 6a47 	vfms.f32	s13, s12, s14
 80187b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80187b4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80187b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80187bc:	eea7 0a80 	vfma.f32	s0, s15, s0
 80187c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80187c4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80187c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80187cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80187d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80187d4:	ee10 3a10 	vmov	r3, s0
 80187d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80187dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80187e0:	da1f      	bge.n	8018822 <__ieee754_powf+0x552>
 80187e2:	f000 f999 	bl	8018b18 <scalbnf>
 80187e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80187ea:	e589      	b.n	8018300 <__ieee754_powf+0x30>
 80187ec:	4a1d      	ldr	r2, [pc, #116]	; (8018864 <__ieee754_powf+0x594>)
 80187ee:	4293      	cmp	r3, r2
 80187f0:	dd07      	ble.n	8018802 <__ieee754_powf+0x532>
 80187f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80187f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187fa:	bf4c      	ite	mi
 80187fc:	2001      	movmi	r0, #1
 80187fe:	2000      	movpl	r0, #0
 8018800:	e61f      	b.n	8018442 <__ieee754_powf+0x172>
 8018802:	d108      	bne.n	8018816 <__ieee754_powf+0x546>
 8018804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018808:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801880c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018810:	f6ff af78 	blt.w	8018704 <__ieee754_powf+0x434>
 8018814:	e7ed      	b.n	80187f2 <__ieee754_powf+0x522>
 8018816:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801881a:	f73f af73 	bgt.w	8018704 <__ieee754_powf+0x434>
 801881e:	2000      	movs	r0, #0
 8018820:	e78c      	b.n	801873c <__ieee754_powf+0x46c>
 8018822:	ee00 3a10 	vmov	s0, r3
 8018826:	e7de      	b.n	80187e6 <__ieee754_powf+0x516>
 8018828:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801882c:	e568      	b.n	8018300 <__ieee754_powf+0x30>
 801882e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8018868 <__ieee754_powf+0x598>
 8018832:	e565      	b.n	8018300 <__ieee754_powf+0x30>
 8018834:	eeb0 0a48 	vmov.f32	s0, s16
 8018838:	e562      	b.n	8018300 <__ieee754_powf+0x30>
 801883a:	2700      	movs	r7, #0
 801883c:	e58d      	b.n	801835a <__ieee754_powf+0x8a>
 801883e:	bf00      	nop
 8018840:	007fffff 	.word	0x007fffff
 8018844:	35bfbe8c 	.word	0x35bfbe8c
 8018848:	3f317200 	.word	0x3f317200
 801884c:	3f317218 	.word	0x3f317218
 8018850:	b5ddea0e 	.word	0xb5ddea0e
 8018854:	3331bb4c 	.word	0x3331bb4c
 8018858:	388ab355 	.word	0x388ab355
 801885c:	bb360b61 	.word	0xbb360b61
 8018860:	3e2aaaab 	.word	0x3e2aaaab
 8018864:	43160000 	.word	0x43160000
 8018868:	00000000 	.word	0x00000000

0801886c <__ieee754_sqrtf>:
 801886c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018870:	4770      	bx	lr

08018872 <with_errnof>:
 8018872:	b513      	push	{r0, r1, r4, lr}
 8018874:	4604      	mov	r4, r0
 8018876:	ed8d 0a01 	vstr	s0, [sp, #4]
 801887a:	f7fe f879 	bl	8016970 <__errno>
 801887e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018882:	6004      	str	r4, [r0, #0]
 8018884:	b002      	add	sp, #8
 8018886:	bd10      	pop	{r4, pc}

08018888 <xflowf>:
 8018888:	b130      	cbz	r0, 8018898 <xflowf+0x10>
 801888a:	eef1 7a40 	vneg.f32	s15, s0
 801888e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018892:	2022      	movs	r0, #34	; 0x22
 8018894:	f7ff bfed 	b.w	8018872 <with_errnof>
 8018898:	eef0 7a40 	vmov.f32	s15, s0
 801889c:	e7f7      	b.n	801888e <xflowf+0x6>
	...

080188a0 <__math_uflowf>:
 80188a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80188a8 <__math_uflowf+0x8>
 80188a4:	f7ff bff0 	b.w	8018888 <xflowf>
 80188a8:	10000000 	.word	0x10000000

080188ac <__math_oflowf>:
 80188ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80188b4 <__math_oflowf+0x8>
 80188b0:	f7ff bfea 	b.w	8018888 <xflowf>
 80188b4:	70000000 	.word	0x70000000

080188b8 <expm1f>:
 80188b8:	ee10 2a10 	vmov	r2, s0
 80188bc:	497d      	ldr	r1, [pc, #500]	; (8018ab4 <expm1f+0x1fc>)
 80188be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80188c2:	428b      	cmp	r3, r1
 80188c4:	d921      	bls.n	801890a <expm1f+0x52>
 80188c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80188ca:	d902      	bls.n	80188d2 <expm1f+0x1a>
 80188cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80188d0:	4770      	bx	lr
 80188d2:	d106      	bne.n	80188e2 <expm1f+0x2a>
 80188d4:	2a00      	cmp	r2, #0
 80188d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80188da:	bfb8      	it	lt
 80188dc:	eeb0 0a67 	vmovlt.f32	s0, s15
 80188e0:	4770      	bx	lr
 80188e2:	2a00      	cmp	r2, #0
 80188e4:	db05      	blt.n	80188f2 <expm1f+0x3a>
 80188e6:	4974      	ldr	r1, [pc, #464]	; (8018ab8 <expm1f+0x200>)
 80188e8:	428b      	cmp	r3, r1
 80188ea:	d95c      	bls.n	80189a6 <expm1f+0xee>
 80188ec:	2000      	movs	r0, #0
 80188ee:	f7ff bfdd 	b.w	80188ac <__math_oflowf>
 80188f2:	eddf 7a72 	vldr	s15, [pc, #456]	; 8018abc <expm1f+0x204>
 80188f6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80188fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80188fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018902:	d550      	bpl.n	80189a6 <expm1f+0xee>
 8018904:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018908:	4770      	bx	lr
 801890a:	496d      	ldr	r1, [pc, #436]	; (8018ac0 <expm1f+0x208>)
 801890c:	428b      	cmp	r3, r1
 801890e:	d967      	bls.n	80189e0 <expm1f+0x128>
 8018910:	496c      	ldr	r1, [pc, #432]	; (8018ac4 <expm1f+0x20c>)
 8018912:	428b      	cmp	r3, r1
 8018914:	d847      	bhi.n	80189a6 <expm1f+0xee>
 8018916:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8018ac8 <expm1f+0x210>
 801891a:	2a00      	cmp	r2, #0
 801891c:	bfa7      	ittee	ge
 801891e:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8018922:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 8018acc <expm1f+0x214>
 8018926:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 8018ad0 <expm1f+0x218>
 801892a:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801892e:	bfac      	ite	ge
 8018930:	2301      	movge	r3, #1
 8018932:	f04f 33ff 	movlt.w	r3, #4294967295
 8018936:	ee37 0a67 	vsub.f32	s0, s14, s15
 801893a:	ee37 7a40 	vsub.f32	s14, s14, s0
 801893e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018942:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8018946:	ee20 4a25 	vmul.f32	s8, s0, s11
 801894a:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8018ad4 <expm1f+0x21c>
 801894e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8018ad8 <expm1f+0x220>
 8018952:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8018adc <expm1f+0x224>
 8018956:	ee20 7a04 	vmul.f32	s14, s0, s8
 801895a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801895e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8018962:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8018ae0 <expm1f+0x228>
 8018966:	eea6 6a87 	vfma.f32	s12, s13, s14
 801896a:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8018ae4 <expm1f+0x22c>
 801896e:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018972:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018976:	eea6 5a87 	vfma.f32	s10, s13, s14
 801897a:	eef0 6a46 	vmov.f32	s13, s12
 801897e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8018982:	eee4 4a66 	vfms.f32	s9, s8, s13
 8018986:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801898a:	eea0 4a64 	vfms.f32	s8, s0, s9
 801898e:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8018992:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8018996:	ee66 6a87 	vmul.f32	s13, s13, s14
 801899a:	bb7b      	cbnz	r3, 80189fc <expm1f+0x144>
 801899c:	eef0 7a47 	vmov.f32	s15, s14
 80189a0:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80189a4:	e025      	b.n	80189f2 <expm1f+0x13a>
 80189a6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80189aa:	2a00      	cmp	r2, #0
 80189ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80189b0:	bfb8      	it	lt
 80189b2:	eef0 7a47 	vmovlt.f32	s15, s14
 80189b6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8018ae8 <expm1f+0x230>
 80189ba:	eddf 6a43 	vldr	s13, [pc, #268]	; 8018ac8 <expm1f+0x210>
 80189be:	ee40 7a07 	vmla.f32	s15, s0, s14
 80189c2:	eeb0 7a40 	vmov.f32	s14, s0
 80189c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80189ca:	ee17 3a90 	vmov	r3, s15
 80189ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189d2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80189d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8018acc <expm1f+0x214>
 80189da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80189de:	e7aa      	b.n	8018936 <expm1f+0x7e>
 80189e0:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80189e4:	d208      	bcs.n	80189f8 <expm1f+0x140>
 80189e6:	eddf 7a41 	vldr	s15, [pc, #260]	; 8018aec <expm1f+0x234>
 80189ea:	ee70 7a27 	vadd.f32	s15, s0, s15
 80189ee:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80189f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80189f6:	4770      	bx	lr
 80189f8:	2300      	movs	r3, #0
 80189fa:	e7a2      	b.n	8018942 <expm1f+0x8a>
 80189fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8018a00:	1c5a      	adds	r2, r3, #1
 8018a02:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8018a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a0a:	d106      	bne.n	8018a1a <expm1f+0x162>
 8018a0c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018a10:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018a14:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8018a18:	4770      	bx	lr
 8018a1a:	2b01      	cmp	r3, #1
 8018a1c:	d118      	bne.n	8018a50 <expm1f+0x198>
 8018a1e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8018a22:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2a:	bf5b      	ittet	pl
 8018a2c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8018a30:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8018a34:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8018a38:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8018a3c:	bf43      	ittte	mi
 8018a3e:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8018a42:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8018a46:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8018a4a:	eeb0 0a46 	vmovpl.f32	s0, s12
 8018a4e:	4770      	bx	lr
 8018a50:	1c5a      	adds	r2, r3, #1
 8018a52:	2a39      	cmp	r2, #57	; 0x39
 8018a54:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8018a58:	d90b      	bls.n	8018a72 <expm1f+0x1ba>
 8018a5a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018a5e:	ee36 0a40 	vsub.f32	s0, s12, s0
 8018a62:	ee10 3a10 	vmov	r3, s0
 8018a66:	440b      	add	r3, r1
 8018a68:	ee00 3a10 	vmov	s0, r3
 8018a6c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8018a70:	4770      	bx	lr
 8018a72:	2b16      	cmp	r3, #22
 8018a74:	dc11      	bgt.n	8018a9a <expm1f+0x1e2>
 8018a76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018a7a:	fa42 f303 	asr.w	r3, r2, r3
 8018a7e:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8018a82:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018a86:	ee07 3a90 	vmov	s15, r3
 8018a8a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018a8e:	ee10 3a10 	vmov	r3, s0
 8018a92:	440b      	add	r3, r1
 8018a94:	ee00 3a10 	vmov	s0, r3
 8018a98:	4770      	bx	lr
 8018a9a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8018a9e:	05db      	lsls	r3, r3, #23
 8018aa0:	ee07 3a10 	vmov	s14, r3
 8018aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018aa8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018aac:	ee37 0a86 	vadd.f32	s0, s15, s12
 8018ab0:	e7ed      	b.n	8018a8e <expm1f+0x1d6>
 8018ab2:	bf00      	nop
 8018ab4:	4195b843 	.word	0x4195b843
 8018ab8:	42b17217 	.word	0x42b17217
 8018abc:	0da24260 	.word	0x0da24260
 8018ac0:	3eb17218 	.word	0x3eb17218
 8018ac4:	3f851591 	.word	0x3f851591
 8018ac8:	3f317180 	.word	0x3f317180
 8018acc:	3717f7d1 	.word	0x3717f7d1
 8018ad0:	b717f7d1 	.word	0xb717f7d1
 8018ad4:	b457edbb 	.word	0xb457edbb
 8018ad8:	36867e54 	.word	0x36867e54
 8018adc:	bd088889 	.word	0xbd088889
 8018ae0:	b8a670cd 	.word	0xb8a670cd
 8018ae4:	3ad00d01 	.word	0x3ad00d01
 8018ae8:	3fb8aa3b 	.word	0x3fb8aa3b
 8018aec:	7149f2ca 	.word	0x7149f2ca

08018af0 <fabsf>:
 8018af0:	ee10 3a10 	vmov	r3, s0
 8018af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018af8:	ee00 3a10 	vmov	s0, r3
 8018afc:	4770      	bx	lr

08018afe <finitef>:
 8018afe:	b082      	sub	sp, #8
 8018b00:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018b04:	9801      	ldr	r0, [sp, #4]
 8018b06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018b0a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8018b0e:	bfac      	ite	ge
 8018b10:	2000      	movge	r0, #0
 8018b12:	2001      	movlt	r0, #1
 8018b14:	b002      	add	sp, #8
 8018b16:	4770      	bx	lr

08018b18 <scalbnf>:
 8018b18:	ee10 3a10 	vmov	r3, s0
 8018b1c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018b20:	d025      	beq.n	8018b6e <scalbnf+0x56>
 8018b22:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018b26:	d302      	bcc.n	8018b2e <scalbnf+0x16>
 8018b28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018b2c:	4770      	bx	lr
 8018b2e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018b32:	d122      	bne.n	8018b7a <scalbnf+0x62>
 8018b34:	4b2a      	ldr	r3, [pc, #168]	; (8018be0 <scalbnf+0xc8>)
 8018b36:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8018be4 <scalbnf+0xcc>
 8018b3a:	4298      	cmp	r0, r3
 8018b3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018b40:	db16      	blt.n	8018b70 <scalbnf+0x58>
 8018b42:	ee10 3a10 	vmov	r3, s0
 8018b46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018b4a:	3a19      	subs	r2, #25
 8018b4c:	4402      	add	r2, r0
 8018b4e:	2afe      	cmp	r2, #254	; 0xfe
 8018b50:	dd15      	ble.n	8018b7e <scalbnf+0x66>
 8018b52:	ee10 3a10 	vmov	r3, s0
 8018b56:	eddf 7a24 	vldr	s15, [pc, #144]	; 8018be8 <scalbnf+0xd0>
 8018b5a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8018bec <scalbnf+0xd4>
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	eeb0 7a67 	vmov.f32	s14, s15
 8018b64:	bfb8      	it	lt
 8018b66:	eef0 7a66 	vmovlt.f32	s15, s13
 8018b6a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8018b6e:	4770      	bx	lr
 8018b70:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018bf0 <scalbnf+0xd8>
 8018b74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018b78:	4770      	bx	lr
 8018b7a:	0dd2      	lsrs	r2, r2, #23
 8018b7c:	e7e6      	b.n	8018b4c <scalbnf+0x34>
 8018b7e:	2a00      	cmp	r2, #0
 8018b80:	dd06      	ble.n	8018b90 <scalbnf+0x78>
 8018b82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b86:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8018b8a:	ee00 3a10 	vmov	s0, r3
 8018b8e:	4770      	bx	lr
 8018b90:	f112 0f16 	cmn.w	r2, #22
 8018b94:	da1a      	bge.n	8018bcc <scalbnf+0xb4>
 8018b96:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018b9a:	4298      	cmp	r0, r3
 8018b9c:	ee10 3a10 	vmov	r3, s0
 8018ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018ba4:	dd0a      	ble.n	8018bbc <scalbnf+0xa4>
 8018ba6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8018be8 <scalbnf+0xd0>
 8018baa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8018bec <scalbnf+0xd4>
 8018bae:	eef0 7a40 	vmov.f32	s15, s0
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	bf18      	it	ne
 8018bb6:	eeb0 0a47 	vmovne.f32	s0, s14
 8018bba:	e7db      	b.n	8018b74 <scalbnf+0x5c>
 8018bbc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8018bf0 <scalbnf+0xd8>
 8018bc0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8018bf4 <scalbnf+0xdc>
 8018bc4:	eef0 7a40 	vmov.f32	s15, s0
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	e7f3      	b.n	8018bb4 <scalbnf+0x9c>
 8018bcc:	3219      	adds	r2, #25
 8018bce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018bd2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8018bd6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018bf8 <scalbnf+0xe0>
 8018bda:	ee07 3a10 	vmov	s14, r3
 8018bde:	e7c4      	b.n	8018b6a <scalbnf+0x52>
 8018be0:	ffff3cb0 	.word	0xffff3cb0
 8018be4:	4c000000 	.word	0x4c000000
 8018be8:	7149f2ca 	.word	0x7149f2ca
 8018bec:	f149f2ca 	.word	0xf149f2ca
 8018bf0:	0da24260 	.word	0x0da24260
 8018bf4:	8da24260 	.word	0x8da24260
 8018bf8:	33000000 	.word	0x33000000

08018bfc <_close>:
 8018bfc:	4b02      	ldr	r3, [pc, #8]	; (8018c08 <_close+0xc>)
 8018bfe:	2258      	movs	r2, #88	; 0x58
 8018c00:	601a      	str	r2, [r3, #0]
 8018c02:	f04f 30ff 	mov.w	r0, #4294967295
 8018c06:	4770      	bx	lr
 8018c08:	20002ed0 	.word	0x20002ed0

08018c0c <_fstat>:
 8018c0c:	4b02      	ldr	r3, [pc, #8]	; (8018c18 <_fstat+0xc>)
 8018c0e:	2258      	movs	r2, #88	; 0x58
 8018c10:	601a      	str	r2, [r3, #0]
 8018c12:	f04f 30ff 	mov.w	r0, #4294967295
 8018c16:	4770      	bx	lr
 8018c18:	20002ed0 	.word	0x20002ed0

08018c1c <_isatty>:
 8018c1c:	4b02      	ldr	r3, [pc, #8]	; (8018c28 <_isatty+0xc>)
 8018c1e:	2258      	movs	r2, #88	; 0x58
 8018c20:	601a      	str	r2, [r3, #0]
 8018c22:	2000      	movs	r0, #0
 8018c24:	4770      	bx	lr
 8018c26:	bf00      	nop
 8018c28:	20002ed0 	.word	0x20002ed0

08018c2c <_lseek>:
 8018c2c:	4b02      	ldr	r3, [pc, #8]	; (8018c38 <_lseek+0xc>)
 8018c2e:	2258      	movs	r2, #88	; 0x58
 8018c30:	601a      	str	r2, [r3, #0]
 8018c32:	f04f 30ff 	mov.w	r0, #4294967295
 8018c36:	4770      	bx	lr
 8018c38:	20002ed0 	.word	0x20002ed0

08018c3c <_read>:
 8018c3c:	4b02      	ldr	r3, [pc, #8]	; (8018c48 <_read+0xc>)
 8018c3e:	2258      	movs	r2, #88	; 0x58
 8018c40:	601a      	str	r2, [r3, #0]
 8018c42:	f04f 30ff 	mov.w	r0, #4294967295
 8018c46:	4770      	bx	lr
 8018c48:	20002ed0 	.word	0x20002ed0

08018c4c <_write>:
 8018c4c:	4b02      	ldr	r3, [pc, #8]	; (8018c58 <_write+0xc>)
 8018c4e:	2258      	movs	r2, #88	; 0x58
 8018c50:	601a      	str	r2, [r3, #0]
 8018c52:	f04f 30ff 	mov.w	r0, #4294967295
 8018c56:	4770      	bx	lr
 8018c58:	20002ed0 	.word	0x20002ed0

08018c5c <_init>:
 8018c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c5e:	bf00      	nop
 8018c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c62:	bc08      	pop	{r3}
 8018c64:	469e      	mov	lr, r3
 8018c66:	4770      	bx	lr

08018c68 <_fini>:
 8018c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6a:	bf00      	nop
 8018c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c6e:	bc08      	pop	{r3}
 8018c70:	469e      	mov	lr, r3
 8018c72:	4770      	bx	lr
