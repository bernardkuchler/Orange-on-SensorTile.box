
STM32H750B-DK-SVM-Cas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160e8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08016388  08016388  00026388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016840  08016840  00026840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016844  08016844  00026844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000aec  24000000  08016848  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000021d4  24000b00  08017334  00030b00  2**5
                  ALLOC
  7 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030aec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023020  00000000  00000000  00030b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004a1d  00000000  00000000  00053b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001928  00000000  00000000  00058558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001720  00000000  00000000  00059e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000400ed  00000000  00000000  0005b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00027299  00000000  00000000  0009b68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001868d1  00000000  00000000  000c2926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002491f7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007584  00000000  00000000  00249248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         0000009c  00000000  00000000  002507cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00250868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000b00 	.word	0x24000b00
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016370 	.word	0x08016370

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000b04 	.word	0x24000b04
 80002dc:	08016370 	.word	0x08016370

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005b2:	f000 fd83 	bl	80010bc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <main+0xf8>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d11b      	bne.n	80005fa <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005c2:	f3bf 8f4f 	dsb	sy
}
 80005c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c8:	f3bf 8f6f 	isb	sy
}
 80005cc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ce:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <main+0xf8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005d6:	f3bf 8f4f 	dsb	sy
}
 80005da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005dc:	f3bf 8f6f 	isb	sy
}
 80005e0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <main+0xf8>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <main+0xf8>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f4:	f3bf 8f6f 	isb	sy
}
 80005f8:	e000      	b.n	80005fc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <main+0xf8>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d138      	bne.n	800067a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <main+0xf8>)
 800060a:	2200      	movs	r2, #0
 800060c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000610:	f3bf 8f4f 	dsb	sy
}
 8000614:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <main+0xf8>)
 8000618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	0b5b      	lsrs	r3, r3, #13
 8000622:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000626:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000630:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	015a      	lsls	r2, r3, #5
 8000636:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800063a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000640:	4918      	ldr	r1, [pc, #96]	; (80006a4 <main+0xf8>)
 8000642:	4313      	orrs	r3, r2
 8000644:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1e5a      	subs	r2, r3, #1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1ef      	bne.n	8000632 <main+0x86>
    } while(sets-- != 0U);
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	60ba      	str	r2, [r7, #8]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1e5      	bne.n	8000628 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800065c:	f3bf 8f4f 	dsb	sy
}
 8000660:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <main+0xf8>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <main+0xf8>)
 8000668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066e:	f3bf 8f4f 	dsb	sy
}
 8000672:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000674:	f3bf 8f6f 	isb	sy
}
 8000678:	e000      	b.n	800067c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800067a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f001 fde6 	bl	800224c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f812 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f93e 	bl	8000904 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000688:	f000 f88e 	bl	80007a8 <MX_ADC3_Init>
  MX_CRC_Init();
 800068c:	f000 f8f0 	bl	8000870 <MX_CRC_Init>
  MX_TIM16_Init();
 8000690:	f000 f910 	bl	80008b4 <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000694:	f00c fb84 	bl	800cda0 <MX_USB_DEVICE_Init>
  MX_X_CUBE_AI_Init();
 8000698:	f00d fa2a 	bl	800daf0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 800069c:	f00d fa4c 	bl	800db38 <MX_X_CUBE_AI_Process>
 80006a0:	e7fc      	b.n	800069c <main+0xf0>
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	224c      	movs	r2, #76	; 0x4c
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f014 f896 	bl	80147e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2220      	movs	r2, #32
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f014 f890 	bl	80147e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c8:	2002      	movs	r0, #2
 80006ca:	f004 fd21 	bl	8005110 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemClock_Config+0xf8>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemClock_Config+0xf8>)
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006de:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemClock_Config+0xf8>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemClock_Config+0xfc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <SystemClock_Config+0xfc>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <SystemClock_Config+0xfc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000704:	bf00      	nop
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xfc>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000712:	d1f8      	bne.n	8000706 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000714:	2303      	movs	r3, #3
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071e:	2301      	movs	r3, #1
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	2302      	movs	r3, #2
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800072e:	2316      	movs	r3, #22
 8000730:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000732:	23a9      	movs	r3, #169	; 0xa9
 8000734:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000742:	2300      	movs	r3, #0
 8000744:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000746:	2300      	movs	r3, #0
 8000748:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	4618      	mov	r0, r3
 8000754:	f005 f9d6 	bl	8005b04 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800075e:	f000 fcda 	bl	8001116 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	233f      	movs	r3, #63	; 0x3f
 8000764:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f005 fe16 	bl	80063b8 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000792:	f000 fcc0 	bl	8001116 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3770      	adds	r7, #112	; 0x70
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58000400 	.word	0x58000400
 80007a4:	58024800 	.word	0x58024800

080007a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007c2:	4a28      	ldr	r2, [pc, #160]	; (8000864 <MX_ADC3_Init+0xbc>)
 80007c4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_ADC3_Init+0xb8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ADC3_Init+0xb8>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_ADC3_Init+0xb8>)
 800080a:	2200      	movs	r2, #0
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ADC3_Init+0xb8>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_ADC3_Init+0xb8>)
 8000818:	f001 ff7c 	bl	8002714 <HAL_ADC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000822:	f000 fc78 	bl	8001116 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_ADC3_Init+0xc0>)
 8000828:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082a:	2306      	movs	r3, #6
 800082c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_ADC3_Init+0xc4>)
 8000834:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000836:	2304      	movs	r3, #4
 8000838:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_ADC3_Init+0xb8>)
 8000848:	f002 f906 	bl	8002a58 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000852:	f000 fc60 	bl	8001116 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24000b1c 	.word	0x24000b1c
 8000864:	58026000 	.word	0x58026000
 8000868:	04300002 	.word	0x04300002
 800086c:	47ff0000 	.word	0x47ff0000

08000870 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_CRC_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <MX_CRC_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_CRC_Init+0x3c>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_CRC_Init+0x3c>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_CRC_Init+0x3c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_CRC_Init+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_CRC_Init+0x3c>)
 8000894:	2201      	movs	r2, #1
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_CRC_Init+0x3c>)
 800089a:	f002 fec5 	bl	8003628 <HAL_CRC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008a4:	f000 fc37 	bl	8001116 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	24000b80 	.word	0x24000b80
 80008b0:	58024c00 	.word	0x58024c00

080008b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_TIM16_Init+0x48>)
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <MX_TIM16_Init+0x4c>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000 - 1;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_TIM16_Init+0x48>)
 80008c0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_TIM16_Init+0x48>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_TIM16_Init+0x48>)
 80008ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_TIM16_Init+0x48>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_TIM16_Init+0x48>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_TIM16_Init+0x48>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_TIM16_Init+0x48>)
 80008e8:	f008 fdda 	bl	80094a0 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80008f2:	f000 fc10 	bl	8001116 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000ba4 	.word	0x24000ba4
 8000900:	40014400 	.word	0x40014400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	; 0x40
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800091a:	4bbd      	ldr	r3, [pc, #756]	; (8000c10 <MX_GPIO_Init+0x30c>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4abb      	ldr	r2, [pc, #748]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4bb9      	ldr	r3, [pc, #740]	; (8000c10 <MX_GPIO_Init+0x30c>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4bb5      	ldr	r3, [pc, #724]	; (8000c10 <MX_GPIO_Init+0x30c>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4ab4      	ldr	r2, [pc, #720]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4bb1      	ldr	r3, [pc, #708]	; (8000c10 <MX_GPIO_Init+0x30c>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000956:	4bae      	ldr	r3, [pc, #696]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4aac      	ldr	r2, [pc, #688]	; (8000c10 <MX_GPIO_Init+0x30c>)
 800095e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4baa      	ldr	r3, [pc, #680]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000970:	623b      	str	r3, [r7, #32]
 8000972:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4ba6      	ldr	r3, [pc, #664]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	4aa5      	ldr	r2, [pc, #660]	; (8000c10 <MX_GPIO_Init+0x30c>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000984:	4ba2      	ldr	r3, [pc, #648]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b9f      	ldr	r3, [pc, #636]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a9d      	ldr	r2, [pc, #628]	; (8000c10 <MX_GPIO_Init+0x30c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b9b      	ldr	r3, [pc, #620]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b0:	4b97      	ldr	r3, [pc, #604]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a96      	ldr	r2, [pc, #600]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b93      	ldr	r3, [pc, #588]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009ce:	4b90      	ldr	r3, [pc, #576]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a8e      	ldr	r2, [pc, #568]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b8c      	ldr	r3, [pc, #560]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ec:	4b88      	ldr	r3, [pc, #544]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a87      	ldr	r2, [pc, #540]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b84      	ldr	r3, [pc, #528]	; (8000c10 <MX_GPIO_Init+0x30c>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b81      	ldr	r3, [pc, #516]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a7f      	ldr	r2, [pc, #508]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b7d      	ldr	r3, [pc, #500]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b79      	ldr	r3, [pc, #484]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	4a78      	ldr	r2, [pc, #480]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a38:	4b75      	ldr	r3, [pc, #468]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b72      	ldr	r3, [pc, #456]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	4a70      	ldr	r2, [pc, #448]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a56:	4b6e      	ldr	r3, [pc, #440]	; (8000c10 <MX_GPIO_Init+0x30c>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	f003 0320 	and.w	r3, r3, #32
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	486a      	ldr	r0, [pc, #424]	; (8000c14 <MX_GPIO_Init+0x310>)
 8000a6c:	f003 f87e 	bl	8003b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	4868      	ldr	r0, [pc, #416]	; (8000c18 <MX_GPIO_Init+0x314>)
 8000a76:	f003 f879 	bl	8003b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a80:	4866      	ldr	r0, [pc, #408]	; (8000c1c <MX_GPIO_Init+0x318>)
 8000a82:	f003 f873 	bl	8003b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000a86:	23f0      	movs	r3, #240	; 0xf0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a96:	230a      	movs	r3, #10
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	485c      	ldr	r0, [pc, #368]	; (8000c14 <MX_GPIO_Init+0x310>)
 8000aa2:	f002 feb3 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000aa6:	f242 0320 	movw	r3, #8224	; 0x2020
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000ab8:	2309      	movs	r3, #9
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4856      	ldr	r0, [pc, #344]	; (8000c1c <MX_GPIO_Init+0x318>)
 8000ac4:	f002 fea2 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000ac8:	23fc      	movs	r3, #252	; 0xfc
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad8:	230e      	movs	r3, #14
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	484f      	ldr	r0, [pc, #316]	; (8000c20 <MX_GPIO_Init+0x31c>)
 8000ae4:	f002 fe92 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000afa:	230a      	movs	r3, #10
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b02:	4619      	mov	r1, r3
 8000b04:	4847      	ldr	r0, [pc, #284]	; (8000c24 <MX_GPIO_Init+0x320>)
 8000b06:	f002 fe81 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000b0a:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b24:	4619      	mov	r1, r3
 8000b26:	4840      	ldr	r0, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x324>)
 8000b28:	f002 fe70 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000b2c:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3e:	230e      	movs	r3, #14
 8000b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b46:	4619      	mov	r1, r3
 8000b48:	4832      	ldr	r0, [pc, #200]	; (8000c14 <MX_GPIO_Init+0x310>)
 8000b4a:	f002 fe5f 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000b4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b60:	230c      	movs	r3, #12
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4830      	ldr	r0, [pc, #192]	; (8000c2c <MX_GPIO_Init+0x328>)
 8000b6c:	f002 fe4e 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b80:	230a      	movs	r3, #10
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4824      	ldr	r0, [pc, #144]	; (8000c1c <MX_GPIO_Init+0x318>)
 8000b8c:	f002 fe3e 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b90:	2310      	movs	r3, #16
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481c      	ldr	r0, [pc, #112]	; (8000c1c <MX_GPIO_Init+0x318>)
 8000bac:	f002 fe2e 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000bb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4815      	ldr	r0, [pc, #84]	; (8000c24 <MX_GPIO_Init+0x320>)
 8000bce:	f002 fe1d 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000bd2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be4:	230e      	movs	r3, #14
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <MX_GPIO_Init+0x314>)
 8000bf0:	f002 fe0c 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c04:	2305      	movs	r3, #5
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	e00f      	b.n	8000c30 <MX_GPIO_Init+0x32c>
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58022000 	.word	0x58022000
 8000c18:	58022400 	.word	0x58022400
 8000c1c:	58020400 	.word	0x58020400
 8000c20:	58022800 	.word	0x58022800
 8000c24:	58021800 	.word	0x58021800
 8000c28:	58020800 	.word	0x58020800
 8000c2c:	58021000 	.word	0x58021000
 8000c30:	48bc      	ldr	r0, [pc, #752]	; (8000f24 <MX_GPIO_Init+0x620>)
 8000c32:	f002 fdeb 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c36:	2304      	movs	r3, #4
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c46:	2305      	movs	r3, #5
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	48b5      	ldr	r0, [pc, #724]	; (8000f28 <MX_GPIO_Init+0x624>)
 8000c52:	f002 fddb 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c70:	4619      	mov	r1, r3
 8000c72:	48ae      	ldr	r0, [pc, #696]	; (8000f2c <MX_GPIO_Init+0x628>)
 8000c74:	f002 fdca 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000c78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c92:	4619      	mov	r1, r3
 8000c94:	48a5      	ldr	r0, [pc, #660]	; (8000f2c <MX_GPIO_Init+0x628>)
 8000c96:	f002 fdb9 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000caa:	230b      	movs	r3, #11
 8000cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	489e      	ldr	r0, [pc, #632]	; (8000f30 <MX_GPIO_Init+0x62c>)
 8000cb6:	f002 fda9 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4895      	ldr	r0, [pc, #596]	; (8000f24 <MX_GPIO_Init+0x620>)
 8000cce:	f002 fd9d 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000cd2:	2330      	movs	r3, #48	; 0x30
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	4890      	ldr	r0, [pc, #576]	; (8000f30 <MX_GPIO_Init+0x62c>)
 8000cee:	f002 fd8d 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000d04:	230c      	movs	r3, #12
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4889      	ldr	r0, [pc, #548]	; (8000f34 <MX_GPIO_Init+0x630>)
 8000d10:	f002 fd7c 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000d14:	f248 1333 	movw	r3, #33075	; 0x8133
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d26:	230c      	movs	r3, #12
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4881      	ldr	r0, [pc, #516]	; (8000f38 <MX_GPIO_Init+0x634>)
 8000d32:	f002 fd6b 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000d36:	2304      	movs	r3, #4
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000d46:	230c      	movs	r3, #12
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4874      	ldr	r0, [pc, #464]	; (8000f24 <MX_GPIO_Init+0x620>)
 8000d52:	f002 fd5b 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000d56:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	486c      	ldr	r0, [pc, #432]	; (8000f24 <MX_GPIO_Init+0x620>)
 8000d74:	f002 fd4a 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	486b      	ldr	r0, [pc, #428]	; (8000f3c <MX_GPIO_Init+0x638>)
 8000d8e:	f002 fd3d 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	4866      	ldr	r0, [pc, #408]	; (8000f40 <MX_GPIO_Init+0x63c>)
 8000da8:	f002 fd30 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	485c      	ldr	r0, [pc, #368]	; (8000f3c <MX_GPIO_Init+0x638>)
 8000dca:	f002 fd1f 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de0:	230b      	movs	r3, #11
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	484f      	ldr	r0, [pc, #316]	; (8000f28 <MX_GPIO_Init+0x624>)
 8000dec:	f002 fd0e 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000df0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e02:	230c      	movs	r3, #12
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	484d      	ldr	r0, [pc, #308]	; (8000f44 <MX_GPIO_Init+0x640>)
 8000e0e:	f002 fcfd 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	483f      	ldr	r0, [pc, #252]	; (8000f28 <MX_GPIO_Init+0x624>)
 8000e2c:	f002 fcee 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e30:	2304      	movs	r3, #4
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	483c      	ldr	r0, [pc, #240]	; (8000f38 <MX_GPIO_Init+0x634>)
 8000e46:	f002 fce1 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	483a      	ldr	r0, [pc, #232]	; (8000f48 <MX_GPIO_Init+0x644>)
 8000e5e:	f002 fcd5 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000e62:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e74:	2309      	movs	r3, #9
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4831      	ldr	r0, [pc, #196]	; (8000f44 <MX_GPIO_Init+0x640>)
 8000e80:	f002 fcc4 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e84:	2301      	movs	r3, #1
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e94:	4619      	mov	r1, r3
 8000e96:	482a      	ldr	r0, [pc, #168]	; (8000f40 <MX_GPIO_Init+0x63c>)
 8000e98:	f002 fcb8 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <MX_GPIO_Init+0x640>)
 8000eba:	f002 fca7 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000ebe:	233e      	movs	r3, #62	; 0x3e
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ece:	230b      	movs	r3, #11
 8000ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4819      	ldr	r0, [pc, #100]	; (8000f40 <MX_GPIO_Init+0x63c>)
 8000eda:	f002 fc97 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eee:	230b      	movs	r3, #11
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_GPIO_Init+0x628>)
 8000efa:	f002 fc87 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000efe:	2386      	movs	r3, #134	; 0x86
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0e:	230b      	movs	r3, #11
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <MX_GPIO_Init+0x638>)
 8000f1a:	f002 fc77 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f1e:	23e0      	movs	r3, #224	; 0xe0
 8000f20:	e014      	b.n	8000f4c <MX_GPIO_Init+0x648>
 8000f22:	bf00      	nop
 8000f24:	58020c00 	.word	0x58020c00
 8000f28:	58022000 	.word	0x58022000
 8000f2c:	58021c00 	.word	0x58021c00
 8000f30:	58021000 	.word	0x58021000
 8000f34:	58020400 	.word	0x58020400
 8000f38:	58021800 	.word	0x58021800
 8000f3c:	58020000 	.word	0x58020000
 8000f40:	58020800 	.word	0x58020800
 8000f44:	58021400 	.word	0x58021400
 8000f48:	58022800 	.word	0x58022800
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4850      	ldr	r0, [pc, #320]	; (80010a8 <MX_GPIO_Init+0x7a4>)
 8000f66:	f002 fc51 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	4619      	mov	r1, r3
 8000f86:	4849      	ldr	r0, [pc, #292]	; (80010ac <MX_GPIO_Init+0x7a8>)
 8000f88:	f002 fc40 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8000f8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4841      	ldr	r0, [pc, #260]	; (80010a8 <MX_GPIO_Init+0x7a4>)
 8000fa4:	f002 fc32 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fa8:	2340      	movs	r3, #64	; 0x40
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	483b      	ldr	r0, [pc, #236]	; (80010b0 <MX_GPIO_Init+0x7ac>)
 8000fc4:	f002 fc22 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fda:	230e      	movs	r3, #14
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4830      	ldr	r0, [pc, #192]	; (80010a8 <MX_GPIO_Init+0x7a4>)
 8000fe6:	f002 fc11 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ffc:	2309      	movs	r3, #9
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	482b      	ldr	r0, [pc, #172]	; (80010b4 <MX_GPIO_Init+0x7b0>)
 8001008:	f002 fc00 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 800100c:	2303      	movs	r3, #3
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101c:	230b      	movs	r3, #11
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001024:	4619      	mov	r1, r3
 8001026:	4821      	ldr	r0, [pc, #132]	; (80010ac <MX_GPIO_Init+0x7a8>)
 8001028:	f002 fbf0 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800102c:	2304      	movs	r3, #4
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	481d      	ldr	r0, [pc, #116]	; (80010b8 <MX_GPIO_Init+0x7b4>)
 8001044:	f002 fbe2 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <MX_GPIO_Init+0x7a8>)
 8001062:	f002 fbd3 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001078:	2305      	movs	r3, #5
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <MX_GPIO_Init+0x7a8>)
 8001084:	f002 fbc2 	bl	800380c <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001088:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800108c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001090:	f001 f99e 	bl	80023d0 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001094:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001098:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800109c:	f001 f998 	bl	80023d0 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3740      	adds	r7, #64	; 0x40
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58021c00 	.word	0x58021c00
 80010ac:	58020400 	.word	0x58020400
 80010b0:	58020000 	.word	0x58020000
 80010b4:	58020c00 	.word	0x58020c00
 80010b8:	58022400 	.word	0x58022400

080010bc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010ce:	f002 fa2f 	bl	8003530 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010d2:	2301      	movs	r3, #1
 80010d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80010da:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80010de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80010e0:	2317      	movs	r3, #23
 80010e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010ec:	2303      	movs	r3, #3
 80010ee:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001100:	463b      	mov	r3, r7
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fa4c 	bl	80035a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001108:	2004      	movs	r0, #4
 800110a:	f002 fa29 	bl	8003560 <HAL_MPU_Enable>

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800111a:	b672      	cpsid	i
}
 800111c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111e:	e7fe      	b.n	800111e <Error_Handler+0x8>

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_MspInit+0x30>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_MspInit+0x30>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_MspInit+0x30>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	58024400 	.word	0x58024400

08001154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0bc      	sub	sp, #240	; 0xf0
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	22c0      	movs	r2, #192	; 0xc0
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f013 fb37 	bl	80147e8 <memset>
  if(hadc->Instance==ADC3)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a41      	ldr	r2, [pc, #260]	; (8001284 <HAL_ADC_MspInit+0x130>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d17a      	bne.n	800127a <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001184:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001194:	230c      	movs	r3, #12
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011a4:	23c0      	movs	r3, #192	; 0xc0
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011a8:	2320      	movs	r3, #32
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 fc72 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80011c6:	f7ff ffa6 	bl	8001116 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_ADC_MspInit+0x134>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a2d      	ldr	r2, [pc, #180]	; (8001288 <HAL_ADC_MspInit+0x134>)
 80011d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <HAL_ADC_MspInit+0x134>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_ADC_MspInit+0x134>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_ADC_MspInit+0x134>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_ADC_MspInit+0x134>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_ADC_MspInit+0x134>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <HAL_ADC_MspInit+0x134>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_ADC_MspInit+0x134>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001238:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800123c:	4619      	mov	r1, r3
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <HAL_ADC_MspInit+0x138>)
 8001240:	f002 fae4 	bl	800380c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001244:	2301      	movs	r3, #1
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800125a:	4619      	mov	r1, r3
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <HAL_ADC_MspInit+0x13c>)
 800125e:	f002 fad5 	bl	800380c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001262:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001266:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800126a:	f001 f8b1 	bl	80023d0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800126e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001272:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001276:	f001 f8ab 	bl	80023d0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	37f0      	adds	r7, #240	; 0xf0
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	58026000 	.word	0x58026000
 8001288:	58024400 	.word	0x58024400
 800128c:	58021400 	.word	0x58021400
 8001290:	58020800 	.word	0x58020800

08001294 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_CRC_MspInit+0x3c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10e      	bne.n	80012c4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_CRC_MspInit+0x40>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_CRC_MspInit+0x40>)
 80012ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_CRC_MspInit+0x40>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	58024c00 	.word	0x58024c00
 80012d4:	58024400 	.word	0x58024400

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_TIM_Base_MspInit+0x3c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10e      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_TIM_Base_MspInit+0x40>)
 80012ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_TIM_Base_MspInit+0x40>)
 80012f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_TIM_Base_MspInit+0x40>)
 80012fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40014400 	.word	0x40014400
 8001318:	58024400 	.word	0x58024400

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 ffe2 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <OTG_FS_IRQHandler+0x10>)
 8001376:	f002 fd6b 	bl	8003e50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	24002130 	.word	0x24002130

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f013 f9e0 	bl	8014778 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24080000 	.word	0x24080000
 80013e4:	00000800 	.word	0x00000800
 80013e8:	24000bf0 	.word	0x24000bf0
 80013ec:	20000000 	.word	0x20000000

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f4:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <SystemInit+0xe4>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <SystemInit+0xe4>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <SystemInit+0xe8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	2b06      	cmp	r3, #6
 800140e:	d807      	bhi.n	8001420 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <SystemInit+0xe8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 030f 	bic.w	r3, r3, #15
 8001418:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <SystemInit+0xe8>)
 800141a:	f043 0307 	orr.w	r3, r3, #7
 800141e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <SystemInit+0xec>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <SystemInit+0xec>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <SystemInit+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <SystemInit+0xec>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <SystemInit+0xec>)
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <SystemInit+0xf0>)
 800143a:	4013      	ands	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <SystemInit+0xe8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <SystemInit+0xe8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 030f 	bic.w	r3, r3, #15
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <SystemInit+0xe8>)
 8001454:	f043 0307 	orr.w	r3, r3, #7
 8001458:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <SystemInit+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <SystemInit+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <SystemInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <SystemInit+0xec>)
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <SystemInit+0xf4>)
 8001470:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <SystemInit+0xec>)
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <SystemInit+0xf8>)
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <SystemInit+0xec>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <SystemInit+0xfc>)
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <SystemInit+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <SystemInit+0xec>)
 8001486:	4a19      	ldr	r2, [pc, #100]	; (80014ec <SystemInit+0xfc>)
 8001488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <SystemInit+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SystemInit+0xec>)
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <SystemInit+0xfc>)
 8001494:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <SystemInit+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <SystemInit+0xec>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <SystemInit+0xec>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <SystemInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <SystemInit+0x100>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <SystemInit+0x104>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ba:	d202      	bcs.n	80014c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <SystemInit+0x108>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <SystemInit+0x10c>)
 80014c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	52002000 	.word	0x52002000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e4:	02020200 	.word	0x02020200
 80014e8:	01ff0000 	.word	0x01ff0000
 80014ec:	01010280 	.word	0x01010280
 80014f0:	5c001000 	.word	0x5c001000
 80014f4:	ffff0000 	.word	0xffff0000
 80014f8:	51008108 	.word	0x51008108
 80014fc:	52004000 	.word	0x52004000

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001504:	f7ff ff74 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f013 f929 	bl	8014784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff f83b 	bl	80005ac <main>
  bx  lr
 8001536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800153c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001540:	24000aec 	.word	0x24000aec
  ldr r2, =_sidata
 8001544:	08016848 	.word	0x08016848
  ldr r2, =_sbss
 8001548:	24000b00 	.word	0x24000b00
  ldr r4, =_ebss
 800154c:	24002cd4 	.word	0x24002cd4

08001550 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC3_IRQHandler>

08001552 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001560:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001568:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001570:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800157a:	fbb2 f2f3 	udiv	r2, r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158a:	fbb2 f2f3 	udiv	r2, r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b090      	sub	sp, #64	; 0x40
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d102      	bne.n	80015b8 <MT25TL01G_Enter4BytesAddressMode+0x18>
 80015b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b6:	e001      	b.n	80015bc <MT25TL01G_Enter4BytesAddressMode+0x1c>
 80015b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015bc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80015be:	23b7      	movs	r3, #183	; 0xb7
 80015c0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015da:	2300      	movs	r3, #0
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f860 	bl	80016a8 <MT25TL01G_WriteEnable>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 80015ee:	f06f 0301 	mvn.w	r3, #1
 80015f2:	e019      	b.n	8001628 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f003 fe4e 	bl	80052a0 <HAL_QSPI_Command>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800160a:	f06f 0301 	mvn.w	r3, #1
 800160e:	e00b      	b.n	8001628 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f80b 	bl	8001630 <MT25TL01G_AutoPollingMemReady>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001620:	f06f 0301 	mvn.w	r3, #1
 8001624:	e000      	b.n	8001628 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3740      	adds	r7, #64	; 0x40
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b096      	sub	sp, #88	; 0x58
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800163c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8001642:	2305      	movs	r3, #5
 8001644:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800164e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001652:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800165c:	2300      	movs	r3, #0
 800165e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001660:	2300      	movs	r3, #0
 8001662:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800166c:	2310      	movs	r3, #16
 800166e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001670:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001674:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8001676:	f240 1301 	movw	r3, #257	; 0x101
 800167a:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800167c:	2302      	movs	r3, #2
 800167e:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001680:	f107 0208 	add.w	r2, r7, #8
 8001684:	f107 0120 	add.w	r1, r7, #32
 8001688:	f241 3388 	movw	r3, #5000	; 0x1388
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f003 ff94 	bl	80055ba <HAL_QSPI_AutoPolling>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8001698:	f06f 0304 	mvn.w	r3, #4
 800169c:	e000      	b.n	80016a0 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800169e:	2300      	movs	r3, #0

}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3758      	adds	r7, #88	; 0x58
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b096      	sub	sp, #88	; 0x58
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d102      	bne.n	80016c0 <MT25TL01G_WriteEnable+0x18>
 80016ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016be:	e001      	b.n	80016c4 <MT25TL01G_WriteEnable+0x1c>
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80016c6:	2306      	movs	r3, #6
 80016c8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80016de:	2300      	movs	r3, #0
 80016e0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80016e2:	2300      	movs	r3, #0
 80016e4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f003 fdd5 	bl	80052a0 <HAL_QSPI_Command>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80016fc:	f06f 0301 	mvn.w	r3, #1
 8001700:	e029      	b.n	8001756 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8001702:	f240 2302 	movw	r3, #514	; 0x202
 8001706:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8001708:	f240 2302 	movw	r3, #514	; 0x202
 800170c:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8001712:	2302      	movs	r3, #2
 8001714:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001716:	2310      	movs	r3, #16
 8001718:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800171a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171e:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8001720:	2305      	movs	r3, #5
 8001722:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d102      	bne.n	8001730 <MT25TL01G_WriteEnable+0x88>
 800172a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800172e:	e001      	b.n	8001734 <MT25TL01G_WriteEnable+0x8c>
 8001730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001734:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001736:	f107 0208 	add.w	r2, r7, #8
 800173a:	f107 0120 	add.w	r1, r7, #32
 800173e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f003 ff39 	bl	80055ba <HAL_QSPI_AutoPolling>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800174e:	f06f 0304 	mvn.w	r3, #4
 8001752:	e000      	b.n	8001756 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3758      	adds	r7, #88	; 0x58
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b090      	sub	sp, #64	; 0x40
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800176c:	2335      	movs	r3, #53	; 0x35
 800176e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4619      	mov	r1, r3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f003 fd82 	bl	80052a0 <HAL_QSPI_Command>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80017a2:	f06f 0301 	mvn.w	r3, #1
 80017a6:	e000      	b.n	80017aa <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3740      	adds	r7, #64	; 0x40
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b090      	sub	sp, #64	; 0x40
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80017ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017be:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80017c0:	23f5      	movs	r3, #245	; 0xf5
 80017c2:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017d8:	2300      	movs	r3, #0
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017dc:	2300      	movs	r3, #0
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f003 fd58 	bl	80052a0 <HAL_QSPI_Command>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80017f6:	f06f 0301 	mvn.w	r3, #1
 80017fa:	e000      	b.n	80017fe <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3740      	adds	r7, #64	; 0x40
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b092      	sub	sp, #72	; 0x48
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d83a      	bhi.n	8001890 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001831 	.word	0x08001831
 8001824:	08001849 	.word	0x08001849
 8001828:	08001861 	.word	0x08001861
 800182c:	08001879 	.word	0x08001879
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8001836:	230e      	movs	r3, #14
 8001838:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001844:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001846:	e023      	b.n	8001890 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800184e:	233d      	movs	r3, #61	; 0x3d
 8001850:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800185c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800185e:	e017      	b.n	8001890 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8001866:	23ee      	movs	r3, #238	; 0xee
 8001868:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800186a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001870:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001874:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001876:	e00b      	b.n	8001890 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001878:	f44f 7340 	mov.w	r3, #768	; 0x300
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800187e:	23ed      	movs	r3, #237	; 0xed
 8001880:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001882:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001888:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800188c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800188e:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001890:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001894:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800189a:	2308      	movs	r3, #8
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800189e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80018a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018a8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018aa:	2300      	movs	r3, #0
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80018b6:	f107 0208 	add.w	r2, r7, #8
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f003 fef1 	bl	80056a8 <HAL_QSPI_MemoryMapped>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80018cc:	f06f 0305 	mvn.w	r3, #5
 80018d0:	e000      	b.n	80018d4 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3748      	adds	r7, #72	; 0x48
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b092      	sub	sp, #72	; 0x48
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d83a      	bhi.n	8001964 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	08001905 	.word	0x08001905
 80018f8:	0800191d 	.word	0x0800191d
 80018fc:	08001935 	.word	0x08001935
 8001900:	0800194d 	.word	0x0800194d
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800190a:	230c      	movs	r3, #12
 800190c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001918:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800191a:	e023      	b.n	8001964 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800191c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001922:	23bc      	movs	r3, #188	; 0xbc
 8001924:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8001926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800192c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001930:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001932:	e017      	b.n	8001964 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800193a:	23ec      	movs	r3, #236	; 0xec
 800193c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800193e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001944:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001948:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800194a:	e00b      	b.n	8001964 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800194c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8001952:	23eb      	movs	r3, #235	; 0xeb
 8001954:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001956:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800195c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001960:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001962:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8001964:	2308      	movs	r3, #8
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001968:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800196c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001976:	2300      	movs	r3, #0
 8001978:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800197a:	2300      	movs	r3, #0
 800197c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001986:	f107 0208 	add.w	r2, r7, #8
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f003 fe89 	bl	80056a8 <HAL_QSPI_MemoryMapped>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800199c:	f06f 0305 	mvn.w	r3, #5
 80019a0:	e000      	b.n	80019a4 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3748      	adds	r7, #72	; 0x48
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b090      	sub	sp, #64	; 0x40
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d102      	bne.n	80019c4 <MT25TL01G_ResetEnable+0x18>
 80019be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c2:	e001      	b.n	80019c8 <MT25TL01G_ResetEnable+0x1c>
 80019c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80019ca:	2366      	movs	r3, #102	; 0x66
 80019cc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80019e2:	2300      	movs	r3, #0
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f003 fc53 	bl	80052a0 <HAL_QSPI_Command>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001a00:	f06f 0301 	mvn.w	r3, #1
 8001a04:	e000      	b.n	8001a08 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3740      	adds	r7, #64	; 0x40
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b090      	sub	sp, #64	; 0x40
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d102      	bne.n	8001a28 <MT25TL01G_ResetMemory+0x18>
 8001a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a26:	e001      	b.n	8001a2c <MT25TL01G_ResetMemory+0x1c>
 8001a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8001a2e:	2399      	movs	r3, #153	; 0x99
 8001a30:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a46:	2300      	movs	r3, #0
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f003 fc21 	bl	80052a0 <HAL_QSPI_Command>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001a64:	f06f 0301 	mvn.w	r3, #1
 8001a68:	e000      	b.n	8001a6c <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3740      	adds	r7, #64	; 0x40
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b090      	sub	sp, #64	; 0x40
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a88:	f06f 0301 	mvn.w	r3, #1
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a8e:	e090      	b.n	8001bb2 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8001a90:	494a      	ldr	r1, [pc, #296]	; (8001bbc <BSP_QSPI_Init+0x148>)
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8086 	bne.w	8001bb2 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 8001aa6:	4846      	ldr	r0, [pc, #280]	; (8001bc0 <BSP_QSPI_Init+0x14c>)
 8001aa8:	f000 f99c 	bl	8001de4 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 8001aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d17f      	bne.n	8001bb2 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fd4b 	bl	8001552 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	785b      	ldrb	r3, [r3, #1]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <BSP_QSPI_Init+0x150>)
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8001aca:	2340      	movs	r3, #64	; 0x40
 8001acc:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e003      	b.n	8001af0 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <BSP_QSPI_Init+0x8c>
 8001afc:	2310      	movs	r3, #16
 8001afe:	e000      	b.n	8001b02 <BSP_QSPI_Init+0x8e>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <BSP_QSPI_Init+0x14c>)
 8001b0c:	f000 f85c 	bl	8001bc8 <MX_QSPI_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8001b16:	f06f 0303 	mvn.w	r3, #3
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b1c:	e049      	b.n	8001bb2 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 faa8 	bl	8002074 <QSPI_ResetMemory>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b2a:	f06f 0304 	mvn.w	r3, #4
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b30:	e03f      	b.n	8001bb2 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001b32:	4922      	ldr	r1, [pc, #136]	; (8001bbc <BSP_QSPI_Init+0x148>)
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	3301      	adds	r3, #1
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	481e      	ldr	r0, [pc, #120]	; (8001bc0 <BSP_QSPI_Init+0x14c>)
 8001b48:	f7ff fd72 	bl	8001630 <MT25TL01G_AutoPollingMemReady>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b52:	f06f 0304 	mvn.w	r3, #4
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b58:	e02b      	b.n	8001bb2 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001b5a:	4918      	ldr	r1, [pc, #96]	; (8001bbc <BSP_QSPI_Init+0x148>)
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3301      	adds	r3, #1
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <BSP_QSPI_Init+0x14c>)
 8001b70:	f7ff fd16 	bl	80015a0 <MT25TL01G_Enter4BytesAddressMode>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b7a:	f06f 0304 	mvn.w	r3, #4
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b80:	e017      	b.n	8001bb2 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fae2 	bl	800214c <QSPI_DummyCyclesCfg>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b8e:	f06f 0304 	mvn.w	r3, #4
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b94:	e00d      	b.n	8001bb2 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	7819      	ldrb	r1, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f89d 	bl	8001ce0 <BSP_QSPI_ConfigFlash>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bac:	f06f 0304 	mvn.w	r3, #4
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3740      	adds	r7, #64	; 0x40
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	24000c40 	.word	0x24000c40
 8001bc0:	24000bf4 	.word	0x24000bf4
 8001bc4:	08016518 	.word	0x08016518

08001bc8 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <MX_QSPI_Init+0x5c>)
 8001bd6:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bfc:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f003 fac6 	bl	80051a4 <HAL_QSPI_Init>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	52005000 	.word	0x52005000

08001c28 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c3a:	f06f 0301 	mvn.w	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e045      	b.n	8001cce <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8001c42:	4925      	ldr	r1, [pc, #148]	; (8001cd8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3302      	adds	r3, #2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11d      	bne.n	8001c94 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001c58:	491f      	ldr	r1, [pc, #124]	; (8001cd8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	3301      	adds	r3, #1
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	481b      	ldr	r0, [pc, #108]	; (8001cdc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8001c6e:	f7ff fe35 	bl	80018dc <MT25TL01G_EnableMemoryMappedModeSTR>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c78:	f06f 0304 	mvn.w	r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e026      	b.n	8001cce <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001c80:	4915      	ldr	r1, [pc, #84]	; (8001cd8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e01c      	b.n	8001cce <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001c94:	4910      	ldr	r1, [pc, #64]	; (8001cd8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8001caa:	f7ff fdad 	bl	8001808 <MT25TL01G_EnableMemoryMappedModeDTR>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cb4:	f06f 0304 	mvn.w	r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e008      	b.n	8001cce <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001cbc:	4906      	ldr	r1, [pc, #24]	; (8001cd8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	24000c40 	.word	0x24000c40
 8001cdc:	24000bf4 	.word	0x24000bf4

08001ce0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
 8001cec:	4613      	mov	r3, r2
 8001cee:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cfa:	f06f 0301 	mvn.w	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e067      	b.n	8001dd2 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001d02:	4936      	ldr	r1, [pc, #216]	; (8001ddc <BSP_QSPI_ConfigFlash+0xfc>)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d103      	bne.n	8001d1e <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8001d16:	f06f 0319 	mvn.w	r3, #25
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e059      	b.n	8001dd2 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001d1e:	78bb      	ldrb	r3, [r7, #2]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <BSP_QSPI_ConfigFlash+0x48>
 8001d24:	2310      	movs	r3, #16
 8001d26:	e000      	b.n	8001d2a <BSP_QSPI_ConfigFlash+0x4a>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <BSP_QSPI_ConfigFlash+0x100>)
 8001d2c:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001d2e:	482c      	ldr	r0, [pc, #176]	; (8001de0 <BSP_QSPI_ConfigFlash+0x100>)
 8001d30:	f003 fa38 	bl	80051a4 <HAL_QSPI_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001d3a:	f06f 0303 	mvn.w	r3, #3
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e047      	b.n	8001dd2 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8001d42:	4926      	ldr	r1, [pc, #152]	; (8001ddc <BSP_QSPI_ConfigFlash+0xfc>)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3301      	adds	r3, #1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d10c      	bne.n	8001d72 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d016      	beq.n	8001d8c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8001d5e:	4820      	ldr	r0, [pc, #128]	; (8001de0 <BSP_QSPI_ConfigFlash+0x100>)
 8001d60:	f7ff fd27 	bl	80017b2 <MT25TL01G_ExitQPIMode>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d6a:	f06f 0304 	mvn.w	r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001d70:	e00c      	b.n	8001d8c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d10b      	bne.n	8001d90 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8001d78:	4819      	ldr	r0, [pc, #100]	; (8001de0 <BSP_QSPI_ConfigFlash+0x100>)
 8001d7a:	f7ff fcf0 	bl	800175e <MT25TL01G_EnterQPIMode>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d84:	f06f 0304 	mvn.w	r3, #4
 8001d88:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001d8a:	e001      	b.n	8001d90 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 8001d8c:	bf00      	nop
 8001d8e:	e000      	b.n	8001d92 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8001d90:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11c      	bne.n	8001dd2 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001d98:	4910      	ldr	r1, [pc, #64]	; (8001ddc <BSP_QSPI_ConfigFlash+0xfc>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8001daa:	490c      	ldr	r1, [pc, #48]	; (8001ddc <BSP_QSPI_ConfigFlash+0xfc>)
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	3301      	adds	r3, #1
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001dbe:	4907      	ldr	r1, [pc, #28]	; (8001ddc <BSP_QSPI_ConfigFlash+0xfc>)
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3302      	adds	r3, #2
 8001dce:	78ba      	ldrb	r2, [r7, #2]
 8001dd0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	24000c40 	.word	0x24000c40
 8001de0:	24000bf4 	.word	0x24000bf4

08001de4 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b094      	sub	sp, #80	; 0x50
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001dec:	4b9c      	ldr	r3, [pc, #624]	; (8002060 <QSPI_MspInit+0x27c>)
 8001dee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001df2:	4a9b      	ldr	r2, [pc, #620]	; (8002060 <QSPI_MspInit+0x27c>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001dfc:	4b98      	ldr	r3, [pc, #608]	; (8002060 <QSPI_MspInit+0x27c>)
 8001dfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8001e0a:	4b95      	ldr	r3, [pc, #596]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e0e:	4a94      	ldr	r2, [pc, #592]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8001e16:	4b92      	ldr	r3, [pc, #584]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e1a:	4a91      	ldr	r2, [pc, #580]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e20:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001e22:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	4a8d      	ldr	r2, [pc, #564]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e32:	4b8b      	ldr	r3, [pc, #556]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8001e40:	4b87      	ldr	r3, [pc, #540]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e46:	4a86      	ldr	r2, [pc, #536]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e50:	4b83      	ldr	r3, [pc, #524]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8001e5e:	4b80      	ldr	r3, [pc, #512]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	4a7e      	ldr	r2, [pc, #504]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6e:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8001e7c:	4b78      	ldr	r3, [pc, #480]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e82:	4a77      	ldr	r2, [pc, #476]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e84:	f043 0320 	orr.w	r3, r3, #32
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8c:	4b74      	ldr	r3, [pc, #464]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8001e9a:	4b71      	ldr	r3, [pc, #452]	; (8002060 <QSPI_MspInit+0x27c>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea0:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <QSPI_MspInit+0x27c>)
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <QSPI_MspInit+0x27c>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8001eb8:	4b69      	ldr	r3, [pc, #420]	; (8002060 <QSPI_MspInit+0x27c>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebe:	4a68      	ldr	r2, [pc, #416]	; (8002060 <QSPI_MspInit+0x27c>)
 8001ec0:	f043 0320 	orr.w	r3, r3, #32
 8001ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec8:	4b65      	ldr	r3, [pc, #404]	; (8002060 <QSPI_MspInit+0x27c>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	623b      	str	r3, [r7, #32]
 8001ed4:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8001ed6:	4b62      	ldr	r3, [pc, #392]	; (8002060 <QSPI_MspInit+0x27c>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	4a60      	ldr	r2, [pc, #384]	; (8002060 <QSPI_MspInit+0x27c>)
 8001ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee6:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <QSPI_MspInit+0x27c>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8001ef4:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <QSPI_MspInit+0x27c>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	4a59      	ldr	r2, [pc, #356]	; (8002060 <QSPI_MspInit+0x27c>)
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f04:	4b56      	ldr	r3, [pc, #344]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	4a51      	ldr	r2, [pc, #324]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f22:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f36:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	4a42      	ldr	r2, [pc, #264]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5e:	4b40      	ldr	r3, [pc, #256]	; (8002060 <QSPI_MspInit+0x27c>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f7e:	2309      	movs	r3, #9
 8001f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001f82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f86:	4619      	mov	r1, r3
 8001f88:	4836      	ldr	r0, [pc, #216]	; (8002064 <QSPI_MspInit+0x280>)
 8001f8a:	f001 fc3f 	bl	800380c <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8001f8e:	2340      	movs	r3, #64	; 0x40
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001f96:	230a      	movs	r3, #10
 8001f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8001f9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4831      	ldr	r0, [pc, #196]	; (8002068 <QSPI_MspInit+0x284>)
 8001fa2:	f001 fc33 	bl	800380c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8001fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001fb0:	2309      	movs	r3, #9
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8001fb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	482c      	ldr	r0, [pc, #176]	; (800206c <QSPI_MspInit+0x288>)
 8001fbc:	f001 fc26 	bl	800380c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8001fc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4828      	ldr	r0, [pc, #160]	; (8002070 <QSPI_MspInit+0x28c>)
 8001fd0:	f001 fc1c 	bl	800380c <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8001fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8001fde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481f      	ldr	r0, [pc, #124]	; (8002064 <QSPI_MspInit+0x280>)
 8001fe6:	f001 fc11 	bl	800380c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8001fea:	2308      	movs	r3, #8
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001fee:	2309      	movs	r3, #9
 8001ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8001ff2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481d      	ldr	r0, [pc, #116]	; (8002070 <QSPI_MspInit+0x28c>)
 8001ffa:	f001 fc07 	bl	800380c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002002:	2309      	movs	r3, #9
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8002006:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800200a:	4619      	mov	r1, r3
 800200c:	4815      	ldr	r0, [pc, #84]	; (8002064 <QSPI_MspInit+0x280>)
 800200e:	f001 fbfd 	bl	800380c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8002012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8002018:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201c:	4619      	mov	r1, r3
 800201e:	4812      	ldr	r0, [pc, #72]	; (8002068 <QSPI_MspInit+0x284>)
 8002020:	f001 fbf4 	bl	800380c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8002024:	2340      	movs	r3, #64	; 0x40
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8002028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800202c:	4619      	mov	r1, r3
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <QSPI_MspInit+0x280>)
 8002030:	f001 fbec 	bl	800380c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8002034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002038:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800203a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800203e:	4619      	mov	r1, r3
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <QSPI_MspInit+0x284>)
 8002042:	f001 fbe3 	bl	800380c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	210f      	movs	r1, #15
 800204a:	205c      	movs	r0, #92	; 0x5c
 800204c:	f001 fa3b 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002050:	205c      	movs	r0, #92	; 0x5c
 8002052:	f001 fa52 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3750      	adds	r7, #80	; 0x50
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	58024400 	.word	0x58024400
 8002064:	58021400 	.word	0x58021400
 8002068:	58021800 	.word	0x58021800
 800206c:	58020c00 	.word	0x58020c00
 8002070:	58021c00 	.word	0x58021c00

08002074 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8002080:	2103      	movs	r1, #3
 8002082:	4830      	ldr	r0, [pc, #192]	; (8002144 <QSPI_ResetMemory+0xd0>)
 8002084:	f7ff fc92 	bl	80019ac <MT25TL01G_ResetEnable>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800208e:	f06f 0304 	mvn.w	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e051      	b.n	800213a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8002096:	2103      	movs	r1, #3
 8002098:	482a      	ldr	r0, [pc, #168]	; (8002144 <QSPI_ResetMemory+0xd0>)
 800209a:	f7ff fcb9 	bl	8001a10 <MT25TL01G_ResetMemory>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80020a4:	f06f 0304 	mvn.w	r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e046      	b.n	800213a <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80020ac:	4926      	ldr	r1, [pc, #152]	; (8002148 <QSPI_ResetMemory+0xd4>)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3301      	adds	r3, #1
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	4820      	ldr	r0, [pc, #128]	; (8002144 <QSPI_ResetMemory+0xd0>)
 80020c2:	f7ff fab5 	bl	8001630 <MT25TL01G_AutoPollingMemReady>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80020cc:	f06f 0304 	mvn.w	r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e032      	b.n	800213a <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80020d4:	2100      	movs	r1, #0
 80020d6:	481b      	ldr	r0, [pc, #108]	; (8002144 <QSPI_ResetMemory+0xd0>)
 80020d8:	f7ff fc68 	bl	80019ac <MT25TL01G_ResetEnable>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80020e2:	f06f 0304 	mvn.w	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e027      	b.n	800213a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4815      	ldr	r0, [pc, #84]	; (8002144 <QSPI_ResetMemory+0xd0>)
 80020ee:	f7ff fc8f 	bl	8001a10 <MT25TL01G_ResetMemory>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80020f8:	f06f 0304 	mvn.w	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e01c      	b.n	800213a <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8002100:	4911      	ldr	r1, [pc, #68]	; (8002148 <QSPI_ResetMemory+0xd4>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <QSPI_ResetMemory+0xd4>)
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3301      	adds	r3, #1
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <QSPI_ResetMemory+0xd4>)
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3302      	adds	r3, #2
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	24000bf4 	.word	0x24000bf4
 8002148:	24000c40 	.word	0x24000c40

0800214c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b092      	sub	sp, #72	; 0x48
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8002154:	2300      	movs	r3, #0
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8002158:	2300      	movs	r3, #0
 800215a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800215c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8002162:	2385      	movs	r3, #133	; 0x85
 8002164:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800216e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8002178:	2302      	movs	r3, #2
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002180:	2300      	movs	r3, #0
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002184:	2300      	movs	r3, #0
 8002186:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4619      	mov	r1, r3
 8002192:	482b      	ldr	r0, [pc, #172]	; (8002240 <QSPI_DummyCyclesCfg+0xf4>)
 8002194:	f003 f884 	bl	80052a0 <HAL_QSPI_Command>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800219e:	f06f 0304 	mvn.w	r3, #4
 80021a2:	e048      	b.n	8002236 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021a4:	f107 030a 	add.w	r3, r7, #10
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4619      	mov	r1, r3
 80021ae:	4824      	ldr	r0, [pc, #144]	; (8002240 <QSPI_DummyCyclesCfg+0xf4>)
 80021b0:	f003 f966 	bl	8005480 <HAL_QSPI_Receive>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80021ba:	f06f 0304 	mvn.w	r3, #4
 80021be:	e03a      	b.n	8002236 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80021c0:	4920      	ldr	r1, [pc, #128]	; (8002244 <QSPI_DummyCyclesCfg+0xf8>)
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3301      	adds	r3, #1
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	481a      	ldr	r0, [pc, #104]	; (8002240 <QSPI_DummyCyclesCfg+0xf4>)
 80021d6:	f7ff fa67 	bl	80016a8 <MT25TL01G_WriteEnable>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80021e0:	f06f 0304 	mvn.w	r3, #4
 80021e4:	e027      	b.n	8002236 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80021e6:	2381      	movs	r3, #129	; 0x81
 80021e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80021ea:	897a      	ldrh	r2, [r7, #10]
 80021ec:	f640 730f 	movw	r3, #3855	; 0xf0f
 80021f0:	4013      	ands	r3, r2
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <QSPI_DummyCyclesCfg+0xfc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4619      	mov	r1, r3
 8002206:	480e      	ldr	r0, [pc, #56]	; (8002240 <QSPI_DummyCyclesCfg+0xf4>)
 8002208:	f003 f84a 	bl	80052a0 <HAL_QSPI_Command>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8002212:	f06f 0304 	mvn.w	r3, #4
 8002216:	e00e      	b.n	8002236 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002218:	f107 030a 	add.w	r3, r7, #10
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4619      	mov	r1, r3
 8002222:	4807      	ldr	r0, [pc, #28]	; (8002240 <QSPI_DummyCyclesCfg+0xf4>)
 8002224:	f003 f89a 	bl	800535c <HAL_QSPI_Transmit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800222e:	f06f 0304 	mvn.w	r3, #4
 8002232:	e000      	b.n	8002236 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8002234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002236:	4618      	mov	r0, r3
 8002238:	3748      	adds	r7, #72	; 0x48
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	24000bf4 	.word	0x24000bf4
 8002244:	24000c40 	.word	0x24000c40
 8002248:	ffff8080 	.word	0xffff8080

0800224c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002252:	2003      	movs	r0, #3
 8002254:	f001 f92c 	bl	80034b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002258:	f004 fa64 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_Init+0x68>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	4913      	ldr	r1, [pc, #76]	; (80022b8 <HAL_Init+0x6c>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_Init+0x68>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_Init+0x6c>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <HAL_Init+0x70>)
 800228e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <HAL_Init+0x74>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f814 	bl	80022c4 <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e002      	b.n	80022ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022a6:	f7fe ff3b 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	58024400 	.word	0x58024400
 80022b8:	08016508 	.word	0x08016508
 80022bc:	24000004 	.word	0x24000004
 80022c0:	24000000 	.word	0x24000000

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_InitTick+0x60>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e021      	b.n	800231c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_InitTick+0x64>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_InitTick+0x60>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 f911 	bl	8003516 <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f001 f8db 	bl	80034c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x68>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2400000c 	.word	0x2400000c
 8002328:	24000000 	.word	0x24000000
 800232c:	24000008 	.word	0x24000008

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2400000c 	.word	0x2400000c
 8002354:	24000c4c 	.word	0x24000c4c

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	24000c4c 	.word	0x24000c4c

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2400000c 	.word	0x2400000c

080023b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_GetREVID+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0c1b      	lsrs	r3, r3, #16
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	5c001000 	.word	0x5c001000

080023d0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	4904      	ldr	r1, [pc, #16]	; (80023f8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	58000400 	.word	0x58000400

080023fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3360      	adds	r3, #96	; 0x60
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	611a      	str	r2, [r3, #16]
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b087      	sub	sp, #28
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3360      	adds	r3, #96	; 0x60
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]
  }
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3330      	adds	r3, #48	; 0x30
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	4413      	add	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	211f      	movs	r1, #31
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0e9b      	lsrs	r3, r3, #26
 8002544:	f003 011f 	and.w	r1, r3, #31
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	431a      	orrs	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3314      	adds	r3, #20
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	0e5b      	lsrs	r3, r3, #25
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	0d1b      	lsrs	r3, r3, #20
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2107      	movs	r1, #7
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	401a      	ands	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	0d1b      	lsrs	r3, r3, #20
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	431a      	orrs	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0318 	and.w	r3, r3, #24
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025e0:	40d9      	lsrs	r1, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	400b      	ands	r3, r1
 80025e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	000fffff 	.word	0x000fffff

08002604 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6093      	str	r3, [r2, #8]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	5fffffc0 	.word	0x5fffffc0

08002628 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263c:	d101      	bne.n	8002642 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <LL_ADC_EnableInternalRegulator+0x24>)
 800265e:	4013      	ands	r3, r2
 8002660:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	6fffffc0 	.word	0x6fffffc0

08002678 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800268c:	d101      	bne.n	8002692 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <LL_ADC_IsEnabled+0x18>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <LL_ADC_IsEnabled+0x1a>
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d101      	bne.n	80026de <LL_ADC_REG_IsConversionOngoing+0x18>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d101      	bne.n	8002704 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e18f      	b.n	8002a4e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7fe fd09 	bl	8001154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff67 	bl	8002628 <LL_ADC_IsDeepPowerDownEnabled>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff4d 	bl	8002604 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff82 	bl	8002678 <LL_ADC_IsInternalRegulatorEnabled>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d114      	bne.n	80027a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff66 	bl	8002650 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002784:	4b87      	ldr	r3, [pc, #540]	; (80029a4 <HAL_ADC_Init+0x290>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	4a87      	ldr	r2, [pc, #540]	; (80029a8 <HAL_ADC_Init+0x294>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002796:	e002      	b.n	800279e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3b01      	subs	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f9      	bne.n	8002798 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff65 	bl	8002678 <LL_ADC_IsInternalRegulatorEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff76 	bl	80026c6 <LL_ADC_REG_IsConversionOngoing>
 80027da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 8129 	bne.w	8002a3c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 8125 	bne.w	8002a3c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff4a 	bl	80026a0 <LL_ADC_IsEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d136      	bne.n	8002880 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_ADC_Init+0x298>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_ADC_Init+0x112>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a63      	ldr	r2, [pc, #396]	; (80029b0 <HAL_ADC_Init+0x29c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10e      	bne.n	8002844 <HAL_ADC_Init+0x130>
 8002826:	4861      	ldr	r0, [pc, #388]	; (80029ac <HAL_ADC_Init+0x298>)
 8002828:	f7ff ff3a 	bl	80026a0 <LL_ADC_IsEnabled>
 800282c:	4604      	mov	r4, r0
 800282e:	4860      	ldr	r0, [pc, #384]	; (80029b0 <HAL_ADC_Init+0x29c>)
 8002830:	f7ff ff36 	bl	80026a0 <LL_ADC_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	4323      	orrs	r3, r4
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e008      	b.n	8002856 <HAL_ADC_Init+0x142>
 8002844:	485b      	ldr	r0, [pc, #364]	; (80029b4 <HAL_ADC_Init+0x2a0>)
 8002846:	f7ff ff2b 	bl	80026a0 <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d012      	beq.n	8002880 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a53      	ldr	r2, [pc, #332]	; (80029ac <HAL_ADC_Init+0x298>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_ADC_Init+0x15a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a51      	ldr	r2, [pc, #324]	; (80029b0 <HAL_ADC_Init+0x29c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_ADC_Init+0x15e>
 800286e:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_ADC_Init+0x2a4>)
 8002870:	e000      	b.n	8002874 <HAL_ADC_Init+0x160>
 8002872:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_ADC_Init+0x2a8>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f7ff fdbe 	bl	80023fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002880:	f7ff fd9a 	bl	80023b8 <HAL_GetREVID>
 8002884:	4603      	mov	r3, r0
 8002886:	f241 0203 	movw	r2, #4099	; 0x1003
 800288a:	4293      	cmp	r3, r2
 800288c:	d914      	bls.n	80028b8 <HAL_ADC_Init+0x1a4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b10      	cmp	r3, #16
 8002894:	d110      	bne.n	80028b8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7d5b      	ldrb	r3, [r3, #21]
 800289a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7f1b      	ldrb	r3, [r3, #28]
 80028ac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028ae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028b0:	f043 030c 	orr.w	r3, r3, #12
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	e00d      	b.n	80028d4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7d5b      	ldrb	r3, [r3, #21]
 80028bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7f1b      	ldrb	r3, [r3, #28]
 80028ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7f1b      	ldrb	r3, [r3, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	045b      	lsls	r3, r3, #17
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <HAL_ADC_Init+0x2ac>)
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	430b      	orrs	r3, r1
 8002918:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fed1 	bl	80026c6 <LL_ADC_REG_IsConversionOngoing>
 8002924:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fede 	bl	80026ec <LL_ADC_INJ_IsConversionOngoing>
 8002930:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d15f      	bne.n	80029f8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d15c      	bne.n	80029f8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7d1b      	ldrb	r3, [r3, #20]
 8002942:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_ADC_Init+0x2b0>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	430b      	orrs	r3, r1
 800295e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002966:	2b01      	cmp	r3, #1
 8002968:	d130      	bne.n	80029cc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_ADC_Init+0x2b4>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800297e:	3a01      	subs	r2, #1
 8002980:	0411      	lsls	r1, r2, #16
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002992:	430a      	orrs	r2, r1
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	611a      	str	r2, [r3, #16]
 80029a0:	e01c      	b.n	80029dc <HAL_ADC_Init+0x2c8>
 80029a2:	bf00      	nop
 80029a4:	24000000 	.word	0x24000000
 80029a8:	053e2d63 	.word	0x053e2d63
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40022100 	.word	0x40022100
 80029b4:	58026000 	.word	0x58026000
 80029b8:	40022300 	.word	0x40022300
 80029bc:	58026300 	.word	0x58026300
 80029c0:	fff0c003 	.word	0xfff0c003
 80029c4:	ffffbffc 	.word	0xffffbffc
 80029c8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fb80 	bl	80030f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10c      	bne.n	8002a1a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f023 010f 	bic.w	r1, r3, #15
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
 8002a18:	e007      	b.n	8002a2a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 020f 	bic.w	r2, r2, #15
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f023 0303 	bic.w	r3, r3, #3
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
 8002a3a:	e007      	b.n	8002a4c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0210 	orr.w	r2, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop

08002a58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b0a1      	sub	sp, #132	; 0x84
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a9d      	ldr	r2, [pc, #628]	; (8002ce8 <HAL_ADC_ConfigChannel+0x290>)
 8002a72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x2a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e321      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x66e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fe19 	bl	80026c6 <LL_ADC_REG_IsConversionOngoing>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 8306 	bne.w	80030a8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d108      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x62>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	e016      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x90>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aca:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x7e>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e003      	b.n	8002ade <HAL_ADC_ConfigChannel+0x86>
  return __builtin_clz(value);
 8002ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	69d1      	ldr	r1, [r2, #28]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	430b      	orrs	r3, r1
 8002af4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f7ff fd02 	bl	800250c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fdda 	bl	80026c6 <LL_ADC_REG_IsConversionOngoing>
 8002b12:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fde7 	bl	80026ec <LL_ADC_INJ_IsConversionOngoing>
 8002b1e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 80b3 	bne.w	8002c8e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80af 	bne.w	8002c8e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f7ff fd11 	bl	8002564 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_ADC_ConfigChannel+0x294>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4e:	d10b      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x110>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	e01d      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x14c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x136>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	e00a      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x14c>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d027      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6919      	ldr	r1, [r3, #16]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bbc:	f7ff fc52 	bl	8002464 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6919      	ldr	r1, [r3, #16]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	7e5b      	ldrb	r3, [r3, #25]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x17e>
 8002bd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bd4:	e000      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x180>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f7ff fc7c 	bl	80024d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6919      	ldr	r1, [r3, #16]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7e1b      	ldrb	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x19c>
 8002bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf2:	e000      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x19e>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f7ff fc54 	bl	80024a4 <LL_ADC_SetDataRightShift>
 8002bfc:	e047      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d107      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	069b      	lsls	r3, r3, #26
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d107      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c44:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	069b      	lsls	r3, r3, #26
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d107      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c68:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	069b      	lsls	r3, r3, #26
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d107      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c8c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fd04 	bl	80026a0 <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 820d 	bne.w	80030ba <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f7ff fc85 	bl	80025bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_ADC_ConfigChannel+0x290>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	f040 8133 	bne.w	8002f24 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d110      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x298>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	2b09      	cmp	r3, #9
 8002cdc:	bf94      	ite	ls
 8002cde:	2301      	movls	r3, #1
 8002ce0:	2300      	movhi	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e01e      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x2cc>
 8002ce6:	bf00      	nop
 8002ce8:	47ff0000 	.word	0x47ff0000
 8002cec:	5c001000 	.word	0x5c001000
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d00:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2b09      	cmp	r3, #9
 8002d1c:	bf94      	ite	ls
 8002d1e:	2301      	movls	r3, #1
 8002d20:	2300      	movhi	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d079      	beq.n	8002e1c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x2ec>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	069b      	lsls	r3, r3, #26
 8002d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d42:	e015      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x318>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	069b      	lsls	r3, r3, #26
 8002d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x338>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	e017      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x368>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e003      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	ea42 0103 	orr.w	r1, r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x38e>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	051b      	lsls	r3, r3, #20
 8002de4:	e018      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x3c0>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	e07e      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d107      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x3e0>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	3301      	adds	r3, #1
 8002e30:	069b      	lsls	r3, r3, #26
 8002e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e36:	e015      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x40c>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	069b      	lsls	r3, r3, #26
 8002e60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x42c>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	3301      	adds	r3, #1
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	e017      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x45c>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	61bb      	str	r3, [r7, #24]
  return result;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e003      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	ea42 0103 	orr.w	r1, r2, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x488>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0e9b      	lsrs	r3, r3, #26
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b1e      	subs	r3, #30
 8002ed8:	051b      	lsls	r3, r3, #20
 8002eda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ede:	e01b      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x4c0>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	60fb      	str	r3, [r7, #12]
  return result;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	f003 021f 	and.w	r2, r3, #31
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b1e      	subs	r3, #30
 8002f12:	051b      	lsls	r3, r3, #20
 8002f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7ff fb20 	bl	8002564 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f280 80c6 	bge.w	80030ba <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a67      	ldr	r2, [pc, #412]	; (80030d0 <HAL_ADC_ConfigChannel+0x678>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x4ea>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_ADC_ConfigChannel+0x67c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x4ee>
 8002f42:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <HAL_ADC_ConfigChannel+0x680>)
 8002f44:	e000      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x4f0>
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_ADC_ConfigChannel+0x684>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fa7d 	bl	8002448 <LL_ADC_GetCommonPathInternalCh>
 8002f4e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a5e      	ldr	r2, [pc, #376]	; (80030d0 <HAL_ADC_ConfigChannel+0x678>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x50c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a5d      	ldr	r2, [pc, #372]	; (80030d4 <HAL_ADC_ConfigChannel+0x67c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10e      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x52a>
 8002f64:	485a      	ldr	r0, [pc, #360]	; (80030d0 <HAL_ADC_ConfigChannel+0x678>)
 8002f66:	f7ff fb9b 	bl	80026a0 <LL_ADC_IsEnabled>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	4859      	ldr	r0, [pc, #356]	; (80030d4 <HAL_ADC_ConfigChannel+0x67c>)
 8002f6e:	f7ff fb97 	bl	80026a0 <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4323      	orrs	r3, r4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e008      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x53c>
 8002f82:	4857      	ldr	r0, [pc, #348]	; (80030e0 <HAL_ADC_ConfigChannel+0x688>)
 8002f84:	f7ff fb8c 	bl	80026a0 <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d07d      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <HAL_ADC_ConfigChannel+0x68c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d130      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x5ac>
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d12b      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	; (80030e0 <HAL_ADC_ConfigChannel+0x688>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	f040 8081 	bne.w	80030ba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a44      	ldr	r2, [pc, #272]	; (80030d0 <HAL_ADC_ConfigChannel+0x678>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x574>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a43      	ldr	r2, [pc, #268]	; (80030d4 <HAL_ADC_ConfigChannel+0x67c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x578>
 8002fcc:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_ADC_ConfigChannel+0x680>)
 8002fce:	e000      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x57a>
 8002fd0:	4a42      	ldr	r2, [pc, #264]	; (80030dc <HAL_ADC_ConfigChannel+0x684>)
 8002fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7ff fa21 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_ADC_ConfigChannel+0x690>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	4a41      	ldr	r2, [pc, #260]	; (80030ec <HAL_ADC_ConfigChannel+0x694>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ff4:	e002      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f9      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003002:	e05a      	b.n	80030ba <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a39      	ldr	r2, [pc, #228]	; (80030f0 <HAL_ADC_ConfigChannel+0x698>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d11e      	bne.n	800304c <HAL_ADC_ConfigChannel+0x5f4>
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d119      	bne.n	800304c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a30      	ldr	r2, [pc, #192]	; (80030e0 <HAL_ADC_ConfigChannel+0x688>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d14b      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <HAL_ADC_ConfigChannel+0x678>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x5de>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a28      	ldr	r2, [pc, #160]	; (80030d4 <HAL_ADC_ConfigChannel+0x67c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x5e2>
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <HAL_ADC_ConfigChannel+0x680>)
 8003038:	e000      	b.n	800303c <HAL_ADC_ConfigChannel+0x5e4>
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_ADC_ConfigChannel+0x684>)
 800303c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7ff f9ec 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800304a:	e036      	b.n	80030ba <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <HAL_ADC_ConfigChannel+0x69c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d131      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x662>
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d12c      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_ADC_ConfigChannel+0x688>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d127      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_ADC_ConfigChannel+0x678>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_ADC_ConfigChannel+0x626>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <HAL_ADC_ConfigChannel+0x67c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x62a>
 800307e:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_ADC_ConfigChannel+0x680>)
 8003080:	e000      	b.n	8003084 <HAL_ADC_ConfigChannel+0x62c>
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_ADC_ConfigChannel+0x684>)
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7ff f9c8 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
 8003092:	e012      	b.n	80030ba <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030a6:	e008      	b.n	80030ba <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3784      	adds	r7, #132	; 0x84
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40022100 	.word	0x40022100
 80030d8:	40022300 	.word	0x40022300
 80030dc:	58026300 	.word	0x58026300
 80030e0:	58026000 	.word	0x58026000
 80030e4:	cb840000 	.word	0xcb840000
 80030e8:	24000000 	.word	0x24000000
 80030ec:	053e2d63 	.word	0x053e2d63
 80030f0:	c7520000 	.word	0xc7520000
 80030f4:	cfb80000 	.word	0xcfb80000

080030f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a7a      	ldr	r2, [pc, #488]	; (80032f0 <ADC_ConfigureBoostMode+0x1f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <ADC_ConfigureBoostMode+0x1c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <ADC_ConfigureBoostMode+0x1fc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d109      	bne.n	8003128 <ADC_ConfigureBoostMode+0x30>
 8003114:	4b78      	ldr	r3, [pc, #480]	; (80032f8 <ADC_ConfigureBoostMode+0x200>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e008      	b.n	800313a <ADC_ConfigureBoostMode+0x42>
 8003128:	4b74      	ldr	r3, [pc, #464]	; (80032fc <ADC_ConfigureBoostMode+0x204>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01c      	beq.n	8003178 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800313e:	f003 fc6b 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8003142:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800314c:	d010      	beq.n	8003170 <ADC_ConfigureBoostMode+0x78>
 800314e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003152:	d873      	bhi.n	800323c <ADC_ConfigureBoostMode+0x144>
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d002      	beq.n	8003160 <ADC_ConfigureBoostMode+0x68>
 800315a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800315e:	d16d      	bne.n	800323c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	60fb      	str	r3, [r7, #12]
        break;
 800316e:	e068      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	60fb      	str	r3, [r7, #12]
        break;
 8003176:	e064      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003178:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	f004 fe9a 	bl	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003184:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800318e:	d051      	beq.n	8003234 <ADC_ConfigureBoostMode+0x13c>
 8003190:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003194:	d854      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 8003196:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800319a:	d047      	beq.n	800322c <ADC_ConfigureBoostMode+0x134>
 800319c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031a0:	d84e      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031a6:	d03d      	beq.n	8003224 <ADC_ConfigureBoostMode+0x12c>
 80031a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031ac:	d848      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b2:	d033      	beq.n	800321c <ADC_ConfigureBoostMode+0x124>
 80031b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b8:	d842      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031be:	d029      	beq.n	8003214 <ADC_ConfigureBoostMode+0x11c>
 80031c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031c4:	d83c      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031ca:	d01a      	beq.n	8003202 <ADC_ConfigureBoostMode+0x10a>
 80031cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031d0:	d836      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031d6:	d014      	beq.n	8003202 <ADC_ConfigureBoostMode+0x10a>
 80031d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031dc:	d830      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e2:	d00e      	beq.n	8003202 <ADC_ConfigureBoostMode+0x10a>
 80031e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e8:	d82a      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031ee:	d008      	beq.n	8003202 <ADC_ConfigureBoostMode+0x10a>
 80031f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f4:	d824      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x148>
 80031f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031fa:	d002      	beq.n	8003202 <ADC_ConfigureBoostMode+0x10a>
 80031fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003200:	d11e      	bne.n	8003240 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	0c9b      	lsrs	r3, r3, #18
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	60fb      	str	r3, [r7, #12]
        break;
 8003212:	e016      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
        break;
 800321a:	e012      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	60fb      	str	r3, [r7, #12]
        break;
 8003222:	e00e      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	60fb      	str	r3, [r7, #12]
        break;
 800322a:	e00a      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	09db      	lsrs	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
        break;
 8003232:	e006      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	60fb      	str	r3, [r7, #12]
        break;
 800323a:	e002      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
        break;
 800323c:	bf00      	nop
 800323e:	e000      	b.n	8003242 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003240:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003242:	f7ff f8b9 	bl	80023b8 <HAL_GetREVID>
 8003246:	4603      	mov	r3, r0
 8003248:	f241 0203 	movw	r2, #4099	; 0x1003
 800324c:	4293      	cmp	r3, r2
 800324e:	d815      	bhi.n	800327c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <ADC_ConfigureBoostMode+0x208>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d908      	bls.n	800326a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003266:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003268:	e03e      	b.n	80032e8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	e035      	b.n	80032e8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <ADC_ConfigureBoostMode+0x20c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d808      	bhi.n	800329c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003298:	609a      	str	r2, [r3, #8]
}
 800329a:	e025      	b.n	80032e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <ADC_ConfigureBoostMode+0x210>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d80a      	bhi.n	80032ba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b6:	609a      	str	r2, [r3, #8]
}
 80032b8:	e016      	b.n	80032e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a13      	ldr	r2, [pc, #76]	; (800330c <ADC_ConfigureBoostMode+0x214>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d80a      	bhi.n	80032d8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	609a      	str	r2, [r3, #8]
}
 80032d6:	e007      	b.n	80032e8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40022100 	.word	0x40022100
 80032f8:	40022300 	.word	0x40022300
 80032fc:	58026300 	.word	0x58026300
 8003300:	01312d00 	.word	0x01312d00
 8003304:	005f5e10 	.word	0x005f5e10
 8003308:	00bebc20 	.word	0x00bebc20
 800330c:	017d7840 	.word	0x017d7840

08003310 <__NVIC_SetPriorityGrouping>:
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <__NVIC_SetPriorityGrouping+0x40>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800332c:	4013      	ands	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	4313      	orrs	r3, r2
 800333c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333e:	4a04      	ldr	r2, [pc, #16]	; (8003350 <__NVIC_SetPriorityGrouping+0x40>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00
 8003354:	05fa0000 	.word	0x05fa0000

08003358 <__NVIC_GetPriorityGrouping>:
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <__NVIC_GetPriorityGrouping+0x18>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0307 	and.w	r3, r3, #7
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_EnableIRQ>:
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db0b      	blt.n	800339e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4907      	ldr	r1, [pc, #28]	; (80033ac <__NVIC_EnableIRQ+0x38>)
 800338e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_SetPriority>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	db0a      	blt.n	80033da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <__NVIC_SetPriority+0x4c>)
 80033ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	440b      	add	r3, r1
 80033d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033d8:	e00a      	b.n	80033f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4908      	ldr	r1, [pc, #32]	; (8003400 <__NVIC_SetPriority+0x50>)
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	3b04      	subs	r3, #4
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	440b      	add	r3, r1
 80033ee:	761a      	strb	r2, [r3, #24]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000e100 	.word	0xe000e100
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <NVIC_EncodePriority>:
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f1c3 0307 	rsb	r3, r3, #7
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf28      	it	cs
 8003422:	2304      	movcs	r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3304      	adds	r3, #4
 800342a:	2b06      	cmp	r3, #6
 800342c:	d902      	bls.n	8003434 <NVIC_EncodePriority+0x30>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3b03      	subs	r3, #3
 8003432:	e000      	b.n	8003436 <NVIC_EncodePriority+0x32>
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	401a      	ands	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800344c:	f04f 31ff 	mov.w	r1, #4294967295
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43d9      	mvns	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	4313      	orrs	r3, r2
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800347c:	d301      	bcc.n	8003482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347e:	2301      	movs	r3, #1
 8003480:	e00f      	b.n	80034a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <SysTick_Config+0x40>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348a:	210f      	movs	r1, #15
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	f7ff ff8e 	bl	80033b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <SysTick_Config+0x40>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <SysTick_Config+0x40>)
 800349c:	2207      	movs	r2, #7
 800349e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	e000e010 	.word	0xe000e010

080034b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff29 	bl	8003310 <__NVIC_SetPriorityGrouping>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff40 	bl	8003358 <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ff90 	bl	8003404 <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff5f 	bl	80033b0 <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff33 	bl	8003374 <__NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffa4 	bl	800346c <SysTick_Config>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003534:	f3bf 8f5f 	dmb	sy
}
 8003538:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_MPU_Disable+0x28>)
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	4a06      	ldr	r2, [pc, #24]	; (8003558 <HAL_MPU_Disable+0x28>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003544:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_MPU_Disable+0x2c>)
 8003548:	2200      	movs	r2, #0
 800354a:	605a      	str	r2, [r3, #4]
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00
 800355c:	e000ed90 	.word	0xe000ed90

08003560 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003568:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <HAL_MPU_Enable+0x38>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_MPU_Enable+0x3c>)
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	4a09      	ldr	r2, [pc, #36]	; (800359c <HAL_MPU_Enable+0x3c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800357e:	f3bf 8f4f 	dsb	sy
}
 8003582:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003584:	f3bf 8f6f 	isb	sy
}
 8003588:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed90 	.word	0xe000ed90
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	785a      	ldrb	r2, [r3, #1]
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_MPU_ConfigRegion+0x84>)
 80035ae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d029      	beq.n	800360c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80035b8:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <HAL_MPU_ConfigRegion+0x84>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7b1b      	ldrb	r3, [r3, #12]
 80035c4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7adb      	ldrb	r3, [r3, #11]
 80035ca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7a9b      	ldrb	r3, [r3, #10]
 80035d2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7b5b      	ldrb	r3, [r3, #13]
 80035da:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7b9b      	ldrb	r3, [r3, #14]
 80035e2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7bdb      	ldrb	r3, [r3, #15]
 80035ea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7a5b      	ldrb	r3, [r3, #9]
 80035f2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7a1b      	ldrb	r3, [r3, #8]
 80035fa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035fc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003606:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003608:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800360a:	e005      	b.n	8003618 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_MPU_ConfigRegion+0x84>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003612:	4b04      	ldr	r3, [pc, #16]	; (8003624 <HAL_MPU_ConfigRegion+0x84>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed90 	.word	0xe000ed90

08003628 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e054      	b.n	80036e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7f5b      	ldrb	r3, [r3, #29]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fe22 	bl	8001294 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	791b      	ldrb	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a22      	ldr	r2, [pc, #136]	; (80036ec <HAL_CRC_Init+0xc4>)
 8003664:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0218 	bic.w	r2, r2, #24
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	e00c      	b.n	8003692 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	461a      	mov	r2, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f834 	bl	80036f0 <HAL_CRCEx_Polynomial_Set>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e028      	b.n	80036e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	795b      	ldrb	r3, [r3, #5]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f04f 32ff 	mov.w	r2, #4294967295
 80036a2:	611a      	str	r2, [r3, #16]
 80036a4:	e004      	b.n	80036b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6912      	ldr	r2, [r2, #16]
 80036ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	04c11db7 	.word	0x04c11db7

080036f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003700:	231f      	movs	r3, #31
 8003702:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
 8003712:	e063      	b.n	80037dc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003714:	bf00      	nop
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	613a      	str	r2, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <HAL_CRCEx_Polynomial_Set+0x44>
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b18      	cmp	r3, #24
 8003738:	d846      	bhi.n	80037c8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <HAL_CRCEx_Polynomial_Set+0x50>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	080037cf 	.word	0x080037cf
 8003744:	080037c9 	.word	0x080037c9
 8003748:	080037c9 	.word	0x080037c9
 800374c:	080037c9 	.word	0x080037c9
 8003750:	080037c9 	.word	0x080037c9
 8003754:	080037c9 	.word	0x080037c9
 8003758:	080037c9 	.word	0x080037c9
 800375c:	080037c9 	.word	0x080037c9
 8003760:	080037bd 	.word	0x080037bd
 8003764:	080037c9 	.word	0x080037c9
 8003768:	080037c9 	.word	0x080037c9
 800376c:	080037c9 	.word	0x080037c9
 8003770:	080037c9 	.word	0x080037c9
 8003774:	080037c9 	.word	0x080037c9
 8003778:	080037c9 	.word	0x080037c9
 800377c:	080037c9 	.word	0x080037c9
 8003780:	080037b1 	.word	0x080037b1
 8003784:	080037c9 	.word	0x080037c9
 8003788:	080037c9 	.word	0x080037c9
 800378c:	080037c9 	.word	0x080037c9
 8003790:	080037c9 	.word	0x080037c9
 8003794:	080037c9 	.word	0x080037c9
 8003798:	080037c9 	.word	0x080037c9
 800379c:	080037c9 	.word	0x080037c9
 80037a0:	080037a5 	.word	0x080037a5
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d913      	bls.n	80037d2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80037ae:	e010      	b.n	80037d2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b07      	cmp	r3, #7
 80037b4:	d90f      	bls.n	80037d6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80037ba:	e00c      	b.n	80037d6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d90b      	bls.n	80037da <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80037c6:	e008      	b.n	80037da <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
        break;
 80037cc:	e006      	b.n	80037dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037ce:	bf00      	nop
 80037d0:	e004      	b.n	80037dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037d2:	bf00      	nop
 80037d4:	e002      	b.n	80037dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037da:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 0118 	bic.w	r1, r3, #24
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800381a:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_GPIO_Init+0x234>)
 800381c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800381e:	e194      	b.n	8003b4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2101      	movs	r1, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8186 	beq.w	8003b44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d005      	beq.n	8003850 <HAL_GPIO_Init+0x44>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d130      	bne.n	80038b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003886:	2201      	movs	r2, #1
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0201 	and.w	r2, r3, #1
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d017      	beq.n	80038ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	2203      	movs	r2, #3
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d123      	bne.n	8003942 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	08da      	lsrs	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3208      	adds	r2, #8
 8003902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	220f      	movs	r2, #15
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	08da      	lsrs	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3208      	adds	r2, #8
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2203      	movs	r2, #3
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0203 	and.w	r2, r3, #3
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80e0 	beq.w	8003b44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003984:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_GPIO_Init+0x238>)
 8003986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_GPIO_Init+0x238>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_GPIO_Init+0x238>)
 8003996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a2:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <HAL_GPIO_Init+0x23c>)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	3302      	adds	r3, #2
 80039aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <HAL_GPIO_Init+0x240>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d052      	beq.n	8003a74 <HAL_GPIO_Init+0x268>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_GPIO_Init+0x244>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d031      	beq.n	8003a3a <HAL_GPIO_Init+0x22e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_GPIO_Init+0x248>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02b      	beq.n	8003a36 <HAL_GPIO_Init+0x22a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <HAL_GPIO_Init+0x24c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d025      	beq.n	8003a32 <HAL_GPIO_Init+0x226>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_GPIO_Init+0x250>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <HAL_GPIO_Init+0x222>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_GPIO_Init+0x254>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d019      	beq.n	8003a2a <HAL_GPIO_Init+0x21e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_GPIO_Init+0x258>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0x21a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <HAL_GPIO_Init+0x25c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x216>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_GPIO_Init+0x260>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_Init+0x212>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_GPIO_Init+0x264>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_Init+0x20e>
 8003a16:	2309      	movs	r3, #9
 8003a18:	e02d      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a1a:	230a      	movs	r3, #10
 8003a1c:	e02b      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	e029      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a22:	2307      	movs	r3, #7
 8003a24:	e027      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a26:	2306      	movs	r3, #6
 8003a28:	e025      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	e023      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e021      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a32:	2303      	movs	r3, #3
 8003a34:	e01f      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e01d      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e01b      	b.n	8003a76 <HAL_GPIO_Init+0x26a>
 8003a3e:	bf00      	nop
 8003a40:	58000080 	.word	0x58000080
 8003a44:	58024400 	.word	0x58024400
 8003a48:	58000400 	.word	0x58000400
 8003a4c:	58020000 	.word	0x58020000
 8003a50:	58020400 	.word	0x58020400
 8003a54:	58020800 	.word	0x58020800
 8003a58:	58020c00 	.word	0x58020c00
 8003a5c:	58021000 	.word	0x58021000
 8003a60:	58021400 	.word	0x58021400
 8003a64:	58021800 	.word	0x58021800
 8003a68:	58021c00 	.word	0x58021c00
 8003a6c:	58022000 	.word	0x58022000
 8003a70:	58022400 	.word	0x58022400
 8003a74:	2300      	movs	r3, #0
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	0092      	lsls	r2, r2, #2
 8003a7e:	4093      	lsls	r3, r2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a86:	4938      	ldr	r1, [pc, #224]	; (8003b68 <HAL_GPIO_Init+0x35c>)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f ae63 	bne.w	8003820 <HAL_GPIO_Init+0x14>
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	3724      	adds	r7, #36	; 0x24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	58000400 	.word	0x58000400

08003b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b7c:	787b      	ldrb	r3, [r7, #1]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b82:	887a      	ldrh	r2, [r7, #2]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b88:	e003      	b.n	8003b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b8a:	887b      	ldrh	r3, [r7, #2]
 8003b8c:	041a      	lsls	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	619a      	str	r2, [r3, #24]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba0:	b08f      	sub	sp, #60	; 0x3c
 8003ba2:	af0a      	add	r7, sp, #40	; 0x28
 8003ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e116      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f009 faf0 	bl	800d1b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f005 fed9 	bl	80099a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	687e      	ldr	r6, [r7, #4]
 8003bfc:	466d      	mov	r5, sp
 8003bfe:	f106 0410 	add.w	r4, r6, #16
 8003c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c12:	1d33      	adds	r3, r6, #4
 8003c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f005 fda4 	bl	8009764 <USB_CoreInit>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0d7      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f005 fec7 	bl	80099c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e04a      	b.n	8003cd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	333d      	adds	r3, #61	; 0x3d
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	333c      	adds	r3, #60	; 0x3c
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	b298      	uxth	r0, r3
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3356      	adds	r3, #86	; 0x56
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3340      	adds	r3, #64	; 0x40
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3344      	adds	r3, #68	; 0x44
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3348      	adds	r3, #72	; 0x48
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334c      	adds	r3, #76	; 0x4c
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3af      	bcc.n	8003c40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e044      	b.n	8003d70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d3b5      	bcc.n	8003ce6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	687e      	ldr	r6, [r7, #4]
 8003d82:	466d      	mov	r5, sp
 8003d84:	f106 0410 	add.w	r4, r6, #16
 8003d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d98:	1d33      	adds	r3, r6, #4
 8003d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9c:	6838      	ldr	r0, [r7, #0]
 8003d9e:	f005 fe5f 	bl	8009a60 <USB_DevInit>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e014      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d102      	bne.n	8003dd2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f001 f96f 	bl	80050b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f006 fea1 	bl	800ab1e <USB_DevDisconnect>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003de6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_PCD_Start+0x1c>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e022      	b.n	8003e48 <HAL_PCD_Start+0x62>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f005 fda8 	bl	8009984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f006 fe4f 	bl	800aadc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b08d      	sub	sp, #52	; 0x34
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f006 ff0d 	bl	800ac86 <USB_GetMode>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 84b7 	bne.w	80047e2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f006 fe71 	bl	800ab60 <USB_ReadInterrupts>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 84ad 	beq.w	80047e0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f006 fe5e 	bl	800ab60 <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d107      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f002 0202 	and.w	r2, r2, #2
 8003ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f006 fe4c 	bl	800ab60 <USB_ReadInterrupts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d161      	bne.n	8003f96 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0210 	bic.w	r2, r2, #16
 8003ee0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f003 020f 	and.w	r2, r3, #15
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	3304      	adds	r3, #4
 8003f00:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	0c5b      	lsrs	r3, r3, #17
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d124      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d035      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6a38      	ldr	r0, [r7, #32]
 8003f2e:	f006 fc83 	bl	800a838 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f3e:	441a      	add	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f50:	441a      	add	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	615a      	str	r2, [r3, #20]
 8003f56:	e016      	b.n	8003f86 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	0c5b      	lsrs	r3, r3, #17
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d110      	bne.n	8003f86 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6a38      	ldr	r0, [r7, #32]
 8003f70:	f006 fc62 	bl	800a838 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f80:	441a      	add	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0210 	orr.w	r2, r2, #16
 8003f94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f006 fde0 	bl	800ab60 <USB_ReadInterrupts>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003faa:	f040 80a7 	bne.w	80040fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f006 fde5 	bl	800ab86 <USB_ReadDevAllOutEpInterrupt>
 8003fbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003fbe:	e099      	b.n	80040f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 808e 	beq.w	80040e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f006 fe09 	bl	800abee <USB_ReadDevOutEPInterrupt>
 8003fdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00c      	beq.n	8004002 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fed1 	bl	8004da4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00c      	beq.n	8004026 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	461a      	mov	r2, r3
 800401a:	2308      	movs	r3, #8
 800401c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800401e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 ffa7 	bl	8004f74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	461a      	mov	r2, r3
 800403e:	2310      	movs	r3, #16
 8004040:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d030      	beq.n	80040ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d109      	bne.n	800406c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800406a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800406c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	3304      	adds	r3, #4
 8004080:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	78db      	ldrb	r3, [r3, #3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	b2db      	uxtb	r3, r3
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f009 f9b0 	bl	800d3fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	461a      	mov	r2, r3
 80040aa:	2302      	movs	r3, #2
 80040ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	2320      	movs	r3, #32
 80040c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	461a      	mov	r2, r3
 80040e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	3301      	adds	r3, #1
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f47f af62 	bne.w	8003fc0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f006 fd2d 	bl	800ab60 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004110:	f040 80db 	bne.w	80042ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f006 fd4e 	bl	800abba <USB_ReadDevAllInEpInterrupt>
 800411e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004124:	e0cd      	b.n	80042c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80c2 	beq.w	80042b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f006 fd74 	bl	800ac2a <USB_ReadDevInEPInterrupt>
 8004142:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d057      	beq.n	80041fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2201      	movs	r2, #1
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	43db      	mvns	r3, r3
 8004168:	69f9      	ldr	r1, [r7, #28]
 800416a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800416e:	4013      	ands	r3, r2
 8004170:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	461a      	mov	r2, r3
 8004180:	2301      	movs	r3, #1
 8004182:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d132      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	3348      	adds	r3, #72	; 0x48
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4403      	add	r3, r0
 80041ac:	3344      	adds	r3, #68	; 0x44
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4419      	add	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4403      	add	r3, r0
 80041c0:	3348      	adds	r3, #72	; 0x48
 80041c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d113      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x3a2>
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	334c      	adds	r3, #76	; 0x4c
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041ea:	461a      	mov	r2, r3
 80041ec:	2101      	movs	r1, #1
 80041ee:	f006 fd7d 	bl	800acec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f009 f87a 	bl	800d2f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	461a      	mov	r2, r3
 8004216:	2308      	movs	r3, #8
 8004218:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004230:	461a      	mov	r2, r3
 8004232:	2310      	movs	r3, #16
 8004234:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	461a      	mov	r2, r3
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800425c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800425e:	6a38      	ldr	r0, [r7, #32]
 8004260:	f005 fd5c 	bl	8009d1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	3338      	adds	r3, #56	; 0x38
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	78db      	ldrb	r3, [r3, #3]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d108      	bne.n	8004292 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f009 f8c7 	bl	800d420 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	461a      	mov	r2, r3
 80042a0:	2302      	movs	r3, #2
 80042a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fcea 	bl	8004c8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	3301      	adds	r3, #1
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f af2e 	bne.w	8004126 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f006 fc46 	bl	800ab60 <USB_ReadInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042de:	d122      	bne.n	8004326 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d108      	bne.n	8004310 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004306:	2100      	movs	r1, #0
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fef5 	bl	80050f8 <HAL_PCDEx_LPM_Callback>
 800430e:	e002      	b.n	8004316 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f009 f865 	bl	800d3e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f006 fc18 	bl	800ab60 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d112      	bne.n	8004362 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d102      	bne.n	8004352 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f009 f821 	bl	800d394 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004360:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f006 fbfa 	bl	800ab60 <USB_ReadInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004376:	d121      	bne.n	80043bc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004386:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d111      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80043ac:	2101      	movs	r1, #1
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fea2 	bl	80050f8 <HAL_PCDEx_LPM_Callback>
 80043b4:	e002      	b.n	80043bc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f008 ffec 	bl	800d394 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f006 fbcd 	bl	800ab60 <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	f040 80b7 	bne.w	8004542 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2110      	movs	r1, #16
 80043ee:	4618      	mov	r0, r3
 80043f0:	f005 fc94 	bl	8009d1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f8:	e046      	b.n	8004488 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	461a      	mov	r2, r3
 8004408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800440c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441e:	0151      	lsls	r1, r2, #5
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	440a      	add	r2, r1
 8004424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800442c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004440:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	440a      	add	r2, r1
 8004458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800445c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004460:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004472:	0151      	lsls	r1, r2, #5
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	440a      	add	r2, r1
 8004478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800447c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004480:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	3301      	adds	r3, #1
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448e:	429a      	cmp	r2, r3
 8004490:	d3b3      	bcc.n	80043fa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044be:	f043 030b 	orr.w	r3, r3, #11
 80044c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d4:	f043 030b 	orr.w	r3, r3, #11
 80044d8:	6453      	str	r3, [r2, #68]	; 0x44
 80044da:	e015      	b.n	8004508 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	4619      	mov	r1, r3
 80044ec:	f242 032b 	movw	r3, #8235	; 0x202b
 80044f0:	4313      	orrs	r3, r2
 80044f2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004502:	f043 030b 	orr.w	r3, r3, #11
 8004506:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004516:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800451a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800452c:	461a      	mov	r2, r3
 800452e:	f006 fbdd 	bl	800acec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f006 fb0a 	bl	800ab60 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004556:	d124      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f006 fba1 	bl	800aca4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f005 fc55 	bl	8009e16 <USB_GetDevSpeed>
 800456c:	4603      	mov	r3, r0
 800456e:	461a      	mov	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681c      	ldr	r4, [r3, #0]
 8004578:	f002 fa4e 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 800457c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	4620      	mov	r0, r4
 8004588:	f005 f95a 	bl	8009840 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f008 fed8 	bl	800d342 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f006 fada 	bl	800ab60 <USB_ReadInterrupts>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d10a      	bne.n	80045cc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f008 feb5 	bl	800d326 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f002 0208 	and.w	r2, r2, #8
 80045ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f006 fac5 	bl	800ab60 <USB_ReadInterrupts>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d122      	bne.n	8004626 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ec:	2301      	movs	r3, #1
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
 80045f0:	e014      	b.n	800461c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	b2db      	uxtb	r3, r3
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fb09 	bl	8004c28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	3301      	adds	r3, #1
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d3e5      	bcc.n	80045f2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f006 fa98 	bl	800ab60 <USB_ReadInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463a:	d13b      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800463c:	2301      	movs	r3, #1
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	e02b      	b.n	800469a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3340      	adds	r3, #64	; 0x40
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d115      	bne.n	8004694 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004668:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800466a:	2b00      	cmp	r3, #0
 800466c:	da12      	bge.n	8004694 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	333f      	adds	r3, #63	; 0x3f
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800468a:	b2db      	uxtb	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 faca 	bl	8004c28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	3301      	adds	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3ce      	bcc.n	8004642 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f006 fa51 	bl	800ab60 <USB_ReadInterrupts>
 80046be:	4603      	mov	r3, r0
 80046c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c8:	d155      	bne.n	8004776 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046ca:	2301      	movs	r3, #1
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
 80046ce:	e045      	b.n	800475c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d12e      	bne.n	8004756 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da2b      	bge.n	8004756 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800470a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800470e:	429a      	cmp	r2, r3
 8004710:	d121      	bne.n	8004756 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800474e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004752:	6053      	str	r3, [r2, #4]
            break;
 8004754:	e007      	b.n	8004766 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	3301      	adds	r3, #1
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	429a      	cmp	r2, r3
 8004764:	d3b4      	bcc.n	80046d0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f006 f9f0 	bl	800ab60 <USB_ReadInterrupts>
 8004780:	4603      	mov	r3, r0
 8004782:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478a:	d10a      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f008 fe59 	bl	800d444 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f006 f9da 	bl	800ab60 <USB_ReadInterrupts>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d115      	bne.n	80047e2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f008 fe49 	bl	800d460 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	e000      	b.n	80047e2 <HAL_PCD_IRQHandler+0x992>
      return;
 80047e0:	bf00      	nop
    }
  }
}
 80047e2:	3734      	adds	r7, #52	; 0x34
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd90      	pop	{r4, r7, pc}

080047e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_PCD_SetAddress+0x1a>
 80047fe:	2302      	movs	r3, #2
 8004800:	e013      	b.n	800482a <HAL_PCD_SetAddress+0x42>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f006 f938 	bl	800aa90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	4608      	mov	r0, r1
 800483c:	4611      	mov	r1, r2
 800483e:	461a      	mov	r2, r3
 8004840:	4603      	mov	r3, r0
 8004842:	70fb      	strb	r3, [r7, #3]
 8004844:	460b      	mov	r3, r1
 8004846:	803b      	strh	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004854:	2b00      	cmp	r3, #0
 8004856:	da0f      	bge.n	8004878 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	3338      	adds	r3, #56	; 0x38
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	4413      	add	r3, r2
 800486c:	3304      	adds	r3, #4
 800486e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	705a      	strb	r2, [r3, #1]
 8004876:	e00f      	b.n	8004898 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	f003 020f 	and.w	r2, r3, #15
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	3304      	adds	r3, #4
 8004890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048a4:	883a      	ldrh	r2, [r7, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	78ba      	ldrb	r2, [r7, #2]
 80048ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048c2:	78bb      	ldrb	r3, [r7, #2]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d102      	bne.n	80048ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_PCD_EP_Open+0xaa>
 80048d8:	2302      	movs	r3, #2
 80048da:	e00e      	b.n	80048fa <HAL_PCD_EP_Open+0xc8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f005 fab8 	bl	8009e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80048f8:	7afb      	ldrb	r3, [r7, #11]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	460b      	mov	r3, r1
 800490c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800490e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004912:	2b00      	cmp	r3, #0
 8004914:	da0f      	bge.n	8004936 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	3338      	adds	r3, #56	; 0x38
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	3304      	adds	r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	705a      	strb	r2, [r3, #1]
 8004934:	e00f      	b.n	8004956 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	3304      	adds	r3, #4
 800494e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_PCD_EP_Close+0x6e>
 800496c:	2302      	movs	r3, #2
 800496e:	e00e      	b.n	800498e <HAL_PCD_EP_Close+0x8c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	4618      	mov	r0, r3
 8004980:	f005 faf6 	bl	8009f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	460b      	mov	r3, r1
 80049a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a6:	7afb      	ldrb	r3, [r7, #11]
 80049a8:	f003 020f 	and.w	r2, r3, #15
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	3304      	adds	r3, #4
 80049be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2200      	movs	r2, #0
 80049d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d8:	7afb      	ldrb	r3, [r7, #11]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	f005 fb92 	bl	800a128 <USB_EPStartXfer>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 020f 	and.w	r2, r3, #15
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004a30:	681b      	ldr	r3, [r3, #0]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	f003 020f 	and.w	r2, r3, #15
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	3338      	adds	r3, #56	; 0x38
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	3304      	adds	r3, #4
 8004a64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d102      	bne.n	8004a98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	f005 fb3f 	bl	800a128 <USB_EPStartXfer>

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	f003 020f 	and.w	r2, r3, #15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d901      	bls.n	8004ad2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e050      	b.n	8004b74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	da0f      	bge.n	8004afa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	f003 020f 	and.w	r2, r3, #15
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	3338      	adds	r3, #56	; 0x38
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	3304      	adds	r3, #4
 8004af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	705a      	strb	r2, [r3, #1]
 8004af8:	e00d      	b.n	8004b16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_PCD_EP_SetStall+0x82>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e01e      	b.n	8004b74 <HAL_PCD_EP_SetStall+0xc0>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f005 fecf 	bl	800a8e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	b2d9      	uxtb	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b64:	461a      	mov	r2, r3
 8004b66:	f006 f8c1 	bl	800acec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	f003 020f 	and.w	r2, r3, #15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d901      	bls.n	8004b9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e042      	b.n	8004c20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da0f      	bge.n	8004bc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	f003 020f 	and.w	r2, r3, #15
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	3338      	adds	r3, #56	; 0x38
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	705a      	strb	r2, [r3, #1]
 8004bc0:	e00f      	b.n	8004be2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3304      	adds	r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_PCD_EP_ClrStall+0x86>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e00e      	b.n	8004c20 <HAL_PCD_EP_ClrStall+0xa4>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f005 fed7 	bl	800a9c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	da0c      	bge.n	8004c56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	3338      	adds	r3, #56	; 0x38
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	3304      	adds	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e00c      	b.n	8004c70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68f9      	ldr	r1, [r7, #12]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f005 fcf6 	bl	800a668 <USB_EPStopXfer>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c80:	7afb      	ldrb	r3, [r7, #11]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b08a      	sub	sp, #40	; 0x28
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	3338      	adds	r3, #56	; 0x38
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	3304      	adds	r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d901      	bls.n	8004cc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e06c      	b.n	8004d9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d902      	bls.n	8004cde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3303      	adds	r3, #3
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ce6:	e02b      	b.n	8004d40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d902      	bls.n	8004d04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3303      	adds	r3, #3
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68d9      	ldr	r1, [r3, #12]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4603      	mov	r3, r0
 8004d22:	6978      	ldr	r0, [r7, #20]
 8004d24:	f005 fd4a 	bl	800a7bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d809      	bhi.n	8004d6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d203      	bcs.n	8004d6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1be      	bne.n	8004ce8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d811      	bhi.n	8004d9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	6939      	ldr	r1, [r7, #16]
 8004d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d96:	4013      	ands	r3, r2
 8004d98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	333c      	adds	r3, #60	; 0x3c
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d17b      	bne.n	8004ed2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d015      	beq.n	8004e10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4a61      	ldr	r2, [pc, #388]	; (8004f6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f240 80b9 	bls.w	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80b3 	beq.w	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0c:	6093      	str	r3, [r2, #8]
 8004e0e:	e0a7      	b.n	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	461a      	mov	r2, r3
 8004e28:	2320      	movs	r3, #32
 8004e2a:	6093      	str	r3, [r2, #8]
 8004e2c:	e098      	b.n	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 8093 	bne.w	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	4a4b      	ldr	r2, [pc, #300]	; (8004f6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d90f      	bls.n	8004e62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5e:	6093      	str	r3, [r2, #8]
 8004e60:	e07e      	b.n	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	3304      	adds	r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	0159      	lsls	r1, r3, #5
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	440b      	add	r3, r1
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d114      	bne.n	8004ec4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004eac:	461a      	mov	r2, r3
 8004eae:	2101      	movs	r1, #1
 8004eb0:	f005 ff1c 	bl	800acec <USB_EP0_OutStart>
 8004eb4:	e006      	b.n	8004ec4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	441a      	add	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f008 f9f6 	bl	800d2bc <HAL_PCD_DataOutStageCallback>
 8004ed0:	e046      	b.n	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d124      	bne.n	8004f24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	6093      	str	r3, [r2, #8]
 8004ef8:	e032      	b.n	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	461a      	mov	r2, r3
 8004f12:	2320      	movs	r3, #32
 8004f14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f008 f9cd 	bl	800d2bc <HAL_PCD_DataOutStageCallback>
 8004f22:	e01d      	b.n	8004f60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d114      	bne.n	8004f54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d108      	bne.n	8004f54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2100      	movs	r1, #0
 8004f50:	f005 fecc 	bl	800acec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f008 f9ae 	bl	800d2bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	4f54300a 	.word	0x4f54300a
 8004f70:	4f54310a 	.word	0x4f54310a

08004f74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	333c      	adds	r3, #60	; 0x3c
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <PCD_EP_OutSetupPacket_int+0x88>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d90e      	bls.n	8004fc8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f008 f965 	bl	800d298 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <PCD_EP_OutSetupPacket_int+0x88>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d90c      	bls.n	8004ff0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d108      	bne.n	8004ff0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2101      	movs	r1, #1
 8004fec:	f005 fe7e 	bl	800acec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	4f54300a 	.word	0x4f54300a

08005000 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
 800500c:	4613      	mov	r3, r2
 800500e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d107      	bne.n	800502e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800501e:	883b      	ldrh	r3, [r7, #0]
 8005020:	0419      	lsls	r1, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	430a      	orrs	r2, r1
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
 800502c:	e028      	b.n	8005080 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	4413      	add	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]
 8005040:	e00d      	b.n	800505e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	3340      	adds	r3, #64	; 0x40
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4413      	add	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	3301      	adds	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
 800505e:	7bfa      	ldrb	r2, [r7, #15]
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	3b01      	subs	r3, #1
 8005064:	429a      	cmp	r2, r3
 8005066:	d3ec      	bcc.n	8005042 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005068:	883b      	ldrh	r3, [r7, #0]
 800506a:	0418      	lsls	r0, r3, #16
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6819      	ldr	r1, [r3, #0]
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	3b01      	subs	r3, #1
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	4302      	orrs	r2, r0
 8005078:	3340      	adds	r3, #64	; 0x40
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	460b      	mov	r3, r1
 8005098:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	10000003 	.word	0x10000003

080050f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_PWREx_ConfigSupply+0x70>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d00a      	beq.n	800513a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <HAL_PWREx_ConfigSupply+0x70>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d001      	beq.n	8005136 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e01f      	b.n	8005176 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	e01d      	b.n	8005176 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_PWREx_ConfigSupply+0x70>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f023 0207 	bic.w	r2, r3, #7
 8005142:	490f      	ldr	r1, [pc, #60]	; (8005180 <HAL_PWREx_ConfigSupply+0x70>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4313      	orrs	r3, r2
 8005148:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800514a:	f7fd f905 	bl	8002358 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005150:	e009      	b.n	8005166 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005152:	f7fd f901 	bl	8002358 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005160:	d901      	bls.n	8005166 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e007      	b.n	8005176 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_PWREx_ConfigSupply+0x70>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005172:	d1ee      	bne.n	8005152 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58024800 	.word	0x58024800

08005184 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800518e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005192:	60d3      	str	r3, [r2, #12]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	58024800 	.word	0x58024800

080051a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051ac:	f7fd f8d4 	bl	8002358 <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e05f      	b.n	800527c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f85f 	bl	800528c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80051ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 faca 	bl	800576c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	021a      	lsls	r2, r3, #8
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	2120      	movs	r1, #32
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fac2 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005208:	7afb      	ldrb	r3, [r7, #11]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d135      	bne.n	800527a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_QSPI_Init+0xe0>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6852      	ldr	r2, [r2, #4]
 800521c:	0611      	lsls	r1, r2, #24
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68d2      	ldr	r2, [r2, #12]
 8005222:	4311      	orrs	r1, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	69d2      	ldr	r2, [r2, #28]
 8005228:	4311      	orrs	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6a12      	ldr	r2, [r2, #32]
 800522e:	4311      	orrs	r1, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	430b      	orrs	r3, r1
 8005236:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <HAL_QSPI_Init+0xe4>)
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6912      	ldr	r2, [r2, #16]
 8005246:	0411      	lsls	r1, r2, #16
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6952      	ldr	r2, [r2, #20]
 800524c:	4311      	orrs	r1, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6992      	ldr	r2, [r2, #24]
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	430b      	orrs	r3, r1
 800525a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800527a:	7afb      	ldrb	r3, [r7, #11]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	00ffff2f 	.word	0x00ffff2f
 8005288:	ffe0f8fe 	.word	0xffe0f8fe

0800528c <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80052ac:	f7fd f854 	bl	8002358 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_QSPI_Command+0x22>
 80052be:	2302      	movs	r3, #2
 80052c0:	e048      	b.n	8005354 <HAL_QSPI_Command+0xb4>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d137      	bne.n	8005346 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2200      	movs	r2, #0
 80052ec:	2120      	movs	r1, #32
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fa4a 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d125      	bne.n	800534a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80052fe:	2200      	movs	r2, #0
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fa77 	bl	80057f6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d115      	bne.n	800533c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2201      	movs	r2, #1
 8005318:	2102      	movs	r1, #2
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fa34 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10f      	bne.n	800534a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2202      	movs	r2, #2
 8005330:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800533a:	e006      	b.n	800534a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005344:	e001      	b.n	800534a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005346:	2302      	movs	r3, #2
 8005348:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005352:	7dfb      	ldrb	r3, [r7, #23]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800536c:	f7fc fff4 	bl	8002358 <HAL_GetTick>
 8005370:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3320      	adds	r3, #32
 8005378:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_QSPI_Transmit+0x2e>
 8005386:	2302      	movs	r3, #2
 8005388:	e076      	b.n	8005478 <HAL_QSPI_Transmit+0x11c>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d165      	bne.n	800546a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d056      	beq.n	8005458 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2212      	movs	r2, #18
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80053de:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80053e0:	e01b      	b.n	800541a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2201      	movs	r2, #1
 80053ea:	2104      	movs	r1, #4
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f9cb 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d113      	bne.n	8005424 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	781a      	ldrb	r2, [r3, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1df      	bne.n	80053e2 <HAL_QSPI_Transmit+0x86>
 8005422:	e000      	b.n	8005426 <HAL_QSPI_Transmit+0xca>
          break;
 8005424:	bf00      	nop
      }

      if (status == HAL_OK)
 8005426:	7ffb      	ldrb	r3, [r7, #31]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d110      	bne.n	800544e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2201      	movs	r2, #1
 8005434:	2102      	movs	r1, #2
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f9a6 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005440:	7ffb      	ldrb	r3, [r7, #31]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2202      	movs	r2, #2
 800544c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005456:	e00a      	b.n	800546e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	f043 0208 	orr.w	r2, r3, #8
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e001      	b.n	800546e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800546a:	2302      	movs	r3, #2
 800546c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005476:	7ffb      	ldrb	r3, [r7, #31]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005490:	f7fc ff62 	bl	8002358 <HAL_GetTick>
 8005494:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3320      	adds	r3, #32
 80054a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_QSPI_Receive+0x36>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e07d      	b.n	80055b2 <HAL_QSPI_Receive+0x132>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d16c      	bne.n	80055a4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d05d      	beq.n	8005592 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2222      	movs	r2, #34	; 0x22
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800550e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005518:	e01c      	b.n	8005554 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2201      	movs	r2, #1
 8005522:	2106      	movs	r1, #6
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f92f 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800552e:	7ffb      	ldrb	r3, [r7, #31]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d114      	bne.n	800555e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	7812      	ldrb	r2, [r2, #0]
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	1e5a      	subs	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1de      	bne.n	800551a <HAL_QSPI_Receive+0x9a>
 800555c:	e000      	b.n	8005560 <HAL_QSPI_Receive+0xe0>
          break;
 800555e:	bf00      	nop
      }

      if (status == HAL_OK)
 8005560:	7ffb      	ldrb	r3, [r7, #31]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d110      	bne.n	8005588 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2201      	movs	r2, #1
 800556e:	2102      	movs	r1, #2
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f909 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800557a:	7ffb      	ldrb	r3, [r7, #31]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2202      	movs	r2, #2
 8005586:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005590:	e00a      	b.n	80055a8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	f043 0208 	orr.w	r2, r3, #8
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e001      	b.n	80055a8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
 80055a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80055b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b088      	sub	sp, #32
 80055be:	af02      	add	r7, sp, #8
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7fc fec6 	bl	8002358 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_QSPI_AutoPolling+0x24>
 80055da:	2302      	movs	r3, #2
 80055dc:	e060      	b.n	80056a0 <HAL_QSPI_AutoPolling+0xe6>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d14f      	bne.n	8005692 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2242      	movs	r2, #66	; 0x42
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2200      	movs	r2, #0
 8005608:	2120      	movs	r1, #32
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f8bc 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d13d      	bne.n	8005696 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6852      	ldr	r2, [r2, #4]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6892      	ldr	r2, [r2, #8]
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	431a      	orrs	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005650:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800565a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f8c8 	bl	80057f6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2201      	movs	r2, #1
 800566e:	2108      	movs	r1, #8
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f889 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2208      	movs	r2, #8
 8005686:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005690:	e001      	b.n	8005696 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005692:	2302      	movs	r3, #2
 8005694:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800569e:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80056b4:	f7fc fe50 	bl	8002358 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_QSPI_MemoryMapped+0x22>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e04c      	b.n	8005764 <HAL_QSPI_MemoryMapped+0xbc>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d13b      	bne.n	8005756 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2282      	movs	r2, #130	; 0x82
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2120      	movs	r1, #32
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f845 	bl	8005788 <QSPI_WaitFlagStateUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d128      	bne.n	800575a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f023 0108 	bic.w	r1, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b08      	cmp	r3, #8
 8005724:	d110      	bne.n	8005748 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005746:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005748:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f851 	bl	80057f6 <QSPI_Config>
 8005754:	e001      	b.n	800575a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005756:	2302      	movs	r3, #2
 8005758:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005798:	e01a      	b.n	80057d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d016      	beq.n	80057d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a2:	f7fc fdd9 	bl	8002358 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2204      	movs	r2, #4
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c4:	f043 0201 	orr.w	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e00e      	b.n	80057ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bf14      	ite	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	2300      	moveq	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d1d6      	bne.n	800579a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <QSPI_Config+0x28>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005810:	d005      	beq.n	800581e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3a01      	subs	r2, #1
 800581c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80b9 	beq.w	800599a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d05f      	beq.n	80058f0 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	6892      	ldr	r2, [r2, #8]
 8005838:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d031      	beq.n	80058a6 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	431a      	orrs	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	431a      	orrs	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	431a      	orrs	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	049b      	lsls	r3, r3, #18
 800585e:	431a      	orrs	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	431a      	orrs	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	431a      	orrs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	431a      	orrs	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	431a      	orrs	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	431a      	orrs	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	ea42 0103 	orr.w	r1, r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	430a      	orrs	r2, r1
 800588e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005896:	f000 812e 	beq.w	8005af6 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	6852      	ldr	r2, [r2, #4]
 80058a2:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80058a4:	e127      	b.n	8005af6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	049b      	lsls	r3, r3, #18
 80058c2:	431a      	orrs	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	431a      	orrs	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	ea42 0103 	orr.w	r1, r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	615a      	str	r2, [r3, #20]
}
 80058ee:	e102      	b.n	8005af6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02e      	beq.n	8005956 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	431a      	orrs	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	431a      	orrs	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	431a      	orrs	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	049b      	lsls	r3, r3, #18
 8005914:	431a      	orrs	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	431a      	orrs	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	431a      	orrs	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	431a      	orrs	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	431a      	orrs	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	ea42 0103 	orr.w	r1, r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	430a      	orrs	r2, r1
 800593e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005946:	f000 80d6 	beq.w	8005af6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	6852      	ldr	r2, [r2, #4]
 8005952:	619a      	str	r2, [r3, #24]
}
 8005954:	e0cf      	b.n	8005af6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	431a      	orrs	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005964:	431a      	orrs	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	431a      	orrs	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	049b      	lsls	r3, r3, #18
 8005972:	431a      	orrs	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	431a      	orrs	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	431a      	orrs	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	431a      	orrs	r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	ea42 0103 	orr.w	r1, r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	430a      	orrs	r2, r1
 8005996:	615a      	str	r2, [r3, #20]
}
 8005998:	e0ad      	b.n	8005af6 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d058      	beq.n	8005a54 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	6892      	ldr	r2, [r2, #8]
 80059aa:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d02d      	beq.n	8005a10 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	431a      	orrs	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	049b      	lsls	r3, r3, #18
 80059d0:	431a      	orrs	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	431a      	orrs	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	ea42 0103 	orr.w	r1, r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a02:	d078      	beq.n	8005af6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	6852      	ldr	r2, [r2, #4]
 8005a0c:	619a      	str	r2, [r3, #24]
}
 8005a0e:	e072      	b.n	8005af6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	049b      	lsls	r3, r3, #18
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	ea42 0103 	orr.w	r1, r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	615a      	str	r2, [r3, #20]
}
 8005a52:	e050      	b.n	8005af6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d02a      	beq.n	8005ab2 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	049b      	lsls	r3, r3, #18
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	ea42 0103 	orr.w	r1, r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005aa4:	d027      	beq.n	8005af6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	6852      	ldr	r2, [r2, #4]
 8005aae:	619a      	str	r2, [r3, #24]
}
 8005ab0:	e021      	b.n	8005af6 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01d      	beq.n	8005af6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	049b      	lsls	r3, r3, #18
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	ea42 0103 	orr.w	r1, r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	615a      	str	r2, [r3, #20]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08c      	sub	sp, #48	; 0x30
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f000 bc48 	b.w	80063a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8088 	beq.w	8005c36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b26:	4b99      	ldr	r3, [pc, #612]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b30:	4b96      	ldr	r3, [pc, #600]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d007      	beq.n	8005b4c <HAL_RCC_OscConfig+0x48>
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	2b18      	cmp	r3, #24
 8005b40:	d111      	bne.n	8005b66 <HAL_RCC_OscConfig+0x62>
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d10c      	bne.n	8005b66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4c:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d06d      	beq.n	8005c34 <HAL_RCC_OscConfig+0x130>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d169      	bne.n	8005c34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f000 bc21 	b.w	80063a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCC_OscConfig+0x7a>
 8005b70:	4b86      	ldr	r3, [pc, #536]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a85      	ldr	r2, [pc, #532]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	e02e      	b.n	8005bdc <HAL_RCC_OscConfig+0xd8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x9c>
 8005b86:	4b81      	ldr	r3, [pc, #516]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a80      	ldr	r2, [pc, #512]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b7e      	ldr	r3, [pc, #504]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a7d      	ldr	r2, [pc, #500]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e01d      	b.n	8005bdc <HAL_RCC_OscConfig+0xd8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0xc0>
 8005baa:	4b78      	ldr	r3, [pc, #480]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a77      	ldr	r2, [pc, #476]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4b75      	ldr	r3, [pc, #468]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a74      	ldr	r2, [pc, #464]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCC_OscConfig+0xd8>
 8005bc4:	4b71      	ldr	r3, [pc, #452]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a70      	ldr	r2, [pc, #448]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	4b6e      	ldr	r3, [pc, #440]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a6d      	ldr	r2, [pc, #436]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d013      	beq.n	8005c0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fc fbb8 	bl	8002358 <HAL_GetTick>
 8005be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fc fbb4 	bl	8002358 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	; 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e3d4      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bfe:	4b63      	ldr	r3, [pc, #396]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0xe8>
 8005c0a:	e014      	b.n	8005c36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fc fba4 	bl	8002358 <HAL_GetTick>
 8005c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fc fba0 	bl	8002358 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e3c0      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c26:	4b59      	ldr	r3, [pc, #356]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x110>
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80ca 	beq.w	8005dd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c44:	4b51      	ldr	r3, [pc, #324]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c4e:	4b4f      	ldr	r3, [pc, #316]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_RCC_OscConfig+0x166>
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	2b18      	cmp	r3, #24
 8005c5e:	d156      	bne.n	8005d0e <HAL_RCC_OscConfig+0x20a>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d151      	bne.n	8005d0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c6a:	4b48      	ldr	r3, [pc, #288]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_RCC_OscConfig+0x17e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e392      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c82:	4b42      	ldr	r3, [pc, #264]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f023 0219 	bic.w	r2, r3, #25
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	493f      	ldr	r1, [pc, #252]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fc fb60 	bl	8002358 <HAL_GetTick>
 8005c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9c:	f7fc fb5c 	bl	8002358 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e37c      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cae:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cba:	f7fc fb7d 	bl	80023b8 <HAL_GetREVID>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d817      	bhi.n	8005cf8 <HAL_RCC_OscConfig+0x1f4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d108      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x1de>
 8005cd0:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce0:	e07a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce2:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	031b      	lsls	r3, r3, #12
 8005cf0:	4926      	ldr	r1, [pc, #152]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf6:	e06f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf8:	4b24      	ldr	r3, [pc, #144]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	4921      	ldr	r1, [pc, #132]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0c:	e064      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d047      	beq.n	8005da6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d16:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 0219 	bic.w	r2, r3, #25
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	491a      	ldr	r1, [pc, #104]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fc fb16 	bl	8002358 <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d30:	f7fc fb12 	bl	8002358 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e332      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4e:	f7fc fb33 	bl	80023b8 <HAL_GetREVID>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d819      	bhi.n	8005d90 <HAL_RCC_OscConfig+0x28c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d108      	bne.n	8005d76 <HAL_RCC_OscConfig+0x272>
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d6c:	4a07      	ldr	r2, [pc, #28]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d72:	6053      	str	r3, [r2, #4]
 8005d74:	e030      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2d4>
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	031b      	lsls	r3, r3, #12
 8005d84:	4901      	ldr	r1, [pc, #4]	; (8005d8c <HAL_RCC_OscConfig+0x288>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
 8005d8a:	e025      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2d4>
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	4b9a      	ldr	r3, [pc, #616]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	061b      	lsls	r3, r3, #24
 8005d9e:	4997      	ldr	r1, [pc, #604]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	604b      	str	r3, [r1, #4]
 8005da4:	e018      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005da6:	4b95      	ldr	r3, [pc, #596]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a94      	ldr	r2, [pc, #592]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db2:	f7fc fad1 	bl	8002358 <HAL_GetTick>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dba:	f7fc facd 	bl	8002358 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e2ed      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dcc:	4b8b      	ldr	r3, [pc, #556]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f0      	bne.n	8005dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a9 	beq.w	8005f38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de6:	4b85      	ldr	r3, [pc, #532]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005df0:	4b82      	ldr	r3, [pc, #520]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d007      	beq.n	8005e0c <HAL_RCC_OscConfig+0x308>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b18      	cmp	r3, #24
 8005e00:	d13a      	bne.n	8005e78 <HAL_RCC_OscConfig+0x374>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d135      	bne.n	8005e78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e0c:	4b7b      	ldr	r3, [pc, #492]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_OscConfig+0x320>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e2c1      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e24:	f7fc fac8 	bl	80023b8 <HAL_GetREVID>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d817      	bhi.n	8005e62 <HAL_RCC_OscConfig+0x35e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d108      	bne.n	8005e4c <HAL_RCC_OscConfig+0x348>
 8005e3a:	4b70      	ldr	r3, [pc, #448]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005e42:	4a6e      	ldr	r2, [pc, #440]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e4a:	e075      	b.n	8005f38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e4c:	4b6b      	ldr	r3, [pc, #428]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	069b      	lsls	r3, r3, #26
 8005e5a:	4968      	ldr	r1, [pc, #416]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e60:	e06a      	b.n	8005f38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e62:	4b66      	ldr	r3, [pc, #408]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	4962      	ldr	r1, [pc, #392]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e76:	e05f      	b.n	8005f38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d042      	beq.n	8005f06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e80:	4b5e      	ldr	r3, [pc, #376]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a5d      	ldr	r2, [pc, #372]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8c:	f7fc fa64 	bl	8002358 <HAL_GetTick>
 8005e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e94:	f7fc fa60 	bl	8002358 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e280      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ea6:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb2:	f7fc fa81 	bl	80023b8 <HAL_GetREVID>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d817      	bhi.n	8005ef0 <HAL_RCC_OscConfig+0x3ec>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d108      	bne.n	8005eda <HAL_RCC_OscConfig+0x3d6>
 8005ec8:	4b4c      	ldr	r3, [pc, #304]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ed0:	4a4a      	ldr	r2, [pc, #296]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed6:	6053      	str	r3, [r2, #4]
 8005ed8:	e02e      	b.n	8005f38 <HAL_RCC_OscConfig+0x434>
 8005eda:	4b48      	ldr	r3, [pc, #288]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	069b      	lsls	r3, r3, #26
 8005ee8:	4944      	ldr	r1, [pc, #272]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	604b      	str	r3, [r1, #4]
 8005eee:	e023      	b.n	8005f38 <HAL_RCC_OscConfig+0x434>
 8005ef0:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	061b      	lsls	r3, r3, #24
 8005efe:	493f      	ldr	r1, [pc, #252]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60cb      	str	r3, [r1, #12]
 8005f04:	e018      	b.n	8005f38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f06:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a3c      	ldr	r2, [pc, #240]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fc fa21 	bl	8002358 <HAL_GetTick>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f1a:	f7fc fa1d 	bl	8002358 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e23d      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f2c:	4b33      	ldr	r3, [pc, #204]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f0      	bne.n	8005f1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d036      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d019      	beq.n	8005f80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f4c:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fc f9fe 	bl	8002358 <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f60:	f7fc f9fa 	bl	8002358 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e21a      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f72:	4b22      	ldr	r3, [pc, #136]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x45c>
 8005f7e:	e018      	b.n	8005fb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f80:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f84:	4a1d      	ldr	r2, [pc, #116]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fc f9e4 	bl	8002358 <HAL_GetTick>
 8005f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f94:	f7fc f9e0 	bl	8002358 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e200      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fa6:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d039      	beq.n	8006032 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01c      	beq.n	8006000 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fd2:	f7fc f9c1 	bl	8002358 <HAL_GetTick>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fda:	f7fc f9bd 	bl	8002358 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e1dd      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <HAL_RCC_OscConfig+0x4f8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x4d6>
 8005ff8:	e01b      	b.n	8006032 <HAL_RCC_OscConfig+0x52e>
 8005ffa:	bf00      	nop
 8005ffc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006000:	4b9b      	ldr	r3, [pc, #620]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a9a      	ldr	r2, [pc, #616]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800600c:	f7fc f9a4 	bl	8002358 <HAL_GetTick>
 8006010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006014:	f7fc f9a0 	bl	8002358 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e1c0      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006026:	4b92      	ldr	r3, [pc, #584]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f0      	bne.n	8006014 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8081 	beq.w	8006142 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006040:	4b8c      	ldr	r3, [pc, #560]	; (8006274 <HAL_RCC_OscConfig+0x770>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a8b      	ldr	r2, [pc, #556]	; (8006274 <HAL_RCC_OscConfig+0x770>)
 8006046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800604c:	f7fc f984 	bl	8002358 <HAL_GetTick>
 8006050:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006054:	f7fc f980 	bl	8002358 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	; 0x64
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e1a0      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006066:	4b83      	ldr	r3, [pc, #524]	; (8006274 <HAL_RCC_OscConfig+0x770>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d106      	bne.n	8006088 <HAL_RCC_OscConfig+0x584>
 800607a:	4b7d      	ldr	r3, [pc, #500]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	4a7c      	ldr	r2, [pc, #496]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	6713      	str	r3, [r2, #112]	; 0x70
 8006086:	e02d      	b.n	80060e4 <HAL_RCC_OscConfig+0x5e0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <HAL_RCC_OscConfig+0x5a6>
 8006090:	4b77      	ldr	r3, [pc, #476]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	4a76      	ldr	r2, [pc, #472]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006096:	f023 0301 	bic.w	r3, r3, #1
 800609a:	6713      	str	r3, [r2, #112]	; 0x70
 800609c:	4b74      	ldr	r3, [pc, #464]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4a73      	ldr	r2, [pc, #460]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060a2:	f023 0304 	bic.w	r3, r3, #4
 80060a6:	6713      	str	r3, [r2, #112]	; 0x70
 80060a8:	e01c      	b.n	80060e4 <HAL_RCC_OscConfig+0x5e0>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d10c      	bne.n	80060cc <HAL_RCC_OscConfig+0x5c8>
 80060b2:	4b6f      	ldr	r3, [pc, #444]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a6e      	ldr	r2, [pc, #440]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060b8:	f043 0304 	orr.w	r3, r3, #4
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70
 80060be:	4b6c      	ldr	r3, [pc, #432]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4a6b      	ldr	r2, [pc, #428]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	6713      	str	r3, [r2, #112]	; 0x70
 80060ca:	e00b      	b.n	80060e4 <HAL_RCC_OscConfig+0x5e0>
 80060cc:	4b68      	ldr	r3, [pc, #416]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4a67      	ldr	r2, [pc, #412]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
 80060d8:	4b65      	ldr	r3, [pc, #404]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	4a64      	ldr	r2, [pc, #400]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80060de:	f023 0304 	bic.w	r3, r3, #4
 80060e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d015      	beq.n	8006118 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ec:	f7fc f934 	bl	8002358 <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f2:	e00a      	b.n	800610a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f4:	f7fc f930 	bl	8002358 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e14e      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610a:	4b59      	ldr	r3, [pc, #356]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ee      	beq.n	80060f4 <HAL_RCC_OscConfig+0x5f0>
 8006116:	e014      	b.n	8006142 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fc f91e 	bl	8002358 <HAL_GetTick>
 800611c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800611e:	e00a      	b.n	8006136 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006120:	f7fc f91a 	bl	8002358 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e138      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006136:	4b4e      	ldr	r3, [pc, #312]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1ee      	bne.n	8006120 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 812d 	beq.w	80063a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800614c:	4b48      	ldr	r3, [pc, #288]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006154:	2b18      	cmp	r3, #24
 8006156:	f000 80bd 	beq.w	80062d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2b02      	cmp	r3, #2
 8006160:	f040 809e 	bne.w	80062a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006164:	4b42      	ldr	r3, [pc, #264]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a41      	ldr	r2, [pc, #260]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800616a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800616e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fc f8f2 	bl	8002358 <HAL_GetTick>
 8006174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006178:	f7fc f8ee 	bl	8002358 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e10e      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800618a:	4b39      	ldr	r3, [pc, #228]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006196:	4b36      	ldr	r3, [pc, #216]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800619a:	4b37      	ldr	r3, [pc, #220]	; (8006278 <HAL_RCC_OscConfig+0x774>)
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061a6:	0112      	lsls	r2, r2, #4
 80061a8:	430a      	orrs	r2, r1
 80061aa:	4931      	ldr	r1, [pc, #196]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	628b      	str	r3, [r1, #40]	; 0x28
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	3b01      	subs	r3, #1
 80061b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	3b01      	subs	r3, #1
 80061c0:	025b      	lsls	r3, r3, #9
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	3b01      	subs	r3, #1
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	3b01      	subs	r3, #1
 80061da:	061b      	lsls	r3, r3, #24
 80061dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061e0:	4923      	ldr	r1, [pc, #140]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4a21      	ldr	r2, [pc, #132]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061f2:	4b1f      	ldr	r3, [pc, #124]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 80061f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f6:	4b21      	ldr	r3, [pc, #132]	; (800627c <HAL_RCC_OscConfig+0x778>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061fe:	00d2      	lsls	r2, r2, #3
 8006200:	491b      	ldr	r1, [pc, #108]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006206:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f023 020c 	bic.w	r2, r3, #12
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4917      	ldr	r1, [pc, #92]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006218:	4b15      	ldr	r3, [pc, #84]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f023 0202 	bic.w	r2, r3, #2
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	4912      	ldr	r1, [pc, #72]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006226:	4313      	orrs	r3, r2
 8006228:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	4a10      	ldr	r2, [pc, #64]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800623c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800624c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	4a07      	ldr	r2, [pc, #28]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a04      	ldr	r2, [pc, #16]	; (8006270 <HAL_RCC_OscConfig+0x76c>)
 8006260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fc f877 	bl	8002358 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800626c:	e011      	b.n	8006292 <HAL_RCC_OscConfig+0x78e>
 800626e:	bf00      	nop
 8006270:	58024400 	.word	0x58024400
 8006274:	58024800 	.word	0x58024800
 8006278:	fffffc0c 	.word	0xfffffc0c
 800627c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006280:	f7fc f86a 	bl	8002358 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e08a      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006292:	4b47      	ldr	r3, [pc, #284]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x77c>
 800629e:	e082      	b.n	80063a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a0:	4b43      	ldr	r3, [pc, #268]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a42      	ldr	r2, [pc, #264]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 80062a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fc f854 	bl	8002358 <HAL_GetTick>
 80062b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b4:	f7fc f850 	bl	8002358 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e070      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062c6:	4b3a      	ldr	r3, [pc, #232]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x7b0>
 80062d2:	e068      	b.n	80063a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062d4:	4b36      	ldr	r3, [pc, #216]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062da:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d031      	beq.n	800634c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f003 0203 	and.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d12a      	bne.n	800634c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006302:	429a      	cmp	r2, r3
 8006304:	d122      	bne.n	800634c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006312:	429a      	cmp	r2, r3
 8006314:	d11a      	bne.n	800634c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	0a5b      	lsrs	r3, r3, #9
 800631a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d111      	bne.n	800634c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d108      	bne.n	800634c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	0e1b      	lsrs	r3, r3, #24
 800633e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e02b      	b.n	80063a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006350:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	08db      	lsrs	r3, r3, #3
 8006356:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800635a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	429a      	cmp	r2, r3
 8006364:	d01f      	beq.n	80063a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	4a11      	ldr	r2, [pc, #68]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006372:	f7fb fff1 	bl	8002358 <HAL_GetTick>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006378:	bf00      	nop
 800637a:	f7fb ffed 	bl	8002358 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	4293      	cmp	r3, r2
 8006384:	d0f9      	beq.n	800637a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 8006388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638a:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <HAL_RCC_OscConfig+0x8b0>)
 800638c:	4013      	ands	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006392:	00d2      	lsls	r2, r2, #3
 8006394:	4906      	ldr	r1, [pc, #24]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 8006396:	4313      	orrs	r3, r2
 8006398:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <HAL_RCC_OscConfig+0x8ac>)
 80063a0:	f043 0301 	orr.w	r3, r3, #1
 80063a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3730      	adds	r7, #48	; 0x30
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	58024400 	.word	0x58024400
 80063b4:	ffff0007 	.word	0xffff0007

080063b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e19c      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063cc:	4b8a      	ldr	r3, [pc, #552]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d910      	bls.n	80063fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063da:	4b87      	ldr	r3, [pc, #540]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 020f 	bic.w	r2, r3, #15
 80063e2:	4985      	ldr	r1, [pc, #532]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ea:	4b83      	ldr	r3, [pc, #524]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e184      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d010      	beq.n	800642a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	4b7b      	ldr	r3, [pc, #492]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006414:	429a      	cmp	r2, r3
 8006416:	d908      	bls.n	800642a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006418:	4b78      	ldr	r3, [pc, #480]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	4975      	ldr	r1, [pc, #468]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006426:	4313      	orrs	r3, r2
 8006428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d010      	beq.n	8006458 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	4b70      	ldr	r3, [pc, #448]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006442:	429a      	cmp	r2, r3
 8006444:	d908      	bls.n	8006458 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006446:	4b6d      	ldr	r3, [pc, #436]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	496a      	ldr	r1, [pc, #424]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006454:	4313      	orrs	r3, r2
 8006456:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	4b64      	ldr	r3, [pc, #400]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006470:	429a      	cmp	r2, r3
 8006472:	d908      	bls.n	8006486 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006474:	4b61      	ldr	r3, [pc, #388]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	495e      	ldr	r1, [pc, #376]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006482:	4313      	orrs	r3, r2
 8006484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d010      	beq.n	80064b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	4b59      	ldr	r3, [pc, #356]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800649e:	429a      	cmp	r2, r3
 80064a0:	d908      	bls.n	80064b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064a2:	4b56      	ldr	r3, [pc, #344]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	4953      	ldr	r1, [pc, #332]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d010      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	4b4d      	ldr	r3, [pc, #308]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d908      	bls.n	80064e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d0:	4b4a      	ldr	r3, [pc, #296]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f023 020f 	bic.w	r2, r3, #15
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	4947      	ldr	r1, [pc, #284]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d055      	beq.n	800659a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064ee:	4b43      	ldr	r3, [pc, #268]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	4940      	ldr	r1, [pc, #256]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d107      	bne.n	8006518 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006508:	4b3c      	ldr	r3, [pc, #240]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d121      	bne.n	8006558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0f6      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d107      	bne.n	8006530 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006520:	4b36      	ldr	r3, [pc, #216]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d115      	bne.n	8006558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e0ea      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d107      	bne.n	8006548 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006538:	4b30      	ldr	r3, [pc, #192]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d109      	bne.n	8006558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0de      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006548:	4b2c      	ldr	r3, [pc, #176]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0d6      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006558:	4b28      	ldr	r3, [pc, #160]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f023 0207 	bic.w	r2, r3, #7
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	4925      	ldr	r1, [pc, #148]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 8006566:	4313      	orrs	r3, r2
 8006568:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656a:	f7fb fef5 	bl	8002358 <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006570:	e00a      	b.n	8006588 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006572:	f7fb fef1 	bl	8002358 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006580:	4293      	cmp	r3, r2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e0be      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006588:	4b1c      	ldr	r3, [pc, #112]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	429a      	cmp	r2, r3
 8006598:	d1eb      	bne.n	8006572 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d010      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d208      	bcs.n	80065c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f023 020f 	bic.w	r2, r3, #15
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	490e      	ldr	r1, [pc, #56]	; (80065fc <HAL_RCC_ClockConfig+0x244>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d214      	bcs.n	8006600 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d6:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f023 020f 	bic.w	r2, r3, #15
 80065de:	4906      	ldr	r1, [pc, #24]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <HAL_RCC_ClockConfig+0x240>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d005      	beq.n	8006600 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e086      	b.n	8006706 <HAL_RCC_ClockConfig+0x34e>
 80065f8:	52002000 	.word	0x52002000
 80065fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d010      	beq.n	800662e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006618:	429a      	cmp	r2, r3
 800661a:	d208      	bcs.n	800662e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800661c:	4b3c      	ldr	r3, [pc, #240]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	4939      	ldr	r1, [pc, #228]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 800662a:	4313      	orrs	r3, r2
 800662c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d010      	beq.n	800665c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	4b34      	ldr	r3, [pc, #208]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006646:	429a      	cmp	r2, r3
 8006648:	d208      	bcs.n	800665c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800664a:	4b31      	ldr	r3, [pc, #196]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	492e      	ldr	r1, [pc, #184]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 8006658:	4313      	orrs	r3, r2
 800665a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	4b28      	ldr	r3, [pc, #160]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006674:	429a      	cmp	r2, r3
 8006676:	d208      	bcs.n	800668a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006678:	4b25      	ldr	r3, [pc, #148]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	4922      	ldr	r1, [pc, #136]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 8006686:	4313      	orrs	r3, r2
 8006688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d208      	bcs.n	80066b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066a6:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	4917      	ldr	r1, [pc, #92]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066b8:	f000 f834 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	4912      	ldr	r1, [pc, #72]	; (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <HAL_RCC_ClockConfig+0x358>)
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	4a0d      	ldr	r2, [pc, #52]	; (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80066e0:	5cd3      	ldrb	r3, [r2, r3]
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ec:	4a0a      	ldr	r2, [pc, #40]	; (8006718 <HAL_RCC_ClockConfig+0x360>)
 80066ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <HAL_RCC_ClockConfig+0x364>)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066f6:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <HAL_RCC_ClockConfig+0x368>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fb fde2 	bl	80022c4 <HAL_InitTick>
 8006700:	4603      	mov	r3, r0
 8006702:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
 8006714:	08016508 	.word	0x08016508
 8006718:	24000004 	.word	0x24000004
 800671c:	24000000 	.word	0x24000000
 8006720:	24000008 	.word	0x24000008

08006724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	; 0x24
 8006728:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800672a:	4bb3      	ldr	r3, [pc, #716]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006732:	2b18      	cmp	r3, #24
 8006734:	f200 8155 	bhi.w	80069e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <HAL_RCC_GetSysClockFreq+0x1c>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	080067a5 	.word	0x080067a5
 8006744:	080069e3 	.word	0x080069e3
 8006748:	080069e3 	.word	0x080069e3
 800674c:	080069e3 	.word	0x080069e3
 8006750:	080069e3 	.word	0x080069e3
 8006754:	080069e3 	.word	0x080069e3
 8006758:	080069e3 	.word	0x080069e3
 800675c:	080069e3 	.word	0x080069e3
 8006760:	080067cb 	.word	0x080067cb
 8006764:	080069e3 	.word	0x080069e3
 8006768:	080069e3 	.word	0x080069e3
 800676c:	080069e3 	.word	0x080069e3
 8006770:	080069e3 	.word	0x080069e3
 8006774:	080069e3 	.word	0x080069e3
 8006778:	080069e3 	.word	0x080069e3
 800677c:	080069e3 	.word	0x080069e3
 8006780:	080067d1 	.word	0x080067d1
 8006784:	080069e3 	.word	0x080069e3
 8006788:	080069e3 	.word	0x080069e3
 800678c:	080069e3 	.word	0x080069e3
 8006790:	080069e3 	.word	0x080069e3
 8006794:	080069e3 	.word	0x080069e3
 8006798:	080069e3 	.word	0x080069e3
 800679c:	080069e3 	.word	0x080069e3
 80067a0:	080067d7 	.word	0x080067d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a4:	4b94      	ldr	r3, [pc, #592]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b0:	4b91      	ldr	r3, [pc, #580]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	08db      	lsrs	r3, r3, #3
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	4a90      	ldr	r2, [pc, #576]	; (80069fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
 80067c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067c2:	e111      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067c4:	4b8d      	ldr	r3, [pc, #564]	; (80069fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067c6:	61bb      	str	r3, [r7, #24]
      break;
 80067c8:	e10e      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067ca:	4b8d      	ldr	r3, [pc, #564]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067cc:	61bb      	str	r3, [r7, #24]
      break;
 80067ce:	e10b      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80067d0:	4b8c      	ldr	r3, [pc, #560]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067d2:	61bb      	str	r3, [r7, #24]
      break;
 80067d4:	e108      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067d6:	4b88      	ldr	r3, [pc, #544]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80067e0:	4b85      	ldr	r3, [pc, #532]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067ec:	4b82      	ldr	r3, [pc, #520]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067f6:	4b80      	ldr	r3, [pc, #512]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	08db      	lsrs	r3, r3, #3
 80067fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80e1 	beq.w	80069dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b02      	cmp	r3, #2
 800681e:	f000 8083 	beq.w	8006928 <HAL_RCC_GetSysClockFreq+0x204>
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b02      	cmp	r3, #2
 8006826:	f200 80a1 	bhi.w	800696c <HAL_RCC_GetSysClockFreq+0x248>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_RCC_GetSysClockFreq+0x114>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d056      	beq.n	80068e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006836:	e099      	b.n	800696c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006838:	4b6f      	ldr	r3, [pc, #444]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d02d      	beq.n	80068a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006844:	4b6c      	ldr	r3, [pc, #432]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	08db      	lsrs	r3, r3, #3
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	4a6b      	ldr	r2, [pc, #428]	; (80069fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006850:	fa22 f303 	lsr.w	r3, r2, r3
 8006854:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686e:	4b62      	ldr	r3, [pc, #392]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006882:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800688a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800689e:	e087      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80068ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b2:	4b51      	ldr	r3, [pc, #324]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068e2:	e065      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f6:	4b40      	ldr	r3, [pc, #256]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006906:	ed97 6a02 	vldr	s12, [r7, #8]
 800690a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800690e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800691a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006926:	e043      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006a14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693a:	4b2f      	ldr	r3, [pc, #188]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694a:	ed97 6a02 	vldr	s12, [r7, #8]
 800694e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006966:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800696a:	e021      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006976:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800697a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697e:	4b1e      	ldr	r3, [pc, #120]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006992:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069b0:	4b11      	ldr	r3, [pc, #68]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	0a5b      	lsrs	r3, r3, #9
 80069b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ba:	3301      	adds	r3, #1
 80069bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80069cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d4:	ee17 3a90 	vmov	r3, s15
 80069d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80069da:	e005      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	61bb      	str	r3, [r7, #24]
      break;
 80069e0:	e002      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069e4:	61bb      	str	r3, [r7, #24]
      break;
 80069e6:	bf00      	nop
  }

  return sysclockfreq;
 80069e8:	69bb      	ldr	r3, [r7, #24]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3724      	adds	r7, #36	; 0x24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	58024400 	.word	0x58024400
 80069fc:	03d09000 	.word	0x03d09000
 8006a00:	003d0900 	.word	0x003d0900
 8006a04:	017d7840 	.word	0x017d7840
 8006a08:	46000000 	.word	0x46000000
 8006a0c:	4c742400 	.word	0x4c742400
 8006a10:	4a742400 	.word	0x4a742400
 8006a14:	4bbebc20 	.word	0x4bbebc20

08006a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a1e:	f7ff fe81 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 8006a22:	4602      	mov	r2, r0
 8006a24:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	490f      	ldr	r1, [pc, #60]	; (8006a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8006a30:	5ccb      	ldrb	r3, [r1, r3]
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8006a46:	5cd3      	ldrb	r3, [r2, r3]
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a56:	4a07      	ldr	r2, [pc, #28]	; (8006a74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	58024400 	.word	0x58024400
 8006a6c:	08016508 	.word	0x08016508
 8006a70:	24000004 	.word	0x24000004
 8006a74:	24000000 	.word	0x24000000

08006a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a7c:	f7ff ffcc 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8006a80:	4602      	mov	r2, r0
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	4904      	ldr	r1, [pc, #16]	; (8006aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a8e:	5ccb      	ldrb	r3, [r1, r3]
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	08016508 	.word	0x08016508

08006aa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa8:	b0ca      	sub	sp, #296	; 0x128
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006ac8:	2500      	movs	r5, #0
 8006aca:	ea54 0305 	orrs.w	r3, r4, r5
 8006ace:	d049      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ad6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ada:	d02f      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ae0:	d828      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ae6:	d01a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aec:	d822      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af6:	d007      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006af8:	e01c      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006afa:	4bb8      	ldr	r3, [pc, #736]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	4ab7      	ldr	r2, [pc, #732]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b06:	e01a      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	2102      	movs	r1, #2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 fb61 	bl	80091d8 <RCCEx_PLL2_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b1c:	e00f      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b22:	3328      	adds	r3, #40	; 0x28
 8006b24:	2102      	movs	r1, #2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f002 fc08 	bl	800933c <RCCEx_PLL3_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b32:	e004      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b3a:	e000      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b46:	4ba5      	ldr	r3, [pc, #660]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b54:	4aa1      	ldr	r2, [pc, #644]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b56:	430b      	orrs	r3, r1
 8006b58:	6513      	str	r3, [r2, #80]	; 0x50
 8006b5a:	e003      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006b70:	f04f 0900 	mov.w	r9, #0
 8006b74:	ea58 0309 	orrs.w	r3, r8, r9
 8006b78:	d047      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d82a      	bhi.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b84:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006ba1 	.word	0x08006ba1
 8006b90:	08006baf 	.word	0x08006baf
 8006b94:	08006bc5 	.word	0x08006bc5
 8006b98:	08006be3 	.word	0x08006be3
 8006b9c:	08006be3 	.word	0x08006be3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba0:	4b8e      	ldr	r3, [pc, #568]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	4a8d      	ldr	r2, [pc, #564]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bac:	e01a      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f002 fb0e 	bl	80091d8 <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bc2:	e00f      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc8:	3328      	adds	r3, #40	; 0x28
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f002 fbb5 	bl	800933c <RCCEx_PLL3_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bd8:	e004      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006be0:	e000      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bec:	4b7b      	ldr	r3, [pc, #492]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf0:	f023 0107 	bic.w	r1, r3, #7
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfa:	4a78      	ldr	r2, [pc, #480]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6513      	str	r3, [r2, #80]	; 0x50
 8006c00:	e003      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006c16:	f04f 0b00 	mov.w	fp, #0
 8006c1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c1e:	d04c      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2a:	d030      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c30:	d829      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c32:	2bc0      	cmp	r3, #192	; 0xc0
 8006c34:	d02d      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c36:	2bc0      	cmp	r3, #192	; 0xc0
 8006c38:	d825      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c3a:	2b80      	cmp	r3, #128	; 0x80
 8006c3c:	d018      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d821      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d007      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006c4a:	e01c      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4c:	4b63      	ldr	r3, [pc, #396]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	4a62      	ldr	r2, [pc, #392]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c58:	e01c      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5e:	3308      	adds	r3, #8
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 fab8 	bl	80091d8 <RCCEx_PLL2_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c6e:	e011      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c74:	3328      	adds	r3, #40	; 0x28
 8006c76:	2100      	movs	r1, #0
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f002 fb5f 	bl	800933c <RCCEx_PLL3_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c84:	e006      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c8c:	e002      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c9c:	4b4f      	ldr	r3, [pc, #316]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006caa:	4a4c      	ldr	r2, [pc, #304]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6513      	str	r3, [r2, #80]	; 0x50
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006cc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	d053      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ce6:	d035      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cec:	d82e      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006cee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cf2:	d031      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006cf4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cf8:	d828      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cfe:	d01a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d04:	d822      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006d0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d0e:	d007      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006d10:	e01c      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d12:	4b32      	ldr	r3, [pc, #200]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d1e:	e01c      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d24:	3308      	adds	r3, #8
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f002 fa55 	bl	80091d8 <RCCEx_PLL2_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d34:	e011      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3a:	3328      	adds	r3, #40	; 0x28
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f002 fafc 	bl	800933c <RCCEx_PLL3_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d4a:	e006      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d52:	e002      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d62:	4b1e      	ldr	r3, [pc, #120]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d72:	4a1a      	ldr	r2, [pc, #104]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6593      	str	r3, [r2, #88]	; 0x58
 8006d78:	e003      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006d8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d92:	2300      	movs	r3, #0
 8006d94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	d056      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006daa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dae:	d038      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006db4:	d831      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006db6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dba:	d034      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006dbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dc0:	d82b      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dc6:	d01d      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dcc:	d825      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dd6:	d00a      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006dd8:	e01f      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dda:	bf00      	nop
 8006ddc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de0:	4ba2      	ldr	r3, [pc, #648]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4aa1      	ldr	r2, [pc, #644]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dec:	e01c      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df2:	3308      	adds	r3, #8
 8006df4:	2100      	movs	r1, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 f9ee 	bl	80091d8 <RCCEx_PLL2_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e02:	e011      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e08:	3328      	adds	r3, #40	; 0x28
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f002 fa95 	bl	800933c <RCCEx_PLL3_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e18:	e006      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e20:	e002      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006e22:	bf00      	nop
 8006e24:	e000      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e30:	4b8e      	ldr	r3, [pc, #568]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e40:	4a8a      	ldr	r2, [pc, #552]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e42:	430b      	orrs	r3, r1
 8006e44:	6593      	str	r3, [r2, #88]	; 0x58
 8006e46:	e003      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e60:	2300      	movs	r3, #0
 8006e62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	d03a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	2b30      	cmp	r3, #48	; 0x30
 8006e78:	d01f      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006e7a:	2b30      	cmp	r3, #48	; 0x30
 8006e7c:	d819      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d00c      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d815      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d019      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d111      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8e:	4b77      	ldr	r3, [pc, #476]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	4a76      	ldr	r2, [pc, #472]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e9a:	e011      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	2102      	movs	r1, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f002 f997 	bl	80091d8 <RCCEx_PLL2_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006eb0:	e006      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006eb8:	e002      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ec8:	4b68      	ldr	r3, [pc, #416]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	4a65      	ldr	r2, [pc, #404]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006edc:	e003      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ee2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006efc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4313      	orrs	r3, r2
 8006f04:	d051      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f10:	d035      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f16:	d82e      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f1c:	d031      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006f1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f22:	d828      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f28:	d01a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2e:	d822      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f38:	d007      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006f3a:	e01c      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3c:	4b4b      	ldr	r3, [pc, #300]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	4a4a      	ldr	r2, [pc, #296]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f48:	e01c      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4e:	3308      	adds	r3, #8
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 f940 	bl	80091d8 <RCCEx_PLL2_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f5e:	e011      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f64:	3328      	adds	r3, #40	; 0x28
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f002 f9e7 	bl	800933c <RCCEx_PLL3_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f74:	e006      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f7c:	e002      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f8c:	4b37      	ldr	r3, [pc, #220]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9a:	4a34      	ldr	r2, [pc, #208]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6513      	str	r3, [r2, #80]	; 0x50
 8006fa0:	e003      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	d056      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd4:	d033      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fda:	d82c      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fe0:	d02f      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fe6:	d826      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fe8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fec:	d02b      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006fee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ff2:	d820      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff8:	d012      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ffe:	d81a      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d022      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007008:	d115      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700e:	3308      	adds	r3, #8
 8007010:	2101      	movs	r1, #1
 8007012:	4618      	mov	r0, r3
 8007014:	f002 f8e0 	bl	80091d8 <RCCEx_PLL2_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800701e:	e015      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007024:	3328      	adds	r3, #40	; 0x28
 8007026:	2101      	movs	r1, #1
 8007028:	4618      	mov	r0, r3
 800702a:	f002 f987 	bl	800933c <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007034:	e00a      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800703c:	e006      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800703e:	bf00      	nop
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800704a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10d      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007062:	4a02      	ldr	r2, [pc, #8]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007064:	430b      	orrs	r3, r1
 8007066:	6513      	str	r3, [r2, #80]	; 0x50
 8007068:	e006      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800706a:	bf00      	nop
 800706c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800708e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	d055      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070a4:	d033      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80070a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070aa:	d82c      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b0:	d02f      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b6:	d826      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070bc:	d02b      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80070be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070c2:	d820      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c8:	d012      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80070ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ce:	d81a      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d022      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80070d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d8:	d115      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070de:	3308      	adds	r3, #8
 80070e0:	2101      	movs	r1, #1
 80070e2:	4618      	mov	r0, r3
 80070e4:	f002 f878 	bl	80091d8 <RCCEx_PLL2_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070ee:	e015      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f4:	3328      	adds	r3, #40	; 0x28
 80070f6:	2101      	movs	r1, #1
 80070f8:	4618      	mov	r0, r3
 80070fa:	f002 f91f 	bl	800933c <RCCEx_PLL3_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007104:	e00a      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800710e:	bf00      	nop
 8007110:	e004      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800711a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007124:	4ba3      	ldr	r3, [pc, #652]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007128:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007134:	4a9f      	ldr	r2, [pc, #636]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007136:	430b      	orrs	r3, r1
 8007138:	6593      	str	r3, [r2, #88]	; 0x58
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007140:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007154:	2300      	movs	r3, #0
 8007156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800715a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800715e:	460b      	mov	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	d037      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716e:	d00e      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007174:	d816      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d018      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800717a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717e:	d111      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007180:	4b8c      	ldr	r3, [pc, #560]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a8b      	ldr	r2, [pc, #556]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800718c:	e00f      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007192:	3308      	adds	r3, #8
 8007194:	2101      	movs	r1, #1
 8007196:	4618      	mov	r0, r3
 8007198:	f002 f81e 	bl	80091d8 <RCCEx_PLL2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80071a2:	e004      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071aa:	e000      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80071ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071b6:	4b7f      	ldr	r3, [pc, #508]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c4:	4a7b      	ldr	r2, [pc, #492]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071c6:	430b      	orrs	r3, r1
 80071c8:	6513      	str	r3, [r2, #80]	; 0x50
 80071ca:	e003      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80071e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071e4:	2300      	movs	r3, #0
 80071e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4313      	orrs	r3, r2
 80071f2:	d039      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d81c      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007241 	.word	0x08007241
 8007208:	08007215 	.word	0x08007215
 800720c:	08007223 	.word	0x08007223
 8007210:	08007241 	.word	0x08007241
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007214:	4b67      	ldr	r3, [pc, #412]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a66      	ldr	r2, [pc, #408]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800721a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007226:	3308      	adds	r3, #8
 8007228:	2102      	movs	r1, #2
 800722a:	4618      	mov	r0, r3
 800722c:	f001 ffd4 	bl	80091d8 <RCCEx_PLL2_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800724a:	4b5a      	ldr	r3, [pc, #360]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	f023 0103 	bic.w	r1, r3, #3
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007258:	4a56      	ldr	r2, [pc, #344]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800725a:	430b      	orrs	r3, r1
 800725c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800725e:	e003      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800727e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	f000 809f 	beq.w	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800728a:	4b4b      	ldr	r3, [pc, #300]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a4a      	ldr	r2, [pc, #296]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007294:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007296:	f7fb f85f 	bl	8002358 <HAL_GetTick>
 800729a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800729e:	e00b      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a0:	f7fb f85a 	bl	8002358 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b64      	cmp	r3, #100	; 0x64
 80072ae:	d903      	bls.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072b6:	e005      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072b8:	4b3f      	ldr	r3, [pc, #252]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0ed      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80072c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d179      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072cc:	4b39      	ldr	r3, [pc, #228]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072d8:	4053      	eors	r3, r2
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d015      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072e2:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072ee:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	4a30      	ldr	r2, [pc, #192]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072fa:	4b2e      	ldr	r3, [pc, #184]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	4a2d      	ldr	r2, [pc, #180]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007304:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007306:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800730c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731a:	d118      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fb f81c 	bl	8002358 <HAL_GetTick>
 8007320:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007324:	e00d      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fb f817 	bl	8002358 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007330:	1ad2      	subs	r2, r2, r3
 8007332:	f241 3388 	movw	r3, #5000	; 0x1388
 8007336:	429a      	cmp	r2, r3
 8007338:	d903      	bls.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007340:	e005      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007342:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0eb      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800734e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007352:	2b00      	cmp	r3, #0
 8007354:	d129      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800735e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007366:	d10e      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007368:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007378:	091a      	lsrs	r2, r3, #4
 800737a:	4b10      	ldr	r3, [pc, #64]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800737c:	4013      	ands	r3, r2
 800737e:	4a0d      	ldr	r2, [pc, #52]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007380:	430b      	orrs	r3, r1
 8007382:	6113      	str	r3, [r2, #16]
 8007384:	e005      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007386:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007390:	6113      	str	r3, [r2, #16]
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007394:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800739e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a2:	4a04      	ldr	r2, [pc, #16]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6713      	str	r3, [r2, #112]	; 0x70
 80073a8:	e00e      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80073b2:	e009      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80073b4:	58024400 	.word	0x58024400
 80073b8:	58024800 	.word	0x58024800
 80073bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f002 0301 	and.w	r3, r2, #1
 80073d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073d8:	2300      	movs	r3, #0
 80073da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f000 8089 	beq.w	80074fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f0:	2b28      	cmp	r3, #40	; 0x28
 80073f2:	d86b      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80073f4:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	080074d5 	.word	0x080074d5
 8007400:	080074cd 	.word	0x080074cd
 8007404:	080074cd 	.word	0x080074cd
 8007408:	080074cd 	.word	0x080074cd
 800740c:	080074cd 	.word	0x080074cd
 8007410:	080074cd 	.word	0x080074cd
 8007414:	080074cd 	.word	0x080074cd
 8007418:	080074cd 	.word	0x080074cd
 800741c:	080074a1 	.word	0x080074a1
 8007420:	080074cd 	.word	0x080074cd
 8007424:	080074cd 	.word	0x080074cd
 8007428:	080074cd 	.word	0x080074cd
 800742c:	080074cd 	.word	0x080074cd
 8007430:	080074cd 	.word	0x080074cd
 8007434:	080074cd 	.word	0x080074cd
 8007438:	080074cd 	.word	0x080074cd
 800743c:	080074b7 	.word	0x080074b7
 8007440:	080074cd 	.word	0x080074cd
 8007444:	080074cd 	.word	0x080074cd
 8007448:	080074cd 	.word	0x080074cd
 800744c:	080074cd 	.word	0x080074cd
 8007450:	080074cd 	.word	0x080074cd
 8007454:	080074cd 	.word	0x080074cd
 8007458:	080074cd 	.word	0x080074cd
 800745c:	080074d5 	.word	0x080074d5
 8007460:	080074cd 	.word	0x080074cd
 8007464:	080074cd 	.word	0x080074cd
 8007468:	080074cd 	.word	0x080074cd
 800746c:	080074cd 	.word	0x080074cd
 8007470:	080074cd 	.word	0x080074cd
 8007474:	080074cd 	.word	0x080074cd
 8007478:	080074cd 	.word	0x080074cd
 800747c:	080074d5 	.word	0x080074d5
 8007480:	080074cd 	.word	0x080074cd
 8007484:	080074cd 	.word	0x080074cd
 8007488:	080074cd 	.word	0x080074cd
 800748c:	080074cd 	.word	0x080074cd
 8007490:	080074cd 	.word	0x080074cd
 8007494:	080074cd 	.word	0x080074cd
 8007498:	080074cd 	.word	0x080074cd
 800749c:	080074d5 	.word	0x080074d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a4:	3308      	adds	r3, #8
 80074a6:	2101      	movs	r1, #1
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fe95 	bl	80091d8 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80074b4:	e00f      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ba:	3328      	adds	r3, #40	; 0x28
 80074bc:	2101      	movs	r1, #1
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 ff3c 	bl	800933c <RCCEx_PLL3_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80074ca:	e004      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80074d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074de:	4bbf      	ldr	r3, [pc, #764]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ec:	4abb      	ldr	r2, [pc, #748]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074ee:	430b      	orrs	r3, r1
 80074f0:	6553      	str	r3, [r2, #84]	; 0x54
 80074f2:	e003      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f002 0302 	and.w	r3, r2, #2
 8007508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800750c:	2300      	movs	r3, #0
 800750e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007512:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007516:	460b      	mov	r3, r1
 8007518:	4313      	orrs	r3, r2
 800751a:	d041      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007522:	2b05      	cmp	r3, #5
 8007524:	d824      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007579 	.word	0x08007579
 8007530:	08007545 	.word	0x08007545
 8007534:	0800755b 	.word	0x0800755b
 8007538:	08007579 	.word	0x08007579
 800753c:	08007579 	.word	0x08007579
 8007540:	08007579 	.word	0x08007579
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007548:	3308      	adds	r3, #8
 800754a:	2101      	movs	r1, #1
 800754c:	4618      	mov	r0, r3
 800754e:	f001 fe43 	bl	80091d8 <RCCEx_PLL2_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007558:	e00f      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755e:	3328      	adds	r3, #40	; 0x28
 8007560:	2101      	movs	r1, #1
 8007562:	4618      	mov	r0, r3
 8007564:	f001 feea 	bl	800933c <RCCEx_PLL3_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800756e:	e004      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007576:	e000      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800757a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007582:	4b96      	ldr	r3, [pc, #600]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007586:	f023 0107 	bic.w	r1, r3, #7
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007590:	4a92      	ldr	r2, [pc, #584]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007592:	430b      	orrs	r3, r1
 8007594:	6553      	str	r3, [r2, #84]	; 0x54
 8007596:	e003      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800759c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f002 0304 	and.w	r3, r2, #4
 80075ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075b0:	2300      	movs	r3, #0
 80075b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4313      	orrs	r3, r2
 80075be:	d044      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	d825      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	08007621 	.word	0x08007621
 80075d8:	080075ed 	.word	0x080075ed
 80075dc:	08007603 	.word	0x08007603
 80075e0:	08007621 	.word	0x08007621
 80075e4:	08007621 	.word	0x08007621
 80075e8:	08007621 	.word	0x08007621
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f0:	3308      	adds	r3, #8
 80075f2:	2101      	movs	r1, #1
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fdef 	bl	80091d8 <RCCEx_PLL2_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007600:	e00f      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007606:	3328      	adds	r3, #40	; 0x28
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fe96 	bl	800933c <RCCEx_PLL3_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007616:	e004      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800761e:	e000      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10b      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800762a:	4b6c      	ldr	r3, [pc, #432]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800762c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762e:	f023 0107 	bic.w	r1, r3, #7
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800763a:	4a68      	ldr	r2, [pc, #416]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800763c:	430b      	orrs	r3, r1
 800763e:	6593      	str	r3, [r2, #88]	; 0x58
 8007640:	e003      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f002 0320 	and.w	r3, r2, #32
 8007656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800765a:	2300      	movs	r3, #0
 800765c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007664:	460b      	mov	r3, r1
 8007666:	4313      	orrs	r3, r2
 8007668:	d055      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007676:	d033      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800767c:	d82c      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007682:	d02f      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d826      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800768a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800768e:	d02b      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007690:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007694:	d820      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800769a:	d012      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800769c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a0:	d81a      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d022      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80076a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076aa:	d115      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b0:	3308      	adds	r3, #8
 80076b2:	2100      	movs	r1, #0
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 fd8f 	bl	80091d8 <RCCEx_PLL2_Config>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80076c0:	e015      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c6:	3328      	adds	r3, #40	; 0x28
 80076c8:	2102      	movs	r1, #2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 fe36 	bl	800933c <RCCEx_PLL3_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80076d6:	e00a      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076de:	e006      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076e0:	bf00      	nop
 80076e2:	e004      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076e4:	bf00      	nop
 80076e6:	e002      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076e8:	bf00      	nop
 80076ea:	e000      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076f6:	4b39      	ldr	r3, [pc, #228]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80076fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007706:	4a35      	ldr	r2, [pc, #212]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007708:	430b      	orrs	r3, r1
 800770a:	6553      	str	r3, [r2, #84]	; 0x54
 800770c:	e003      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800772c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007730:	460b      	mov	r3, r1
 8007732:	4313      	orrs	r3, r2
 8007734:	d058      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800773e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007742:	d033      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007744:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007748:	d82c      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774e:	d02f      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007754:	d826      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800775a:	d02b      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800775c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007760:	d820      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007766:	d012      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800776c:	d81a      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d022      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007776:	d115      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777c:	3308      	adds	r3, #8
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f001 fd29 	bl	80091d8 <RCCEx_PLL2_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800778c:	e015      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800778e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007792:	3328      	adds	r3, #40	; 0x28
 8007794:	2102      	movs	r1, #2
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fdd0 	bl	800933c <RCCEx_PLL3_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80077a2:	e00a      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077aa:	e006      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077ac:	bf00      	nop
 80077ae:	e004      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077b0:	bf00      	nop
 80077b2:	e002      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077b4:	bf00      	nop
 80077b6:	e000      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80077b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10e      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077c2:	4b06      	ldr	r3, [pc, #24]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077d2:	4a02      	ldr	r2, [pc, #8]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	6593      	str	r3, [r2, #88]	; 0x58
 80077d8:	e006      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80077da:	bf00      	nop
 80077dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80077f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077f8:	2300      	movs	r3, #0
 80077fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007802:	460b      	mov	r3, r1
 8007804:	4313      	orrs	r3, r2
 8007806:	d055      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007810:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007814:	d033      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007816:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800781a:	d82c      	bhi.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800781c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007820:	d02f      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007826:	d826      	bhi.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007828:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800782c:	d02b      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800782e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007832:	d820      	bhi.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007838:	d012      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800783a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800783e:	d81a      	bhi.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d022      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007848:	d115      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800784e:	3308      	adds	r3, #8
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f001 fcc0 	bl	80091d8 <RCCEx_PLL2_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800785e:	e015      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007864:	3328      	adds	r3, #40	; 0x28
 8007866:	2102      	movs	r1, #2
 8007868:	4618      	mov	r0, r3
 800786a:	f001 fd67 	bl	800933c <RCCEx_PLL3_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007874:	e00a      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800787c:	e006      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800787e:	bf00      	nop
 8007880:	e004      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800788a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800788c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10b      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007894:	4ba1      	ldr	r3, [pc, #644]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007898:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078a4:	4a9d      	ldr	r2, [pc, #628]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078a6:	430b      	orrs	r3, r1
 80078a8:	6593      	str	r3, [r2, #88]	; 0x58
 80078aa:	e003      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f002 0308 	and.w	r3, r2, #8
 80078c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078c4:	2300      	movs	r3, #0
 80078c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80078ce:	460b      	mov	r3, r1
 80078d0:	4313      	orrs	r3, r2
 80078d2:	d01e      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e0:	d10c      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e6:	3328      	adds	r3, #40	; 0x28
 80078e8:	2102      	movs	r1, #2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fd26 	bl	800933c <RCCEx_PLL3_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078fc:	4b87      	ldr	r3, [pc, #540]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790c:	4a83      	ldr	r2, [pc, #524]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800790e:	430b      	orrs	r3, r1
 8007910:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f002 0310 	and.w	r3, r2, #16
 800791e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007922:	2300      	movs	r3, #0
 8007924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007928:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800792c:	460b      	mov	r3, r1
 800792e:	4313      	orrs	r3, r2
 8007930:	d01e      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800793a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800793e:	d10c      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007944:	3328      	adds	r3, #40	; 0x28
 8007946:	2102      	movs	r1, #2
 8007948:	4618      	mov	r0, r3
 800794a:	f001 fcf7 	bl	800933c <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800795a:	4b70      	ldr	r3, [pc, #448]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800796a:	4a6c      	ldr	r2, [pc, #432]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800796c:	430b      	orrs	r3, r1
 800796e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800797c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007980:	2300      	movs	r3, #0
 8007982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007986:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800798a:	460b      	mov	r3, r1
 800798c:	4313      	orrs	r3, r2
 800798e:	d03e      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800799c:	d022      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800799e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079a2:	d81b      	bhi.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ac:	d00b      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80079ae:	e015      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b4:	3308      	adds	r3, #8
 80079b6:	2100      	movs	r1, #0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 fc0d 	bl	80091d8 <RCCEx_PLL2_Config>
 80079be:	4603      	mov	r3, r0
 80079c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80079c4:	e00f      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ca:	3328      	adds	r3, #40	; 0x28
 80079cc:	2102      	movs	r1, #2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 fcb4 	bl	800933c <RCCEx_PLL3_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80079da:	e004      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079e2:	e000      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80079e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10b      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079ee:	4b4b      	ldr	r3, [pc, #300]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079fe:	4a47      	ldr	r2, [pc, #284]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a00:	430b      	orrs	r3, r1
 8007a02:	6593      	str	r3, [r2, #88]	; 0x58
 8007a04:	e003      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007a24:	460b      	mov	r3, r1
 8007a26:	4313      	orrs	r3, r2
 8007a28:	d03b      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a36:	d01f      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a3c:	d818      	bhi.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a42:	d003      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a48:	d007      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007a4a:	e011      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4c:	4b33      	ldr	r3, [pc, #204]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a32      	ldr	r2, [pc, #200]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a58:	e00f      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5e:	3328      	adds	r3, #40	; 0x28
 8007a60:	2101      	movs	r1, #1
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 fc6a 	bl	800933c <RCCEx_PLL3_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a6e:	e004      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a76:	e000      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10b      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a82:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a92:	4a22      	ldr	r2, [pc, #136]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a94:	430b      	orrs	r3, r1
 8007a96:	6553      	str	r3, [r2, #84]	; 0x54
 8007a98:	e003      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007aae:	673b      	str	r3, [r7, #112]	; 0x70
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	677b      	str	r3, [r7, #116]	; 0x74
 8007ab4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d034      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007acc:	d007      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007ace:	e011      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad0:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	4a11      	ldr	r2, [pc, #68]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007adc:	e00e      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	2102      	movs	r1, #2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fb76 	bl	80091d8 <RCCEx_PLL2_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007af2:	e003      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10d      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b12:	4a02      	ldr	r2, [pc, #8]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b14:	430b      	orrs	r3, r1
 8007b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b18:	e006      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007b1a:	bf00      	nop
 8007b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b36:	2300      	movs	r3, #0
 8007b38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d00c      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b48:	3328      	adds	r3, #40	; 0x28
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 fbf5 	bl	800933c <RCCEx_PLL3_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	667b      	str	r3, [r7, #100]	; 0x64
 8007b70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007b74:	460b      	mov	r3, r1
 8007b76:	4313      	orrs	r3, r2
 8007b78:	d038      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b86:	d018      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b8c:	d811      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b92:	d014      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b98:	d80b      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d011      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba2:	d106      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba4:	4bc3      	ldr	r3, [pc, #780]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	4ac2      	ldr	r2, [pc, #776]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bb8:	e004      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007bba:	bf00      	nop
 8007bbc:	e002      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007bbe:	bf00      	nop
 8007bc0:	e000      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bcc:	4bb9      	ldr	r3, [pc, #740]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bdc:	4ab5      	ldr	r2, [pc, #724]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6553      	str	r3, [r2, #84]	; 0x54
 8007be2:	e003      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007bf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bfe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007c02:	460b      	mov	r3, r1
 8007c04:	4313      	orrs	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c08:	4baa      	ldr	r3, [pc, #680]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c16:	4aa7      	ldr	r2, [pc, #668]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007c28:	653b      	str	r3, [r7, #80]	; 0x50
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007c32:	460b      	mov	r3, r1
 8007c34:	4313      	orrs	r3, r2
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c38:	4b9e      	ldr	r3, [pc, #632]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c48:	4a9a      	ldr	r2, [pc, #616]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007c64:	460b      	mov	r3, r1
 8007c66:	4313      	orrs	r3, r2
 8007c68:	d009      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c6a:	4b92      	ldr	r3, [pc, #584]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c78:	4a8e      	ldr	r2, [pc, #568]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007c94:	460b      	mov	r3, r1
 8007c96:	4313      	orrs	r3, r2
 8007c98:	d00e      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c9a:	4b86      	ldr	r3, [pc, #536]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4a85      	ldr	r2, [pc, #532]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ca0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ca4:	6113      	str	r3, [r2, #16]
 8007ca6:	4b83      	ldr	r3, [pc, #524]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ca8:	6919      	ldr	r1, [r3, #16]
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007cb2:	4a80      	ldr	r2, [pc, #512]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	d009      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007cd4:	4b77      	ldr	r3, [pc, #476]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce2:	4a74      	ldr	r2, [pc, #464]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4313      	orrs	r3, r2
 8007d02:	d00a      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d04:	4b6b      	ldr	r3, [pc, #428]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d08:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d14:	4a67      	ldr	r2, [pc, #412]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d16:	430b      	orrs	r3, r1
 8007d18:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	2100      	movs	r1, #0
 8007d24:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d30:	460b      	mov	r3, r1
 8007d32:	4313      	orrs	r3, r2
 8007d34:	d011      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fa4a 	bl	80091d8 <RCCEx_PLL2_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	2100      	movs	r1, #0
 8007d64:	6239      	str	r1, [r7, #32]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d011      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 fa2a 	bl	80091d8 <RCCEx_PLL2_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	2100      	movs	r1, #0
 8007da4:	61b9      	str	r1, [r7, #24]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007db0:	460b      	mov	r3, r1
 8007db2:	4313      	orrs	r3, r2
 8007db4:	d011      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dba:	3308      	adds	r3, #8
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 fa0a 	bl	80091d8 <RCCEx_PLL2_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	2100      	movs	r1, #0
 8007de4:	6139      	str	r1, [r7, #16]
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d011      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfa:	3328      	adds	r3, #40	; 0x28
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 fa9c 	bl	800933c <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	2100      	movs	r1, #0
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e30:	460b      	mov	r3, r1
 8007e32:	4313      	orrs	r3, r2
 8007e34:	d011      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3a:	3328      	adds	r3, #40	; 0x28
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 fa7c 	bl	800933c <RCCEx_PLL3_Config>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	2100      	movs	r1, #0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	607b      	str	r3, [r7, #4]
 8007e6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e70:	460b      	mov	r3, r1
 8007e72:	4313      	orrs	r3, r2
 8007e74:	d011      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7a:	3328      	adds	r3, #40	; 0x28
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 fa5c 	bl	800933c <RCCEx_PLL3_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007e9a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eb4:	58024400 	.word	0x58024400

08007eb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b090      	sub	sp, #64	; 0x40
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	f040 8094 	bne.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007ed0:	4b9e      	ldr	r3, [pc, #632]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	f200 8087 	bhi.w	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007efd 	.word	0x08007efd
 8007eec:	08007f25 	.word	0x08007f25
 8007ef0:	08007f4d 	.word	0x08007f4d
 8007ef4:	08007fe9 	.word	0x08007fe9
 8007ef8:	08007f75 	.word	0x08007f75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007efc:	4b93      	ldr	r3, [pc, #588]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f08:	d108      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 f810 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f18:	f000 bd45 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f20:	f000 bd41 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f24:	4b89      	ldr	r3, [pc, #548]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f30:	d108      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f32:	f107 0318 	add.w	r3, r7, #24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fd54 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f40:	f000 bd31 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f48:	f000 bd2d 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f4c:	4b7f      	ldr	r3, [pc, #508]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f58:	d108      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f5a:	f107 030c 	add.w	r3, r7, #12
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fe94 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f68:	f000 bd1d 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f70:	f000 bd19 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f74:	4b75      	ldr	r3, [pc, #468]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f7e:	4b73      	ldr	r3, [pc, #460]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d10c      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d109      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f90:	4b6e      	ldr	r3, [pc, #440]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	08db      	lsrs	r3, r3, #3
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	4a6d      	ldr	r2, [pc, #436]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa2:	e01f      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fa4:	4b69      	ldr	r3, [pc, #420]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb0:	d106      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fb8:	d102      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fba:	4b66      	ldr	r3, [pc, #408]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fbe:	e011      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fc0:	4b62      	ldr	r3, [pc, #392]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fcc:	d106      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd4:	d102      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fd6:	4b60      	ldr	r3, [pc, #384]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fda:	e003      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fe0:	f000 bce1 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fe4:	f000 bcdf 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fe8:	4b5c      	ldr	r3, [pc, #368]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fec:	f000 bcdb 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff4:	f000 bcd7 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ffc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008000:	430b      	orrs	r3, r1
 8008002:	f040 80ad 	bne.w	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008006:	4b51      	ldr	r3, [pc, #324]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800800e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008016:	d056      	beq.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801e:	f200 8090 	bhi.w	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	2bc0      	cmp	r3, #192	; 0xc0
 8008026:	f000 8088 	beq.w	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	2bc0      	cmp	r3, #192	; 0xc0
 800802e:	f200 8088 	bhi.w	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	2b80      	cmp	r3, #128	; 0x80
 8008036:	d032      	beq.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	2b80      	cmp	r3, #128	; 0x80
 800803c:	f200 8081 	bhi.w	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	d014      	beq.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800804c:	e079      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800804e:	4b3f      	ldr	r3, [pc, #252]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800805a:	d108      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800805c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008060:	4618      	mov	r0, r3
 8008062:	f000 ff67 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800806a:	f000 bc9c 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008072:	f000 bc98 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008076:	4b35      	ldr	r3, [pc, #212]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800807e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008082:	d108      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008084:	f107 0318 	add.w	r3, r7, #24
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fcab 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008092:	f000 bc88 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800809a:	f000 bc84 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800809e:	4b2b      	ldr	r3, [pc, #172]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080aa:	d108      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ac:	f107 030c 	add.w	r3, r7, #12
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fdeb 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ba:	f000 bc74 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c2:	f000 bc70 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080c6:	4b21      	ldr	r3, [pc, #132]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080d0:	4b1e      	ldr	r3, [pc, #120]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d10c      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80080dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080e2:	4b1a      	ldr	r3, [pc, #104]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	08db      	lsrs	r3, r3, #3
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	4a18      	ldr	r2, [pc, #96]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080ee:	fa22 f303 	lsr.w	r3, r2, r3
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f4:	e01f      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080f6:	4b15      	ldr	r3, [pc, #84]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008102:	d106      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800810a:	d102      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008110:	e011      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008112:	4b0e      	ldr	r3, [pc, #56]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800811e:	d106      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008126:	d102      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008128:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800812c:	e003      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008132:	f000 bc38 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008136:	f000 bc36 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800813e:	f000 bc32 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008146:	f000 bc2e 	b.w	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800814a:	bf00      	nop
 800814c:	58024400 	.word	0x58024400
 8008150:	03d09000 	.word	0x03d09000
 8008154:	003d0900 	.word	0x003d0900
 8008158:	017d7840 	.word	0x017d7840
 800815c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008164:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008168:	430b      	orrs	r3, r1
 800816a:	f040 809c 	bne.w	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800816e:	4b9e      	ldr	r3, [pc, #632]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008172:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008176:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800817e:	d054      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008186:	f200 808b 	bhi.w	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008190:	f000 8083 	beq.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800819a:	f200 8081 	bhi.w	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081a4:	d02f      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081ac:	d878      	bhi.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ba:	d012      	beq.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80081bc:	e070      	b.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081be:	4b8a      	ldr	r3, [pc, #552]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ca:	d107      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 feaf 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081da:	e3e4      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e0:	e3e1      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081e2:	4b81      	ldr	r3, [pc, #516]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081ee:	d107      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f0:	f107 0318 	add.w	r3, r7, #24
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fbf5 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081fe:	e3d2      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008204:	e3cf      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008206:	4b78      	ldr	r3, [pc, #480]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800820e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008212:	d107      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008214:	f107 030c 	add.w	r3, r7, #12
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fd37 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008222:	e3c0      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008228:	e3bd      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800822a:	4b6f      	ldr	r3, [pc, #444]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800822c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800822e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008232:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008234:	4b6c      	ldr	r3, [pc, #432]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b04      	cmp	r3, #4
 800823e:	d10c      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008242:	2b00      	cmp	r3, #0
 8008244:	d109      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008246:	4b68      	ldr	r3, [pc, #416]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	08db      	lsrs	r3, r3, #3
 800824c:	f003 0303 	and.w	r3, r3, #3
 8008250:	4a66      	ldr	r2, [pc, #408]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008252:	fa22 f303 	lsr.w	r3, r2, r3
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008258:	e01e      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800825a:	4b63      	ldr	r3, [pc, #396]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008266:	d106      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800826e:	d102      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008270:	4b5f      	ldr	r3, [pc, #380]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008274:	e010      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008276:	4b5c      	ldr	r3, [pc, #368]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800827e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008282:	d106      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828a:	d102      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800828c:	4b59      	ldr	r3, [pc, #356]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008290:	e002      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008296:	e386      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008298:	e385      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800829a:	4b57      	ldr	r3, [pc, #348]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800829e:	e382      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a4:	e37f      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80082a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80082ae:	430b      	orrs	r3, r1
 80082b0:	f040 80a7 	bne.w	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80082b4:	4b4c      	ldr	r3, [pc, #304]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80082bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082c4:	d055      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082cc:	f200 8096 	bhi.w	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082d6:	f000 8084 	beq.w	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082e0:	f200 808c 	bhi.w	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ea:	d030      	beq.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082f2:	f200 8083 	bhi.w	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008302:	d012      	beq.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008304:	e07a      	b.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008306:	4b38      	ldr	r3, [pc, #224]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800830e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008312:	d107      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fe0b 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008322:	e340      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008328:	e33d      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800832a:	4b2f      	ldr	r3, [pc, #188]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008336:	d107      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008338:	f107 0318 	add.w	r3, r7, #24
 800833c:	4618      	mov	r0, r3
 800833e:	f000 fb51 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008346:	e32e      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800834c:	e32b      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800834e:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800835a:	d107      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800835c:	f107 030c 	add.w	r3, r7, #12
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fc93 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800836a:	e31c      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008370:	e319      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008372:	4b1d      	ldr	r3, [pc, #116]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800837a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800837c:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b04      	cmp	r3, #4
 8008386:	d10c      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800838e:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	08db      	lsrs	r3, r3, #3
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	4a14      	ldr	r2, [pc, #80]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800839a:	fa22 f303 	lsr.w	r3, r2, r3
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a0:	e01e      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083a2:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ae:	d106      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80083b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b6:	d102      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083bc:	e010      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ca:	d106      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80083cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d2:	d102      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d8:	e002      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083de:	e2e2      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083e0:	e2e1      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e6:	e2de      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083e8:	58024400 	.word	0x58024400
 80083ec:	03d09000 	.word	0x03d09000
 80083f0:	003d0900 	.word	0x003d0900
 80083f4:	017d7840 	.word	0x017d7840
 80083f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008400:	e2d1      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008406:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800840a:	430b      	orrs	r3, r1
 800840c:	f040 809c 	bne.w	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008410:	4b93      	ldr	r3, [pc, #588]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008420:	d054      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008428:	f200 808b 	bhi.w	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008432:	f000 8083 	beq.w	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800843c:	f200 8081 	bhi.w	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008446:	d02f      	beq.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800844e:	d878      	bhi.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	2b00      	cmp	r3, #0
 8008454:	d004      	beq.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845c:	d012      	beq.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800845e:	e070      	b.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008460:	4b7f      	ldr	r3, [pc, #508]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846c:	d107      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800846e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fd5e 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800847c:	e293      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008482:	e290      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008484:	4b76      	ldr	r3, [pc, #472]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800848c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008490:	d107      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008492:	f107 0318 	add.w	r3, r7, #24
 8008496:	4618      	mov	r0, r3
 8008498:	f000 faa4 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a0:	e281      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a6:	e27e      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084a8:	4b6d      	ldr	r3, [pc, #436]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b4:	d107      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fbe6 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c4:	e26f      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ca:	e26c      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084cc:	4b64      	ldr	r3, [pc, #400]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084d6:	4b62      	ldr	r3, [pc, #392]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d10c      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084e8:	4b5d      	ldr	r3, [pc, #372]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	4a5c      	ldr	r2, [pc, #368]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fa:	e01e      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084fc:	4b58      	ldr	r3, [pc, #352]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008508:	d106      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008510:	d102      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008512:	4b55      	ldr	r3, [pc, #340]	; (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008516:	e010      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008518:	4b51      	ldr	r3, [pc, #324]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008524:	d106      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800852c:	d102      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800852e:	4b4f      	ldr	r3, [pc, #316]	; (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008532:	e002      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008538:	e235      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800853a:	e234      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800853c:	4b4c      	ldr	r3, [pc, #304]	; (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008540:	e231      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008546:	e22e      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008550:	430b      	orrs	r3, r1
 8008552:	f040 808f 	bne.w	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008556:	4b42      	ldr	r3, [pc, #264]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800855e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008566:	d06b      	beq.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800856e:	d874      	bhi.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008576:	d056      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800857e:	d86c      	bhi.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008586:	d03b      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800858e:	d864      	bhi.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008596:	d021      	beq.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859e:	d85c      	bhi.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ac:	d004      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80085ae:	e054      	b.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80085b0:	f7fe fa62 	bl	8006a78 <HAL_RCC_GetPCLK1Freq>
 80085b4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085b6:	e1f6      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085b8:	4b29      	ldr	r3, [pc, #164]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085c4:	d107      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085c6:	f107 0318 	add.w	r3, r7, #24
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fa0a 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d4:	e1e7      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085da:	e1e4      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085dc:	4b20      	ldr	r3, [pc, #128]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e8:	d107      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ea:	f107 030c 	add.w	r3, r7, #12
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fb4c 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f8:	e1d5      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085fe:	e1d2      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008600:	4b17      	ldr	r3, [pc, #92]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b04      	cmp	r3, #4
 800860a:	d109      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800860c:	4b14      	ldr	r3, [pc, #80]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	4a13      	ldr	r2, [pc, #76]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800861e:	e1c2      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008624:	e1bf      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008626:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008632:	d102      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008638:	e1b5      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800863e:	e1b2      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800864c:	d102      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800864e:	4b07      	ldr	r3, [pc, #28]	; (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008652:	e1a8      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008658:	e1a5      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865e:	e1a2      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008660:	58024400 	.word	0x58024400
 8008664:	03d09000 	.word	0x03d09000
 8008668:	003d0900 	.word	0x003d0900
 800866c:	017d7840 	.word	0x017d7840
 8008670:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008678:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800867c:	430b      	orrs	r3, r1
 800867e:	d173      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008680:	4b9c      	ldr	r3, [pc, #624]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008688:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008690:	d02f      	beq.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008698:	d863      	bhi.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a6:	d012      	beq.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80086a8:	e05b      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086aa:	4b92      	ldr	r3, [pc, #584]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086b6:	d107      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b8:	f107 0318 	add.w	r3, r7, #24
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f991 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c6:	e16e      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086cc:	e16b      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086ce:	4b89      	ldr	r3, [pc, #548]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086da:	d107      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086dc:	f107 030c 	add.w	r3, r7, #12
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fad3 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ea:	e15c      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f0:	e159      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086f2:	4b80      	ldr	r3, [pc, #512]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086fc:	4b7d      	ldr	r3, [pc, #500]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b04      	cmp	r3, #4
 8008706:	d10c      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800870e:	4b79      	ldr	r3, [pc, #484]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	08db      	lsrs	r3, r3, #3
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	4a77      	ldr	r2, [pc, #476]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800871a:	fa22 f303 	lsr.w	r3, r2, r3
 800871e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008720:	e01e      	b.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008722:	4b74      	ldr	r3, [pc, #464]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872e:	d106      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008736:	d102      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008738:	4b70      	ldr	r3, [pc, #448]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800873a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800873c:	e010      	b.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800873e:	4b6d      	ldr	r3, [pc, #436]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800874a:	d106      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800874c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008752:	d102      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008754:	4b6a      	ldr	r3, [pc, #424]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008758:	e002      	b.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800875e:	e122      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008760:	e121      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008766:	e11e      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008770:	430b      	orrs	r3, r1
 8008772:	d133      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008774:	4b5f      	ldr	r3, [pc, #380]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800877c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878a:	d012      	beq.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800878c:	e023      	b.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800878e:	4b59      	ldr	r3, [pc, #356]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879a:	d107      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800879c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fbc7 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087aa:	e0fc      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b0:	e0f9      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b2:	4b50      	ldr	r3, [pc, #320]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087be:	d107      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c0:	f107 0318 	add.w	r3, r7, #24
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f90d 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ce:	e0ea      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d4:	e0e7      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087da:	e0e4      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80087dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80087e4:	430b      	orrs	r3, r1
 80087e6:	f040 808d 	bne.w	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80087ea:	4b42      	ldr	r3, [pc, #264]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087fa:	d06b      	beq.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008802:	d874      	bhi.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880a:	d056      	beq.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008812:	d86c      	bhi.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800881a:	d03b      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008822:	d864      	bhi.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800882a:	d021      	beq.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008832:	d85c      	bhi.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008840:	d004      	beq.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008842:	e054      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008844:	f000 f8b8 	bl	80089b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008848:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800884a:	e0ac      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800884c:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008858:	d107      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800885a:	f107 0318 	add.w	r3, r7, #24
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f8c0 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008868:	e09d      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886e:	e09a      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008870:	4b20      	ldr	r3, [pc, #128]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800887c:	d107      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800887e:	f107 030c 	add.w	r3, r7, #12
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fa02 	bl	8008c8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800888c:	e08b      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008892:	e088      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008894:	4b17      	ldr	r3, [pc, #92]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b04      	cmp	r3, #4
 800889e:	d109      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	08db      	lsrs	r3, r3, #3
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	4a13      	ldr	r2, [pc, #76]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
 80088b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088b2:	e078      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088b8:	e075      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c6:	d102      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088cc:	e06b      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d2:	e068      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088e0:	d102      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80088e2:	4b07      	ldr	r3, [pc, #28]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e6:	e05e      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ec:	e05b      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f2:	e058      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088f4:	58024400 	.word	0x58024400
 80088f8:	03d09000 	.word	0x03d09000
 80088fc:	003d0900 	.word	0x003d0900
 8008900:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008908:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800890c:	430b      	orrs	r3, r1
 800890e:	d148      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008910:	4b27      	ldr	r3, [pc, #156]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008918:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008920:	d02a      	beq.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008928:	d838      	bhi.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008936:	d00d      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008938:	e030      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800893a:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008946:	d102      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008948:	4b1a      	ldr	r3, [pc, #104]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894c:	e02b      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008952:	e028      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008954:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008960:	d107      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fae4 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008970:	e019      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008976:	e016      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008984:	d107      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008986:	f107 0318 	add.w	r3, r7, #24
 800898a:	4618      	mov	r0, r3
 800898c:	f000 f82a 	bl	80089e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008994:	e007      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800899a:	e004      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a0:	e001      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80089a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3740      	adds	r7, #64	; 0x40
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	58024400 	.word	0x58024400
 80089b4:	017d7840 	.word	0x017d7840

080089b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80089bc:	f7fe f82c 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 80089c0:	4602      	mov	r2, r0
 80089c2:	4b06      	ldr	r3, [pc, #24]	; (80089dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	091b      	lsrs	r3, r3, #4
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	4904      	ldr	r1, [pc, #16]	; (80089e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80089ce:	5ccb      	ldrb	r3, [r1, r3]
 80089d0:	f003 031f 	and.w	r3, r3, #31
 80089d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80089d8:	4618      	mov	r0, r3
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	58024400 	.word	0x58024400
 80089e0:	08016508 	.word	0x08016508

080089e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b089      	sub	sp, #36	; 0x24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ec:	4ba1      	ldr	r3, [pc, #644]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80089f6:	4b9f      	ldr	r3, [pc, #636]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	0b1b      	lsrs	r3, r3, #12
 80089fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a02:	4b9c      	ldr	r3, [pc, #624]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	091b      	lsrs	r3, r3, #4
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008a0e:	4b99      	ldr	r3, [pc, #612]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	08db      	lsrs	r3, r3, #3
 8008a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8111 	beq.w	8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	f000 8083 	beq.w	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f200 80a1 	bhi.w	8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d056      	beq.n	8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008a4e:	e099      	b.n	8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a50:	4b88      	ldr	r3, [pc, #544]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d02d      	beq.n	8008ab8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a5c:	4b85      	ldr	r3, [pc, #532]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	08db      	lsrs	r3, r3, #3
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	4a84      	ldr	r2, [pc, #528]	; (8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b7b      	ldr	r3, [pc, #492]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ab6:	e087      	b.n	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b6a      	ldr	r3, [pc, #424]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afa:	e065      	b.n	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b59      	ldr	r3, [pc, #356]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b3e:	e043      	b.n	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b48      	ldr	r3, [pc, #288]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	e021      	b.n	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b37      	ldr	r3, [pc, #220]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008baa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008bc8:	4b2a      	ldr	r3, [pc, #168]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	0a5b      	lsrs	r3, r3, #9
 8008bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bee:	ee17 2a90 	vmov	r2, s15
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008bf6:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c00:	ee07 3a90 	vmov	s15, r3
 8008c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c1c:	ee17 2a90 	vmov	r2, s15
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008c24:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	0e1b      	lsrs	r3, r3, #24
 8008c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c4a:	ee17 2a90 	vmov	r2, s15
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c52:	e008      	b.n	8008c66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	609a      	str	r2, [r3, #8]
}
 8008c66:	bf00      	nop
 8008c68:	3724      	adds	r7, #36	; 0x24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
 8008c78:	03d09000 	.word	0x03d09000
 8008c7c:	46000000 	.word	0x46000000
 8008c80:	4c742400 	.word	0x4c742400
 8008c84:	4a742400 	.word	0x4a742400
 8008c88:	4bbebc20 	.word	0x4bbebc20

08008c8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b089      	sub	sp, #36	; 0x24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c94:	4ba1      	ldr	r3, [pc, #644]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c9e:	4b9f      	ldr	r3, [pc, #636]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca2:	0d1b      	lsrs	r3, r3, #20
 8008ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ca8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008caa:	4b9c      	ldr	r3, [pc, #624]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	0a1b      	lsrs	r3, r3, #8
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008cb6:	4b99      	ldr	r3, [pc, #612]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cba:	08db      	lsrs	r3, r3, #3
 8008cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 8111 	beq.w	8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	f000 8083 	beq.w	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	f200 80a1 	bhi.w	8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d056      	beq.n	8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008cf6:	e099      	b.n	8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf8:	4b88      	ldr	r3, [pc, #544]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d02d      	beq.n	8008d60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d04:	4b85      	ldr	r3, [pc, #532]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	08db      	lsrs	r3, r3, #3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	4a84      	ldr	r2, [pc, #528]	; (8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b7b      	ldr	r3, [pc, #492]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d5e:	e087      	b.n	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b6a      	ldr	r3, [pc, #424]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da2:	e065      	b.n	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b59      	ldr	r3, [pc, #356]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de6:	e043      	b.n	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b48      	ldr	r3, [pc, #288]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2a:	e021      	b.n	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b37      	ldr	r3, [pc, #220]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008e70:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e74:	0a5b      	lsrs	r3, r3, #9
 8008e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e96:	ee17 2a90 	vmov	r2, s15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e9e:	4b1f      	ldr	r3, [pc, #124]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	0c1b      	lsrs	r3, r3, #16
 8008ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec4:	ee17 2a90 	vmov	r2, s15
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ecc:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed0:	0e1b      	lsrs	r3, r3, #24
 8008ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef2:	ee17 2a90 	vmov	r2, s15
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008efa:	e008      	b.n	8008f0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	609a      	str	r2, [r3, #8]
}
 8008f0e:	bf00      	nop
 8008f10:	3724      	adds	r7, #36	; 0x24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	58024400 	.word	0x58024400
 8008f20:	03d09000 	.word	0x03d09000
 8008f24:	46000000 	.word	0x46000000
 8008f28:	4c742400 	.word	0x4c742400
 8008f2c:	4a742400 	.word	0x4a742400
 8008f30:	4bbebc20 	.word	0x4bbebc20

08008f34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b089      	sub	sp, #36	; 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f3c:	4ba0      	ldr	r3, [pc, #640]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008f46:	4b9e      	ldr	r3, [pc, #632]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4a:	091b      	lsrs	r3, r3, #4
 8008f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008f52:	4b9b      	ldr	r3, [pc, #620]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008f5c:	4b98      	ldr	r3, [pc, #608]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	08db      	lsrs	r3, r3, #3
 8008f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	fb02 f303 	mul.w	r3, r2, r3
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8111 	beq.w	80091a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	f000 8083 	beq.w	800908e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	f200 80a1 	bhi.w	80090d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d056      	beq.n	800904a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f9c:	e099      	b.n	80090d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f9e:	4b88      	ldr	r3, [pc, #544]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0320 	and.w	r3, r3, #32
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d02d      	beq.n	8009006 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008faa:	4b85      	ldr	r3, [pc, #532]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	08db      	lsrs	r3, r3, #3
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	4a83      	ldr	r2, [pc, #524]	; (80091c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd4:	4b7a      	ldr	r3, [pc, #488]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fe8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80091c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009000:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009004:	e087      	b.n	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	ee07 3a90 	vmov	s15, r3
 800900c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009010:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80091cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009018:	4b69      	ldr	r3, [pc, #420]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800901a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009028:	ed97 6a03 	vldr	s12, [r7, #12]
 800902c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80091c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800903c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009048:	e065      	b.n	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009054:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80091d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905c:	4b58      	ldr	r3, [pc, #352]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009070:	eddf 5a55 	vldr	s11, [pc, #340]	; 80091c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009088:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800908c:	e043      	b.n	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009098:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80091d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800909c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a0:	4b47      	ldr	r3, [pc, #284]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80091c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090d0:	e021      	b.n	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80091cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e4:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ec:	ee07 3a90 	vmov	s15, r3
 80090f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80091c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009114:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009116:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911a:	0a5b      	lsrs	r3, r3, #9
 800911c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009120:	ee07 3a90 	vmov	s15, r3
 8009124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800912c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009130:	edd7 6a07 	vldr	s13, [r7, #28]
 8009134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800913c:	ee17 2a90 	vmov	r2, s15
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009144:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	0c1b      	lsrs	r3, r3, #16
 800914a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800915a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800915e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800916a:	ee17 2a90 	vmov	r2, s15
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009172:	4b13      	ldr	r3, [pc, #76]	; (80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	0e1b      	lsrs	r3, r3, #24
 8009178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800917c:	ee07 3a90 	vmov	s15, r3
 8009180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009188:	ee37 7a87 	vadd.f32	s14, s15, s14
 800918c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009198:	ee17 2a90 	vmov	r2, s15
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80091a0:	e008      	b.n	80091b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	609a      	str	r2, [r3, #8]
}
 80091b4:	bf00      	nop
 80091b6:	3724      	adds	r7, #36	; 0x24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	58024400 	.word	0x58024400
 80091c4:	03d09000 	.word	0x03d09000
 80091c8:	46000000 	.word	0x46000000
 80091cc:	4c742400 	.word	0x4c742400
 80091d0:	4a742400 	.word	0x4a742400
 80091d4:	4bbebc20 	.word	0x4bbebc20

080091d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091e6:	4b53      	ldr	r3, [pc, #332]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80091e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d101      	bne.n	80091f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e099      	b.n	800932a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091f6:	4b4f      	ldr	r3, [pc, #316]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a4e      	ldr	r2, [pc, #312]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80091fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009202:	f7f9 f8a9 	bl	8002358 <HAL_GetTick>
 8009206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009208:	e008      	b.n	800921c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800920a:	f7f9 f8a5 	bl	8002358 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e086      	b.n	800932a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800921c:	4b45      	ldr	r3, [pc, #276]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f0      	bne.n	800920a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009228:	4b42      	ldr	r3, [pc, #264]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	031b      	lsls	r3, r3, #12
 8009236:	493f      	ldr	r1, [pc, #252]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 8009238:	4313      	orrs	r3, r2
 800923a:	628b      	str	r3, [r1, #40]	; 0x28
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	3b01      	subs	r3, #1
 8009242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	3b01      	subs	r3, #1
 800924c:	025b      	lsls	r3, r3, #9
 800924e:	b29b      	uxth	r3, r3
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	3b01      	subs	r3, #1
 8009258:	041b      	lsls	r3, r3, #16
 800925a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	3b01      	subs	r3, #1
 8009266:	061b      	lsls	r3, r3, #24
 8009268:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800926c:	4931      	ldr	r1, [pc, #196]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009272:	4b30      	ldr	r3, [pc, #192]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	492d      	ldr	r1, [pc, #180]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 8009280:	4313      	orrs	r3, r2
 8009282:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009284:	4b2b      	ldr	r3, [pc, #172]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	f023 0220 	bic.w	r2, r3, #32
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	4928      	ldr	r1, [pc, #160]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 8009292:	4313      	orrs	r3, r2
 8009294:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009296:	4b27      	ldr	r3, [pc, #156]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	4a26      	ldr	r2, [pc, #152]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 800929c:	f023 0310 	bic.w	r3, r3, #16
 80092a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80092a2:	4b24      	ldr	r3, [pc, #144]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <RCCEx_PLL2_Config+0x160>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	69d2      	ldr	r2, [r2, #28]
 80092ae:	00d2      	lsls	r2, r2, #3
 80092b0:	4920      	ldr	r1, [pc, #128]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092b6:	4b1f      	ldr	r3, [pc, #124]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	4a1e      	ldr	r2, [pc, #120]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092bc:	f043 0310 	orr.w	r3, r3, #16
 80092c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80092c8:	4b1a      	ldr	r3, [pc, #104]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	4a19      	ldr	r2, [pc, #100]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092d4:	e00f      	b.n	80092f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d106      	bne.n	80092ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80092dc:	4b15      	ldr	r3, [pc, #84]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	4a14      	ldr	r2, [pc, #80]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092e8:	e005      	b.n	80092f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092ea:	4b12      	ldr	r3, [pc, #72]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	4a11      	ldr	r2, [pc, #68]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092f6:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a0e      	ldr	r2, [pc, #56]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 80092fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009302:	f7f9 f829 	bl	8002358 <HAL_GetTick>
 8009306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009308:	e008      	b.n	800931c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800930a:	f7f9 f825 	bl	8002358 <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d901      	bls.n	800931c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e006      	b.n	800932a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <RCCEx_PLL2_Config+0x15c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0f0      	beq.n	800930a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009328:	7bfb      	ldrb	r3, [r7, #15]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	58024400 	.word	0x58024400
 8009338:	ffff0007 	.word	0xffff0007

0800933c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800934a:	4b53      	ldr	r3, [pc, #332]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	2b03      	cmp	r3, #3
 8009354:	d101      	bne.n	800935a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e099      	b.n	800948e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800935a:	4b4f      	ldr	r3, [pc, #316]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a4e      	ldr	r2, [pc, #312]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009366:	f7f8 fff7 	bl	8002358 <HAL_GetTick>
 800936a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800936c:	e008      	b.n	8009380 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800936e:	f7f8 fff3 	bl	8002358 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e086      	b.n	800948e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009380:	4b45      	ldr	r3, [pc, #276]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1f0      	bne.n	800936e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800938c:	4b42      	ldr	r3, [pc, #264]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	051b      	lsls	r3, r3, #20
 800939a:	493f      	ldr	r1, [pc, #252]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 800939c:	4313      	orrs	r3, r2
 800939e:	628b      	str	r3, [r1, #40]	; 0x28
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	025b      	lsls	r3, r3, #9
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	041b      	lsls	r3, r3, #16
 80093be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	061b      	lsls	r3, r3, #24
 80093cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093d0:	4931      	ldr	r1, [pc, #196]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093d6:	4b30      	ldr	r3, [pc, #192]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	492d      	ldr	r1, [pc, #180]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093e8:	4b2b      	ldr	r3, [pc, #172]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	4928      	ldr	r1, [pc, #160]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093fa:	4b27      	ldr	r3, [pc, #156]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	4a26      	ldr	r2, [pc, #152]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009406:	4b24      	ldr	r3, [pc, #144]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800940a:	4b24      	ldr	r3, [pc, #144]	; (800949c <RCCEx_PLL3_Config+0x160>)
 800940c:	4013      	ands	r3, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	69d2      	ldr	r2, [r2, #28]
 8009412:	00d2      	lsls	r2, r2, #3
 8009414:	4920      	ldr	r1, [pc, #128]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009416:	4313      	orrs	r3, r2
 8009418:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800941a:	4b1f      	ldr	r3, [pc, #124]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 800941c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941e:	4a1e      	ldr	r2, [pc, #120]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800942c:	4b1a      	ldr	r3, [pc, #104]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 800942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009430:	4a19      	ldr	r2, [pc, #100]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009432:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009436:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009438:	e00f      	b.n	800945a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d106      	bne.n	800944e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009440:	4b15      	ldr	r3, [pc, #84]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	4a14      	ldr	r2, [pc, #80]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009446:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800944a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800944c:	e005      	b.n	800945a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	4a11      	ldr	r2, [pc, #68]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009458:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009466:	f7f8 ff77 	bl	8002358 <HAL_GetTick>
 800946a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800946c:	e008      	b.n	8009480 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800946e:	f7f8 ff73 	bl	8002358 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	2b02      	cmp	r3, #2
 800947a:	d901      	bls.n	8009480 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e006      	b.n	800948e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009480:	4b05      	ldr	r3, [pc, #20]	; (8009498 <RCCEx_PLL3_Config+0x15c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d0f0      	beq.n	800946e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800948c:	7bfb      	ldrb	r3, [r7, #15]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	58024400 	.word	0x58024400
 800949c:	ffff0007 	.word	0xffff0007

080094a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e049      	b.n	8009546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f7 ff06 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3304      	adds	r3, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f000 f8a6 	bl	8009630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b01      	cmp	r3, #1
 8009562:	d001      	beq.n	8009568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e04c      	b.n	8009602 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a26      	ldr	r2, [pc, #152]	; (8009610 <HAL_TIM_Base_Start+0xc0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d022      	beq.n	80095c0 <HAL_TIM_Base_Start+0x70>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009582:	d01d      	beq.n	80095c0 <HAL_TIM_Base_Start+0x70>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a22      	ldr	r2, [pc, #136]	; (8009614 <HAL_TIM_Base_Start+0xc4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d018      	beq.n	80095c0 <HAL_TIM_Base_Start+0x70>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a21      	ldr	r2, [pc, #132]	; (8009618 <HAL_TIM_Base_Start+0xc8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d013      	beq.n	80095c0 <HAL_TIM_Base_Start+0x70>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a1f      	ldr	r2, [pc, #124]	; (800961c <HAL_TIM_Base_Start+0xcc>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00e      	beq.n	80095c0 <HAL_TIM_Base_Start+0x70>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <HAL_TIM_Base_Start+0xd0>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d009      	beq.n	80095c0 <HAL_TIM_Base_Start+0x70>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1c      	ldr	r2, [pc, #112]	; (8009624 <HAL_TIM_Base_Start+0xd4>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d004      	beq.n	80095c0 <HAL_TIM_Base_Start+0x70>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a1b      	ldr	r2, [pc, #108]	; (8009628 <HAL_TIM_Base_Start+0xd8>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d115      	bne.n	80095ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	4b19      	ldr	r3, [pc, #100]	; (800962c <HAL_TIM_Base_Start+0xdc>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b06      	cmp	r3, #6
 80095d0:	d015      	beq.n	80095fe <HAL_TIM_Base_Start+0xae>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d8:	d011      	beq.n	80095fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f042 0201 	orr.w	r2, r2, #1
 80095e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ea:	e008      	b.n	80095fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	e000      	b.n	8009600 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40010000 	.word	0x40010000
 8009614:	40000400 	.word	0x40000400
 8009618:	40000800 	.word	0x40000800
 800961c:	40000c00 	.word	0x40000c00
 8009620:	40010400 	.word	0x40010400
 8009624:	40001800 	.word	0x40001800
 8009628:	40014000 	.word	0x40014000
 800962c:	00010007 	.word	0x00010007

08009630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a40      	ldr	r2, [pc, #256]	; (8009744 <TIM_Base_SetConfig+0x114>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d013      	beq.n	8009670 <TIM_Base_SetConfig+0x40>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964e:	d00f      	beq.n	8009670 <TIM_Base_SetConfig+0x40>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a3d      	ldr	r2, [pc, #244]	; (8009748 <TIM_Base_SetConfig+0x118>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00b      	beq.n	8009670 <TIM_Base_SetConfig+0x40>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a3c      	ldr	r2, [pc, #240]	; (800974c <TIM_Base_SetConfig+0x11c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d007      	beq.n	8009670 <TIM_Base_SetConfig+0x40>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a3b      	ldr	r2, [pc, #236]	; (8009750 <TIM_Base_SetConfig+0x120>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d003      	beq.n	8009670 <TIM_Base_SetConfig+0x40>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a3a      	ldr	r2, [pc, #232]	; (8009754 <TIM_Base_SetConfig+0x124>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d108      	bne.n	8009682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a2f      	ldr	r2, [pc, #188]	; (8009744 <TIM_Base_SetConfig+0x114>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d01f      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009690:	d01b      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a2c      	ldr	r2, [pc, #176]	; (8009748 <TIM_Base_SetConfig+0x118>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d017      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a2b      	ldr	r2, [pc, #172]	; (800974c <TIM_Base_SetConfig+0x11c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d013      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a2a      	ldr	r2, [pc, #168]	; (8009750 <TIM_Base_SetConfig+0x120>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00f      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a29      	ldr	r2, [pc, #164]	; (8009754 <TIM_Base_SetConfig+0x124>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00b      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a28      	ldr	r2, [pc, #160]	; (8009758 <TIM_Base_SetConfig+0x128>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d007      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a27      	ldr	r2, [pc, #156]	; (800975c <TIM_Base_SetConfig+0x12c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d003      	beq.n	80096ca <TIM_Base_SetConfig+0x9a>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a26      	ldr	r2, [pc, #152]	; (8009760 <TIM_Base_SetConfig+0x130>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d108      	bne.n	80096dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	4313      	orrs	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a10      	ldr	r2, [pc, #64]	; (8009744 <TIM_Base_SetConfig+0x114>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00f      	beq.n	8009728 <TIM_Base_SetConfig+0xf8>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a12      	ldr	r2, [pc, #72]	; (8009754 <TIM_Base_SetConfig+0x124>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00b      	beq.n	8009728 <TIM_Base_SetConfig+0xf8>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a11      	ldr	r2, [pc, #68]	; (8009758 <TIM_Base_SetConfig+0x128>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d007      	beq.n	8009728 <TIM_Base_SetConfig+0xf8>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a10      	ldr	r2, [pc, #64]	; (800975c <TIM_Base_SetConfig+0x12c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_Base_SetConfig+0xf8>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a0f      	ldr	r2, [pc, #60]	; (8009760 <TIM_Base_SetConfig+0x130>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d103      	bne.n	8009730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	691a      	ldr	r2, [r3, #16]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	615a      	str	r2, [r3, #20]
}
 8009736:	bf00      	nop
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	40010000 	.word	0x40010000
 8009748:	40000400 	.word	0x40000400
 800974c:	40000800 	.word	0x40000800
 8009750:	40000c00 	.word	0x40000c00
 8009754:	40010400 	.word	0x40010400
 8009758:	40014000 	.word	0x40014000
 800975c:	40014400 	.word	0x40014400
 8009760:	40014800 	.word	0x40014800

08009764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009764:	b084      	sub	sp, #16
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	f107 001c 	add.w	r0, r7, #28
 8009772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	2b01      	cmp	r3, #1
 800977a:	d120      	bne.n	80097be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	4b2a      	ldr	r3, [pc, #168]	; (8009838 <USB_CoreInit+0xd4>)
 800978e:	4013      	ands	r3, r2
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d105      	bne.n	80097b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 faf8 	bl	800ada8 <USB_CoreReset>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
 80097bc:	e01a      	b.n	80097f4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 faec 	bl	800ada8 <USB_CoreReset>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80097d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	639a      	str	r2, [r3, #56]	; 0x38
 80097e6:	e005      	b.n	80097f4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d116      	bne.n	8009828 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097fe:	b29a      	uxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <USB_CoreInit+0xd8>)
 800980a:	4313      	orrs	r3, r2
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f043 0206 	orr.w	r2, r3, #6
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f043 0220 	orr.w	r2, r3, #32
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009834:	b004      	add	sp, #16
 8009836:	4770      	bx	lr
 8009838:	ffbdffbf 	.word	0xffbdffbf
 800983c:	03ee0000 	.word	0x03ee0000

08009840 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	2b02      	cmp	r3, #2
 8009852:	d165      	bne.n	8009920 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4a41      	ldr	r2, [pc, #260]	; (800995c <USB_SetTurnaroundTime+0x11c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d906      	bls.n	800986a <USB_SetTurnaroundTime+0x2a>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4a40      	ldr	r2, [pc, #256]	; (8009960 <USB_SetTurnaroundTime+0x120>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d202      	bcs.n	800986a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009864:	230f      	movs	r3, #15
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	e062      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	4a3c      	ldr	r2, [pc, #240]	; (8009960 <USB_SetTurnaroundTime+0x120>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d306      	bcc.n	8009880 <USB_SetTurnaroundTime+0x40>
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	4a3b      	ldr	r2, [pc, #236]	; (8009964 <USB_SetTurnaroundTime+0x124>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d202      	bcs.n	8009880 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800987a:	230e      	movs	r3, #14
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	e057      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4a38      	ldr	r2, [pc, #224]	; (8009964 <USB_SetTurnaroundTime+0x124>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d306      	bcc.n	8009896 <USB_SetTurnaroundTime+0x56>
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	4a37      	ldr	r2, [pc, #220]	; (8009968 <USB_SetTurnaroundTime+0x128>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d202      	bcs.n	8009896 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009890:	230d      	movs	r3, #13
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	e04c      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	4a33      	ldr	r2, [pc, #204]	; (8009968 <USB_SetTurnaroundTime+0x128>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d306      	bcc.n	80098ac <USB_SetTurnaroundTime+0x6c>
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	4a32      	ldr	r2, [pc, #200]	; (800996c <USB_SetTurnaroundTime+0x12c>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d802      	bhi.n	80098ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80098a6:	230c      	movs	r3, #12
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	e041      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4a2f      	ldr	r2, [pc, #188]	; (800996c <USB_SetTurnaroundTime+0x12c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d906      	bls.n	80098c2 <USB_SetTurnaroundTime+0x82>
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	4a2e      	ldr	r2, [pc, #184]	; (8009970 <USB_SetTurnaroundTime+0x130>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d802      	bhi.n	80098c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80098bc:	230b      	movs	r3, #11
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e036      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	4a2a      	ldr	r2, [pc, #168]	; (8009970 <USB_SetTurnaroundTime+0x130>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d906      	bls.n	80098d8 <USB_SetTurnaroundTime+0x98>
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4a29      	ldr	r2, [pc, #164]	; (8009974 <USB_SetTurnaroundTime+0x134>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d802      	bhi.n	80098d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80098d2:	230a      	movs	r3, #10
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e02b      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	4a26      	ldr	r2, [pc, #152]	; (8009974 <USB_SetTurnaroundTime+0x134>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d906      	bls.n	80098ee <USB_SetTurnaroundTime+0xae>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4a25      	ldr	r2, [pc, #148]	; (8009978 <USB_SetTurnaroundTime+0x138>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d202      	bcs.n	80098ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80098e8:	2309      	movs	r3, #9
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	e020      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4a21      	ldr	r2, [pc, #132]	; (8009978 <USB_SetTurnaroundTime+0x138>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d306      	bcc.n	8009904 <USB_SetTurnaroundTime+0xc4>
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <USB_SetTurnaroundTime+0x13c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d802      	bhi.n	8009904 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80098fe:	2308      	movs	r3, #8
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	e015      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4a1d      	ldr	r2, [pc, #116]	; (800997c <USB_SetTurnaroundTime+0x13c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d906      	bls.n	800991a <USB_SetTurnaroundTime+0xda>
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4a1c      	ldr	r2, [pc, #112]	; (8009980 <USB_SetTurnaroundTime+0x140>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d202      	bcs.n	800991a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009914:	2307      	movs	r3, #7
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	e00a      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800991a:	2306      	movs	r3, #6
 800991c:	617b      	str	r3, [r7, #20]
 800991e:	e007      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d102      	bne.n	800992c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009926:	2309      	movs	r3, #9
 8009928:	617b      	str	r3, [r7, #20]
 800992a:	e001      	b.n	8009930 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800992c:	2309      	movs	r3, #9
 800992e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	029b      	lsls	r3, r3, #10
 8009944:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009948:	431a      	orrs	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	00d8acbf 	.word	0x00d8acbf
 8009960:	00e4e1c0 	.word	0x00e4e1c0
 8009964:	00f42400 	.word	0x00f42400
 8009968:	01067380 	.word	0x01067380
 800996c:	011a499f 	.word	0x011a499f
 8009970:	01312cff 	.word	0x01312cff
 8009974:	014ca43f 	.word	0x014ca43f
 8009978:	016e3600 	.word	0x016e3600
 800997c:	01a6ab1f 	.word	0x01a6ab1f
 8009980:	01e84800 	.word	0x01e84800

08009984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f043 0201 	orr.w	r2, r3, #1
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f023 0201 	bic.w	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d115      	bne.n	8009a16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099f6:	2001      	movs	r0, #1
 80099f8:	f7f8 fcba 	bl	8002370 <HAL_Delay>
      ms++;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3301      	adds	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 f93f 	bl	800ac86 <USB_GetMode>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d01e      	beq.n	8009a4c <USB_SetCurrentMode+0x84>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b31      	cmp	r3, #49	; 0x31
 8009a12:	d9f0      	bls.n	80099f6 <USB_SetCurrentMode+0x2e>
 8009a14:	e01a      	b.n	8009a4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a16:	78fb      	ldrb	r3, [r7, #3]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d115      	bne.n	8009a48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a28:	2001      	movs	r0, #1
 8009a2a:	f7f8 fca1 	bl	8002370 <HAL_Delay>
      ms++;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3301      	adds	r3, #1
 8009a32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 f926 	bl	800ac86 <USB_GetMode>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <USB_SetCurrentMode+0x84>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b31      	cmp	r3, #49	; 0x31
 8009a44:	d9f0      	bls.n	8009a28 <USB_SetCurrentMode+0x60>
 8009a46:	e001      	b.n	8009a4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e005      	b.n	8009a58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2b32      	cmp	r3, #50	; 0x32
 8009a50:	d101      	bne.n	8009a56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e000      	b.n	8009a58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a60:	b084      	sub	sp, #16
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	613b      	str	r3, [r7, #16]
 8009a7e:	e009      	b.n	8009a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	3340      	adds	r3, #64	; 0x40
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	3301      	adds	r3, #1
 8009a92:	613b      	str	r3, [r7, #16]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2b0e      	cmp	r3, #14
 8009a98:	d9f2      	bls.n	8009a80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11c      	bne.n	8009ada <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aae:	f043 0302 	orr.w	r3, r3, #2
 8009ab2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e005      	b.n	8009ae6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009aec:	461a      	mov	r2, r3
 8009aee:	2300      	movs	r3, #0
 8009af0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af8:	4619      	mov	r1, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b00:	461a      	mov	r2, r3
 8009b02:	680b      	ldr	r3, [r1, #0]
 8009b04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d10c      	bne.n	8009b26 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b12:	2100      	movs	r1, #0
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f965 	bl	8009de4 <USB_SetDevSpeed>
 8009b1a:	e008      	b.n	8009b2e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f960 	bl	8009de4 <USB_SetDevSpeed>
 8009b24:	e003      	b.n	8009b2e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b26:	2103      	movs	r1, #3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f95b 	bl	8009de4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b2e:	2110      	movs	r1, #16
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f8f3 	bl	8009d1c <USB_FlushTxFifo>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f91f 	bl	8009d84 <USB_FlushRxFifo>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	461a      	mov	r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b62:	461a      	mov	r2, r3
 8009b64:	2300      	movs	r3, #0
 8009b66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6e:	461a      	mov	r2, r3
 8009b70:	2300      	movs	r3, #0
 8009b72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	e043      	b.n	8009c02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b90:	d118      	bne.n	8009bc4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	e013      	b.n	8009bd6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	e008      	b.n	8009bd6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be2:	461a      	mov	r2, r3
 8009be4:	2300      	movs	r3, #0
 8009be6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d3b7      	bcc.n	8009b7a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]
 8009c0e:	e043      	b.n	8009c98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c26:	d118      	bne.n	8009c5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	e013      	b.n	8009c6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c50:	461a      	mov	r2, r3
 8009c52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	e008      	b.n	8009c6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c66:	461a      	mov	r2, r3
 8009c68:	2300      	movs	r3, #0
 8009c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c78:	461a      	mov	r2, r3
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	3301      	adds	r3, #1
 8009c96:	613b      	str	r3, [r7, #16]
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d3b7      	bcc.n	8009c10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009cc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d105      	bne.n	8009cd4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	f043 0210 	orr.w	r2, r3, #16
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699a      	ldr	r2, [r3, #24]
 8009cd8:	4b0e      	ldr	r3, [pc, #56]	; (8009d14 <USB_DevInit+0x2b4>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f043 0208 	orr.w	r2, r3, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d105      	bne.n	8009d04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	699a      	ldr	r2, [r3, #24]
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <USB_DevInit+0x2b8>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d10:	b004      	add	sp, #16
 8009d12:	4770      	bx	lr
 8009d14:	803c3800 	.word	0x803c3800
 8009d18:	40000004 	.word	0x40000004

08009d1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4a13      	ldr	r2, [pc, #76]	; (8009d80 <USB_FlushTxFifo+0x64>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d901      	bls.n	8009d3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e01b      	b.n	8009d74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	daf2      	bge.n	8009d2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	019b      	lsls	r3, r3, #6
 8009d4c:	f043 0220 	orr.w	r2, r3, #32
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3301      	adds	r3, #1
 8009d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <USB_FlushTxFifo+0x64>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d901      	bls.n	8009d66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e006      	b.n	8009d74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	d0f0      	beq.n	8009d54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	00030d40 	.word	0x00030d40

08009d84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4a11      	ldr	r2, [pc, #68]	; (8009de0 <USB_FlushRxFifo+0x5c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d901      	bls.n	8009da2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e018      	b.n	8009dd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	daf2      	bge.n	8009d90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2210      	movs	r2, #16
 8009db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3301      	adds	r3, #1
 8009db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	4a08      	ldr	r2, [pc, #32]	; (8009de0 <USB_FlushRxFifo+0x5c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d901      	bls.n	8009dc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e006      	b.n	8009dd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0310 	and.w	r3, r3, #16
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d0f0      	beq.n	8009db4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	00030d40 	.word	0x00030d40

08009de4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e04:	4313      	orrs	r3, r2
 8009e06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b087      	sub	sp, #28
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f003 0306 	and.w	r3, r3, #6
 8009e2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
 8009e3a:	e00a      	b.n	8009e52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d002      	beq.n	8009e48 <USB_GetDevSpeed+0x32>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b06      	cmp	r3, #6
 8009e46:	d102      	bne.n	8009e4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	75fb      	strb	r3, [r7, #23]
 8009e4c:	e001      	b.n	8009e52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e4e:	230f      	movs	r3, #15
 8009e50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	371c      	adds	r7, #28
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d139      	bne.n	8009ef0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	68f9      	ldr	r1, [r7, #12]
 8009e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d153      	bne.n	8009f5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	791b      	ldrb	r3, [r3, #4]
 8009ece:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ed0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	059b      	lsls	r3, r3, #22
 8009ed6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	0159      	lsls	r1, r3, #5
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	440b      	add	r3, r1
 8009ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <USB_ActivateEndpoint+0x10c>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	600b      	str	r3, [r1, #0]
 8009eee:	e035      	b.n	8009f5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef6:	69da      	ldr	r2, [r3, #28]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f003 030f 	and.w	r3, r3, #15
 8009f00:	2101      	movs	r1, #1
 8009f02:	fa01 f303 	lsl.w	r3, r1, r3
 8009f06:	041b      	lsls	r3, r3, #16
 8009f08:	68f9      	ldr	r1, [r7, #12]
 8009f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d119      	bne.n	8009f5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	791b      	ldrb	r3, [r3, #4]
 8009f42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f44:	430b      	orrs	r3, r1
 8009f46:	431a      	orrs	r2, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	0159      	lsls	r1, r3, #5
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	440b      	add	r3, r1
 8009f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f54:	4619      	mov	r1, r3
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <USB_ActivateEndpoint+0x10c>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	10008000 	.word	0x10008000

08009f70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d161      	bne.n	800a050 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fa2:	d11f      	bne.n	8009fe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	0151      	lsls	r1, r2, #5
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	440a      	add	r2, r1
 8009fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	f003 030f 	and.w	r3, r3, #15
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	68f9      	ldr	r1, [r7, #12]
 800a000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a004:	4013      	ands	r3, r2
 800a006:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00e:	69da      	ldr	r2, [r3, #28]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	f003 030f 	and.w	r3, r3, #15
 800a018:	2101      	movs	r1, #1
 800a01a:	fa01 f303 	lsl.w	r3, r1, r3
 800a01e:	b29b      	uxth	r3, r3
 800a020:	43db      	mvns	r3, r3
 800a022:	68f9      	ldr	r1, [r7, #12]
 800a024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a028:	4013      	ands	r3, r2
 800a02a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	0159      	lsls	r1, r3, #5
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	440b      	add	r3, r1
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	4619      	mov	r1, r3
 800a048:	4b35      	ldr	r3, [pc, #212]	; (800a120 <USB_DeactivateEndpoint+0x1b0>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	600b      	str	r3, [r1, #0]
 800a04e:	e060      	b.n	800a112 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a066:	d11f      	bne.n	800a0a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a086:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f003 030f 	and.w	r3, r3, #15
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a0be:	041b      	lsls	r3, r3, #16
 800a0c0:	43db      	mvns	r3, r3
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d2:	69da      	ldr	r2, [r3, #28]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f003 030f 	and.w	r3, r3, #15
 800a0dc:	2101      	movs	r1, #1
 800a0de:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e2:	041b      	lsls	r3, r3, #16
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	68f9      	ldr	r1, [r7, #12]
 800a0e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	0159      	lsls	r1, r3, #5
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	440b      	add	r3, r1
 800a106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a10a:	4619      	mov	r1, r3
 800a10c:	4b05      	ldr	r3, [pc, #20]	; (800a124 <USB_DeactivateEndpoint+0x1b4>)
 800a10e:	4013      	ands	r3, r2
 800a110:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	ec337800 	.word	0xec337800
 800a124:	eff37800 	.word	0xeff37800

0800a128 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08a      	sub	sp, #40	; 0x28
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	4613      	mov	r3, r2
 800a134:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	785b      	ldrb	r3, [r3, #1]
 800a144:	2b01      	cmp	r3, #1
 800a146:	f040 8181 	bne.w	800a44c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d132      	bne.n	800a1b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15e:	691a      	ldr	r2, [r3, #16]
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	0159      	lsls	r1, r3, #5
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	440b      	add	r3, r1
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	4619      	mov	r1, r3
 800a16e:	4ba5      	ldr	r3, [pc, #660]	; (800a404 <USB_EPStartXfer+0x2dc>)
 800a170:	4013      	ands	r3, r2
 800a172:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	0151      	lsls	r1, r2, #5
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	440a      	add	r2, r1
 800a18a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a18e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a0:	691a      	ldr	r2, [r3, #16]
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	0159      	lsls	r1, r3, #5
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	440b      	add	r3, r1
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4b95      	ldr	r3, [pc, #596]	; (800a408 <USB_EPStartXfer+0x2e0>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	610b      	str	r3, [r1, #16]
 800a1b6:	e092      	b.n	800a2de <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	691a      	ldr	r2, [r3, #16]
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	0159      	lsls	r1, r3, #5
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	440b      	add	r3, r1
 800a1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	4b8c      	ldr	r3, [pc, #560]	; (800a408 <USB_EPStartXfer+0x2e0>)
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	0159      	lsls	r1, r3, #5
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	440b      	add	r3, r1
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4b83      	ldr	r3, [pc, #524]	; (800a404 <USB_EPStartXfer+0x2dc>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d11a      	bne.n	800a238 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	691a      	ldr	r2, [r3, #16]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d903      	bls.n	800a216 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	0151      	lsls	r1, r2, #5
 800a228:	69fa      	ldr	r2, [r7, #28]
 800a22a:	440a      	add	r2, r1
 800a22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a234:	6113      	str	r3, [r2, #16]
 800a236:	e01b      	b.n	800a270 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a244:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	6919      	ldr	r1, [r3, #16]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	440b      	add	r3, r1
 800a250:	1e59      	subs	r1, r3, #1
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	fbb1 f3f3 	udiv	r3, r1, r3
 800a25a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a25c:	4b6b      	ldr	r3, [pc, #428]	; (800a40c <USB_EPStartXfer+0x2e4>)
 800a25e:	400b      	ands	r3, r1
 800a260:	69b9      	ldr	r1, [r7, #24]
 800a262:	0148      	lsls	r0, r1, #5
 800a264:	69f9      	ldr	r1, [r7, #28]
 800a266:	4401      	add	r1, r0
 800a268:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a26c:	4313      	orrs	r3, r2
 800a26e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27c:	691a      	ldr	r2, [r3, #16]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a286:	69b9      	ldr	r1, [r7, #24]
 800a288:	0148      	lsls	r0, r1, #5
 800a28a:	69f9      	ldr	r1, [r7, #28]
 800a28c:	4401      	add	r1, r0
 800a28e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a292:	4313      	orrs	r3, r2
 800a294:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	791b      	ldrb	r3, [r3, #4]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d11f      	bne.n	800a2de <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	0151      	lsls	r1, r2, #5
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a2bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	69fa      	ldr	r2, [r7, #28]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d14b      	bne.n	800a37c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	791b      	ldrb	r3, [r3, #4]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d128      	bne.n	800a35a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a314:	2b00      	cmp	r3, #0
 800a316:	d110      	bne.n	800a33a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	69fa      	ldr	r2, [r7, #28]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	e00f      	b.n	800a35a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	0151      	lsls	r1, r2, #5
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	440a      	add	r2, r1
 800a350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a358:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	0151      	lsls	r1, r2, #5
 800a36c:	69fa      	ldr	r2, [r7, #28]
 800a36e:	440a      	add	r2, r1
 800a370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a374:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	e16a      	b.n	800a652 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	0151      	lsls	r1, r2, #5
 800a38e:	69fa      	ldr	r2, [r7, #28]
 800a390:	440a      	add	r2, r1
 800a392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a39a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	791b      	ldrb	r3, [r3, #4]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d015      	beq.n	800a3d0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 8152 	beq.w	800a652 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	f003 030f 	and.w	r3, r3, #15
 800a3be:	2101      	movs	r1, #1
 800a3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c4:	69f9      	ldr	r1, [r7, #28]
 800a3c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	634b      	str	r3, [r1, #52]	; 0x34
 800a3ce:	e140      	b.n	800a652 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d117      	bne.n	800a410 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	0151      	lsls	r1, r2, #5
 800a3f2:	69fa      	ldr	r2, [r7, #28]
 800a3f4:	440a      	add	r2, r1
 800a3f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	e016      	b.n	800a430 <USB_EPStartXfer+0x308>
 800a402:	bf00      	nop
 800a404:	e007ffff 	.word	0xe007ffff
 800a408:	fff80000 	.word	0xfff80000
 800a40c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	0151      	lsls	r1, r2, #5
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	440a      	add	r2, r1
 800a426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a42a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a42e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	68d9      	ldr	r1, [r3, #12]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	781a      	ldrb	r2, [r3, #0]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	b298      	uxth	r0, r3
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	4603      	mov	r3, r0
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 f9b9 	bl	800a7bc <USB_WritePacket>
 800a44a:	e102      	b.n	800a652 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a458:	691a      	ldr	r2, [r3, #16]
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	0159      	lsls	r1, r3, #5
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	440b      	add	r3, r1
 800a462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a466:	4619      	mov	r1, r3
 800a468:	4b7c      	ldr	r3, [pc, #496]	; (800a65c <USB_EPStartXfer+0x534>)
 800a46a:	4013      	ands	r3, r2
 800a46c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	0159      	lsls	r1, r3, #5
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	440b      	add	r3, r1
 800a484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a488:	4619      	mov	r1, r3
 800a48a:	4b75      	ldr	r3, [pc, #468]	; (800a660 <USB_EPStartXfer+0x538>)
 800a48c:	4013      	ands	r3, r2
 800a48e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d12f      	bne.n	800a4f6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4c4:	69b9      	ldr	r1, [r7, #24]
 800a4c6:	0148      	lsls	r0, r1, #5
 800a4c8:	69f9      	ldr	r1, [r7, #28]
 800a4ca:	4401      	add	r1, r0
 800a4cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	0151      	lsls	r1, r2, #5
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4f2:	6113      	str	r3, [r2, #16]
 800a4f4:	e05f      	b.n	800a5b6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d123      	bne.n	800a546 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a514:	69b9      	ldr	r1, [r7, #24]
 800a516:	0148      	lsls	r0, r1, #5
 800a518:	69f9      	ldr	r1, [r7, #28]
 800a51a:	4401      	add	r1, r0
 800a51c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a520:	4313      	orrs	r3, r2
 800a522:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	0151      	lsls	r1, r2, #5
 800a536:	69fa      	ldr	r2, [r7, #28]
 800a538:	440a      	add	r2, r1
 800a53a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a53e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a542:	6113      	str	r3, [r2, #16]
 800a544:	e037      	b.n	800a5b6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	691a      	ldr	r2, [r3, #16]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	4413      	add	r3, r2
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	8afa      	ldrh	r2, [r7, #22]
 800a562:	fb03 f202 	mul.w	r2, r3, r2
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	4413      	add	r3, r2
 800a572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	8afb      	ldrh	r3, [r7, #22]
 800a57a:	04d9      	lsls	r1, r3, #19
 800a57c:	4b39      	ldr	r3, [pc, #228]	; (800a664 <USB_EPStartXfer+0x53c>)
 800a57e:	400b      	ands	r3, r1
 800a580:	69b9      	ldr	r1, [r7, #24]
 800a582:	0148      	lsls	r0, r1, #5
 800a584:	69f9      	ldr	r1, [r7, #28]
 800a586:	4401      	add	r1, r0
 800a588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a58c:	4313      	orrs	r3, r2
 800a58e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5a6:	69b9      	ldr	r1, [r7, #24]
 800a5a8:	0148      	lsls	r0, r1, #5
 800a5aa:	69f9      	ldr	r1, [r7, #28]
 800a5ac:	4401      	add	r1, r0
 800a5ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d10d      	bne.n	800a5d8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d009      	beq.n	800a5d8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	68d9      	ldr	r1, [r3, #12]
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d4:	460a      	mov	r2, r1
 800a5d6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	791b      	ldrb	r3, [r3, #4]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d128      	bne.n	800a632 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d110      	bne.n	800a612 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	0151      	lsls	r1, r2, #5
 800a602:	69fa      	ldr	r2, [r7, #28]
 800a604:	440a      	add	r2, r1
 800a606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a60a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	e00f      	b.n	800a632 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	69ba      	ldr	r2, [r7, #24]
 800a622:	0151      	lsls	r1, r2, #5
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	440a      	add	r2, r1
 800a628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a62c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a630:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	0151      	lsls	r1, r2, #5
 800a644:	69fa      	ldr	r2, [r7, #28]
 800a646:	440a      	add	r2, r1
 800a648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a64c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a650:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3720      	adds	r7, #32
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	fff80000 	.word	0xfff80000
 800a660:	e007ffff 	.word	0xe007ffff
 800a664:	1ff80000 	.word	0x1ff80000

0800a668 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d14a      	bne.n	800a71c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a69a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a69e:	f040 8086 	bne.w	800a7ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	7812      	ldrb	r2, [r2, #0]
 800a6b6:	0151      	lsls	r1, r2, #5
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	440a      	add	r2, r1
 800a6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	7812      	ldrb	r2, [r2, #0]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d902      	bls.n	800a700 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a6fe:	e056      	b.n	800a7ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a718:	d0e7      	beq.n	800a6ea <USB_EPStopXfer+0x82>
 800a71a:	e048      	b.n	800a7ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a734:	d13b      	bne.n	800a7ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	7812      	ldrb	r2, [r2, #0]
 800a74a:	0151      	lsls	r1, r2, #5
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	440a      	add	r2, r1
 800a750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a758:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	7812      	ldrb	r2, [r2, #0]
 800a76e:	0151      	lsls	r1, r2, #5
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	440a      	add	r2, r1
 800a774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a77c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f242 7210 	movw	r2, #10000	; 0x2710
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d902      	bls.n	800a794 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	75fb      	strb	r3, [r7, #23]
          break;
 800a792:	e00c      	b.n	800a7ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7ac:	d0e7      	beq.n	800a77e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	371c      	adds	r7, #28
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b089      	sub	sp, #36	; 0x24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	71fb      	strb	r3, [r7, #7]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a7da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d123      	bne.n	800a82a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7e2:	88bb      	ldrh	r3, [r7, #4]
 800a7e4:	3303      	adds	r3, #3
 800a7e6:	089b      	lsrs	r3, r3, #2
 800a7e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	61bb      	str	r3, [r7, #24]
 800a7ee:	e018      	b.n	800a822 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	031a      	lsls	r2, r3, #12
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	3301      	adds	r3, #1
 800a808:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	3301      	adds	r3, #1
 800a80e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3301      	adds	r3, #1
 800a814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	3301      	adds	r3, #1
 800a81a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	3301      	adds	r3, #1
 800a820:	61bb      	str	r3, [r7, #24]
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	429a      	cmp	r2, r3
 800a828:	d3e2      	bcc.n	800a7f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3724      	adds	r7, #36	; 0x24
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a838:	b480      	push	{r7}
 800a83a:	b08b      	sub	sp, #44	; 0x2c
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	089b      	lsrs	r3, r3, #2
 800a852:	b29b      	uxth	r3, r3
 800a854:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a856:	88fb      	ldrh	r3, [r7, #6]
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a85e:	2300      	movs	r3, #0
 800a860:	623b      	str	r3, [r7, #32]
 800a862:	e014      	b.n	800a88e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	3301      	adds	r3, #1
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	3301      	adds	r3, #1
 800a87a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	3301      	adds	r3, #1
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	3301      	adds	r3, #1
 800a886:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	3301      	adds	r3, #1
 800a88c:	623b      	str	r3, [r7, #32]
 800a88e:	6a3a      	ldr	r2, [r7, #32]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	429a      	cmp	r2, r3
 800a894:	d3e6      	bcc.n	800a864 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a896:	8bfb      	ldrh	r3, [r7, #30]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01e      	beq.n	800a8da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f107 0310 	add.w	r3, r7, #16
 800a8ac:	6812      	ldr	r2, [r2, #0]
 800a8ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	701a      	strb	r2, [r3, #0]
      i++;
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a8ce:	8bfb      	ldrh	r3, [r7, #30]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8d4:	8bfb      	ldrh	r3, [r7, #30]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1ea      	bne.n	800a8b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	372c      	adds	r7, #44	; 0x2c
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d12c      	bne.n	800a95e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	db12      	blt.n	800a93c <USB_EPSetStall+0x54>
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00f      	beq.n	800a93c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a936:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a93a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	0151      	lsls	r1, r2, #5
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	440a      	add	r2, r1
 800a952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	e02b      	b.n	800a9b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	db12      	blt.n	800a996 <USB_EPSetStall+0xae>
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00f      	beq.n	800a996 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	015a      	lsls	r2, r3, #5
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	0151      	lsls	r1, r2, #5
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	440a      	add	r2, r1
 800a98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a990:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a994:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	0151      	lsls	r1, r2, #5
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	440a      	add	r2, r1
 800a9ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	785b      	ldrb	r3, [r3, #1]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d128      	bne.n	800aa32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	0151      	lsls	r1, r2, #5
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	440a      	add	r2, r1
 800a9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a9fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	791b      	ldrb	r3, [r3, #4]
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d003      	beq.n	800aa10 <USB_EPClearStall+0x4c>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	791b      	ldrb	r3, [r3, #4]
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d138      	bne.n	800aa82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	0151      	lsls	r1, r2, #5
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	440a      	add	r2, r1
 800aa26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	e027      	b.n	800aa82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	0151      	lsls	r1, r2, #5
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	440a      	add	r2, r1
 800aa48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	791b      	ldrb	r3, [r3, #4]
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d003      	beq.n	800aa62 <USB_EPClearStall+0x9e>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	791b      	ldrb	r3, [r3, #4]
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d10f      	bne.n	800aa82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	4413      	add	r3, r2
 800aa6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	0151      	lsls	r1, r2, #5
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	440a      	add	r2, r1
 800aa78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aab2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	011b      	lsls	r3, r3, #4
 800aac0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aac4:	68f9      	ldr	r1, [r7, #12]
 800aac6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaca:	4313      	orrs	r3, r2
 800aacc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aaf6:	f023 0303 	bic.w	r3, r3, #3
 800aafa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab0a:	f023 0302 	bic.w	r3, r3, #2
 800ab0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b085      	sub	sp, #20
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab38:	f023 0303 	bic.w	r3, r3, #3
 800ab3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab4c:	f043 0302 	orr.w	r3, r3, #2
 800ab50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4013      	ands	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab78:	68fb      	ldr	r3, [r7, #12]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b085      	sub	sp, #20
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	4013      	ands	r3, r2
 800aba8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	0c1b      	lsrs	r3, r3, #16
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abba:	b480      	push	{r7}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	4013      	ands	r3, r2
 800abdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	b29b      	uxth	r3, r3
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abee:	b480      	push	{r7}
 800abf0:	b085      	sub	sp, #20
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800abfe:	78fb      	ldrb	r3, [r7, #3]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b087      	sub	sp, #28
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac4e:	78fb      	ldrb	r3, [r7, #3]
 800ac50:	f003 030f 	and.w	r3, r3, #15
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	fa22 f303 	lsr.w	r3, r2, r3
 800ac5a:	01db      	lsls	r3, r3, #7
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	015a      	lsls	r2, r3, #5
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4013      	ands	r3, r2
 800ac76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac78:	68bb      	ldr	r3, [r7, #8]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	f003 0301 	and.w	r3, r3, #1
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	370c      	adds	r7, #12
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
	...

0800aca4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acbe:	4619      	mov	r1, r3
 800acc0:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <USB_ActivateSetup+0x44>)
 800acc2:	4013      	ands	r3, r2
 800acc4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	fffff800 	.word	0xfffff800

0800acec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	460b      	mov	r3, r1
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	333c      	adds	r3, #60	; 0x3c
 800ad02:	3304      	adds	r3, #4
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	4a26      	ldr	r2, [pc, #152]	; (800ada4 <USB_EP0_OutStart+0xb8>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d90a      	bls.n	800ad26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad20:	d101      	bne.n	800ad26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e037      	b.n	800ad96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad54:	f043 0318 	orr.w	r3, r3, #24
 800ad58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d10f      	bne.n	800ad94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ad92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	4f54300a 	.word	0x4f54300a

0800ada8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3301      	adds	r3, #1
 800adb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	4a13      	ldr	r2, [pc, #76]	; (800ae0c <USB_CoreReset+0x64>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d901      	bls.n	800adc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e01b      	b.n	800adfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	daf2      	bge.n	800adb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	f043 0201 	orr.w	r2, r3, #1
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4a09      	ldr	r2, [pc, #36]	; (800ae0c <USB_CoreReset+0x64>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d901      	bls.n	800adf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e006      	b.n	800adfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d0f0      	beq.n	800adde <USB_CoreReset+0x36>

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	00030d40 	.word	0x00030d40

0800ae10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae20:	f002 fcba 	bl	800d798 <USBD_static_malloc>
 800ae24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	32b0      	adds	r2, #176	; 0xb0
 800ae36:	2100      	movs	r1, #0
 800ae38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e0d4      	b.n	800afea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ae44:	2100      	movs	r1, #0
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f009 fcce 	bl	80147e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32b0      	adds	r2, #176	; 0xb0
 800ae56:	68f9      	ldr	r1, [r7, #12]
 800ae58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32b0      	adds	r2, #176	; 0xb0
 800ae66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	7c1b      	ldrb	r3, [r3, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d138      	bne.n	800aeea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae78:	4b5e      	ldr	r3, [pc, #376]	; (800aff4 <USBD_CDC_Init+0x1e4>)
 800ae7a:	7819      	ldrb	r1, [r3, #0]
 800ae7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae80:	2202      	movs	r2, #2
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f002 fb65 	bl	800d552 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae88:	4b5a      	ldr	r3, [pc, #360]	; (800aff4 <USBD_CDC_Init+0x1e4>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	f003 020f 	and.w	r2, r3, #15
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	4613      	mov	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	440b      	add	r3, r1
 800ae9c:	3324      	adds	r3, #36	; 0x24
 800ae9e:	2201      	movs	r2, #1
 800aea0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aea2:	4b55      	ldr	r3, [pc, #340]	; (800aff8 <USBD_CDC_Init+0x1e8>)
 800aea4:	7819      	ldrb	r1, [r3, #0]
 800aea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeaa:	2202      	movs	r2, #2
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f002 fb50 	bl	800d552 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aeb2:	4b51      	ldr	r3, [pc, #324]	; (800aff8 <USBD_CDC_Init+0x1e8>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	f003 020f 	and.w	r2, r3, #15
 800aeba:	6879      	ldr	r1, [r7, #4]
 800aebc:	4613      	mov	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	440b      	add	r3, r1
 800aec6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aeca:	2201      	movs	r2, #1
 800aecc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aece:	4b4b      	ldr	r3, [pc, #300]	; (800affc <USBD_CDC_Init+0x1ec>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	f003 020f 	and.w	r2, r3, #15
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	440b      	add	r3, r1
 800aee2:	3326      	adds	r3, #38	; 0x26
 800aee4:	2210      	movs	r2, #16
 800aee6:	801a      	strh	r2, [r3, #0]
 800aee8:	e035      	b.n	800af56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aeea:	4b42      	ldr	r3, [pc, #264]	; (800aff4 <USBD_CDC_Init+0x1e4>)
 800aeec:	7819      	ldrb	r1, [r3, #0]
 800aeee:	2340      	movs	r3, #64	; 0x40
 800aef0:	2202      	movs	r2, #2
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f002 fb2d 	bl	800d552 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aef8:	4b3e      	ldr	r3, [pc, #248]	; (800aff4 <USBD_CDC_Init+0x1e4>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 020f 	and.w	r2, r3, #15
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	4613      	mov	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	440b      	add	r3, r1
 800af0c:	3324      	adds	r3, #36	; 0x24
 800af0e:	2201      	movs	r2, #1
 800af10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af12:	4b39      	ldr	r3, [pc, #228]	; (800aff8 <USBD_CDC_Init+0x1e8>)
 800af14:	7819      	ldrb	r1, [r3, #0]
 800af16:	2340      	movs	r3, #64	; 0x40
 800af18:	2202      	movs	r2, #2
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f002 fb19 	bl	800d552 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af20:	4b35      	ldr	r3, [pc, #212]	; (800aff8 <USBD_CDC_Init+0x1e8>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	f003 020f 	and.w	r2, r3, #15
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	440b      	add	r3, r1
 800af34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af38:	2201      	movs	r2, #1
 800af3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af3c:	4b2f      	ldr	r3, [pc, #188]	; (800affc <USBD_CDC_Init+0x1ec>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 020f 	and.w	r2, r3, #15
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	440b      	add	r3, r1
 800af50:	3326      	adds	r3, #38	; 0x26
 800af52:	2210      	movs	r2, #16
 800af54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af56:	4b29      	ldr	r3, [pc, #164]	; (800affc <USBD_CDC_Init+0x1ec>)
 800af58:	7819      	ldrb	r1, [r3, #0]
 800af5a:	2308      	movs	r3, #8
 800af5c:	2203      	movs	r2, #3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f002 faf7 	bl	800d552 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af64:	4b25      	ldr	r3, [pc, #148]	; (800affc <USBD_CDC_Init+0x1ec>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f003 020f 	and.w	r2, r3, #15
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	3324      	adds	r3, #36	; 0x24
 800af7a:	2201      	movs	r2, #1
 800af7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	33b0      	adds	r3, #176	; 0xb0
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800afb4:	2302      	movs	r3, #2
 800afb6:	e018      	b.n	800afea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	7c1b      	ldrb	r3, [r3, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10a      	bne.n	800afd6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afc0:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <USBD_CDC_Init+0x1e8>)
 800afc2:	7819      	ldrb	r1, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f002 fbae 	bl	800d730 <USBD_LL_PrepareReceive>
 800afd4:	e008      	b.n	800afe8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afd6:	4b08      	ldr	r3, [pc, #32]	; (800aff8 <USBD_CDC_Init+0x1e8>)
 800afd8:	7819      	ldrb	r1, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f002 fba4 	bl	800d730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	24000097 	.word	0x24000097
 800aff8:	24000098 	.word	0x24000098
 800affc:	24000099 	.word	0x24000099

0800b000 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	460b      	mov	r3, r1
 800b00a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b00c:	4b3a      	ldr	r3, [pc, #232]	; (800b0f8 <USBD_CDC_DeInit+0xf8>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f002 fac3 	bl	800d59e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b018:	4b37      	ldr	r3, [pc, #220]	; (800b0f8 <USBD_CDC_DeInit+0xf8>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 020f 	and.w	r2, r3, #15
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4613      	mov	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	440b      	add	r3, r1
 800b02c:	3324      	adds	r3, #36	; 0x24
 800b02e:	2200      	movs	r2, #0
 800b030:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b032:	4b32      	ldr	r3, [pc, #200]	; (800b0fc <USBD_CDC_DeInit+0xfc>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f002 fab0 	bl	800d59e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b03e:	4b2f      	ldr	r3, [pc, #188]	; (800b0fc <USBD_CDC_DeInit+0xfc>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	f003 020f 	and.w	r2, r3, #15
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b056:	2200      	movs	r2, #0
 800b058:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b05a:	4b29      	ldr	r3, [pc, #164]	; (800b100 <USBD_CDC_DeInit+0x100>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f002 fa9c 	bl	800d59e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b066:	4b26      	ldr	r3, [pc, #152]	; (800b100 <USBD_CDC_DeInit+0x100>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	f003 020f 	and.w	r2, r3, #15
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	440b      	add	r3, r1
 800b07a:	3324      	adds	r3, #36	; 0x24
 800b07c:	2200      	movs	r2, #0
 800b07e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b080:	4b1f      	ldr	r3, [pc, #124]	; (800b100 <USBD_CDC_DeInit+0x100>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 020f 	and.w	r2, r3, #15
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	3326      	adds	r3, #38	; 0x26
 800b096:	2200      	movs	r2, #0
 800b098:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	32b0      	adds	r2, #176	; 0xb0
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d01f      	beq.n	800b0ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	33b0      	adds	r3, #176	; 0xb0
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	32b0      	adds	r2, #176	; 0xb0
 800b0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f002 fb70 	bl	800d7b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	32b0      	adds	r2, #176	; 0xb0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	24000097 	.word	0x24000097
 800b0fc:	24000098 	.word	0x24000098
 800b100:	24000099 	.word	0x24000099

0800b104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	32b0      	adds	r2, #176	; 0xb0
 800b118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b122:	2300      	movs	r3, #0
 800b124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b130:	2303      	movs	r3, #3
 800b132:	e0bf      	b.n	800b2b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d050      	beq.n	800b1e2 <USBD_CDC_Setup+0xde>
 800b140:	2b20      	cmp	r3, #32
 800b142:	f040 80af 	bne.w	800b2a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	88db      	ldrh	r3, [r3, #6]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d03a      	beq.n	800b1c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	b25b      	sxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	da1b      	bge.n	800b190 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	33b0      	adds	r3, #176	; 0xb0
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b16e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	88d2      	ldrh	r2, [r2, #6]
 800b174:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	88db      	ldrh	r3, [r3, #6]
 800b17a:	2b07      	cmp	r3, #7
 800b17c:	bf28      	it	cs
 800b17e:	2307      	movcs	r3, #7
 800b180:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	89fa      	ldrh	r2, [r7, #14]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 fd89 	bl	800cca0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b18e:	e090      	b.n	800b2b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	785a      	ldrb	r2, [r3, #1]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	88db      	ldrh	r3, [r3, #6]
 800b19e:	2b3f      	cmp	r3, #63	; 0x3f
 800b1a0:	d803      	bhi.n	800b1aa <USBD_CDC_Setup+0xa6>
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	88db      	ldrh	r3, [r3, #6]
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	e000      	b.n	800b1ac <USBD_CDC_Setup+0xa8>
 800b1aa:	2240      	movs	r2, #64	; 0x40
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1b2:	6939      	ldr	r1, [r7, #16]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f001 fd9b 	bl	800ccf8 <USBD_CtlPrepareRx>
      break;
 800b1c2:	e076      	b.n	800b2b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	33b0      	adds	r3, #176	; 0xb0
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	7850      	ldrb	r0, [r2, #1]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	4798      	blx	r3
      break;
 800b1e0:	e067      	b.n	800b2b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	2b0b      	cmp	r3, #11
 800b1e8:	d851      	bhi.n	800b28e <USBD_CDC_Setup+0x18a>
 800b1ea:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <USBD_CDC_Setup+0xec>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b221 	.word	0x0800b221
 800b1f4:	0800b29d 	.word	0x0800b29d
 800b1f8:	0800b28f 	.word	0x0800b28f
 800b1fc:	0800b28f 	.word	0x0800b28f
 800b200:	0800b28f 	.word	0x0800b28f
 800b204:	0800b28f 	.word	0x0800b28f
 800b208:	0800b28f 	.word	0x0800b28f
 800b20c:	0800b28f 	.word	0x0800b28f
 800b210:	0800b28f 	.word	0x0800b28f
 800b214:	0800b28f 	.word	0x0800b28f
 800b218:	0800b24b 	.word	0x0800b24b
 800b21c:	0800b275 	.word	0x0800b275
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d107      	bne.n	800b23c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b22c:	f107 030a 	add.w	r3, r7, #10
 800b230:	2202      	movs	r2, #2
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f001 fd33 	bl	800cca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b23a:	e032      	b.n	800b2a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f001 fcbd 	bl	800cbbe <USBD_CtlError>
            ret = USBD_FAIL;
 800b244:	2303      	movs	r3, #3
 800b246:	75fb      	strb	r3, [r7, #23]
          break;
 800b248:	e02b      	b.n	800b2a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b03      	cmp	r3, #3
 800b254:	d107      	bne.n	800b266 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b256:	f107 030d 	add.w	r3, r7, #13
 800b25a:	2201      	movs	r2, #1
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 fd1e 	bl	800cca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b264:	e01d      	b.n	800b2a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 fca8 	bl	800cbbe <USBD_CtlError>
            ret = USBD_FAIL;
 800b26e:	2303      	movs	r3, #3
 800b270:	75fb      	strb	r3, [r7, #23]
          break;
 800b272:	e016      	b.n	800b2a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d00f      	beq.n	800b2a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f001 fc9b 	bl	800cbbe <USBD_CtlError>
            ret = USBD_FAIL;
 800b288:	2303      	movs	r3, #3
 800b28a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b28c:	e008      	b.n	800b2a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f001 fc94 	bl	800cbbe <USBD_CtlError>
          ret = USBD_FAIL;
 800b296:	2303      	movs	r3, #3
 800b298:	75fb      	strb	r3, [r7, #23]
          break;
 800b29a:	e002      	b.n	800b2a2 <USBD_CDC_Setup+0x19e>
          break;
 800b29c:	bf00      	nop
 800b29e:	e008      	b.n	800b2b2 <USBD_CDC_Setup+0x1ae>
          break;
 800b2a0:	bf00      	nop
      }
      break;
 800b2a2:	e006      	b.n	800b2b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f001 fc89 	bl	800cbbe <USBD_CtlError>
      ret = USBD_FAIL;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b2b0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	32b0      	adds	r2, #176	; 0xb0
 800b2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e065      	b.n	800b3b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	32b0      	adds	r2, #176	; 0xb0
 800b2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	440b      	add	r3, r1
 800b308:	3318      	adds	r3, #24
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d02f      	beq.n	800b370 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	f003 020f 	and.w	r2, r3, #15
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	440b      	add	r3, r1
 800b322:	3318      	adds	r3, #24
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	78fb      	ldrb	r3, [r7, #3]
 800b328:	f003 010f 	and.w	r1, r3, #15
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	460b      	mov	r3, r1
 800b330:	00db      	lsls	r3, r3, #3
 800b332:	440b      	add	r3, r1
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4403      	add	r3, r0
 800b338:	3344      	adds	r3, #68	; 0x44
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b340:	fb01 f303 	mul.w	r3, r1, r3
 800b344:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b346:	2b00      	cmp	r3, #0
 800b348:	d112      	bne.n	800b370 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b34a:	78fb      	ldrb	r3, [r7, #3]
 800b34c:	f003 020f 	and.w	r2, r3, #15
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	3318      	adds	r3, #24
 800b35e:	2200      	movs	r2, #0
 800b360:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b362:	78f9      	ldrb	r1, [r7, #3]
 800b364:	2300      	movs	r3, #0
 800b366:	2200      	movs	r2, #0
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f002 f9c0 	bl	800d6ee <USBD_LL_Transmit>
 800b36e:	e01f      	b.n	800b3b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	33b0      	adds	r3, #176	; 0xb0
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d010      	beq.n	800b3b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	33b0      	adds	r3, #176	; 0xb0
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b3ac:	78fa      	ldrb	r2, [r7, #3]
 800b3ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b084      	sub	sp, #16
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	32b0      	adds	r2, #176	; 0xb0
 800b3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	32b0      	adds	r2, #176	; 0xb0
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e01a      	b.n	800b422 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f002 f9be 	bl	800d772 <USBD_LL_GetRxDataSize>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	33b0      	adds	r3, #176	; 0xb0
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b41c:	4611      	mov	r1, r2
 800b41e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	32b0      	adds	r2, #176	; 0xb0
 800b43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b440:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e025      	b.n	800b498 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	33b0      	adds	r3, #176	; 0xb0
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d01a      	beq.n	800b496 <USBD_CDC_EP0_RxReady+0x6c>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b466:	2bff      	cmp	r3, #255	; 0xff
 800b468:	d015      	beq.n	800b496 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	33b0      	adds	r3, #176	; 0xb0
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b482:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b48a:	b292      	uxth	r2, r2
 800b48c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	22ff      	movs	r2, #255	; 0xff
 800b492:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4a8:	2182      	movs	r1, #130	; 0x82
 800b4aa:	4818      	ldr	r0, [pc, #96]	; (800b50c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4ac:	f000 fd4f 	bl	800bf4e <USBD_GetEpDesc>
 800b4b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	4815      	ldr	r0, [pc, #84]	; (800b50c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4b6:	f000 fd4a 	bl	800bf4e <USBD_GetEpDesc>
 800b4ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4bc:	2181      	movs	r1, #129	; 0x81
 800b4be:	4813      	ldr	r0, [pc, #76]	; (800b50c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4c0:	f000 fd45 	bl	800bf4e <USBD_GetEpDesc>
 800b4c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2210      	movs	r2, #16
 800b4d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d006      	beq.n	800b4e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4e0:	711a      	strb	r2, [r3, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d006      	beq.n	800b4fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4f4:	711a      	strb	r2, [r3, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2243      	movs	r2, #67	; 0x43
 800b4fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b500:	4b02      	ldr	r3, [pc, #8]	; (800b50c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b502:	4618      	mov	r0, r3
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	24000054 	.word	0x24000054

0800b510 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b518:	2182      	movs	r1, #130	; 0x82
 800b51a:	4818      	ldr	r0, [pc, #96]	; (800b57c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b51c:	f000 fd17 	bl	800bf4e <USBD_GetEpDesc>
 800b520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b522:	2101      	movs	r1, #1
 800b524:	4815      	ldr	r0, [pc, #84]	; (800b57c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b526:	f000 fd12 	bl	800bf4e <USBD_GetEpDesc>
 800b52a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b52c:	2181      	movs	r1, #129	; 0x81
 800b52e:	4813      	ldr	r0, [pc, #76]	; (800b57c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b530:	f000 fd0d 	bl	800bf4e <USBD_GetEpDesc>
 800b534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2210      	movs	r2, #16
 800b540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d006      	beq.n	800b556 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	2200      	movs	r2, #0
 800b54c:	711a      	strb	r2, [r3, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f042 0202 	orr.w	r2, r2, #2
 800b554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d006      	beq.n	800b56a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	711a      	strb	r2, [r3, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	f042 0202 	orr.w	r2, r2, #2
 800b568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2243      	movs	r2, #67	; 0x43
 800b56e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b570:	4b02      	ldr	r3, [pc, #8]	; (800b57c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	24000054 	.word	0x24000054

0800b580 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b588:	2182      	movs	r1, #130	; 0x82
 800b58a:	4818      	ldr	r0, [pc, #96]	; (800b5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b58c:	f000 fcdf 	bl	800bf4e <USBD_GetEpDesc>
 800b590:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b592:	2101      	movs	r1, #1
 800b594:	4815      	ldr	r0, [pc, #84]	; (800b5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b596:	f000 fcda 	bl	800bf4e <USBD_GetEpDesc>
 800b59a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b59c:	2181      	movs	r1, #129	; 0x81
 800b59e:	4813      	ldr	r0, [pc, #76]	; (800b5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5a0:	f000 fcd5 	bl	800bf4e <USBD_GetEpDesc>
 800b5a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d006      	beq.n	800b5c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5c0:	711a      	strb	r2, [r3, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d006      	beq.n	800b5da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5d4:	711a      	strb	r2, [r3, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2243      	movs	r2, #67	; 0x43
 800b5de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5e0:	4b02      	ldr	r3, [pc, #8]	; (800b5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	24000054 	.word	0x24000054

0800b5f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	220a      	movs	r2, #10
 800b5fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5fe:	4b03      	ldr	r3, [pc, #12]	; (800b60c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	24000010 	.word	0x24000010

0800b610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b620:	2303      	movs	r3, #3
 800b622:	e009      	b.n	800b638 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	33b0      	adds	r3, #176	; 0xb0
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	32b0      	adds	r2, #176	; 0xb0
 800b65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b666:	2303      	movs	r3, #3
 800b668:	e008      	b.n	800b67c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	371c      	adds	r7, #28
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	32b0      	adds	r2, #176	; 0xb0
 800b69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e004      	b.n	800b6b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
	...

0800b6c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	32b0      	adds	r2, #176	; 0xb0
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e025      	b.n	800b736 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d11f      	bne.n	800b734 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b6fc:	4b10      	ldr	r3, [pc, #64]	; (800b740 <USBD_CDC_TransmitPacket+0x7c>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	f003 020f 	and.w	r2, r3, #15
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4613      	mov	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4403      	add	r3, r0
 800b716:	3318      	adds	r3, #24
 800b718:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <USBD_CDC_TransmitPacket+0x7c>)
 800b71c:	7819      	ldrb	r1, [r3, #0]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 ffdf 	bl	800d6ee <USBD_LL_Transmit>

    ret = USBD_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	24000097 	.word	0x24000097

0800b744 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	32b0      	adds	r2, #176	; 0xb0
 800b756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	32b0      	adds	r2, #176	; 0xb0
 800b766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b76e:	2303      	movs	r3, #3
 800b770:	e018      	b.n	800b7a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	7c1b      	ldrb	r3, [r3, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b77a:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <USBD_CDC_ReceivePacket+0x68>)
 800b77c:	7819      	ldrb	r1, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b784:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 ffd1 	bl	800d730 <USBD_LL_PrepareReceive>
 800b78e:	e008      	b.n	800b7a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b790:	4b06      	ldr	r3, [pc, #24]	; (800b7ac <USBD_CDC_ReceivePacket+0x68>)
 800b792:	7819      	ldrb	r1, [r3, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f001 ffc7 	bl	800d730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	24000098 	.word	0x24000098

0800b7b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e01f      	b.n	800b808 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	79fa      	ldrb	r2, [r7, #7]
 800b7fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f001 fe3d 	bl	800d47c <USBD_LL_Init>
 800b802:	4603      	mov	r3, r0
 800b804:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b806:	7dfb      	ldrb	r3, [r7, #23]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b824:	2303      	movs	r3, #3
 800b826:	e025      	b.n	800b874 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	32ae      	adds	r2, #174	; 0xae
 800b83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00f      	beq.n	800b864 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	32ae      	adds	r2, #174	; 0xae
 800b84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	f107 020e 	add.w	r2, r7, #14
 800b858:	4610      	mov	r0, r2
 800b85a:	4798      	blx	r3
 800b85c:	4602      	mov	r2, r0
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f001 fe49 	bl	800d51c <USBD_LL_Start>
 800b88a:	4603      	mov	r3, r0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b89c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d009      	beq.n	800b8d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	78fa      	ldrb	r2, [r7, #3]
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	4798      	blx	r3
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	78fa      	ldrb	r2, [r7, #3]
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	4798      	blx	r3
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b908:	2303      	movs	r3, #3
 800b90a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 f90e 	bl	800cb4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b93c:	461a      	mov	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b94a:	f003 031f 	and.w	r3, r3, #31
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d01a      	beq.n	800b988 <USBD_LL_SetupStage+0x72>
 800b952:	2b02      	cmp	r3, #2
 800b954:	d822      	bhi.n	800b99c <USBD_LL_SetupStage+0x86>
 800b956:	2b00      	cmp	r3, #0
 800b958:	d002      	beq.n	800b960 <USBD_LL_SetupStage+0x4a>
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d00a      	beq.n	800b974 <USBD_LL_SetupStage+0x5e>
 800b95e:	e01d      	b.n	800b99c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fb65 	bl	800c038 <USBD_StdDevReq>
 800b96e:	4603      	mov	r3, r0
 800b970:	73fb      	strb	r3, [r7, #15]
      break;
 800b972:	e020      	b.n	800b9b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fbcd 	bl	800c11c <USBD_StdItfReq>
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]
      break;
 800b986:	e016      	b.n	800b9b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fc2f 	bl	800c1f4 <USBD_StdEPReq>
 800b996:	4603      	mov	r3, r0
 800b998:	73fb      	strb	r3, [r7, #15]
      break;
 800b99a:	e00c      	b.n	800b9b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f001 fe16 	bl	800d5dc <USBD_LL_StallEP>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b4:	bf00      	nop
  }

  return ret;
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b9d2:	7afb      	ldrb	r3, [r7, #11]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d16e      	bne.n	800bab6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	f040 8098 	bne.w	800bb1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d913      	bls.n	800ba20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	689a      	ldr	r2, [r3, #8]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	1ad2      	subs	r2, r2, r3
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	68da      	ldr	r2, [r3, #12]
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	bf28      	it	cs
 800ba12:	4613      	movcs	r3, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f001 f98a 	bl	800cd32 <USBD_CtlContinueRx>
 800ba1e:	e07d      	b.n	800bb1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba26:	f003 031f 	and.w	r3, r3, #31
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d014      	beq.n	800ba58 <USBD_LL_DataOutStage+0x98>
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d81d      	bhi.n	800ba6e <USBD_LL_DataOutStage+0xae>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <USBD_LL_DataOutStage+0x7c>
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d003      	beq.n	800ba42 <USBD_LL_DataOutStage+0x82>
 800ba3a:	e018      	b.n	800ba6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75bb      	strb	r3, [r7, #22]
            break;
 800ba40:	e018      	b.n	800ba74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 fa64 	bl	800bf1a <USBD_CoreFindIF>
 800ba52:	4603      	mov	r3, r0
 800ba54:	75bb      	strb	r3, [r7, #22]
            break;
 800ba56:	e00d      	b.n	800ba74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	4619      	mov	r1, r3
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 fa66 	bl	800bf34 <USBD_CoreFindEP>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75bb      	strb	r3, [r7, #22]
            break;
 800ba6c:	e002      	b.n	800ba74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	75bb      	strb	r3, [r7, #22]
            break;
 800ba72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ba74:	7dbb      	ldrb	r3, [r7, #22]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d119      	bne.n	800baae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d113      	bne.n	800baae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ba86:	7dba      	ldrb	r2, [r7, #22]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	32ae      	adds	r2, #174	; 0xae
 800ba8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00b      	beq.n	800baae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ba96:	7dba      	ldrb	r2, [r7, #22]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ba9e:	7dba      	ldrb	r2, [r7, #22]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	32ae      	adds	r2, #174	; 0xae
 800baa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f001 f950 	bl	800cd54 <USBD_CtlSendStatus>
 800bab4:	e032      	b.n	800bb1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bab6:	7afb      	ldrb	r3, [r7, #11]
 800bab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babc:	b2db      	uxtb	r3, r3
 800babe:	4619      	mov	r1, r3
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 fa37 	bl	800bf34 <USBD_CoreFindEP>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baca:	7dbb      	ldrb	r3, [r7, #22]
 800bacc:	2bff      	cmp	r3, #255	; 0xff
 800bace:	d025      	beq.n	800bb1c <USBD_LL_DataOutStage+0x15c>
 800bad0:	7dbb      	ldrb	r3, [r7, #22]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d122      	bne.n	800bb1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d117      	bne.n	800bb12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bae2:	7dba      	ldrb	r2, [r7, #22]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	32ae      	adds	r2, #174	; 0xae
 800bae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00f      	beq.n	800bb12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800baf2:	7dba      	ldrb	r2, [r7, #22]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bafa:	7dba      	ldrb	r2, [r7, #22]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	32ae      	adds	r2, #174	; 0xae
 800bb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	7afa      	ldrb	r2, [r7, #11]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	e000      	b.n	800bb1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b086      	sub	sp, #24
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	607a      	str	r2, [r7, #4]
 800bb32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d16f      	bne.n	800bc1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3314      	adds	r3, #20
 800bb3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d15a      	bne.n	800bc00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	689a      	ldr	r2, [r3, #8]
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d914      	bls.n	800bb80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	1ad2      	subs	r2, r2, r3
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f001 f8b2 	bl	800ccd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb72:	2300      	movs	r3, #0
 800bb74:	2200      	movs	r2, #0
 800bb76:	2100      	movs	r1, #0
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f001 fdd9 	bl	800d730 <USBD_LL_PrepareReceive>
 800bb7e:	e03f      	b.n	800bc00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	68da      	ldr	r2, [r3, #12]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d11c      	bne.n	800bbc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d316      	bcc.n	800bbc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d20f      	bcs.n	800bbc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bba6:	2200      	movs	r2, #0
 800bba8:	2100      	movs	r1, #0
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f001 f893 	bl	800ccd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbb8:	2300      	movs	r3, #0
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f001 fdb6 	bl	800d730 <USBD_LL_PrepareReceive>
 800bbc4:	e01c      	b.n	800bc00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d10f      	bne.n	800bbf2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbf2:	2180      	movs	r1, #128	; 0x80
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f001 fcf1 	bl	800d5dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f001 f8bd 	bl	800cd7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d03a      	beq.n	800bc80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f7ff fe42 	bl	800b894 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bc18:	e032      	b.n	800bc80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc1a:	7afb      	ldrb	r3, [r7, #11]
 800bc1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	4619      	mov	r1, r3
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f000 f985 	bl	800bf34 <USBD_CoreFindEP>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	2bff      	cmp	r3, #255	; 0xff
 800bc32:	d025      	beq.n	800bc80 <USBD_LL_DataInStage+0x15a>
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d122      	bne.n	800bc80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d11c      	bne.n	800bc80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bc46:	7dfa      	ldrb	r2, [r7, #23]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	32ae      	adds	r2, #174	; 0xae
 800bc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d014      	beq.n	800bc80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bc56:	7dfa      	ldrb	r2, [r7, #23]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc5e:	7dfa      	ldrb	r2, [r7, #23]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	32ae      	adds	r2, #174	; 0xae
 800bc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	7afa      	ldrb	r2, [r7, #11]
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	4798      	blx	r3
 800bc72:	4603      	mov	r3, r0
 800bc74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bc76:	7dbb      	ldrb	r3, [r7, #22]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bc7c:	7dbb      	ldrb	r3, [r7, #22]
 800bc7e:	e000      	b.n	800bc82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b084      	sub	sp, #16
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d014      	beq.n	800bcf0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00e      	beq.n	800bcf0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	6852      	ldr	r2, [r2, #4]
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	4611      	mov	r1, r2
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	4798      	blx	r3
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bcec:	2303      	movs	r3, #3
 800bcee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcf0:	2340      	movs	r3, #64	; 0x40
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 fc2b 	bl	800d552 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2240      	movs	r2, #64	; 0x40
 800bd08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd0c:	2340      	movs	r3, #64	; 0x40
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2180      	movs	r1, #128	; 0x80
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f001 fc1d 	bl	800d552 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2240      	movs	r2, #64	; 0x40
 800bd22:	621a      	str	r2, [r3, #32]

  return ret;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	78fa      	ldrb	r2, [r7, #3]
 800bd3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	370c      	adds	r7, #12
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b083      	sub	sp, #12
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	d006      	beq.n	800bd70 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2204      	movs	r2, #4
 800bd74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d106      	bne.n	800bda8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d110      	bne.n	800bdec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00b      	beq.n	800bdec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdda:	69db      	ldr	r3, [r3, #28]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d005      	beq.n	800bdec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	460b      	mov	r3, r1
 800be00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	32ae      	adds	r2, #174	; 0xae
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be14:	2303      	movs	r3, #3
 800be16:	e01c      	b.n	800be52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b03      	cmp	r3, #3
 800be22:	d115      	bne.n	800be50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	32ae      	adds	r2, #174	; 0xae
 800be2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00b      	beq.n	800be50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	32ae      	adds	r2, #174	; 0xae
 800be42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be46:	6a1b      	ldr	r3, [r3, #32]
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	4611      	mov	r1, r2
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	32ae      	adds	r2, #174	; 0xae
 800be70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	e01c      	b.n	800beb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b03      	cmp	r3, #3
 800be86:	d115      	bne.n	800beb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	32ae      	adds	r2, #174	; 0xae
 800be92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	32ae      	adds	r2, #174	; 0xae
 800bea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	78fa      	ldrb	r2, [r7, #3]
 800beae:	4611      	mov	r1, r2
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00e      	beq.n	800bf10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	6852      	ldr	r2, [r2, #4]
 800befe:	b2d2      	uxtb	r2, r2
 800bf00:	4611      	mov	r1, r2
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	4798      	blx	r3
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b086      	sub	sp, #24
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	460b      	mov	r3, r1
 800bf58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	885b      	ldrh	r3, [r3, #2]
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d920      	bls.n	800bfb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bf7e:	e013      	b.n	800bfa8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bf80:	f107 030a 	add.w	r3, r7, #10
 800bf84:	4619      	mov	r1, r3
 800bf86:	6978      	ldr	r0, [r7, #20]
 800bf88:	f000 f81b 	bl	800bfc2 <USBD_GetNextDesc>
 800bf8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	785b      	ldrb	r3, [r3, #1]
 800bf92:	2b05      	cmp	r3, #5
 800bf94:	d108      	bne.n	800bfa8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	789b      	ldrb	r3, [r3, #2]
 800bf9e:	78fa      	ldrb	r2, [r7, #3]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d008      	beq.n	800bfb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	885b      	ldrh	r3, [r3, #2]
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	897b      	ldrh	r3, [r7, #10]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d8e5      	bhi.n	800bf80 <USBD_GetEpDesc+0x32>
 800bfb4:	e000      	b.n	800bfb8 <USBD_GetEpDesc+0x6a>
          break;
 800bfb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bfb8:	693b      	ldr	r3, [r7, #16]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	881a      	ldrh	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	4413      	add	r3, r2
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4413      	add	r3, r2
 800bfec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bfee:	68fb      	ldr	r3, [r7, #12]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	3301      	adds	r3, #1
 800c012:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c01a:	8a3b      	ldrh	r3, [r7, #16]
 800c01c:	021b      	lsls	r3, r3, #8
 800c01e:	b21a      	sxth	r2, r3
 800c020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c024:	4313      	orrs	r3, r2
 800c026:	b21b      	sxth	r3, r3
 800c028:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c02a:	89fb      	ldrh	r3, [r7, #14]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	371c      	adds	r7, #28
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c04e:	2b40      	cmp	r3, #64	; 0x40
 800c050:	d005      	beq.n	800c05e <USBD_StdDevReq+0x26>
 800c052:	2b40      	cmp	r3, #64	; 0x40
 800c054:	d857      	bhi.n	800c106 <USBD_StdDevReq+0xce>
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00f      	beq.n	800c07a <USBD_StdDevReq+0x42>
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	d153      	bne.n	800c106 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	32ae      	adds	r2, #174	; 0xae
 800c068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	4798      	blx	r3
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]
      break;
 800c078:	e04a      	b.n	800c110 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	785b      	ldrb	r3, [r3, #1]
 800c07e:	2b09      	cmp	r3, #9
 800c080:	d83b      	bhi.n	800c0fa <USBD_StdDevReq+0xc2>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <USBD_StdDevReq+0x50>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c0dd 	.word	0x0800c0dd
 800c08c:	0800c0f1 	.word	0x0800c0f1
 800c090:	0800c0fb 	.word	0x0800c0fb
 800c094:	0800c0e7 	.word	0x0800c0e7
 800c098:	0800c0fb 	.word	0x0800c0fb
 800c09c:	0800c0bb 	.word	0x0800c0bb
 800c0a0:	0800c0b1 	.word	0x0800c0b1
 800c0a4:	0800c0fb 	.word	0x0800c0fb
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0c5 	.word	0x0800c0c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fa3c 	bl	800c530 <USBD_GetDescriptor>
          break;
 800c0b8:	e024      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fba1 	bl	800c804 <USBD_SetAddress>
          break;
 800c0c2:	e01f      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fbe0 	bl	800c88c <USBD_SetConfig>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73fb      	strb	r3, [r7, #15]
          break;
 800c0d0:	e018      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fc83 	bl	800c9e0 <USBD_GetConfig>
          break;
 800c0da:	e013      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fcb4 	bl	800ca4c <USBD_GetStatus>
          break;
 800c0e4:	e00e      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fce3 	bl	800cab4 <USBD_SetFeature>
          break;
 800c0ee:	e009      	b.n	800c104 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fd07 	bl	800cb06 <USBD_ClrFeature>
          break;
 800c0f8:	e004      	b.n	800c104 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fd5e 	bl	800cbbe <USBD_CtlError>
          break;
 800c102:	bf00      	nop
      }
      break;
 800c104:	e004      	b.n	800c110 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fd58 	bl	800cbbe <USBD_CtlError>
      break;
 800c10e:	bf00      	nop
  }

  return ret;
 800c110:	7bfb      	ldrb	r3, [r7, #15]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop

0800c11c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c132:	2b40      	cmp	r3, #64	; 0x40
 800c134:	d005      	beq.n	800c142 <USBD_StdItfReq+0x26>
 800c136:	2b40      	cmp	r3, #64	; 0x40
 800c138:	d852      	bhi.n	800c1e0 <USBD_StdItfReq+0xc4>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <USBD_StdItfReq+0x26>
 800c13e:	2b20      	cmp	r3, #32
 800c140:	d14e      	bne.n	800c1e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d840      	bhi.n	800c1d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	889b      	ldrh	r3, [r3, #4]
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b01      	cmp	r3, #1
 800c158:	d836      	bhi.n	800c1c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	889b      	ldrh	r3, [r3, #4]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff fed9 	bl	800bf1a <USBD_CoreFindIF>
 800c168:	4603      	mov	r3, r0
 800c16a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	2bff      	cmp	r3, #255	; 0xff
 800c170:	d01d      	beq.n	800c1ae <USBD_StdItfReq+0x92>
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d11a      	bne.n	800c1ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c178:	7bba      	ldrb	r2, [r7, #14]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	32ae      	adds	r2, #174	; 0xae
 800c17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00f      	beq.n	800c1a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c188:	7bba      	ldrb	r2, [r7, #14]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c190:	7bba      	ldrb	r2, [r7, #14]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	32ae      	adds	r2, #174	; 0xae
 800c196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1a6:	e004      	b.n	800c1b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1ac:	e001      	b.n	800c1b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	88db      	ldrh	r3, [r3, #6]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d110      	bne.n	800c1dc <USBD_StdItfReq+0xc0>
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10d      	bne.n	800c1dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fdc7 	bl	800cd54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c1c6:	e009      	b.n	800c1dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fcf7 	bl	800cbbe <USBD_CtlError>
          break;
 800c1d0:	e004      	b.n	800c1dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fcf2 	bl	800cbbe <USBD_CtlError>
          break;
 800c1da:	e000      	b.n	800c1de <USBD_StdItfReq+0xc2>
          break;
 800c1dc:	bf00      	nop
      }
      break;
 800c1de:	e004      	b.n	800c1ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fceb 	bl	800cbbe <USBD_CtlError>
      break;
 800c1e8:	bf00      	nop
  }

  return ret;
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	889b      	ldrh	r3, [r3, #4]
 800c206:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c210:	2b40      	cmp	r3, #64	; 0x40
 800c212:	d007      	beq.n	800c224 <USBD_StdEPReq+0x30>
 800c214:	2b40      	cmp	r3, #64	; 0x40
 800c216:	f200 817f 	bhi.w	800c518 <USBD_StdEPReq+0x324>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d02a      	beq.n	800c274 <USBD_StdEPReq+0x80>
 800c21e:	2b20      	cmp	r3, #32
 800c220:	f040 817a 	bne.w	800c518 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c224:	7bbb      	ldrb	r3, [r7, #14]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff fe83 	bl	800bf34 <USBD_CoreFindEP>
 800c22e:	4603      	mov	r3, r0
 800c230:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c232:	7b7b      	ldrb	r3, [r7, #13]
 800c234:	2bff      	cmp	r3, #255	; 0xff
 800c236:	f000 8174 	beq.w	800c522 <USBD_StdEPReq+0x32e>
 800c23a:	7b7b      	ldrb	r3, [r7, #13]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f040 8170 	bne.w	800c522 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c242:	7b7a      	ldrb	r2, [r7, #13]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c24a:	7b7a      	ldrb	r2, [r7, #13]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	32ae      	adds	r2, #174	; 0xae
 800c250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 8163 	beq.w	800c522 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c25c:	7b7a      	ldrb	r2, [r7, #13]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	32ae      	adds	r2, #174	; 0xae
 800c262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	4798      	blx	r3
 800c26e:	4603      	mov	r3, r0
 800c270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c272:	e156      	b.n	800c522 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	785b      	ldrb	r3, [r3, #1]
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d008      	beq.n	800c28e <USBD_StdEPReq+0x9a>
 800c27c:	2b03      	cmp	r3, #3
 800c27e:	f300 8145 	bgt.w	800c50c <USBD_StdEPReq+0x318>
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 809b 	beq.w	800c3be <USBD_StdEPReq+0x1ca>
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d03c      	beq.n	800c306 <USBD_StdEPReq+0x112>
 800c28c:	e13e      	b.n	800c50c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b02      	cmp	r3, #2
 800c298:	d002      	beq.n	800c2a0 <USBD_StdEPReq+0xac>
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d016      	beq.n	800c2cc <USBD_StdEPReq+0xd8>
 800c29e:	e02c      	b.n	800c2fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2a0:	7bbb      	ldrb	r3, [r7, #14]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00d      	beq.n	800c2c2 <USBD_StdEPReq+0xce>
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	2b80      	cmp	r3, #128	; 0x80
 800c2aa:	d00a      	beq.n	800c2c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f001 f993 	bl	800d5dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2b6:	2180      	movs	r1, #128	; 0x80
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 f98f 	bl	800d5dc <USBD_LL_StallEP>
 800c2be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2c0:	e020      	b.n	800c304 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fc7a 	bl	800cbbe <USBD_CtlError>
              break;
 800c2ca:	e01b      	b.n	800c304 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	885b      	ldrh	r3, [r3, #2]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10e      	bne.n	800c2f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00b      	beq.n	800c2f2 <USBD_StdEPReq+0xfe>
 800c2da:	7bbb      	ldrb	r3, [r7, #14]
 800c2dc:	2b80      	cmp	r3, #128	; 0x80
 800c2de:	d008      	beq.n	800c2f2 <USBD_StdEPReq+0xfe>
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	88db      	ldrh	r3, [r3, #6]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d104      	bne.n	800c2f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f001 f975 	bl	800d5dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fd2e 	bl	800cd54 <USBD_CtlSendStatus>

              break;
 800c2f8:	e004      	b.n	800c304 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fc5e 	bl	800cbbe <USBD_CtlError>
              break;
 800c302:	bf00      	nop
          }
          break;
 800c304:	e107      	b.n	800c516 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d002      	beq.n	800c318 <USBD_StdEPReq+0x124>
 800c312:	2b03      	cmp	r3, #3
 800c314:	d016      	beq.n	800c344 <USBD_StdEPReq+0x150>
 800c316:	e04b      	b.n	800c3b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c318:	7bbb      	ldrb	r3, [r7, #14]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00d      	beq.n	800c33a <USBD_StdEPReq+0x146>
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	2b80      	cmp	r3, #128	; 0x80
 800c322:	d00a      	beq.n	800c33a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c324:	7bbb      	ldrb	r3, [r7, #14]
 800c326:	4619      	mov	r1, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f001 f957 	bl	800d5dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c32e:	2180      	movs	r1, #128	; 0x80
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 f953 	bl	800d5dc <USBD_LL_StallEP>
 800c336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c338:	e040      	b.n	800c3bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fc3e 	bl	800cbbe <USBD_CtlError>
              break;
 800c342:	e03b      	b.n	800c3bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	885b      	ldrh	r3, [r3, #2]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d136      	bne.n	800c3ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c352:	2b00      	cmp	r3, #0
 800c354:	d004      	beq.n	800c360 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c356:	7bbb      	ldrb	r3, [r7, #14]
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f001 f95d 	bl	800d61a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fcf7 	bl	800cd54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff fde2 	bl	800bf34 <USBD_CoreFindEP>
 800c370:	4603      	mov	r3, r0
 800c372:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c374:	7b7b      	ldrb	r3, [r7, #13]
 800c376:	2bff      	cmp	r3, #255	; 0xff
 800c378:	d01f      	beq.n	800c3ba <USBD_StdEPReq+0x1c6>
 800c37a:	7b7b      	ldrb	r3, [r7, #13]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d11c      	bne.n	800c3ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c380:	7b7a      	ldrb	r2, [r7, #13]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c388:	7b7a      	ldrb	r2, [r7, #13]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	32ae      	adds	r2, #174	; 0xae
 800c38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d010      	beq.n	800c3ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c398:	7b7a      	ldrb	r2, [r7, #13]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	32ae      	adds	r2, #174	; 0xae
 800c39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c3ae:	e004      	b.n	800c3ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fc03 	bl	800cbbe <USBD_CtlError>
              break;
 800c3b8:	e000      	b.n	800c3bc <USBD_StdEPReq+0x1c8>
              break;
 800c3ba:	bf00      	nop
          }
          break;
 800c3bc:	e0ab      	b.n	800c516 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d002      	beq.n	800c3d0 <USBD_StdEPReq+0x1dc>
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d032      	beq.n	800c434 <USBD_StdEPReq+0x240>
 800c3ce:	e097      	b.n	800c500 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3d0:	7bbb      	ldrb	r3, [r7, #14]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d007      	beq.n	800c3e6 <USBD_StdEPReq+0x1f2>
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	2b80      	cmp	r3, #128	; 0x80
 800c3da:	d004      	beq.n	800c3e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fbed 	bl	800cbbe <USBD_CtlError>
                break;
 800c3e4:	e091      	b.n	800c50a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	da0b      	bge.n	800c406 <USBD_StdEPReq+0x212>
 800c3ee:	7bbb      	ldrb	r3, [r7, #14]
 800c3f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	3310      	adds	r3, #16
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	4413      	add	r3, r2
 800c402:	3304      	adds	r3, #4
 800c404:	e00b      	b.n	800c41e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	4413      	add	r3, r2
 800c41c:	3304      	adds	r3, #4
 800c41e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2202      	movs	r2, #2
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fc37 	bl	800cca0 <USBD_CtlSendData>
              break;
 800c432:	e06a      	b.n	800c50a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	da11      	bge.n	800c460 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
 800c43e:	f003 020f 	and.w	r2, r3, #15
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	4613      	mov	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	440b      	add	r3, r1
 800c44e:	3324      	adds	r3, #36	; 0x24
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d117      	bne.n	800c486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fbb0 	bl	800cbbe <USBD_CtlError>
                  break;
 800c45e:	e054      	b.n	800c50a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	f003 020f 	and.w	r2, r3, #15
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	4613      	mov	r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	440b      	add	r3, r1
 800c472:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d104      	bne.n	800c486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fb9d 	bl	800cbbe <USBD_CtlError>
                  break;
 800c484:	e041      	b.n	800c50a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	da0b      	bge.n	800c4a6 <USBD_StdEPReq+0x2b2>
 800c48e:	7bbb      	ldrb	r3, [r7, #14]
 800c490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c494:	4613      	mov	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	3310      	adds	r3, #16
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	e00b      	b.n	800c4be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	3304      	adds	r3, #4
 800c4be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <USBD_StdEPReq+0x2d8>
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	2b80      	cmp	r3, #128	; 0x80
 800c4ca:	d103      	bne.n	800c4d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	e00e      	b.n	800c4f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f001 f8bd 	bl	800d658 <USBD_LL_IsStallEP>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d003      	beq.n	800c4ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	e002      	b.n	800c4f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fbd1 	bl	800cca0 <USBD_CtlSendData>
              break;
 800c4fe:	e004      	b.n	800c50a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fb5b 	bl	800cbbe <USBD_CtlError>
              break;
 800c508:	bf00      	nop
          }
          break;
 800c50a:	e004      	b.n	800c516 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fb55 	bl	800cbbe <USBD_CtlError>
          break;
 800c514:	bf00      	nop
      }
      break;
 800c516:	e005      	b.n	800c524 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fb4f 	bl	800cbbe <USBD_CtlError>
      break;
 800c520:	e000      	b.n	800c524 <USBD_StdEPReq+0x330>
      break;
 800c522:	bf00      	nop
  }

  return ret;
 800c524:	7bfb      	ldrb	r3, [r7, #15]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
	...

0800c530 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	885b      	ldrh	r3, [r3, #2]
 800c54a:	0a1b      	lsrs	r3, r3, #8
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	3b01      	subs	r3, #1
 800c550:	2b06      	cmp	r3, #6
 800c552:	f200 8128 	bhi.w	800c7a6 <USBD_GetDescriptor+0x276>
 800c556:	a201      	add	r2, pc, #4	; (adr r2, 800c55c <USBD_GetDescriptor+0x2c>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c579 	.word	0x0800c579
 800c560:	0800c591 	.word	0x0800c591
 800c564:	0800c5d1 	.word	0x0800c5d1
 800c568:	0800c7a7 	.word	0x0800c7a7
 800c56c:	0800c7a7 	.word	0x0800c7a7
 800c570:	0800c747 	.word	0x0800c747
 800c574:	0800c773 	.word	0x0800c773
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	7c12      	ldrb	r2, [r2, #16]
 800c584:	f107 0108 	add.w	r1, r7, #8
 800c588:	4610      	mov	r0, r2
 800c58a:	4798      	blx	r3
 800c58c:	60f8      	str	r0, [r7, #12]
      break;
 800c58e:	e112      	b.n	800c7b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	7c1b      	ldrb	r3, [r3, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10d      	bne.n	800c5b4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a0:	f107 0208 	add.w	r2, r7, #8
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c5b2:	e100      	b.n	800c7b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5bc:	f107 0208 	add.w	r2, r7, #8
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	4798      	blx	r3
 800c5c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	701a      	strb	r2, [r3, #0]
      break;
 800c5ce:	e0f2      	b.n	800c7b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	885b      	ldrh	r3, [r3, #2]
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	2b05      	cmp	r3, #5
 800c5d8:	f200 80ac 	bhi.w	800c734 <USBD_GetDescriptor+0x204>
 800c5dc:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <USBD_GetDescriptor+0xb4>)
 800c5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e2:	bf00      	nop
 800c5e4:	0800c5fd 	.word	0x0800c5fd
 800c5e8:	0800c631 	.word	0x0800c631
 800c5ec:	0800c665 	.word	0x0800c665
 800c5f0:	0800c699 	.word	0x0800c699
 800c5f4:	0800c6cd 	.word	0x0800c6cd
 800c5f8:	0800c701 	.word	0x0800c701
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00b      	beq.n	800c620 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	7c12      	ldrb	r2, [r2, #16]
 800c614:	f107 0108 	add.w	r1, r7, #8
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c61e:	e091      	b.n	800c744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 facb 	bl	800cbbe <USBD_CtlError>
            err++;
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	3301      	adds	r3, #1
 800c62c:	72fb      	strb	r3, [r7, #11]
          break;
 800c62e:	e089      	b.n	800c744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00b      	beq.n	800c654 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	7c12      	ldrb	r2, [r2, #16]
 800c648:	f107 0108 	add.w	r1, r7, #8
 800c64c:	4610      	mov	r0, r2
 800c64e:	4798      	blx	r3
 800c650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c652:	e077      	b.n	800c744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fab1 	bl	800cbbe <USBD_CtlError>
            err++;
 800c65c:	7afb      	ldrb	r3, [r7, #11]
 800c65e:	3301      	adds	r3, #1
 800c660:	72fb      	strb	r3, [r7, #11]
          break;
 800c662:	e06f      	b.n	800c744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00b      	beq.n	800c688 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	7c12      	ldrb	r2, [r2, #16]
 800c67c:	f107 0108 	add.w	r1, r7, #8
 800c680:	4610      	mov	r0, r2
 800c682:	4798      	blx	r3
 800c684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c686:	e05d      	b.n	800c744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fa97 	bl	800cbbe <USBD_CtlError>
            err++;
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	3301      	adds	r3, #1
 800c694:	72fb      	strb	r3, [r7, #11]
          break;
 800c696:	e055      	b.n	800c744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00b      	beq.n	800c6bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	7c12      	ldrb	r2, [r2, #16]
 800c6b0:	f107 0108 	add.w	r1, r7, #8
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ba:	e043      	b.n	800c744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fa7d 	bl	800cbbe <USBD_CtlError>
            err++;
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ca:	e03b      	b.n	800c744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00b      	beq.n	800c6f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	7c12      	ldrb	r2, [r2, #16]
 800c6e4:	f107 0108 	add.w	r1, r7, #8
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	4798      	blx	r3
 800c6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ee:	e029      	b.n	800c744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa63 	bl	800cbbe <USBD_CtlError>
            err++;
 800c6f8:	7afb      	ldrb	r3, [r7, #11]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c6fe:	e021      	b.n	800c744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00b      	beq.n	800c724 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	7c12      	ldrb	r2, [r2, #16]
 800c718:	f107 0108 	add.w	r1, r7, #8
 800c71c:	4610      	mov	r0, r2
 800c71e:	4798      	blx	r3
 800c720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c722:	e00f      	b.n	800c744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa49 	bl	800cbbe <USBD_CtlError>
            err++;
 800c72c:	7afb      	ldrb	r3, [r7, #11]
 800c72e:	3301      	adds	r3, #1
 800c730:	72fb      	strb	r3, [r7, #11]
          break;
 800c732:	e007      	b.n	800c744 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fa41 	bl	800cbbe <USBD_CtlError>
          err++;
 800c73c:	7afb      	ldrb	r3, [r7, #11]
 800c73e:	3301      	adds	r3, #1
 800c740:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c742:	bf00      	nop
      }
      break;
 800c744:	e037      	b.n	800c7b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	7c1b      	ldrb	r3, [r3, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d109      	bne.n	800c762 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c756:	f107 0208 	add.w	r2, r7, #8
 800c75a:	4610      	mov	r0, r2
 800c75c:	4798      	blx	r3
 800c75e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c760:	e029      	b.n	800c7b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 fa2a 	bl	800cbbe <USBD_CtlError>
        err++;
 800c76a:	7afb      	ldrb	r3, [r7, #11]
 800c76c:	3301      	adds	r3, #1
 800c76e:	72fb      	strb	r3, [r7, #11]
      break;
 800c770:	e021      	b.n	800c7b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7c1b      	ldrb	r3, [r3, #16]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10d      	bne.n	800c796 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c782:	f107 0208 	add.w	r2, r7, #8
 800c786:	4610      	mov	r0, r2
 800c788:	4798      	blx	r3
 800c78a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	3301      	adds	r3, #1
 800c790:	2207      	movs	r2, #7
 800c792:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c794:	e00f      	b.n	800c7b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 fa10 	bl	800cbbe <USBD_CtlError>
        err++;
 800c79e:	7afb      	ldrb	r3, [r7, #11]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c7a4:	e007      	b.n	800c7b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fa08 	bl	800cbbe <USBD_CtlError>
      err++;
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c7b4:	bf00      	nop
  }

  if (err != 0U)
 800c7b6:	7afb      	ldrb	r3, [r7, #11]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d11e      	bne.n	800c7fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	88db      	ldrh	r3, [r3, #6]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d016      	beq.n	800c7f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c7c4:	893b      	ldrh	r3, [r7, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00e      	beq.n	800c7e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	88da      	ldrh	r2, [r3, #6]
 800c7ce:	893b      	ldrh	r3, [r7, #8]
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	bf28      	it	cs
 800c7d4:	4613      	movcs	r3, r2
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7da:	893b      	ldrh	r3, [r7, #8]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	68f9      	ldr	r1, [r7, #12]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fa5d 	bl	800cca0 <USBD_CtlSendData>
 800c7e6:	e009      	b.n	800c7fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f9e7 	bl	800cbbe <USBD_CtlError>
 800c7f0:	e004      	b.n	800c7fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 faae 	bl	800cd54 <USBD_CtlSendStatus>
 800c7f8:	e000      	b.n	800c7fc <USBD_GetDescriptor+0x2cc>
    return;
 800c7fa:	bf00      	nop
  }
}
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop

0800c804 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	889b      	ldrh	r3, [r3, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d131      	bne.n	800c87a <USBD_SetAddress+0x76>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	88db      	ldrh	r3, [r3, #6]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d12d      	bne.n	800c87a <USBD_SetAddress+0x76>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	885b      	ldrh	r3, [r3, #2]
 800c822:	2b7f      	cmp	r3, #127	; 0x7f
 800c824:	d829      	bhi.n	800c87a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	885b      	ldrh	r3, [r3, #2]
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c830:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b03      	cmp	r3, #3
 800c83c:	d104      	bne.n	800c848 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 f9bc 	bl	800cbbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c846:	e01d      	b.n	800c884 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7bfa      	ldrb	r2, [r7, #15]
 800c84c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 ff2b 	bl	800d6b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fa7a 	bl	800cd54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d004      	beq.n	800c870 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2202      	movs	r2, #2
 800c86a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c86e:	e009      	b.n	800c884 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c878:	e004      	b.n	800c884 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 f99e 	bl	800cbbe <USBD_CtlError>
  }
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	3710      	adds	r7, #16
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	885b      	ldrh	r3, [r3, #2]
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	4b4e      	ldr	r3, [pc, #312]	; (800c9dc <USBD_SetConfig+0x150>)
 800c8a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8a4:	4b4d      	ldr	r3, [pc, #308]	; (800c9dc <USBD_SetConfig+0x150>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d905      	bls.n	800c8b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f985 	bl	800cbbe <USBD_CtlError>
    return USBD_FAIL;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e08c      	b.n	800c9d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d002      	beq.n	800c8ca <USBD_SetConfig+0x3e>
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d029      	beq.n	800c91c <USBD_SetConfig+0x90>
 800c8c8:	e075      	b.n	800c9b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c8ca:	4b44      	ldr	r3, [pc, #272]	; (800c9dc <USBD_SetConfig+0x150>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d020      	beq.n	800c914 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c8d2:	4b42      	ldr	r3, [pc, #264]	; (800c9dc <USBD_SetConfig+0x150>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8dc:	4b3f      	ldr	r3, [pc, #252]	; (800c9dc <USBD_SetConfig+0x150>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7fe ffe1 	bl	800b8aa <USBD_SetClassConfig>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d008      	beq.n	800c904 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 f962 	bl	800cbbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c902:	e065      	b.n	800c9d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fa25 	bl	800cd54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2203      	movs	r2, #3
 800c90e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c912:	e05d      	b.n	800c9d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fa1d 	bl	800cd54 <USBD_CtlSendStatus>
      break;
 800c91a:	e059      	b.n	800c9d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c91c:	4b2f      	ldr	r3, [pc, #188]	; (800c9dc <USBD_SetConfig+0x150>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d112      	bne.n	800c94a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2202      	movs	r2, #2
 800c928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c92c:	4b2b      	ldr	r3, [pc, #172]	; (800c9dc <USBD_SetConfig+0x150>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	461a      	mov	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c936:	4b29      	ldr	r3, [pc, #164]	; (800c9dc <USBD_SetConfig+0x150>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7fe ffd0 	bl	800b8e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fa06 	bl	800cd54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c948:	e042      	b.n	800c9d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c94a:	4b24      	ldr	r3, [pc, #144]	; (800c9dc <USBD_SetConfig+0x150>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	429a      	cmp	r2, r3
 800c956:	d02a      	beq.n	800c9ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7fe ffbe 	bl	800b8e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c966:	4b1d      	ldr	r3, [pc, #116]	; (800c9dc <USBD_SetConfig+0x150>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c970:	4b1a      	ldr	r3, [pc, #104]	; (800c9dc <USBD_SetConfig+0x150>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7fe ff97 	bl	800b8aa <USBD_SetClassConfig>
 800c97c:	4603      	mov	r3, r0
 800c97e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00f      	beq.n	800c9a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 f918 	bl	800cbbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7fe ffa3 	bl	800b8e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2202      	movs	r2, #2
 800c9a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c9a4:	e014      	b.n	800c9d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f9d4 	bl	800cd54 <USBD_CtlSendStatus>
      break;
 800c9ac:	e010      	b.n	800c9d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f9d0 	bl	800cd54 <USBD_CtlSendStatus>
      break;
 800c9b4:	e00c      	b.n	800c9d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f900 	bl	800cbbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9be:	4b07      	ldr	r3, [pc, #28]	; (800c9dc <USBD_SetConfig+0x150>)
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7fe ff8c 	bl	800b8e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c9ce:	bf00      	nop
  }

  return ret;
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	24000c50 	.word	0x24000c50

0800c9e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	88db      	ldrh	r3, [r3, #6]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d004      	beq.n	800c9fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f8e2 	bl	800cbbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c9fa:	e023      	b.n	800ca44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	dc02      	bgt.n	800ca0e <USBD_GetConfig+0x2e>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	dc03      	bgt.n	800ca14 <USBD_GetConfig+0x34>
 800ca0c:	e015      	b.n	800ca3a <USBD_GetConfig+0x5a>
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d00b      	beq.n	800ca2a <USBD_GetConfig+0x4a>
 800ca12:	e012      	b.n	800ca3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	2201      	movs	r2, #1
 800ca20:	4619      	mov	r1, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f93c 	bl	800cca0 <USBD_CtlSendData>
        break;
 800ca28:	e00c      	b.n	800ca44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	2201      	movs	r2, #1
 800ca30:	4619      	mov	r1, r3
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f934 	bl	800cca0 <USBD_CtlSendData>
        break;
 800ca38:	e004      	b.n	800ca44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f8be 	bl	800cbbe <USBD_CtlError>
        break;
 800ca42:	bf00      	nop
}
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d81e      	bhi.n	800caa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	88db      	ldrh	r3, [r3, #6]
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d004      	beq.n	800ca76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f8a5 	bl	800cbbe <USBD_CtlError>
        break;
 800ca74:	e01a      	b.n	800caac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d005      	beq.n	800ca92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	f043 0202 	orr.w	r2, r3, #2
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	330c      	adds	r3, #12
 800ca96:	2202      	movs	r2, #2
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f900 	bl	800cca0 <USBD_CtlSendData>
      break;
 800caa0:	e004      	b.n	800caac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f88a 	bl	800cbbe <USBD_CtlError>
      break;
 800caaa:	bf00      	nop
  }
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	885b      	ldrh	r3, [r3, #2]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d107      	bne.n	800cad6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f940 	bl	800cd54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cad4:	e013      	b.n	800cafe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	885b      	ldrh	r3, [r3, #2]
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d10b      	bne.n	800caf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	889b      	ldrh	r3, [r3, #4]
 800cae2:	0a1b      	lsrs	r3, r3, #8
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f930 	bl	800cd54 <USBD_CtlSendStatus>
}
 800caf4:	e003      	b.n	800cafe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f860 	bl	800cbbe <USBD_CtlError>
}
 800cafe:	bf00      	nop
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b082      	sub	sp, #8
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d80b      	bhi.n	800cb36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	885b      	ldrh	r3, [r3, #2]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d10c      	bne.n	800cb40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f910 	bl	800cd54 <USBD_CtlSendStatus>
      }
      break;
 800cb34:	e004      	b.n	800cb40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb36:	6839      	ldr	r1, [r7, #0]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f840 	bl	800cbbe <USBD_CtlError>
      break;
 800cb3e:	e000      	b.n	800cb42 <USBD_ClrFeature+0x3c>
      break;
 800cb40:	bf00      	nop
  }
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	781a      	ldrb	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3301      	adds	r3, #1
 800cb64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	781a      	ldrb	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3301      	adds	r3, #1
 800cb72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f7ff fa41 	bl	800bffc <SWAPBYTE>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3301      	adds	r3, #1
 800cb86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f7ff fa34 	bl	800bffc <SWAPBYTE>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3301      	adds	r3, #1
 800cba6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f7ff fa27 	bl	800bffc <SWAPBYTE>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	80da      	strh	r2, [r3, #6]
}
 800cbb6:	bf00      	nop
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbc8:	2180      	movs	r1, #128	; 0x80
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fd06 	bl	800d5dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fd02 	bl	800d5dc <USBD_LL_StallEP>
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cbec:	2300      	movs	r3, #0
 800cbee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d036      	beq.n	800cc64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cbfa:	6938      	ldr	r0, [r7, #16]
 800cbfc:	f000 f836 	bl	800cc6c <USBD_GetLen>
 800cc00:	4603      	mov	r3, r0
 800cc02:	3301      	adds	r3, #1
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	4413      	add	r3, r2
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	7812      	ldrb	r2, [r2, #0]
 800cc18:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc20:	7dfb      	ldrb	r3, [r7, #23]
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	4413      	add	r3, r2
 800cc26:	2203      	movs	r2, #3
 800cc28:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc30:	e013      	b.n	800cc5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	4413      	add	r3, r2
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	7812      	ldrb	r2, [r2, #0]
 800cc3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	3301      	adds	r3, #1
 800cc42:	613b      	str	r3, [r7, #16]
    idx++;
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
 800cc46:	3301      	adds	r3, #1
 800cc48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	4413      	add	r3, r2
 800cc50:	2200      	movs	r2, #0
 800cc52:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	3301      	adds	r3, #1
 800cc58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1e7      	bne.n	800cc32 <USBD_GetString+0x52>
 800cc62:	e000      	b.n	800cc66 <USBD_GetString+0x86>
    return;
 800cc64:	bf00      	nop
  }
}
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc7c:	e005      	b.n	800cc8a <USBD_GetLen+0x1e>
  {
    len++;
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	3301      	adds	r3, #1
 800cc82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	3301      	adds	r3, #1
 800cc88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1f5      	bne.n	800cc7e <USBD_GetLen+0x12>
  }

  return len;
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f000 fd11 	bl	800d6ee <USBD_LL_Transmit>

  return USBD_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b084      	sub	sp, #16
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	60b9      	str	r1, [r7, #8]
 800cce0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	2100      	movs	r1, #0
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f000 fd00 	bl	800d6ee <USBD_LL_Transmit>

  return USBD_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2203      	movs	r2, #3
 800cd08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	2100      	movs	r1, #0
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f000 fd04 	bl	800d730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b084      	sub	sp, #16
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	60f8      	str	r0, [r7, #12]
 800cd3a:	60b9      	str	r1, [r7, #8]
 800cd3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	2100      	movs	r1, #0
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 fcf3 	bl	800d730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2204      	movs	r2, #4
 800cd60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd64:	2300      	movs	r3, #0
 800cd66:	2200      	movs	r2, #0
 800cd68:	2100      	movs	r1, #0
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fcbf 	bl	800d6ee <USBD_LL_Transmit>

  return USBD_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2205      	movs	r2, #5
 800cd86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2100      	movs	r1, #0
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fccd 	bl	800d730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cda4:	2200      	movs	r2, #0
 800cda6:	4913      	ldr	r1, [pc, #76]	; (800cdf4 <MX_USB_DEVICE_Init+0x54>)
 800cda8:	4813      	ldr	r0, [pc, #76]	; (800cdf8 <MX_USB_DEVICE_Init+0x58>)
 800cdaa:	f7fe fd01 	bl	800b7b0 <USBD_Init>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cdb4:	f7f4 f9af 	bl	8001116 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cdb8:	4910      	ldr	r1, [pc, #64]	; (800cdfc <MX_USB_DEVICE_Init+0x5c>)
 800cdba:	480f      	ldr	r0, [pc, #60]	; (800cdf8 <MX_USB_DEVICE_Init+0x58>)
 800cdbc:	f7fe fd28 	bl	800b810 <USBD_RegisterClass>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cdc6:	f7f4 f9a6 	bl	8001116 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cdca:	490d      	ldr	r1, [pc, #52]	; (800ce00 <MX_USB_DEVICE_Init+0x60>)
 800cdcc:	480a      	ldr	r0, [pc, #40]	; (800cdf8 <MX_USB_DEVICE_Init+0x58>)
 800cdce:	f7fe fc1f 	bl	800b610 <USBD_CDC_RegisterInterface>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cdd8:	f7f4 f99d 	bl	8001116 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cddc:	4806      	ldr	r0, [pc, #24]	; (800cdf8 <MX_USB_DEVICE_Init+0x58>)
 800cdde:	f7fe fd4d 	bl	800b87c <USBD_Start>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cde8:	f7f4 f995 	bl	8001116 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cdec:	f7f8 f9ca 	bl	8005184 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cdf0:	bf00      	nop
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	240000b0 	.word	0x240000b0
 800cdf8:	24000c54 	.word	0x24000c54
 800cdfc:	2400001c 	.word	0x2400001c
 800ce00:	2400009c 	.word	0x2400009c

0800ce04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce08:	2200      	movs	r2, #0
 800ce0a:	4905      	ldr	r1, [pc, #20]	; (800ce20 <CDC_Init_FS+0x1c>)
 800ce0c:	4805      	ldr	r0, [pc, #20]	; (800ce24 <CDC_Init_FS+0x20>)
 800ce0e:	f7fe fc19 	bl	800b644 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce12:	4905      	ldr	r1, [pc, #20]	; (800ce28 <CDC_Init_FS+0x24>)
 800ce14:	4803      	ldr	r0, [pc, #12]	; (800ce24 <CDC_Init_FS+0x20>)
 800ce16:	f7fe fc37 	bl	800b688 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	24001730 	.word	0x24001730
 800ce24:	24000c54 	.word	0x24000c54
 800ce28:	24000f30 	.word	0x24000f30

0800ce2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	4603      	mov	r3, r0
 800ce44:	6039      	str	r1, [r7, #0]
 800ce46:	71fb      	strb	r3, [r7, #7]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	2b23      	cmp	r3, #35	; 0x23
 800ce50:	d84a      	bhi.n	800cee8 <CDC_Control_FS+0xac>
 800ce52:	a201      	add	r2, pc, #4	; (adr r2, 800ce58 <CDC_Control_FS+0x1c>)
 800ce54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce58:	0800cee9 	.word	0x0800cee9
 800ce5c:	0800cee9 	.word	0x0800cee9
 800ce60:	0800cee9 	.word	0x0800cee9
 800ce64:	0800cee9 	.word	0x0800cee9
 800ce68:	0800cee9 	.word	0x0800cee9
 800ce6c:	0800cee9 	.word	0x0800cee9
 800ce70:	0800cee9 	.word	0x0800cee9
 800ce74:	0800cee9 	.word	0x0800cee9
 800ce78:	0800cee9 	.word	0x0800cee9
 800ce7c:	0800cee9 	.word	0x0800cee9
 800ce80:	0800cee9 	.word	0x0800cee9
 800ce84:	0800cee9 	.word	0x0800cee9
 800ce88:	0800cee9 	.word	0x0800cee9
 800ce8c:	0800cee9 	.word	0x0800cee9
 800ce90:	0800cee9 	.word	0x0800cee9
 800ce94:	0800cee9 	.word	0x0800cee9
 800ce98:	0800cee9 	.word	0x0800cee9
 800ce9c:	0800cee9 	.word	0x0800cee9
 800cea0:	0800cee9 	.word	0x0800cee9
 800cea4:	0800cee9 	.word	0x0800cee9
 800cea8:	0800cee9 	.word	0x0800cee9
 800ceac:	0800cee9 	.word	0x0800cee9
 800ceb0:	0800cee9 	.word	0x0800cee9
 800ceb4:	0800cee9 	.word	0x0800cee9
 800ceb8:	0800cee9 	.word	0x0800cee9
 800cebc:	0800cee9 	.word	0x0800cee9
 800cec0:	0800cee9 	.word	0x0800cee9
 800cec4:	0800cee9 	.word	0x0800cee9
 800cec8:	0800cee9 	.word	0x0800cee9
 800cecc:	0800cee9 	.word	0x0800cee9
 800ced0:	0800cee9 	.word	0x0800cee9
 800ced4:	0800cee9 	.word	0x0800cee9
 800ced8:	0800cee9 	.word	0x0800cee9
 800cedc:	0800cee9 	.word	0x0800cee9
 800cee0:	0800cee9 	.word	0x0800cee9
 800cee4:	0800cee9 	.word	0x0800cee9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cee8:	bf00      	nop
  }

  return (USBD_OK);
 800ceea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	4805      	ldr	r0, [pc, #20]	; (800cf1c <CDC_Receive_FS+0x24>)
 800cf06:	f7fe fbbf 	bl	800b688 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf0a:	4804      	ldr	r0, [pc, #16]	; (800cf1c <CDC_Receive_FS+0x24>)
 800cf0c:	f7fe fc1a 	bl	800b744 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	24000c54 	.word	0x24000c54

0800cf20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf30:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <CDC_Transmit_FS+0x48>)
 800cf32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf42:	2301      	movs	r3, #1
 800cf44:	e00b      	b.n	800cf5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf46:	887b      	ldrh	r3, [r7, #2]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	4806      	ldr	r0, [pc, #24]	; (800cf68 <CDC_Transmit_FS+0x48>)
 800cf4e:	f7fe fb79 	bl	800b644 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf52:	4805      	ldr	r0, [pc, #20]	; (800cf68 <CDC_Transmit_FS+0x48>)
 800cf54:	f7fe fbb6 	bl	800b6c4 <USBD_CDC_TransmitPacket>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	24000c54 	.word	0x24000c54

0800cf6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	4613      	mov	r3, r2
 800cf78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cf7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
	...

0800cf90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	4603      	mov	r3, r0
 800cf98:	6039      	str	r1, [r7, #0]
 800cf9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2212      	movs	r2, #18
 800cfa0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cfa2:	4b03      	ldr	r3, [pc, #12]	; (800cfb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr
 800cfb0:	240000cc 	.word	0x240000cc

0800cfb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4603      	mov	r3, r0
 800cfbc:	6039      	str	r1, [r7, #0]
 800cfbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2204      	movs	r2, #4
 800cfc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfc6:	4b03      	ldr	r3, [pc, #12]	; (800cfd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	240000e0 	.word	0x240000e0

0800cfd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	6039      	str	r1, [r7, #0]
 800cfe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfe4:	79fb      	ldrb	r3, [r7, #7]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d105      	bne.n	800cff6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	4907      	ldr	r1, [pc, #28]	; (800d00c <USBD_FS_ProductStrDescriptor+0x34>)
 800cfee:	4808      	ldr	r0, [pc, #32]	; (800d010 <USBD_FS_ProductStrDescriptor+0x38>)
 800cff0:	f7ff fdf6 	bl	800cbe0 <USBD_GetString>
 800cff4:	e004      	b.n	800d000 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	4904      	ldr	r1, [pc, #16]	; (800d00c <USBD_FS_ProductStrDescriptor+0x34>)
 800cffa:	4805      	ldr	r0, [pc, #20]	; (800d010 <USBD_FS_ProductStrDescriptor+0x38>)
 800cffc:	f7ff fdf0 	bl	800cbe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d000:	4b02      	ldr	r3, [pc, #8]	; (800d00c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	24001f30 	.word	0x24001f30
 800d010:	08016388 	.word	0x08016388

0800d014 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	6039      	str	r1, [r7, #0]
 800d01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	4904      	ldr	r1, [pc, #16]	; (800d034 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d024:	4804      	ldr	r0, [pc, #16]	; (800d038 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d026:	f7ff fddb 	bl	800cbe0 <USBD_GetString>
  return USBD_StrDesc;
 800d02a:	4b02      	ldr	r3, [pc, #8]	; (800d034 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	24001f30 	.word	0x24001f30
 800d038:	080163a0 	.word	0x080163a0

0800d03c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	6039      	str	r1, [r7, #0]
 800d046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	221a      	movs	r2, #26
 800d04c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d04e:	f000 f843 	bl	800d0d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d052:	4b02      	ldr	r3, [pc, #8]	; (800d05c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d054:	4618      	mov	r0, r3
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	240000e4 	.word	0x240000e4

0800d060 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	6039      	str	r1, [r7, #0]
 800d06a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d105      	bne.n	800d07e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	4907      	ldr	r1, [pc, #28]	; (800d094 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d076:	4808      	ldr	r0, [pc, #32]	; (800d098 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d078:	f7ff fdb2 	bl	800cbe0 <USBD_GetString>
 800d07c:	e004      	b.n	800d088 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	4904      	ldr	r1, [pc, #16]	; (800d094 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d082:	4805      	ldr	r0, [pc, #20]	; (800d098 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d084:	f7ff fdac 	bl	800cbe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d088:	4b02      	ldr	r3, [pc, #8]	; (800d094 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	24001f30 	.word	0x24001f30
 800d098:	080163b4 	.word	0x080163b4

0800d09c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	6039      	str	r1, [r7, #0]
 800d0a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d105      	bne.n	800d0ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	4907      	ldr	r1, [pc, #28]	; (800d0d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0b2:	4808      	ldr	r0, [pc, #32]	; (800d0d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0b4:	f7ff fd94 	bl	800cbe0 <USBD_GetString>
 800d0b8:	e004      	b.n	800d0c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	4904      	ldr	r1, [pc, #16]	; (800d0d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0be:	4805      	ldr	r0, [pc, #20]	; (800d0d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0c0:	f7ff fd8e 	bl	800cbe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0c4:	4b02      	ldr	r3, [pc, #8]	; (800d0d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	24001f30 	.word	0x24001f30
 800d0d4:	080163c0 	.word	0x080163c0

0800d0d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0de:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <Get_SerialNum+0x44>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0e4:	4b0e      	ldr	r3, [pc, #56]	; (800d120 <Get_SerialNum+0x48>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0ea:	4b0e      	ldr	r3, [pc, #56]	; (800d124 <Get_SerialNum+0x4c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d009      	beq.n	800d112 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0fe:	2208      	movs	r2, #8
 800d100:	4909      	ldr	r1, [pc, #36]	; (800d128 <Get_SerialNum+0x50>)
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f000 f814 	bl	800d130 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d108:	2204      	movs	r2, #4
 800d10a:	4908      	ldr	r1, [pc, #32]	; (800d12c <Get_SerialNum+0x54>)
 800d10c:	68b8      	ldr	r0, [r7, #8]
 800d10e:	f000 f80f 	bl	800d130 <IntToUnicode>
  }
}
 800d112:	bf00      	nop
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	1ff1e800 	.word	0x1ff1e800
 800d120:	1ff1e804 	.word	0x1ff1e804
 800d124:	1ff1e808 	.word	0x1ff1e808
 800d128:	240000e6 	.word	0x240000e6
 800d12c:	240000f6 	.word	0x240000f6

0800d130 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d130:	b480      	push	{r7}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4613      	mov	r3, r2
 800d13c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d142:	2300      	movs	r3, #0
 800d144:	75fb      	strb	r3, [r7, #23]
 800d146:	e027      	b.n	800d198 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	0f1b      	lsrs	r3, r3, #28
 800d14c:	2b09      	cmp	r3, #9
 800d14e:	d80b      	bhi.n	800d168 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	0f1b      	lsrs	r3, r3, #28
 800d154:	b2da      	uxtb	r2, r3
 800d156:	7dfb      	ldrb	r3, [r7, #23]
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	4619      	mov	r1, r3
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	440b      	add	r3, r1
 800d160:	3230      	adds	r2, #48	; 0x30
 800d162:	b2d2      	uxtb	r2, r2
 800d164:	701a      	strb	r2, [r3, #0]
 800d166:	e00a      	b.n	800d17e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	0f1b      	lsrs	r3, r3, #28
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	4619      	mov	r1, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	440b      	add	r3, r1
 800d178:	3237      	adds	r2, #55	; 0x37
 800d17a:	b2d2      	uxtb	r2, r2
 800d17c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	011b      	lsls	r3, r3, #4
 800d182:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d184:	7dfb      	ldrb	r3, [r7, #23]
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	3301      	adds	r3, #1
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	4413      	add	r3, r2
 800d18e:	2200      	movs	r2, #0
 800d190:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d192:	7dfb      	ldrb	r3, [r7, #23]
 800d194:	3301      	adds	r3, #1
 800d196:	75fb      	strb	r3, [r7, #23]
 800d198:	7dfa      	ldrb	r2, [r7, #23]
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d3d3      	bcc.n	800d148 <IntToUnicode+0x18>
  }
}
 800d1a0:	bf00      	nop
 800d1a2:	bf00      	nop
 800d1a4:	371c      	adds	r7, #28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
	...

0800d1b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b0ba      	sub	sp, #232	; 0xe8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]
 800d1c0:	605a      	str	r2, [r3, #4]
 800d1c2:	609a      	str	r2, [r3, #8]
 800d1c4:	60da      	str	r2, [r3, #12]
 800d1c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d1c8:	f107 0310 	add.w	r3, r7, #16
 800d1cc:	22c0      	movs	r2, #192	; 0xc0
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f007 fb09 	bl	80147e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a2c      	ldr	r2, [pc, #176]	; (800d28c <HAL_PCD_MspInit+0xdc>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d151      	bne.n	800d284 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d1e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d1e4:	f04f 0300 	mov.w	r3, #0
 800d1e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d1ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d1f4:	f107 0310 	add.w	r3, r7, #16
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7f9 fc53 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800d204:	f7f3 ff87 	bl	8001116 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d208:	f7f7 ffbc 	bl	8005184 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d20c:	4b20      	ldr	r3, [pc, #128]	; (800d290 <HAL_PCD_MspInit+0xe0>)
 800d20e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <HAL_PCD_MspInit+0xe0>)
 800d214:	f043 0301 	orr.w	r3, r3, #1
 800d218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d21c:	4b1c      	ldr	r3, [pc, #112]	; (800d290 <HAL_PCD_MspInit+0xe0>)
 800d21e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d222:	f003 0301 	and.w	r3, r3, #1
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800d22a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d22e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d232:	2302      	movs	r3, #2
 800d234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d238:	2300      	movs	r3, #0
 800d23a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d23e:	2300      	movs	r3, #0
 800d240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d244:	230a      	movs	r3, #10
 800d246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d24a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d24e:	4619      	mov	r1, r3
 800d250:	4810      	ldr	r0, [pc, #64]	; (800d294 <HAL_PCD_MspInit+0xe4>)
 800d252:	f7f6 fadb 	bl	800380c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d256:	4b0e      	ldr	r3, [pc, #56]	; (800d290 <HAL_PCD_MspInit+0xe0>)
 800d258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d25c:	4a0c      	ldr	r2, [pc, #48]	; (800d290 <HAL_PCD_MspInit+0xe0>)
 800d25e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d262:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d266:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <HAL_PCD_MspInit+0xe0>)
 800d268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d26c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d270:	60bb      	str	r3, [r7, #8]
 800d272:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d274:	2200      	movs	r2, #0
 800d276:	2100      	movs	r1, #0
 800d278:	2065      	movs	r0, #101	; 0x65
 800d27a:	f7f6 f924 	bl	80034c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d27e:	2065      	movs	r0, #101	; 0x65
 800d280:	f7f6 f93b 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d284:	bf00      	nop
 800d286:	37e8      	adds	r7, #232	; 0xe8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	40080000 	.word	0x40080000
 800d290:	58024400 	.word	0x58024400
 800d294:	58020000 	.word	0x58020000

0800d298 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4610      	mov	r0, r2
 800d2b0:	f7fe fb31 	bl	800b916 <USBD_LL_SetupStage>
}
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d2ce:	78fa      	ldrb	r2, [r7, #3]
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	00db      	lsls	r3, r3, #3
 800d2d6:	4413      	add	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	440b      	add	r3, r1
 800d2dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	78fb      	ldrb	r3, [r7, #3]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	f7fe fb6b 	bl	800b9c0 <USBD_LL_DataOutStage>
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d304:	78fa      	ldrb	r2, [r7, #3]
 800d306:	6879      	ldr	r1, [r7, #4]
 800d308:	4613      	mov	r3, r2
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	4413      	add	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	440b      	add	r3, r1
 800d312:	3348      	adds	r3, #72	; 0x48
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	78fb      	ldrb	r3, [r7, #3]
 800d318:	4619      	mov	r1, r3
 800d31a:	f7fe fc04 	bl	800bb26 <USBD_LL_DataInStage>
}
 800d31e:	bf00      	nop
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b082      	sub	sp, #8
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe fd3e 	bl	800bdb6 <USBD_LL_SOF>
}
 800d33a:	bf00      	nop
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d34a:	2301      	movs	r3, #1
 800d34c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d102      	bne.n	800d35c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
 800d35a:	e008      	b.n	800d36e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	2b02      	cmp	r3, #2
 800d362:	d102      	bne.n	800d36a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d364:	2301      	movs	r3, #1
 800d366:	73fb      	strb	r3, [r7, #15]
 800d368:	e001      	b.n	800d36e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d36a:	f7f3 fed4 	bl	8001116 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d374:	7bfa      	ldrb	r2, [r7, #15]
 800d376:	4611      	mov	r1, r2
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fe fcd8 	bl	800bd2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe fc80 	bl	800bc8a <USBD_LL_Reset>
}
 800d38a:	bf00      	nop
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
	...

0800d394 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe fcd3 	bl	800bd4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	6812      	ldr	r2, [r2, #0]
 800d3b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3ba:	f043 0301 	orr.w	r3, r3, #1
 800d3be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a1b      	ldr	r3, [r3, #32]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d005      	beq.n	800d3d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3c8:	4b04      	ldr	r3, [pc, #16]	; (800d3dc <HAL_PCD_SuspendCallback+0x48>)
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	4a03      	ldr	r2, [pc, #12]	; (800d3dc <HAL_PCD_SuspendCallback+0x48>)
 800d3ce:	f043 0306 	orr.w	r3, r3, #6
 800d3d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	e000ed00 	.word	0xe000ed00

0800d3e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fe fcc9 	bl	800bd86 <USBD_LL_Resume>
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d40e:	78fa      	ldrb	r2, [r7, #3]
 800d410:	4611      	mov	r1, r2
 800d412:	4618      	mov	r0, r3
 800d414:	f7fe fd21 	bl	800be5a <USBD_LL_IsoOUTIncomplete>
}
 800d418:	bf00      	nop
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	460b      	mov	r3, r1
 800d42a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d432:	78fa      	ldrb	r2, [r7, #3]
 800d434:	4611      	mov	r1, r2
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe fcdd 	bl	800bdf6 <USBD_LL_IsoINIncomplete>
}
 800d43c:	bf00      	nop
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fd33 	bl	800bebe <USBD_LL_DevConnected>
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fe fd30 	bl	800bed4 <USBD_LL_DevDisconnected>
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d13e      	bne.n	800d50a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d48c:	4a21      	ldr	r2, [pc, #132]	; (800d514 <USBD_LL_Init+0x98>)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a1f      	ldr	r2, [pc, #124]	; (800d514 <USBD_LL_Init+0x98>)
 800d498:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d49c:	4b1d      	ldr	r3, [pc, #116]	; (800d514 <USBD_LL_Init+0x98>)
 800d49e:	4a1e      	ldr	r2, [pc, #120]	; (800d518 <USBD_LL_Init+0x9c>)
 800d4a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d4a2:	4b1c      	ldr	r3, [pc, #112]	; (800d514 <USBD_LL_Init+0x98>)
 800d4a4:	2209      	movs	r2, #9
 800d4a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d4a8:	4b1a      	ldr	r3, [pc, #104]	; (800d514 <USBD_LL_Init+0x98>)
 800d4aa:	2202      	movs	r2, #2
 800d4ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4ae:	4b19      	ldr	r3, [pc, #100]	; (800d514 <USBD_LL_Init+0x98>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d4b4:	4b17      	ldr	r3, [pc, #92]	; (800d514 <USBD_LL_Init+0x98>)
 800d4b6:	2202      	movs	r2, #2
 800d4b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4ba:	4b16      	ldr	r3, [pc, #88]	; (800d514 <USBD_LL_Init+0x98>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d4c0:	4b14      	ldr	r3, [pc, #80]	; (800d514 <USBD_LL_Init+0x98>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d4c6:	4b13      	ldr	r3, [pc, #76]	; (800d514 <USBD_LL_Init+0x98>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d4cc:	4b11      	ldr	r3, [pc, #68]	; (800d514 <USBD_LL_Init+0x98>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d4d2:	4b10      	ldr	r3, [pc, #64]	; (800d514 <USBD_LL_Init+0x98>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d4d8:	4b0e      	ldr	r3, [pc, #56]	; (800d514 <USBD_LL_Init+0x98>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d4de:	480d      	ldr	r0, [pc, #52]	; (800d514 <USBD_LL_Init+0x98>)
 800d4e0:	f7f6 fb5d 	bl	8003b9e <HAL_PCD_Init>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d4ea:	f7f3 fe14 	bl	8001116 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d4ee:	2180      	movs	r1, #128	; 0x80
 800d4f0:	4808      	ldr	r0, [pc, #32]	; (800d514 <USBD_LL_Init+0x98>)
 800d4f2:	f7f7 fdcc 	bl	800508e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d4f6:	2240      	movs	r2, #64	; 0x40
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	4806      	ldr	r0, [pc, #24]	; (800d514 <USBD_LL_Init+0x98>)
 800d4fc:	f7f7 fd80 	bl	8005000 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d500:	2280      	movs	r2, #128	; 0x80
 800d502:	2101      	movs	r1, #1
 800d504:	4803      	ldr	r0, [pc, #12]	; (800d514 <USBD_LL_Init+0x98>)
 800d506:	f7f7 fd7b 	bl	8005000 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	24002130 	.word	0x24002130
 800d518:	40080000 	.word	0x40080000

0800d51c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d532:	4618      	mov	r0, r3
 800d534:	f7f6 fc57 	bl	8003de6 <HAL_PCD_Start>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 f942 	bl	800d7c8 <USBD_Get_USB_Status>
 800d544:	4603      	mov	r3, r0
 800d546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d548:	7bbb      	ldrb	r3, [r7, #14]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b084      	sub	sp, #16
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	4608      	mov	r0, r1
 800d55c:	4611      	mov	r1, r2
 800d55e:	461a      	mov	r2, r3
 800d560:	4603      	mov	r3, r0
 800d562:	70fb      	strb	r3, [r7, #3]
 800d564:	460b      	mov	r3, r1
 800d566:	70bb      	strb	r3, [r7, #2]
 800d568:	4613      	mov	r3, r2
 800d56a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d57a:	78bb      	ldrb	r3, [r7, #2]
 800d57c:	883a      	ldrh	r2, [r7, #0]
 800d57e:	78f9      	ldrb	r1, [r7, #3]
 800d580:	f7f7 f957 	bl	8004832 <HAL_PCD_EP_Open>
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d588:	7bfb      	ldrb	r3, [r7, #15]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f000 f91c 	bl	800d7c8 <USBD_Get_USB_Status>
 800d590:	4603      	mov	r3, r0
 800d592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d594:	7bbb      	ldrb	r3, [r7, #14]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b084      	sub	sp, #16
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5b8:	78fa      	ldrb	r2, [r7, #3]
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f7 f9a0 	bl	8004902 <HAL_PCD_EP_Close>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5c6:	7bfb      	ldrb	r3, [r7, #15]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 f8fd 	bl	800d7c8 <USBD_Get_USB_Status>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5f6:	78fa      	ldrb	r2, [r7, #3]
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7f7 fa5a 	bl	8004ab4 <HAL_PCD_EP_SetStall>
 800d600:	4603      	mov	r3, r0
 800d602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d604:	7bfb      	ldrb	r3, [r7, #15]
 800d606:	4618      	mov	r0, r3
 800d608:	f000 f8de 	bl	800d7c8 <USBD_Get_USB_Status>
 800d60c:	4603      	mov	r3, r0
 800d60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d610:	7bbb      	ldrb	r3, [r7, #14]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	460b      	mov	r3, r1
 800d624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d634:	78fa      	ldrb	r2, [r7, #3]
 800d636:	4611      	mov	r1, r2
 800d638:	4618      	mov	r0, r3
 800d63a:	f7f7 fa9f 	bl	8004b7c <HAL_PCD_EP_ClrStall>
 800d63e:	4603      	mov	r3, r0
 800d640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d642:	7bfb      	ldrb	r3, [r7, #15]
 800d644:	4618      	mov	r0, r3
 800d646:	f000 f8bf 	bl	800d7c8 <USBD_Get_USB_Status>
 800d64a:	4603      	mov	r3, r0
 800d64c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d64e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d66a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d66c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d670:	2b00      	cmp	r3, #0
 800d672:	da0b      	bge.n	800d68c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d674:	78fb      	ldrb	r3, [r7, #3]
 800d676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d67a:	68f9      	ldr	r1, [r7, #12]
 800d67c:	4613      	mov	r3, r2
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	4413      	add	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	440b      	add	r3, r1
 800d686:	333e      	adds	r3, #62	; 0x3e
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	e00b      	b.n	800d6a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d68c:	78fb      	ldrb	r3, [r7, #3]
 800d68e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d692:	68f9      	ldr	r1, [r7, #12]
 800d694:	4613      	mov	r3, r2
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	4413      	add	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d6a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6ca:	78fa      	ldrb	r2, [r7, #3]
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7f7 f88a 	bl	80047e8 <HAL_PCD_SetAddress>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 f874 	bl	800d7c8 <USBD_Get_USB_Status>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b086      	sub	sp, #24
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	60f8      	str	r0, [r7, #12]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d70c:	7af9      	ldrb	r1, [r7, #11]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	f7f7 f994 	bl	8004a3e <HAL_PCD_EP_Transmit>
 800d716:	4603      	mov	r3, r0
 800d718:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 f853 	bl	800d7c8 <USBD_Get_USB_Status>
 800d722:	4603      	mov	r3, r0
 800d724:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d726:	7dbb      	ldrb	r3, [r7, #22]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b086      	sub	sp, #24
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	607a      	str	r2, [r7, #4]
 800d73a:	603b      	str	r3, [r7, #0]
 800d73c:	460b      	mov	r3, r1
 800d73e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d74e:	7af9      	ldrb	r1, [r7, #11]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	f7f7 f91f 	bl	8004996 <HAL_PCD_EP_Receive>
 800d758:	4603      	mov	r3, r0
 800d75a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d75c:	7dfb      	ldrb	r3, [r7, #23]
 800d75e:	4618      	mov	r0, r3
 800d760:	f000 f832 	bl	800d7c8 <USBD_Get_USB_Status>
 800d764:	4603      	mov	r3, r0
 800d766:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d768:	7dbb      	ldrb	r3, [r7, #22]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b082      	sub	sp, #8
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	460b      	mov	r3, r1
 800d77c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d784:	78fa      	ldrb	r2, [r7, #3]
 800d786:	4611      	mov	r1, r2
 800d788:	4618      	mov	r0, r3
 800d78a:	f7f7 f940 	bl	8004a0e <HAL_PCD_EP_GetRxCount>
 800d78e:	4603      	mov	r3, r0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7a0:	4b03      	ldr	r3, [pc, #12]	; (800d7b0 <USBD_static_malloc+0x18>)
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	2400263c 	.word	0x2400263c

0800d7b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	2b03      	cmp	r3, #3
 800d7da:	d817      	bhi.n	800d80c <USBD_Get_USB_Status+0x44>
 800d7dc:	a201      	add	r2, pc, #4	; (adr r2, 800d7e4 <USBD_Get_USB_Status+0x1c>)
 800d7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e2:	bf00      	nop
 800d7e4:	0800d7f5 	.word	0x0800d7f5
 800d7e8:	0800d7fb 	.word	0x0800d7fb
 800d7ec:	0800d801 	.word	0x0800d801
 800d7f0:	0800d807 	.word	0x0800d807
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f8:	e00b      	b.n	800d812 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d7fe:	e008      	b.n	800d812 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d800:	2301      	movs	r3, #1
 800d802:	73fb      	strb	r3, [r7, #15]
    break;
 800d804:	e005      	b.n	800d812 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d806:	2303      	movs	r3, #3
 800d808:	73fb      	strb	r3, [r7, #15]
    break;
 800d80a:	e002      	b.n	800d812 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d80c:	2303      	movs	r3, #3
 800d80e:	73fb      	strb	r3, [r7, #15]
    break;
 800d810:	bf00      	nop
  }
  return usb_status;
 800d812:	7bfb      	ldrb	r3, [r7, #15]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3714      	adds	r7, #20
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d009      	beq.n	800d844 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800d830:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800d832:	461a      	mov	r2, r3
        err.type, err.code);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	4806      	ldr	r0, [pc, #24]	; (800d858 <ai_log_err+0x38>)
 800d83e:	f007 f8bb 	bl	80149b8 <iprintf>
 800d842:	e008      	b.n	800d856 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800d844:	793b      	ldrb	r3, [r7, #4]
 800d846:	4619      	mov	r1, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d84e:	461a      	mov	r2, r3
 800d850:	4802      	ldr	r0, [pc, #8]	; (800d85c <ai_log_err+0x3c>)
 800d852:	f007 f8b1 	bl	80149b8 <iprintf>

  do {} while (1);
 800d856:	e7fe      	b.n	800d856 <ai_log_err+0x36>
 800d858:	080163d0 	.word	0x080163d0
 800d85c:	08016404 	.word	0x08016404

0800d860 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_svm_create_and_init(&svm, act_addr, NULL);
 800d868:	2200      	movs	r2, #0
 800d86a:	6879      	ldr	r1, [r7, #4]
 800d86c:	4828      	ldr	r0, [pc, #160]	; (800d910 <ai_boostrap+0xb0>)
 800d86e:	f000 fad3 	bl	800de18 <ai_svm_create_and_init>
 800d872:	4603      	mov	r3, r0
 800d874:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800d876:	7b3b      	ldrb	r3, [r7, #12]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d006      	beq.n	800d88a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_svm_create_and_init");
 800d87c:	4925      	ldr	r1, [pc, #148]	; (800d914 <ai_boostrap+0xb4>)
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f7ff ffce 	bl	800d820 <ai_log_err>
    return -1;
 800d884:	f04f 33ff 	mov.w	r3, #4294967295
 800d888:	e03e      	b.n	800d908 <ai_boostrap+0xa8>
  }

  ai_input = ai_svm_inputs_get(svm, NULL);
 800d88a:	4b21      	ldr	r3, [pc, #132]	; (800d910 <ai_boostrap+0xb0>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fb35 	bl	800df00 <ai_svm_inputs_get>
 800d896:	4603      	mov	r3, r0
 800d898:	4a1f      	ldr	r2, [pc, #124]	; (800d918 <ai_boostrap+0xb8>)
 800d89a:	6013      	str	r3, [r2, #0]
  ai_output = ai_svm_outputs_get(svm, NULL);
 800d89c:	4b1c      	ldr	r3, [pc, #112]	; (800d910 <ai_boostrap+0xb0>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 fb46 	bl	800df34 <ai_svm_outputs_get>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	4a1c      	ldr	r2, [pc, #112]	; (800d91c <ai_boostrap+0xbc>)
 800d8ac:	6013      	str	r3, [r2, #0]

#if defined(AI_SVM_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_SVM_IN_NUM; idx++) {
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	617b      	str	r3, [r7, #20]
 800d8b2:	e00f      	b.n	800d8d4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800d8b4:	4b18      	ldr	r3, [pc, #96]	; (800d918 <ai_boostrap+0xb8>)
 800d8b6:	6819      	ldr	r1, [r3, #0]
 800d8b8:	697a      	ldr	r2, [r7, #20]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	00db      	lsls	r3, r3, #3
 800d8be:	1a9b      	subs	r3, r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	440b      	add	r3, r1
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	4916      	ldr	r1, [pc, #88]	; (800d920 <ai_boostrap+0xc0>)
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SVM_IN_NUM; idx++) {
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	617b      	str	r3, [r7, #20]
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	ddec      	ble.n	800d8b4 <ai_boostrap+0x54>

#if defined(AI_SVM_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
 800d8da:	2300      	movs	r3, #0
 800d8dc:	613b      	str	r3, [r7, #16]
 800d8de:	e00f      	b.n	800d900 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800d8e0:	4b0e      	ldr	r3, [pc, #56]	; (800d91c <ai_boostrap+0xbc>)
 800d8e2:	6819      	ldr	r1, [r3, #0]
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	1a9b      	subs	r3, r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	440b      	add	r3, r1
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	490c      	ldr	r1, [pc, #48]	; (800d924 <ai_boostrap+0xc4>)
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2b01      	cmp	r3, #1
 800d904:	ddec      	ble.n	800d8e0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_SVM_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	24002c08 	.word	0x24002c08
 800d914:	08016434 	.word	0x08016434
 800d918:	24002c0c 	.word	0x24002c0c
 800d91c:	24002c10 	.word	0x24002c10
 800d920:	2400296c 	.word	0x2400296c
 800d924:	24002970 	.word	0x24002970

0800d928 <ai_run>:

static int ai_run(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_svm_run(svm, ai_input, ai_output);
 800d92e:	4b0f      	ldr	r3, [pc, #60]	; (800d96c <ai_run+0x44>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a0f      	ldr	r2, [pc, #60]	; (800d970 <ai_run+0x48>)
 800d934:	6811      	ldr	r1, [r2, #0]
 800d936:	4a0f      	ldr	r2, [pc, #60]	; (800d974 <ai_run+0x4c>)
 800d938:	6812      	ldr	r2, [r2, #0]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 fb50 	bl	800dfe0 <ai_svm_run>
 800d940:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d00c      	beq.n	800d962 <ai_run+0x3a>
    ai_log_err(ai_svm_get_error(svm),
 800d948:	4b08      	ldr	r3, [pc, #32]	; (800d96c <ai_run+0x44>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 fa41 	bl	800ddd4 <ai_svm_get_error>
 800d952:	4603      	mov	r3, r0
 800d954:	4908      	ldr	r1, [pc, #32]	; (800d978 <ai_run+0x50>)
 800d956:	4618      	mov	r0, r3
 800d958:	f7ff ff62 	bl	800d820 <ai_log_err>
        "ai_svm_run");
    return -1;
 800d95c:	f04f 33ff 	mov.w	r3, #4294967295
 800d960:	e000      	b.n	800d964 <ai_run+0x3c>
  }

  return 0;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	24002c08 	.word	0x24002c08
 800d970:	24002c0c 	.word	0x24002c0c
 800d974:	24002c10 	.word	0x24002c10
 800d978:	0801644c 	.word	0x0801644c
 800d97c:	00000000 	.word	0x00000000

0800d980 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_float* data[])
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	if(counterOfTestData == 0) {
 800d988:	4b1f      	ldr	r3, [pc, #124]	; (800da08 <acquire_and_process_data+0x88>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d104      	bne.n	800d99a <acquire_and_process_data+0x1a>
		timestamp = htim16.Instance->CNT;
 800d990:	4b1e      	ldr	r3, [pc, #120]	; (800da0c <acquire_and_process_data+0x8c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d996:	4a1e      	ldr	r2, [pc, #120]	; (800da10 <acquire_and_process_data+0x90>)
 800d998:	6013      	str	r3, [r2, #0]
	}

	for (int idx=0; idx < AI_SVM_IN_NUM; idx++ ) //SVM jakost
 800d99a:	2300      	movs	r3, #0
 800d99c:	60fb      	str	r3, [r7, #12]
 800d99e:	e01c      	b.n	800d9da <acquire_and_process_data+0x5a>
	{
	    data[idx][0] = (testData[counterOfTestData] - 0.22330145150297734) * 2.5709241370783027; //Orange predprocesiranje podatkov (offset in factor)
 800d9a0:	4b19      	ldr	r3, [pc, #100]	; (800da08 <acquire_and_process_data+0x88>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a1b      	ldr	r2, [pc, #108]	; (800da14 <acquire_and_process_data+0x94>)
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4413      	add	r3, r2
 800d9aa:	edd3 7a00 	vldr	s15, [r3]
 800d9ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d9b2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800d9f8 <acquire_and_process_data+0x78>
 800d9b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9ba:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800da00 <acquire_and_process_data+0x80>
 800d9be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d9d0:	edc3 7a00 	vstr	s15, [r3]
	for (int idx=0; idx < AI_SVM_IN_NUM; idx++ ) //SVM jakost
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	60fb      	str	r3, [r7, #12]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dddf      	ble.n	800d9a0 <acquire_and_process_data+0x20>
	}

	counterOfTestData++;
 800d9e0:	4b09      	ldr	r3, [pc, #36]	; (800da08 <acquire_and_process_data+0x88>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	4a08      	ldr	r2, [pc, #32]	; (800da08 <acquire_and_process_data+0x88>)
 800d9e8:	6013      	str	r3, [r2, #0]
  return 0;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr
 800d9f8:	57ad641d 	.word	0x57ad641d
 800d9fc:	3fcc9524 	.word	0x3fcc9524
 800da00:	ac89fc95 	.word	0xac89fc95
 800da04:	40049140 	.word	0x40049140
 800da08:	2400295c 	.word	0x2400295c
 800da0c:	24000ba4 	.word	0x24000ba4
 800da10:	24002968 	.word	0x24002968
 800da14:	24000104 	.word	0x24000104

0800da18 <post_process>:

int post_process(ai_i8* data[])
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af02      	add	r7, sp, #8
 800da1e:	6078      	str	r0, [r7, #4]
	if(counterOfTestData == size) {
 800da20:	4b29      	ldr	r3, [pc, #164]	; (800dac8 <post_process+0xb0>)
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	4b29      	ldr	r3, [pc, #164]	; (800dacc <post_process+0xb4>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d147      	bne.n	800dabc <post_process+0xa4>

		counterOfTestData = 0;
 800da2c:	4b26      	ldr	r3, [pc, #152]	; (800dac8 <post_process+0xb0>)
 800da2e:	2200      	movs	r2, #0
 800da30:	601a      	str	r2, [r3, #0]

		countDurations++;
 800da32:	4b27      	ldr	r3, [pc, #156]	; (800dad0 <post_process+0xb8>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	3301      	adds	r3, #1
 800da38:	4a25      	ldr	r2, [pc, #148]	; (800dad0 <post_process+0xb8>)
 800da3a:	6013      	str	r3, [r2, #0]

		uint32_t duration = htim16.Instance->CNT;
 800da3c:	4b25      	ldr	r3, [pc, #148]	; (800dad4 <post_process+0xbc>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	60fb      	str	r3, [r7, #12]

		if(duration >= timestamp)
 800da44:	4b24      	ldr	r3, [pc, #144]	; (800dad8 <post_process+0xc0>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d305      	bcc.n	800da5a <post_process+0x42>
			duration -= timestamp;
 800da4e:	4b22      	ldr	r3, [pc, #136]	; (800dad8 <post_process+0xc0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	e006      	b.n	800da68 <post_process+0x50>
		else
			duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 800da5a:	4b1f      	ldr	r3, [pc, #124]	; (800dad8 <post_process+0xc0>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800da66:	60fb      	str	r3, [r7, #12]

		//snprintf(SendBuffer,BUFSIZE,"1 Trajanje izvajanja: %lu milisekund. \r\n", duration);
		//CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
		averageDurationValue += duration;
 800da68:	4b1c      	ldr	r3, [pc, #112]	; (800dadc <post_process+0xc4>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	4413      	add	r3, r2
 800da70:	4a1a      	ldr	r2, [pc, #104]	; (800dadc <post_process+0xc4>)
 800da72:	6013      	str	r3, [r2, #0]

		if(countDurations == numberOfDurations) {
 800da74:	4b16      	ldr	r3, [pc, #88]	; (800dad0 <post_process+0xb8>)
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	4b19      	ldr	r3, [pc, #100]	; (800dae0 <post_process+0xc8>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d11d      	bne.n	800dabc <post_process+0xa4>
			snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu milisekund. \r\n", averageDurationValue, averageDurationValue / 100);
 800da80:	4b16      	ldr	r3, [pc, #88]	; (800dadc <post_process+0xc4>)
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	4b15      	ldr	r3, [pc, #84]	; (800dadc <post_process+0xc4>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4916      	ldr	r1, [pc, #88]	; (800dae4 <post_process+0xcc>)
 800da8a:	fba1 1303 	umull	r1, r3, r1, r3
 800da8e:	095b      	lsrs	r3, r3, #5
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	4613      	mov	r3, r2
 800da94:	4a14      	ldr	r2, [pc, #80]	; (800dae8 <post_process+0xd0>)
 800da96:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da9a:	4814      	ldr	r0, [pc, #80]	; (800daec <post_process+0xd4>)
 800da9c:	f007 f82a 	bl	8014af4 <sniprintf>
			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800daa0:	4812      	ldr	r0, [pc, #72]	; (800daec <post_process+0xd4>)
 800daa2:	f7f2 fc1d 	bl	80002e0 <strlen>
 800daa6:	4603      	mov	r3, r0
 800daa8:	4619      	mov	r1, r3
 800daaa:	4810      	ldr	r0, [pc, #64]	; (800daec <post_process+0xd4>)
 800daac:	f7ff fa38 	bl	800cf20 <CDC_Transmit_FS>

			countDurations = 0;
 800dab0:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <post_process+0xb8>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	601a      	str	r2, [r3, #0]
			averageDurationValue = 0;
 800dab6:	4b09      	ldr	r3, [pc, #36]	; (800dadc <post_process+0xc4>)
 800dab8:	2200      	movs	r2, #0
 800daba:	601a      	str	r2, [r3, #0]
		}
	}

  return 0;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	2400295c 	.word	0x2400295c
 800dacc:	240003e4 	.word	0x240003e4
 800dad0:	24002964 	.word	0x24002964
 800dad4:	24000ba4 	.word	0x24000ba4
 800dad8:	24002968 	.word	0x24002968
 800dadc:	24002960 	.word	0x24002960
 800dae0:	24000100 	.word	0x24000100
 800dae4:	51eb851f 	.word	0x51eb851f
 800dae8:	08016458 	.word	0x08016458
 800daec:	2400285c 	.word	0x2400285c

0800daf0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
    BSP_QSPI_Init_t qspiInit;
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 800daf6:	2303      	movs	r3, #3
 800daf8:	713b      	strb	r3, [r7, #4]
    qspiInit.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800dafa:	2301      	movs	r3, #1
 800dafc:	717b      	strb	r3, [r7, #5]
    qspiInit.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800dafe:	2340      	movs	r3, #64	; 0x40
 800db00:	71bb      	strb	r3, [r7, #6]
    BSP_QSPI_Init(0,&qspiInit);
 800db02:	1d3b      	adds	r3, r7, #4
 800db04:	4619      	mov	r1, r3
 800db06:	2000      	movs	r0, #0
 800db08:	f7f3 ffb4 	bl	8001a74 <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode(0);
 800db0c:	2000      	movs	r0, #0
 800db0e:	f7f4 f88b 	bl	8001c28 <BSP_QSPI_EnableMemoryMappedMode>
    /* USER CODE BEGIN 5 */

    HAL_TIM_Base_Start(&htim16);
 800db12:	4806      	ldr	r0, [pc, #24]	; (800db2c <MX_X_CUBE_AI_Init+0x3c>)
 800db14:	f7fb fd1c 	bl	8009550 <HAL_TIM_Base_Start>

  printf("\r\nTEMPLATE - initialization\r\n");
 800db18:	4805      	ldr	r0, [pc, #20]	; (800db30 <MX_X_CUBE_AI_Init+0x40>)
 800db1a:	f006 ffd3 	bl	8014ac4 <puts>

  ai_boostrap(data_activations0);
 800db1e:	4805      	ldr	r0, [pc, #20]	; (800db34 <MX_X_CUBE_AI_Init+0x44>)
 800db20:	f7ff fe9e 	bl	800d860 <ai_boostrap>
    /* USER CODE END 5 */
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	24000ba4 	.word	0x24000ba4
 800db30:	08016488 	.word	0x08016488
 800db34:	240003e8 	.word	0x240003e8

0800db38 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800db3e:	f04f 33ff 	mov.w	r3, #4294967295
 800db42:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800db44:	4816      	ldr	r0, [pc, #88]	; (800dba0 <MX_X_CUBE_AI_Process+0x68>)
 800db46:	f006 ffbd 	bl	8014ac4 <puts>

  if (svm) {
 800db4a:	4b16      	ldr	r3, [pc, #88]	; (800dba4 <MX_X_CUBE_AI_Process+0x6c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d013      	beq.n	800db7a <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800db52:	4815      	ldr	r0, [pc, #84]	; (800dba8 <MX_X_CUBE_AI_Process+0x70>)
 800db54:	f7ff ff14 	bl	800d980 <acquire_and_process_data>
 800db58:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 800db60:	f7ff fee2 	bl	800d928 <ai_run>
 800db64:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d103      	bne.n	800db74 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 800db6c:	480f      	ldr	r0, [pc, #60]	; (800dbac <MX_X_CUBE_AI_Process+0x74>)
 800db6e:	f7ff ff53 	bl	800da18 <post_process>
 800db72:	6078      	str	r0, [r7, #4]
    } while (res==0);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d0eb      	beq.n	800db52 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00a      	beq.n	800db96 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 800db80:	2311      	movs	r3, #17
 800db82:	703b      	strb	r3, [r7, #0]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2210      	movs	r2, #16
 800db88:	f362 231f 	bfi	r3, r2, #8, #24
 800db8c:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800db8e:	4908      	ldr	r1, [pc, #32]	; (800dbb0 <MX_X_CUBE_AI_Process+0x78>)
 800db90:	6838      	ldr	r0, [r7, #0]
 800db92:	f7ff fe45 	bl	800d820 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800db96:	bf00      	nop
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	080164a8 	.word	0x080164a8
 800dba4:	24002c08 	.word	0x24002c08
 800dba8:	2400296c 	.word	0x2400296c
 800dbac:	24002970 	.word	0x24002970
 800dbb0:	080164c4 	.word	0x080164c4

0800dbb4 <svm_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool svm_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_svm_activations_map, 1, params)) {
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	2101      	movs	r1, #1
 800dbc2:	4827      	ldr	r0, [pc, #156]	; (800dc60 <svm_configure_activations+0xac>)
 800dbc4:	f000 faee 	bl	800e1a4 <ai_platform_get_activations_map>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d03d      	beq.n	800dc4a <svm_configure_activations+0x96>
    /* Updating activations (byte) offsets */
    
    float_input_output_array.data = AI_PTR(g_svm_activations_map[0] + 0);
 800dbce:	4b24      	ldr	r3, [pc, #144]	; (800dc60 <svm_configure_activations+0xac>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a24      	ldr	r2, [pc, #144]	; (800dc64 <svm_configure_activations+0xb0>)
 800dbd4:	6093      	str	r3, [r2, #8]
    float_input_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 0);
 800dbd6:	4b22      	ldr	r3, [pc, #136]	; (800dc60 <svm_configure_activations+0xac>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a22      	ldr	r2, [pc, #136]	; (800dc64 <svm_configure_activations+0xb0>)
 800dbdc:	60d3      	str	r3, [r2, #12]
    
    label_scratch0_array.data = AI_PTR(g_svm_activations_map[0] + 4);
 800dbde:	4b20      	ldr	r3, [pc, #128]	; (800dc60 <svm_configure_activations+0xac>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4a20      	ldr	r2, [pc, #128]	; (800dc68 <svm_configure_activations+0xb4>)
 800dbe6:	6093      	str	r3, [r2, #8]
    label_scratch0_array.data_start = AI_PTR(g_svm_activations_map[0] + 4);
 800dbe8:	4b1d      	ldr	r3, [pc, #116]	; (800dc60 <svm_configure_activations+0xac>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3304      	adds	r3, #4
 800dbee:	4a1e      	ldr	r2, [pc, #120]	; (800dc68 <svm_configure_activations+0xb4>)
 800dbf0:	60d3      	str	r3, [r2, #12]
    
    label_output0_array.data = AI_PTR(g_svm_activations_map[0] + 632);
 800dbf2:	4b1b      	ldr	r3, [pc, #108]	; (800dc60 <svm_configure_activations+0xac>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dbfa:	4a1c      	ldr	r2, [pc, #112]	; (800dc6c <svm_configure_activations+0xb8>)
 800dbfc:	6093      	str	r3, [r2, #8]
    label_output0_array.data_start = AI_PTR(g_svm_activations_map[0] + 632);
 800dbfe:	4b18      	ldr	r3, [pc, #96]	; (800dc60 <svm_configure_activations+0xac>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dc06:	4a19      	ldr	r2, [pc, #100]	; (800dc6c <svm_configure_activations+0xb8>)
 800dc08:	60d3      	str	r3, [r2, #12]
    
    label_output1_array.data = AI_PTR(g_svm_activations_map[0] + 636);
 800dc0a:	4b15      	ldr	r3, [pc, #84]	; (800dc60 <svm_configure_activations+0xac>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800dc12:	4a17      	ldr	r2, [pc, #92]	; (800dc70 <svm_configure_activations+0xbc>)
 800dc14:	6093      	str	r3, [r2, #8]
    label_output1_array.data_start = AI_PTR(g_svm_activations_map[0] + 636);
 800dc16:	4b12      	ldr	r3, [pc, #72]	; (800dc60 <svm_configure_activations+0xac>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800dc1e:	4a14      	ldr	r2, [pc, #80]	; (800dc70 <svm_configure_activations+0xbc>)
 800dc20:	60d3      	str	r3, [r2, #12]
    
    output_probability_output_array.data = AI_PTR(g_svm_activations_map[0] + 0);
 800dc22:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <svm_configure_activations+0xac>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a13      	ldr	r2, [pc, #76]	; (800dc74 <svm_configure_activations+0xc0>)
 800dc28:	6093      	str	r3, [r2, #8]
    output_probability_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 0);
 800dc2a:	4b0d      	ldr	r3, [pc, #52]	; (800dc60 <svm_configure_activations+0xac>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a11      	ldr	r2, [pc, #68]	; (800dc74 <svm_configure_activations+0xc0>)
 800dc30:	60d3      	str	r3, [r2, #12]
    
    output_label_output_array.data = AI_PTR(g_svm_activations_map[0] + 24);
 800dc32:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <svm_configure_activations+0xac>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3318      	adds	r3, #24
 800dc38:	4a0f      	ldr	r2, [pc, #60]	; (800dc78 <svm_configure_activations+0xc4>)
 800dc3a:	6093      	str	r3, [r2, #8]
    output_label_output_array.data_start = AI_PTR(g_svm_activations_map[0] + 24);
 800dc3c:	4b08      	ldr	r3, [pc, #32]	; (800dc60 <svm_configure_activations+0xac>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3318      	adds	r3, #24
 800dc42:	4a0d      	ldr	r2, [pc, #52]	; (800dc78 <svm_configure_activations+0xc4>)
 800dc44:	60d3      	str	r3, [r2, #12]
    
    return true;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e005      	b.n	800dc56 <svm_configure_activations+0xa2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800dc4a:	2213      	movs	r2, #19
 800dc4c:	2130      	movs	r1, #48	; 0x30
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fc26 	bl	800e4a0 <ai_platform_network_set_error>
  return false;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	24002c14 	.word	0x24002c14
 800dc64:	2400043c 	.word	0x2400043c
 800dc68:	240003fc 	.word	0x240003fc
 800dc6c:	2400044c 	.word	0x2400044c
 800dc70:	2400046c 	.word	0x2400046c
 800dc74:	2400047c 	.word	0x2400047c
 800dc78:	2400049c 	.word	0x2400049c

0800dc7c <svm_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool svm_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_svm_weights_map, 1, params)) {
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	2101      	movs	r1, #1
 800dc8a:	4849      	ldr	r0, [pc, #292]	; (800ddb0 <svm_configure_weights+0x134>)
 800dc8c:	f000 fa32 	bl	800e0f4 <ai_platform_get_weights_map>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 8082 	beq.w	800dd9c <svm_configure_weights+0x120>
    /* Updating weights (byte) offsets */
    
    label_rho_array.format |= AI_FMT_FLAG_CONST;
 800dc98:	4b46      	ldr	r3, [pc, #280]	; (800ddb4 <svm_configure_weights+0x138>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dca0:	4a44      	ldr	r2, [pc, #272]	; (800ddb4 <svm_configure_weights+0x138>)
 800dca2:	6013      	str	r3, [r2, #0]
    label_rho_array.data = AI_PTR(g_svm_weights_map[0] + 0);
 800dca4:	4b42      	ldr	r3, [pc, #264]	; (800ddb0 <svm_configure_weights+0x134>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a42      	ldr	r2, [pc, #264]	; (800ddb4 <svm_configure_weights+0x138>)
 800dcaa:	6093      	str	r3, [r2, #8]
    label_rho_array.data_start = AI_PTR(g_svm_weights_map[0] + 0);
 800dcac:	4b40      	ldr	r3, [pc, #256]	; (800ddb0 <svm_configure_weights+0x134>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a40      	ldr	r2, [pc, #256]	; (800ddb4 <svm_configure_weights+0x138>)
 800dcb2:	60d3      	str	r3, [r2, #12]
    
    label_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 800dcb4:	4b40      	ldr	r3, [pc, #256]	; (800ddb8 <svm_configure_weights+0x13c>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcbc:	4a3e      	ldr	r2, [pc, #248]	; (800ddb8 <svm_configure_weights+0x13c>)
 800dcbe:	6013      	str	r3, [r2, #0]
    label_classlabels_ints_array.data = AI_PTR(g_svm_weights_map[0] + 12);
 800dcc0:	4b3b      	ldr	r3, [pc, #236]	; (800ddb0 <svm_configure_weights+0x134>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	330c      	adds	r3, #12
 800dcc6:	4a3c      	ldr	r2, [pc, #240]	; (800ddb8 <svm_configure_weights+0x13c>)
 800dcc8:	6093      	str	r3, [r2, #8]
    label_classlabels_ints_array.data_start = AI_PTR(g_svm_weights_map[0] + 12);
 800dcca:	4b39      	ldr	r3, [pc, #228]	; (800ddb0 <svm_configure_weights+0x134>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	330c      	adds	r3, #12
 800dcd0:	4a39      	ldr	r2, [pc, #228]	; (800ddb8 <svm_configure_weights+0x13c>)
 800dcd2:	60d3      	str	r3, [r2, #12]
    
    label_vectors_per_class_array.format |= AI_FMT_FLAG_CONST;
 800dcd4:	4b39      	ldr	r3, [pc, #228]	; (800ddbc <svm_configure_weights+0x140>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcdc:	4a37      	ldr	r2, [pc, #220]	; (800ddbc <svm_configure_weights+0x140>)
 800dcde:	6013      	str	r3, [r2, #0]
    label_vectors_per_class_array.data = AI_PTR(g_svm_weights_map[0] + 16);
 800dce0:	4b33      	ldr	r3, [pc, #204]	; (800ddb0 <svm_configure_weights+0x134>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	3310      	adds	r3, #16
 800dce6:	4a35      	ldr	r2, [pc, #212]	; (800ddbc <svm_configure_weights+0x140>)
 800dce8:	6093      	str	r3, [r2, #8]
    label_vectors_per_class_array.data_start = AI_PTR(g_svm_weights_map[0] + 16);
 800dcea:	4b31      	ldr	r3, [pc, #196]	; (800ddb0 <svm_configure_weights+0x134>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	3310      	adds	r3, #16
 800dcf0:	4a32      	ldr	r2, [pc, #200]	; (800ddbc <svm_configure_weights+0x140>)
 800dcf2:	60d3      	str	r3, [r2, #12]
    
    label_prob_a_array.format |= AI_FMT_FLAG_CONST;
 800dcf4:	4b32      	ldr	r3, [pc, #200]	; (800ddc0 <svm_configure_weights+0x144>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcfc:	4a30      	ldr	r2, [pc, #192]	; (800ddc0 <svm_configure_weights+0x144>)
 800dcfe:	6013      	str	r3, [r2, #0]
    label_prob_a_array.data = AI_PTR(g_svm_weights_map[0] + 20);
 800dd00:	4b2b      	ldr	r3, [pc, #172]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3314      	adds	r3, #20
 800dd06:	4a2e      	ldr	r2, [pc, #184]	; (800ddc0 <svm_configure_weights+0x144>)
 800dd08:	6093      	str	r3, [r2, #8]
    label_prob_a_array.data_start = AI_PTR(g_svm_weights_map[0] + 20);
 800dd0a:	4b29      	ldr	r3, [pc, #164]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3314      	adds	r3, #20
 800dd10:	4a2b      	ldr	r2, [pc, #172]	; (800ddc0 <svm_configure_weights+0x144>)
 800dd12:	60d3      	str	r3, [r2, #12]
    
    label_prob_b_array.format |= AI_FMT_FLAG_CONST;
 800dd14:	4b2b      	ldr	r3, [pc, #172]	; (800ddc4 <svm_configure_weights+0x148>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd1c:	4a29      	ldr	r2, [pc, #164]	; (800ddc4 <svm_configure_weights+0x148>)
 800dd1e:	6013      	str	r3, [r2, #0]
    label_prob_b_array.data = AI_PTR(g_svm_weights_map[0] + 32);
 800dd20:	4b23      	ldr	r3, [pc, #140]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3320      	adds	r3, #32
 800dd26:	4a27      	ldr	r2, [pc, #156]	; (800ddc4 <svm_configure_weights+0x148>)
 800dd28:	6093      	str	r3, [r2, #8]
    label_prob_b_array.data_start = AI_PTR(g_svm_weights_map[0] + 32);
 800dd2a:	4b21      	ldr	r3, [pc, #132]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	3320      	adds	r3, #32
 800dd30:	4a24      	ldr	r2, [pc, #144]	; (800ddc4 <svm_configure_weights+0x148>)
 800dd32:	60d3      	str	r3, [r2, #12]
    
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 800dd34:	4b24      	ldr	r3, [pc, #144]	; (800ddc8 <svm_configure_weights+0x14c>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd3c:	4a22      	ldr	r2, [pc, #136]	; (800ddc8 <svm_configure_weights+0x14c>)
 800dd3e:	6013      	str	r3, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_svm_weights_map[0] + 44);
 800dd40:	4b1b      	ldr	r3, [pc, #108]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	332c      	adds	r3, #44	; 0x2c
 800dd46:	4a20      	ldr	r2, [pc, #128]	; (800ddc8 <svm_configure_weights+0x14c>)
 800dd48:	6093      	str	r3, [r2, #8]
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_svm_weights_map[0] + 44);
 800dd4a:	4b19      	ldr	r3, [pc, #100]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	332c      	adds	r3, #44	; 0x2c
 800dd50:	4a1d      	ldr	r2, [pc, #116]	; (800ddc8 <svm_configure_weights+0x14c>)
 800dd52:	60d3      	str	r3, [r2, #12]
    
    label_coefficients_array.format |= AI_FMT_FLAG_CONST;
 800dd54:	4b1d      	ldr	r3, [pc, #116]	; (800ddcc <svm_configure_weights+0x150>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd5c:	4a1b      	ldr	r2, [pc, #108]	; (800ddcc <svm_configure_weights+0x150>)
 800dd5e:	6013      	str	r3, [r2, #0]
    label_coefficients_array.data = AI_PTR(g_svm_weights_map[0] + 48);
 800dd60:	4b13      	ldr	r3, [pc, #76]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	3330      	adds	r3, #48	; 0x30
 800dd66:	4a19      	ldr	r2, [pc, #100]	; (800ddcc <svm_configure_weights+0x150>)
 800dd68:	6093      	str	r3, [r2, #8]
    label_coefficients_array.data_start = AI_PTR(g_svm_weights_map[0] + 48);
 800dd6a:	4b11      	ldr	r3, [pc, #68]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3330      	adds	r3, #48	; 0x30
 800dd70:	4a16      	ldr	r2, [pc, #88]	; (800ddcc <svm_configure_weights+0x150>)
 800dd72:	60d3      	str	r3, [r2, #12]
    
    label_support_vectors_array.format |= AI_FMT_FLAG_CONST;
 800dd74:	4b16      	ldr	r3, [pc, #88]	; (800ddd0 <svm_configure_weights+0x154>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd7c:	4a14      	ldr	r2, [pc, #80]	; (800ddd0 <svm_configure_weights+0x154>)
 800dd7e:	6013      	str	r3, [r2, #0]
    label_support_vectors_array.data = AI_PTR(g_svm_weights_map[0] + 1112);
 800dd80:	4b0b      	ldr	r3, [pc, #44]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800dd88:	4a11      	ldr	r2, [pc, #68]	; (800ddd0 <svm_configure_weights+0x154>)
 800dd8a:	6093      	str	r3, [r2, #8]
    label_support_vectors_array.data_start = AI_PTR(g_svm_weights_map[0] + 1112);
 800dd8c:	4b08      	ldr	r3, [pc, #32]	; (800ddb0 <svm_configure_weights+0x134>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800dd94:	4a0e      	ldr	r2, [pc, #56]	; (800ddd0 <svm_configure_weights+0x154>)
 800dd96:	60d3      	str	r3, [r2, #12]
    
    return true;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e005      	b.n	800dda8 <svm_configure_weights+0x12c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800dd9c:	2212      	movs	r2, #18
 800dd9e:	2130      	movs	r1, #48	; 0x30
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fb7d 	bl	800e4a0 <ai_platform_network_set_error>
  return false;
 800dda6:	2300      	movs	r3, #0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	24002c18 	.word	0x24002c18
 800ddb4:	240003ec 	.word	0x240003ec
 800ddb8:	2400040c 	.word	0x2400040c
 800ddbc:	2400041c 	.word	0x2400041c
 800ddc0:	2400042c 	.word	0x2400042c
 800ddc4:	2400045c 	.word	0x2400045c
 800ddc8:	2400048c 	.word	0x2400048c
 800ddcc:	240004ac 	.word	0x240004ac
 800ddd0:	240004bc 	.word	0x240004bc

0800ddd4 <ai_svm_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_svm_get_error(ai_handle network)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fa53 	bl	800e288 <ai_platform_network_get_error>
 800dde2:	4603      	mov	r3, r0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <ai_svm_create>:

AI_API_ENTRY
ai_error ai_svm_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af02      	add	r7, sp, #8
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	2305      	movs	r3, #5
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	2301      	movs	r3, #1
 800de00:	4a04      	ldr	r2, [pc, #16]	; (800de14 <ai_svm_create+0x28>)
 800de02:	6839      	ldr	r1, [r7, #0]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fe65 	bl	800ead4 <ai_platform_network_create>
 800de0a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	240009e4 	.word	0x240009e4

0800de18 <ai_svm_create_and_init>:

AI_API_ENTRY
ai_error ai_svm_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b096      	sub	sp, #88	; 0x58
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_svm_create(network, AI_SVM_DATA_CONFIG);
 800de24:	2100      	movs	r1, #0
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f7ff ffe0 	bl	800ddec <ai_svm_create>
 800de2c:	4603      	mov	r3, r0
 800de2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800de30:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <ai_svm_create_and_init+0x24>
        return err;
 800de38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3a:	e05d      	b.n	800def8 <ai_svm_create_and_init+0xe0>
    if (ai_svm_data_params_get(&params) != true) {
 800de3c:	f107 0314 	add.w	r3, r7, #20
 800de40:	4618      	mov	r0, r3
 800de42:	f000 f8dd 	bl	800e000 <ai_svm_data_params_get>
 800de46:	4603      	mov	r3, r0
 800de48:	f083 0301 	eor.w	r3, r3, #1
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d008      	beq.n	800de64 <ai_svm_create_and_init+0x4c>
        err = ai_svm_get_error(*network);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	f7ff ffbc 	bl	800ddd4 <ai_svm_get_error>
 800de5c:	4603      	mov	r3, r0
 800de5e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800de60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de62:	e049      	b.n	800def8 <ai_svm_create_and_init+0xe0>
    }
#if defined(AI_SVM_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d016      	beq.n	800de98 <ai_svm_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800de6a:	2300      	movs	r3, #0
 800de6c:	657b      	str	r3, [r7, #84]	; 0x54
 800de6e:	e00e      	b.n	800de8e <ai_svm_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800de70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	4413      	add	r3, r2
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	f107 0314 	add.w	r3, r7, #20
 800de80:	330c      	adds	r3, #12
 800de82:	4618      	mov	r0, r3
 800de84:	f000 f922 	bl	800e0cc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800de88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de8a:	3301      	adds	r3, #1
 800de8c:	657b      	str	r3, [r7, #84]	; 0x54
 800de8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de90:	461a      	mov	r2, r3
 800de92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de94:	4293      	cmp	r3, r2
 800de96:	dbeb      	blt.n	800de70 <ai_svm_create_and_init+0x58>
    }
#endif
#if defined(AI_SVM_DATA_WEIGHTS_COUNT)
    if (weights) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d016      	beq.n	800decc <ai_svm_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800de9e:	2300      	movs	r3, #0
 800dea0:	653b      	str	r3, [r7, #80]	; 0x50
 800dea2:	e00e      	b.n	800dec2 <ai_svm_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800dea4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	4413      	add	r3, r2
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	f107 0314 	add.w	r3, r7, #20
 800deb4:	3304      	adds	r3, #4
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 f908 	bl	800e0cc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800debc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800debe:	3301      	adds	r3, #1
 800dec0:	653b      	str	r3, [r7, #80]	; 0x50
 800dec2:	8b7b      	ldrh	r3, [r7, #26]
 800dec4:	461a      	mov	r2, r3
 800dec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec8:	4293      	cmp	r3, r2
 800deca:	dbeb      	blt.n	800dea4 <ai_svm_create_and_init+0x8c>
    }
#endif
    if (ai_svm_init(*network, &params) != true) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f107 0214 	add.w	r2, r7, #20
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 f846 	bl	800df68 <ai_svm_init>
 800dedc:	4603      	mov	r3, r0
 800dede:	f083 0301 	eor.w	r3, r3, #1
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d006      	beq.n	800def6 <ai_svm_create_and_init+0xde>
        err = ai_svm_get_error(*network);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff ff71 	bl	800ddd4 <ai_svm_get_error>
 800def2:	4603      	mov	r3, r0
 800def4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800def6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800def8:	4618      	mov	r0, r3
 800defa:	3758      	adds	r7, #88	; 0x58
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <ai_svm_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_svm_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <ai_svm_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800df10:	4b06      	ldr	r3, [pc, #24]	; (800df2c <ai_svm_inputs_get+0x2c>)
 800df12:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4a06      	ldr	r2, [pc, #24]	; (800df30 <ai_svm_inputs_get+0x30>)
 800df18:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fac5 	bl	800e4ac <ai_platform_inputs_get>
 800df22:	4603      	mov	r3, r0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	240009e4 	.word	0x240009e4
 800df30:	a1c00100 	.word	0xa1c00100

0800df34 <ai_svm_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_svm_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d104      	bne.n	800df4e <ai_svm_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800df44:	4b06      	ldr	r3, [pc, #24]	; (800df60 <ai_svm_outputs_get+0x2c>)
 800df46:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4a06      	ldr	r2, [pc, #24]	; (800df64 <ai_svm_outputs_get+0x30>)
 800df4c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 fc37 	bl	800e7c4 <ai_platform_outputs_get>
 800df56:	4603      	mov	r3, r0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	240009e4 	.word	0x240009e4
 800df64:	a1c00100 	.word	0xa1c00100

0800df68 <ai_svm_init>:
}

AI_API_ENTRY
ai_bool ai_svm_init(
  ai_handle network, const ai_network_params* params)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800df72:	6839      	ldr	r1, [r7, #0]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 ff87 	bl	800ee88 <ai_platform_network_init>
 800df7a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <ai_svm_init+0x1e>
 800df82:	2300      	movs	r3, #0
 800df84:	e028      	b.n	800dfd8 <ai_svm_init+0x70>

  ai_bool ok = true;
 800df86:	2301      	movs	r3, #1
 800df88:	72fb      	strb	r3, [r7, #11]
  ok &= svm_configure_weights(net_ctx, params);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f7ff fe75 	bl	800dc7c <svm_configure_weights>
 800df92:	4603      	mov	r3, r0
 800df94:	461a      	mov	r2, r3
 800df96:	7afb      	ldrb	r3, [r7, #11]
 800df98:	4013      	ands	r3, r2
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	bf14      	ite	ne
 800df9e:	2301      	movne	r3, #1
 800dfa0:	2300      	moveq	r3, #0
 800dfa2:	72fb      	strb	r3, [r7, #11]
  ok &= svm_configure_activations(net_ctx, params);
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff fe04 	bl	800dbb4 <svm_configure_activations>
 800dfac:	4603      	mov	r3, r0
 800dfae:	461a      	mov	r2, r3
 800dfb0:	7afb      	ldrb	r3, [r7, #11]
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	bf14      	ite	ne
 800dfb8:	2301      	movne	r3, #1
 800dfba:	2300      	moveq	r3, #0
 800dfbc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f001 f8fe 	bl	800f1c0 <ai_platform_network_post_init>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	7afb      	ldrb	r3, [r7, #11]
 800dfca:	4013      	ands	r3, r2
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	bf14      	ite	ne
 800dfd0:	2301      	movne	r3, #1
 800dfd2:	2300      	moveq	r3, #0
 800dfd4:	72fb      	strb	r3, [r7, #11]

  return ok;
 800dfd6:	7afb      	ldrb	r3, [r7, #11]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <ai_svm_run>:


AI_API_ENTRY
ai_i32 ai_svm_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f001 fa0f 	bl	800f414 <ai_platform_network_process>
 800dff6:	4603      	mov	r3, r0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <ai_svm_data_params_get>:
 * @ingroup svm_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_svm_data_params_get(ai_network_params* params)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <ai_svm_data_params_get+0x12>
 800e00e:	2300      	movs	r3, #0
 800e010:	e016      	b.n	800e040 <ai_svm_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800e012:	4a0d      	ldr	r2, [pc, #52]	; (800e048 <ai_svm_data_params_get+0x48>)
 800e014:	f107 0310 	add.w	r3, r7, #16
 800e018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e01c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SVM_DATA_ACTIVATIONS_COUNT, g_svm_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800e020:	4a0a      	ldr	r2, [pc, #40]	; (800e04c <ai_svm_data_params_get+0x4c>)
 800e022:	f107 0308 	add.w	r3, r7, #8
 800e026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e02a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SVM_DATA_WEIGHTS_COUNT, g_svm_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800e02e:	f107 0210 	add.w	r2, r7, #16
 800e032:	f107 0308 	add.w	r3, r7, #8
 800e036:	4619      	mov	r1, r3
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f90b 	bl	800e254 <ai_platform_bind_network_params>
 800e03e:	4603      	mov	r3, r0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3718      	adds	r7, #24
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	080164f8 	.word	0x080164f8
 800e04c:	08016500 	.word	0x08016500

0800e050 <ai_buffer_get_size>:
 800e050:	b368      	cbz	r0, 800e0ae <ai_buffer_get_size+0x5e>
 800e052:	4b17      	ldr	r3, [pc, #92]	; (800e0b0 <ai_buffer_get_size+0x60>)
 800e054:	4a17      	ldr	r2, [pc, #92]	; (800e0b4 <ai_buffer_get_size+0x64>)
 800e056:	b410      	push	{r4}
 800e058:	6804      	ldr	r4, [r0, #0]
 800e05a:	4023      	ands	r3, r4
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d123      	bne.n	800e0a8 <ai_buffer_get_size+0x58>
 800e060:	b311      	cbz	r1, 800e0a8 <ai_buffer_get_size+0x58>
 800e062:	6984      	ldr	r4, [r0, #24]
 800e064:	6862      	ldr	r2, [r4, #4]
 800e066:	321f      	adds	r2, #31
 800e068:	f022 021f 	bic.w	r2, r2, #31
 800e06c:	7d03      	ldrb	r3, [r0, #20]
 800e06e:	6941      	ldr	r1, [r0, #20]
 800e070:	f1a3 0301 	sub.w	r3, r3, #1
 800e074:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800e078:	fab3 f383 	clz	r3, r3
 800e07c:	095b      	lsrs	r3, r3, #5
 800e07e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800e082:	da0c      	bge.n	800e09e <ai_buffer_get_size+0x4e>
 800e084:	2b01      	cmp	r3, #1
 800e086:	d103      	bne.n	800e090 <ai_buffer_get_size+0x40>
 800e088:	2802      	cmp	r0, #2
 800e08a:	f04f 0302 	mov.w	r3, #2
 800e08e:	d006      	beq.n	800e09e <ai_buffer_get_size+0x4e>
 800e090:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800e094:	3301      	adds	r3, #1
 800e096:	4298      	cmp	r0, r3
 800e098:	fb01 f202 	mul.w	r2, r1, r2
 800e09c:	d1f2      	bne.n	800e084 <ai_buffer_get_size+0x34>
 800e09e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800e0a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	6984      	ldr	r4, [r0, #24]
 800e0aa:	6862      	ldr	r2, [r4, #4]
 800e0ac:	e7de      	b.n	800e06c <ai_buffer_get_size+0x1c>
 800e0ae:	4770      	bx	lr
 800e0b0:	017fffff 	.word	0x017fffff
 800e0b4:	000400c0 	.word	0x000400c0

0800e0b8 <ai_buffer_array_sane>:
 800e0b8:	b138      	cbz	r0, 800e0ca <ai_buffer_array_sane+0x12>
 800e0ba:	6843      	ldr	r3, [r0, #4]
 800e0bc:	b123      	cbz	r3, 800e0c8 <ai_buffer_array_sane+0x10>
 800e0be:	8840      	ldrh	r0, [r0, #2]
 800e0c0:	3800      	subs	r0, #0
 800e0c2:	bf18      	it	ne
 800e0c4:	2001      	movne	r0, #1
 800e0c6:	4770      	bx	lr
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	4770      	bx	lr

0800e0cc <ai_buffer_array_item_set_address>:
 800e0cc:	b150      	cbz	r0, 800e0e4 <ai_buffer_array_item_set_address+0x18>
 800e0ce:	6843      	ldr	r3, [r0, #4]
 800e0d0:	b14b      	cbz	r3, 800e0e6 <ai_buffer_array_item_set_address+0x1a>
 800e0d2:	8840      	ldrh	r0, [r0, #2]
 800e0d4:	b900      	cbnz	r0, 800e0d8 <ai_buffer_array_item_set_address+0xc>
 800e0d6:	4770      	bx	lr
 800e0d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e0dc:	2001      	movs	r0, #1
 800e0de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e0e2:	604a      	str	r2, [r1, #4]
 800e0e4:	4770      	bx	lr
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop

0800e0ec <_ai_platform_acquire_crc>:
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	4770      	bx	lr

0800e0f0 <_ai_platform_release_crc>:
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop

0800e0f4 <ai_platform_get_weights_map>:
 800e0f4:	2900      	cmp	r1, #0
 800e0f6:	bf18      	it	ne
 800e0f8:	2800      	cmpne	r0, #0
 800e0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fc:	bf0c      	ite	eq
 800e0fe:	2401      	moveq	r4, #1
 800e100:	2400      	movne	r4, #0
 800e102:	2a00      	cmp	r2, #0
 800e104:	bf08      	it	eq
 800e106:	f044 0401 	orreq.w	r4, r4, #1
 800e10a:	b114      	cbz	r4, 800e112 <ai_platform_get_weights_map+0x1e>
 800e10c:	2400      	movs	r4, #0
 800e10e:	4620      	mov	r0, r4
 800e110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e112:	4616      	mov	r6, r2
 800e114:	4b22      	ldr	r3, [pc, #136]	; (800e1a0 <ai_platform_get_weights_map+0xac>)
 800e116:	6812      	ldr	r2, [r2, #0]
 800e118:	4605      	mov	r5, r0
 800e11a:	460f      	mov	r7, r1
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d022      	beq.n	800e166 <ai_platform_get_weights_map+0x72>
 800e120:	6870      	ldr	r0, [r6, #4]
 800e122:	2800      	cmp	r0, #0
 800e124:	d0f2      	beq.n	800e10c <ai_platform_get_weights_map+0x18>
 800e126:	6806      	ldr	r6, [r0, #0]
 800e128:	429e      	cmp	r6, r3
 800e12a:	d006      	beq.n	800e13a <ai_platform_get_weights_map+0x46>
 800e12c:	f1a1 0401 	sub.w	r4, r1, #1
 800e130:	6028      	str	r0, [r5, #0]
 800e132:	fab4 f484 	clz	r4, r4
 800e136:	0964      	lsrs	r4, r4, #5
 800e138:	e7e9      	b.n	800e10e <ai_platform_get_weights_map+0x1a>
 800e13a:	3d04      	subs	r5, #4
 800e13c:	4602      	mov	r2, r0
 800e13e:	4621      	mov	r1, r4
 800e140:	e000      	b.n	800e144 <ai_platform_get_weights_map+0x50>
 800e142:	4619      	mov	r1, r3
 800e144:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800e148:	42b3      	cmp	r3, r6
 800e14a:	d025      	beq.n	800e198 <ai_platform_get_weights_map+0xa4>
 800e14c:	f845 3f04 	str.w	r3, [r5, #4]!
 800e150:	1c4b      	adds	r3, r1, #1
 800e152:	429f      	cmp	r7, r3
 800e154:	d8f5      	bhi.n	800e142 <ai_platform_get_weights_map+0x4e>
 800e156:	d1da      	bne.n	800e10e <ai_platform_get_weights_map+0x1a>
 800e158:	3102      	adds	r1, #2
 800e15a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800e15e:	42b3      	cmp	r3, r6
 800e160:	d1d5      	bne.n	800e10e <ai_platform_get_weights_map+0x1a>
 800e162:	2401      	movs	r4, #1
 800e164:	e7d3      	b.n	800e10e <ai_platform_get_weights_map+0x1a>
 800e166:	1d30      	adds	r0, r6, #4
 800e168:	f7ff ffa6 	bl	800e0b8 <ai_buffer_array_sane>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d0cd      	beq.n	800e10c <ai_platform_get_weights_map+0x18>
 800e170:	88f3      	ldrh	r3, [r6, #6]
 800e172:	429f      	cmp	r7, r3
 800e174:	d1ca      	bne.n	800e10c <ai_platform_get_weights_map+0x18>
 800e176:	3d04      	subs	r5, #4
 800e178:	4622      	mov	r2, r4
 800e17a:	68b3      	ldr	r3, [r6, #8]
 800e17c:	4423      	add	r3, r4
 800e17e:	341c      	adds	r4, #28
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	b123      	cbz	r3, 800e18e <ai_platform_get_weights_map+0x9a>
 800e184:	3201      	adds	r2, #1
 800e186:	f845 3f04 	str.w	r3, [r5, #4]!
 800e18a:	4297      	cmp	r7, r2
 800e18c:	d8f5      	bhi.n	800e17a <ai_platform_get_weights_map+0x86>
 800e18e:	1abc      	subs	r4, r7, r2
 800e190:	fab4 f484 	clz	r4, r4
 800e194:	0964      	lsrs	r4, r4, #5
 800e196:	e7ba      	b.n	800e10e <ai_platform_get_weights_map+0x1a>
 800e198:	428f      	cmp	r7, r1
 800e19a:	d1b8      	bne.n	800e10e <ai_platform_get_weights_map+0x1a>
 800e19c:	e7e1      	b.n	800e162 <ai_platform_get_weights_map+0x6e>
 800e19e:	bf00      	nop
 800e1a0:	a1facade 	.word	0xa1facade

0800e1a4 <ai_platform_get_activations_map>:
 800e1a4:	2900      	cmp	r1, #0
 800e1a6:	bf18      	it	ne
 800e1a8:	2800      	cmpne	r0, #0
 800e1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ac:	bf0c      	ite	eq
 800e1ae:	2401      	moveq	r4, #1
 800e1b0:	2400      	movne	r4, #0
 800e1b2:	2a00      	cmp	r2, #0
 800e1b4:	bf08      	it	eq
 800e1b6:	f044 0401 	orreq.w	r4, r4, #1
 800e1ba:	b114      	cbz	r4, 800e1c2 <ai_platform_get_activations_map+0x1e>
 800e1bc:	2400      	movs	r4, #0
 800e1be:	4620      	mov	r0, r4
 800e1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1c2:	4616      	mov	r6, r2
 800e1c4:	4b22      	ldr	r3, [pc, #136]	; (800e250 <ai_platform_get_activations_map+0xac>)
 800e1c6:	6812      	ldr	r2, [r2, #0]
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	460f      	mov	r7, r1
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d022      	beq.n	800e216 <ai_platform_get_activations_map+0x72>
 800e1d0:	6a30      	ldr	r0, [r6, #32]
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d0f2      	beq.n	800e1bc <ai_platform_get_activations_map+0x18>
 800e1d6:	6806      	ldr	r6, [r0, #0]
 800e1d8:	429e      	cmp	r6, r3
 800e1da:	d006      	beq.n	800e1ea <ai_platform_get_activations_map+0x46>
 800e1dc:	f1a1 0401 	sub.w	r4, r1, #1
 800e1e0:	6028      	str	r0, [r5, #0]
 800e1e2:	fab4 f484 	clz	r4, r4
 800e1e6:	0964      	lsrs	r4, r4, #5
 800e1e8:	e7e9      	b.n	800e1be <ai_platform_get_activations_map+0x1a>
 800e1ea:	3d04      	subs	r5, #4
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	e000      	b.n	800e1f4 <ai_platform_get_activations_map+0x50>
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800e1f8:	42b3      	cmp	r3, r6
 800e1fa:	d026      	beq.n	800e24a <ai_platform_get_activations_map+0xa6>
 800e1fc:	f845 3f04 	str.w	r3, [r5, #4]!
 800e200:	1c4b      	adds	r3, r1, #1
 800e202:	429f      	cmp	r7, r3
 800e204:	d8f5      	bhi.n	800e1f2 <ai_platform_get_activations_map+0x4e>
 800e206:	d1da      	bne.n	800e1be <ai_platform_get_activations_map+0x1a>
 800e208:	3102      	adds	r1, #2
 800e20a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800e20e:	42b3      	cmp	r3, r6
 800e210:	d1d5      	bne.n	800e1be <ai_platform_get_activations_map+0x1a>
 800e212:	2401      	movs	r4, #1
 800e214:	e7d3      	b.n	800e1be <ai_platform_get_activations_map+0x1a>
 800e216:	f106 000c 	add.w	r0, r6, #12
 800e21a:	f7ff ff4d 	bl	800e0b8 <ai_buffer_array_sane>
 800e21e:	2800      	cmp	r0, #0
 800e220:	d0cc      	beq.n	800e1bc <ai_platform_get_activations_map+0x18>
 800e222:	89f3      	ldrh	r3, [r6, #14]
 800e224:	429f      	cmp	r7, r3
 800e226:	d1c9      	bne.n	800e1bc <ai_platform_get_activations_map+0x18>
 800e228:	3d04      	subs	r5, #4
 800e22a:	4622      	mov	r2, r4
 800e22c:	6933      	ldr	r3, [r6, #16]
 800e22e:	4423      	add	r3, r4
 800e230:	341c      	adds	r4, #28
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	b123      	cbz	r3, 800e240 <ai_platform_get_activations_map+0x9c>
 800e236:	3201      	adds	r2, #1
 800e238:	f845 3f04 	str.w	r3, [r5, #4]!
 800e23c:	4297      	cmp	r7, r2
 800e23e:	d8f5      	bhi.n	800e22c <ai_platform_get_activations_map+0x88>
 800e240:	1abc      	subs	r4, r7, r2
 800e242:	fab4 f484 	clz	r4, r4
 800e246:	0964      	lsrs	r4, r4, #5
 800e248:	e7b9      	b.n	800e1be <ai_platform_get_activations_map+0x1a>
 800e24a:	428f      	cmp	r7, r1
 800e24c:	d1b7      	bne.n	800e1be <ai_platform_get_activations_map+0x1a>
 800e24e:	e7e0      	b.n	800e212 <ai_platform_get_activations_map+0x6e>
 800e250:	a1facade 	.word	0xa1facade

0800e254 <ai_platform_bind_network_params>:
 800e254:	2a00      	cmp	r2, #0
 800e256:	bf18      	it	ne
 800e258:	2900      	cmpne	r1, #0
 800e25a:	d010      	beq.n	800e27e <ai_platform_bind_network_params+0x2a>
 800e25c:	b178      	cbz	r0, 800e27e <ai_platform_bind_network_params+0x2a>
 800e25e:	4603      	mov	r3, r0
 800e260:	4808      	ldr	r0, [pc, #32]	; (800e284 <ai_platform_bind_network_params+0x30>)
 800e262:	f103 0c0c 	add.w	ip, r3, #12
 800e266:	f843 0b04 	str.w	r0, [r3], #4
 800e26a:	c903      	ldmia	r1, {r0, r1}
 800e26c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e270:	2301      	movs	r3, #1
 800e272:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e276:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e27a:	4618      	mov	r0, r3
 800e27c:	4770      	bx	lr
 800e27e:	2300      	movs	r3, #0
 800e280:	4618      	mov	r0, r3
 800e282:	4770      	bx	lr
 800e284:	a1facade 	.word	0xa1facade

0800e288 <ai_platform_network_get_error>:
 800e288:	b510      	push	{r4, lr}
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d03f      	beq.n	800e30e <ai_platform_network_get_error+0x86>
 800e28e:	4b7d      	ldr	r3, [pc, #500]	; (800e484 <ai_platform_network_get_error+0x1fc>)
 800e290:	4604      	mov	r4, r0
 800e292:	6802      	ldr	r2, [r0, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d13a      	bne.n	800e30e <ai_platform_network_get_error+0x86>
 800e298:	f7ff ff28 	bl	800e0ec <_ai_platform_acquire_crc>
 800e29c:	4b7a      	ldr	r3, [pc, #488]	; (800e488 <ai_platform_network_get_error+0x200>)
 800e29e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2a8:	189a      	adds	r2, r3, r2
 800e2aa:	2a01      	cmp	r2, #1
 800e2ac:	f240 8086 	bls.w	800e3bc <ai_platform_network_get_error+0x134>
 800e2b0:	f240 4249 	movw	r2, #1097	; 0x449
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	f000 8081 	beq.w	800e3bc <ai_platform_network_get_error+0x134>
 800e2ba:	4a74      	ldr	r2, [pc, #464]	; (800e48c <ai_platform_network_get_error+0x204>)
 800e2bc:	6813      	ldr	r3, [r2, #0]
 800e2be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2c2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e2c6:	f000 8087 	beq.w	800e3d8 <ai_platform_network_get_error+0x150>
 800e2ca:	6813      	ldr	r3, [r2, #0]
 800e2cc:	f240 4183 	movw	r1, #1155	; 0x483
 800e2d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2d4:	428b      	cmp	r3, r1
 800e2d6:	f000 80a9 	beq.w	800e42c <ai_platform_network_get_error+0x1a4>
 800e2da:	6813      	ldr	r3, [r2, #0]
 800e2dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2e0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e2e4:	f000 80c0 	beq.w	800e468 <ai_platform_network_get_error+0x1e0>
 800e2e8:	6813      	ldr	r3, [r2, #0]
 800e2ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f040 8082 	bne.w	800e3f8 <ai_platform_network_get_error+0x170>
 800e2f4:	4a66      	ldr	r2, [pc, #408]	; (800e490 <ai_platform_network_get_error+0x208>)
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	6093      	str	r3, [r2, #8]
 800e2fa:	6893      	ldr	r3, [r2, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1fc      	bne.n	800e2fa <ai_platform_network_get_error+0x72>
 800e300:	4964      	ldr	r1, [pc, #400]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e302:	4b65      	ldr	r3, [pc, #404]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e304:	6011      	str	r1, [r2, #0]
 800e306:	6812      	ldr	r2, [r2, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d075      	beq.n	800e3f8 <ai_platform_network_get_error+0x170>
 800e30c:	e7fe      	b.n	800e30c <ai_platform_network_get_error+0x84>
 800e30e:	f7ff feed 	bl	800e0ec <_ai_platform_acquire_crc>
 800e312:	4b5d      	ldr	r3, [pc, #372]	; (800e488 <ai_platform_network_get_error+0x200>)
 800e314:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e31e:	185a      	adds	r2, r3, r1
 800e320:	2a01      	cmp	r2, #1
 800e322:	d929      	bls.n	800e378 <ai_platform_network_get_error+0xf0>
 800e324:	f240 4249 	movw	r2, #1097	; 0x449
 800e328:	4293      	cmp	r3, r2
 800e32a:	d025      	beq.n	800e378 <ai_platform_network_get_error+0xf0>
 800e32c:	4a57      	ldr	r2, [pc, #348]	; (800e48c <ai_platform_network_get_error+0x204>)
 800e32e:	6813      	ldr	r3, [r2, #0]
 800e330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e334:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e338:	d02b      	beq.n	800e392 <ai_platform_network_get_error+0x10a>
 800e33a:	6813      	ldr	r3, [r2, #0]
 800e33c:	f240 4183 	movw	r1, #1155	; 0x483
 800e340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e344:	428b      	cmp	r3, r1
 800e346:	d060      	beq.n	800e40a <ai_platform_network_get_error+0x182>
 800e348:	6813      	ldr	r3, [r2, #0]
 800e34a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e34e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e352:	d07c      	beq.n	800e44e <ai_platform_network_get_error+0x1c6>
 800e354:	6813      	ldr	r3, [r2, #0]
 800e356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d129      	bne.n	800e3b2 <ai_platform_network_get_error+0x12a>
 800e35e:	4a4c      	ldr	r2, [pc, #304]	; (800e490 <ai_platform_network_get_error+0x208>)
 800e360:	2301      	movs	r3, #1
 800e362:	6093      	str	r3, [r2, #8]
 800e364:	6893      	ldr	r3, [r2, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1fc      	bne.n	800e364 <ai_platform_network_get_error+0xdc>
 800e36a:	494a      	ldr	r1, [pc, #296]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e36c:	4b4a      	ldr	r3, [pc, #296]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e36e:	6011      	str	r1, [r2, #0]
 800e370:	6812      	ldr	r2, [r2, #0]
 800e372:	429a      	cmp	r2, r3
 800e374:	d01d      	beq.n	800e3b2 <ai_platform_network_get_error+0x12a>
 800e376:	e7fe      	b.n	800e376 <ai_platform_network_get_error+0xee>
 800e378:	4a45      	ldr	r2, [pc, #276]	; (800e490 <ai_platform_network_get_error+0x208>)
 800e37a:	2301      	movs	r3, #1
 800e37c:	6093      	str	r3, [r2, #8]
 800e37e:	6893      	ldr	r3, [r2, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1fc      	bne.n	800e37e <ai_platform_network_get_error+0xf6>
 800e384:	4943      	ldr	r1, [pc, #268]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e386:	4b44      	ldr	r3, [pc, #272]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e388:	6011      	str	r1, [r2, #0]
 800e38a:	6812      	ldr	r2, [r2, #0]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d010      	beq.n	800e3b2 <ai_platform_network_get_error+0x12a>
 800e390:	e7fe      	b.n	800e390 <ai_platform_network_get_error+0x108>
 800e392:	4a42      	ldr	r2, [pc, #264]	; (800e49c <ai_platform_network_get_error+0x214>)
 800e394:	2301      	movs	r3, #1
 800e396:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e39a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1fb      	bne.n	800e39a <ai_platform_network_get_error+0x112>
 800e3a2:	493c      	ldr	r1, [pc, #240]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e3a4:	4b3c      	ldr	r3, [pc, #240]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e3a6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e3aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d111      	bne.n	800e3d6 <ai_platform_network_get_error+0x14e>
 800e3b2:	f7ff fe9d 	bl	800e0f0 <_ai_platform_release_crc>
 800e3b6:	f241 0010 	movw	r0, #4112	; 0x1010
 800e3ba:	bd10      	pop	{r4, pc}
 800e3bc:	4a34      	ldr	r2, [pc, #208]	; (800e490 <ai_platform_network_get_error+0x208>)
 800e3be:	2301      	movs	r3, #1
 800e3c0:	6093      	str	r3, [r2, #8]
 800e3c2:	6893      	ldr	r3, [r2, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1fc      	bne.n	800e3c2 <ai_platform_network_get_error+0x13a>
 800e3c8:	4932      	ldr	r1, [pc, #200]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e3ca:	4b33      	ldr	r3, [pc, #204]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e3cc:	6011      	str	r1, [r2, #0]
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d011      	beq.n	800e3f8 <ai_platform_network_get_error+0x170>
 800e3d4:	e7fe      	b.n	800e3d4 <ai_platform_network_get_error+0x14c>
 800e3d6:	e7fe      	b.n	800e3d6 <ai_platform_network_get_error+0x14e>
 800e3d8:	4a30      	ldr	r2, [pc, #192]	; (800e49c <ai_platform_network_get_error+0x214>)
 800e3da:	2301      	movs	r3, #1
 800e3dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e3e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1fb      	bne.n	800e3e0 <ai_platform_network_get_error+0x158>
 800e3e8:	492a      	ldr	r1, [pc, #168]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e3ea:	4b2b      	ldr	r3, [pc, #172]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e3ec:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e3f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d107      	bne.n	800e408 <ai_platform_network_get_error+0x180>
 800e3f8:	f7ff fe7a 	bl	800e0f0 <_ai_platform_release_crc>
 800e3fc:	f104 0010 	add.w	r0, r4, #16
 800e400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e404:	f001 bae6 	b.w	800f9d4 <core_get_error>
 800e408:	e7fe      	b.n	800e408 <ai_platform_network_get_error+0x180>
 800e40a:	4a24      	ldr	r2, [pc, #144]	; (800e49c <ai_platform_network_get_error+0x214>)
 800e40c:	2301      	movs	r3, #1
 800e40e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e412:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1fb      	bne.n	800e412 <ai_platform_network_get_error+0x18a>
 800e41a:	491e      	ldr	r1, [pc, #120]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e41c:	4b1e      	ldr	r3, [pc, #120]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e41e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e422:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e426:	429a      	cmp	r2, r3
 800e428:	d0c3      	beq.n	800e3b2 <ai_platform_network_get_error+0x12a>
 800e42a:	e7fe      	b.n	800e42a <ai_platform_network_get_error+0x1a2>
 800e42c:	4a1b      	ldr	r2, [pc, #108]	; (800e49c <ai_platform_network_get_error+0x214>)
 800e42e:	2301      	movs	r3, #1
 800e430:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e434:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d1fb      	bne.n	800e434 <ai_platform_network_get_error+0x1ac>
 800e43c:	4915      	ldr	r1, [pc, #84]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e43e:	4b16      	ldr	r3, [pc, #88]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e440:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e444:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e448:	429a      	cmp	r2, r3
 800e44a:	d0d5      	beq.n	800e3f8 <ai_platform_network_get_error+0x170>
 800e44c:	e7fe      	b.n	800e44c <ai_platform_network_get_error+0x1c4>
 800e44e:	4a10      	ldr	r2, [pc, #64]	; (800e490 <ai_platform_network_get_error+0x208>)
 800e450:	2301      	movs	r3, #1
 800e452:	6093      	str	r3, [r2, #8]
 800e454:	6893      	ldr	r3, [r2, #8]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1fc      	bne.n	800e454 <ai_platform_network_get_error+0x1cc>
 800e45a:	490e      	ldr	r1, [pc, #56]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e45c:	4b0e      	ldr	r3, [pc, #56]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e45e:	6011      	str	r1, [r2, #0]
 800e460:	6812      	ldr	r2, [r2, #0]
 800e462:	429a      	cmp	r2, r3
 800e464:	d0a5      	beq.n	800e3b2 <ai_platform_network_get_error+0x12a>
 800e466:	e7fe      	b.n	800e466 <ai_platform_network_get_error+0x1de>
 800e468:	4a09      	ldr	r2, [pc, #36]	; (800e490 <ai_platform_network_get_error+0x208>)
 800e46a:	2301      	movs	r3, #1
 800e46c:	6093      	str	r3, [r2, #8]
 800e46e:	6893      	ldr	r3, [r2, #8]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1fc      	bne.n	800e46e <ai_platform_network_get_error+0x1e6>
 800e474:	4907      	ldr	r1, [pc, #28]	; (800e494 <ai_platform_network_get_error+0x20c>)
 800e476:	4b08      	ldr	r3, [pc, #32]	; (800e498 <ai_platform_network_get_error+0x210>)
 800e478:	6011      	str	r1, [r2, #0]
 800e47a:	6812      	ldr	r2, [r2, #0]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d0bb      	beq.n	800e3f8 <ai_platform_network_get_error+0x170>
 800e480:	e7fe      	b.n	800e480 <ai_platform_network_get_error+0x1f8>
 800e482:	bf00      	nop
 800e484:	a1c00100 	.word	0xa1c00100
 800e488:	e0042000 	.word	0xe0042000
 800e48c:	5c001000 	.word	0x5c001000
 800e490:	40023000 	.word	0x40023000
 800e494:	f407a5c2 	.word	0xf407a5c2
 800e498:	b5e8b5cd 	.word	0xb5e8b5cd
 800e49c:	58024000 	.word	0x58024000

0800e4a0 <ai_platform_network_set_error>:
 800e4a0:	b110      	cbz	r0, 800e4a8 <ai_platform_network_set_error+0x8>
 800e4a2:	3010      	adds	r0, #16
 800e4a4:	f001 ba9c 	b.w	800f9e0 <core_set_error>
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop

0800e4ac <ai_platform_inputs_get>:
 800e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b0:	b085      	sub	sp, #20
 800e4b2:	9102      	str	r1, [sp, #8]
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f000 8093 	beq.w	800e5e0 <ai_platform_inputs_get+0x134>
 800e4ba:	4baa      	ldr	r3, [pc, #680]	; (800e764 <ai_platform_inputs_get+0x2b8>)
 800e4bc:	4681      	mov	r9, r0
 800e4be:	6802      	ldr	r2, [r0, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	f040 808d 	bne.w	800e5e0 <ai_platform_inputs_get+0x134>
 800e4c6:	f7ff fe11 	bl	800e0ec <_ai_platform_acquire_crc>
 800e4ca:	4ba7      	ldr	r3, [pc, #668]	; (800e768 <ai_platform_inputs_get+0x2bc>)
 800e4cc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4d6:	189a      	adds	r2, r3, r2
 800e4d8:	2a01      	cmp	r2, #1
 800e4da:	f240 80da 	bls.w	800e692 <ai_platform_inputs_get+0x1e6>
 800e4de:	f240 4249 	movw	r2, #1097	; 0x449
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	f000 80d5 	beq.w	800e692 <ai_platform_inputs_get+0x1e6>
 800e4e8:	4aa0      	ldr	r2, [pc, #640]	; (800e76c <ai_platform_inputs_get+0x2c0>)
 800e4ea:	6813      	ldr	r3, [r2, #0]
 800e4ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4f0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e4f4:	f000 80dc 	beq.w	800e6b0 <ai_platform_inputs_get+0x204>
 800e4f8:	6813      	ldr	r3, [r2, #0]
 800e4fa:	f240 4183 	movw	r1, #1155	; 0x483
 800e4fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e502:	428b      	cmp	r3, r1
 800e504:	f000 810e 	beq.w	800e724 <ai_platform_inputs_get+0x278>
 800e508:	6813      	ldr	r3, [r2, #0]
 800e50a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e50e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e512:	f000 8143 	beq.w	800e79c <ai_platform_inputs_get+0x2f0>
 800e516:	6813      	ldr	r3, [r2, #0]
 800e518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	f000 8113 	beq.w	800e748 <ai_platform_inputs_get+0x29c>
 800e522:	f7ff fde5 	bl	800e0f0 <_ai_platform_release_crc>
 800e526:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 80d2 	beq.w	800e6d4 <ai_platform_inputs_get+0x228>
 800e530:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800e534:	f1ba 0f00 	cmp.w	sl, #0
 800e538:	f000 80cc 	beq.w	800e6d4 <ai_platform_inputs_get+0x228>
 800e53c:	2100      	movs	r1, #0
 800e53e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e542:	460d      	mov	r5, r1
 800e544:	4689      	mov	r9, r1
 800e546:	e016      	b.n	800e576 <ai_platform_inputs_get+0xca>
 800e548:	9a01      	ldr	r2, [sp, #4]
 800e54a:	2301      	movs	r3, #1
 800e54c:	f848 3002 	str.w	r3, [r8, r2]
 800e550:	69b2      	ldr	r2, [r6, #24]
 800e552:	f04f 0301 	mov.w	r3, #1
 800e556:	6856      	ldr	r6, [r2, #4]
 800e558:	3501      	adds	r5, #1
 800e55a:	f109 091c 	add.w	r9, r9, #28
 800e55e:	7523      	strb	r3, [r4, #20]
 800e560:	2300      	movs	r3, #0
 800e562:	6962      	ldr	r2, [r4, #20]
 800e564:	60a7      	str	r7, [r4, #8]
 800e566:	f36b 221f 	bfi	r2, fp, #8, #24
 800e56a:	6126      	str	r6, [r4, #16]
 800e56c:	61a1      	str	r1, [r4, #24]
 800e56e:	60e3      	str	r3, [r4, #12]
 800e570:	6162      	str	r2, [r4, #20]
 800e572:	e9c4 0c00 	strd	r0, ip, [r4]
 800e576:	f8ba 3000 	ldrh.w	r3, [sl]
 800e57a:	b2ac      	uxth	r4, r5
 800e57c:	42ab      	cmp	r3, r5
 800e57e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	f240 80b5 	bls.w	800e6f2 <ai_platform_inputs_get+0x246>
 800e588:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 80b0 	beq.w	800e6f2 <ai_platform_inputs_get+0x246>
 800e592:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e596:	2e00      	cmp	r6, #0
 800e598:	f000 80ab 	beq.w	800e6f2 <ai_platform_inputs_get+0x246>
 800e59c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e5a0:	69b2      	ldr	r2, [r6, #24]
 800e5a2:	68f1      	ldr	r1, [r6, #12]
 800e5a4:	6810      	ldr	r0, [r2, #0]
 800e5a6:	9100      	str	r1, [sp, #0]
 800e5a8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e5ac:	68b3      	ldr	r3, [r6, #8]
 800e5ae:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e5b2:	444c      	add	r4, r9
 800e5b4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e5b8:	f006 f83a 	bl	8014630 <ai_array_to_buffer_fmt>
 800e5bc:	69b2      	ldr	r2, [r6, #24]
 800e5be:	9900      	ldr	r1, [sp, #0]
 800e5c0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e5c4:	2f00      	cmp	r7, #0
 800e5c6:	d0c4      	beq.n	800e552 <ai_platform_inputs_get+0xa6>
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e5ce:	6832      	ldr	r2, [r6, #0]
 800e5d0:	607a      	str	r2, [r7, #4]
 800e5d2:	b112      	cbz	r2, 800e5da <ai_platform_inputs_get+0x12e>
 800e5d4:	8852      	ldrh	r2, [r2, #2]
 800e5d6:	2a00      	cmp	r2, #0
 800e5d8:	d1b6      	bne.n	800e548 <ai_platform_inputs_get+0x9c>
 800e5da:	69b2      	ldr	r2, [r6, #24]
 800e5dc:	2700      	movs	r7, #0
 800e5de:	e7b8      	b.n	800e552 <ai_platform_inputs_get+0xa6>
 800e5e0:	f7ff fd84 	bl	800e0ec <_ai_platform_acquire_crc>
 800e5e4:	4b60      	ldr	r3, [pc, #384]	; (800e768 <ai_platform_inputs_get+0x2bc>)
 800e5e6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e5f0:	185a      	adds	r2, r3, r1
 800e5f2:	2a01      	cmp	r2, #1
 800e5f4:	d92a      	bls.n	800e64c <ai_platform_inputs_get+0x1a0>
 800e5f6:	f240 4249 	movw	r2, #1097	; 0x449
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d026      	beq.n	800e64c <ai_platform_inputs_get+0x1a0>
 800e5fe:	4a5b      	ldr	r2, [pc, #364]	; (800e76c <ai_platform_inputs_get+0x2c0>)
 800e600:	6813      	ldr	r3, [r2, #0]
 800e602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e606:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e60a:	d02c      	beq.n	800e666 <ai_platform_inputs_get+0x1ba>
 800e60c:	6813      	ldr	r3, [r2, #0]
 800e60e:	f240 4183 	movw	r1, #1155	; 0x483
 800e612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e616:	428b      	cmp	r3, r1
 800e618:	d073      	beq.n	800e702 <ai_platform_inputs_get+0x256>
 800e61a:	6813      	ldr	r3, [r2, #0]
 800e61c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e620:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e624:	f000 80ac 	beq.w	800e780 <ai_platform_inputs_get+0x2d4>
 800e628:	6813      	ldr	r3, [r2, #0]
 800e62a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d129      	bne.n	800e686 <ai_platform_inputs_get+0x1da>
 800e632:	4a4f      	ldr	r2, [pc, #316]	; (800e770 <ai_platform_inputs_get+0x2c4>)
 800e634:	2301      	movs	r3, #1
 800e636:	6093      	str	r3, [r2, #8]
 800e638:	6893      	ldr	r3, [r2, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1fc      	bne.n	800e638 <ai_platform_inputs_get+0x18c>
 800e63e:	494d      	ldr	r1, [pc, #308]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e640:	4b4d      	ldr	r3, [pc, #308]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e642:	6011      	str	r1, [r2, #0]
 800e644:	6812      	ldr	r2, [r2, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d01d      	beq.n	800e686 <ai_platform_inputs_get+0x1da>
 800e64a:	e7fe      	b.n	800e64a <ai_platform_inputs_get+0x19e>
 800e64c:	4a48      	ldr	r2, [pc, #288]	; (800e770 <ai_platform_inputs_get+0x2c4>)
 800e64e:	2301      	movs	r3, #1
 800e650:	6093      	str	r3, [r2, #8]
 800e652:	6893      	ldr	r3, [r2, #8]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1fc      	bne.n	800e652 <ai_platform_inputs_get+0x1a6>
 800e658:	4946      	ldr	r1, [pc, #280]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e65a:	4b47      	ldr	r3, [pc, #284]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e65c:	6011      	str	r1, [r2, #0]
 800e65e:	6812      	ldr	r2, [r2, #0]
 800e660:	429a      	cmp	r2, r3
 800e662:	d010      	beq.n	800e686 <ai_platform_inputs_get+0x1da>
 800e664:	e7fe      	b.n	800e664 <ai_platform_inputs_get+0x1b8>
 800e666:	4a45      	ldr	r2, [pc, #276]	; (800e77c <ai_platform_inputs_get+0x2d0>)
 800e668:	2301      	movs	r3, #1
 800e66a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e66e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1fb      	bne.n	800e66e <ai_platform_inputs_get+0x1c2>
 800e676:	493f      	ldr	r1, [pc, #252]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e678:	4b3f      	ldr	r3, [pc, #252]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e67a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e67e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e682:	429a      	cmp	r2, r3
 800e684:	d113      	bne.n	800e6ae <ai_platform_inputs_get+0x202>
 800e686:	f7ff fd33 	bl	800e0f0 <_ai_platform_release_crc>
 800e68a:	2000      	movs	r0, #0
 800e68c:	b005      	add	sp, #20
 800e68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e692:	4a37      	ldr	r2, [pc, #220]	; (800e770 <ai_platform_inputs_get+0x2c4>)
 800e694:	2301      	movs	r3, #1
 800e696:	6093      	str	r3, [r2, #8]
 800e698:	6893      	ldr	r3, [r2, #8]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1fc      	bne.n	800e698 <ai_platform_inputs_get+0x1ec>
 800e69e:	4b35      	ldr	r3, [pc, #212]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e6a0:	6013      	str	r3, [r2, #0]
 800e6a2:	4b35      	ldr	r3, [pc, #212]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e6a4:	6812      	ldr	r2, [r2, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	f43f af3b 	beq.w	800e522 <ai_platform_inputs_get+0x76>
 800e6ac:	e7fe      	b.n	800e6ac <ai_platform_inputs_get+0x200>
 800e6ae:	e7fe      	b.n	800e6ae <ai_platform_inputs_get+0x202>
 800e6b0:	4a32      	ldr	r2, [pc, #200]	; (800e77c <ai_platform_inputs_get+0x2d0>)
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e6b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1fb      	bne.n	800e6b8 <ai_platform_inputs_get+0x20c>
 800e6c0:	4b2c      	ldr	r3, [pc, #176]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e6c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e6c6:	4b2c      	ldr	r3, [pc, #176]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e6c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	f43f af28 	beq.w	800e522 <ai_platform_inputs_get+0x76>
 800e6d2:	e7fe      	b.n	800e6d2 <ai_platform_inputs_get+0x226>
 800e6d4:	2400      	movs	r4, #0
 800e6d6:	2218      	movs	r2, #24
 800e6d8:	2111      	movs	r1, #17
 800e6da:	f109 0010 	add.w	r0, r9, #16
 800e6de:	f001 f97f 	bl	800f9e0 <core_set_error>
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	9b02      	ldr	r3, [sp, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d0d0      	beq.n	800e68c <ai_platform_inputs_get+0x1e0>
 800e6ea:	801c      	strh	r4, [r3, #0]
 800e6ec:	b005      	add	sp, #20
 800e6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e6f6:	2c00      	cmp	r4, #0
 800e6f8:	d0ec      	beq.n	800e6d4 <ai_platform_inputs_get+0x228>
 800e6fa:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e6fe:	6858      	ldr	r0, [r3, #4]
 800e700:	e7f0      	b.n	800e6e4 <ai_platform_inputs_get+0x238>
 800e702:	4a1e      	ldr	r2, [pc, #120]	; (800e77c <ai_platform_inputs_get+0x2d0>)
 800e704:	2301      	movs	r3, #1
 800e706:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e70a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1fb      	bne.n	800e70a <ai_platform_inputs_get+0x25e>
 800e712:	4918      	ldr	r1, [pc, #96]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e714:	4b18      	ldr	r3, [pc, #96]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e716:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e71a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e71e:	429a      	cmp	r2, r3
 800e720:	d0b1      	beq.n	800e686 <ai_platform_inputs_get+0x1da>
 800e722:	e7fe      	b.n	800e722 <ai_platform_inputs_get+0x276>
 800e724:	4a15      	ldr	r2, [pc, #84]	; (800e77c <ai_platform_inputs_get+0x2d0>)
 800e726:	2301      	movs	r3, #1
 800e728:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e72c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1fb      	bne.n	800e72c <ai_platform_inputs_get+0x280>
 800e734:	4b0f      	ldr	r3, [pc, #60]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e736:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e73a:	4b0f      	ldr	r3, [pc, #60]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e73c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e740:	429a      	cmp	r2, r3
 800e742:	f43f aeee 	beq.w	800e522 <ai_platform_inputs_get+0x76>
 800e746:	e7fe      	b.n	800e746 <ai_platform_inputs_get+0x29a>
 800e748:	4a09      	ldr	r2, [pc, #36]	; (800e770 <ai_platform_inputs_get+0x2c4>)
 800e74a:	2301      	movs	r3, #1
 800e74c:	6093      	str	r3, [r2, #8]
 800e74e:	6893      	ldr	r3, [r2, #8]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d1fc      	bne.n	800e74e <ai_platform_inputs_get+0x2a2>
 800e754:	4b07      	ldr	r3, [pc, #28]	; (800e774 <ai_platform_inputs_get+0x2c8>)
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	4b07      	ldr	r3, [pc, #28]	; (800e778 <ai_platform_inputs_get+0x2cc>)
 800e75a:	6812      	ldr	r2, [r2, #0]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	f43f aee0 	beq.w	800e522 <ai_platform_inputs_get+0x76>
 800e762:	e7fe      	b.n	800e762 <ai_platform_inputs_get+0x2b6>
 800e764:	a1c00100 	.word	0xa1c00100
 800e768:	e0042000 	.word	0xe0042000
 800e76c:	5c001000 	.word	0x5c001000
 800e770:	40023000 	.word	0x40023000
 800e774:	f407a5c2 	.word	0xf407a5c2
 800e778:	b5e8b5cd 	.word	0xb5e8b5cd
 800e77c:	58024000 	.word	0x58024000
 800e780:	4a0d      	ldr	r2, [pc, #52]	; (800e7b8 <ai_platform_inputs_get+0x30c>)
 800e782:	2301      	movs	r3, #1
 800e784:	6093      	str	r3, [r2, #8]
 800e786:	6893      	ldr	r3, [r2, #8]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1fc      	bne.n	800e786 <ai_platform_inputs_get+0x2da>
 800e78c:	490b      	ldr	r1, [pc, #44]	; (800e7bc <ai_platform_inputs_get+0x310>)
 800e78e:	4b0c      	ldr	r3, [pc, #48]	; (800e7c0 <ai_platform_inputs_get+0x314>)
 800e790:	6011      	str	r1, [r2, #0]
 800e792:	6812      	ldr	r2, [r2, #0]
 800e794:	429a      	cmp	r2, r3
 800e796:	f43f af76 	beq.w	800e686 <ai_platform_inputs_get+0x1da>
 800e79a:	e7fe      	b.n	800e79a <ai_platform_inputs_get+0x2ee>
 800e79c:	4a06      	ldr	r2, [pc, #24]	; (800e7b8 <ai_platform_inputs_get+0x30c>)
 800e79e:	2301      	movs	r3, #1
 800e7a0:	6093      	str	r3, [r2, #8]
 800e7a2:	6893      	ldr	r3, [r2, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1fc      	bne.n	800e7a2 <ai_platform_inputs_get+0x2f6>
 800e7a8:	4b04      	ldr	r3, [pc, #16]	; (800e7bc <ai_platform_inputs_get+0x310>)
 800e7aa:	6013      	str	r3, [r2, #0]
 800e7ac:	4b04      	ldr	r3, [pc, #16]	; (800e7c0 <ai_platform_inputs_get+0x314>)
 800e7ae:	6812      	ldr	r2, [r2, #0]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	f43f aeb6 	beq.w	800e522 <ai_platform_inputs_get+0x76>
 800e7b6:	e7fe      	b.n	800e7b6 <ai_platform_inputs_get+0x30a>
 800e7b8:	40023000 	.word	0x40023000
 800e7bc:	f407a5c2 	.word	0xf407a5c2
 800e7c0:	b5e8b5cd 	.word	0xb5e8b5cd

0800e7c4 <ai_platform_outputs_get>:
 800e7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c8:	b085      	sub	sp, #20
 800e7ca:	9102      	str	r1, [sp, #8]
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	f000 808f 	beq.w	800e8f0 <ai_platform_outputs_get+0x12c>
 800e7d2:	4ba8      	ldr	r3, [pc, #672]	; (800ea74 <ai_platform_outputs_get+0x2b0>)
 800e7d4:	4681      	mov	r9, r0
 800e7d6:	6802      	ldr	r2, [r0, #0]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	f040 8089 	bne.w	800e8f0 <ai_platform_outputs_get+0x12c>
 800e7de:	f7ff fc85 	bl	800e0ec <_ai_platform_acquire_crc>
 800e7e2:	4ba5      	ldr	r3, [pc, #660]	; (800ea78 <ai_platform_outputs_get+0x2b4>)
 800e7e4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e7ee:	189a      	adds	r2, r3, r2
 800e7f0:	2a01      	cmp	r2, #1
 800e7f2:	f240 80d6 	bls.w	800e9a2 <ai_platform_outputs_get+0x1de>
 800e7f6:	f240 4249 	movw	r2, #1097	; 0x449
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	f000 80d1 	beq.w	800e9a2 <ai_platform_outputs_get+0x1de>
 800e800:	4a9e      	ldr	r2, [pc, #632]	; (800ea7c <ai_platform_outputs_get+0x2b8>)
 800e802:	6813      	ldr	r3, [r2, #0]
 800e804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e808:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e80c:	f000 80d8 	beq.w	800e9c0 <ai_platform_outputs_get+0x1fc>
 800e810:	6813      	ldr	r3, [r2, #0]
 800e812:	f240 4183 	movw	r1, #1155	; 0x483
 800e816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e81a:	428b      	cmp	r3, r1
 800e81c:	f000 8109 	beq.w	800ea32 <ai_platform_outputs_get+0x26e>
 800e820:	6813      	ldr	r3, [r2, #0]
 800e822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e826:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e82a:	f000 813f 	beq.w	800eaac <ai_platform_outputs_get+0x2e8>
 800e82e:	6813      	ldr	r3, [r2, #0]
 800e830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 810e 	beq.w	800ea56 <ai_platform_outputs_get+0x292>
 800e83a:	f7ff fc59 	bl	800e0f0 <_ai_platform_release_crc>
 800e83e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800e842:	2b01      	cmp	r3, #1
 800e844:	f240 80db 	bls.w	800e9fe <ai_platform_outputs_get+0x23a>
 800e848:	2100      	movs	r1, #0
 800e84a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800e84e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e852:	460d      	mov	r5, r1
 800e854:	4689      	mov	r9, r1
 800e856:	e016      	b.n	800e886 <ai_platform_outputs_get+0xc2>
 800e858:	9a01      	ldr	r2, [sp, #4]
 800e85a:	2301      	movs	r3, #1
 800e85c:	f848 3002 	str.w	r3, [r8, r2]
 800e860:	69b2      	ldr	r2, [r6, #24]
 800e862:	f04f 0301 	mov.w	r3, #1
 800e866:	6856      	ldr	r6, [r2, #4]
 800e868:	3501      	adds	r5, #1
 800e86a:	f109 091c 	add.w	r9, r9, #28
 800e86e:	7523      	strb	r3, [r4, #20]
 800e870:	2300      	movs	r3, #0
 800e872:	6962      	ldr	r2, [r4, #20]
 800e874:	60a7      	str	r7, [r4, #8]
 800e876:	f36b 221f 	bfi	r2, fp, #8, #24
 800e87a:	6126      	str	r6, [r4, #16]
 800e87c:	61a1      	str	r1, [r4, #24]
 800e87e:	60e3      	str	r3, [r4, #12]
 800e880:	6162      	str	r2, [r4, #20]
 800e882:	e9c4 0c00 	strd	r0, ip, [r4]
 800e886:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e88a:	b2ac      	uxth	r4, r5
 800e88c:	42ab      	cmp	r3, r5
 800e88e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e892:	9301      	str	r3, [sp, #4]
 800e894:	f240 80a6 	bls.w	800e9e4 <ai_platform_outputs_get+0x220>
 800e898:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f000 80a1 	beq.w	800e9e4 <ai_platform_outputs_get+0x220>
 800e8a2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e8a6:	2e00      	cmp	r6, #0
 800e8a8:	f000 809c 	beq.w	800e9e4 <ai_platform_outputs_get+0x220>
 800e8ac:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e8b0:	69b2      	ldr	r2, [r6, #24]
 800e8b2:	68f1      	ldr	r1, [r6, #12]
 800e8b4:	6810      	ldr	r0, [r2, #0]
 800e8b6:	9100      	str	r1, [sp, #0]
 800e8b8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e8bc:	68b3      	ldr	r3, [r6, #8]
 800e8be:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e8c2:	444c      	add	r4, r9
 800e8c4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e8c8:	f005 feb2 	bl	8014630 <ai_array_to_buffer_fmt>
 800e8cc:	69b2      	ldr	r2, [r6, #24]
 800e8ce:	9900      	ldr	r1, [sp, #0]
 800e8d0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e8d4:	2f00      	cmp	r7, #0
 800e8d6:	d0c4      	beq.n	800e862 <ai_platform_outputs_get+0x9e>
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e8de:	6832      	ldr	r2, [r6, #0]
 800e8e0:	607a      	str	r2, [r7, #4]
 800e8e2:	b112      	cbz	r2, 800e8ea <ai_platform_outputs_get+0x126>
 800e8e4:	8852      	ldrh	r2, [r2, #2]
 800e8e6:	2a00      	cmp	r2, #0
 800e8e8:	d1b6      	bne.n	800e858 <ai_platform_outputs_get+0x94>
 800e8ea:	69b2      	ldr	r2, [r6, #24]
 800e8ec:	2700      	movs	r7, #0
 800e8ee:	e7b8      	b.n	800e862 <ai_platform_outputs_get+0x9e>
 800e8f0:	f7ff fbfc 	bl	800e0ec <_ai_platform_acquire_crc>
 800e8f4:	4b60      	ldr	r3, [pc, #384]	; (800ea78 <ai_platform_outputs_get+0x2b4>)
 800e8f6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e900:	185a      	adds	r2, r3, r1
 800e902:	2a01      	cmp	r2, #1
 800e904:	d92a      	bls.n	800e95c <ai_platform_outputs_get+0x198>
 800e906:	f240 4249 	movw	r2, #1097	; 0x449
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d026      	beq.n	800e95c <ai_platform_outputs_get+0x198>
 800e90e:	4a5b      	ldr	r2, [pc, #364]	; (800ea7c <ai_platform_outputs_get+0x2b8>)
 800e910:	6813      	ldr	r3, [r2, #0]
 800e912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e916:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e91a:	d02c      	beq.n	800e976 <ai_platform_outputs_get+0x1b2>
 800e91c:	6813      	ldr	r3, [r2, #0]
 800e91e:	f240 4183 	movw	r1, #1155	; 0x483
 800e922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e926:	428b      	cmp	r3, r1
 800e928:	d072      	beq.n	800ea10 <ai_platform_outputs_get+0x24c>
 800e92a:	6813      	ldr	r3, [r2, #0]
 800e92c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e930:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e934:	f000 80ac 	beq.w	800ea90 <ai_platform_outputs_get+0x2cc>
 800e938:	6813      	ldr	r3, [r2, #0]
 800e93a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d129      	bne.n	800e996 <ai_platform_outputs_get+0x1d2>
 800e942:	4a4f      	ldr	r2, [pc, #316]	; (800ea80 <ai_platform_outputs_get+0x2bc>)
 800e944:	2301      	movs	r3, #1
 800e946:	6093      	str	r3, [r2, #8]
 800e948:	6893      	ldr	r3, [r2, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1fc      	bne.n	800e948 <ai_platform_outputs_get+0x184>
 800e94e:	494d      	ldr	r1, [pc, #308]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800e950:	4b4d      	ldr	r3, [pc, #308]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800e952:	6011      	str	r1, [r2, #0]
 800e954:	6812      	ldr	r2, [r2, #0]
 800e956:	429a      	cmp	r2, r3
 800e958:	d01d      	beq.n	800e996 <ai_platform_outputs_get+0x1d2>
 800e95a:	e7fe      	b.n	800e95a <ai_platform_outputs_get+0x196>
 800e95c:	4a48      	ldr	r2, [pc, #288]	; (800ea80 <ai_platform_outputs_get+0x2bc>)
 800e95e:	2301      	movs	r3, #1
 800e960:	6093      	str	r3, [r2, #8]
 800e962:	6893      	ldr	r3, [r2, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1fc      	bne.n	800e962 <ai_platform_outputs_get+0x19e>
 800e968:	4946      	ldr	r1, [pc, #280]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800e96a:	4b47      	ldr	r3, [pc, #284]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800e96c:	6011      	str	r1, [r2, #0]
 800e96e:	6812      	ldr	r2, [r2, #0]
 800e970:	429a      	cmp	r2, r3
 800e972:	d010      	beq.n	800e996 <ai_platform_outputs_get+0x1d2>
 800e974:	e7fe      	b.n	800e974 <ai_platform_outputs_get+0x1b0>
 800e976:	4a45      	ldr	r2, [pc, #276]	; (800ea8c <ai_platform_outputs_get+0x2c8>)
 800e978:	2301      	movs	r3, #1
 800e97a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e97e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1fb      	bne.n	800e97e <ai_platform_outputs_get+0x1ba>
 800e986:	493f      	ldr	r1, [pc, #252]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800e988:	4b3f      	ldr	r3, [pc, #252]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800e98a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e98e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e992:	429a      	cmp	r2, r3
 800e994:	d113      	bne.n	800e9be <ai_platform_outputs_get+0x1fa>
 800e996:	f7ff fbab 	bl	800e0f0 <_ai_platform_release_crc>
 800e99a:	2000      	movs	r0, #0
 800e99c:	b005      	add	sp, #20
 800e99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a2:	4a37      	ldr	r2, [pc, #220]	; (800ea80 <ai_platform_outputs_get+0x2bc>)
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	6093      	str	r3, [r2, #8]
 800e9a8:	6893      	ldr	r3, [r2, #8]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1fc      	bne.n	800e9a8 <ai_platform_outputs_get+0x1e4>
 800e9ae:	4b35      	ldr	r3, [pc, #212]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	4b35      	ldr	r3, [pc, #212]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800e9b4:	6812      	ldr	r2, [r2, #0]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	f43f af3f 	beq.w	800e83a <ai_platform_outputs_get+0x76>
 800e9bc:	e7fe      	b.n	800e9bc <ai_platform_outputs_get+0x1f8>
 800e9be:	e7fe      	b.n	800e9be <ai_platform_outputs_get+0x1fa>
 800e9c0:	4a32      	ldr	r2, [pc, #200]	; (800ea8c <ai_platform_outputs_get+0x2c8>)
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e9c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1fb      	bne.n	800e9c8 <ai_platform_outputs_get+0x204>
 800e9d0:	4b2c      	ldr	r3, [pc, #176]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800e9d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e9d6:	4b2c      	ldr	r3, [pc, #176]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800e9d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	f43f af2c 	beq.w	800e83a <ai_platform_outputs_get+0x76>
 800e9e2:	e7fe      	b.n	800e9e2 <ai_platform_outputs_get+0x21e>
 800e9e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e9e8:	b14c      	cbz	r4, 800e9fe <ai_platform_outputs_get+0x23a>
 800e9ea:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e9ee:	6858      	ldr	r0, [r3, #4]
 800e9f0:	9b02      	ldr	r3, [sp, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d0d2      	beq.n	800e99c <ai_platform_outputs_get+0x1d8>
 800e9f6:	801c      	strh	r4, [r3, #0]
 800e9f8:	b005      	add	sp, #20
 800e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fe:	2400      	movs	r4, #0
 800ea00:	2218      	movs	r2, #24
 800ea02:	2111      	movs	r1, #17
 800ea04:	f109 0010 	add.w	r0, r9, #16
 800ea08:	f000 ffea 	bl	800f9e0 <core_set_error>
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	e7ef      	b.n	800e9f0 <ai_platform_outputs_get+0x22c>
 800ea10:	4a1e      	ldr	r2, [pc, #120]	; (800ea8c <ai_platform_outputs_get+0x2c8>)
 800ea12:	2301      	movs	r3, #1
 800ea14:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ea18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1fb      	bne.n	800ea18 <ai_platform_outputs_get+0x254>
 800ea20:	4918      	ldr	r1, [pc, #96]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800ea22:	4b19      	ldr	r3, [pc, #100]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800ea24:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ea28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d0b2      	beq.n	800e996 <ai_platform_outputs_get+0x1d2>
 800ea30:	e7fe      	b.n	800ea30 <ai_platform_outputs_get+0x26c>
 800ea32:	4a16      	ldr	r2, [pc, #88]	; (800ea8c <ai_platform_outputs_get+0x2c8>)
 800ea34:	2301      	movs	r3, #1
 800ea36:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ea3a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1fb      	bne.n	800ea3a <ai_platform_outputs_get+0x276>
 800ea42:	4b10      	ldr	r3, [pc, #64]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800ea44:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ea48:	4b0f      	ldr	r3, [pc, #60]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800ea4a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	f43f aef3 	beq.w	800e83a <ai_platform_outputs_get+0x76>
 800ea54:	e7fe      	b.n	800ea54 <ai_platform_outputs_get+0x290>
 800ea56:	4a0a      	ldr	r2, [pc, #40]	; (800ea80 <ai_platform_outputs_get+0x2bc>)
 800ea58:	2301      	movs	r3, #1
 800ea5a:	6093      	str	r3, [r2, #8]
 800ea5c:	6893      	ldr	r3, [r2, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1fc      	bne.n	800ea5c <ai_platform_outputs_get+0x298>
 800ea62:	4b08      	ldr	r3, [pc, #32]	; (800ea84 <ai_platform_outputs_get+0x2c0>)
 800ea64:	6013      	str	r3, [r2, #0]
 800ea66:	4b08      	ldr	r3, [pc, #32]	; (800ea88 <ai_platform_outputs_get+0x2c4>)
 800ea68:	6812      	ldr	r2, [r2, #0]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	f43f aee5 	beq.w	800e83a <ai_platform_outputs_get+0x76>
 800ea70:	e7fe      	b.n	800ea70 <ai_platform_outputs_get+0x2ac>
 800ea72:	bf00      	nop
 800ea74:	a1c00100 	.word	0xa1c00100
 800ea78:	e0042000 	.word	0xe0042000
 800ea7c:	5c001000 	.word	0x5c001000
 800ea80:	40023000 	.word	0x40023000
 800ea84:	f407a5c2 	.word	0xf407a5c2
 800ea88:	b5e8b5cd 	.word	0xb5e8b5cd
 800ea8c:	58024000 	.word	0x58024000
 800ea90:	4a0d      	ldr	r2, [pc, #52]	; (800eac8 <ai_platform_outputs_get+0x304>)
 800ea92:	2301      	movs	r3, #1
 800ea94:	6093      	str	r3, [r2, #8]
 800ea96:	6893      	ldr	r3, [r2, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1fc      	bne.n	800ea96 <ai_platform_outputs_get+0x2d2>
 800ea9c:	490b      	ldr	r1, [pc, #44]	; (800eacc <ai_platform_outputs_get+0x308>)
 800ea9e:	4b0c      	ldr	r3, [pc, #48]	; (800ead0 <ai_platform_outputs_get+0x30c>)
 800eaa0:	6011      	str	r1, [r2, #0]
 800eaa2:	6812      	ldr	r2, [r2, #0]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	f43f af76 	beq.w	800e996 <ai_platform_outputs_get+0x1d2>
 800eaaa:	e7fe      	b.n	800eaaa <ai_platform_outputs_get+0x2e6>
 800eaac:	4a06      	ldr	r2, [pc, #24]	; (800eac8 <ai_platform_outputs_get+0x304>)
 800eaae:	2301      	movs	r3, #1
 800eab0:	6093      	str	r3, [r2, #8]
 800eab2:	6893      	ldr	r3, [r2, #8]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1fc      	bne.n	800eab2 <ai_platform_outputs_get+0x2ee>
 800eab8:	4b04      	ldr	r3, [pc, #16]	; (800eacc <ai_platform_outputs_get+0x308>)
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	4b04      	ldr	r3, [pc, #16]	; (800ead0 <ai_platform_outputs_get+0x30c>)
 800eabe:	6812      	ldr	r2, [r2, #0]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	f43f aeba 	beq.w	800e83a <ai_platform_outputs_get+0x76>
 800eac6:	e7fe      	b.n	800eac6 <ai_platform_outputs_get+0x302>
 800eac8:	40023000 	.word	0x40023000
 800eacc:	f407a5c2 	.word	0xf407a5c2
 800ead0:	b5e8b5cd 	.word	0xb5e8b5cd

0800ead4 <ai_platform_network_create>:
 800ead4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ead8:	b083      	sub	sp, #12
 800eada:	4604      	mov	r4, r0
 800eadc:	4615      	mov	r5, r2
 800eade:	461e      	mov	r6, r3
 800eae0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800eae4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800eae8:	f7ff fb00 	bl	800e0ec <_ai_platform_acquire_crc>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f000 80bd 	beq.w	800ec6c <ai_platform_network_create+0x198>
 800eaf2:	4ba5      	ldr	r3, [pc, #660]	; (800ed88 <ai_platform_network_create+0x2b4>)
 800eaf4:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800eaf8:	4601      	mov	r1, r0
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb00:	eb03 020c 	add.w	r2, r3, ip
 800eb04:	2a01      	cmp	r2, #1
 800eb06:	f240 80a8 	bls.w	800ec5a <ai_platform_network_create+0x186>
 800eb0a:	f240 4249 	movw	r2, #1097	; 0x449
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	f000 80a3 	beq.w	800ec5a <ai_platform_network_create+0x186>
 800eb14:	4a9d      	ldr	r2, [pc, #628]	; (800ed8c <ai_platform_network_create+0x2b8>)
 800eb16:	6813      	ldr	r3, [r2, #0]
 800eb18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb1c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eb20:	f000 80b9 	beq.w	800ec96 <ai_platform_network_create+0x1c2>
 800eb24:	6813      	ldr	r3, [r2, #0]
 800eb26:	f240 4c83 	movw	ip, #1155	; 0x483
 800eb2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb2e:	4563      	cmp	r3, ip
 800eb30:	f000 80a1 	beq.w	800ec76 <ai_platform_network_create+0x1a2>
 800eb34:	6813      	ldr	r3, [r2, #0]
 800eb36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb3a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800eb3e:	f000 8153 	beq.w	800ede8 <ai_platform_network_create+0x314>
 800eb42:	6813      	ldr	r3, [r2, #0]
 800eb44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f040 808d 	bne.w	800ec68 <ai_platform_network_create+0x194>
 800eb4e:	4a90      	ldr	r2, [pc, #576]	; (800ed90 <ai_platform_network_create+0x2bc>)
 800eb50:	2318      	movs	r3, #24
 800eb52:	6093      	str	r3, [r2, #8]
 800eb54:	6893      	ldr	r3, [r2, #8]
 800eb56:	2b18      	cmp	r3, #24
 800eb58:	f040 8086 	bne.w	800ec68 <ai_platform_network_create+0x194>
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	6093      	str	r3, [r2, #8]
 800eb60:	6893      	ldr	r3, [r2, #8]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1fc      	bne.n	800eb60 <ai_platform_network_create+0x8c>
 800eb66:	4608      	mov	r0, r1
 800eb68:	f7ff fac2 	bl	800e0f0 <_ai_platform_release_crc>
 800eb6c:	f7ff fabe 	bl	800e0ec <_ai_platform_acquire_crc>
 800eb70:	4b85      	ldr	r3, [pc, #532]	; (800ed88 <ai_platform_network_create+0x2b4>)
 800eb72:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb7c:	189a      	adds	r2, r3, r2
 800eb7e:	2a01      	cmp	r2, #1
 800eb80:	f240 809f 	bls.w	800ecc2 <ai_platform_network_create+0x1ee>
 800eb84:	f240 4249 	movw	r2, #1097	; 0x449
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	f000 809a 	beq.w	800ecc2 <ai_platform_network_create+0x1ee>
 800eb8e:	4a7f      	ldr	r2, [pc, #508]	; (800ed8c <ai_platform_network_create+0x2b8>)
 800eb90:	6813      	ldr	r3, [r2, #0]
 800eb92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb96:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eb9a:	f000 80a0 	beq.w	800ecde <ai_platform_network_create+0x20a>
 800eb9e:	6813      	ldr	r3, [r2, #0]
 800eba0:	f240 4183 	movw	r1, #1155	; 0x483
 800eba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eba8:	428b      	cmp	r3, r1
 800ebaa:	f000 80bf 	beq.w	800ed2c <ai_platform_network_create+0x258>
 800ebae:	6813      	ldr	r3, [r2, #0]
 800ebb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebb4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ebb8:	f000 8123 	beq.w	800ee02 <ai_platform_network_create+0x32e>
 800ebbc:	6813      	ldr	r3, [r2, #0]
 800ebbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 80c4 	beq.w	800ed50 <ai_platform_network_create+0x27c>
 800ebc8:	f7ff fa92 	bl	800e0f0 <_ai_platform_release_crc>
 800ebcc:	2c00      	cmp	r4, #0
 800ebce:	f000 80aa 	beq.w	800ed26 <ai_platform_network_create+0x252>
 800ebd2:	4b70      	ldr	r3, [pc, #448]	; (800ed94 <ai_platform_network_create+0x2c0>)
 800ebd4:	602b      	str	r3, [r5, #0]
 800ebd6:	6025      	str	r5, [r4, #0]
 800ebd8:	f000 fefa 	bl	800f9d0 <core_init>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f000 8090 	beq.w	800ed02 <ai_platform_network_create+0x22e>
 800ebe2:	f7ff fa83 	bl	800e0ec <_ai_platform_acquire_crc>
 800ebe6:	4b68      	ldr	r3, [pc, #416]	; (800ed88 <ai_platform_network_create+0x2b4>)
 800ebe8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebf2:	185a      	adds	r2, r3, r1
 800ebf4:	2a01      	cmp	r2, #1
 800ebf6:	f240 80b9 	bls.w	800ed6c <ai_platform_network_create+0x298>
 800ebfa:	f240 4249 	movw	r2, #1097	; 0x449
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	f000 80b4 	beq.w	800ed6c <ai_platform_network_create+0x298>
 800ec04:	4a61      	ldr	r2, [pc, #388]	; (800ed8c <ai_platform_network_create+0x2b8>)
 800ec06:	6813      	ldr	r3, [r2, #0]
 800ec08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec0c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ec10:	f000 80c8 	beq.w	800eda4 <ai_platform_network_create+0x2d0>
 800ec14:	6813      	ldr	r3, [r2, #0]
 800ec16:	f240 4183 	movw	r1, #1155	; 0x483
 800ec1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec1e:	428b      	cmp	r3, r1
 800ec20:	f000 8107 	beq.w	800ee32 <ai_platform_network_create+0x35e>
 800ec24:	6813      	ldr	r3, [r2, #0]
 800ec26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec2a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ec2e:	f000 8111 	beq.w	800ee54 <ai_platform_network_create+0x380>
 800ec32:	6813      	ldr	r3, [r2, #0]
 800ec34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f040 80c3 	bne.w	800edc4 <ai_platform_network_create+0x2f0>
 800ec3e:	4b54      	ldr	r3, [pc, #336]	; (800ed90 <ai_platform_network_create+0x2bc>)
 800ec40:	2201      	movs	r2, #1
 800ec42:	609a      	str	r2, [r3, #8]
 800ec44:	689a      	ldr	r2, [r3, #8]
 800ec46:	2a00      	cmp	r2, #0
 800ec48:	d1fc      	bne.n	800ec44 <ai_platform_network_create+0x170>
 800ec4a:	4a53      	ldr	r2, [pc, #332]	; (800ed98 <ai_platform_network_create+0x2c4>)
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	4b52      	ldr	r3, [pc, #328]	; (800ed9c <ai_platform_network_create+0x2c8>)
 800ec52:	429a      	cmp	r2, r3
 800ec54:	f000 80b6 	beq.w	800edc4 <ai_platform_network_create+0x2f0>
 800ec58:	e7fe      	b.n	800ec58 <ai_platform_network_create+0x184>
 800ec5a:	4b4d      	ldr	r3, [pc, #308]	; (800ed90 <ai_platform_network_create+0x2bc>)
 800ec5c:	2218      	movs	r2, #24
 800ec5e:	609a      	str	r2, [r3, #8]
 800ec60:	689a      	ldr	r2, [r3, #8]
 800ec62:	2a18      	cmp	r2, #24
 800ec64:	d027      	beq.n	800ecb6 <ai_platform_network_create+0x1e2>
 800ec66:	4608      	mov	r0, r1
 800ec68:	f7ff fa42 	bl	800e0f0 <_ai_platform_release_crc>
 800ec6c:	f244 1033 	movw	r0, #16691	; 0x4133
 800ec70:	b003      	add	sp, #12
 800ec72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec76:	4a4a      	ldr	r2, [pc, #296]	; (800eda0 <ai_platform_network_create+0x2cc>)
 800ec78:	2318      	movs	r3, #24
 800ec7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ec7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ec82:	2b18      	cmp	r3, #24
 800ec84:	d1f0      	bne.n	800ec68 <ai_platform_network_create+0x194>
 800ec86:	2301      	movs	r3, #1
 800ec88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ec8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d1fb      	bne.n	800ec8c <ai_platform_network_create+0x1b8>
 800ec94:	e767      	b.n	800eb66 <ai_platform_network_create+0x92>
 800ec96:	4a42      	ldr	r2, [pc, #264]	; (800eda0 <ai_platform_network_create+0x2cc>)
 800ec98:	2318      	movs	r3, #24
 800ec9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ec9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eca2:	2b18      	cmp	r3, #24
 800eca4:	d1e0      	bne.n	800ec68 <ai_platform_network_create+0x194>
 800eca6:	2301      	movs	r3, #1
 800eca8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ecac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1fb      	bne.n	800ecac <ai_platform_network_create+0x1d8>
 800ecb4:	e757      	b.n	800eb66 <ai_platform_network_create+0x92>
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	609a      	str	r2, [r3, #8]
 800ecba:	689a      	ldr	r2, [r3, #8]
 800ecbc:	2a00      	cmp	r2, #0
 800ecbe:	d1fc      	bne.n	800ecba <ai_platform_network_create+0x1e6>
 800ecc0:	e751      	b.n	800eb66 <ai_platform_network_create+0x92>
 800ecc2:	4a33      	ldr	r2, [pc, #204]	; (800ed90 <ai_platform_network_create+0x2bc>)
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	6093      	str	r3, [r2, #8]
 800ecc8:	6891      	ldr	r1, [r2, #8]
 800ecca:	2900      	cmp	r1, #0
 800eccc:	d1fc      	bne.n	800ecc8 <ai_platform_network_create+0x1f4>
 800ecce:	4b32      	ldr	r3, [pc, #200]	; (800ed98 <ai_platform_network_create+0x2c4>)
 800ecd0:	6013      	str	r3, [r2, #0]
 800ecd2:	4b32      	ldr	r3, [pc, #200]	; (800ed9c <ai_platform_network_create+0x2c8>)
 800ecd4:	6812      	ldr	r2, [r2, #0]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	f43f af76 	beq.w	800ebc8 <ai_platform_network_create+0xf4>
 800ecdc:	e7fe      	b.n	800ecdc <ai_platform_network_create+0x208>
 800ecde:	4a30      	ldr	r2, [pc, #192]	; (800eda0 <ai_platform_network_create+0x2cc>)
 800ece0:	2301      	movs	r3, #1
 800ece2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ece6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1fb      	bne.n	800ece6 <ai_platform_network_create+0x212>
 800ecee:	4b2a      	ldr	r3, [pc, #168]	; (800ed98 <ai_platform_network_create+0x2c4>)
 800ecf0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ecf4:	4b29      	ldr	r3, [pc, #164]	; (800ed9c <ai_platform_network_create+0x2c8>)
 800ecf6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	f43f af64 	beq.w	800ebc8 <ai_platform_network_create+0xf4>
 800ed00:	e7fe      	b.n	800ed00 <ai_platform_network_create+0x22c>
 800ed02:	f04f 0930 	mov.w	r9, #48	; 0x30
 800ed06:	2300      	movs	r3, #0
 800ed08:	6023      	str	r3, [r4, #0]
 800ed0a:	2410      	movs	r4, #16
 800ed0c:	4642      	mov	r2, r8
 800ed0e:	4639      	mov	r1, r7
 800ed10:	4630      	mov	r0, r6
 800ed12:	f005 fc71 	bl	80145f8 <ai_version_get>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2000      	movs	r0, #0
 800ed1a:	64ab      	str	r3, [r5, #72]	; 0x48
 800ed1c:	f369 0007 	bfi	r0, r9, #0, #8
 800ed20:	f364 201f 	bfi	r0, r4, #8, #24
 800ed24:	e7a4      	b.n	800ec70 <ai_platform_network_create+0x19c>
 800ed26:	f241 0010 	movw	r0, #4112	; 0x1010
 800ed2a:	e7a1      	b.n	800ec70 <ai_platform_network_create+0x19c>
 800ed2c:	4a1c      	ldr	r2, [pc, #112]	; (800eda0 <ai_platform_network_create+0x2cc>)
 800ed2e:	2301      	movs	r3, #1
 800ed30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ed34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1fb      	bne.n	800ed34 <ai_platform_network_create+0x260>
 800ed3c:	4b16      	ldr	r3, [pc, #88]	; (800ed98 <ai_platform_network_create+0x2c4>)
 800ed3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ed42:	4b16      	ldr	r3, [pc, #88]	; (800ed9c <ai_platform_network_create+0x2c8>)
 800ed44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	f43f af3d 	beq.w	800ebc8 <ai_platform_network_create+0xf4>
 800ed4e:	e7fe      	b.n	800ed4e <ai_platform_network_create+0x27a>
 800ed50:	4a0f      	ldr	r2, [pc, #60]	; (800ed90 <ai_platform_network_create+0x2bc>)
 800ed52:	2301      	movs	r3, #1
 800ed54:	6093      	str	r3, [r2, #8]
 800ed56:	6893      	ldr	r3, [r2, #8]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1fc      	bne.n	800ed56 <ai_platform_network_create+0x282>
 800ed5c:	4b0e      	ldr	r3, [pc, #56]	; (800ed98 <ai_platform_network_create+0x2c4>)
 800ed5e:	6013      	str	r3, [r2, #0]
 800ed60:	4b0e      	ldr	r3, [pc, #56]	; (800ed9c <ai_platform_network_create+0x2c8>)
 800ed62:	6812      	ldr	r2, [r2, #0]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	f43f af2f 	beq.w	800ebc8 <ai_platform_network_create+0xf4>
 800ed6a:	e7fe      	b.n	800ed6a <ai_platform_network_create+0x296>
 800ed6c:	4a08      	ldr	r2, [pc, #32]	; (800ed90 <ai_platform_network_create+0x2bc>)
 800ed6e:	2301      	movs	r3, #1
 800ed70:	6093      	str	r3, [r2, #8]
 800ed72:	6893      	ldr	r3, [r2, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1fc      	bne.n	800ed72 <ai_platform_network_create+0x29e>
 800ed78:	4b07      	ldr	r3, [pc, #28]	; (800ed98 <ai_platform_network_create+0x2c4>)
 800ed7a:	6013      	str	r3, [r2, #0]
 800ed7c:	4b07      	ldr	r3, [pc, #28]	; (800ed9c <ai_platform_network_create+0x2c8>)
 800ed7e:	6812      	ldr	r2, [r2, #0]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d01f      	beq.n	800edc4 <ai_platform_network_create+0x2f0>
 800ed84:	e7fe      	b.n	800ed84 <ai_platform_network_create+0x2b0>
 800ed86:	bf00      	nop
 800ed88:	e0042000 	.word	0xe0042000
 800ed8c:	5c001000 	.word	0x5c001000
 800ed90:	40023000 	.word	0x40023000
 800ed94:	a1c00100 	.word	0xa1c00100
 800ed98:	f407a5c2 	.word	0xf407a5c2
 800ed9c:	b5e8b5cd 	.word	0xb5e8b5cd
 800eda0:	58024000 	.word	0x58024000
 800eda4:	4a33      	ldr	r2, [pc, #204]	; (800ee74 <ai_platform_network_create+0x3a0>)
 800eda6:	2301      	movs	r3, #1
 800eda8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800edac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1fb      	bne.n	800edac <ai_platform_network_create+0x2d8>
 800edb4:	4b30      	ldr	r3, [pc, #192]	; (800ee78 <ai_platform_network_create+0x3a4>)
 800edb6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800edba:	4b30      	ldr	r3, [pc, #192]	; (800ee7c <ai_platform_network_create+0x3a8>)
 800edbc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d12c      	bne.n	800ee1e <ai_platform_network_create+0x34a>
 800edc4:	f7ff f994 	bl	800e0f0 <_ai_platform_release_crc>
 800edc8:	2200      	movs	r2, #0
 800edca:	4639      	mov	r1, r7
 800edcc:	4630      	mov	r0, r6
 800edce:	f005 fc13 	bl	80145f8 <ai_version_get>
 800edd2:	4681      	mov	r9, r0
 800edd4:	2200      	movs	r2, #0
 800edd6:	2105      	movs	r1, #5
 800edd8:	2001      	movs	r0, #1
 800edda:	f005 fc0d 	bl	80145f8 <ai_version_get>
 800edde:	4581      	cmp	r9, r0
 800ede0:	d01e      	beq.n	800ee20 <ai_platform_network_create+0x34c>
 800ede2:	f04f 0901 	mov.w	r9, #1
 800ede6:	e78e      	b.n	800ed06 <ai_platform_network_create+0x232>
 800ede8:	4b25      	ldr	r3, [pc, #148]	; (800ee80 <ai_platform_network_create+0x3ac>)
 800edea:	2218      	movs	r2, #24
 800edec:	609a      	str	r2, [r3, #8]
 800edee:	689a      	ldr	r2, [r3, #8]
 800edf0:	2a18      	cmp	r2, #24
 800edf2:	f47f af39 	bne.w	800ec68 <ai_platform_network_create+0x194>
 800edf6:	2201      	movs	r2, #1
 800edf8:	609a      	str	r2, [r3, #8]
 800edfa:	689a      	ldr	r2, [r3, #8]
 800edfc:	2a00      	cmp	r2, #0
 800edfe:	d1fc      	bne.n	800edfa <ai_platform_network_create+0x326>
 800ee00:	e6b1      	b.n	800eb66 <ai_platform_network_create+0x92>
 800ee02:	4a1f      	ldr	r2, [pc, #124]	; (800ee80 <ai_platform_network_create+0x3ac>)
 800ee04:	2301      	movs	r3, #1
 800ee06:	6093      	str	r3, [r2, #8]
 800ee08:	6893      	ldr	r3, [r2, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1fc      	bne.n	800ee08 <ai_platform_network_create+0x334>
 800ee0e:	4b1a      	ldr	r3, [pc, #104]	; (800ee78 <ai_platform_network_create+0x3a4>)
 800ee10:	6013      	str	r3, [r2, #0]
 800ee12:	4b1a      	ldr	r3, [pc, #104]	; (800ee7c <ai_platform_network_create+0x3a8>)
 800ee14:	6812      	ldr	r2, [r2, #0]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	f43f aed6 	beq.w	800ebc8 <ai_platform_network_create+0xf4>
 800ee1c:	e7fe      	b.n	800ee1c <ai_platform_network_create+0x348>
 800ee1e:	e7fe      	b.n	800ee1e <ai_platform_network_create+0x34a>
 800ee20:	4b18      	ldr	r3, [pc, #96]	; (800ee84 <ai_platform_network_create+0x3b0>)
 800ee22:	a801      	add	r0, sp, #4
 800ee24:	9301      	str	r3, [sp, #4]
 800ee26:	f005 fb55 	bl	80144d4 <ai_check_custom_types>
 800ee2a:	b300      	cbz	r0, 800ee6e <ai_platform_network_create+0x39a>
 800ee2c:	2400      	movs	r4, #0
 800ee2e:	46a1      	mov	r9, r4
 800ee30:	e76c      	b.n	800ed0c <ai_platform_network_create+0x238>
 800ee32:	4b10      	ldr	r3, [pc, #64]	; (800ee74 <ai_platform_network_create+0x3a0>)
 800ee34:	2201      	movs	r2, #1
 800ee36:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800ee3a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800ee3e:	2a00      	cmp	r2, #0
 800ee40:	d1fb      	bne.n	800ee3a <ai_platform_network_create+0x366>
 800ee42:	4a0d      	ldr	r2, [pc, #52]	; (800ee78 <ai_platform_network_create+0x3a4>)
 800ee44:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800ee48:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800ee4c:	4b0b      	ldr	r3, [pc, #44]	; (800ee7c <ai_platform_network_create+0x3a8>)
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d0b8      	beq.n	800edc4 <ai_platform_network_create+0x2f0>
 800ee52:	e7fe      	b.n	800ee52 <ai_platform_network_create+0x37e>
 800ee54:	4b0a      	ldr	r3, [pc, #40]	; (800ee80 <ai_platform_network_create+0x3ac>)
 800ee56:	2201      	movs	r2, #1
 800ee58:	609a      	str	r2, [r3, #8]
 800ee5a:	689a      	ldr	r2, [r3, #8]
 800ee5c:	2a00      	cmp	r2, #0
 800ee5e:	d1fc      	bne.n	800ee5a <ai_platform_network_create+0x386>
 800ee60:	4a05      	ldr	r2, [pc, #20]	; (800ee78 <ai_platform_network_create+0x3a4>)
 800ee62:	601a      	str	r2, [r3, #0]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <ai_platform_network_create+0x3a8>)
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d0ab      	beq.n	800edc4 <ai_platform_network_create+0x2f0>
 800ee6c:	e7fe      	b.n	800ee6c <ai_platform_network_create+0x398>
 800ee6e:	f04f 0902 	mov.w	r9, #2
 800ee72:	e748      	b.n	800ed06 <ai_platform_network_create+0x232>
 800ee74:	58024000 	.word	0x58024000
 800ee78:	f407a5c2 	.word	0xf407a5c2
 800ee7c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ee80:	40023000 	.word	0x40023000
 800ee84:	84048403 	.word	0x84048403

0800ee88 <ai_platform_network_init>:
 800ee88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d052      	beq.n	800ef36 <ai_platform_network_init+0xae>
 800ee90:	4bab      	ldr	r3, [pc, #684]	; (800f140 <ai_platform_network_init+0x2b8>)
 800ee92:	4604      	mov	r4, r0
 800ee94:	6802      	ldr	r2, [r0, #0]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d14d      	bne.n	800ef36 <ai_platform_network_init+0xae>
 800ee9a:	460d      	mov	r5, r1
 800ee9c:	f7ff f926 	bl	800e0ec <_ai_platform_acquire_crc>
 800eea0:	4ba8      	ldr	r3, [pc, #672]	; (800f144 <ai_platform_network_init+0x2bc>)
 800eea2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eeac:	189a      	adds	r2, r3, r2
 800eeae:	2a01      	cmp	r2, #1
 800eeb0:	f240 809b 	bls.w	800efea <ai_platform_network_init+0x162>
 800eeb4:	f240 4249 	movw	r2, #1097	; 0x449
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	f000 8096 	beq.w	800efea <ai_platform_network_init+0x162>
 800eebe:	4aa2      	ldr	r2, [pc, #648]	; (800f148 <ai_platform_network_init+0x2c0>)
 800eec0:	6813      	ldr	r3, [r2, #0]
 800eec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eec6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eeca:	f000 809d 	beq.w	800f008 <ai_platform_network_init+0x180>
 800eece:	6813      	ldr	r3, [r2, #0]
 800eed0:	f240 4183 	movw	r1, #1155	; 0x483
 800eed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eed8:	428b      	cmp	r3, r1
 800eeda:	f000 80e4 	beq.w	800f0a6 <ai_platform_network_init+0x21e>
 800eede:	6813      	ldr	r3, [r2, #0]
 800eee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eee4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800eee8:	f000 811b 	beq.w	800f122 <ai_platform_network_init+0x29a>
 800eeec:	6813      	ldr	r3, [r2, #0]
 800eeee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f000 80f9 	beq.w	800f0ea <ai_platform_network_init+0x262>
 800eef8:	f7ff f8fa 	bl	800e0f0 <_ai_platform_release_crc>
 800eefc:	2d00      	cmp	r5, #0
 800eefe:	f000 8147 	beq.w	800f190 <ai_platform_network_init+0x308>
 800ef02:	4b92      	ldr	r3, [pc, #584]	; (800f14c <ai_platform_network_init+0x2c4>)
 800ef04:	682a      	ldr	r2, [r5, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	f040 8090 	bne.w	800f02c <ai_platform_network_init+0x1a4>
 800ef0c:	692b      	ldr	r3, [r5, #16]
 800ef0e:	89ae      	ldrh	r6, [r5, #12]
 800ef10:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800ef14:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800ef18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef1a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800ef1e:	2303      	movs	r3, #3
 800ef20:	84a6      	strh	r6, [r4, #36]	; 0x24
 800ef22:	4626      	mov	r6, r4
 800ef24:	4620      	mov	r0, r4
 800ef26:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800ef2a:	60e3      	str	r3, [r4, #12]
 800ef2c:	f005 fafa 	bl	8014524 <ai_layers_init_all>
 800ef30:	4630      	mov	r0, r6
 800ef32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef36:	f7ff f8d9 	bl	800e0ec <_ai_platform_acquire_crc>
 800ef3a:	4b82      	ldr	r3, [pc, #520]	; (800f144 <ai_platform_network_init+0x2bc>)
 800ef3c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef46:	185a      	adds	r2, r3, r1
 800ef48:	2a01      	cmp	r2, #1
 800ef4a:	d92b      	bls.n	800efa4 <ai_platform_network_init+0x11c>
 800ef4c:	f240 4249 	movw	r2, #1097	; 0x449
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d027      	beq.n	800efa4 <ai_platform_network_init+0x11c>
 800ef54:	4a7c      	ldr	r2, [pc, #496]	; (800f148 <ai_platform_network_init+0x2c0>)
 800ef56:	6813      	ldr	r3, [r2, #0]
 800ef58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef5c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ef60:	d02d      	beq.n	800efbe <ai_platform_network_init+0x136>
 800ef62:	6813      	ldr	r3, [r2, #0]
 800ef64:	f240 4183 	movw	r1, #1155	; 0x483
 800ef68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef6c:	428b      	cmp	r3, r1
 800ef6e:	f000 8089 	beq.w	800f084 <ai_platform_network_init+0x1fc>
 800ef72:	6813      	ldr	r3, [r2, #0]
 800ef74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef78:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ef7c:	f000 80c3 	beq.w	800f106 <ai_platform_network_init+0x27e>
 800ef80:	6813      	ldr	r3, [r2, #0]
 800ef82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d129      	bne.n	800efde <ai_platform_network_init+0x156>
 800ef8a:	4a71      	ldr	r2, [pc, #452]	; (800f150 <ai_platform_network_init+0x2c8>)
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	6093      	str	r3, [r2, #8]
 800ef90:	6893      	ldr	r3, [r2, #8]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1fc      	bne.n	800ef90 <ai_platform_network_init+0x108>
 800ef96:	496f      	ldr	r1, [pc, #444]	; (800f154 <ai_platform_network_init+0x2cc>)
 800ef98:	4b6f      	ldr	r3, [pc, #444]	; (800f158 <ai_platform_network_init+0x2d0>)
 800ef9a:	6011      	str	r1, [r2, #0]
 800ef9c:	6812      	ldr	r2, [r2, #0]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d01d      	beq.n	800efde <ai_platform_network_init+0x156>
 800efa2:	e7fe      	b.n	800efa2 <ai_platform_network_init+0x11a>
 800efa4:	4a6a      	ldr	r2, [pc, #424]	; (800f150 <ai_platform_network_init+0x2c8>)
 800efa6:	2301      	movs	r3, #1
 800efa8:	6093      	str	r3, [r2, #8]
 800efaa:	6893      	ldr	r3, [r2, #8]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1fc      	bne.n	800efaa <ai_platform_network_init+0x122>
 800efb0:	4968      	ldr	r1, [pc, #416]	; (800f154 <ai_platform_network_init+0x2cc>)
 800efb2:	4b69      	ldr	r3, [pc, #420]	; (800f158 <ai_platform_network_init+0x2d0>)
 800efb4:	6011      	str	r1, [r2, #0]
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d010      	beq.n	800efde <ai_platform_network_init+0x156>
 800efbc:	e7fe      	b.n	800efbc <ai_platform_network_init+0x134>
 800efbe:	4a67      	ldr	r2, [pc, #412]	; (800f15c <ai_platform_network_init+0x2d4>)
 800efc0:	2301      	movs	r3, #1
 800efc2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800efc6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1fb      	bne.n	800efc6 <ai_platform_network_init+0x13e>
 800efce:	4961      	ldr	r1, [pc, #388]	; (800f154 <ai_platform_network_init+0x2cc>)
 800efd0:	4b61      	ldr	r3, [pc, #388]	; (800f158 <ai_platform_network_init+0x2d0>)
 800efd2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800efd6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800efda:	429a      	cmp	r2, r3
 800efdc:	d113      	bne.n	800f006 <ai_platform_network_init+0x17e>
 800efde:	2600      	movs	r6, #0
 800efe0:	f7ff f886 	bl	800e0f0 <_ai_platform_release_crc>
 800efe4:	4630      	mov	r0, r6
 800efe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efea:	4a59      	ldr	r2, [pc, #356]	; (800f150 <ai_platform_network_init+0x2c8>)
 800efec:	2301      	movs	r3, #1
 800efee:	6093      	str	r3, [r2, #8]
 800eff0:	6893      	ldr	r3, [r2, #8]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1fc      	bne.n	800eff0 <ai_platform_network_init+0x168>
 800eff6:	4b57      	ldr	r3, [pc, #348]	; (800f154 <ai_platform_network_init+0x2cc>)
 800eff8:	6013      	str	r3, [r2, #0]
 800effa:	4b57      	ldr	r3, [pc, #348]	; (800f158 <ai_platform_network_init+0x2d0>)
 800effc:	6812      	ldr	r2, [r2, #0]
 800effe:	429a      	cmp	r2, r3
 800f000:	f43f af7a 	beq.w	800eef8 <ai_platform_network_init+0x70>
 800f004:	e7fe      	b.n	800f004 <ai_platform_network_init+0x17c>
 800f006:	e7fe      	b.n	800f006 <ai_platform_network_init+0x17e>
 800f008:	4a54      	ldr	r2, [pc, #336]	; (800f15c <ai_platform_network_init+0x2d4>)
 800f00a:	2301      	movs	r3, #1
 800f00c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f010:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f014:	2b00      	cmp	r3, #0
 800f016:	d1fb      	bne.n	800f010 <ai_platform_network_init+0x188>
 800f018:	4b4e      	ldr	r3, [pc, #312]	; (800f154 <ai_platform_network_init+0x2cc>)
 800f01a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f01e:	4b4e      	ldr	r3, [pc, #312]	; (800f158 <ai_platform_network_init+0x2d0>)
 800f020:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f024:	429a      	cmp	r2, r3
 800f026:	f43f af67 	beq.w	800eef8 <ai_platform_network_init+0x70>
 800f02a:	e7fe      	b.n	800f02a <ai_platform_network_init+0x1a2>
 800f02c:	2101      	movs	r1, #1
 800f02e:	4628      	mov	r0, r5
 800f030:	f105 081c 	add.w	r8, r5, #28
 800f034:	686e      	ldr	r6, [r5, #4]
 800f036:	f7ff f80b 	bl	800e050 <ai_buffer_get_size>
 800f03a:	4607      	mov	r7, r0
 800f03c:	2101      	movs	r1, #1
 800f03e:	4640      	mov	r0, r8
 800f040:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800f044:	f7ff f804 	bl	800e050 <ai_buffer_get_size>
 800f048:	2f00      	cmp	r7, #0
 800f04a:	d13e      	bne.n	800f0ca <ai_platform_network_init+0x242>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f000 808e 	beq.w	800f16e <ai_platform_network_init+0x2e6>
 800f052:	f1b9 0f00 	cmp.w	r9, #0
 800f056:	f000 8094 	beq.w	800f182 <ai_platform_network_init+0x2fa>
 800f05a:	f04f 0c01 	mov.w	ip, #1
 800f05e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800f060:	2600      	movs	r6, #0
 800f062:	83e7      	strh	r7, [r4, #30]
 800f064:	4563      	cmp	r3, ip
 800f066:	83a6      	strh	r6, [r4, #28]
 800f068:	d37a      	bcc.n	800f160 <ai_platform_network_init+0x2d8>
 800f06a:	f1bc 0f00 	cmp.w	ip, #0
 800f06e:	f000 809c 	beq.w	800f1aa <ai_platform_network_init+0x322>
 800f072:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f074:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800f078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f07a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800f07e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f082:	e74c      	b.n	800ef1e <ai_platform_network_init+0x96>
 800f084:	4a35      	ldr	r2, [pc, #212]	; (800f15c <ai_platform_network_init+0x2d4>)
 800f086:	2301      	movs	r3, #1
 800f088:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f08c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f090:	2b00      	cmp	r3, #0
 800f092:	d1fb      	bne.n	800f08c <ai_platform_network_init+0x204>
 800f094:	492f      	ldr	r1, [pc, #188]	; (800f154 <ai_platform_network_init+0x2cc>)
 800f096:	4b30      	ldr	r3, [pc, #192]	; (800f158 <ai_platform_network_init+0x2d0>)
 800f098:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f09c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d09c      	beq.n	800efde <ai_platform_network_init+0x156>
 800f0a4:	e7fe      	b.n	800f0a4 <ai_platform_network_init+0x21c>
 800f0a6:	4a2d      	ldr	r2, [pc, #180]	; (800f15c <ai_platform_network_init+0x2d4>)
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f0ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1fb      	bne.n	800f0ae <ai_platform_network_init+0x226>
 800f0b6:	4b27      	ldr	r3, [pc, #156]	; (800f154 <ai_platform_network_init+0x2cc>)
 800f0b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f0bc:	4b26      	ldr	r3, [pc, #152]	; (800f158 <ai_platform_network_init+0x2d0>)
 800f0be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	f43f af18 	beq.w	800eef8 <ai_platform_network_init+0x70>
 800f0c8:	e7fe      	b.n	800f0c8 <ai_platform_network_init+0x240>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d153      	bne.n	800f176 <ai_platform_network_init+0x2ee>
 800f0ce:	4680      	mov	r8, r0
 800f0d0:	4684      	mov	ip, r0
 800f0d2:	2e00      	cmp	r6, #0
 800f0d4:	d063      	beq.n	800f19e <ai_platform_network_init+0x316>
 800f0d6:	8be6      	ldrh	r6, [r4, #30]
 800f0d8:	2e00      	cmp	r6, #0
 800f0da:	d168      	bne.n	800f1ae <ai_platform_network_init+0x326>
 800f0dc:	2212      	movs	r2, #18
 800f0de:	2116      	movs	r1, #22
 800f0e0:	f104 0010 	add.w	r0, r4, #16
 800f0e4:	f000 fc7c 	bl	800f9e0 <core_set_error>
 800f0e8:	e77c      	b.n	800efe4 <ai_platform_network_init+0x15c>
 800f0ea:	4a19      	ldr	r2, [pc, #100]	; (800f150 <ai_platform_network_init+0x2c8>)
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	6093      	str	r3, [r2, #8]
 800f0f0:	6893      	ldr	r3, [r2, #8]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1fc      	bne.n	800f0f0 <ai_platform_network_init+0x268>
 800f0f6:	4b17      	ldr	r3, [pc, #92]	; (800f154 <ai_platform_network_init+0x2cc>)
 800f0f8:	6013      	str	r3, [r2, #0]
 800f0fa:	4b17      	ldr	r3, [pc, #92]	; (800f158 <ai_platform_network_init+0x2d0>)
 800f0fc:	6812      	ldr	r2, [r2, #0]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	f43f aefa 	beq.w	800eef8 <ai_platform_network_init+0x70>
 800f104:	e7fe      	b.n	800f104 <ai_platform_network_init+0x27c>
 800f106:	4a12      	ldr	r2, [pc, #72]	; (800f150 <ai_platform_network_init+0x2c8>)
 800f108:	2301      	movs	r3, #1
 800f10a:	6093      	str	r3, [r2, #8]
 800f10c:	6893      	ldr	r3, [r2, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1fc      	bne.n	800f10c <ai_platform_network_init+0x284>
 800f112:	4910      	ldr	r1, [pc, #64]	; (800f154 <ai_platform_network_init+0x2cc>)
 800f114:	4b10      	ldr	r3, [pc, #64]	; (800f158 <ai_platform_network_init+0x2d0>)
 800f116:	6011      	str	r1, [r2, #0]
 800f118:	6812      	ldr	r2, [r2, #0]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	f43f af5f 	beq.w	800efde <ai_platform_network_init+0x156>
 800f120:	e7fe      	b.n	800f120 <ai_platform_network_init+0x298>
 800f122:	4a0b      	ldr	r2, [pc, #44]	; (800f150 <ai_platform_network_init+0x2c8>)
 800f124:	2301      	movs	r3, #1
 800f126:	6093      	str	r3, [r2, #8]
 800f128:	6893      	ldr	r3, [r2, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1fc      	bne.n	800f128 <ai_platform_network_init+0x2a0>
 800f12e:	4b09      	ldr	r3, [pc, #36]	; (800f154 <ai_platform_network_init+0x2cc>)
 800f130:	6013      	str	r3, [r2, #0]
 800f132:	4b09      	ldr	r3, [pc, #36]	; (800f158 <ai_platform_network_init+0x2d0>)
 800f134:	6812      	ldr	r2, [r2, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	f43f aede 	beq.w	800eef8 <ai_platform_network_init+0x70>
 800f13c:	e7fe      	b.n	800f13c <ai_platform_network_init+0x2b4>
 800f13e:	bf00      	nop
 800f140:	a1c00100 	.word	0xa1c00100
 800f144:	e0042000 	.word	0xe0042000
 800f148:	5c001000 	.word	0x5c001000
 800f14c:	a1facade 	.word	0xa1facade
 800f150:	40023000 	.word	0x40023000
 800f154:	f407a5c2 	.word	0xf407a5c2
 800f158:	b5e8b5cd 	.word	0xb5e8b5cd
 800f15c:	58024000 	.word	0x58024000
 800f160:	2213      	movs	r2, #19
 800f162:	2116      	movs	r1, #22
 800f164:	f104 0010 	add.w	r0, r4, #16
 800f168:	f000 fc3a 	bl	800f9e0 <core_set_error>
 800f16c:	e73a      	b.n	800efe4 <ai_platform_network_init+0x15c>
 800f16e:	4607      	mov	r7, r0
 800f170:	4680      	mov	r8, r0
 800f172:	4684      	mov	ip, r0
 800f174:	e773      	b.n	800f05e <ai_platform_network_init+0x1d6>
 800f176:	f1b9 0f00 	cmp.w	r9, #0
 800f17a:	d002      	beq.n	800f182 <ai_platform_network_init+0x2fa>
 800f17c:	f04f 0c01 	mov.w	ip, #1
 800f180:	e7a7      	b.n	800f0d2 <ai_platform_network_init+0x24a>
 800f182:	2110      	movs	r1, #16
 800f184:	2213      	movs	r2, #19
 800f186:	2600      	movs	r6, #0
 800f188:	1860      	adds	r0, r4, r1
 800f18a:	f000 fc29 	bl	800f9e0 <core_set_error>
 800f18e:	e729      	b.n	800efe4 <ai_platform_network_init+0x15c>
 800f190:	2110      	movs	r1, #16
 800f192:	2211      	movs	r2, #17
 800f194:	462e      	mov	r6, r5
 800f196:	1860      	adds	r0, r4, r1
 800f198:	f000 fc22 	bl	800f9e0 <core_set_error>
 800f19c:	e722      	b.n	800efe4 <ai_platform_network_init+0x15c>
 800f19e:	2110      	movs	r1, #16
 800f1a0:	2212      	movs	r2, #18
 800f1a2:	1860      	adds	r0, r4, r1
 800f1a4:	f000 fc1c 	bl	800f9e0 <core_set_error>
 800f1a8:	e71c      	b.n	800efe4 <ai_platform_network_init+0x15c>
 800f1aa:	4666      	mov	r6, ip
 800f1ac:	e6b7      	b.n	800ef1e <ai_platform_network_init+0x96>
 800f1ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1b0:	6a26      	ldr	r6, [r4, #32]
 800f1b2:	2701      	movs	r7, #1
 800f1b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f1b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f1ba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f1be:	e74e      	b.n	800f05e <ai_platform_network_init+0x1d6>

0800f1c0 <ai_platform_network_post_init>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d04e      	beq.n	800f264 <ai_platform_network_post_init+0xa4>
 800f1c6:	4b8c      	ldr	r3, [pc, #560]	; (800f3f8 <ai_platform_network_post_init+0x238>)
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	6802      	ldr	r2, [r0, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d149      	bne.n	800f264 <ai_platform_network_post_init+0xa4>
 800f1d0:	f7fe ff8c 	bl	800e0ec <_ai_platform_acquire_crc>
 800f1d4:	4b89      	ldr	r3, [pc, #548]	; (800f3fc <ai_platform_network_post_init+0x23c>)
 800f1d6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f1e0:	189a      	adds	r2, r3, r2
 800f1e2:	2a01      	cmp	r2, #1
 800f1e4:	f240 8095 	bls.w	800f312 <ai_platform_network_post_init+0x152>
 800f1e8:	f240 4249 	movw	r2, #1097	; 0x449
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	f000 8090 	beq.w	800f312 <ai_platform_network_post_init+0x152>
 800f1f2:	4a83      	ldr	r2, [pc, #524]	; (800f400 <ai_platform_network_post_init+0x240>)
 800f1f4:	6813      	ldr	r3, [r2, #0]
 800f1f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f1fa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f1fe:	f000 8096 	beq.w	800f32e <ai_platform_network_post_init+0x16e>
 800f202:	6813      	ldr	r3, [r2, #0]
 800f204:	f240 4183 	movw	r1, #1155	; 0x483
 800f208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f20c:	428b      	cmp	r3, r1
 800f20e:	f000 80b8 	beq.w	800f382 <ai_platform_network_post_init+0x1c2>
 800f212:	6813      	ldr	r3, [r2, #0]
 800f214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f218:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f21c:	f000 80de 	beq.w	800f3dc <ai_platform_network_post_init+0x21c>
 800f220:	6813      	ldr	r3, [r2, #0]
 800f222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f226:	2b00      	cmp	r3, #0
 800f228:	f000 80bd 	beq.w	800f3a6 <ai_platform_network_post_init+0x1e6>
 800f22c:	f7fe ff60 	bl	800e0f0 <_ai_platform_release_crc>
 800f230:	68e3      	ldr	r3, [r4, #12]
 800f232:	f013 0502 	ands.w	r5, r3, #2
 800f236:	f000 808c 	beq.w	800f352 <ai_platform_network_post_init+0x192>
 800f23a:	4620      	mov	r0, r4
 800f23c:	f005 f980 	bl	8014540 <ai_layers_post_init_all>
 800f240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f242:	b16b      	cbz	r3, 800f260 <ai_platform_network_post_init+0xa0>
 800f244:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f246:	e007      	b.n	800f258 <ai_platform_network_post_init+0x98>
 800f248:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800f24c:	4798      	blx	r3
 800f24e:	692b      	ldr	r3, [r5, #16]
 800f250:	b133      	cbz	r3, 800f260 <ai_platform_network_post_init+0xa0>
 800f252:	42ab      	cmp	r3, r5
 800f254:	461d      	mov	r5, r3
 800f256:	d003      	beq.n	800f260 <ai_platform_network_post_init+0xa0>
 800f258:	4629      	mov	r1, r5
 800f25a:	2000      	movs	r0, #0
 800f25c:	2d00      	cmp	r5, #0
 800f25e:	d1f3      	bne.n	800f248 <ai_platform_network_post_init+0x88>
 800f260:	2001      	movs	r0, #1
 800f262:	bd38      	pop	{r3, r4, r5, pc}
 800f264:	f7fe ff42 	bl	800e0ec <_ai_platform_acquire_crc>
 800f268:	4b64      	ldr	r3, [pc, #400]	; (800f3fc <ai_platform_network_post_init+0x23c>)
 800f26a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f274:	185a      	adds	r2, r3, r1
 800f276:	2a01      	cmp	r2, #1
 800f278:	d92a      	bls.n	800f2d0 <ai_platform_network_post_init+0x110>
 800f27a:	f240 4249 	movw	r2, #1097	; 0x449
 800f27e:	4293      	cmp	r3, r2
 800f280:	d026      	beq.n	800f2d0 <ai_platform_network_post_init+0x110>
 800f282:	4a5f      	ldr	r2, [pc, #380]	; (800f400 <ai_platform_network_post_init+0x240>)
 800f284:	6813      	ldr	r3, [r2, #0]
 800f286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f28a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f28e:	d02c      	beq.n	800f2ea <ai_platform_network_post_init+0x12a>
 800f290:	6813      	ldr	r3, [r2, #0]
 800f292:	f240 4183 	movw	r1, #1155	; 0x483
 800f296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f29a:	428b      	cmp	r3, r1
 800f29c:	d060      	beq.n	800f360 <ai_platform_network_post_init+0x1a0>
 800f29e:	6813      	ldr	r3, [r2, #0]
 800f2a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2a4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f2a8:	f000 808b 	beq.w	800f3c2 <ai_platform_network_post_init+0x202>
 800f2ac:	6813      	ldr	r3, [r2, #0]
 800f2ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d129      	bne.n	800f30a <ai_platform_network_post_init+0x14a>
 800f2b6:	4a53      	ldr	r2, [pc, #332]	; (800f404 <ai_platform_network_post_init+0x244>)
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	6093      	str	r3, [r2, #8]
 800f2bc:	6893      	ldr	r3, [r2, #8]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1fc      	bne.n	800f2bc <ai_platform_network_post_init+0xfc>
 800f2c2:	4951      	ldr	r1, [pc, #324]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f2c4:	4b51      	ldr	r3, [pc, #324]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f2c6:	6011      	str	r1, [r2, #0]
 800f2c8:	6812      	ldr	r2, [r2, #0]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d01d      	beq.n	800f30a <ai_platform_network_post_init+0x14a>
 800f2ce:	e7fe      	b.n	800f2ce <ai_platform_network_post_init+0x10e>
 800f2d0:	4a4c      	ldr	r2, [pc, #304]	; (800f404 <ai_platform_network_post_init+0x244>)
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	6093      	str	r3, [r2, #8]
 800f2d6:	6893      	ldr	r3, [r2, #8]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1fc      	bne.n	800f2d6 <ai_platform_network_post_init+0x116>
 800f2dc:	494a      	ldr	r1, [pc, #296]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f2de:	4b4b      	ldr	r3, [pc, #300]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f2e0:	6011      	str	r1, [r2, #0]
 800f2e2:	6812      	ldr	r2, [r2, #0]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d010      	beq.n	800f30a <ai_platform_network_post_init+0x14a>
 800f2e8:	e7fe      	b.n	800f2e8 <ai_platform_network_post_init+0x128>
 800f2ea:	4a49      	ldr	r2, [pc, #292]	; (800f410 <ai_platform_network_post_init+0x250>)
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f2f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1fb      	bne.n	800f2f2 <ai_platform_network_post_init+0x132>
 800f2fa:	4943      	ldr	r1, [pc, #268]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f2fc:	4b43      	ldr	r3, [pc, #268]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f2fe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f302:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f306:	429a      	cmp	r2, r3
 800f308:	d110      	bne.n	800f32c <ai_platform_network_post_init+0x16c>
 800f30a:	f7fe fef1 	bl	800e0f0 <_ai_platform_release_crc>
 800f30e:	2000      	movs	r0, #0
 800f310:	bd38      	pop	{r3, r4, r5, pc}
 800f312:	4a3c      	ldr	r2, [pc, #240]	; (800f404 <ai_platform_network_post_init+0x244>)
 800f314:	2301      	movs	r3, #1
 800f316:	6093      	str	r3, [r2, #8]
 800f318:	6893      	ldr	r3, [r2, #8]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1fc      	bne.n	800f318 <ai_platform_network_post_init+0x158>
 800f31e:	493a      	ldr	r1, [pc, #232]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f320:	4b3a      	ldr	r3, [pc, #232]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f322:	6011      	str	r1, [r2, #0]
 800f324:	6812      	ldr	r2, [r2, #0]
 800f326:	429a      	cmp	r2, r3
 800f328:	d080      	beq.n	800f22c <ai_platform_network_post_init+0x6c>
 800f32a:	e7fe      	b.n	800f32a <ai_platform_network_post_init+0x16a>
 800f32c:	e7fe      	b.n	800f32c <ai_platform_network_post_init+0x16c>
 800f32e:	4a38      	ldr	r2, [pc, #224]	; (800f410 <ai_platform_network_post_init+0x250>)
 800f330:	2301      	movs	r3, #1
 800f332:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f336:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d1fb      	bne.n	800f336 <ai_platform_network_post_init+0x176>
 800f33e:	4932      	ldr	r1, [pc, #200]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f340:	4b32      	ldr	r3, [pc, #200]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f342:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f346:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f34a:	429a      	cmp	r2, r3
 800f34c:	f43f af6e 	beq.w	800f22c <ai_platform_network_post_init+0x6c>
 800f350:	e7fe      	b.n	800f350 <ai_platform_network_post_init+0x190>
 800f352:	2210      	movs	r2, #16
 800f354:	2111      	movs	r1, #17
 800f356:	18a0      	adds	r0, r4, r2
 800f358:	f000 fb42 	bl	800f9e0 <core_set_error>
 800f35c:	4628      	mov	r0, r5
 800f35e:	bd38      	pop	{r3, r4, r5, pc}
 800f360:	4a2b      	ldr	r2, [pc, #172]	; (800f410 <ai_platform_network_post_init+0x250>)
 800f362:	2301      	movs	r3, #1
 800f364:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f368:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1fb      	bne.n	800f368 <ai_platform_network_post_init+0x1a8>
 800f370:	4925      	ldr	r1, [pc, #148]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f372:	4b26      	ldr	r3, [pc, #152]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f374:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f378:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d0c4      	beq.n	800f30a <ai_platform_network_post_init+0x14a>
 800f380:	e7fe      	b.n	800f380 <ai_platform_network_post_init+0x1c0>
 800f382:	4a23      	ldr	r2, [pc, #140]	; (800f410 <ai_platform_network_post_init+0x250>)
 800f384:	2301      	movs	r3, #1
 800f386:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f38a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d1fb      	bne.n	800f38a <ai_platform_network_post_init+0x1ca>
 800f392:	491d      	ldr	r1, [pc, #116]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f394:	4b1d      	ldr	r3, [pc, #116]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f396:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f39a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	f43f af44 	beq.w	800f22c <ai_platform_network_post_init+0x6c>
 800f3a4:	e7fe      	b.n	800f3a4 <ai_platform_network_post_init+0x1e4>
 800f3a6:	4a17      	ldr	r2, [pc, #92]	; (800f404 <ai_platform_network_post_init+0x244>)
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	6093      	str	r3, [r2, #8]
 800f3ac:	6893      	ldr	r3, [r2, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1fc      	bne.n	800f3ac <ai_platform_network_post_init+0x1ec>
 800f3b2:	4915      	ldr	r1, [pc, #84]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f3b4:	4b15      	ldr	r3, [pc, #84]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f3b6:	6011      	str	r1, [r2, #0]
 800f3b8:	6812      	ldr	r2, [r2, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	f43f af36 	beq.w	800f22c <ai_platform_network_post_init+0x6c>
 800f3c0:	e7fe      	b.n	800f3c0 <ai_platform_network_post_init+0x200>
 800f3c2:	4a10      	ldr	r2, [pc, #64]	; (800f404 <ai_platform_network_post_init+0x244>)
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	6093      	str	r3, [r2, #8]
 800f3c8:	6893      	ldr	r3, [r2, #8]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d1fc      	bne.n	800f3c8 <ai_platform_network_post_init+0x208>
 800f3ce:	490e      	ldr	r1, [pc, #56]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f3d0:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f3d2:	6011      	str	r1, [r2, #0]
 800f3d4:	6812      	ldr	r2, [r2, #0]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d097      	beq.n	800f30a <ai_platform_network_post_init+0x14a>
 800f3da:	e7fe      	b.n	800f3da <ai_platform_network_post_init+0x21a>
 800f3dc:	4a09      	ldr	r2, [pc, #36]	; (800f404 <ai_platform_network_post_init+0x244>)
 800f3de:	2301      	movs	r3, #1
 800f3e0:	6093      	str	r3, [r2, #8]
 800f3e2:	6893      	ldr	r3, [r2, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1fc      	bne.n	800f3e2 <ai_platform_network_post_init+0x222>
 800f3e8:	4907      	ldr	r1, [pc, #28]	; (800f408 <ai_platform_network_post_init+0x248>)
 800f3ea:	4b08      	ldr	r3, [pc, #32]	; (800f40c <ai_platform_network_post_init+0x24c>)
 800f3ec:	6011      	str	r1, [r2, #0]
 800f3ee:	6812      	ldr	r2, [r2, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	f43f af1b 	beq.w	800f22c <ai_platform_network_post_init+0x6c>
 800f3f6:	e7fe      	b.n	800f3f6 <ai_platform_network_post_init+0x236>
 800f3f8:	a1c00100 	.word	0xa1c00100
 800f3fc:	e0042000 	.word	0xe0042000
 800f400:	5c001000 	.word	0x5c001000
 800f404:	40023000 	.word	0x40023000
 800f408:	f407a5c2 	.word	0xf407a5c2
 800f40c:	b5e8b5cd 	.word	0xb5e8b5cd
 800f410:	58024000 	.word	0x58024000

0800f414 <ai_platform_network_process>:
 800f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f418:	b085      	sub	sp, #20
 800f41a:	460e      	mov	r6, r1
 800f41c:	4605      	mov	r5, r0
 800f41e:	9201      	str	r2, [sp, #4]
 800f420:	b120      	cbz	r0, 800f42c <ai_platform_network_process+0x18>
 800f422:	4b24      	ldr	r3, [pc, #144]	; (800f4b4 <ai_platform_network_process+0xa0>)
 800f424:	6802      	ldr	r2, [r0, #0]
 800f426:	429a      	cmp	r2, r3
 800f428:	bf18      	it	ne
 800f42a:	2500      	movne	r5, #0
 800f42c:	f7fe fe5e 	bl	800e0ec <_ai_platform_acquire_crc>
 800f430:	4b21      	ldr	r3, [pc, #132]	; (800f4b8 <ai_platform_network_process+0xa4>)
 800f432:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f43c:	185a      	adds	r2, r3, r1
 800f43e:	2a01      	cmp	r2, #1
 800f440:	d92b      	bls.n	800f49a <ai_platform_network_process+0x86>
 800f442:	f240 4249 	movw	r2, #1097	; 0x449
 800f446:	4293      	cmp	r3, r2
 800f448:	d027      	beq.n	800f49a <ai_platform_network_process+0x86>
 800f44a:	4a1c      	ldr	r2, [pc, #112]	; (800f4bc <ai_platform_network_process+0xa8>)
 800f44c:	6813      	ldr	r3, [r2, #0]
 800f44e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f452:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f456:	d039      	beq.n	800f4cc <ai_platform_network_process+0xb8>
 800f458:	6813      	ldr	r3, [r2, #0]
 800f45a:	f240 4183 	movw	r1, #1155	; 0x483
 800f45e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f462:	428b      	cmp	r3, r1
 800f464:	f000 819c 	beq.w	800f7a0 <ai_platform_network_process+0x38c>
 800f468:	6813      	ldr	r3, [r2, #0]
 800f46a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f46e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f472:	f000 8179 	beq.w	800f768 <ai_platform_network_process+0x354>
 800f476:	6813      	ldr	r3, [r2, #0]
 800f478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d136      	bne.n	800f4ee <ai_platform_network_process+0xda>
 800f480:	4a0f      	ldr	r2, [pc, #60]	; (800f4c0 <ai_platform_network_process+0xac>)
 800f482:	2301      	movs	r3, #1
 800f484:	6093      	str	r3, [r2, #8]
 800f486:	6893      	ldr	r3, [r2, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d1fc      	bne.n	800f486 <ai_platform_network_process+0x72>
 800f48c:	4b0d      	ldr	r3, [pc, #52]	; (800f4c4 <ai_platform_network_process+0xb0>)
 800f48e:	6013      	str	r3, [r2, #0]
 800f490:	4b0d      	ldr	r3, [pc, #52]	; (800f4c8 <ai_platform_network_process+0xb4>)
 800f492:	6812      	ldr	r2, [r2, #0]
 800f494:	429a      	cmp	r2, r3
 800f496:	d02a      	beq.n	800f4ee <ai_platform_network_process+0xda>
 800f498:	e7fe      	b.n	800f498 <ai_platform_network_process+0x84>
 800f49a:	4a09      	ldr	r2, [pc, #36]	; (800f4c0 <ai_platform_network_process+0xac>)
 800f49c:	2301      	movs	r3, #1
 800f49e:	6093      	str	r3, [r2, #8]
 800f4a0:	6893      	ldr	r3, [r2, #8]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1fc      	bne.n	800f4a0 <ai_platform_network_process+0x8c>
 800f4a6:	4b07      	ldr	r3, [pc, #28]	; (800f4c4 <ai_platform_network_process+0xb0>)
 800f4a8:	6013      	str	r3, [r2, #0]
 800f4aa:	4b07      	ldr	r3, [pc, #28]	; (800f4c8 <ai_platform_network_process+0xb4>)
 800f4ac:	6812      	ldr	r2, [r2, #0]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d01d      	beq.n	800f4ee <ai_platform_network_process+0xda>
 800f4b2:	e7fe      	b.n	800f4b2 <ai_platform_network_process+0x9e>
 800f4b4:	a1c00100 	.word	0xa1c00100
 800f4b8:	e0042000 	.word	0xe0042000
 800f4bc:	5c001000 	.word	0x5c001000
 800f4c0:	40023000 	.word	0x40023000
 800f4c4:	f407a5c2 	.word	0xf407a5c2
 800f4c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800f4cc:	4ab0      	ldr	r2, [pc, #704]	; (800f790 <ai_platform_network_process+0x37c>)
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f4d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1fb      	bne.n	800f4d4 <ai_platform_network_process+0xc0>
 800f4dc:	4bad      	ldr	r3, [pc, #692]	; (800f794 <ai_platform_network_process+0x380>)
 800f4de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f4e2:	4bad      	ldr	r3, [pc, #692]	; (800f798 <ai_platform_network_process+0x384>)
 800f4e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	f040 812b 	bne.w	800f744 <ai_platform_network_process+0x330>
 800f4ee:	f7fe fdff 	bl	800e0f0 <_ai_platform_release_crc>
 800f4f2:	2d00      	cmp	r5, #0
 800f4f4:	f000 8172 	beq.w	800f7dc <ai_platform_network_process+0x3c8>
 800f4f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	f000 8123 	beq.w	800f746 <ai_platform_network_process+0x332>
 800f500:	68eb      	ldr	r3, [r5, #12]
 800f502:	2200      	movs	r2, #0
 800f504:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800f508:	f003 0303 	and.w	r3, r3, #3
 800f50c:	616a      	str	r2, [r5, #20]
 800f50e:	2b03      	cmp	r3, #3
 800f510:	f040 811f 	bne.w	800f752 <ai_platform_network_process+0x33e>
 800f514:	2e00      	cmp	r6, #0
 800f516:	f000 8156 	beq.w	800f7c6 <ai_platform_network_process+0x3b2>
 800f51a:	fab8 f788 	clz	r7, r8
 800f51e:	097f      	lsrs	r7, r7, #5
 800f520:	f1b8 0f00 	cmp.w	r8, #0
 800f524:	f000 814f 	beq.w	800f7c6 <ai_platform_network_process+0x3b2>
 800f528:	f8b8 3000 	ldrh.w	r3, [r8]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f000 814a 	beq.w	800f7c6 <ai_platform_network_process+0x3b2>
 800f532:	69b3      	ldr	r3, [r6, #24]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800f53a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d072      	beq.n	800f628 <ai_platform_network_process+0x214>
 800f542:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f546:	2c00      	cmp	r4, #0
 800f548:	d06e      	beq.n	800f628 <ai_platform_network_process+0x214>
 800f54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f54e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f552:	f8d3 a000 	ldr.w	sl, [r3]
 800f556:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800f55a:	f000 8133 	beq.w	800f7c4 <ai_platform_network_process+0x3b0>
 800f55e:	69a3      	ldr	r3, [r4, #24]
 800f560:	2101      	movs	r1, #1
 800f562:	4630      	mov	r0, r6
 800f564:	685d      	ldr	r5, [r3, #4]
 800f566:	f7fe fd73 	bl	800e050 <ai_buffer_get_size>
 800f56a:	4285      	cmp	r5, r0
 800f56c:	f0c0 8138 	bcc.w	800f7e0 <ai_platform_network_process+0x3cc>
 800f570:	68e0      	ldr	r0, [r4, #12]
 800f572:	69b1      	ldr	r1, [r6, #24]
 800f574:	68c2      	ldr	r2, [r0, #12]
 800f576:	68cb      	ldr	r3, [r1, #12]
 800f578:	429a      	cmp	r2, r3
 800f57a:	f040 8131 	bne.w	800f7e0 <ai_platform_network_process+0x3cc>
 800f57e:	6882      	ldr	r2, [r0, #8]
 800f580:	688b      	ldr	r3, [r1, #8]
 800f582:	429a      	cmp	r2, r3
 800f584:	f040 812c 	bne.w	800f7e0 <ai_platform_network_process+0x3cc>
 800f588:	6842      	ldr	r2, [r0, #4]
 800f58a:	684b      	ldr	r3, [r1, #4]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	f040 8127 	bne.w	800f7e0 <ai_platform_network_process+0x3cc>
 800f592:	69a3      	ldr	r3, [r4, #24]
 800f594:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f598:	f005 f8de 	bl	8014758 <ai_array_get_data_byte_size>
 800f59c:	4605      	mov	r5, r0
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f005 f830 	bl	8014604 <get_tensor_byte_size>
 800f5a4:	4285      	cmp	r5, r0
 800f5a6:	f0c0 811b 	bcc.w	800f7e0 <ai_platform_network_process+0x3cc>
 800f5aa:	69a3      	ldr	r3, [r4, #24]
 800f5ac:	6818      	ldr	r0, [r3, #0]
 800f5ae:	f005 f83f 	bl	8014630 <ai_array_to_buffer_fmt>
 800f5b2:	6833      	ldr	r3, [r6, #0]
 800f5b4:	4058      	eors	r0, r3
 800f5b6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f5ba:	f040 81ca 	bne.w	800f952 <ai_platform_network_process+0x53e>
 800f5be:	6873      	ldr	r3, [r6, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f000 81bd 	beq.w	800f940 <ai_platform_network_process+0x52c>
 800f5c6:	69b3      	ldr	r3, [r6, #24]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f000 81ca 	beq.w	800f964 <ai_platform_network_process+0x550>
 800f5d0:	9a02      	ldr	r2, [sp, #8]
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	3701      	adds	r7, #1
 800f5d6:	361c      	adds	r6, #28
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	bf38      	it	cc
 800f5dc:	461a      	movcc	r2, r3
 800f5de:	9202      	str	r2, [sp, #8]
 800f5e0:	f005 f810 	bl	8014604 <get_tensor_byte_size>
 800f5e4:	f8c9 0008 	str.w	r0, [r9, #8]
 800f5e8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	fb00 f303 	mul.w	r3, r0, r3
 800f5f2:	f8c9 300c 	str.w	r3, [r9, #12]
 800f5f6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f5fa:	440b      	add	r3, r1
 800f5fc:	f8c9 1004 	str.w	r1, [r9, #4]
 800f600:	f84a 300b 	str.w	r3, [sl, fp]
 800f604:	69a0      	ldr	r0, [r4, #24]
 800f606:	6803      	ldr	r3, [r0, #0]
 800f608:	009a      	lsls	r2, r3, #2
 800f60a:	f100 80bb 	bmi.w	800f784 <ai_platform_network_process+0x370>
 800f60e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f612:	1a9b      	subs	r3, r3, r2
 800f614:	4419      	add	r1, r3
 800f616:	6081      	str	r1, [r0, #8]
 800f618:	69a3      	ldr	r3, [r4, #24]
 800f61a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f61e:	60da      	str	r2, [r3, #12]
 800f620:	f8b8 3000 	ldrh.w	r3, [r8]
 800f624:	42bb      	cmp	r3, r7
 800f626:	d888      	bhi.n	800f53a <ai_platform_network_process+0x126>
 800f628:	9d03      	ldr	r5, [sp, #12]
 800f62a:	9b01      	ldr	r3, [sp, #4]
 800f62c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 81a1 	beq.w	800f976 <ai_platform_network_process+0x562>
 800f634:	2a01      	cmp	r2, #1
 800f636:	f240 817b 	bls.w	800f930 <ai_platform_network_process+0x51c>
 800f63a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800f63e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f642:	2b00      	cmp	r3, #0
 800f644:	f000 8174 	beq.w	800f930 <ai_platform_network_process+0x51c>
 800f648:	9e01      	ldr	r6, [sp, #4]
 800f64a:	2700      	movs	r7, #0
 800f64c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f650:	2b00      	cmp	r3, #0
 800f652:	f000 80d3 	beq.w	800f7fc <ai_platform_network_process+0x3e8>
 800f656:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f65a:	2c00      	cmp	r4, #0
 800f65c:	f000 80ce 	beq.w	800f7fc <ai_platform_network_process+0x3e8>
 800f660:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f664:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f668:	f8d3 8000 	ldr.w	r8, [r3]
 800f66c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800f670:	f000 819f 	beq.w	800f9b2 <ai_platform_network_process+0x59e>
 800f674:	69a3      	ldr	r3, [r4, #24]
 800f676:	2101      	movs	r1, #1
 800f678:	4630      	mov	r0, r6
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	9301      	str	r3, [sp, #4]
 800f67e:	f7fe fce7 	bl	800e050 <ai_buffer_get_size>
 800f682:	9b01      	ldr	r3, [sp, #4]
 800f684:	4283      	cmp	r3, r0
 800f686:	f0c0 8153 	bcc.w	800f930 <ai_platform_network_process+0x51c>
 800f68a:	68e0      	ldr	r0, [r4, #12]
 800f68c:	69b1      	ldr	r1, [r6, #24]
 800f68e:	68c2      	ldr	r2, [r0, #12]
 800f690:	68cb      	ldr	r3, [r1, #12]
 800f692:	429a      	cmp	r2, r3
 800f694:	f040 814c 	bne.w	800f930 <ai_platform_network_process+0x51c>
 800f698:	6882      	ldr	r2, [r0, #8]
 800f69a:	688b      	ldr	r3, [r1, #8]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	f040 8147 	bne.w	800f930 <ai_platform_network_process+0x51c>
 800f6a2:	6842      	ldr	r2, [r0, #4]
 800f6a4:	684b      	ldr	r3, [r1, #4]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	f040 8142 	bne.w	800f930 <ai_platform_network_process+0x51c>
 800f6ac:	69a3      	ldr	r3, [r4, #24]
 800f6ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6b2:	f005 f851 	bl	8014758 <ai_array_get_data_byte_size>
 800f6b6:	9001      	str	r0, [sp, #4]
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f004 ffa3 	bl	8014604 <get_tensor_byte_size>
 800f6be:	9b01      	ldr	r3, [sp, #4]
 800f6c0:	4283      	cmp	r3, r0
 800f6c2:	f0c0 8135 	bcc.w	800f930 <ai_platform_network_process+0x51c>
 800f6c6:	69a3      	ldr	r3, [r4, #24]
 800f6c8:	6818      	ldr	r0, [r3, #0]
 800f6ca:	f004 ffb1 	bl	8014630 <ai_array_to_buffer_fmt>
 800f6ce:	6833      	ldr	r3, [r6, #0]
 800f6d0:	4058      	eors	r0, r3
 800f6d2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f6d6:	f040 815c 	bne.w	800f992 <ai_platform_network_process+0x57e>
 800f6da:	6873      	ldr	r3, [r6, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 8150 	beq.w	800f982 <ai_platform_network_process+0x56e>
 800f6e2:	69b3      	ldr	r3, [r6, #24]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f000 815b 	beq.w	800f9a2 <ai_platform_network_process+0x58e>
 800f6ec:	9a02      	ldr	r2, [sp, #8]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	3701      	adds	r7, #1
 800f6f2:	361c      	adds	r6, #28
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	bf38      	it	cc
 800f6f8:	461a      	movcc	r2, r3
 800f6fa:	9202      	str	r2, [sp, #8]
 800f6fc:	f004 ff82 	bl	8014604 <get_tensor_byte_size>
 800f700:	f8ca 0008 	str.w	r0, [sl, #8]
 800f704:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	fb00 f303 	mul.w	r3, r0, r3
 800f70e:	f8ca 300c 	str.w	r3, [sl, #12]
 800f712:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f716:	440b      	add	r3, r1
 800f718:	f8ca 1004 	str.w	r1, [sl, #4]
 800f71c:	f848 300b 	str.w	r3, [r8, fp]
 800f720:	69a0      	ldr	r0, [r4, #24]
 800f722:	6803      	ldr	r3, [r0, #0]
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	d464      	bmi.n	800f7f2 <ai_platform_network_process+0x3de>
 800f728:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f72c:	1a9b      	subs	r3, r3, r2
 800f72e:	4419      	add	r1, r3
 800f730:	6081      	str	r1, [r0, #8]
 800f732:	69a3      	ldr	r3, [r4, #24]
 800f734:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f738:	60da      	str	r2, [r3, #12]
 800f73a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f73e:	429f      	cmp	r7, r3
 800f740:	d384      	bcc.n	800f64c <ai_platform_network_process+0x238>
 800f742:	e05b      	b.n	800f7fc <ai_platform_network_process+0x3e8>
 800f744:	e7fe      	b.n	800f744 <ai_platform_network_process+0x330>
 800f746:	68ea      	ldr	r2, [r5, #12]
 800f748:	616b      	str	r3, [r5, #20]
 800f74a:	f002 0203 	and.w	r2, r2, #3
 800f74e:	2a03      	cmp	r2, #3
 800f750:	d039      	beq.n	800f7c6 <ai_platform_network_process+0x3b2>
 800f752:	2230      	movs	r2, #48	; 0x30
 800f754:	2111      	movs	r1, #17
 800f756:	f105 0010 	add.w	r0, r5, #16
 800f75a:	2400      	movs	r4, #0
 800f75c:	f000 f940 	bl	800f9e0 <core_set_error>
 800f760:	4620      	mov	r0, r4
 800f762:	b005      	add	sp, #20
 800f764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f768:	4a0c      	ldr	r2, [pc, #48]	; (800f79c <ai_platform_network_process+0x388>)
 800f76a:	2301      	movs	r3, #1
 800f76c:	6093      	str	r3, [r2, #8]
 800f76e:	6893      	ldr	r3, [r2, #8]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1fc      	bne.n	800f76e <ai_platform_network_process+0x35a>
 800f774:	4b07      	ldr	r3, [pc, #28]	; (800f794 <ai_platform_network_process+0x380>)
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	4b07      	ldr	r3, [pc, #28]	; (800f798 <ai_platform_network_process+0x384>)
 800f77a:	6812      	ldr	r2, [r2, #0]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	f43f aeb6 	beq.w	800f4ee <ai_platform_network_process+0xda>
 800f782:	e7fe      	b.n	800f782 <ai_platform_network_process+0x36e>
 800f784:	f8b8 3000 	ldrh.w	r3, [r8]
 800f788:	429f      	cmp	r7, r3
 800f78a:	f4ff aed6 	bcc.w	800f53a <ai_platform_network_process+0x126>
 800f78e:	e74b      	b.n	800f628 <ai_platform_network_process+0x214>
 800f790:	58024000 	.word	0x58024000
 800f794:	f407a5c2 	.word	0xf407a5c2
 800f798:	b5e8b5cd 	.word	0xb5e8b5cd
 800f79c:	40023000 	.word	0x40023000
 800f7a0:	4a88      	ldr	r2, [pc, #544]	; (800f9c4 <ai_platform_network_process+0x5b0>)
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f7a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d1fb      	bne.n	800f7a8 <ai_platform_network_process+0x394>
 800f7b0:	4b85      	ldr	r3, [pc, #532]	; (800f9c8 <ai_platform_network_process+0x5b4>)
 800f7b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f7b6:	4b85      	ldr	r3, [pc, #532]	; (800f9cc <ai_platform_network_process+0x5b8>)
 800f7b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	f43f ae96 	beq.w	800f4ee <ai_platform_network_process+0xda>
 800f7c2:	e7fe      	b.n	800f7c2 <ai_platform_network_process+0x3ae>
 800f7c4:	9d03      	ldr	r5, [sp, #12]
 800f7c6:	2400      	movs	r4, #0
 800f7c8:	2217      	movs	r2, #23
 800f7ca:	2112      	movs	r1, #18
 800f7cc:	f105 0010 	add.w	r0, r5, #16
 800f7d0:	f000 f906 	bl	800f9e0 <core_set_error>
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	b005      	add	sp, #20
 800f7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7dc:	462c      	mov	r4, r5
 800f7de:	e7bf      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f7e0:	9d03      	ldr	r5, [sp, #12]
 800f7e2:	2218      	movs	r2, #24
 800f7e4:	2112      	movs	r1, #18
 800f7e6:	2400      	movs	r4, #0
 800f7e8:	f105 0010 	add.w	r0, r5, #16
 800f7ec:	f000 f8f8 	bl	800f9e0 <core_set_error>
 800f7f0:	e7b6      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f7f2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f7f6:	429f      	cmp	r7, r3
 800f7f8:	f4ff af28 	bcc.w	800f64c <ai_platform_network_process+0x238>
 800f7fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f800:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800f802:	82ab      	strh	r3, [r5, #20]
 800f804:	2a00      	cmp	r2, #0
 800f806:	f040 808d 	bne.w	800f924 <ai_platform_network_process+0x510>
 800f80a:	4616      	mov	r6, r2
 800f80c:	4617      	mov	r7, r2
 800f80e:	8aec      	ldrh	r4, [r5, #22]
 800f810:	429c      	cmp	r4, r3
 800f812:	d2a5      	bcs.n	800f760 <ai_platform_network_process+0x34c>
 800f814:	46ab      	mov	fp, r5
 800f816:	2e00      	cmp	r6, #0
 800f818:	d030      	beq.n	800f87c <ai_platform_network_process+0x468>
 800f81a:	f04f 0800 	mov.w	r8, #0
 800f81e:	e014      	b.n	800f84a <ai_platform_network_process+0x436>
 800f820:	6882      	ldr	r2, [r0, #8]
 800f822:	68c5      	ldr	r5, [r0, #12]
 800f824:	6863      	ldr	r3, [r4, #4]
 800f826:	1b52      	subs	r2, r2, r5
 800f828:	4413      	add	r3, r2
 800f82a:	6083      	str	r3, [r0, #8]
 800f82c:	698b      	ldr	r3, [r1, #24]
 800f82e:	6862      	ldr	r2, [r4, #4]
 800f830:	60da      	str	r2, [r3, #12]
 800f832:	f859 200a 	ldr.w	r2, [r9, sl]
 800f836:	f108 0801 	add.w	r8, r8, #1
 800f83a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800f83e:	440b      	add	r3, r1
 800f840:	4293      	cmp	r3, r2
 800f842:	d301      	bcc.n	800f848 <ai_platform_network_process+0x434>
 800f844:	68e3      	ldr	r3, [r4, #12]
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	6063      	str	r3, [r4, #4]
 800f84a:	8833      	ldrh	r3, [r6, #0]
 800f84c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800f850:	4543      	cmp	r3, r8
 800f852:	d913      	bls.n	800f87c <ai_platform_network_process+0x468>
 800f854:	6873      	ldr	r3, [r6, #4]
 800f856:	b18b      	cbz	r3, 800f87c <ai_platform_network_process+0x468>
 800f858:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800f85c:	b171      	cbz	r1, 800f87c <ai_platform_network_process+0x468>
 800f85e:	6988      	ldr	r0, [r1, #24]
 800f860:	68b2      	ldr	r2, [r6, #8]
 800f862:	6803      	ldr	r3, [r0, #0]
 800f864:	f8d2 9000 	ldr.w	r9, [r2]
 800f868:	009d      	lsls	r5, r3, #2
 800f86a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800f86e:	d5d7      	bpl.n	800f820 <ai_platform_network_process+0x40c>
 800f870:	6880      	ldr	r0, [r0, #8]
 800f872:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800f876:	f004 ffa9 	bl	80147cc <memcpy>
 800f87a:	e7da      	b.n	800f832 <ai_platform_network_process+0x41e>
 800f87c:	4658      	mov	r0, fp
 800f87e:	f004 fe73 	bl	8014568 <ai_layers_forward_all>
 800f882:	2f00      	cmp	r7, #0
 800f884:	d03f      	beq.n	800f906 <ai_platform_network_process+0x4f2>
 800f886:	2400      	movs	r4, #0
 800f888:	e016      	b.n	800f8b8 <ai_platform_network_process+0x4a4>
 800f88a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800f88e:	f859 100a 	ldr.w	r1, [r9, sl]
 800f892:	4413      	add	r3, r2
 800f894:	428b      	cmp	r3, r1
 800f896:	d302      	bcc.n	800f89e <ai_platform_network_process+0x48a>
 800f898:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f89c:	1acb      	subs	r3, r1, r3
 800f89e:	f8c8 3004 	str.w	r3, [r8, #4]
 800f8a2:	6981      	ldr	r1, [r0, #24]
 800f8a4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800f8a8:	1b52      	subs	r2, r2, r5
 800f8aa:	4413      	add	r3, r2
 800f8ac:	608b      	str	r3, [r1, #8]
 800f8ae:	6983      	ldr	r3, [r0, #24]
 800f8b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f8b4:	60da      	str	r2, [r3, #12]
 800f8b6:	3401      	adds	r4, #1
 800f8b8:	883b      	ldrh	r3, [r7, #0]
 800f8ba:	42a3      	cmp	r3, r4
 800f8bc:	d923      	bls.n	800f906 <ai_platform_network_process+0x4f2>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	b30b      	cbz	r3, 800f906 <ai_platform_network_process+0x4f2>
 800f8c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f8c6:	b1f0      	cbz	r0, 800f906 <ai_platform_network_process+0x4f2>
 800f8c8:	68ba      	ldr	r2, [r7, #8]
 800f8ca:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800f8ce:	6983      	ldr	r3, [r0, #24]
 800f8d0:	f8d2 9000 	ldr.w	r9, [r2]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800f8da:	0092      	lsls	r2, r2, #2
 800f8dc:	d5d5      	bpl.n	800f88a <ai_platform_network_process+0x476>
 800f8de:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f8e2:	6899      	ldr	r1, [r3, #8]
 800f8e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f8e8:	f004 ff70 	bl	80147cc <memcpy>
 800f8ec:	f859 200a 	ldr.w	r2, [r9, sl]
 800f8f0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800f8f4:	440b      	add	r3, r1
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d302      	bcc.n	800f900 <ai_platform_network_process+0x4ec>
 800f8fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8fe:	1ad3      	subs	r3, r2, r3
 800f900:	f8c8 3004 	str.w	r3, [r8, #4]
 800f904:	e7d7      	b.n	800f8b6 <ai_platform_network_process+0x4a2>
 800f906:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800f90a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f90e:	3401      	adds	r4, #1
 800f910:	b2a4      	uxth	r4, r4
 800f912:	42a3      	cmp	r3, r4
 800f914:	f8ab 4016 	strh.w	r4, [fp, #22]
 800f918:	f63f af7d 	bhi.w	800f816 <ai_platform_network_process+0x402>
 800f91c:	4620      	mov	r0, r4
 800f91e:	b005      	add	sp, #20
 800f920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f924:	2a01      	cmp	r2, #1
 800f926:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800f928:	d029      	beq.n	800f97e <ai_platform_network_process+0x56a>
 800f92a:	f106 070c 	add.w	r7, r6, #12
 800f92e:	e76e      	b.n	800f80e <ai_platform_network_process+0x3fa>
 800f930:	2218      	movs	r2, #24
 800f932:	2113      	movs	r1, #19
 800f934:	f105 0010 	add.w	r0, r5, #16
 800f938:	2400      	movs	r4, #0
 800f93a:	f000 f851 	bl	800f9e0 <core_set_error>
 800f93e:	e70f      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f940:	9d03      	ldr	r5, [sp, #12]
 800f942:	4604      	mov	r4, r0
 800f944:	2217      	movs	r2, #23
 800f946:	2112      	movs	r1, #18
 800f948:	f105 0010 	add.w	r0, r5, #16
 800f94c:	f000 f848 	bl	800f9e0 <core_set_error>
 800f950:	e706      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f952:	9d03      	ldr	r5, [sp, #12]
 800f954:	2219      	movs	r2, #25
 800f956:	2112      	movs	r1, #18
 800f958:	2400      	movs	r4, #0
 800f95a:	f105 0010 	add.w	r0, r5, #16
 800f95e:	f000 f83f 	bl	800f9e0 <core_set_error>
 800f962:	e6fd      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f964:	9d03      	ldr	r5, [sp, #12]
 800f966:	4604      	mov	r4, r0
 800f968:	2221      	movs	r2, #33	; 0x21
 800f96a:	2112      	movs	r1, #18
 800f96c:	f105 0010 	add.w	r0, r5, #16
 800f970:	f000 f836 	bl	800f9e0 <core_set_error>
 800f974:	e6f4      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f976:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f97a:	82ab      	strh	r3, [r5, #20]
 800f97c:	e742      	b.n	800f804 <ai_platform_network_process+0x3f0>
 800f97e:	2700      	movs	r7, #0
 800f980:	e745      	b.n	800f80e <ai_platform_network_process+0x3fa>
 800f982:	4604      	mov	r4, r0
 800f984:	2217      	movs	r2, #23
 800f986:	2113      	movs	r1, #19
 800f988:	f105 0010 	add.w	r0, r5, #16
 800f98c:	f000 f828 	bl	800f9e0 <core_set_error>
 800f990:	e6e6      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f992:	2219      	movs	r2, #25
 800f994:	2113      	movs	r1, #19
 800f996:	f105 0010 	add.w	r0, r5, #16
 800f99a:	2400      	movs	r4, #0
 800f99c:	f000 f820 	bl	800f9e0 <core_set_error>
 800f9a0:	e6de      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	2221      	movs	r2, #33	; 0x21
 800f9a6:	2113      	movs	r1, #19
 800f9a8:	f105 0010 	add.w	r0, r5, #16
 800f9ac:	f000 f818 	bl	800f9e0 <core_set_error>
 800f9b0:	e6d6      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f9b2:	2217      	movs	r2, #23
 800f9b4:	2113      	movs	r1, #19
 800f9b6:	f105 0010 	add.w	r0, r5, #16
 800f9ba:	4654      	mov	r4, sl
 800f9bc:	f000 f810 	bl	800f9e0 <core_set_error>
 800f9c0:	e6ce      	b.n	800f760 <ai_platform_network_process+0x34c>
 800f9c2:	bf00      	nop
 800f9c4:	58024000 	.word	0x58024000
 800f9c8:	f407a5c2 	.word	0xf407a5c2
 800f9cc:	b5e8b5cd 	.word	0xb5e8b5cd

0800f9d0 <core_init>:
 800f9d0:	2001      	movs	r0, #1
 800f9d2:	4770      	bx	lr

0800f9d4 <core_get_error>:
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	6800      	ldr	r0, [r0, #0]
 800f9da:	601a      	str	r2, [r3, #0]
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop

0800f9e0 <core_set_error>:
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	7800      	ldrb	r0, [r0, #0]
 800f9e4:	b108      	cbz	r0, 800f9ea <core_set_error+0xa>
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	4770      	bx	lr
 800f9ea:	7019      	strb	r1, [r3, #0]
 800f9ec:	2001      	movs	r0, #1
 800f9ee:	6819      	ldr	r1, [r3, #0]
 800f9f0:	f362 211f 	bfi	r1, r2, #8, #24
 800f9f4:	6019      	str	r1, [r3, #0]
 800f9f6:	4770      	bx	lr

0800f9f8 <_array_handle_get_as_float>:
 800f9f8:	b508      	push	{r3, lr}
 800f9fa:	4b33      	ldr	r3, [pc, #204]	; (800fac8 <_array_handle_get_as_float+0xd0>)
 800f9fc:	4299      	cmp	r1, r3
 800f9fe:	d057      	beq.n	800fab0 <_array_handle_get_as_float+0xb8>
 800fa00:	dc21      	bgt.n	800fa46 <_array_handle_get_as_float+0x4e>
 800fa02:	4b32      	ldr	r3, [pc, #200]	; (800facc <_array_handle_get_as_float+0xd4>)
 800fa04:	4299      	cmp	r1, r3
 800fa06:	d05a      	beq.n	800fabe <_array_handle_get_as_float+0xc6>
 800fa08:	dd0f      	ble.n	800fa2a <_array_handle_get_as_float+0x32>
 800fa0a:	4b31      	ldr	r3, [pc, #196]	; (800fad0 <_array_handle_get_as_float+0xd8>)
 800fa0c:	4299      	cmp	r1, r3
 800fa0e:	d034      	beq.n	800fa7a <_array_handle_get_as_float+0x82>
 800fa10:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 800fa14:	4299      	cmp	r1, r3
 800fa16:	d12d      	bne.n	800fa74 <_array_handle_get_as_float+0x7c>
 800fa18:	7803      	ldrb	r3, [r0, #0]
 800fa1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fa1e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800fad4 <_array_handle_get_as_float+0xdc>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	fe07 0a80 	vseleq.f32	s0, s15, s0
 800fa28:	bd08      	pop	{r3, pc}
 800fa2a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800fa2e:	4299      	cmp	r1, r3
 800fa30:	d02a      	beq.n	800fa88 <_array_handle_get_as_float+0x90>
 800fa32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa36:	4299      	cmp	r1, r3
 800fa38:	d11c      	bne.n	800fa74 <_array_handle_get_as_float+0x7c>
 800fa3a:	8803      	ldrh	r3, [r0, #0]
 800fa3c:	ee00 3a10 	vmov	s0, r3
 800fa40:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800fa44:	bd08      	pop	{r3, pc}
 800fa46:	4b24      	ldr	r3, [pc, #144]	; (800fad8 <_array_handle_get_as_float+0xe0>)
 800fa48:	4299      	cmp	r1, r3
 800fa4a:	d023      	beq.n	800fa94 <_array_handle_get_as_float+0x9c>
 800fa4c:	dd05      	ble.n	800fa5a <_array_handle_get_as_float+0x62>
 800fa4e:	4b23      	ldr	r3, [pc, #140]	; (800fadc <_array_handle_get_as_float+0xe4>)
 800fa50:	4299      	cmp	r1, r3
 800fa52:	d10f      	bne.n	800fa74 <_array_handle_get_as_float+0x7c>
 800fa54:	ed90 0a00 	vldr	s0, [r0]
 800fa58:	bd08      	pop	{r3, pc}
 800fa5a:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 800fa5e:	4299      	cmp	r1, r3
 800fa60:	d01f      	beq.n	800faa2 <_array_handle_get_as_float+0xaa>
 800fa62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa66:	4299      	cmp	r1, r3
 800fa68:	d104      	bne.n	800fa74 <_array_handle_get_as_float+0x7c>
 800fa6a:	ed90 0a00 	vldr	s0, [r0]
 800fa6e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800fa72:	bd08      	pop	{r3, pc}
 800fa74:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800fad4 <_array_handle_get_as_float+0xdc>
 800fa78:	bd08      	pop	{r3, pc}
 800fa7a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800fa7e:	f7f0 fd4f 	bl	8000520 <__aeabi_ul2f>
 800fa82:	ee00 0a10 	vmov	s0, r0
 800fa86:	bd08      	pop	{r3, pc}
 800fa88:	7803      	ldrb	r3, [r0, #0]
 800fa8a:	ee00 3a10 	vmov	s0, r3
 800fa8e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800fa92:	bd08      	pop	{r3, pc}
 800fa94:	e9d0 0100 	ldrd	r0, r1, [r0]
 800fa98:	f7f0 fd4a 	bl	8000530 <__aeabi_l2f>
 800fa9c:	ee00 0a10 	vmov	s0, r0
 800faa0:	bd08      	pop	{r3, pc}
 800faa2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800faa6:	ee00 3a10 	vmov	s0, r3
 800faaa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800faae:	bd08      	pop	{r3, pc}
 800fab0:	f990 3000 	ldrsb.w	r3, [r0]
 800fab4:	ee00 3a10 	vmov	s0, r3
 800fab8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800fabc:	bd08      	pop	{r3, pc}
 800fabe:	ed90 0a00 	vldr	s0, [r0]
 800fac2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800fac6:	bd08      	pop	{r3, pc}
 800fac8:	00840440 	.word	0x00840440
 800facc:	00041040 	.word	0x00041040
 800fad0:	00042040 	.word	0x00042040
 800fad4:	00000000 	.word	0x00000000
 800fad8:	00842040 	.word	0x00842040
 800fadc:	01821040 	.word	0x01821040

0800fae0 <forward_cast>:
 800fae0:	6983      	ldr	r3, [r0, #24]
 800fae2:	881a      	ldrh	r2, [r3, #0]
 800fae4:	2a00      	cmp	r2, #0
 800fae6:	f000 815c 	beq.w	800fda2 <forward_cast+0x2c2>
 800faea:	6859      	ldr	r1, [r3, #4]
 800faec:	684b      	ldr	r3, [r1, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	f000 81bb 	beq.w	800fe6a <forward_cast+0x38a>
 800faf4:	2a01      	cmp	r2, #1
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f003 871c 	beq.w	8013934 <forward_cast+0x3e54>
 800fafc:	690a      	ldr	r2, [r1, #16]
 800fafe:	2a00      	cmp	r2, #0
 800fb00:	f003 871b 	beq.w	801393a <forward_cast+0x3e5a>
 800fb04:	6812      	ldr	r2, [r2, #0]
 800fb06:	b103      	cbz	r3, 800fb0a <forward_cast+0x2a>
 800fb08:	699b      	ldr	r3, [r3, #24]
 800fb0a:	2a00      	cmp	r2, #0
 800fb0c:	f003 8715 	beq.w	801393a <forward_cast+0x3e5a>
 800fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb14:	ed2d 8b02 	vpush	{d8}
 800fb18:	6996      	ldr	r6, [r2, #24]
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	69c7      	ldr	r7, [r0, #28]
 800fb20:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
 800fb24:	4610      	mov	r0, r2
 800fb26:	6832      	ldr	r2, [r6, #0]
 800fb28:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
 800fb2c:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800fdfc <forward_cast+0x31c>
 800fb30:	f3c4 2983 	ubfx	r9, r4, #10, #4
 800fb34:	f022 4b7e 	bic.w	fp, r2, #4261412864	; 0xfe000000
 800fb38:	6859      	ldr	r1, [r3, #4]
 800fb3a:	68dd      	ldr	r5, [r3, #12]
 800fb3c:	f004 fde4 	bl	8014708 <ai_array_get_byte_size>
 800fb40:	f3cb 2383 	ubfx	r3, fp, #10, #4
 800fb44:	4547      	cmp	r7, r8
 800fb46:	68f6      	ldr	r6, [r6, #12]
 800fb48:	eb05 0a00 	add.w	sl, r5, r0
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	f000 81e2 	beq.w	800ff16 <forward_cast+0x436>
 800fb52:	f300 8083 	bgt.w	800fc5c <forward_cast+0x17c>
 800fb56:	4ba2      	ldr	r3, [pc, #648]	; (800fde0 <forward_cast+0x300>)
 800fb58:	429f      	cmp	r7, r3
 800fb5a:	f000 8227 	beq.w	800ffac <forward_cast+0x4cc>
 800fb5e:	dd2c      	ble.n	800fbba <forward_cast+0xda>
 800fb60:	4aa0      	ldr	r2, [pc, #640]	; (800fde4 <forward_cast+0x304>)
 800fb62:	4297      	cmp	r7, r2
 800fb64:	d124      	bne.n	800fbb0 <forward_cast+0xd0>
 800fb66:	45c3      	cmp	fp, r8
 800fb68:	f001 8052 	beq.w	8010c10 <forward_cast+0x1130>
 800fb6c:	f300 85f2 	bgt.w	8010754 <forward_cast+0xc74>
 800fb70:	459b      	cmp	fp, r3
 800fb72:	f001 85a4 	beq.w	80116be <forward_cast+0x1bde>
 800fb76:	f300 85d3 	bgt.w	8010720 <forward_cast+0xc40>
 800fb7a:	4b9b      	ldr	r3, [pc, #620]	; (800fde8 <forward_cast+0x308>)
 800fb7c:	459b      	cmp	fp, r3
 800fb7e:	f002 8256 	beq.w	801202e <forward_cast+0x254e>
 800fb82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb86:	459b      	cmp	fp, r3
 800fb88:	d112      	bne.n	800fbb0 <forward_cast+0xd0>
 800fb8a:	4555      	cmp	r5, sl
 800fb8c:	d210      	bcs.n	800fbb0 <forward_cast+0xd0>
 800fb8e:	9f00      	ldr	r7, [sp, #0]
 800fb90:	4628      	mov	r0, r5
 800fb92:	4621      	mov	r1, r4
 800fb94:	f7ff ff30 	bl	800f9f8 <_array_handle_get_as_float>
 800fb98:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fb9c:	444d      	add	r5, r9
 800fb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba2:	bf14      	ite	ne
 800fba4:	2301      	movne	r3, #1
 800fba6:	2300      	moveq	r3, #0
 800fba8:	45aa      	cmp	sl, r5
 800fbaa:	8033      	strh	r3, [r6, #0]
 800fbac:	443e      	add	r6, r7
 800fbae:	d8ef      	bhi.n	800fb90 <forward_cast+0xb0>
 800fbb0:	b003      	add	sp, #12
 800fbb2:	ecbd 8b02 	vpop	{d8}
 800fbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbba:	4a8b      	ldr	r2, [pc, #556]	; (800fde8 <forward_cast+0x308>)
 800fbbc:	4297      	cmp	r7, r2
 800fbbe:	f000 80f2 	beq.w	800fda6 <forward_cast+0x2c6>
 800fbc2:	498a      	ldr	r1, [pc, #552]	; (800fdec <forward_cast+0x30c>)
 800fbc4:	428f      	cmp	r7, r1
 800fbc6:	d1f3      	bne.n	800fbb0 <forward_cast+0xd0>
 800fbc8:	45c3      	cmp	fp, r8
 800fbca:	f000 877e 	beq.w	8010aca <forward_cast+0xfea>
 800fbce:	f300 86e5 	bgt.w	801099c <forward_cast+0xebc>
 800fbd2:	459b      	cmp	fp, r3
 800fbd4:	f001 877e 	beq.w	8011ad4 <forward_cast+0x1ff4>
 800fbd8:	4f81      	ldr	r7, [pc, #516]	; (800fde0 <forward_cast+0x300>)
 800fbda:	45bb      	cmp	fp, r7
 800fbdc:	f300 8552 	bgt.w	8010684 <forward_cast+0xba4>
 800fbe0:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800fde8 <forward_cast+0x308>
 800fbe4:	45c3      	cmp	fp, r8
 800fbe6:	f001 8727 	beq.w	8011a38 <forward_cast+0x1f58>
 800fbea:	4b80      	ldr	r3, [pc, #512]	; (800fdec <forward_cast+0x30c>)
 800fbec:	459b      	cmp	fp, r3
 800fbee:	d1df      	bne.n	800fbb0 <forward_cast+0xd0>
 800fbf0:	4555      	cmp	r5, sl
 800fbf2:	d2dd      	bcs.n	800fbb0 <forward_cast+0xd0>
 800fbf4:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800fe04 <forward_cast+0x324>
 800fbf8:	4b7d      	ldr	r3, [pc, #500]	; (800fdf0 <forward_cast+0x310>)
 800fbfa:	4a7e      	ldr	r2, [pc, #504]	; (800fdf4 <forward_cast+0x314>)
 800fbfc:	e019      	b.n	800fc32 <forward_cast+0x152>
 800fbfe:	42bc      	cmp	r4, r7
 800fc00:	f003 8425 	beq.w	801344e <forward_cast+0x396e>
 800fc04:	f341 80bc 	ble.w	8010d80 <forward_cast+0x12a0>
 800fc08:	497b      	ldr	r1, [pc, #492]	; (800fdf8 <forward_cast+0x318>)
 800fc0a:	428c      	cmp	r4, r1
 800fc0c:	f003 83e9 	beq.w	80133e2 <forward_cast+0x3902>
 800fc10:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800fc14:	428c      	cmp	r4, r1
 800fc16:	f041 83a0 	bne.w	801135a <forward_cast+0x187a>
 800fc1a:	7828      	ldrb	r0, [r5, #0]
 800fc1c:	3800      	subs	r0, #0
 800fc1e:	bf18      	it	ne
 800fc20:	2001      	movne	r0, #1
 800fc22:	f380 0010 	usat	r0, #16, r0
 800fc26:	444d      	add	r5, r9
 800fc28:	9900      	ldr	r1, [sp, #0]
 800fc2a:	8030      	strh	r0, [r6, #0]
 800fc2c:	45aa      	cmp	sl, r5
 800fc2e:	440e      	add	r6, r1
 800fc30:	d9be      	bls.n	800fbb0 <forward_cast+0xd0>
 800fc32:	4972      	ldr	r1, [pc, #456]	; (800fdfc <forward_cast+0x31c>)
 800fc34:	428c      	cmp	r4, r1
 800fc36:	f003 82d9 	beq.w	80131ec <forward_cast+0x370c>
 800fc3a:	dde0      	ble.n	800fbfe <forward_cast+0x11e>
 800fc3c:	4970      	ldr	r1, [pc, #448]	; (800fe00 <forward_cast+0x320>)
 800fc3e:	428c      	cmp	r4, r1
 800fc40:	f002 87aa 	beq.w	8012b98 <forward_cast+0x30b8>
 800fc44:	f341 82c1 	ble.w	80111ca <forward_cast+0x16ea>
 800fc48:	455c      	cmp	r4, fp
 800fc4a:	f041 8386 	bne.w	801135a <forward_cast+0x187a>
 800fc4e:	edd5 7a00 	vldr	s15, [r5]
 800fc52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc56:	ee17 0a90 	vmov	r0, s15
 800fc5a:	e7e2      	b.n	800fc22 <forward_cast+0x142>
 800fc5c:	4b65      	ldr	r3, [pc, #404]	; (800fdf4 <forward_cast+0x314>)
 800fc5e:	429f      	cmp	r7, r3
 800fc60:	f000 810c 	beq.w	800fe7c <forward_cast+0x39c>
 800fc64:	4a67      	ldr	r2, [pc, #412]	; (800fe04 <forward_cast+0x324>)
 800fc66:	4297      	cmp	r7, r2
 800fc68:	d149      	bne.n	800fcfe <forward_cast+0x21e>
 800fc6a:	45c3      	cmp	fp, r8
 800fc6c:	f000 8763 	beq.w	8010b36 <forward_cast+0x1056>
 800fc70:	f300 82cc 	bgt.w	801020c <forward_cast+0x72c>
 800fc74:	4a5a      	ldr	r2, [pc, #360]	; (800fde0 <forward_cast+0x300>)
 800fc76:	4593      	cmp	fp, r2
 800fc78:	f001 8478 	beq.w	801156c <forward_cast+0x1a8c>
 800fc7c:	f300 82b0 	bgt.w	80101e0 <forward_cast+0x700>
 800fc80:	4b59      	ldr	r3, [pc, #356]	; (800fde8 <forward_cast+0x308>)
 800fc82:	459b      	cmp	fp, r3
 800fc84:	f002 833e 	beq.w	8012304 <forward_cast+0x2824>
 800fc88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc8c:	459b      	cmp	fp, r3
 800fc8e:	d18f      	bne.n	800fbb0 <forward_cast+0xd0>
 800fc90:	4555      	cmp	r5, sl
 800fc92:	d28d      	bcs.n	800fbb0 <forward_cast+0xd0>
 800fc94:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800fe04 <forward_cast+0x324>
 800fc98:	4f55      	ldr	r7, [pc, #340]	; (800fdf0 <forward_cast+0x310>)
 800fc9a:	f8df b158 	ldr.w	fp, [pc, #344]	; 800fdf4 <forward_cast+0x314>
 800fc9e:	4b50      	ldr	r3, [pc, #320]	; (800fde0 <forward_cast+0x300>)
 800fca0:	4a55      	ldr	r2, [pc, #340]	; (800fdf8 <forward_cast+0x318>)
 800fca2:	e016      	b.n	800fcd2 <forward_cast+0x1f2>
 800fca4:	429c      	cmp	r4, r3
 800fca6:	f002 853b 	beq.w	8012720 <forward_cast+0x2c40>
 800fcaa:	f341 8185 	ble.w	8010fb8 <forward_cast+0x14d8>
 800fcae:	4294      	cmp	r4, r2
 800fcb0:	f003 824e 	beq.w	8013150 <forward_cast+0x3670>
 800fcb4:	494b      	ldr	r1, [pc, #300]	; (800fde4 <forward_cast+0x304>)
 800fcb6:	428c      	cmp	r4, r1
 800fcb8:	f041 8369 	bne.w	801138e <forward_cast+0x18ae>
 800fcbc:	7829      	ldrb	r1, [r5, #0]
 800fcbe:	3900      	subs	r1, #0
 800fcc0:	bf18      	it	ne
 800fcc2:	2101      	movne	r1, #1
 800fcc4:	444d      	add	r5, r9
 800fcc6:	8031      	strh	r1, [r6, #0]
 800fcc8:	9900      	ldr	r1, [sp, #0]
 800fcca:	45aa      	cmp	sl, r5
 800fccc:	440e      	add	r6, r1
 800fcce:	f67f af6f 	bls.w	800fbb0 <forward_cast+0xd0>
 800fcd2:	494a      	ldr	r1, [pc, #296]	; (800fdfc <forward_cast+0x31c>)
 800fcd4:	428c      	cmp	r4, r1
 800fcd6:	f002 869f 	beq.w	8012a18 <forward_cast+0x2f38>
 800fcda:	dde3      	ble.n	800fca4 <forward_cast+0x1c4>
 800fcdc:	4948      	ldr	r1, [pc, #288]	; (800fe00 <forward_cast+0x320>)
 800fcde:	428c      	cmp	r4, r1
 800fce0:	f002 8768 	beq.w	8012bb4 <forward_cast+0x30d4>
 800fce4:	f341 8100 	ble.w	8010ee8 <forward_cast+0x1408>
 800fce8:	4544      	cmp	r4, r8
 800fcea:	f041 8350 	bne.w	801138e <forward_cast+0x18ae>
 800fcee:	edd5 7a00 	vldr	s15, [r5]
 800fcf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcf6:	ee17 1a90 	vmov	r1, s15
 800fcfa:	b289      	uxth	r1, r1
 800fcfc:	e7e2      	b.n	800fcc4 <forward_cast+0x1e4>
 800fcfe:	493c      	ldr	r1, [pc, #240]	; (800fdf0 <forward_cast+0x310>)
 800fd00:	428f      	cmp	r7, r1
 800fd02:	f47f af55 	bne.w	800fbb0 <forward_cast+0xd0>
 800fd06:	45c3      	cmp	fp, r8
 800fd08:	f000 874b 	beq.w	8010ba2 <forward_cast+0x10c2>
 800fd0c:	f300 8544 	bgt.w	8010798 <forward_cast+0xcb8>
 800fd10:	4b33      	ldr	r3, [pc, #204]	; (800fde0 <forward_cast+0x300>)
 800fd12:	459b      	cmp	fp, r3
 800fd14:	f001 863f 	beq.w	8011996 <forward_cast+0x1eb6>
 800fd18:	f300 8227 	bgt.w	801016a <forward_cast+0x68a>
 800fd1c:	4f32      	ldr	r7, [pc, #200]	; (800fde8 <forward_cast+0x308>)
 800fd1e:	45bb      	cmp	fp, r7
 800fd20:	f001 85d7 	beq.w	80118d2 <forward_cast+0x1df2>
 800fd24:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800fd28:	459b      	cmp	fp, r3
 800fd2a:	f47f af41 	bne.w	800fbb0 <forward_cast+0xd0>
 800fd2e:	4555      	cmp	r5, sl
 800fd30:	f4bf af3e 	bcs.w	800fbb0 <forward_cast+0xd0>
 800fd34:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800fe04 <forward_cast+0x324>
 800fd38:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800fdf0 <forward_cast+0x310>
 800fd3c:	4b2d      	ldr	r3, [pc, #180]	; (800fdf4 <forward_cast+0x314>)
 800fd3e:	4a28      	ldr	r2, [pc, #160]	; (800fde0 <forward_cast+0x300>)
 800fd40:	e01a      	b.n	800fd78 <forward_cast+0x298>
 800fd42:	4294      	cmp	r4, r2
 800fd44:	f002 85a1 	beq.w	801288a <forward_cast+0x2daa>
 800fd48:	f341 80c4 	ble.w	8010ed4 <forward_cast+0x13f4>
 800fd4c:	492a      	ldr	r1, [pc, #168]	; (800fdf8 <forward_cast+0x318>)
 800fd4e:	428c      	cmp	r4, r1
 800fd50:	f002 858d 	beq.w	801286e <forward_cast+0x2d8e>
 800fd54:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800fd58:	428c      	cmp	r4, r1
 800fd5a:	f041 82ca 	bne.w	80112f2 <forward_cast+0x1812>
 800fd5e:	7828      	ldrb	r0, [r5, #0]
 800fd60:	3800      	subs	r0, #0
 800fd62:	bf18      	it	ne
 800fd64:	2001      	movne	r0, #1
 800fd66:	f300 000f 	ssat	r0, #16, r0
 800fd6a:	444d      	add	r5, r9
 800fd6c:	9900      	ldr	r1, [sp, #0]
 800fd6e:	8030      	strh	r0, [r6, #0]
 800fd70:	45aa      	cmp	sl, r5
 800fd72:	440e      	add	r6, r1
 800fd74:	f67f af1c 	bls.w	800fbb0 <forward_cast+0xd0>
 800fd78:	4920      	ldr	r1, [pc, #128]	; (800fdfc <forward_cast+0x31c>)
 800fd7a:	428c      	cmp	r4, r1
 800fd7c:	f002 8557 	beq.w	801282e <forward_cast+0x2d4e>
 800fd80:	dddf      	ble.n	800fd42 <forward_cast+0x262>
 800fd82:	491f      	ldr	r1, [pc, #124]	; (800fe00 <forward_cast+0x320>)
 800fd84:	428c      	cmp	r4, r1
 800fd86:	f003 84ba 	beq.w	80136fe <forward_cast+0x3c1e>
 800fd8a:	f341 8093 	ble.w	8010eb4 <forward_cast+0x13d4>
 800fd8e:	4544      	cmp	r4, r8
 800fd90:	f041 82af 	bne.w	80112f2 <forward_cast+0x1812>
 800fd94:	edd5 7a00 	vldr	s15, [r5]
 800fd98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd9c:	ee17 0a90 	vmov	r0, s15
 800fda0:	e7e1      	b.n	800fd66 <forward_cast+0x286>
 800fda2:	6853      	ldr	r3, [r2, #4]
 800fda4:	deff      	udf	#255	; 0xff
 800fda6:	45c3      	cmp	fp, r8
 800fda8:	f001 8545 	beq.w	8011836 <forward_cast+0x1d56>
 800fdac:	f300 8446 	bgt.w	801063c <forward_cast+0xb5c>
 800fdb0:	459b      	cmp	fp, r3
 800fdb2:	f001 84ef 	beq.w	8011794 <forward_cast+0x1cb4>
 800fdb6:	f300 8428 	bgt.w	801060a <forward_cast+0xb2a>
 800fdba:	4f0b      	ldr	r7, [pc, #44]	; (800fde8 <forward_cast+0x308>)
 800fdbc:	45bb      	cmp	fp, r7
 800fdbe:	f001 84d4 	beq.w	801176a <forward_cast+0x1c8a>
 800fdc2:	4b0a      	ldr	r3, [pc, #40]	; (800fdec <forward_cast+0x30c>)
 800fdc4:	459b      	cmp	fp, r3
 800fdc6:	f47f aef3 	bne.w	800fbb0 <forward_cast+0xd0>
 800fdca:	4555      	cmp	r5, sl
 800fdcc:	f4bf aef0 	bcs.w	800fbb0 <forward_cast+0xd0>
 800fdd0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800fe04 <forward_cast+0x324>
 800fdd4:	f8df b018 	ldr.w	fp, [pc, #24]	; 800fdf0 <forward_cast+0x310>
 800fdd8:	4b06      	ldr	r3, [pc, #24]	; (800fdf4 <forward_cast+0x314>)
 800fdda:	4a01      	ldr	r2, [pc, #4]	; (800fde0 <forward_cast+0x300>)
 800fddc:	e030      	b.n	800fe40 <forward_cast+0x360>
 800fdde:	bf00      	nop
 800fde0:	00041040 	.word	0x00041040
 800fde4:	00060440 	.word	0x00060440
 800fde8:	00040440 	.word	0x00040440
 800fdec:	00040840 	.word	0x00040840
 800fdf0:	00840840 	.word	0x00840840
 800fdf4:	00841040 	.word	0x00841040
 800fdf8:	00042040 	.word	0x00042040
 800fdfc:	00840440 	.word	0x00840440
 800fe00:	00842040 	.word	0x00842040
 800fe04:	01821040 	.word	0x01821040
 800fe08:	4294      	cmp	r4, r2
 800fe0a:	f003 80b9 	beq.w	8012f80 <forward_cast+0x34a0>
 800fe0e:	f340 878e 	ble.w	8010d2e <forward_cast+0x124e>
 800fe12:	49b2      	ldr	r1, [pc, #712]	; (80100dc <forward_cast+0x5fc>)
 800fe14:	428c      	cmp	r4, r1
 800fe16:	f003 80a5 	beq.w	8012f64 <forward_cast+0x3484>
 800fe1a:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800fe1e:	428c      	cmp	r4, r1
 800fe20:	f041 8292 	bne.w	8011348 <forward_cast+0x1868>
 800fe24:	7828      	ldrb	r0, [r5, #0]
 800fe26:	3800      	subs	r0, #0
 800fe28:	bf18      	it	ne
 800fe2a:	2001      	movne	r0, #1
 800fe2c:	f380 0008 	usat	r0, #8, r0
 800fe30:	444d      	add	r5, r9
 800fe32:	b2c0      	uxtb	r0, r0
 800fe34:	9900      	ldr	r1, [sp, #0]
 800fe36:	45aa      	cmp	sl, r5
 800fe38:	8030      	strh	r0, [r6, #0]
 800fe3a:	440e      	add	r6, r1
 800fe3c:	f67f aeb8 	bls.w	800fbb0 <forward_cast+0xd0>
 800fe40:	49a7      	ldr	r1, [pc, #668]	; (80100e0 <forward_cast+0x600>)
 800fe42:	428c      	cmp	r4, r1
 800fe44:	f003 8124 	beq.w	8013090 <forward_cast+0x35b0>
 800fe48:	ddde      	ble.n	800fe08 <forward_cast+0x328>
 800fe4a:	49a6      	ldr	r1, [pc, #664]	; (80100e4 <forward_cast+0x604>)
 800fe4c:	428c      	cmp	r4, r1
 800fe4e:	f002 86f0 	beq.w	8012c32 <forward_cast+0x3152>
 800fe52:	f341 80e8 	ble.w	8011026 <forward_cast+0x1546>
 800fe56:	4544      	cmp	r4, r8
 800fe58:	f041 8276 	bne.w	8011348 <forward_cast+0x1868>
 800fe5c:	edd5 7a00 	vldr	s15, [r5]
 800fe60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe64:	ee17 0a90 	vmov	r0, s15
 800fe68:	e7e0      	b.n	800fe2c <forward_cast+0x34c>
 800fe6a:	2a01      	cmp	r2, #1
 800fe6c:	f003 8562 	beq.w	8013934 <forward_cast+0x3e54>
 800fe70:	690a      	ldr	r2, [r1, #16]
 800fe72:	2a00      	cmp	r2, #0
 800fe74:	f003 8561 	beq.w	801393a <forward_cast+0x3e5a>
 800fe78:	6812      	ldr	r2, [r2, #0]
 800fe7a:	e646      	b.n	800fb0a <forward_cast+0x2a>
 800fe7c:	45c3      	cmp	fp, r8
 800fe7e:	f002 8292 	beq.w	80123a6 <forward_cast+0x28c6>
 800fe82:	f300 82cf 	bgt.w	8010424 <forward_cast+0x944>
 800fe86:	4b98      	ldr	r3, [pc, #608]	; (80100e8 <forward_cast+0x608>)
 800fe88:	459b      	cmp	fp, r3
 800fe8a:	f001 87da 	beq.w	8011e42 <forward_cast+0x2362>
 800fe8e:	f300 81f9 	bgt.w	8010284 <forward_cast+0x7a4>
 800fe92:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800fe96:	459b      	cmp	fp, r3
 800fe98:	f001 8782 	beq.w	8011da0 <forward_cast+0x22c0>
 800fe9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fea0:	459b      	cmp	fp, r3
 800fea2:	f47f ae85 	bne.w	800fbb0 <forward_cast+0xd0>
 800fea6:	4555      	cmp	r5, sl
 800fea8:	f4bf ae82 	bcs.w	800fbb0 <forward_cast+0xd0>
 800feac:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8010100 <forward_cast+0x620>
 800feb0:	4f8e      	ldr	r7, [pc, #568]	; (80100ec <forward_cast+0x60c>)
 800feb2:	f8df b248 	ldr.w	fp, [pc, #584]	; 80100fc <forward_cast+0x61c>
 800feb6:	4b8c      	ldr	r3, [pc, #560]	; (80100e8 <forward_cast+0x608>)
 800feb8:	4a88      	ldr	r2, [pc, #544]	; (80100dc <forward_cast+0x5fc>)
 800feba:	e016      	b.n	800feea <forward_cast+0x40a>
 800febc:	429c      	cmp	r4, r3
 800febe:	f003 824c 	beq.w	801335a <forward_cast+0x387a>
 800fec2:	f340 878e 	ble.w	8010de2 <forward_cast+0x1302>
 800fec6:	4294      	cmp	r4, r2
 800fec8:	f003 81f4 	beq.w	80132b4 <forward_cast+0x37d4>
 800fecc:	4988      	ldr	r1, [pc, #544]	; (80100f0 <forward_cast+0x610>)
 800fece:	428c      	cmp	r4, r1
 800fed0:	f041 8249 	bne.w	8011366 <forward_cast+0x1886>
 800fed4:	7829      	ldrb	r1, [r5, #0]
 800fed6:	3900      	subs	r1, #0
 800fed8:	bf18      	it	ne
 800feda:	2101      	movne	r1, #1
 800fedc:	444d      	add	r5, r9
 800fede:	8031      	strh	r1, [r6, #0]
 800fee0:	9900      	ldr	r1, [sp, #0]
 800fee2:	45aa      	cmp	sl, r5
 800fee4:	440e      	add	r6, r1
 800fee6:	f67f ae63 	bls.w	800fbb0 <forward_cast+0xd0>
 800feea:	497d      	ldr	r1, [pc, #500]	; (80100e0 <forward_cast+0x600>)
 800feec:	428c      	cmp	r4, r1
 800feee:	f002 876b 	beq.w	8012dc8 <forward_cast+0x32e8>
 800fef2:	dde3      	ble.n	800febc <forward_cast+0x3dc>
 800fef4:	497b      	ldr	r1, [pc, #492]	; (80100e4 <forward_cast+0x604>)
 800fef6:	428c      	cmp	r4, r1
 800fef8:	f003 8443 	beq.w	8013782 <forward_cast+0x3ca2>
 800fefc:	f341 8154 	ble.w	80111a8 <forward_cast+0x16c8>
 800ff00:	4544      	cmp	r4, r8
 800ff02:	f041 8230 	bne.w	8011366 <forward_cast+0x1886>
 800ff06:	edd5 7a00 	vldr	s15, [r5]
 800ff0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff0e:	ee17 1a90 	vmov	r1, s15
 800ff12:	b289      	uxth	r1, r1
 800ff14:	e7e2      	b.n	800fedc <forward_cast+0x3fc>
 800ff16:	45bb      	cmp	fp, r7
 800ff18:	f001 82d8 	beq.w	80114cc <forward_cast+0x19ec>
 800ff1c:	f300 80ce 	bgt.w	80100bc <forward_cast+0x5dc>
 800ff20:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80100e8 <forward_cast+0x608>
 800ff24:	45c3      	cmp	fp, r8
 800ff26:	f001 8689 	beq.w	8011c3c <forward_cast+0x215c>
 800ff2a:	f300 808a 	bgt.w	8010042 <forward_cast+0x562>
 800ff2e:	4a71      	ldr	r2, [pc, #452]	; (80100f4 <forward_cast+0x614>)
 800ff30:	4593      	cmp	fp, r2
 800ff32:	f001 8620 	beq.w	8011b76 <forward_cast+0x2096>
 800ff36:	4b70      	ldr	r3, [pc, #448]	; (80100f8 <forward_cast+0x618>)
 800ff38:	459b      	cmp	fp, r3
 800ff3a:	f47f ae39 	bne.w	800fbb0 <forward_cast+0xd0>
 800ff3e:	4555      	cmp	r5, sl
 800ff40:	f4bf ae36 	bcs.w	800fbb0 <forward_cast+0xd0>
 800ff44:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8010100 <forward_cast+0x620>
 800ff48:	4b68      	ldr	r3, [pc, #416]	; (80100ec <forward_cast+0x60c>)
 800ff4a:	e01b      	b.n	800ff84 <forward_cast+0x4a4>
 800ff4c:	4544      	cmp	r4, r8
 800ff4e:	f003 81f7 	beq.w	8013340 <forward_cast+0x3860>
 800ff52:	f340 875f 	ble.w	8010e14 <forward_cast+0x1334>
 800ff56:	4961      	ldr	r1, [pc, #388]	; (80100dc <forward_cast+0x5fc>)
 800ff58:	428c      	cmp	r4, r1
 800ff5a:	f003 81e3 	beq.w	8013324 <forward_cast+0x3844>
 800ff5e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ff62:	428c      	cmp	r4, r1
 800ff64:	f041 820d 	bne.w	8011382 <forward_cast+0x18a2>
 800ff68:	7828      	ldrb	r0, [r5, #0]
 800ff6a:	3800      	subs	r0, #0
 800ff6c:	bf18      	it	ne
 800ff6e:	2001      	movne	r0, #1
 800ff70:	f300 0007 	ssat	r0, #8, r0
 800ff74:	444d      	add	r5, r9
 800ff76:	b240      	sxtb	r0, r0
 800ff78:	9900      	ldr	r1, [sp, #0]
 800ff7a:	45aa      	cmp	sl, r5
 800ff7c:	8030      	strh	r0, [r6, #0]
 800ff7e:	440e      	add	r6, r1
 800ff80:	f67f ae16 	bls.w	800fbb0 <forward_cast+0xd0>
 800ff84:	42bc      	cmp	r4, r7
 800ff86:	f002 8756 	beq.w	8012e36 <forward_cast+0x3356>
 800ff8a:	dddf      	ble.n	800ff4c <forward_cast+0x46c>
 800ff8c:	4955      	ldr	r1, [pc, #340]	; (80100e4 <forward_cast+0x604>)
 800ff8e:	428c      	cmp	r4, r1
 800ff90:	f003 82da 	beq.w	8013548 <forward_cast+0x3a68>
 800ff94:	f341 816d 	ble.w	8011272 <forward_cast+0x1792>
 800ff98:	455c      	cmp	r4, fp
 800ff9a:	f041 81f2 	bne.w	8011382 <forward_cast+0x18a2>
 800ff9e:	edd5 7a00 	vldr	s15, [r5]
 800ffa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffa6:	ee17 0a90 	vmov	r0, s15
 800ffaa:	e7e1      	b.n	800ff70 <forward_cast+0x490>
 800ffac:	45c3      	cmp	fp, r8
 800ffae:	f001 8325 	beq.w	80115fc <forward_cast+0x1b1c>
 800ffb2:	f300 81e5 	bgt.w	8010380 <forward_cast+0x8a0>
 800ffb6:	45bb      	cmp	fp, r7
 800ffb8:	f001 86a7 	beq.w	8011d0a <forward_cast+0x222a>
 800ffbc:	f300 81a1 	bgt.w	8010302 <forward_cast+0x822>
 800ffc0:	4b4c      	ldr	r3, [pc, #304]	; (80100f4 <forward_cast+0x614>)
 800ffc2:	459b      	cmp	fp, r3
 800ffc4:	f001 8650 	beq.w	8011c68 <forward_cast+0x2188>
 800ffc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ffcc:	459b      	cmp	fp, r3
 800ffce:	f47f adef 	bne.w	800fbb0 <forward_cast+0xd0>
 800ffd2:	4555      	cmp	r5, sl
 800ffd4:	f4bf adec 	bcs.w	800fbb0 <forward_cast+0xd0>
 800ffd8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8010100 <forward_cast+0x620>
 800ffdc:	4f43      	ldr	r7, [pc, #268]	; (80100ec <forward_cast+0x60c>)
 800ffde:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80100fc <forward_cast+0x61c>
 800ffe2:	4b41      	ldr	r3, [pc, #260]	; (80100e8 <forward_cast+0x608>)
 800ffe4:	4a3d      	ldr	r2, [pc, #244]	; (80100dc <forward_cast+0x5fc>)
 800ffe6:	e016      	b.n	8010016 <forward_cast+0x536>
 800ffe8:	429c      	cmp	r4, r3
 800ffea:	f002 84f4 	beq.w	80129d6 <forward_cast+0x2ef6>
 800ffee:	f341 8042 	ble.w	8011076 <forward_cast+0x1596>
 800fff2:	4294      	cmp	r4, r2
 800fff4:	f002 83bd 	beq.w	8012772 <forward_cast+0x2c92>
 800fff8:	493d      	ldr	r1, [pc, #244]	; (80100f0 <forward_cast+0x610>)
 800fffa:	428c      	cmp	r4, r1
 800fffc:	f041 817c 	bne.w	80112f8 <forward_cast+0x1818>
 8010000:	7829      	ldrb	r1, [r5, #0]
 8010002:	3900      	subs	r1, #0
 8010004:	bf18      	it	ne
 8010006:	2101      	movne	r1, #1
 8010008:	444d      	add	r5, r9
 801000a:	8031      	strh	r1, [r6, #0]
 801000c:	9900      	ldr	r1, [sp, #0]
 801000e:	45aa      	cmp	sl, r5
 8010010:	440e      	add	r6, r1
 8010012:	f67f adcd 	bls.w	800fbb0 <forward_cast+0xd0>
 8010016:	4932      	ldr	r1, [pc, #200]	; (80100e0 <forward_cast+0x600>)
 8010018:	428c      	cmp	r4, r1
 801001a:	f002 8601 	beq.w	8012c20 <forward_cast+0x3140>
 801001e:	dde3      	ble.n	800ffe8 <forward_cast+0x508>
 8010020:	4930      	ldr	r1, [pc, #192]	; (80100e4 <forward_cast+0x604>)
 8010022:	428c      	cmp	r4, r1
 8010024:	f003 829e 	beq.w	8013564 <forward_cast+0x3a84>
 8010028:	f340 87b6 	ble.w	8010f98 <forward_cast+0x14b8>
 801002c:	4544      	cmp	r4, r8
 801002e:	f041 8163 	bne.w	80112f8 <forward_cast+0x1818>
 8010032:	edd5 7a00 	vldr	s15, [r5]
 8010036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801003a:	ee17 1a90 	vmov	r1, s15
 801003e:	b289      	uxth	r1, r1
 8010040:	e7e2      	b.n	8010008 <forward_cast+0x528>
 8010042:	4b2b      	ldr	r3, [pc, #172]	; (80100f0 <forward_cast+0x610>)
 8010044:	459b      	cmp	fp, r3
 8010046:	f47f adb3 	bne.w	800fbb0 <forward_cast+0xd0>
 801004a:	4555      	cmp	r5, sl
 801004c:	f4bf adb0 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010050:	2300      	movs	r3, #0
 8010052:	4a2a      	ldr	r2, [pc, #168]	; (80100fc <forward_cast+0x61c>)
 8010054:	4619      	mov	r1, r3
 8010056:	464b      	mov	r3, r9
 8010058:	46b9      	mov	r9, r7
 801005a:	4637      	mov	r7, r6
 801005c:	460e      	mov	r6, r1
 801005e:	e018      	b.n	8010092 <forward_cast+0x5b2>
 8010060:	4544      	cmp	r4, r8
 8010062:	f002 83a4 	beq.w	80127ae <forward_cast+0x2cce>
 8010066:	f340 878b 	ble.w	8010f80 <forward_cast+0x14a0>
 801006a:	491c      	ldr	r1, [pc, #112]	; (80100dc <forward_cast+0x5fc>)
 801006c:	428c      	cmp	r4, r1
 801006e:	f002 838f 	beq.w	8012790 <forward_cast+0x2cb0>
 8010072:	455c      	cmp	r4, fp
 8010074:	f041 8143 	bne.w	80112fe <forward_cast+0x181e>
 8010078:	7828      	ldrb	r0, [r5, #0]
 801007a:	3800      	subs	r0, #0
 801007c:	bf18      	it	ne
 801007e:	2001      	movne	r0, #1
 8010080:	f300 0007 	ssat	r0, #8, r0
 8010084:	441d      	add	r5, r3
 8010086:	9900      	ldr	r1, [sp, #0]
 8010088:	55b8      	strb	r0, [r7, r6]
 801008a:	45aa      	cmp	sl, r5
 801008c:	440e      	add	r6, r1
 801008e:	f67f ad8f 	bls.w	800fbb0 <forward_cast+0xd0>
 8010092:	454c      	cmp	r4, r9
 8010094:	f002 85c9 	beq.w	8012c2a <forward_cast+0x314a>
 8010098:	dde2      	ble.n	8010060 <forward_cast+0x580>
 801009a:	4912      	ldr	r1, [pc, #72]	; (80100e4 <forward_cast+0x604>)
 801009c:	428c      	cmp	r4, r1
 801009e:	f002 85b0 	beq.w	8012c02 <forward_cast+0x3122>
 80100a2:	f340 8731 	ble.w	8010f08 <forward_cast+0x1428>
 80100a6:	4916      	ldr	r1, [pc, #88]	; (8010100 <forward_cast+0x620>)
 80100a8:	428c      	cmp	r4, r1
 80100aa:	f041 8128 	bne.w	80112fe <forward_cast+0x181e>
 80100ae:	edd5 7a00 	vldr	s15, [r5]
 80100b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100b6:	ee17 0a90 	vmov	r0, s15
 80100ba:	e7e1      	b.n	8010080 <forward_cast+0x5a0>
 80100bc:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80100fc <forward_cast+0x61c>
 80100c0:	45c3      	cmp	fp, r8
 80100c2:	f001 8765 	beq.w	8011f90 <forward_cast+0x24b0>
 80100c6:	4a0e      	ldr	r2, [pc, #56]	; (8010100 <forward_cast+0x620>)
 80100c8:	4593      	cmp	fp, r2
 80100ca:	f040 83aa 	bne.w	8010822 <forward_cast+0xd42>
 80100ce:	4555      	cmp	r5, sl
 80100d0:	f4bf ad6e 	bcs.w	800fbb0 <forward_cast+0xd0>
 80100d4:	4b01      	ldr	r3, [pc, #4]	; (80100dc <forward_cast+0x5fc>)
 80100d6:	4a06      	ldr	r2, [pc, #24]	; (80100f0 <forward_cast+0x610>)
 80100d8:	e033      	b.n	8010142 <forward_cast+0x662>
 80100da:	bf00      	nop
 80100dc:	00042040 	.word	0x00042040
 80100e0:	00840440 	.word	0x00840440
 80100e4:	00842040 	.word	0x00842040
 80100e8:	00041040 	.word	0x00041040
 80100ec:	00840840 	.word	0x00840840
 80100f0:	00060440 	.word	0x00060440
 80100f4:	00040440 	.word	0x00040440
 80100f8:	00040840 	.word	0x00040840
 80100fc:	00841040 	.word	0x00841040
 8010100:	01821040 	.word	0x01821040
 8010104:	49a6      	ldr	r1, [pc, #664]	; (80103a0 <forward_cast+0x8c0>)
 8010106:	428c      	cmp	r4, r1
 8010108:	f002 84c1 	beq.w	8012a8e <forward_cast+0x2fae>
 801010c:	f340 85ea 	ble.w	8010ce4 <forward_cast+0x1204>
 8010110:	429c      	cmp	r4, r3
 8010112:	f002 84ae 	beq.w	8012a72 <forward_cast+0x2f92>
 8010116:	4294      	cmp	r4, r2
 8010118:	f041 8104 	bne.w	8011324 <forward_cast+0x1844>
 801011c:	7828      	ldrb	r0, [r5, #0]
 801011e:	3800      	subs	r0, #0
 8010120:	bf18      	it	ne
 8010122:	2001      	movne	r0, #1
 8010124:	f300 0007 	ssat	r0, #8, r0
 8010128:	b240      	sxtb	r0, r0
 801012a:	444d      	add	r5, r9
 801012c:	9900      	ldr	r1, [sp, #0]
 801012e:	ee07 0a90 	vmov	s15, r0
 8010132:	45aa      	cmp	sl, r5
 8010134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010138:	edc6 7a00 	vstr	s15, [r6]
 801013c:	440e      	add	r6, r1
 801013e:	f67f ad37 	bls.w	800fbb0 <forward_cast+0xd0>
 8010142:	42bc      	cmp	r4, r7
 8010144:	f002 840b 	beq.w	801295e <forward_cast+0x2e7e>
 8010148:	dddc      	ble.n	8010104 <forward_cast+0x624>
 801014a:	4996      	ldr	r1, [pc, #600]	; (80103a4 <forward_cast+0x8c4>)
 801014c:	428c      	cmp	r4, r1
 801014e:	f002 83f0 	beq.w	8012932 <forward_cast+0x2e52>
 8010152:	f340 87f7 	ble.w	8011144 <forward_cast+0x1664>
 8010156:	455c      	cmp	r4, fp
 8010158:	f041 80e4 	bne.w	8011324 <forward_cast+0x1844>
 801015c:	edd5 7a00 	vldr	s15, [r5]
 8010160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010164:	ee17 0a90 	vmov	r0, s15
 8010168:	e7dc      	b.n	8010124 <forward_cast+0x644>
 801016a:	4b8f      	ldr	r3, [pc, #572]	; (80103a8 <forward_cast+0x8c8>)
 801016c:	459b      	cmp	fp, r3
 801016e:	f47f ad1f 	bne.w	800fbb0 <forward_cast+0xd0>
 8010172:	4555      	cmp	r5, sl
 8010174:	f4bf ad1c 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010178:	2700      	movs	r7, #0
 801017a:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80103a4 <forward_cast+0x8c4>
 801017e:	4b8b      	ldr	r3, [pc, #556]	; (80103ac <forward_cast+0x8cc>)
 8010180:	4a87      	ldr	r2, [pc, #540]	; (80103a0 <forward_cast+0x8c0>)
 8010182:	e018      	b.n	80101b6 <forward_cast+0x6d6>
 8010184:	4294      	cmp	r4, r2
 8010186:	f003 8155 	beq.w	8013434 <forward_cast+0x3954>
 801018a:	f340 8603 	ble.w	8010d94 <forward_cast+0x12b4>
 801018e:	4988      	ldr	r1, [pc, #544]	; (80103b0 <forward_cast+0x8d0>)
 8010190:	428c      	cmp	r4, r1
 8010192:	f003 80fd 	beq.w	8013390 <forward_cast+0x38b0>
 8010196:	455c      	cmp	r4, fp
 8010198:	f041 80d9 	bne.w	801134e <forward_cast+0x186e>
 801019c:	7828      	ldrb	r0, [r5, #0]
 801019e:	3800      	subs	r0, #0
 80101a0:	bf18      	it	ne
 80101a2:	2001      	movne	r0, #1
 80101a4:	f300 000f 	ssat	r0, #16, r0
 80101a8:	444d      	add	r5, r9
 80101aa:	9900      	ldr	r1, [sp, #0]
 80101ac:	55f0      	strb	r0, [r6, r7]
 80101ae:	45aa      	cmp	sl, r5
 80101b0:	440f      	add	r7, r1
 80101b2:	f67f acfd 	bls.w	800fbb0 <forward_cast+0xd0>
 80101b6:	497f      	ldr	r1, [pc, #508]	; (80103b4 <forward_cast+0x8d4>)
 80101b8:	428c      	cmp	r4, r1
 80101ba:	f002 8765 	beq.w	8013088 <forward_cast+0x35a8>
 80101be:	dde1      	ble.n	8010184 <forward_cast+0x6a4>
 80101c0:	4544      	cmp	r4, r8
 80101c2:	f002 83a0 	beq.w	8012906 <forward_cast+0x2e26>
 80101c6:	f340 87ac 	ble.w	8011122 <forward_cast+0x1642>
 80101ca:	497b      	ldr	r1, [pc, #492]	; (80103b8 <forward_cast+0x8d8>)
 80101cc:	428c      	cmp	r4, r1
 80101ce:	f041 80be 	bne.w	801134e <forward_cast+0x186e>
 80101d2:	edd5 7a00 	vldr	s15, [r5]
 80101d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101da:	ee17 0a90 	vmov	r0, s15
 80101de:	e7e1      	b.n	80101a4 <forward_cast+0x6c4>
 80101e0:	4b71      	ldr	r3, [pc, #452]	; (80103a8 <forward_cast+0x8c8>)
 80101e2:	459b      	cmp	fp, r3
 80101e4:	f47f ace4 	bne.w	800fbb0 <forward_cast+0xd0>
 80101e8:	4555      	cmp	r5, sl
 80101ea:	f4bf ace1 	bcs.w	800fbb0 <forward_cast+0xd0>
 80101ee:	9f00      	ldr	r7, [sp, #0]
 80101f0:	4628      	mov	r0, r5
 80101f2:	4621      	mov	r1, r4
 80101f4:	f7ff fc00 	bl	800f9f8 <_array_handle_get_as_float>
 80101f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80101fc:	444d      	add	r5, r9
 80101fe:	ee17 3a90 	vmov	r3, s15
 8010202:	45aa      	cmp	sl, r5
 8010204:	7033      	strb	r3, [r6, #0]
 8010206:	443e      	add	r6, r7
 8010208:	d8f2      	bhi.n	80101f0 <forward_cast+0x710>
 801020a:	e4d1      	b.n	800fbb0 <forward_cast+0xd0>
 801020c:	459b      	cmp	fp, r3
 801020e:	f001 87de 	beq.w	80121ce <forward_cast+0x26ee>
 8010212:	45bb      	cmp	fp, r7
 8010214:	f040 8145 	bne.w	80104a2 <forward_cast+0x9c2>
 8010218:	4555      	cmp	r5, sl
 801021a:	f4bf acc9 	bcs.w	800fbb0 <forward_cast+0xd0>
 801021e:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80103bc <forward_cast+0x8dc>
 8010222:	4a64      	ldr	r2, [pc, #400]	; (80103b4 <forward_cast+0x8d4>)
 8010224:	4b5f      	ldr	r3, [pc, #380]	; (80103a4 <forward_cast+0x8c4>)
 8010226:	f8df b190 	ldr.w	fp, [pc, #400]	; 80103b8 <forward_cast+0x8d8>
 801022a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80103a0 <forward_cast+0x8c0>
 801022e:	4f60      	ldr	r7, [pc, #384]	; (80103b0 <forward_cast+0x8d0>)
 8010230:	e019      	b.n	8010266 <forward_cast+0x786>
 8010232:	4544      	cmp	r4, r8
 8010234:	f002 8477 	beq.w	8012b26 <forward_cast+0x3046>
 8010238:	f340 8510 	ble.w	8010c5c <forward_cast+0x117c>
 801023c:	42bc      	cmp	r4, r7
 801023e:	f002 840e 	beq.w	8012a5e <forward_cast+0x2f7e>
 8010242:	4959      	ldr	r1, [pc, #356]	; (80103a8 <forward_cast+0x8c8>)
 8010244:	428c      	cmp	r4, r1
 8010246:	f041 8069 	bne.w	801131c <forward_cast+0x183c>
 801024a:	7829      	ldrb	r1, [r5, #0]
 801024c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010250:	2900      	cmp	r1, #0
 8010252:	fe48 7a27 	vseleq.f32	s15, s16, s15
 8010256:	444d      	add	r5, r9
 8010258:	9900      	ldr	r1, [sp, #0]
 801025a:	edc6 7a00 	vstr	s15, [r6]
 801025e:	45aa      	cmp	sl, r5
 8010260:	440e      	add	r6, r1
 8010262:	f67f aca5 	bls.w	800fbb0 <forward_cast+0xd0>
 8010266:	4294      	cmp	r4, r2
 8010268:	f002 819a 	beq.w	80125a0 <forward_cast+0x2ac0>
 801026c:	dde1      	ble.n	8010232 <forward_cast+0x752>
 801026e:	429c      	cmp	r4, r3
 8010270:	f002 8488 	beq.w	8012b84 <forward_cast+0x30a4>
 8010274:	f340 8746 	ble.w	8011104 <forward_cast+0x1624>
 8010278:	455c      	cmp	r4, fp
 801027a:	f041 804f 	bne.w	801131c <forward_cast+0x183c>
 801027e:	edd5 7a00 	vldr	s15, [r5]
 8010282:	e7e8      	b.n	8010256 <forward_cast+0x776>
 8010284:	4b48      	ldr	r3, [pc, #288]	; (80103a8 <forward_cast+0x8c8>)
 8010286:	459b      	cmp	fp, r3
 8010288:	f47f ac92 	bne.w	800fbb0 <forward_cast+0xd0>
 801028c:	4555      	cmp	r5, sl
 801028e:	f4bf ac8f 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010292:	2700      	movs	r7, #0
 8010294:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80103b8 <forward_cast+0x8d8>
 8010298:	f8df b124 	ldr.w	fp, [pc, #292]	; 80103c0 <forward_cast+0x8e0>
 801029c:	4b43      	ldr	r3, [pc, #268]	; (80103ac <forward_cast+0x8cc>)
 801029e:	4a40      	ldr	r2, [pc, #256]	; (80103a0 <forward_cast+0x8c0>)
 80102a0:	e018      	b.n	80102d4 <forward_cast+0x7f4>
 80102a2:	4294      	cmp	r4, r2
 80102a4:	f002 831f 	beq.w	80128e6 <forward_cast+0x2e06>
 80102a8:	f340 86cd 	ble.w	8011046 <forward_cast+0x1566>
 80102ac:	4940      	ldr	r1, [pc, #256]	; (80103b0 <forward_cast+0x8d0>)
 80102ae:	428c      	cmp	r4, r1
 80102b0:	f002 8309 	beq.w	80128c6 <forward_cast+0x2de6>
 80102b4:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80102b8:	428c      	cmp	r4, r1
 80102ba:	f041 8015 	bne.w	80112e8 <forward_cast+0x1808>
 80102be:	7829      	ldrb	r1, [r5, #0]
 80102c0:	3900      	subs	r1, #0
 80102c2:	bf18      	it	ne
 80102c4:	2101      	movne	r1, #1
 80102c6:	444d      	add	r5, r9
 80102c8:	55f1      	strb	r1, [r6, r7]
 80102ca:	9900      	ldr	r1, [sp, #0]
 80102cc:	45aa      	cmp	sl, r5
 80102ce:	440f      	add	r7, r1
 80102d0:	f67f ac6e 	bls.w	800fbb0 <forward_cast+0xd0>
 80102d4:	4937      	ldr	r1, [pc, #220]	; (80103b4 <forward_cast+0x8d4>)
 80102d6:	428c      	cmp	r4, r1
 80102d8:	f000 86be 	beq.w	8011058 <forward_cast+0x1578>
 80102dc:	dde1      	ble.n	80102a2 <forward_cast+0x7c2>
 80102de:	4931      	ldr	r1, [pc, #196]	; (80103a4 <forward_cast+0x8c4>)
 80102e0:	428c      	cmp	r4, r1
 80102e2:	f002 8557 	beq.w	8012d94 <forward_cast+0x32b4>
 80102e6:	f340 86fc 	ble.w	80110e2 <forward_cast+0x1602>
 80102ea:	4544      	cmp	r4, r8
 80102ec:	f040 87fc 	bne.w	80112e8 <forward_cast+0x1808>
 80102f0:	edd5 7a00 	vldr	s15, [r5]
 80102f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102f8:	edcd 7a01 	vstr	s15, [sp, #4]
 80102fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010300:	e7e1      	b.n	80102c6 <forward_cast+0x7e6>
 8010302:	4b29      	ldr	r3, [pc, #164]	; (80103a8 <forward_cast+0x8c8>)
 8010304:	459b      	cmp	fp, r3
 8010306:	f47f ac53 	bne.w	800fbb0 <forward_cast+0xd0>
 801030a:	4555      	cmp	r5, sl
 801030c:	f4bf ac50 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010310:	2700      	movs	r7, #0
 8010312:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80103b8 <forward_cast+0x8d8>
 8010316:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80103c0 <forward_cast+0x8e0>
 801031a:	4b24      	ldr	r3, [pc, #144]	; (80103ac <forward_cast+0x8cc>)
 801031c:	4a20      	ldr	r2, [pc, #128]	; (80103a0 <forward_cast+0x8c0>)
 801031e:	e018      	b.n	8010352 <forward_cast+0x872>
 8010320:	4294      	cmp	r4, r2
 8010322:	f002 80c9 	beq.w	80124b8 <forward_cast+0x29d8>
 8010326:	f340 869a 	ble.w	801105e <forward_cast+0x157e>
 801032a:	4921      	ldr	r1, [pc, #132]	; (80103b0 <forward_cast+0x8d0>)
 801032c:	428c      	cmp	r4, r1
 801032e:	f002 82ba 	beq.w	80128a6 <forward_cast+0x2dc6>
 8010332:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8010336:	428c      	cmp	r4, r1
 8010338:	f040 87d3 	bne.w	80112e2 <forward_cast+0x1802>
 801033c:	7829      	ldrb	r1, [r5, #0]
 801033e:	3900      	subs	r1, #0
 8010340:	bf18      	it	ne
 8010342:	2101      	movne	r1, #1
 8010344:	444d      	add	r5, r9
 8010346:	55f1      	strb	r1, [r6, r7]
 8010348:	9900      	ldr	r1, [sp, #0]
 801034a:	45aa      	cmp	sl, r5
 801034c:	440f      	add	r7, r1
 801034e:	f67f ac2f 	bls.w	800fbb0 <forward_cast+0xd0>
 8010352:	4918      	ldr	r1, [pc, #96]	; (80103b4 <forward_cast+0x8d4>)
 8010354:	428c      	cmp	r4, r1
 8010356:	f000 868b 	beq.w	8011070 <forward_cast+0x1590>
 801035a:	dde1      	ble.n	8010320 <forward_cast+0x840>
 801035c:	4911      	ldr	r1, [pc, #68]	; (80103a4 <forward_cast+0x8c4>)
 801035e:	428c      	cmp	r4, r1
 8010360:	f002 81e9 	beq.w	8012736 <forward_cast+0x2c56>
 8010364:	f340 863e 	ble.w	8010fe4 <forward_cast+0x1504>
 8010368:	4544      	cmp	r4, r8
 801036a:	f040 87ba 	bne.w	80112e2 <forward_cast+0x1802>
 801036e:	edd5 7a00 	vldr	s15, [r5]
 8010372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010376:	edcd 7a01 	vstr	s15, [sp, #4]
 801037a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801037e:	e7e1      	b.n	8010344 <forward_cast+0x864>
 8010380:	4a0a      	ldr	r2, [pc, #40]	; (80103ac <forward_cast+0x8cc>)
 8010382:	4593      	cmp	fp, r2
 8010384:	f001 85bb 	beq.w	8011efe <forward_cast+0x241e>
 8010388:	4b0b      	ldr	r3, [pc, #44]	; (80103b8 <forward_cast+0x8d8>)
 801038a:	459b      	cmp	fp, r3
 801038c:	f040 80c5 	bne.w	801051a <forward_cast+0xa3a>
 8010390:	4555      	cmp	r5, sl
 8010392:	f4bf ac0d 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010396:	ed9f 8a09 	vldr	s16, [pc, #36]	; 80103bc <forward_cast+0x8dc>
 801039a:	4b09      	ldr	r3, [pc, #36]	; (80103c0 <forward_cast+0x8e0>)
 801039c:	e02e      	b.n	80103fc <forward_cast+0x91c>
 801039e:	bf00      	nop
 80103a0:	00041040 	.word	0x00041040
 80103a4:	00842040 	.word	0x00842040
 80103a8:	00060440 	.word	0x00060440
 80103ac:	00841040 	.word	0x00841040
 80103b0:	00042040 	.word	0x00042040
 80103b4:	00840440 	.word	0x00840440
 80103b8:	01821040 	.word	0x01821040
 80103bc:	00000000 	.word	0x00000000
 80103c0:	00840840 	.word	0x00840840
 80103c4:	42bc      	cmp	r4, r7
 80103c6:	f002 8126 	beq.w	8012616 <forward_cast+0x2b36>
 80103ca:	f340 8437 	ble.w	8010c3c <forward_cast+0x115c>
 80103ce:	49b3      	ldr	r1, [pc, #716]	; (801069c <forward_cast+0xbbc>)
 80103d0:	428c      	cmp	r4, r1
 80103d2:	f002 8138 	beq.w	8012646 <forward_cast+0x2b66>
 80103d6:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80103da:	428c      	cmp	r4, r1
 80103dc:	f040 879a 	bne.w	8011314 <forward_cast+0x1834>
 80103e0:	7829      	ldrb	r1, [r5, #0]
 80103e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80103e6:	2900      	cmp	r1, #0
 80103e8:	fe48 7a27 	vseleq.f32	s15, s16, s15
 80103ec:	444d      	add	r5, r9
 80103ee:	9900      	ldr	r1, [sp, #0]
 80103f0:	edc6 7a00 	vstr	s15, [r6]
 80103f4:	45aa      	cmp	sl, r5
 80103f6:	440e      	add	r6, r1
 80103f8:	f67f abda 	bls.w	800fbb0 <forward_cast+0xd0>
 80103fc:	4544      	cmp	r4, r8
 80103fe:	f002 80e0 	beq.w	80125c2 <forward_cast+0x2ae2>
 8010402:	dddf      	ble.n	80103c4 <forward_cast+0x8e4>
 8010404:	49a6      	ldr	r1, [pc, #664]	; (80106a0 <forward_cast+0xbc0>)
 8010406:	428c      	cmp	r4, r1
 8010408:	f002 85ff 	beq.w	801300a <forward_cast+0x352a>
 801040c:	f340 8743 	ble.w	8011296 <forward_cast+0x17b6>
 8010410:	455c      	cmp	r4, fp
 8010412:	f040 877f 	bne.w	8011314 <forward_cast+0x1834>
 8010416:	edd5 7a00 	vldr	s15, [r5]
 801041a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801041e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010422:	e7e3      	b.n	80103ec <forward_cast+0x90c>
 8010424:	45bb      	cmp	fp, r7
 8010426:	f000 87b5 	beq.w	8011394 <forward_cast+0x18b4>
 801042a:	4b9e      	ldr	r3, [pc, #632]	; (80106a4 <forward_cast+0xbc4>)
 801042c:	459b      	cmp	fp, r3
 801042e:	f040 80b0 	bne.w	8010592 <forward_cast+0xab2>
 8010432:	4555      	cmp	r5, sl
 8010434:	f4bf abbc 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010438:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 80106a8 <forward_cast+0xbc8>
 801043c:	4a98      	ldr	r2, [pc, #608]	; (80106a0 <forward_cast+0xbc0>)
 801043e:	4b9b      	ldr	r3, [pc, #620]	; (80106ac <forward_cast+0xbcc>)
 8010440:	e01c      	b.n	801047c <forward_cast+0x99c>
 8010442:	499b      	ldr	r1, [pc, #620]	; (80106b0 <forward_cast+0xbd0>)
 8010444:	428c      	cmp	r4, r1
 8010446:	f002 8752 	beq.w	80132ee <forward_cast+0x380e>
 801044a:	f340 847a 	ble.w	8010d42 <forward_cast+0x1262>
 801044e:	4993      	ldr	r1, [pc, #588]	; (801069c <forward_cast+0xbbc>)
 8010450:	428c      	cmp	r4, r1
 8010452:	f002 873e 	beq.w	80132d2 <forward_cast+0x37f2>
 8010456:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 801045a:	428c      	cmp	r4, r1
 801045c:	f040 8786 	bne.w	801136c <forward_cast+0x188c>
 8010460:	7829      	ldrb	r1, [r5, #0]
 8010462:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010466:	2900      	cmp	r1, #0
 8010468:	fe48 7a27 	vseleq.f32	s15, s16, s15
 801046c:	444d      	add	r5, r9
 801046e:	9900      	ldr	r1, [sp, #0]
 8010470:	edc6 7a00 	vstr	s15, [r6]
 8010474:	45aa      	cmp	sl, r5
 8010476:	440e      	add	r6, r1
 8010478:	f67f ab9a 	bls.w	800fbb0 <forward_cast+0xd0>
 801047c:	4544      	cmp	r4, r8
 801047e:	f002 8702 	beq.w	8013286 <forward_cast+0x37a6>
 8010482:	ddde      	ble.n	8010442 <forward_cast+0x962>
 8010484:	4294      	cmp	r4, r2
 8010486:	f002 85ae 	beq.w	8012fe6 <forward_cast+0x3506>
 801048a:	f340 866d 	ble.w	8011168 <forward_cast+0x1688>
 801048e:	455c      	cmp	r4, fp
 8010490:	f040 876c 	bne.w	801136c <forward_cast+0x188c>
 8010494:	edd5 7a00 	vldr	s15, [r5]
 8010498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801049c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104a0:	e7e4      	b.n	801046c <forward_cast+0x98c>
 80104a2:	4b82      	ldr	r3, [pc, #520]	; (80106ac <forward_cast+0xbcc>)
 80104a4:	459b      	cmp	fp, r3
 80104a6:	f47f ab83 	bne.w	800fbb0 <forward_cast+0xd0>
 80104aa:	4555      	cmp	r5, sl
 80104ac:	f4bf ab80 	bcs.w	800fbb0 <forward_cast+0xd0>
 80104b0:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80106a4 <forward_cast+0xbc4>
 80104b4:	4f7d      	ldr	r7, [pc, #500]	; (80106ac <forward_cast+0xbcc>)
 80104b6:	f8df b204 	ldr.w	fp, [pc, #516]	; 80106bc <forward_cast+0xbdc>
 80104ba:	4b7d      	ldr	r3, [pc, #500]	; (80106b0 <forward_cast+0xbd0>)
 80104bc:	4a77      	ldr	r2, [pc, #476]	; (801069c <forward_cast+0xbbc>)
 80104be:	e016      	b.n	80104ee <forward_cast+0xa0e>
 80104c0:	429c      	cmp	r4, r3
 80104c2:	f002 8618 	beq.w	80130f6 <forward_cast+0x3616>
 80104c6:	f340 847e 	ble.w	8010dc6 <forward_cast+0x12e6>
 80104ca:	4294      	cmp	r4, r2
 80104cc:	f002 8604 	beq.w	80130d8 <forward_cast+0x35f8>
 80104d0:	4978      	ldr	r1, [pc, #480]	; (80106b4 <forward_cast+0xbd4>)
 80104d2:	428c      	cmp	r4, r1
 80104d4:	f040 8732 	bne.w	801133c <forward_cast+0x185c>
 80104d8:	7829      	ldrb	r1, [r5, #0]
 80104da:	3900      	subs	r1, #0
 80104dc:	bf18      	it	ne
 80104de:	2101      	movne	r1, #1
 80104e0:	444d      	add	r5, r9
 80104e2:	8031      	strh	r1, [r6, #0]
 80104e4:	9900      	ldr	r1, [sp, #0]
 80104e6:	45aa      	cmp	sl, r5
 80104e8:	440e      	add	r6, r1
 80104ea:	f67f ab61 	bls.w	800fbb0 <forward_cast+0xd0>
 80104ee:	4972      	ldr	r1, [pc, #456]	; (80106b8 <forward_cast+0xbd8>)
 80104f0:	428c      	cmp	r4, r1
 80104f2:	f002 8612 	beq.w	801311a <forward_cast+0x363a>
 80104f6:	dde3      	ble.n	80104c0 <forward_cast+0x9e0>
 80104f8:	4969      	ldr	r1, [pc, #420]	; (80106a0 <forward_cast+0xbc0>)
 80104fa:	428c      	cmp	r4, r1
 80104fc:	f002 8560 	beq.w	8012fc0 <forward_cast+0x34e0>
 8010500:	f340 8683 	ble.w	801120a <forward_cast+0x172a>
 8010504:	4544      	cmp	r4, r8
 8010506:	f040 8719 	bne.w	801133c <forward_cast+0x185c>
 801050a:	edd5 7a00 	vldr	s15, [r5]
 801050e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010512:	ee17 1a90 	vmov	r1, s15
 8010516:	b209      	sxth	r1, r1
 8010518:	e7e2      	b.n	80104e0 <forward_cast+0xa00>
 801051a:	4b64      	ldr	r3, [pc, #400]	; (80106ac <forward_cast+0xbcc>)
 801051c:	459b      	cmp	fp, r3
 801051e:	f47f ab47 	bne.w	800fbb0 <forward_cast+0xd0>
 8010522:	4555      	cmp	r5, sl
 8010524:	f4bf ab44 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010528:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80106a4 <forward_cast+0xbc4>
 801052c:	4f5f      	ldr	r7, [pc, #380]	; (80106ac <forward_cast+0xbcc>)
 801052e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 80106bc <forward_cast+0xbdc>
 8010532:	4b5f      	ldr	r3, [pc, #380]	; (80106b0 <forward_cast+0xbd0>)
 8010534:	4a59      	ldr	r2, [pc, #356]	; (801069c <forward_cast+0xbbc>)
 8010536:	e016      	b.n	8010566 <forward_cast+0xa86>
 8010538:	429c      	cmp	r4, r3
 801053a:	f002 8593 	beq.w	8013064 <forward_cast+0x3584>
 801053e:	f340 8411 	ble.w	8010d64 <forward_cast+0x1284>
 8010542:	4294      	cmp	r4, r2
 8010544:	f002 84ff 	beq.w	8012f46 <forward_cast+0x3466>
 8010548:	495a      	ldr	r1, [pc, #360]	; (80106b4 <forward_cast+0xbd4>)
 801054a:	428c      	cmp	r4, r1
 801054c:	f040 86f9 	bne.w	8011342 <forward_cast+0x1862>
 8010550:	7829      	ldrb	r1, [r5, #0]
 8010552:	3900      	subs	r1, #0
 8010554:	bf18      	it	ne
 8010556:	2101      	movne	r1, #1
 8010558:	444d      	add	r5, r9
 801055a:	8031      	strh	r1, [r6, #0]
 801055c:	9900      	ldr	r1, [sp, #0]
 801055e:	45aa      	cmp	sl, r5
 8010560:	440e      	add	r6, r1
 8010562:	f67f ab25 	bls.w	800fbb0 <forward_cast+0xd0>
 8010566:	4954      	ldr	r1, [pc, #336]	; (80106b8 <forward_cast+0xbd8>)
 8010568:	428c      	cmp	r4, r1
 801056a:	f002 85da 	beq.w	8013122 <forward_cast+0x3642>
 801056e:	dde3      	ble.n	8010538 <forward_cast+0xa58>
 8010570:	494b      	ldr	r1, [pc, #300]	; (80106a0 <forward_cast+0xbc0>)
 8010572:	428c      	cmp	r4, r1
 8010574:	f002 8590 	beq.w	8013098 <forward_cast+0x35b8>
 8010578:	f340 8456 	ble.w	8010e28 <forward_cast+0x1348>
 801057c:	4544      	cmp	r4, r8
 801057e:	f040 86e0 	bne.w	8011342 <forward_cast+0x1862>
 8010582:	edd5 7a00 	vldr	s15, [r5]
 8010586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801058a:	ee17 1a90 	vmov	r1, s15
 801058e:	b209      	sxth	r1, r1
 8010590:	e7e2      	b.n	8010558 <forward_cast+0xa78>
 8010592:	4b46      	ldr	r3, [pc, #280]	; (80106ac <forward_cast+0xbcc>)
 8010594:	459b      	cmp	fp, r3
 8010596:	f47f ab0b 	bne.w	800fbb0 <forward_cast+0xd0>
 801059a:	4555      	cmp	r5, sl
 801059c:	f4bf ab08 	bcs.w	800fbb0 <forward_cast+0xd0>
 80105a0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80106a4 <forward_cast+0xbc4>
 80105a4:	4f41      	ldr	r7, [pc, #260]	; (80106ac <forward_cast+0xbcc>)
 80105a6:	f8df b114 	ldr.w	fp, [pc, #276]	; 80106bc <forward_cast+0xbdc>
 80105aa:	4b41      	ldr	r3, [pc, #260]	; (80106b0 <forward_cast+0xbd0>)
 80105ac:	4a3b      	ldr	r2, [pc, #236]	; (801069c <forward_cast+0xbbc>)
 80105ae:	e016      	b.n	80105de <forward_cast+0xafe>
 80105b0:	429c      	cmp	r4, r3
 80105b2:	f002 8670 	beq.w	8013296 <forward_cast+0x37b6>
 80105b6:	f340 8586 	ble.w	80110c6 <forward_cast+0x15e6>
 80105ba:	4294      	cmp	r4, r2
 80105bc:	f002 85b9 	beq.w	8013132 <forward_cast+0x3652>
 80105c0:	493c      	ldr	r1, [pc, #240]	; (80106b4 <forward_cast+0xbd4>)
 80105c2:	428c      	cmp	r4, r1
 80105c4:	f040 86e0 	bne.w	8011388 <forward_cast+0x18a8>
 80105c8:	7829      	ldrb	r1, [r5, #0]
 80105ca:	3900      	subs	r1, #0
 80105cc:	bf18      	it	ne
 80105ce:	2101      	movne	r1, #1
 80105d0:	444d      	add	r5, r9
 80105d2:	8031      	strh	r1, [r6, #0]
 80105d4:	9900      	ldr	r1, [sp, #0]
 80105d6:	45aa      	cmp	sl, r5
 80105d8:	440e      	add	r6, r1
 80105da:	f67f aae9 	bls.w	800fbb0 <forward_cast+0xd0>
 80105de:	4936      	ldr	r1, [pc, #216]	; (80106b8 <forward_cast+0xbd8>)
 80105e0:	428c      	cmp	r4, r1
 80105e2:	f002 8215 	beq.w	8012a10 <forward_cast+0x2f30>
 80105e6:	dde3      	ble.n	80105b0 <forward_cast+0xad0>
 80105e8:	492d      	ldr	r1, [pc, #180]	; (80106a0 <forward_cast+0xbc0>)
 80105ea:	428c      	cmp	r4, r1
 80105ec:	f002 84d5 	beq.w	8012f9a <forward_cast+0x34ba>
 80105f0:	f340 849c 	ble.w	8010f2c <forward_cast+0x144c>
 80105f4:	4544      	cmp	r4, r8
 80105f6:	f040 86c7 	bne.w	8011388 <forward_cast+0x18a8>
 80105fa:	edd5 7a00 	vldr	s15, [r5]
 80105fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010602:	ee17 1a90 	vmov	r1, s15
 8010606:	b209      	sxth	r1, r1
 8010608:	e7e2      	b.n	80105d0 <forward_cast+0xaf0>
 801060a:	4b2a      	ldr	r3, [pc, #168]	; (80106b4 <forward_cast+0xbd4>)
 801060c:	459b      	cmp	fp, r3
 801060e:	f47f aacf 	bne.w	800fbb0 <forward_cast+0xd0>
 8010612:	4555      	cmp	r5, sl
 8010614:	f4bf aacc 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010618:	9f00      	ldr	r7, [sp, #0]
 801061a:	4621      	mov	r1, r4
 801061c:	4628      	mov	r0, r5
 801061e:	f7ff f9eb 	bl	800f9f8 <_array_handle_get_as_float>
 8010622:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010626:	ee17 3a90 	vmov	r3, s15
 801062a:	f383 0308 	usat	r3, #8, r3
 801062e:	444d      	add	r5, r9
 8010630:	7033      	strb	r3, [r6, #0]
 8010632:	443e      	add	r6, r7
 8010634:	45aa      	cmp	sl, r5
 8010636:	d8f0      	bhi.n	801061a <forward_cast+0xb3a>
 8010638:	f7ff baba 	b.w	800fbb0 <forward_cast+0xd0>
 801063c:	4b1f      	ldr	r3, [pc, #124]	; (80106bc <forward_cast+0xbdc>)
 801063e:	459b      	cmp	fp, r3
 8010640:	f001 850b 	beq.w	801205a <forward_cast+0x257a>
 8010644:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8010648:	459b      	cmp	fp, r3
 801064a:	f040 81ea 	bne.w	8010a22 <forward_cast+0xf42>
 801064e:	4555      	cmp	r5, sl
 8010650:	f4bf aaae 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010654:	9f00      	ldr	r7, [sp, #0]
 8010656:	4621      	mov	r1, r4
 8010658:	4628      	mov	r0, r5
 801065a:	f7ff f9cd 	bl	800f9f8 <_array_handle_get_as_float>
 801065e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010662:	ee17 3a90 	vmov	r3, s15
 8010666:	f383 0308 	usat	r3, #8, r3
 801066a:	b2db      	uxtb	r3, r3
 801066c:	444d      	add	r5, r9
 801066e:	ee07 3a90 	vmov	s15, r3
 8010672:	45aa      	cmp	sl, r5
 8010674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010678:	edc6 7a00 	vstr	s15, [r6]
 801067c:	443e      	add	r6, r7
 801067e:	d8ea      	bhi.n	8010656 <forward_cast+0xb76>
 8010680:	f7ff ba96 	b.w	800fbb0 <forward_cast+0xd0>
 8010684:	4b0b      	ldr	r3, [pc, #44]	; (80106b4 <forward_cast+0xbd4>)
 8010686:	459b      	cmp	fp, r3
 8010688:	f47f aa92 	bne.w	800fbb0 <forward_cast+0xd0>
 801068c:	4555      	cmp	r5, sl
 801068e:	f4bf aa8f 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010692:	f04f 0800 	mov.w	r8, #0
 8010696:	4b05      	ldr	r3, [pc, #20]	; (80106ac <forward_cast+0xbcc>)
 8010698:	4a08      	ldr	r2, [pc, #32]	; (80106bc <forward_cast+0xbdc>)
 801069a:	e02b      	b.n	80106f4 <forward_cast+0xc14>
 801069c:	00042040 	.word	0x00042040
 80106a0:	00842040 	.word	0x00842040
 80106a4:	01821040 	.word	0x01821040
 80106a8:	00000000 	.word	0x00000000
 80106ac:	00840840 	.word	0x00840840
 80106b0:	00041040 	.word	0x00041040
 80106b4:	00060440 	.word	0x00060440
 80106b8:	00840440 	.word	0x00840440
 80106bc:	00841040 	.word	0x00841040
 80106c0:	42bc      	cmp	r4, r7
 80106c2:	f002 8681 	beq.w	80133c8 <forward_cast+0x38e8>
 80106c6:	f340 8399 	ble.w	8010dfc <forward_cast+0x131c>
 80106ca:	49ac      	ldr	r1, [pc, #688]	; (801097c <forward_cast+0xe9c>)
 80106cc:	428c      	cmp	r4, r1
 80106ce:	f002 866d 	beq.w	80133ac <forward_cast+0x38cc>
 80106d2:	455c      	cmp	r4, fp
 80106d4:	f040 863e 	bne.w	8011354 <forward_cast+0x1874>
 80106d8:	7828      	ldrb	r0, [r5, #0]
 80106da:	3800      	subs	r0, #0
 80106dc:	bf18      	it	ne
 80106de:	2001      	movne	r0, #1
 80106e0:	f380 0010 	usat	r0, #16, r0
 80106e4:	444d      	add	r5, r9
 80106e6:	9900      	ldr	r1, [sp, #0]
 80106e8:	f806 0008 	strb.w	r0, [r6, r8]
 80106ec:	45aa      	cmp	sl, r5
 80106ee:	4488      	add	r8, r1
 80106f0:	f67f aa5e 	bls.w	800fbb0 <forward_cast+0xd0>
 80106f4:	49a2      	ldr	r1, [pc, #648]	; (8010980 <forward_cast+0xea0>)
 80106f6:	428c      	cmp	r4, r1
 80106f8:	f002 8517 	beq.w	801312a <forward_cast+0x364a>
 80106fc:	dde0      	ble.n	80106c0 <forward_cast+0xbe0>
 80106fe:	49a1      	ldr	r1, [pc, #644]	; (8010984 <forward_cast+0xea4>)
 8010700:	428c      	cmp	r4, r1
 8010702:	f002 8269 	beq.w	8012bd8 <forward_cast+0x30f8>
 8010706:	f340 8570 	ble.w	80111ea <forward_cast+0x170a>
 801070a:	499f      	ldr	r1, [pc, #636]	; (8010988 <forward_cast+0xea8>)
 801070c:	428c      	cmp	r4, r1
 801070e:	f040 8621 	bne.w	8011354 <forward_cast+0x1874>
 8010712:	edd5 7a00 	vldr	s15, [r5]
 8010716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801071a:	ee17 0a90 	vmov	r0, s15
 801071e:	e7df      	b.n	80106e0 <forward_cast+0xc00>
 8010720:	4b9a      	ldr	r3, [pc, #616]	; (801098c <forward_cast+0xeac>)
 8010722:	459b      	cmp	fp, r3
 8010724:	f47f aa44 	bne.w	800fbb0 <forward_cast+0xd0>
 8010728:	4555      	cmp	r5, sl
 801072a:	f4bf aa41 	bcs.w	800fbb0 <forward_cast+0xd0>
 801072e:	9f00      	ldr	r7, [sp, #0]
 8010730:	4628      	mov	r0, r5
 8010732:	4621      	mov	r1, r4
 8010734:	f7ff f960 	bl	800f9f8 <_array_handle_get_as_float>
 8010738:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801073c:	444d      	add	r5, r9
 801073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010742:	bf14      	ite	ne
 8010744:	2301      	movne	r3, #1
 8010746:	2300      	moveq	r3, #0
 8010748:	45aa      	cmp	sl, r5
 801074a:	7033      	strb	r3, [r6, #0]
 801074c:	443e      	add	r6, r7
 801074e:	d8ef      	bhi.n	8010730 <forward_cast+0xc50>
 8010750:	f7ff ba2e 	b.w	800fbb0 <forward_cast+0xd0>
 8010754:	4b8e      	ldr	r3, [pc, #568]	; (8010990 <forward_cast+0xeb0>)
 8010756:	459b      	cmp	fp, r3
 8010758:	f001 84d0 	beq.w	80120fc <forward_cast+0x261c>
 801075c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8010760:	459b      	cmp	fp, r3
 8010762:	f040 8096 	bne.w	8010892 <forward_cast+0xdb2>
 8010766:	4555      	cmp	r5, sl
 8010768:	f4bf aa22 	bcs.w	800fbb0 <forward_cast+0xd0>
 801076c:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 8010770:	2700      	movs	r7, #0
 8010772:	4628      	mov	r0, r5
 8010774:	4621      	mov	r1, r4
 8010776:	f7ff f93f 	bl	800f9f8 <_array_handle_get_as_float>
 801077a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801077e:	444d      	add	r5, r9
 8010780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010784:	f000 85a5 	beq.w	80112d2 <forward_cast+0x17f2>
 8010788:	9b00      	ldr	r3, [sp, #0]
 801078a:	45aa      	cmp	sl, r5
 801078c:	f8c6 8000 	str.w	r8, [r6]
 8010790:	441e      	add	r6, r3
 8010792:	d8ee      	bhi.n	8010772 <forward_cast+0xc92>
 8010794:	f7ff ba0c 	b.w	800fbb0 <forward_cast+0xd0>
 8010798:	459b      	cmp	fp, r3
 801079a:	f001 8562 	beq.w	8012262 <forward_cast+0x2782>
 801079e:	4593      	cmp	fp, r2
 80107a0:	f040 80b2 	bne.w	8010908 <forward_cast+0xe28>
 80107a4:	4555      	cmp	r5, sl
 80107a6:	f4bf aa03 	bcs.w	800fbb0 <forward_cast+0xd0>
 80107aa:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8010988 <forward_cast+0xea8>
 80107ae:	4f79      	ldr	r7, [pc, #484]	; (8010994 <forward_cast+0xeb4>)
 80107b0:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8010990 <forward_cast+0xeb0>
 80107b4:	4b78      	ldr	r3, [pc, #480]	; (8010998 <forward_cast+0xeb8>)
 80107b6:	4a71      	ldr	r2, [pc, #452]	; (801097c <forward_cast+0xe9c>)
 80107b8:	e01e      	b.n	80107f8 <forward_cast+0xd18>
 80107ba:	429c      	cmp	r4, r3
 80107bc:	f002 862d 	beq.w	801341a <forward_cast+0x393a>
 80107c0:	f340 82a9 	ble.w	8010d16 <forward_cast+0x1236>
 80107c4:	4294      	cmp	r4, r2
 80107c6:	f002 861a 	beq.w	80133fe <forward_cast+0x391e>
 80107ca:	4970      	ldr	r1, [pc, #448]	; (801098c <forward_cast+0xeac>)
 80107cc:	428c      	cmp	r4, r1
 80107ce:	f040 85c7 	bne.w	8011360 <forward_cast+0x1880>
 80107d2:	7828      	ldrb	r0, [r5, #0]
 80107d4:	3800      	subs	r0, #0
 80107d6:	bf18      	it	ne
 80107d8:	2001      	movne	r0, #1
 80107da:	f300 000f 	ssat	r0, #16, r0
 80107de:	b200      	sxth	r0, r0
 80107e0:	444d      	add	r5, r9
 80107e2:	9900      	ldr	r1, [sp, #0]
 80107e4:	ee07 0a90 	vmov	s15, r0
 80107e8:	45aa      	cmp	sl, r5
 80107ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107ee:	edc6 7a00 	vstr	s15, [r6]
 80107f2:	440e      	add	r6, r1
 80107f4:	f67f a9dc 	bls.w	800fbb0 <forward_cast+0xd0>
 80107f8:	4961      	ldr	r1, [pc, #388]	; (8010980 <forward_cast+0xea0>)
 80107fa:	428c      	cmp	r4, r1
 80107fc:	f002 82ed 	beq.w	8012dda <forward_cast+0x32fa>
 8010800:	dddb      	ble.n	80107ba <forward_cast+0xcda>
 8010802:	4960      	ldr	r1, [pc, #384]	; (8010984 <forward_cast+0xea4>)
 8010804:	428c      	cmp	r4, r1
 8010806:	f003 8014 	beq.w	8013832 <forward_cast+0x3d52>
 801080a:	f340 84bd 	ble.w	8011188 <forward_cast+0x16a8>
 801080e:	4544      	cmp	r4, r8
 8010810:	f040 85a6 	bne.w	8011360 <forward_cast+0x1880>
 8010814:	edd5 7a00 	vldr	s15, [r5]
 8010818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801081c:	ee17 0a90 	vmov	r0, s15
 8010820:	e7db      	b.n	80107da <forward_cast+0xcfa>
 8010822:	4b5c      	ldr	r3, [pc, #368]	; (8010994 <forward_cast+0xeb4>)
 8010824:	459b      	cmp	fp, r3
 8010826:	f47f a9c3 	bne.w	800fbb0 <forward_cast+0xd0>
 801082a:	4555      	cmp	r5, sl
 801082c:	f4bf a9c0 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010830:	4b52      	ldr	r3, [pc, #328]	; (801097c <forward_cast+0xe9c>)
 8010832:	e01a      	b.n	801086a <forward_cast+0xd8a>
 8010834:	4958      	ldr	r1, [pc, #352]	; (8010998 <forward_cast+0xeb8>)
 8010836:	428c      	cmp	r4, r1
 8010838:	f002 8168 	beq.w	8012b0c <forward_cast+0x302c>
 801083c:	f340 825f 	ble.w	8010cfe <forward_cast+0x121e>
 8010840:	429c      	cmp	r4, r3
 8010842:	f002 8155 	beq.w	8012af0 <forward_cast+0x3010>
 8010846:	4951      	ldr	r1, [pc, #324]	; (801098c <forward_cast+0xeac>)
 8010848:	428c      	cmp	r4, r1
 801084a:	f040 8571 	bne.w	8011330 <forward_cast+0x1850>
 801084e:	7828      	ldrb	r0, [r5, #0]
 8010850:	3800      	subs	r0, #0
 8010852:	bf18      	it	ne
 8010854:	2001      	movne	r0, #1
 8010856:	f300 0007 	ssat	r0, #8, r0
 801085a:	444d      	add	r5, r9
 801085c:	b240      	sxtb	r0, r0
 801085e:	9900      	ldr	r1, [sp, #0]
 8010860:	45aa      	cmp	sl, r5
 8010862:	8030      	strh	r0, [r6, #0]
 8010864:	440e      	add	r6, r1
 8010866:	f67f a9a3 	bls.w	800fbb0 <forward_cast+0xd0>
 801086a:	42bc      	cmp	r4, r7
 801086c:	f002 807b 	beq.w	8012966 <forward_cast+0x2e86>
 8010870:	dde0      	ble.n	8010834 <forward_cast+0xd54>
 8010872:	4944      	ldr	r1, [pc, #272]	; (8010984 <forward_cast+0xea4>)
 8010874:	428c      	cmp	r4, r1
 8010876:	f002 81ee 	beq.w	8012c56 <forward_cast+0x3176>
 801087a:	f340 851b 	ble.w	80112b4 <forward_cast+0x17d4>
 801087e:	4294      	cmp	r4, r2
 8010880:	f040 8556 	bne.w	8011330 <forward_cast+0x1850>
 8010884:	edd5 7a00 	vldr	s15, [r5]
 8010888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801088c:	ee17 0a90 	vmov	r0, s15
 8010890:	e7e1      	b.n	8010856 <forward_cast+0xd76>
 8010892:	4b40      	ldr	r3, [pc, #256]	; (8010994 <forward_cast+0xeb4>)
 8010894:	459b      	cmp	fp, r3
 8010896:	f47f a98b 	bne.w	800fbb0 <forward_cast+0xd0>
 801089a:	4555      	cmp	r5, sl
 801089c:	f4bf a988 	bcs.w	800fbb0 <forward_cast+0xd0>
 80108a0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8010984 <forward_cast+0xea4>
 80108a4:	4f38      	ldr	r7, [pc, #224]	; (8010988 <forward_cast+0xea8>)
 80108a6:	4b35      	ldr	r3, [pc, #212]	; (801097c <forward_cast+0xe9c>)
 80108a8:	4a38      	ldr	r2, [pc, #224]	; (801098c <forward_cast+0xeac>)
 80108aa:	e016      	b.n	80108da <forward_cast+0xdfa>
 80108ac:	493a      	ldr	r1, [pc, #232]	; (8010998 <forward_cast+0xeb8>)
 80108ae:	428c      	cmp	r4, r1
 80108b0:	f002 8146 	beq.w	8012b40 <forward_cast+0x3060>
 80108b4:	f340 81f4 	ble.w	8010ca0 <forward_cast+0x11c0>
 80108b8:	429c      	cmp	r4, r3
 80108ba:	f002 80f9 	beq.w	8012ab0 <forward_cast+0x2fd0>
 80108be:	4294      	cmp	r4, r2
 80108c0:	f040 8533 	bne.w	801132a <forward_cast+0x184a>
 80108c4:	7829      	ldrb	r1, [r5, #0]
 80108c6:	3900      	subs	r1, #0
 80108c8:	bf18      	it	ne
 80108ca:	2101      	movne	r1, #1
 80108cc:	444d      	add	r5, r9
 80108ce:	8031      	strh	r1, [r6, #0]
 80108d0:	9900      	ldr	r1, [sp, #0]
 80108d2:	45aa      	cmp	sl, r5
 80108d4:	440e      	add	r6, r1
 80108d6:	f67f a96b 	bls.w	800fbb0 <forward_cast+0xd0>
 80108da:	4929      	ldr	r1, [pc, #164]	; (8010980 <forward_cast+0xea0>)
 80108dc:	428c      	cmp	r4, r1
 80108de:	f002 8046 	beq.w	801296e <forward_cast+0x2e8e>
 80108e2:	dde3      	ble.n	80108ac <forward_cast+0xdcc>
 80108e4:	4544      	cmp	r4, r8
 80108e6:	f002 83a2 	beq.w	801302e <forward_cast+0x354e>
 80108ea:	f340 81e8 	ble.w	8010cbe <forward_cast+0x11de>
 80108ee:	42bc      	cmp	r4, r7
 80108f0:	f040 851b 	bne.w	801132a <forward_cast+0x184a>
 80108f4:	edd5 7a00 	vldr	s15, [r5]
 80108f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80108fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010900:	bf14      	ite	ne
 8010902:	2101      	movne	r1, #1
 8010904:	2100      	moveq	r1, #0
 8010906:	e7e1      	b.n	80108cc <forward_cast+0xdec>
 8010908:	4b22      	ldr	r3, [pc, #136]	; (8010994 <forward_cast+0xeb4>)
 801090a:	459b      	cmp	fp, r3
 801090c:	f47f a950 	bne.w	800fbb0 <forward_cast+0xd0>
 8010910:	4555      	cmp	r5, sl
 8010912:	f4bf a94d 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010916:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8010984 <forward_cast+0xea4>
 801091a:	4f1b      	ldr	r7, [pc, #108]	; (8010988 <forward_cast+0xea8>)
 801091c:	4b17      	ldr	r3, [pc, #92]	; (801097c <forward_cast+0xe9c>)
 801091e:	4a1b      	ldr	r2, [pc, #108]	; (801098c <forward_cast+0xeac>)
 8010920:	e018      	b.n	8010954 <forward_cast+0xe74>
 8010922:	491d      	ldr	r1, [pc, #116]	; (8010998 <forward_cast+0xeb8>)
 8010924:	428c      	cmp	r4, r1
 8010926:	f002 8526 	beq.w	8013376 <forward_cast+0x3896>
 801092a:	f340 8240 	ble.w	8010dae <forward_cast+0x12ce>
 801092e:	429c      	cmp	r4, r3
 8010930:	f002 84ea 	beq.w	8013308 <forward_cast+0x3828>
 8010934:	4294      	cmp	r4, r2
 8010936:	f040 8521 	bne.w	801137c <forward_cast+0x189c>
 801093a:	7828      	ldrb	r0, [r5, #0]
 801093c:	3800      	subs	r0, #0
 801093e:	bf18      	it	ne
 8010940:	2001      	movne	r0, #1
 8010942:	f300 000f 	ssat	r0, #16, r0
 8010946:	444d      	add	r5, r9
 8010948:	9900      	ldr	r1, [sp, #0]
 801094a:	8030      	strh	r0, [r6, #0]
 801094c:	45aa      	cmp	sl, r5
 801094e:	440e      	add	r6, r1
 8010950:	f67f a92e 	bls.w	800fbb0 <forward_cast+0xd0>
 8010954:	490a      	ldr	r1, [pc, #40]	; (8010980 <forward_cast+0xea0>)
 8010956:	428c      	cmp	r4, r1
 8010958:	f002 82f1 	beq.w	8012f3e <forward_cast+0x345e>
 801095c:	dde1      	ble.n	8010922 <forward_cast+0xe42>
 801095e:	4544      	cmp	r4, r8
 8010960:	f002 85e4 	beq.w	801352c <forward_cast+0x3a4c>
 8010964:	f340 8462 	ble.w	801122c <forward_cast+0x174c>
 8010968:	42bc      	cmp	r4, r7
 801096a:	f040 8507 	bne.w	801137c <forward_cast+0x189c>
 801096e:	edd5 7a00 	vldr	s15, [r5]
 8010972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010976:	ee17 0a90 	vmov	r0, s15
 801097a:	e7e2      	b.n	8010942 <forward_cast+0xe62>
 801097c:	00042040 	.word	0x00042040
 8010980:	00840440 	.word	0x00840440
 8010984:	00842040 	.word	0x00842040
 8010988:	01821040 	.word	0x01821040
 801098c:	00060440 	.word	0x00060440
 8010990:	00841040 	.word	0x00841040
 8010994:	00840840 	.word	0x00840840
 8010998:	00041040 	.word	0x00041040
 801099c:	4bb7      	ldr	r3, [pc, #732]	; (8010c7c <forward_cast+0x119c>)
 801099e:	459b      	cmp	fp, r3
 80109a0:	f000 8543 	beq.w	801142a <forward_cast+0x194a>
 80109a4:	4fb6      	ldr	r7, [pc, #728]	; (8010c80 <forward_cast+0x11a0>)
 80109a6:	45bb      	cmp	fp, r7
 80109a8:	d155      	bne.n	8010a56 <forward_cast+0xf76>
 80109aa:	4555      	cmp	r5, sl
 80109ac:	f4bf a900 	bcs.w	800fbb0 <forward_cast+0xd0>
 80109b0:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8010c98 <forward_cast+0x11b8>
 80109b4:	4fb3      	ldr	r7, [pc, #716]	; (8010c84 <forward_cast+0x11a4>)
 80109b6:	4bb4      	ldr	r3, [pc, #720]	; (8010c88 <forward_cast+0x11a8>)
 80109b8:	4ab4      	ldr	r2, [pc, #720]	; (8010c8c <forward_cast+0x11ac>)
 80109ba:	e01e      	b.n	80109fa <forward_cast+0xf1a>
 80109bc:	49b4      	ldr	r1, [pc, #720]	; (8010c90 <forward_cast+0x11b0>)
 80109be:	428c      	cmp	r4, r1
 80109c0:	f002 8346 	beq.w	8013050 <forward_cast+0x3570>
 80109c4:	f340 8240 	ble.w	8010e48 <forward_cast+0x1368>
 80109c8:	429c      	cmp	r4, r3
 80109ca:	f002 8377 	beq.w	80130bc <forward_cast+0x35dc>
 80109ce:	4294      	cmp	r4, r2
 80109d0:	f040 84b1 	bne.w	8011336 <forward_cast+0x1856>
 80109d4:	7828      	ldrb	r0, [r5, #0]
 80109d6:	3800      	subs	r0, #0
 80109d8:	bf18      	it	ne
 80109da:	2001      	movne	r0, #1
 80109dc:	f380 0010 	usat	r0, #16, r0
 80109e0:	b280      	uxth	r0, r0
 80109e2:	444d      	add	r5, r9
 80109e4:	9900      	ldr	r1, [sp, #0]
 80109e6:	ee07 0a90 	vmov	s15, r0
 80109ea:	45aa      	cmp	sl, r5
 80109ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109f0:	edc6 7a00 	vstr	s15, [r6]
 80109f4:	440e      	add	r6, r1
 80109f6:	f67f a8db 	bls.w	800fbb0 <forward_cast+0xd0>
 80109fa:	49a6      	ldr	r1, [pc, #664]	; (8010c94 <forward_cast+0x11b4>)
 80109fc:	428c      	cmp	r4, r1
 80109fe:	f002 8388 	beq.w	8013112 <forward_cast+0x3632>
 8010a02:	dddb      	ble.n	80109bc <forward_cast+0xedc>
 8010a04:	4544      	cmp	r4, r8
 8010a06:	f001 86a6 	beq.w	8012756 <forward_cast+0x2c76>
 8010a0a:	f340 82fc 	ble.w	8011006 <forward_cast+0x1526>
 8010a0e:	455c      	cmp	r4, fp
 8010a10:	f040 8491 	bne.w	8011336 <forward_cast+0x1856>
 8010a14:	edd5 7a00 	vldr	s15, [r5]
 8010a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a1c:	ee17 0a90 	vmov	r0, s15
 8010a20:	e7dc      	b.n	80109dc <forward_cast+0xefc>
 8010a22:	4b98      	ldr	r3, [pc, #608]	; (8010c84 <forward_cast+0x11a4>)
 8010a24:	459b      	cmp	fp, r3
 8010a26:	f47f a8c3 	bne.w	800fbb0 <forward_cast+0xd0>
 8010a2a:	4555      	cmp	r5, sl
 8010a2c:	f4bf a8c0 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010a30:	9f00      	ldr	r7, [sp, #0]
 8010a32:	4621      	mov	r1, r4
 8010a34:	4628      	mov	r0, r5
 8010a36:	f7fe ffdf 	bl	800f9f8 <_array_handle_get_as_float>
 8010a3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010a3e:	ee17 3a90 	vmov	r3, s15
 8010a42:	f383 0308 	usat	r3, #8, r3
 8010a46:	444d      	add	r5, r9
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	45aa      	cmp	sl, r5
 8010a4c:	8033      	strh	r3, [r6, #0]
 8010a4e:	443e      	add	r6, r7
 8010a50:	d8ef      	bhi.n	8010a32 <forward_cast+0xf52>
 8010a52:	f7ff b8ad 	b.w	800fbb0 <forward_cast+0xd0>
 8010a56:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010a5a:	459b      	cmp	fp, r3
 8010a5c:	f47f a8a8 	bne.w	800fbb0 <forward_cast+0xd0>
 8010a60:	4555      	cmp	r5, sl
 8010a62:	f4bf a8a5 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010a66:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8010c98 <forward_cast+0x11b8>
 8010a6a:	4b87      	ldr	r3, [pc, #540]	; (8010c88 <forward_cast+0x11a8>)
 8010a6c:	4a87      	ldr	r2, [pc, #540]	; (8010c8c <forward_cast+0x11ac>)
 8010a6e:	e018      	b.n	8010aa2 <forward_cast+0xfc2>
 8010a70:	4987      	ldr	r1, [pc, #540]	; (8010c90 <forward_cast+0x11b0>)
 8010a72:	428c      	cmp	r4, r1
 8010a74:	f001 87ba 	beq.w	80129ec <forward_cast+0x2f0c>
 8010a78:	f340 8210 	ble.w	8010e9c <forward_cast+0x13bc>
 8010a7c:	429c      	cmp	r4, r3
 8010a7e:	f001 86a4 	beq.w	80127ca <forward_cast+0x2cea>
 8010a82:	4294      	cmp	r4, r2
 8010a84:	f040 843e 	bne.w	8011304 <forward_cast+0x1824>
 8010a88:	7828      	ldrb	r0, [r5, #0]
 8010a8a:	3800      	subs	r0, #0
 8010a8c:	bf18      	it	ne
 8010a8e:	2001      	movne	r0, #1
 8010a90:	f380 0010 	usat	r0, #16, r0
 8010a94:	444d      	add	r5, r9
 8010a96:	9900      	ldr	r1, [sp, #0]
 8010a98:	8030      	strh	r0, [r6, #0]
 8010a9a:	45aa      	cmp	sl, r5
 8010a9c:	440e      	add	r6, r1
 8010a9e:	f67f a887 	bls.w	800fbb0 <forward_cast+0xd0>
 8010aa2:	497c      	ldr	r1, [pc, #496]	; (8010c94 <forward_cast+0x11b4>)
 8010aa4:	428c      	cmp	r4, r1
 8010aa6:	f001 87af 	beq.w	8012a08 <forward_cast+0x2f28>
 8010aaa:	dde1      	ble.n	8010a70 <forward_cast+0xf90>
 8010aac:	4544      	cmp	r4, r8
 8010aae:	f002 814f 	beq.w	8012d50 <forward_cast+0x3270>
 8010ab2:	f340 8255 	ble.w	8010f60 <forward_cast+0x1480>
 8010ab6:	42bc      	cmp	r4, r7
 8010ab8:	f040 8424 	bne.w	8011304 <forward_cast+0x1824>
 8010abc:	edd5 7a00 	vldr	s15, [r5]
 8010ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ac4:	ee17 0a90 	vmov	r0, s15
 8010ac8:	e7e2      	b.n	8010a90 <forward_cast+0xfb0>
 8010aca:	4555      	cmp	r5, sl
 8010acc:	f4bf a870 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010ad0:	2700      	movs	r7, #0
 8010ad2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8010c98 <forward_cast+0x11b8>
 8010ad6:	e01a      	b.n	8010b0e <forward_cast+0x102e>
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	f002 8356 	beq.w	801318a <forward_cast+0x36aa>
 8010ade:	f340 8236 	ble.w	8010f4e <forward_cast+0x146e>
 8010ae2:	4969      	ldr	r1, [pc, #420]	; (8010c88 <forward_cast+0x11a8>)
 8010ae4:	428c      	cmp	r4, r1
 8010ae6:	f001 85a0 	beq.w	801262a <forward_cast+0x2b4a>
 8010aea:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8010aee:	428c      	cmp	r4, r1
 8010af0:	f040 840d 	bne.w	801130e <forward_cast+0x182e>
 8010af4:	7828      	ldrb	r0, [r5, #0]
 8010af6:	3800      	subs	r0, #0
 8010af8:	bf18      	it	ne
 8010afa:	2001      	movne	r0, #1
 8010afc:	f380 0010 	usat	r0, #16, r0
 8010b00:	444d      	add	r5, r9
 8010b02:	9900      	ldr	r1, [sp, #0]
 8010b04:	55f0      	strb	r0, [r6, r7]
 8010b06:	45aa      	cmp	sl, r5
 8010b08:	440f      	add	r7, r1
 8010b0a:	f67f a851 	bls.w	800fbb0 <forward_cast+0xd0>
 8010b0e:	455c      	cmp	r4, fp
 8010b10:	f001 85ee 	beq.w	80126f0 <forward_cast+0x2c10>
 8010b14:	dde0      	ble.n	8010ad8 <forward_cast+0xff8>
 8010b16:	4544      	cmp	r4, r8
 8010b18:	f002 86a1 	beq.w	801385e <forward_cast+0x3d7e>
 8010b1c:	f340 81ac 	ble.w	8010e78 <forward_cast+0x1398>
 8010b20:	4957      	ldr	r1, [pc, #348]	; (8010c80 <forward_cast+0x11a0>)
 8010b22:	428c      	cmp	r4, r1
 8010b24:	f040 83f3 	bne.w	801130e <forward_cast+0x182e>
 8010b28:	edd5 7a00 	vldr	s15, [r5]
 8010b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b30:	ee17 0a90 	vmov	r0, s15
 8010b34:	e7e2      	b.n	8010afc <forward_cast+0x101c>
 8010b36:	4555      	cmp	r5, sl
 8010b38:	f4bf a83a 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010b3c:	f04f 0800 	mov.w	r8, #0
 8010b40:	4a51      	ldr	r2, [pc, #324]	; (8010c88 <forward_cast+0x11a8>)
 8010b42:	e018      	b.n	8010b76 <forward_cast+0x1096>
 8010b44:	4952      	ldr	r1, [pc, #328]	; (8010c90 <forward_cast+0x11b0>)
 8010b46:	428c      	cmp	r4, r1
 8010b48:	f001 85c2 	beq.w	80126d0 <forward_cast+0x2bf0>
 8010b4c:	f340 82a0 	ble.w	8011090 <forward_cast+0x15b0>
 8010b50:	4294      	cmp	r4, r2
 8010b52:	f001 867c 	beq.w	801284e <forward_cast+0x2d6e>
 8010b56:	494d      	ldr	r1, [pc, #308]	; (8010c8c <forward_cast+0x11ac>)
 8010b58:	428c      	cmp	r4, r1
 8010b5a:	f040 83c8 	bne.w	80112ee <forward_cast+0x180e>
 8010b5e:	7829      	ldrb	r1, [r5, #0]
 8010b60:	3900      	subs	r1, #0
 8010b62:	bf18      	it	ne
 8010b64:	2101      	movne	r1, #1
 8010b66:	444d      	add	r5, r9
 8010b68:	f806 1008 	strb.w	r1, [r6, r8]
 8010b6c:	9900      	ldr	r1, [sp, #0]
 8010b6e:	45aa      	cmp	sl, r5
 8010b70:	4488      	add	r8, r1
 8010b72:	f67f a81d 	bls.w	800fbb0 <forward_cast+0xd0>
 8010b76:	455c      	cmp	r4, fp
 8010b78:	f000 8293 	beq.w	80110a2 <forward_cast+0x15c2>
 8010b7c:	dde2      	ble.n	8010b44 <forward_cast+0x1064>
 8010b7e:	4946      	ldr	r1, [pc, #280]	; (8010c98 <forward_cast+0x11b8>)
 8010b80:	428c      	cmp	r4, r1
 8010b82:	f002 867d 	beq.w	8013880 <forward_cast+0x3da0>
 8010b86:	f340 8362 	ble.w	801124e <forward_cast+0x176e>
 8010b8a:	42bc      	cmp	r4, r7
 8010b8c:	f040 83af 	bne.w	80112ee <forward_cast+0x180e>
 8010b90:	edd5 7a00 	vldr	s15, [r5]
 8010b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b98:	edcd 7a01 	vstr	s15, [sp, #4]
 8010b9c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010ba0:	e7e1      	b.n	8010b66 <forward_cast+0x1086>
 8010ba2:	4555      	cmp	r5, sl
 8010ba4:	f4bf a804 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010ba8:	f04f 0800 	mov.w	r8, #0
 8010bac:	e01c      	b.n	8010be8 <forward_cast+0x1108>
 8010bae:	4938      	ldr	r1, [pc, #224]	; (8010c90 <forward_cast+0x11b0>)
 8010bb0:	428c      	cmp	r4, r1
 8010bb2:	f001 8626 	beq.w	8012802 <forward_cast+0x2d22>
 8010bb6:	f340 8153 	ble.w	8010e60 <forward_cast+0x1380>
 8010bba:	4933      	ldr	r1, [pc, #204]	; (8010c88 <forward_cast+0x11a8>)
 8010bbc:	428c      	cmp	r4, r1
 8010bbe:	f001 8612 	beq.w	80127e6 <forward_cast+0x2d06>
 8010bc2:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8010bc6:	428c      	cmp	r4, r1
 8010bc8:	f040 839f 	bne.w	801130a <forward_cast+0x182a>
 8010bcc:	7828      	ldrb	r0, [r5, #0]
 8010bce:	3800      	subs	r0, #0
 8010bd0:	bf18      	it	ne
 8010bd2:	2001      	movne	r0, #1
 8010bd4:	f300 000f 	ssat	r0, #16, r0
 8010bd8:	444d      	add	r5, r9
 8010bda:	9900      	ldr	r1, [sp, #0]
 8010bdc:	f806 0008 	strb.w	r0, [r6, r8]
 8010be0:	45aa      	cmp	sl, r5
 8010be2:	4488      	add	r8, r1
 8010be4:	f67e afe4 	bls.w	800fbb0 <forward_cast+0xd0>
 8010be8:	455c      	cmp	r4, fp
 8010bea:	f001 857d 	beq.w	80126e8 <forward_cast+0x2c08>
 8010bee:	ddde      	ble.n	8010bae <forward_cast+0x10ce>
 8010bf0:	4929      	ldr	r1, [pc, #164]	; (8010c98 <forward_cast+0x11b8>)
 8010bf2:	428c      	cmp	r4, r1
 8010bf4:	f002 82bb 	beq.w	801316e <forward_cast+0x368e>
 8010bf8:	f340 8256 	ble.w	80110a8 <forward_cast+0x15c8>
 8010bfc:	4294      	cmp	r4, r2
 8010bfe:	f040 8384 	bne.w	801130a <forward_cast+0x182a>
 8010c02:	edd5 7a00 	vldr	s15, [r5]
 8010c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c0a:	ee17 0a90 	vmov	r0, s15
 8010c0e:	e7e1      	b.n	8010bd4 <forward_cast+0x10f4>
 8010c10:	4555      	cmp	r5, sl
 8010c12:	f4be afcd 	bcs.w	800fbb0 <forward_cast+0xd0>
 8010c16:	9f00      	ldr	r7, [sp, #0]
 8010c18:	4628      	mov	r0, r5
 8010c1a:	4621      	mov	r1, r4
 8010c1c:	f7fe feec 	bl	800f9f8 <_array_handle_get_as_float>
 8010c20:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010c24:	444d      	add	r5, r9
 8010c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2a:	bf14      	ite	ne
 8010c2c:	2301      	movne	r3, #1
 8010c2e:	2300      	moveq	r3, #0
 8010c30:	45aa      	cmp	sl, r5
 8010c32:	7033      	strb	r3, [r6, #0]
 8010c34:	443e      	add	r6, r7
 8010c36:	d8ef      	bhi.n	8010c18 <forward_cast+0x1138>
 8010c38:	f7fe bfba 	b.w	800fbb0 <forward_cast+0xd0>
 8010c3c:	4917      	ldr	r1, [pc, #92]	; (8010c9c <forward_cast+0x11bc>)
 8010c3e:	428c      	cmp	r4, r1
 8010c40:	f001 8777 	beq.w	8012b32 <forward_cast+0x3052>
 8010c44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c48:	428c      	cmp	r4, r1
 8010c4a:	f040 8363 	bne.w	8011314 <forward_cast+0x1834>
 8010c4e:	8829      	ldrh	r1, [r5, #0]
 8010c50:	ee07 1a90 	vmov	s15, r1
 8010c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c58:	f7ff bbc8 	b.w	80103ec <forward_cast+0x90c>
 8010c5c:	490f      	ldr	r1, [pc, #60]	; (8010c9c <forward_cast+0x11bc>)
 8010c5e:	428c      	cmp	r4, r1
 8010c60:	f001 877b 	beq.w	8012b5a <forward_cast+0x307a>
 8010c64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c68:	428c      	cmp	r4, r1
 8010c6a:	f040 8357 	bne.w	801131c <forward_cast+0x183c>
 8010c6e:	8829      	ldrh	r1, [r5, #0]
 8010c70:	ee07 1a90 	vmov	s15, r1
 8010c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c78:	f7ff baed 	b.w	8010256 <forward_cast+0x776>
 8010c7c:	00841040 	.word	0x00841040
 8010c80:	01821040 	.word	0x01821040
 8010c84:	00840840 	.word	0x00840840
 8010c88:	00042040 	.word	0x00042040
 8010c8c:	00060440 	.word	0x00060440
 8010c90:	00041040 	.word	0x00041040
 8010c94:	00840440 	.word	0x00840440
 8010c98:	00842040 	.word	0x00842040
 8010c9c:	00040440 	.word	0x00040440
 8010ca0:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010ca4:	428c      	cmp	r4, r1
 8010ca6:	f43f ae0d 	beq.w	80108c4 <forward_cast+0xde4>
 8010caa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010cae:	428c      	cmp	r4, r1
 8010cb0:	f040 833b 	bne.w	801132a <forward_cast+0x184a>
 8010cb4:	8829      	ldrh	r1, [r5, #0]
 8010cb6:	3900      	subs	r1, #0
 8010cb8:	bf18      	it	ne
 8010cba:	2101      	movne	r1, #1
 8010cbc:	e606      	b.n	80108cc <forward_cast+0xdec>
 8010cbe:	455c      	cmp	r4, fp
 8010cc0:	f001 86ef 	beq.w	8012aa2 <forward_cast+0x2fc2>
 8010cc4:	49c3      	ldr	r1, [pc, #780]	; (8010fd4 <forward_cast+0x14f4>)
 8010cc6:	428c      	cmp	r4, r1
 8010cc8:	f040 832f 	bne.w	801132a <forward_cast+0x184a>
 8010ccc:	edd5 7a00 	vldr	s15, [r5]
 8010cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cdc:	bf14      	ite	ne
 8010cde:	2101      	movne	r1, #1
 8010ce0:	2100      	moveq	r1, #0
 8010ce2:	e5f3      	b.n	80108cc <forward_cast+0xdec>
 8010ce4:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010ce8:	428c      	cmp	r4, r1
 8010cea:	f001 8719 	beq.w	8012b20 <forward_cast+0x3040>
 8010cee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010cf2:	428c      	cmp	r4, r1
 8010cf4:	f040 8316 	bne.w	8011324 <forward_cast+0x1844>
 8010cf8:	8828      	ldrh	r0, [r5, #0]
 8010cfa:	f7ff ba13 	b.w	8010124 <forward_cast+0x644>
 8010cfe:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010d02:	428c      	cmp	r4, r1
 8010d04:	f002 8393 	beq.w	801342e <forward_cast+0x394e>
 8010d08:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d0c:	428c      	cmp	r4, r1
 8010d0e:	f040 830f 	bne.w	8011330 <forward_cast+0x1850>
 8010d12:	8828      	ldrh	r0, [r5, #0]
 8010d14:	e59f      	b.n	8010856 <forward_cast+0xd76>
 8010d16:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010d1a:	428c      	cmp	r4, r1
 8010d1c:	f002 813a 	beq.w	8012f94 <forward_cast+0x34b4>
 8010d20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d24:	428c      	cmp	r4, r1
 8010d26:	f040 831b 	bne.w	8011360 <forward_cast+0x1880>
 8010d2a:	8828      	ldrh	r0, [r5, #0]
 8010d2c:	e555      	b.n	80107da <forward_cast+0xcfa>
 8010d2e:	42bc      	cmp	r4, r7
 8010d30:	f002 82e7 	beq.w	8013302 <forward_cast+0x3822>
 8010d34:	49a8      	ldr	r1, [pc, #672]	; (8010fd8 <forward_cast+0x14f8>)
 8010d36:	428c      	cmp	r4, r1
 8010d38:	f040 8306 	bne.w	8011348 <forward_cast+0x1868>
 8010d3c:	8828      	ldrh	r0, [r5, #0]
 8010d3e:	f7ff b875 	b.w	800fe2c <forward_cast+0x34c>
 8010d42:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010d46:	428c      	cmp	r4, r1
 8010d48:	f002 8197 	beq.w	801307a <forward_cast+0x359a>
 8010d4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d50:	428c      	cmp	r4, r1
 8010d52:	f040 830b 	bne.w	801136c <forward_cast+0x188c>
 8010d56:	8829      	ldrh	r1, [r5, #0]
 8010d58:	ee07 1a90 	vmov	s15, r1
 8010d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d60:	f7ff bb84 	b.w	801046c <forward_cast+0x98c>
 8010d64:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010d68:	428c      	cmp	r4, r1
 8010d6a:	f002 837a 	beq.w	8013462 <forward_cast+0x3982>
 8010d6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d72:	428c      	cmp	r4, r1
 8010d74:	f040 82e5 	bne.w	8011342 <forward_cast+0x1862>
 8010d78:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010d7c:	f7ff bbec 	b.w	8010558 <forward_cast+0xa78>
 8010d80:	4544      	cmp	r4, r8
 8010d82:	f002 8361 	beq.w	8013448 <forward_cast+0x3968>
 8010d86:	4994      	ldr	r1, [pc, #592]	; (8010fd8 <forward_cast+0x14f8>)
 8010d88:	428c      	cmp	r4, r1
 8010d8a:	f040 82e6 	bne.w	801135a <forward_cast+0x187a>
 8010d8e:	8828      	ldrh	r0, [r5, #0]
 8010d90:	f7fe bf47 	b.w	800fc22 <forward_cast+0x142>
 8010d94:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010d98:	428c      	cmp	r4, r1
 8010d9a:	f002 82f6 	beq.w	801338a <forward_cast+0x38aa>
 8010d9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010da2:	428c      	cmp	r4, r1
 8010da4:	f040 82d3 	bne.w	801134e <forward_cast+0x186e>
 8010da8:	8828      	ldrh	r0, [r5, #0]
 8010daa:	f7ff b9fb 	b.w	80101a4 <forward_cast+0x6c4>
 8010dae:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010db2:	428c      	cmp	r4, r1
 8010db4:	f002 81aa 	beq.w	801310c <forward_cast+0x362c>
 8010db8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010dbc:	428c      	cmp	r4, r1
 8010dbe:	f040 82dd 	bne.w	801137c <forward_cast+0x189c>
 8010dc2:	8828      	ldrh	r0, [r5, #0]
 8010dc4:	e5bd      	b.n	8010942 <forward_cast+0xe62>
 8010dc6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010dca:	428c      	cmp	r4, r1
 8010dcc:	f002 82d0 	beq.w	8013370 <forward_cast+0x3890>
 8010dd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010dd4:	428c      	cmp	r4, r1
 8010dd6:	f040 82b1 	bne.w	801133c <forward_cast+0x185c>
 8010dda:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010dde:	f7ff bb7f 	b.w	80104e0 <forward_cast+0xa00>
 8010de2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010de6:	428c      	cmp	r4, r1
 8010de8:	f002 82f8 	beq.w	80133dc <forward_cast+0x38fc>
 8010dec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010df0:	428c      	cmp	r4, r1
 8010df2:	f040 82b8 	bne.w	8011366 <forward_cast+0x1886>
 8010df6:	8829      	ldrh	r1, [r5, #0]
 8010df8:	f7ff b870 	b.w	800fedc <forward_cast+0x3fc>
 8010dfc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010e00:	428c      	cmp	r4, r1
 8010e02:	f002 82a7 	beq.w	8013354 <forward_cast+0x3874>
 8010e06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e0a:	428c      	cmp	r4, r1
 8010e0c:	f040 82a2 	bne.w	8011354 <forward_cast+0x1874>
 8010e10:	8828      	ldrh	r0, [r5, #0]
 8010e12:	e465      	b.n	80106e0 <forward_cast+0xc00>
 8010e14:	4294      	cmp	r4, r2
 8010e16:	f002 814e 	beq.w	80130b6 <forward_cast+0x35d6>
 8010e1a:	496f      	ldr	r1, [pc, #444]	; (8010fd8 <forward_cast+0x14f8>)
 8010e1c:	428c      	cmp	r4, r1
 8010e1e:	f040 82b0 	bne.w	8011382 <forward_cast+0x18a2>
 8010e22:	8828      	ldrh	r0, [r5, #0]
 8010e24:	f7ff b8a4 	b.w	800ff70 <forward_cast+0x490>
 8010e28:	42bc      	cmp	r4, r7
 8010e2a:	d0a5      	beq.n	8010d78 <forward_cast+0x1298>
 8010e2c:	455c      	cmp	r4, fp
 8010e2e:	f040 8288 	bne.w	8011342 <forward_cast+0x1862>
 8010e32:	edd5 7a00 	vldr	s15, [r5]
 8010e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e3e:	ee17 1a90 	vmov	r1, s15
 8010e42:	b209      	sxth	r1, r1
 8010e44:	f7ff bb88 	b.w	8010558 <forward_cast+0xa78>
 8010e48:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010e4c:	428c      	cmp	r4, r1
 8010e4e:	f001 84e2 	beq.w	8012816 <forward_cast+0x2d36>
 8010e52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e56:	428c      	cmp	r4, r1
 8010e58:	f040 826d 	bne.w	8011336 <forward_cast+0x1856>
 8010e5c:	8828      	ldrh	r0, [r5, #0]
 8010e5e:	e5bd      	b.n	80109dc <forward_cast+0xefc>
 8010e60:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010e64:	428c      	cmp	r4, r1
 8010e66:	f002 8508 	beq.w	801387a <forward_cast+0x3d9a>
 8010e6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e6e:	428c      	cmp	r4, r1
 8010e70:	f040 824b 	bne.w	801130a <forward_cast+0x182a>
 8010e74:	8828      	ldrh	r0, [r5, #0]
 8010e76:	e6ad      	b.n	8010bd4 <forward_cast+0x10f4>
 8010e78:	4958      	ldr	r1, [pc, #352]	; (8010fdc <forward_cast+0x14fc>)
 8010e7a:	428c      	cmp	r4, r1
 8010e7c:	f001 85c0 	beq.w	8012a00 <forward_cast+0x2f20>
 8010e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e84:	428c      	cmp	r4, r1
 8010e86:	f040 8242 	bne.w	801130e <forward_cast+0x182e>
 8010e8a:	edd5 7a00 	vldr	s15, [r5]
 8010e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e96:	ee17 0a90 	vmov	r0, s15
 8010e9a:	e62f      	b.n	8010afc <forward_cast+0x101c>
 8010e9c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010ea0:	428c      	cmp	r4, r1
 8010ea2:	f002 843a 	beq.w	801371a <forward_cast+0x3c3a>
 8010ea6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010eaa:	428c      	cmp	r4, r1
 8010eac:	f040 822a 	bne.w	8011304 <forward_cast+0x1824>
 8010eb0:	8828      	ldrh	r0, [r5, #0]
 8010eb2:	e5ed      	b.n	8010a90 <forward_cast+0xfb0>
 8010eb4:	455c      	cmp	r4, fp
 8010eb6:	f001 84f2 	beq.w	801289e <forward_cast+0x2dbe>
 8010eba:	429c      	cmp	r4, r3
 8010ebc:	f040 8219 	bne.w	80112f2 <forward_cast+0x1812>
 8010ec0:	edd5 7a00 	vldr	s15, [r5]
 8010ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ecc:	ee17 0a90 	vmov	r0, s15
 8010ed0:	f7fe bf49 	b.w	800fd66 <forward_cast+0x286>
 8010ed4:	42bc      	cmp	r4, r7
 8010ed6:	f001 867c 	beq.w	8012bd2 <forward_cast+0x30f2>
 8010eda:	493f      	ldr	r1, [pc, #252]	; (8010fd8 <forward_cast+0x14f8>)
 8010edc:	428c      	cmp	r4, r1
 8010ede:	f040 8208 	bne.w	80112f2 <forward_cast+0x1812>
 8010ee2:	8828      	ldrh	r0, [r5, #0]
 8010ee4:	f7fe bf3f 	b.w	800fd66 <forward_cast+0x286>
 8010ee8:	42bc      	cmp	r4, r7
 8010eea:	d06f      	beq.n	8010fcc <forward_cast+0x14ec>
 8010eec:	455c      	cmp	r4, fp
 8010eee:	f040 824e 	bne.w	801138e <forward_cast+0x18ae>
 8010ef2:	edd5 7a00 	vldr	s15, [r5]
 8010ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010efe:	ee17 1a90 	vmov	r1, s15
 8010f02:	b289      	uxth	r1, r1
 8010f04:	f7fe bede 	b.w	800fcc4 <forward_cast+0x1e4>
 8010f08:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8010f0c:	428c      	cmp	r4, r1
 8010f0e:	f002 8053 	beq.w	8012fb8 <forward_cast+0x34d8>
 8010f12:	4294      	cmp	r4, r2
 8010f14:	f040 81f3 	bne.w	80112fe <forward_cast+0x181e>
 8010f18:	edd5 7a00 	vldr	s15, [r5]
 8010f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f24:	ee17 0a90 	vmov	r0, s15
 8010f28:	f7ff b8aa 	b.w	8010080 <forward_cast+0x5a0>
 8010f2c:	42bc      	cmp	r4, r7
 8010f2e:	f000 80d4 	beq.w	80110da <forward_cast+0x15fa>
 8010f32:	455c      	cmp	r4, fp
 8010f34:	f040 8228 	bne.w	8011388 <forward_cast+0x18a8>
 8010f38:	edd5 7a00 	vldr	s15, [r5]
 8010f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f44:	ee17 1a90 	vmov	r1, s15
 8010f48:	b209      	sxth	r1, r1
 8010f4a:	f7ff bb41 	b.w	80105d0 <forward_cast+0xaf0>
 8010f4e:	4294      	cmp	r4, r2
 8010f50:	f001 870c 	beq.w	8012d6c <forward_cast+0x328c>
 8010f54:	4920      	ldr	r1, [pc, #128]	; (8010fd8 <forward_cast+0x14f8>)
 8010f56:	428c      	cmp	r4, r1
 8010f58:	f040 81d9 	bne.w	801130e <forward_cast+0x182e>
 8010f5c:	8828      	ldrh	r0, [r5, #0]
 8010f5e:	e5cd      	b.n	8010afc <forward_cast+0x101c>
 8010f60:	455c      	cmp	r4, fp
 8010f62:	f001 842e 	beq.w	80127c2 <forward_cast+0x2ce2>
 8010f66:	491b      	ldr	r1, [pc, #108]	; (8010fd4 <forward_cast+0x14f4>)
 8010f68:	428c      	cmp	r4, r1
 8010f6a:	f040 81cb 	bne.w	8011304 <forward_cast+0x1824>
 8010f6e:	edd5 7a00 	vldr	s15, [r5]
 8010f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f7a:	ee17 0a90 	vmov	r0, s15
 8010f7e:	e587      	b.n	8010a90 <forward_cast+0xfb0>
 8010f80:	4917      	ldr	r1, [pc, #92]	; (8010fe0 <forward_cast+0x1500>)
 8010f82:	428c      	cmp	r4, r1
 8010f84:	f002 82fd 	beq.w	8013582 <forward_cast+0x3aa2>
 8010f88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010f8c:	428c      	cmp	r4, r1
 8010f8e:	f040 81b6 	bne.w	80112fe <forward_cast+0x181e>
 8010f92:	8828      	ldrh	r0, [r5, #0]
 8010f94:	f7ff b874 	b.w	8010080 <forward_cast+0x5a0>
 8010f98:	42bc      	cmp	r4, r7
 8010f9a:	d076      	beq.n	801108a <forward_cast+0x15aa>
 8010f9c:	455c      	cmp	r4, fp
 8010f9e:	f040 81ab 	bne.w	80112f8 <forward_cast+0x1818>
 8010fa2:	edd5 7a00 	vldr	s15, [r5]
 8010fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fae:	ee17 1a90 	vmov	r1, s15
 8010fb2:	b289      	uxth	r1, r1
 8010fb4:	f7ff b828 	b.w	8010008 <forward_cast+0x528>
 8010fb8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010fbc:	428c      	cmp	r4, r1
 8010fbe:	f001 861d 	beq.w	8012bfc <forward_cast+0x311c>
 8010fc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010fc6:	428c      	cmp	r4, r1
 8010fc8:	f040 81e1 	bne.w	801138e <forward_cast+0x18ae>
 8010fcc:	8829      	ldrh	r1, [r5, #0]
 8010fce:	f7fe be79 	b.w	800fcc4 <forward_cast+0x1e4>
 8010fd2:	bf00      	nop
 8010fd4:	00841040 	.word	0x00841040
 8010fd8:	00040840 	.word	0x00040840
 8010fdc:	00840840 	.word	0x00840840
 8010fe0:	00040440 	.word	0x00040440
 8010fe4:	455c      	cmp	r4, fp
 8010fe6:	d043      	beq.n	8011070 <forward_cast+0x1590>
 8010fe8:	429c      	cmp	r4, r3
 8010fea:	f040 817a 	bne.w	80112e2 <forward_cast+0x1802>
 8010fee:	edd5 7a00 	vldr	s15, [r5]
 8010ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ffa:	edcd 7a01 	vstr	s15, [sp, #4]
 8010ffe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011002:	f7ff b99f 	b.w	8010344 <forward_cast+0x864>
 8011006:	42bc      	cmp	r4, r7
 8011008:	f001 8621 	beq.w	8012c4e <forward_cast+0x316e>
 801100c:	49d9      	ldr	r1, [pc, #868]	; (8011374 <forward_cast+0x1894>)
 801100e:	428c      	cmp	r4, r1
 8011010:	f040 8191 	bne.w	8011336 <forward_cast+0x1856>
 8011014:	edd5 7a00 	vldr	s15, [r5]
 8011018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801101c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011020:	ee17 0a90 	vmov	r0, s15
 8011024:	e4da      	b.n	80109dc <forward_cast+0xefc>
 8011026:	455c      	cmp	r4, fp
 8011028:	f001 8469 	beq.w	80128fe <forward_cast+0x2e1e>
 801102c:	429c      	cmp	r4, r3
 801102e:	f040 818b 	bne.w	8011348 <forward_cast+0x1868>
 8011032:	edd5 7a00 	vldr	s15, [r5]
 8011036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801103a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801103e:	ee17 0a90 	vmov	r0, s15
 8011042:	f7fe bef3 	b.w	800fe2c <forward_cast+0x34c>
 8011046:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801104a:	428c      	cmp	r4, r1
 801104c:	d004      	beq.n	8011058 <forward_cast+0x1578>
 801104e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011052:	428c      	cmp	r4, r1
 8011054:	f040 8148 	bne.w	80112e8 <forward_cast+0x1808>
 8011058:	7829      	ldrb	r1, [r5, #0]
 801105a:	f7ff b934 	b.w	80102c6 <forward_cast+0x7e6>
 801105e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011062:	428c      	cmp	r4, r1
 8011064:	d004      	beq.n	8011070 <forward_cast+0x1590>
 8011066:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801106a:	428c      	cmp	r4, r1
 801106c:	f040 8139 	bne.w	80112e2 <forward_cast+0x1802>
 8011070:	7829      	ldrb	r1, [r5, #0]
 8011072:	f7ff b967 	b.w	8010344 <forward_cast+0x864>
 8011076:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801107a:	428c      	cmp	r4, r1
 801107c:	f001 833c 	beq.w	80126f8 <forward_cast+0x2c18>
 8011080:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011084:	428c      	cmp	r4, r1
 8011086:	f040 8137 	bne.w	80112f8 <forward_cast+0x1818>
 801108a:	8829      	ldrh	r1, [r5, #0]
 801108c:	f7fe bfbc 	b.w	8010008 <forward_cast+0x528>
 8011090:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8011094:	428c      	cmp	r4, r1
 8011096:	d004      	beq.n	80110a2 <forward_cast+0x15c2>
 8011098:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801109c:	428c      	cmp	r4, r1
 801109e:	f040 8126 	bne.w	80112ee <forward_cast+0x180e>
 80110a2:	f995 1000 	ldrsb.w	r1, [r5]
 80110a6:	e55e      	b.n	8010b66 <forward_cast+0x1086>
 80110a8:	42bc      	cmp	r4, r7
 80110aa:	f002 80ff 	beq.w	80132ac <forward_cast+0x37cc>
 80110ae:	429c      	cmp	r4, r3
 80110b0:	f040 812b 	bne.w	801130a <forward_cast+0x182a>
 80110b4:	edd5 7a00 	vldr	s15, [r5]
 80110b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110c0:	ee17 0a90 	vmov	r0, s15
 80110c4:	e586      	b.n	8010bd4 <forward_cast+0x10f4>
 80110c6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80110ca:	428c      	cmp	r4, r1
 80110cc:	f001 865f 	beq.w	8012d8e <forward_cast+0x32ae>
 80110d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80110d4:	428c      	cmp	r4, r1
 80110d6:	f040 8157 	bne.w	8011388 <forward_cast+0x18a8>
 80110da:	f9b5 1000 	ldrsh.w	r1, [r5]
 80110de:	f7ff ba77 	b.w	80105d0 <forward_cast+0xaf0>
 80110e2:	455c      	cmp	r4, fp
 80110e4:	d0b8      	beq.n	8011058 <forward_cast+0x1578>
 80110e6:	429c      	cmp	r4, r3
 80110e8:	f040 80fe 	bne.w	80112e8 <forward_cast+0x1808>
 80110ec:	edd5 7a00 	vldr	s15, [r5]
 80110f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110f8:	edcd 7a01 	vstr	s15, [sp, #4]
 80110fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011100:	f7ff b8e1 	b.w	80102c6 <forward_cast+0x7e6>
 8011104:	499c      	ldr	r1, [pc, #624]	; (8011378 <forward_cast+0x1898>)
 8011106:	428c      	cmp	r4, r1
 8011108:	f001 840b 	beq.w	8012922 <forward_cast+0x2e42>
 801110c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011110:	428c      	cmp	r4, r1
 8011112:	f040 8103 	bne.w	801131c <forward_cast+0x183c>
 8011116:	edd5 7a00 	vldr	s15, [r5]
 801111a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801111e:	f7ff b89a 	b.w	8010256 <forward_cast+0x776>
 8011122:	4995      	ldr	r1, [pc, #596]	; (8011378 <forward_cast+0x1898>)
 8011124:	428c      	cmp	r4, r1
 8011126:	f001 8412 	beq.w	801294e <forward_cast+0x2e6e>
 801112a:	429c      	cmp	r4, r3
 801112c:	f040 810f 	bne.w	801134e <forward_cast+0x186e>
 8011130:	edd5 7a00 	vldr	s15, [r5]
 8011134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801113c:	ee17 0a90 	vmov	r0, s15
 8011140:	f7ff b830 	b.w	80101a4 <forward_cast+0x6c4>
 8011144:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8011148:	428c      	cmp	r4, r1
 801114a:	f001 875a 	beq.w	8013002 <forward_cast+0x3522>
 801114e:	4544      	cmp	r4, r8
 8011150:	f040 80e8 	bne.w	8011324 <forward_cast+0x1844>
 8011154:	edd5 7a00 	vldr	s15, [r5]
 8011158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801115c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011160:	ee17 0a90 	vmov	r0, s15
 8011164:	f7fe bfde 	b.w	8010124 <forward_cast+0x644>
 8011168:	429c      	cmp	r4, r3
 801116a:	f002 8370 	beq.w	801384e <forward_cast+0x3d6e>
 801116e:	42bc      	cmp	r4, r7
 8011170:	f040 80fc 	bne.w	801136c <forward_cast+0x188c>
 8011174:	edd5 7a00 	vldr	s15, [r5]
 8011178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801117c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011184:	f7ff b972 	b.w	801046c <forward_cast+0x98c>
 8011188:	42bc      	cmp	r4, r7
 801118a:	f002 8309 	beq.w	80137a0 <forward_cast+0x3cc0>
 801118e:	455c      	cmp	r4, fp
 8011190:	f040 80e6 	bne.w	8011360 <forward_cast+0x1880>
 8011194:	edd5 7a00 	vldr	s15, [r5]
 8011198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801119c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111a0:	ee17 0a90 	vmov	r0, s15
 80111a4:	f7ff bb19 	b.w	80107da <forward_cast+0xcfa>
 80111a8:	42bc      	cmp	r4, r7
 80111aa:	f43f ae24 	beq.w	8010df6 <forward_cast+0x1316>
 80111ae:	455c      	cmp	r4, fp
 80111b0:	f040 80d9 	bne.w	8011366 <forward_cast+0x1886>
 80111b4:	edd5 7a00 	vldr	s15, [r5]
 80111b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111c0:	ee17 1a90 	vmov	r1, s15
 80111c4:	b289      	uxth	r1, r1
 80111c6:	f7fe be89 	b.w	800fedc <forward_cast+0x3fc>
 80111ca:	429c      	cmp	r4, r3
 80111cc:	f001 8512 	beq.w	8012bf4 <forward_cast+0x3114>
 80111d0:	4294      	cmp	r4, r2
 80111d2:	f040 80c2 	bne.w	801135a <forward_cast+0x187a>
 80111d6:	edd5 7a00 	vldr	s15, [r5]
 80111da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111e2:	ee17 0a90 	vmov	r0, s15
 80111e6:	f7fe bd1c 	b.w	800fc22 <forward_cast+0x142>
 80111ea:	429c      	cmp	r4, r3
 80111ec:	f001 86f7 	beq.w	8012fde <forward_cast+0x34fe>
 80111f0:	4294      	cmp	r4, r2
 80111f2:	f040 80af 	bne.w	8011354 <forward_cast+0x1874>
 80111f6:	edd5 7a00 	vldr	s15, [r5]
 80111fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011202:	ee17 0a90 	vmov	r0, s15
 8011206:	f7ff ba6b 	b.w	80106e0 <forward_cast+0xc00>
 801120a:	42bc      	cmp	r4, r7
 801120c:	f43f ade5 	beq.w	8010dda <forward_cast+0x12fa>
 8011210:	455c      	cmp	r4, fp
 8011212:	f040 8093 	bne.w	801133c <forward_cast+0x185c>
 8011216:	edd5 7a00 	vldr	s15, [r5]
 801121a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011222:	ee17 1a90 	vmov	r1, s15
 8011226:	b209      	sxth	r1, r1
 8011228:	f7ff b95a 	b.w	80104e0 <forward_cast+0xa00>
 801122c:	455c      	cmp	r4, fp
 801122e:	f002 8337 	beq.w	80138a0 <forward_cast+0x3dc0>
 8011232:	4950      	ldr	r1, [pc, #320]	; (8011374 <forward_cast+0x1894>)
 8011234:	428c      	cmp	r4, r1
 8011236:	f040 80a1 	bne.w	801137c <forward_cast+0x189c>
 801123a:	edd5 7a00 	vldr	s15, [r5]
 801123e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011246:	ee17 0a90 	vmov	r0, s15
 801124a:	f7ff bb7a 	b.w	8010942 <forward_cast+0xe62>
 801124e:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8011252:	428c      	cmp	r4, r1
 8011254:	f43f af25 	beq.w	80110a2 <forward_cast+0x15c2>
 8011258:	429c      	cmp	r4, r3
 801125a:	d148      	bne.n	80112ee <forward_cast+0x180e>
 801125c:	edd5 7a00 	vldr	s15, [r5]
 8011260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011268:	edcd 7a01 	vstr	s15, [sp, #4]
 801126c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8011270:	e479      	b.n	8010b66 <forward_cast+0x1086>
 8011272:	429c      	cmp	r4, r3
 8011274:	f001 86d7 	beq.w	8013026 <forward_cast+0x3546>
 8011278:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 801127c:	428c      	cmp	r4, r1
 801127e:	f040 8080 	bne.w	8011382 <forward_cast+0x18a2>
 8011282:	edd5 7a00 	vldr	s15, [r5]
 8011286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801128e:	ee17 0a90 	vmov	r0, s15
 8011292:	f7fe be6d 	b.w	800ff70 <forward_cast+0x490>
 8011296:	429c      	cmp	r4, r3
 8011298:	f001 84eb 	beq.w	8012c72 <forward_cast+0x3192>
 801129c:	4294      	cmp	r4, r2
 801129e:	d139      	bne.n	8011314 <forward_cast+0x1834>
 80112a0:	edd5 7a00 	vldr	s15, [r5]
 80112a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112b0:	f7ff b89c 	b.w	80103ec <forward_cast+0x90c>
 80112b4:	455c      	cmp	r4, fp
 80112b6:	f001 8461 	beq.w	8012b7c <forward_cast+0x309c>
 80112ba:	4544      	cmp	r4, r8
 80112bc:	d138      	bne.n	8011330 <forward_cast+0x1850>
 80112be:	edd5 7a00 	vldr	s15, [r5]
 80112c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112ca:	ee17 0a90 	vmov	r0, s15
 80112ce:	f7ff bac2 	b.w	8010856 <forward_cast+0xd76>
 80112d2:	9b00      	ldr	r3, [sp, #0]
 80112d4:	45aa      	cmp	sl, r5
 80112d6:	6037      	str	r7, [r6, #0]
 80112d8:	441e      	add	r6, r3
 80112da:	f63f aa4a 	bhi.w	8010772 <forward_cast+0xc92>
 80112de:	f7fe bc67 	b.w	800fbb0 <forward_cast+0xd0>
 80112e2:	2100      	movs	r1, #0
 80112e4:	f7ff b82e 	b.w	8010344 <forward_cast+0x864>
 80112e8:	2100      	movs	r1, #0
 80112ea:	f7fe bfec 	b.w	80102c6 <forward_cast+0x7e6>
 80112ee:	2100      	movs	r1, #0
 80112f0:	e439      	b.n	8010b66 <forward_cast+0x1086>
 80112f2:	2000      	movs	r0, #0
 80112f4:	f7fe bd37 	b.w	800fd66 <forward_cast+0x286>
 80112f8:	2100      	movs	r1, #0
 80112fa:	f7fe be85 	b.w	8010008 <forward_cast+0x528>
 80112fe:	2000      	movs	r0, #0
 8011300:	f7fe bebe 	b.w	8010080 <forward_cast+0x5a0>
 8011304:	2000      	movs	r0, #0
 8011306:	f7ff bbc3 	b.w	8010a90 <forward_cast+0xfb0>
 801130a:	2000      	movs	r0, #0
 801130c:	e462      	b.n	8010bd4 <forward_cast+0x10f4>
 801130e:	2000      	movs	r0, #0
 8011310:	f7ff bbf4 	b.w	8010afc <forward_cast+0x101c>
 8011314:	eef0 7a48 	vmov.f32	s15, s16
 8011318:	f7ff b868 	b.w	80103ec <forward_cast+0x90c>
 801131c:	eef0 7a48 	vmov.f32	s15, s16
 8011320:	f7fe bf99 	b.w	8010256 <forward_cast+0x776>
 8011324:	2000      	movs	r0, #0
 8011326:	f7fe befd 	b.w	8010124 <forward_cast+0x644>
 801132a:	2100      	movs	r1, #0
 801132c:	f7ff bace 	b.w	80108cc <forward_cast+0xdec>
 8011330:	2000      	movs	r0, #0
 8011332:	f7ff ba90 	b.w	8010856 <forward_cast+0xd76>
 8011336:	2000      	movs	r0, #0
 8011338:	f7ff bb50 	b.w	80109dc <forward_cast+0xefc>
 801133c:	2100      	movs	r1, #0
 801133e:	f7ff b8cf 	b.w	80104e0 <forward_cast+0xa00>
 8011342:	2100      	movs	r1, #0
 8011344:	f7ff b908 	b.w	8010558 <forward_cast+0xa78>
 8011348:	2000      	movs	r0, #0
 801134a:	f7fe bd6f 	b.w	800fe2c <forward_cast+0x34c>
 801134e:	2000      	movs	r0, #0
 8011350:	f7fe bf28 	b.w	80101a4 <forward_cast+0x6c4>
 8011354:	2000      	movs	r0, #0
 8011356:	f7ff b9c3 	b.w	80106e0 <forward_cast+0xc00>
 801135a:	2000      	movs	r0, #0
 801135c:	f7fe bc61 	b.w	800fc22 <forward_cast+0x142>
 8011360:	2000      	movs	r0, #0
 8011362:	f7ff ba3a 	b.w	80107da <forward_cast+0xcfa>
 8011366:	2100      	movs	r1, #0
 8011368:	f7fe bdb8 	b.w	800fedc <forward_cast+0x3fc>
 801136c:	eef0 7a48 	vmov.f32	s15, s16
 8011370:	f7ff b87c 	b.w	801046c <forward_cast+0x98c>
 8011374:	00841040 	.word	0x00841040
 8011378:	00840840 	.word	0x00840840
 801137c:	2000      	movs	r0, #0
 801137e:	f7ff bae0 	b.w	8010942 <forward_cast+0xe62>
 8011382:	2000      	movs	r0, #0
 8011384:	f7fe bdf4 	b.w	800ff70 <forward_cast+0x490>
 8011388:	2100      	movs	r1, #0
 801138a:	f7ff b921 	b.w	80105d0 <forward_cast+0xaf0>
 801138e:	2100      	movs	r1, #0
 8011390:	f7fe bc98 	b.w	800fcc4 <forward_cast+0x1e4>
 8011394:	4555      	cmp	r5, sl
 8011396:	f4be ac0b 	bcs.w	800fbb0 <forward_cast+0xd0>
 801139a:	4f9c      	ldr	r7, [pc, #624]	; (801160c <forward_cast+0x1b2c>)
 801139c:	4b9c      	ldr	r3, [pc, #624]	; (8011610 <forward_cast+0x1b30>)
 801139e:	4a9d      	ldr	r2, [pc, #628]	; (8011614 <forward_cast+0x1b34>)
 80113a0:	e014      	b.n	80113cc <forward_cast+0x18ec>
 80113a2:	499d      	ldr	r1, [pc, #628]	; (8011618 <forward_cast+0x1b38>)
 80113a4:	428c      	cmp	r4, r1
 80113a6:	f001 8764 	beq.w	8013272 <forward_cast+0x3792>
 80113aa:	dd21      	ble.n	80113f0 <forward_cast+0x1910>
 80113ac:	429c      	cmp	r4, r3
 80113ae:	f001 8707 	beq.w	80131c0 <forward_cast+0x36e0>
 80113b2:	4294      	cmp	r4, r2
 80113b4:	d137      	bne.n	8011426 <forward_cast+0x1946>
 80113b6:	7828      	ldrb	r0, [r5, #0]
 80113b8:	3800      	subs	r0, #0
 80113ba:	bf18      	it	ne
 80113bc:	2001      	movne	r0, #1
 80113be:	444d      	add	r5, r9
 80113c0:	9900      	ldr	r1, [sp, #0]
 80113c2:	6030      	str	r0, [r6, #0]
 80113c4:	45aa      	cmp	sl, r5
 80113c6:	440e      	add	r6, r1
 80113c8:	f67e abf2 	bls.w	800fbb0 <forward_cast+0xd0>
 80113cc:	4544      	cmp	r4, r8
 80113ce:	f001 8709 	beq.w	80131e4 <forward_cast+0x3704>
 80113d2:	dde6      	ble.n	80113a2 <forward_cast+0x18c2>
 80113d4:	4991      	ldr	r1, [pc, #580]	; (801161c <forward_cast+0x1b3c>)
 80113d6:	428c      	cmp	r4, r1
 80113d8:	f001 86e1 	beq.w	801319e <forward_cast+0x36be>
 80113dc:	dd13      	ble.n	8011406 <forward_cast+0x1926>
 80113de:	42bc      	cmp	r4, r7
 80113e0:	d121      	bne.n	8011426 <forward_cast+0x1946>
 80113e2:	edd5 7a00 	vldr	s15, [r5]
 80113e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113ea:	ee17 0a90 	vmov	r0, s15
 80113ee:	e7e6      	b.n	80113be <forward_cast+0x18de>
 80113f0:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 80113f4:	428c      	cmp	r4, r1
 80113f6:	f001 86e0 	beq.w	80131ba <forward_cast+0x36da>
 80113fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80113fe:	428c      	cmp	r4, r1
 8011400:	d111      	bne.n	8011426 <forward_cast+0x1946>
 8011402:	8828      	ldrh	r0, [r5, #0]
 8011404:	e7db      	b.n	80113be <forward_cast+0x18de>
 8011406:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801140a:	428c      	cmp	r4, r1
 801140c:	f001 86e6 	beq.w	80131dc <forward_cast+0x36fc>
 8011410:	455c      	cmp	r4, fp
 8011412:	d108      	bne.n	8011426 <forward_cast+0x1946>
 8011414:	edd5 7a00 	vldr	s15, [r5]
 8011418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801141c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011420:	ee17 0a90 	vmov	r0, s15
 8011424:	e7cb      	b.n	80113be <forward_cast+0x18de>
 8011426:	2000      	movs	r0, #0
 8011428:	e7c9      	b.n	80113be <forward_cast+0x18de>
 801142a:	4555      	cmp	r5, sl
 801142c:	f4be abc0 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011430:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801160c <forward_cast+0x1b2c>
 8011434:	4f7a      	ldr	r7, [pc, #488]	; (8011620 <forward_cast+0x1b40>)
 8011436:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 801162c <forward_cast+0x1b4c>
 801143a:	4b77      	ldr	r3, [pc, #476]	; (8011618 <forward_cast+0x1b38>)
 801143c:	4a74      	ldr	r2, [pc, #464]	; (8011610 <forward_cast+0x1b30>)
 801143e:	e017      	b.n	8011470 <forward_cast+0x1990>
 8011440:	429c      	cmp	r4, r3
 8011442:	f001 86db 	beq.w	80131fc <forward_cast+0x371c>
 8011446:	dd26      	ble.n	8011496 <forward_cast+0x19b6>
 8011448:	4294      	cmp	r4, r2
 801144a:	f001 8700 	beq.w	801324e <forward_cast+0x376e>
 801144e:	4971      	ldr	r1, [pc, #452]	; (8011614 <forward_cast+0x1b34>)
 8011450:	428c      	cmp	r4, r1
 8011452:	d139      	bne.n	80114c8 <forward_cast+0x19e8>
 8011454:	7828      	ldrb	r0, [r5, #0]
 8011456:	3800      	subs	r0, #0
 8011458:	bf18      	it	ne
 801145a:	2001      	movne	r0, #1
 801145c:	f380 0010 	usat	r0, #16, r0
 8011460:	444d      	add	r5, r9
 8011462:	b280      	uxth	r0, r0
 8011464:	9900      	ldr	r1, [sp, #0]
 8011466:	45aa      	cmp	sl, r5
 8011468:	6030      	str	r0, [r6, #0]
 801146a:	440e      	add	r6, r1
 801146c:	f67e aba0 	bls.w	800fbb0 <forward_cast+0xd0>
 8011470:	496c      	ldr	r1, [pc, #432]	; (8011624 <forward_cast+0x1b44>)
 8011472:	428c      	cmp	r4, r1
 8011474:	f001 86be 	beq.w	80131f4 <forward_cast+0x3714>
 8011478:	dde2      	ble.n	8011440 <forward_cast+0x1960>
 801147a:	4968      	ldr	r1, [pc, #416]	; (801161c <forward_cast+0x1b3c>)
 801147c:	428c      	cmp	r4, r1
 801147e:	f001 86d5 	beq.w	801322c <forward_cast+0x374c>
 8011482:	dd13      	ble.n	80114ac <forward_cast+0x19cc>
 8011484:	4544      	cmp	r4, r8
 8011486:	d11f      	bne.n	80114c8 <forward_cast+0x19e8>
 8011488:	edd5 7a00 	vldr	s15, [r5]
 801148c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011490:	ee17 0a90 	vmov	r0, s15
 8011494:	e7e2      	b.n	801145c <forward_cast+0x197c>
 8011496:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801149a:	428c      	cmp	r4, r1
 801149c:	f001 86d4 	beq.w	8013248 <forward_cast+0x3768>
 80114a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114a4:	428c      	cmp	r4, r1
 80114a6:	d10f      	bne.n	80114c8 <forward_cast+0x19e8>
 80114a8:	8828      	ldrh	r0, [r5, #0]
 80114aa:	e7d7      	b.n	801145c <forward_cast+0x197c>
 80114ac:	42bc      	cmp	r4, r7
 80114ae:	f001 86dc 	beq.w	801326a <forward_cast+0x378a>
 80114b2:	455c      	cmp	r4, fp
 80114b4:	d108      	bne.n	80114c8 <forward_cast+0x19e8>
 80114b6:	edd5 7a00 	vldr	s15, [r5]
 80114ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80114be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80114c2:	ee17 0a90 	vmov	r0, s15
 80114c6:	e7c9      	b.n	801145c <forward_cast+0x197c>
 80114c8:	2000      	movs	r0, #0
 80114ca:	e7c7      	b.n	801145c <forward_cast+0x197c>
 80114cc:	4555      	cmp	r5, sl
 80114ce:	f4be ab6f 	bcs.w	800fbb0 <forward_cast+0xd0>
 80114d2:	2700      	movs	r7, #0
 80114d4:	f8df 8134 	ldr.w	r8, [pc, #308]	; 801160c <forward_cast+0x1b2c>
 80114d8:	4b4f      	ldr	r3, [pc, #316]	; (8011618 <forward_cast+0x1b38>)
 80114da:	4a4d      	ldr	r2, [pc, #308]	; (8011610 <forward_cast+0x1b30>)
 80114dc:	e016      	b.n	801150c <forward_cast+0x1a2c>
 80114de:	429c      	cmp	r4, r3
 80114e0:	f001 8468 	beq.w	8012db4 <forward_cast+0x32d4>
 80114e4:	dd24      	ble.n	8011530 <forward_cast+0x1a50>
 80114e6:	4294      	cmp	r4, r2
 80114e8:	f001 87cf 	beq.w	801348a <forward_cast+0x39aa>
 80114ec:	4949      	ldr	r1, [pc, #292]	; (8011614 <forward_cast+0x1b34>)
 80114ee:	428c      	cmp	r4, r1
 80114f0:	d13a      	bne.n	8011568 <forward_cast+0x1a88>
 80114f2:	7828      	ldrb	r0, [r5, #0]
 80114f4:	3800      	subs	r0, #0
 80114f6:	bf18      	it	ne
 80114f8:	2001      	movne	r0, #1
 80114fa:	f300 0007 	ssat	r0, #8, r0
 80114fe:	444d      	add	r5, r9
 8011500:	9900      	ldr	r1, [sp, #0]
 8011502:	55f0      	strb	r0, [r6, r7]
 8011504:	45aa      	cmp	sl, r5
 8011506:	440f      	add	r7, r1
 8011508:	f67e ab52 	bls.w	800fbb0 <forward_cast+0xd0>
 801150c:	455c      	cmp	r4, fp
 801150e:	f001 8460 	beq.w	8012dd2 <forward_cast+0x32f2>
 8011512:	dde4      	ble.n	80114de <forward_cast+0x19fe>
 8011514:	4941      	ldr	r1, [pc, #260]	; (801161c <forward_cast+0x1b3c>)
 8011516:	428c      	cmp	r4, r1
 8011518:	f001 87a6 	beq.w	8013468 <forward_cast+0x3988>
 801151c:	dd12      	ble.n	8011544 <forward_cast+0x1a64>
 801151e:	4544      	cmp	r4, r8
 8011520:	d122      	bne.n	8011568 <forward_cast+0x1a88>
 8011522:	edd5 7a00 	vldr	s15, [r5]
 8011526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801152a:	ee17 0a90 	vmov	r0, s15
 801152e:	e7e4      	b.n	80114fa <forward_cast+0x1a1a>
 8011530:	493d      	ldr	r1, [pc, #244]	; (8011628 <forward_cast+0x1b48>)
 8011532:	428c      	cmp	r4, r1
 8011534:	f001 87a6 	beq.w	8013484 <forward_cast+0x39a4>
 8011538:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801153c:	428c      	cmp	r4, r1
 801153e:	d113      	bne.n	8011568 <forward_cast+0x1a88>
 8011540:	8828      	ldrh	r0, [r5, #0]
 8011542:	e7da      	b.n	80114fa <forward_cast+0x1a1a>
 8011544:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8011548:	428c      	cmp	r4, r1
 801154a:	f001 87ac 	beq.w	80134a6 <forward_cast+0x39c6>
 801154e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011552:	428c      	cmp	r4, r1
 8011554:	d108      	bne.n	8011568 <forward_cast+0x1a88>
 8011556:	edd5 7a00 	vldr	s15, [r5]
 801155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011562:	ee17 0a90 	vmov	r0, s15
 8011566:	e7c8      	b.n	80114fa <forward_cast+0x1a1a>
 8011568:	2000      	movs	r0, #0
 801156a:	e7c6      	b.n	80114fa <forward_cast+0x1a1a>
 801156c:	4555      	cmp	r5, sl
 801156e:	f4be ab1f 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011572:	4a28      	ldr	r2, [pc, #160]	; (8011614 <forward_cast+0x1b34>)
 8011574:	e014      	b.n	80115a0 <forward_cast+0x1ac0>
 8011576:	455c      	cmp	r4, fp
 8011578:	f001 8465 	beq.w	8012e46 <forward_cast+0x3366>
 801157c:	dd22      	ble.n	80115c4 <forward_cast+0x1ae4>
 801157e:	4924      	ldr	r1, [pc, #144]	; (8011610 <forward_cast+0x1b30>)
 8011580:	428c      	cmp	r4, r1
 8011582:	f001 843f 	beq.w	8012e04 <forward_cast+0x3324>
 8011586:	4294      	cmp	r4, r2
 8011588:	d136      	bne.n	80115f8 <forward_cast+0x1b18>
 801158a:	7828      	ldrb	r0, [r5, #0]
 801158c:	3800      	subs	r0, #0
 801158e:	bf18      	it	ne
 8011590:	2001      	movne	r0, #1
 8011592:	444d      	add	r5, r9
 8011594:	9900      	ldr	r1, [sp, #0]
 8011596:	6030      	str	r0, [r6, #0]
 8011598:	45aa      	cmp	sl, r5
 801159a:	440e      	add	r6, r1
 801159c:	f67e ab08 	bls.w	800fbb0 <forward_cast+0xd0>
 80115a0:	4544      	cmp	r4, r8
 80115a2:	f001 844c 	beq.w	8012e3e <forward_cast+0x335e>
 80115a6:	dde6      	ble.n	8011576 <forward_cast+0x1a96>
 80115a8:	491c      	ldr	r1, [pc, #112]	; (801161c <forward_cast+0x1b3c>)
 80115aa:	428c      	cmp	r4, r1
 80115ac:	f001 8419 	beq.w	8012de2 <forward_cast+0x3302>
 80115b0:	dd12      	ble.n	80115d8 <forward_cast+0x1af8>
 80115b2:	42bc      	cmp	r4, r7
 80115b4:	d120      	bne.n	80115f8 <forward_cast+0x1b18>
 80115b6:	edd5 7a00 	vldr	s15, [r5]
 80115ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115be:	ee17 0a90 	vmov	r0, s15
 80115c2:	e7e6      	b.n	8011592 <forward_cast+0x1ab2>
 80115c4:	4918      	ldr	r1, [pc, #96]	; (8011628 <forward_cast+0x1b48>)
 80115c6:	428c      	cmp	r4, r1
 80115c8:	f001 8419 	beq.w	8012dfe <forward_cast+0x331e>
 80115cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80115d0:	428c      	cmp	r4, r1
 80115d2:	d111      	bne.n	80115f8 <forward_cast+0x1b18>
 80115d4:	8828      	ldrh	r0, [r5, #0]
 80115d6:	e7dc      	b.n	8011592 <forward_cast+0x1ab2>
 80115d8:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80115dc:	428c      	cmp	r4, r1
 80115de:	f001 841f 	beq.w	8012e20 <forward_cast+0x3340>
 80115e2:	429c      	cmp	r4, r3
 80115e4:	d108      	bne.n	80115f8 <forward_cast+0x1b18>
 80115e6:	edd5 7a00 	vldr	s15, [r5]
 80115ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115f2:	ee17 0a90 	vmov	r0, s15
 80115f6:	e7cc      	b.n	8011592 <forward_cast+0x1ab2>
 80115f8:	2000      	movs	r0, #0
 80115fa:	e7ca      	b.n	8011592 <forward_cast+0x1ab2>
 80115fc:	4555      	cmp	r5, sl
 80115fe:	f4be aad7 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011602:	f04f 0800 	mov.w	r8, #0
 8011606:	4b09      	ldr	r3, [pc, #36]	; (801162c <forward_cast+0x1b4c>)
 8011608:	4a01      	ldr	r2, [pc, #4]	; (8011610 <forward_cast+0x1b30>)
 801160a:	e027      	b.n	801165c <forward_cast+0x1b7c>
 801160c:	01821040 	.word	0x01821040
 8011610:	00042040 	.word	0x00042040
 8011614:	00060440 	.word	0x00060440
 8011618:	00041040 	.word	0x00041040
 801161c:	00842040 	.word	0x00842040
 8011620:	00840840 	.word	0x00840840
 8011624:	00840440 	.word	0x00840440
 8011628:	00040440 	.word	0x00040440
 801162c:	00841040 	.word	0x00841040
 8011630:	42bc      	cmp	r4, r7
 8011632:	f001 8478 	beq.w	8012f26 <forward_cast+0x3446>
 8011636:	dd25      	ble.n	8011684 <forward_cast+0x1ba4>
 8011638:	4294      	cmp	r4, r2
 801163a:	f001 8464 	beq.w	8012f06 <forward_cast+0x3426>
 801163e:	49a9      	ldr	r1, [pc, #676]	; (80118e4 <forward_cast+0x1e04>)
 8011640:	428c      	cmp	r4, r1
 8011642:	d13a      	bne.n	80116ba <forward_cast+0x1bda>
 8011644:	7829      	ldrb	r1, [r5, #0]
 8011646:	3900      	subs	r1, #0
 8011648:	bf18      	it	ne
 801164a:	2101      	movne	r1, #1
 801164c:	444d      	add	r5, r9
 801164e:	f806 1008 	strb.w	r1, [r6, r8]
 8011652:	9900      	ldr	r1, [sp, #0]
 8011654:	45aa      	cmp	sl, r5
 8011656:	4488      	add	r8, r1
 8011658:	f67e aaaa 	bls.w	800fbb0 <forward_cast+0xd0>
 801165c:	455c      	cmp	r4, fp
 801165e:	d018      	beq.n	8011692 <forward_cast+0x1bb2>
 8011660:	dde6      	ble.n	8011630 <forward_cast+0x1b50>
 8011662:	49a1      	ldr	r1, [pc, #644]	; (80118e8 <forward_cast+0x1e08>)
 8011664:	428c      	cmp	r4, r1
 8011666:	f001 843e 	beq.w	8012ee6 <forward_cast+0x3406>
 801166a:	dd15      	ble.n	8011698 <forward_cast+0x1bb8>
 801166c:	499f      	ldr	r1, [pc, #636]	; (80118ec <forward_cast+0x1e0c>)
 801166e:	428c      	cmp	r4, r1
 8011670:	d123      	bne.n	80116ba <forward_cast+0x1bda>
 8011672:	edd5 7a00 	vldr	s15, [r5]
 8011676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801167a:	edcd 7a01 	vstr	s15, [sp, #4]
 801167e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8011682:	e7e3      	b.n	801164c <forward_cast+0x1b6c>
 8011684:	499a      	ldr	r1, [pc, #616]	; (80118f0 <forward_cast+0x1e10>)
 8011686:	428c      	cmp	r4, r1
 8011688:	d003      	beq.n	8011692 <forward_cast+0x1bb2>
 801168a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801168e:	428c      	cmp	r4, r1
 8011690:	d113      	bne.n	80116ba <forward_cast+0x1bda>
 8011692:	f995 1000 	ldrsb.w	r1, [r5]
 8011696:	e7d9      	b.n	801164c <forward_cast+0x1b6c>
 8011698:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801169c:	428c      	cmp	r4, r1
 801169e:	d0f8      	beq.n	8011692 <forward_cast+0x1bb2>
 80116a0:	429c      	cmp	r4, r3
 80116a2:	d10a      	bne.n	80116ba <forward_cast+0x1bda>
 80116a4:	edd5 7a00 	vldr	s15, [r5]
 80116a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116b0:	edcd 7a01 	vstr	s15, [sp, #4]
 80116b4:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80116b8:	e7c8      	b.n	801164c <forward_cast+0x1b6c>
 80116ba:	2100      	movs	r1, #0
 80116bc:	e7c6      	b.n	801164c <forward_cast+0x1b6c>
 80116be:	4555      	cmp	r5, sl
 80116c0:	f4be aa76 	bcs.w	800fbb0 <forward_cast+0xd0>
 80116c4:	f8df 8224 	ldr.w	r8, [pc, #548]	; 80118ec <forward_cast+0x1e0c>
 80116c8:	4f8a      	ldr	r7, [pc, #552]	; (80118f4 <forward_cast+0x1e14>)
 80116ca:	f8df b238 	ldr.w	fp, [pc, #568]	; 8011904 <forward_cast+0x1e24>
 80116ce:	4b8a      	ldr	r3, [pc, #552]	; (80118f8 <forward_cast+0x1e18>)
 80116d0:	4a8a      	ldr	r2, [pc, #552]	; (80118fc <forward_cast+0x1e1c>)
 80116d2:	e014      	b.n	80116fe <forward_cast+0x1c1e>
 80116d4:	429c      	cmp	r4, r3
 80116d6:	f001 83c0 	beq.w	8012e5a <forward_cast+0x337a>
 80116da:	dd26      	ble.n	801172a <forward_cast+0x1c4a>
 80116dc:	4294      	cmp	r4, r2
 80116de:	f001 83ea 	beq.w	8012eb6 <forward_cast+0x33d6>
 80116e2:	4980      	ldr	r1, [pc, #512]	; (80118e4 <forward_cast+0x1e04>)
 80116e4:	428c      	cmp	r4, r1
 80116e6:	d13e      	bne.n	8011766 <forward_cast+0x1c86>
 80116e8:	7829      	ldrb	r1, [r5, #0]
 80116ea:	3900      	subs	r1, #0
 80116ec:	bf18      	it	ne
 80116ee:	2101      	movne	r1, #1
 80116f0:	444d      	add	r5, r9
 80116f2:	6031      	str	r1, [r6, #0]
 80116f4:	9900      	ldr	r1, [sp, #0]
 80116f6:	45aa      	cmp	sl, r5
 80116f8:	440e      	add	r6, r1
 80116fa:	f67e aa59 	bls.w	800fbb0 <forward_cast+0xd0>
 80116fe:	4980      	ldr	r1, [pc, #512]	; (8011900 <forward_cast+0x1e20>)
 8011700:	428c      	cmp	r4, r1
 8011702:	f001 8391 	beq.w	8012e28 <forward_cast+0x3348>
 8011706:	dde5      	ble.n	80116d4 <forward_cast+0x1bf4>
 8011708:	4977      	ldr	r1, [pc, #476]	; (80118e8 <forward_cast+0x1e08>)
 801170a:	428c      	cmp	r4, r1
 801170c:	f001 83c2 	beq.w	8012e94 <forward_cast+0x33b4>
 8011710:	dd18      	ble.n	8011744 <forward_cast+0x1c64>
 8011712:	4544      	cmp	r4, r8
 8011714:	d127      	bne.n	8011766 <forward_cast+0x1c86>
 8011716:	edd5 7a00 	vldr	s15, [r5]
 801171a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011722:	bf14      	ite	ne
 8011724:	2101      	movne	r1, #1
 8011726:	2100      	moveq	r1, #0
 8011728:	e7e2      	b.n	80116f0 <forward_cast+0x1c10>
 801172a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801172e:	428c      	cmp	r4, r1
 8011730:	d0da      	beq.n	80116e8 <forward_cast+0x1c08>
 8011732:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011736:	428c      	cmp	r4, r1
 8011738:	d115      	bne.n	8011766 <forward_cast+0x1c86>
 801173a:	8829      	ldrh	r1, [r5, #0]
 801173c:	3900      	subs	r1, #0
 801173e:	bf18      	it	ne
 8011740:	2101      	movne	r1, #1
 8011742:	e7d5      	b.n	80116f0 <forward_cast+0x1c10>
 8011744:	42bc      	cmp	r4, r7
 8011746:	f001 83c7 	beq.w	8012ed8 <forward_cast+0x33f8>
 801174a:	455c      	cmp	r4, fp
 801174c:	d10b      	bne.n	8011766 <forward_cast+0x1c86>
 801174e:	edd5 7a00 	vldr	s15, [r5]
 8011752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011756:	eef5 7a40 	vcmp.f32	s15, #0.0
 801175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801175e:	bf14      	ite	ne
 8011760:	2101      	movne	r1, #1
 8011762:	2100      	moveq	r1, #0
 8011764:	e7c4      	b.n	80116f0 <forward_cast+0x1c10>
 8011766:	2100      	movs	r1, #0
 8011768:	e7c2      	b.n	80116f0 <forward_cast+0x1c10>
 801176a:	4555      	cmp	r5, sl
 801176c:	f4be aa20 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011770:	9f00      	ldr	r7, [sp, #0]
 8011772:	4621      	mov	r1, r4
 8011774:	4628      	mov	r0, r5
 8011776:	f7fe f93f 	bl	800f9f8 <_array_handle_get_as_float>
 801177a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801177e:	ee17 3a90 	vmov	r3, s15
 8011782:	f383 0308 	usat	r3, #8, r3
 8011786:	444d      	add	r5, r9
 8011788:	7033      	strb	r3, [r6, #0]
 801178a:	443e      	add	r6, r7
 801178c:	45aa      	cmp	sl, r5
 801178e:	d8f0      	bhi.n	8011772 <forward_cast+0x1c92>
 8011790:	f7fe ba0e 	b.w	800fbb0 <forward_cast+0xd0>
 8011794:	4555      	cmp	r5, sl
 8011796:	f4be aa0b 	bcs.w	800fbb0 <forward_cast+0xd0>
 801179a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80118ec <forward_cast+0x1e0c>
 801179e:	4f55      	ldr	r7, [pc, #340]	; (80118f4 <forward_cast+0x1e14>)
 80117a0:	f8df b160 	ldr.w	fp, [pc, #352]	; 8011904 <forward_cast+0x1e24>
 80117a4:	4b54      	ldr	r3, [pc, #336]	; (80118f8 <forward_cast+0x1e18>)
 80117a6:	4a55      	ldr	r2, [pc, #340]	; (80118fc <forward_cast+0x1e1c>)
 80117a8:	e017      	b.n	80117da <forward_cast+0x1cfa>
 80117aa:	429c      	cmp	r4, r3
 80117ac:	f001 8726 	beq.w	80135fc <forward_cast+0x3b1c>
 80117b0:	dd26      	ble.n	8011800 <forward_cast+0x1d20>
 80117b2:	4294      	cmp	r4, r2
 80117b4:	f001 8708 	beq.w	80135c8 <forward_cast+0x3ae8>
 80117b8:	494a      	ldr	r1, [pc, #296]	; (80118e4 <forward_cast+0x1e04>)
 80117ba:	428c      	cmp	r4, r1
 80117bc:	d139      	bne.n	8011832 <forward_cast+0x1d52>
 80117be:	7828      	ldrb	r0, [r5, #0]
 80117c0:	3800      	subs	r0, #0
 80117c2:	bf18      	it	ne
 80117c4:	2001      	movne	r0, #1
 80117c6:	f380 0008 	usat	r0, #8, r0
 80117ca:	444d      	add	r5, r9
 80117cc:	b2c0      	uxtb	r0, r0
 80117ce:	9900      	ldr	r1, [sp, #0]
 80117d0:	45aa      	cmp	sl, r5
 80117d2:	6030      	str	r0, [r6, #0]
 80117d4:	440e      	add	r6, r1
 80117d6:	f67e a9eb 	bls.w	800fbb0 <forward_cast+0xd0>
 80117da:	4949      	ldr	r1, [pc, #292]	; (8011900 <forward_cast+0x1e20>)
 80117dc:	428c      	cmp	r4, r1
 80117de:	f001 8709 	beq.w	80135f4 <forward_cast+0x3b14>
 80117e2:	dde2      	ble.n	80117aa <forward_cast+0x1cca>
 80117e4:	4940      	ldr	r1, [pc, #256]	; (80118e8 <forward_cast+0x1e08>)
 80117e6:	428c      	cmp	r4, r1
 80117e8:	f001 86ce 	beq.w	8013588 <forward_cast+0x3aa8>
 80117ec:	dd13      	ble.n	8011816 <forward_cast+0x1d36>
 80117ee:	4544      	cmp	r4, r8
 80117f0:	d11f      	bne.n	8011832 <forward_cast+0x1d52>
 80117f2:	edd5 7a00 	vldr	s15, [r5]
 80117f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117fa:	ee17 0a90 	vmov	r0, s15
 80117fe:	e7e2      	b.n	80117c6 <forward_cast+0x1ce6>
 8011800:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011804:	428c      	cmp	r4, r1
 8011806:	f001 86cd 	beq.w	80135a4 <forward_cast+0x3ac4>
 801180a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801180e:	428c      	cmp	r4, r1
 8011810:	d10f      	bne.n	8011832 <forward_cast+0x1d52>
 8011812:	8828      	ldrh	r0, [r5, #0]
 8011814:	e7d7      	b.n	80117c6 <forward_cast+0x1ce6>
 8011816:	42bc      	cmp	r4, r7
 8011818:	f001 86e4 	beq.w	80135e4 <forward_cast+0x3b04>
 801181c:	455c      	cmp	r4, fp
 801181e:	d108      	bne.n	8011832 <forward_cast+0x1d52>
 8011820:	edd5 7a00 	vldr	s15, [r5]
 8011824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801182c:	ee17 0a90 	vmov	r0, s15
 8011830:	e7c9      	b.n	80117c6 <forward_cast+0x1ce6>
 8011832:	2000      	movs	r0, #0
 8011834:	e7c7      	b.n	80117c6 <forward_cast+0x1ce6>
 8011836:	4555      	cmp	r5, sl
 8011838:	f4be a9ba 	bcs.w	800fbb0 <forward_cast+0xd0>
 801183c:	f04f 0800 	mov.w	r8, #0
 8011840:	4a30      	ldr	r2, [pc, #192]	; (8011904 <forward_cast+0x1e24>)
 8011842:	e019      	b.n	8011878 <forward_cast+0x1d98>
 8011844:	429c      	cmp	r4, r3
 8011846:	f001 8636 	beq.w	80134b6 <forward_cast+0x39d6>
 801184a:	dd28      	ble.n	801189e <forward_cast+0x1dbe>
 801184c:	492b      	ldr	r1, [pc, #172]	; (80118fc <forward_cast+0x1e1c>)
 801184e:	428c      	cmp	r4, r1
 8011850:	f001 86ef 	beq.w	8013632 <forward_cast+0x3b52>
 8011854:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011858:	428c      	cmp	r4, r1
 801185a:	d138      	bne.n	80118ce <forward_cast+0x1dee>
 801185c:	7828      	ldrb	r0, [r5, #0]
 801185e:	3800      	subs	r0, #0
 8011860:	bf18      	it	ne
 8011862:	2001      	movne	r0, #1
 8011864:	f380 0008 	usat	r0, #8, r0
 8011868:	444d      	add	r5, r9
 801186a:	9900      	ldr	r1, [sp, #0]
 801186c:	f806 0008 	strb.w	r0, [r6, r8]
 8011870:	45aa      	cmp	sl, r5
 8011872:	4488      	add	r8, r1
 8011874:	f67e a99c 	bls.w	800fbb0 <forward_cast+0xd0>
 8011878:	455c      	cmp	r4, fp
 801187a:	f001 86b7 	beq.w	80135ec <forward_cast+0x3b0c>
 801187e:	dde1      	ble.n	8011844 <forward_cast+0x1d64>
 8011880:	4919      	ldr	r1, [pc, #100]	; (80118e8 <forward_cast+0x1e08>)
 8011882:	428c      	cmp	r4, r1
 8011884:	f001 86c4 	beq.w	8013610 <forward_cast+0x3b30>
 8011888:	dd11      	ble.n	80118ae <forward_cast+0x1dce>
 801188a:	4918      	ldr	r1, [pc, #96]	; (80118ec <forward_cast+0x1e0c>)
 801188c:	428c      	cmp	r4, r1
 801188e:	d11e      	bne.n	80118ce <forward_cast+0x1dee>
 8011890:	edd5 7a00 	vldr	s15, [r5]
 8011894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011898:	ee17 0a90 	vmov	r0, s15
 801189c:	e7e2      	b.n	8011864 <forward_cast+0x1d84>
 801189e:	42bc      	cmp	r4, r7
 80118a0:	f001 86c4 	beq.w	801362c <forward_cast+0x3b4c>
 80118a4:	4918      	ldr	r1, [pc, #96]	; (8011908 <forward_cast+0x1e28>)
 80118a6:	428c      	cmp	r4, r1
 80118a8:	d111      	bne.n	80118ce <forward_cast+0x1dee>
 80118aa:	8828      	ldrh	r0, [r5, #0]
 80118ac:	e7da      	b.n	8011864 <forward_cast+0x1d84>
 80118ae:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80118b2:	428c      	cmp	r4, r1
 80118b4:	f001 86cb 	beq.w	801364e <forward_cast+0x3b6e>
 80118b8:	4294      	cmp	r4, r2
 80118ba:	d108      	bne.n	80118ce <forward_cast+0x1dee>
 80118bc:	edd5 7a00 	vldr	s15, [r5]
 80118c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118c8:	ee17 0a90 	vmov	r0, s15
 80118cc:	e7ca      	b.n	8011864 <forward_cast+0x1d84>
 80118ce:	2000      	movs	r0, #0
 80118d0:	e7c8      	b.n	8011864 <forward_cast+0x1d84>
 80118d2:	4555      	cmp	r5, sl
 80118d4:	f4be a96c 	bcs.w	800fbb0 <forward_cast+0xd0>
 80118d8:	2700      	movs	r7, #0
 80118da:	f8df 800c 	ldr.w	r8, [pc, #12]	; 80118e8 <forward_cast+0x1e08>
 80118de:	4b09      	ldr	r3, [pc, #36]	; (8011904 <forward_cast+0x1e24>)
 80118e0:	4a05      	ldr	r2, [pc, #20]	; (80118f8 <forward_cast+0x1e18>)
 80118e2:	e02c      	b.n	801193e <forward_cast+0x1e5e>
 80118e4:	00060440 	.word	0x00060440
 80118e8:	00842040 	.word	0x00842040
 80118ec:	01821040 	.word	0x01821040
 80118f0:	00040440 	.word	0x00040440
 80118f4:	00840840 	.word	0x00840840
 80118f8:	00041040 	.word	0x00041040
 80118fc:	00042040 	.word	0x00042040
 8011900:	00840440 	.word	0x00840440
 8011904:	00841040 	.word	0x00841040
 8011908:	00040840 	.word	0x00040840
 801190c:	4294      	cmp	r4, r2
 801190e:	f001 86ec 	beq.w	80136ea <forward_cast+0x3c0a>
 8011912:	dd27      	ble.n	8011964 <forward_cast+0x1e84>
 8011914:	499d      	ldr	r1, [pc, #628]	; (8011b8c <forward_cast+0x20ac>)
 8011916:	428c      	cmp	r4, r1
 8011918:	f001 86ae 	beq.w	8013678 <forward_cast+0x3b98>
 801191c:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011920:	428c      	cmp	r4, r1
 8011922:	d136      	bne.n	8011992 <forward_cast+0x1eb2>
 8011924:	7828      	ldrb	r0, [r5, #0]
 8011926:	3800      	subs	r0, #0
 8011928:	bf18      	it	ne
 801192a:	2001      	movne	r0, #1
 801192c:	f300 000f 	ssat	r0, #16, r0
 8011930:	444d      	add	r5, r9
 8011932:	9900      	ldr	r1, [sp, #0]
 8011934:	55f0      	strb	r0, [r6, r7]
 8011936:	45aa      	cmp	sl, r5
 8011938:	440f      	add	r7, r1
 801193a:	f67e a939 	bls.w	800fbb0 <forward_cast+0xd0>
 801193e:	4994      	ldr	r1, [pc, #592]	; (8011b90 <forward_cast+0x20b0>)
 8011940:	428c      	cmp	r4, r1
 8011942:	f001 86ce 	beq.w	80136e2 <forward_cast+0x3c02>
 8011946:	dde1      	ble.n	801190c <forward_cast+0x1e2c>
 8011948:	4544      	cmp	r4, r8
 801194a:	f001 8684 	beq.w	8013656 <forward_cast+0x3b76>
 801194e:	dd11      	ble.n	8011974 <forward_cast+0x1e94>
 8011950:	4990      	ldr	r1, [pc, #576]	; (8011b94 <forward_cast+0x20b4>)
 8011952:	428c      	cmp	r4, r1
 8011954:	d11d      	bne.n	8011992 <forward_cast+0x1eb2>
 8011956:	edd5 7a00 	vldr	s15, [r5]
 801195a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801195e:	ee17 0a90 	vmov	r0, s15
 8011962:	e7e3      	b.n	801192c <forward_cast+0x1e4c>
 8011964:	455c      	cmp	r4, fp
 8011966:	f001 8684 	beq.w	8013672 <forward_cast+0x3b92>
 801196a:	498b      	ldr	r1, [pc, #556]	; (8011b98 <forward_cast+0x20b8>)
 801196c:	428c      	cmp	r4, r1
 801196e:	d110      	bne.n	8011992 <forward_cast+0x1eb2>
 8011970:	8828      	ldrh	r0, [r5, #0]
 8011972:	e7db      	b.n	801192c <forward_cast+0x1e4c>
 8011974:	4989      	ldr	r1, [pc, #548]	; (8011b9c <forward_cast+0x20bc>)
 8011976:	428c      	cmp	r4, r1
 8011978:	f001 868c 	beq.w	8013694 <forward_cast+0x3bb4>
 801197c:	429c      	cmp	r4, r3
 801197e:	d108      	bne.n	8011992 <forward_cast+0x1eb2>
 8011980:	edd5 7a00 	vldr	s15, [r5]
 8011984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801198c:	ee17 0a90 	vmov	r0, s15
 8011990:	e7cc      	b.n	801192c <forward_cast+0x1e4c>
 8011992:	2000      	movs	r0, #0
 8011994:	e7ca      	b.n	801192c <forward_cast+0x1e4c>
 8011996:	4555      	cmp	r5, sl
 8011998:	f4be a90a 	bcs.w	800fbb0 <forward_cast+0xd0>
 801199c:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8011b94 <forward_cast+0x20b4>
 80119a0:	4f7e      	ldr	r7, [pc, #504]	; (8011b9c <forward_cast+0x20bc>)
 80119a2:	f8df b208 	ldr.w	fp, [pc, #520]	; 8011bac <forward_cast+0x20cc>
 80119a6:	4b7e      	ldr	r3, [pc, #504]	; (8011ba0 <forward_cast+0x20c0>)
 80119a8:	4a78      	ldr	r2, [pc, #480]	; (8011b8c <forward_cast+0x20ac>)
 80119aa:	e017      	b.n	80119dc <forward_cast+0x1efc>
 80119ac:	429c      	cmp	r4, r3
 80119ae:	f001 86de 	beq.w	801376e <forward_cast+0x3c8e>
 80119b2:	dd26      	ble.n	8011a02 <forward_cast+0x1f22>
 80119b4:	4294      	cmp	r4, r2
 80119b6:	f001 8682 	beq.w	80136be <forward_cast+0x3bde>
 80119ba:	497a      	ldr	r1, [pc, #488]	; (8011ba4 <forward_cast+0x20c4>)
 80119bc:	428c      	cmp	r4, r1
 80119be:	d139      	bne.n	8011a34 <forward_cast+0x1f54>
 80119c0:	7828      	ldrb	r0, [r5, #0]
 80119c2:	3800      	subs	r0, #0
 80119c4:	bf18      	it	ne
 80119c6:	2001      	movne	r0, #1
 80119c8:	f300 000f 	ssat	r0, #16, r0
 80119cc:	444d      	add	r5, r9
 80119ce:	b200      	sxth	r0, r0
 80119d0:	9900      	ldr	r1, [sp, #0]
 80119d2:	45aa      	cmp	sl, r5
 80119d4:	6030      	str	r0, [r6, #0]
 80119d6:	440e      	add	r6, r1
 80119d8:	f67e a8ea 	bls.w	800fbb0 <forward_cast+0xd0>
 80119dc:	496c      	ldr	r1, [pc, #432]	; (8011b90 <forward_cast+0x20b0>)
 80119de:	428c      	cmp	r4, r1
 80119e0:	f001 8565 	beq.w	80134ae <forward_cast+0x39ce>
 80119e4:	dde2      	ble.n	80119ac <forward_cast+0x1ecc>
 80119e6:	4970      	ldr	r1, [pc, #448]	; (8011ba8 <forward_cast+0x20c8>)
 80119e8:	428c      	cmp	r4, r1
 80119ea:	f001 8657 	beq.w	801369c <forward_cast+0x3bbc>
 80119ee:	dd13      	ble.n	8011a18 <forward_cast+0x1f38>
 80119f0:	4544      	cmp	r4, r8
 80119f2:	d11f      	bne.n	8011a34 <forward_cast+0x1f54>
 80119f4:	edd5 7a00 	vldr	s15, [r5]
 80119f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119fc:	ee17 0a90 	vmov	r0, s15
 8011a00:	e7e2      	b.n	80119c8 <forward_cast+0x1ee8>
 8011a02:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011a06:	428c      	cmp	r4, r1
 8011a08:	f001 8656 	beq.w	80136b8 <forward_cast+0x3bd8>
 8011a0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011a10:	428c      	cmp	r4, r1
 8011a12:	d10f      	bne.n	8011a34 <forward_cast+0x1f54>
 8011a14:	8828      	ldrh	r0, [r5, #0]
 8011a16:	e7d7      	b.n	80119c8 <forward_cast+0x1ee8>
 8011a18:	42bc      	cmp	r4, r7
 8011a1a:	f001 865e 	beq.w	80136da <forward_cast+0x3bfa>
 8011a1e:	455c      	cmp	r4, fp
 8011a20:	d108      	bne.n	8011a34 <forward_cast+0x1f54>
 8011a22:	edd5 7a00 	vldr	s15, [r5]
 8011a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a2e:	ee17 0a90 	vmov	r0, s15
 8011a32:	e7c9      	b.n	80119c8 <forward_cast+0x1ee8>
 8011a34:	2000      	movs	r0, #0
 8011a36:	e7c7      	b.n	80119c8 <forward_cast+0x1ee8>
 8011a38:	4555      	cmp	r5, sl
 8011a3a:	f4be a8b9 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011a3e:	f04f 0800 	mov.w	r8, #0
 8011a42:	4b56      	ldr	r3, [pc, #344]	; (8011b9c <forward_cast+0x20bc>)
 8011a44:	4a59      	ldr	r2, [pc, #356]	; (8011bac <forward_cast+0x20cc>)
 8011a46:	e019      	b.n	8011a7c <forward_cast+0x1f9c>
 8011a48:	42bc      	cmp	r4, r7
 8011a4a:	f001 8542 	beq.w	80134d2 <forward_cast+0x39f2>
 8011a4e:	dd29      	ble.n	8011aa4 <forward_cast+0x1fc4>
 8011a50:	494e      	ldr	r1, [pc, #312]	; (8011b8c <forward_cast+0x20ac>)
 8011a52:	428c      	cmp	r4, r1
 8011a54:	f001 8558 	beq.w	8013508 <forward_cast+0x3a28>
 8011a58:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011a5c:	428c      	cmp	r4, r1
 8011a5e:	d137      	bne.n	8011ad0 <forward_cast+0x1ff0>
 8011a60:	7828      	ldrb	r0, [r5, #0]
 8011a62:	3800      	subs	r0, #0
 8011a64:	bf18      	it	ne
 8011a66:	2001      	movne	r0, #1
 8011a68:	f380 0010 	usat	r0, #16, r0
 8011a6c:	444d      	add	r5, r9
 8011a6e:	9900      	ldr	r1, [sp, #0]
 8011a70:	f806 0008 	strb.w	r0, [r6, r8]
 8011a74:	45aa      	cmp	sl, r5
 8011a76:	4488      	add	r8, r1
 8011a78:	f67e a89a 	bls.w	800fbb0 <forward_cast+0xd0>
 8011a7c:	4944      	ldr	r1, [pc, #272]	; (8011b90 <forward_cast+0x20b0>)
 8011a7e:	428c      	cmp	r4, r1
 8011a80:	f001 8523 	beq.w	80134ca <forward_cast+0x39ea>
 8011a84:	dde0      	ble.n	8011a48 <forward_cast+0x1f68>
 8011a86:	4948      	ldr	r1, [pc, #288]	; (8011ba8 <forward_cast+0x20c8>)
 8011a88:	428c      	cmp	r4, r1
 8011a8a:	f001 852c 	beq.w	80134e6 <forward_cast+0x3a06>
 8011a8e:	dd11      	ble.n	8011ab4 <forward_cast+0x1fd4>
 8011a90:	4940      	ldr	r1, [pc, #256]	; (8011b94 <forward_cast+0x20b4>)
 8011a92:	428c      	cmp	r4, r1
 8011a94:	d11c      	bne.n	8011ad0 <forward_cast+0x1ff0>
 8011a96:	edd5 7a00 	vldr	s15, [r5]
 8011a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a9e:	ee17 0a90 	vmov	r0, s15
 8011aa2:	e7e1      	b.n	8011a68 <forward_cast+0x1f88>
 8011aa4:	455c      	cmp	r4, fp
 8011aa6:	f001 852c 	beq.w	8013502 <forward_cast+0x3a22>
 8011aaa:	493b      	ldr	r1, [pc, #236]	; (8011b98 <forward_cast+0x20b8>)
 8011aac:	428c      	cmp	r4, r1
 8011aae:	d10f      	bne.n	8011ad0 <forward_cast+0x1ff0>
 8011ab0:	8828      	ldrh	r0, [r5, #0]
 8011ab2:	e7d9      	b.n	8011a68 <forward_cast+0x1f88>
 8011ab4:	429c      	cmp	r4, r3
 8011ab6:	f001 8535 	beq.w	8013524 <forward_cast+0x3a44>
 8011aba:	4294      	cmp	r4, r2
 8011abc:	d108      	bne.n	8011ad0 <forward_cast+0x1ff0>
 8011abe:	edd5 7a00 	vldr	s15, [r5]
 8011ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011aca:	ee17 0a90 	vmov	r0, s15
 8011ace:	e7cb      	b.n	8011a68 <forward_cast+0x1f88>
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	e7c9      	b.n	8011a68 <forward_cast+0x1f88>
 8011ad4:	4555      	cmp	r5, sl
 8011ad6:	f4be a86b 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011ada:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011b94 <forward_cast+0x20b4>
 8011ade:	4f2f      	ldr	r7, [pc, #188]	; (8011b9c <forward_cast+0x20bc>)
 8011ae0:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8011bac <forward_cast+0x20cc>
 8011ae4:	4b2e      	ldr	r3, [pc, #184]	; (8011ba0 <forward_cast+0x20c0>)
 8011ae6:	4a29      	ldr	r2, [pc, #164]	; (8011b8c <forward_cast+0x20ac>)
 8011ae8:	e017      	b.n	8011b1a <forward_cast+0x203a>
 8011aea:	429c      	cmp	r4, r3
 8011aec:	f001 8126 	beq.w	8012d3c <forward_cast+0x325c>
 8011af0:	dd26      	ble.n	8011b40 <forward_cast+0x2060>
 8011af2:	4294      	cmp	r4, r2
 8011af4:	f001 8625 	beq.w	8013742 <forward_cast+0x3c62>
 8011af8:	492a      	ldr	r1, [pc, #168]	; (8011ba4 <forward_cast+0x20c4>)
 8011afa:	428c      	cmp	r4, r1
 8011afc:	d139      	bne.n	8011b72 <forward_cast+0x2092>
 8011afe:	7828      	ldrb	r0, [r5, #0]
 8011b00:	3800      	subs	r0, #0
 8011b02:	bf18      	it	ne
 8011b04:	2001      	movne	r0, #1
 8011b06:	f380 0010 	usat	r0, #16, r0
 8011b0a:	444d      	add	r5, r9
 8011b0c:	b280      	uxth	r0, r0
 8011b0e:	9900      	ldr	r1, [sp, #0]
 8011b10:	45aa      	cmp	sl, r5
 8011b12:	6030      	str	r0, [r6, #0]
 8011b14:	440e      	add	r6, r1
 8011b16:	f67e a84b 	bls.w	800fbb0 <forward_cast+0xd0>
 8011b1a:	491d      	ldr	r1, [pc, #116]	; (8011b90 <forward_cast+0x20b0>)
 8011b1c:	428c      	cmp	r4, r1
 8011b1e:	f001 8622 	beq.w	8013766 <forward_cast+0x3c86>
 8011b22:	dde2      	ble.n	8011aea <forward_cast+0x200a>
 8011b24:	4920      	ldr	r1, [pc, #128]	; (8011ba8 <forward_cast+0x20c8>)
 8011b26:	428c      	cmp	r4, r1
 8011b28:	f001 85fa 	beq.w	8013720 <forward_cast+0x3c40>
 8011b2c:	dd13      	ble.n	8011b56 <forward_cast+0x2076>
 8011b2e:	4544      	cmp	r4, r8
 8011b30:	d11f      	bne.n	8011b72 <forward_cast+0x2092>
 8011b32:	edd5 7a00 	vldr	s15, [r5]
 8011b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b3a:	ee17 0a90 	vmov	r0, s15
 8011b3e:	e7e2      	b.n	8011b06 <forward_cast+0x2026>
 8011b40:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011b44:	428c      	cmp	r4, r1
 8011b46:	f001 85f9 	beq.w	801373c <forward_cast+0x3c5c>
 8011b4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011b4e:	428c      	cmp	r4, r1
 8011b50:	d10f      	bne.n	8011b72 <forward_cast+0x2092>
 8011b52:	8828      	ldrh	r0, [r5, #0]
 8011b54:	e7d7      	b.n	8011b06 <forward_cast+0x2026>
 8011b56:	42bc      	cmp	r4, r7
 8011b58:	f001 8601 	beq.w	801375e <forward_cast+0x3c7e>
 8011b5c:	455c      	cmp	r4, fp
 8011b5e:	d108      	bne.n	8011b72 <forward_cast+0x2092>
 8011b60:	edd5 7a00 	vldr	s15, [r5]
 8011b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b6c:	ee17 0a90 	vmov	r0, s15
 8011b70:	e7c9      	b.n	8011b06 <forward_cast+0x2026>
 8011b72:	2000      	movs	r0, #0
 8011b74:	e7c7      	b.n	8011b06 <forward_cast+0x2026>
 8011b76:	4555      	cmp	r5, sl
 8011b78:	f4be a81a 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4a0b      	ldr	r2, [pc, #44]	; (8011bac <forward_cast+0x20cc>)
 8011b80:	4619      	mov	r1, r3
 8011b82:	464b      	mov	r3, r9
 8011b84:	46b9      	mov	r9, r7
 8011b86:	4637      	mov	r7, r6
 8011b88:	460e      	mov	r6, r1
 8011b8a:	e02a      	b.n	8011be2 <forward_cast+0x2102>
 8011b8c:	00042040 	.word	0x00042040
 8011b90:	00840440 	.word	0x00840440
 8011b94:	01821040 	.word	0x01821040
 8011b98:	00040840 	.word	0x00040840
 8011b9c:	00840840 	.word	0x00840840
 8011ba0:	00041040 	.word	0x00041040
 8011ba4:	00060440 	.word	0x00060440
 8011ba8:	00842040 	.word	0x00842040
 8011bac:	00841040 	.word	0x00841040
 8011bb0:	4544      	cmp	r4, r8
 8011bb2:	f001 80e2 	beq.w	8012d7a <forward_cast+0x329a>
 8011bb6:	dd27      	ble.n	8011c08 <forward_cast+0x2128>
 8011bb8:	49a5      	ldr	r1, [pc, #660]	; (8011e50 <forward_cast+0x2370>)
 8011bba:	428c      	cmp	r4, r1
 8011bbc:	f001 8606 	beq.w	80137cc <forward_cast+0x3cec>
 8011bc0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011bc4:	428c      	cmp	r4, r1
 8011bc6:	d137      	bne.n	8011c38 <forward_cast+0x2158>
 8011bc8:	7828      	ldrb	r0, [r5, #0]
 8011bca:	3800      	subs	r0, #0
 8011bcc:	bf18      	it	ne
 8011bce:	2001      	movne	r0, #1
 8011bd0:	f300 0007 	ssat	r0, #8, r0
 8011bd4:	441d      	add	r5, r3
 8011bd6:	9900      	ldr	r1, [sp, #0]
 8011bd8:	55b8      	strb	r0, [r7, r6]
 8011bda:	45aa      	cmp	sl, r5
 8011bdc:	440e      	add	r6, r1
 8011bde:	f67d afe7 	bls.w	800fbb0 <forward_cast+0xd0>
 8011be2:	454c      	cmp	r4, r9
 8011be4:	f001 80c5 	beq.w	8012d72 <forward_cast+0x3292>
 8011be8:	dde2      	ble.n	8011bb0 <forward_cast+0x20d0>
 8011bea:	499a      	ldr	r1, [pc, #616]	; (8011e54 <forward_cast+0x2374>)
 8011bec:	428c      	cmp	r4, r1
 8011bee:	f001 85db 	beq.w	80137a8 <forward_cast+0x3cc8>
 8011bf2:	dd11      	ble.n	8011c18 <forward_cast+0x2138>
 8011bf4:	4998      	ldr	r1, [pc, #608]	; (8011e58 <forward_cast+0x2378>)
 8011bf6:	428c      	cmp	r4, r1
 8011bf8:	d11e      	bne.n	8011c38 <forward_cast+0x2158>
 8011bfa:	edd5 7a00 	vldr	s15, [r5]
 8011bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c02:	ee17 0a90 	vmov	r0, s15
 8011c06:	e7e3      	b.n	8011bd0 <forward_cast+0x20f0>
 8011c08:	455c      	cmp	r4, fp
 8011c0a:	f001 85dc 	beq.w	80137c6 <forward_cast+0x3ce6>
 8011c0e:	4993      	ldr	r1, [pc, #588]	; (8011e5c <forward_cast+0x237c>)
 8011c10:	428c      	cmp	r4, r1
 8011c12:	d111      	bne.n	8011c38 <forward_cast+0x2158>
 8011c14:	8828      	ldrh	r0, [r5, #0]
 8011c16:	e7db      	b.n	8011bd0 <forward_cast+0x20f0>
 8011c18:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8011c1c:	428c      	cmp	r4, r1
 8011c1e:	f001 85e4 	beq.w	80137ea <forward_cast+0x3d0a>
 8011c22:	4294      	cmp	r4, r2
 8011c24:	d108      	bne.n	8011c38 <forward_cast+0x2158>
 8011c26:	edd5 7a00 	vldr	s15, [r5]
 8011c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c32:	ee17 0a90 	vmov	r0, s15
 8011c36:	e7cb      	b.n	8011bd0 <forward_cast+0x20f0>
 8011c38:	2000      	movs	r0, #0
 8011c3a:	e7c9      	b.n	8011bd0 <forward_cast+0x20f0>
 8011c3c:	4555      	cmp	r5, sl
 8011c3e:	f4bd afb7 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011c42:	461f      	mov	r7, r3
 8011c44:	4621      	mov	r1, r4
 8011c46:	4628      	mov	r0, r5
 8011c48:	f7fd fed6 	bl	800f9f8 <_array_handle_get_as_float>
 8011c4c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011c50:	ee17 3a90 	vmov	r3, s15
 8011c54:	f303 0307 	ssat	r3, #8, r3
 8011c58:	444d      	add	r5, r9
 8011c5a:	b25b      	sxtb	r3, r3
 8011c5c:	45aa      	cmp	sl, r5
 8011c5e:	6033      	str	r3, [r6, #0]
 8011c60:	443e      	add	r6, r7
 8011c62:	d8ef      	bhi.n	8011c44 <forward_cast+0x2164>
 8011c64:	f7fd bfa4 	b.w	800fbb0 <forward_cast+0xd0>
 8011c68:	4555      	cmp	r5, sl
 8011c6a:	f4bd afa1 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011c6e:	2700      	movs	r7, #0
 8011c70:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8011e58 <forward_cast+0x2378>
 8011c74:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011e74 <forward_cast+0x2394>
 8011c78:	4b79      	ldr	r3, [pc, #484]	; (8011e60 <forward_cast+0x2380>)
 8011c7a:	4a7a      	ldr	r2, [pc, #488]	; (8011e64 <forward_cast+0x2384>)
 8011c7c:	e016      	b.n	8011cac <forward_cast+0x21cc>
 8011c7e:	4294      	cmp	r4, r2
 8011c80:	f000 87ff 	beq.w	8012c82 <forward_cast+0x31a2>
 8011c84:	dd26      	ble.n	8011cd4 <forward_cast+0x21f4>
 8011c86:	4972      	ldr	r1, [pc, #456]	; (8011e50 <forward_cast+0x2370>)
 8011c88:	428c      	cmp	r4, r1
 8011c8a:	f001 8047 	beq.w	8012d1c <forward_cast+0x323c>
 8011c8e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011c92:	428c      	cmp	r4, r1
 8011c94:	d137      	bne.n	8011d06 <forward_cast+0x2226>
 8011c96:	7829      	ldrb	r1, [r5, #0]
 8011c98:	3900      	subs	r1, #0
 8011c9a:	bf18      	it	ne
 8011c9c:	2101      	movne	r1, #1
 8011c9e:	444d      	add	r5, r9
 8011ca0:	55f1      	strb	r1, [r6, r7]
 8011ca2:	9900      	ldr	r1, [sp, #0]
 8011ca4:	45aa      	cmp	sl, r5
 8011ca6:	440f      	add	r7, r1
 8011ca8:	f67d af82 	bls.w	800fbb0 <forward_cast+0xd0>
 8011cac:	496e      	ldr	r1, [pc, #440]	; (8011e68 <forward_cast+0x2388>)
 8011cae:	428c      	cmp	r4, r1
 8011cb0:	d018      	beq.n	8011ce4 <forward_cast+0x2204>
 8011cb2:	dde4      	ble.n	8011c7e <forward_cast+0x219e>
 8011cb4:	4967      	ldr	r1, [pc, #412]	; (8011e54 <forward_cast+0x2374>)
 8011cb6:	428c      	cmp	r4, r1
 8011cb8:	f000 87ef 	beq.w	8012c9a <forward_cast+0x31ba>
 8011cbc:	dd14      	ble.n	8011ce8 <forward_cast+0x2208>
 8011cbe:	4544      	cmp	r4, r8
 8011cc0:	d121      	bne.n	8011d06 <forward_cast+0x2226>
 8011cc2:	edd5 7a00 	vldr	s15, [r5]
 8011cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cca:	edcd 7a01 	vstr	s15, [sp, #4]
 8011cce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011cd2:	e7e4      	b.n	8011c9e <forward_cast+0x21be>
 8011cd4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011cd8:	428c      	cmp	r4, r1
 8011cda:	d003      	beq.n	8011ce4 <forward_cast+0x2204>
 8011cdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011ce0:	428c      	cmp	r4, r1
 8011ce2:	d110      	bne.n	8011d06 <forward_cast+0x2226>
 8011ce4:	7829      	ldrb	r1, [r5, #0]
 8011ce6:	e7da      	b.n	8011c9e <forward_cast+0x21be>
 8011ce8:	455c      	cmp	r4, fp
 8011cea:	d0fb      	beq.n	8011ce4 <forward_cast+0x2204>
 8011cec:	429c      	cmp	r4, r3
 8011cee:	d10a      	bne.n	8011d06 <forward_cast+0x2226>
 8011cf0:	edd5 7a00 	vldr	s15, [r5]
 8011cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cfc:	edcd 7a01 	vstr	s15, [sp, #4]
 8011d00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011d04:	e7cb      	b.n	8011c9e <forward_cast+0x21be>
 8011d06:	2100      	movs	r1, #0
 8011d08:	e7c9      	b.n	8011c9e <forward_cast+0x21be>
 8011d0a:	4555      	cmp	r5, sl
 8011d0c:	f4bd af50 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011d10:	4f51      	ldr	r7, [pc, #324]	; (8011e58 <forward_cast+0x2378>)
 8011d12:	4b4f      	ldr	r3, [pc, #316]	; (8011e50 <forward_cast+0x2370>)
 8011d14:	4a55      	ldr	r2, [pc, #340]	; (8011e6c <forward_cast+0x238c>)
 8011d16:	e013      	b.n	8011d40 <forward_cast+0x2260>
 8011d18:	455c      	cmp	r4, fp
 8011d1a:	f000 87d2 	beq.w	8012cc2 <forward_cast+0x31e2>
 8011d1e:	dd21      	ble.n	8011d64 <forward_cast+0x2284>
 8011d20:	429c      	cmp	r4, r3
 8011d22:	f000 87e9 	beq.w	8012cf8 <forward_cast+0x3218>
 8011d26:	4294      	cmp	r4, r2
 8011d28:	d138      	bne.n	8011d9c <forward_cast+0x22bc>
 8011d2a:	7828      	ldrb	r0, [r5, #0]
 8011d2c:	3800      	subs	r0, #0
 8011d2e:	bf18      	it	ne
 8011d30:	2001      	movne	r0, #1
 8011d32:	444d      	add	r5, r9
 8011d34:	9900      	ldr	r1, [sp, #0]
 8011d36:	6030      	str	r0, [r6, #0]
 8011d38:	45aa      	cmp	sl, r5
 8011d3a:	440e      	add	r6, r1
 8011d3c:	f67d af38 	bls.w	800fbb0 <forward_cast+0xd0>
 8011d40:	4544      	cmp	r4, r8
 8011d42:	f000 87ba 	beq.w	8012cba <forward_cast+0x31da>
 8011d46:	dde7      	ble.n	8011d18 <forward_cast+0x2238>
 8011d48:	4942      	ldr	r1, [pc, #264]	; (8011e54 <forward_cast+0x2374>)
 8011d4a:	428c      	cmp	r4, r1
 8011d4c:	f000 87c3 	beq.w	8012cd6 <forward_cast+0x31f6>
 8011d50:	dd12      	ble.n	8011d78 <forward_cast+0x2298>
 8011d52:	42bc      	cmp	r4, r7
 8011d54:	d122      	bne.n	8011d9c <forward_cast+0x22bc>
 8011d56:	edd5 7a00 	vldr	s15, [r5]
 8011d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d5e:	ee17 0a90 	vmov	r0, s15
 8011d62:	e7e6      	b.n	8011d32 <forward_cast+0x2252>
 8011d64:	4942      	ldr	r1, [pc, #264]	; (8011e70 <forward_cast+0x2390>)
 8011d66:	428c      	cmp	r4, r1
 8011d68:	f000 87c3 	beq.w	8012cf2 <forward_cast+0x3212>
 8011d6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011d70:	428c      	cmp	r4, r1
 8011d72:	d113      	bne.n	8011d9c <forward_cast+0x22bc>
 8011d74:	8828      	ldrh	r0, [r5, #0]
 8011d76:	e7dc      	b.n	8011d32 <forward_cast+0x2252>
 8011d78:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8011d7c:	428c      	cmp	r4, r1
 8011d7e:	f000 87c9 	beq.w	8012d14 <forward_cast+0x3234>
 8011d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d86:	428c      	cmp	r4, r1
 8011d88:	d108      	bne.n	8011d9c <forward_cast+0x22bc>
 8011d8a:	edd5 7a00 	vldr	s15, [r5]
 8011d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d96:	ee17 0a90 	vmov	r0, s15
 8011d9a:	e7ca      	b.n	8011d32 <forward_cast+0x2252>
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	e7c8      	b.n	8011d32 <forward_cast+0x2252>
 8011da0:	4555      	cmp	r5, sl
 8011da2:	f4bd af05 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011da6:	2700      	movs	r7, #0
 8011da8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8011e58 <forward_cast+0x2378>
 8011dac:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8011e74 <forward_cast+0x2394>
 8011db0:	4b2b      	ldr	r3, [pc, #172]	; (8011e60 <forward_cast+0x2380>)
 8011db2:	4a2c      	ldr	r2, [pc, #176]	; (8011e64 <forward_cast+0x2384>)
 8011db4:	e016      	b.n	8011de4 <forward_cast+0x2304>
 8011db6:	4294      	cmp	r4, r2
 8011db8:	f000 8637 	beq.w	8012a2a <forward_cast+0x2f4a>
 8011dbc:	dd26      	ble.n	8011e0c <forward_cast+0x232c>
 8011dbe:	4924      	ldr	r1, [pc, #144]	; (8011e50 <forward_cast+0x2370>)
 8011dc0:	428c      	cmp	r4, r1
 8011dc2:	f001 8526 	beq.w	8013812 <forward_cast+0x3d32>
 8011dc6:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8011dca:	428c      	cmp	r4, r1
 8011dcc:	d137      	bne.n	8011e3e <forward_cast+0x235e>
 8011dce:	7829      	ldrb	r1, [r5, #0]
 8011dd0:	3900      	subs	r1, #0
 8011dd2:	bf18      	it	ne
 8011dd4:	2101      	movne	r1, #1
 8011dd6:	444d      	add	r5, r9
 8011dd8:	55f1      	strb	r1, [r6, r7]
 8011dda:	9900      	ldr	r1, [sp, #0]
 8011ddc:	45aa      	cmp	sl, r5
 8011dde:	440f      	add	r7, r1
 8011de0:	f67d aee6 	bls.w	800fbb0 <forward_cast+0xd0>
 8011de4:	4920      	ldr	r1, [pc, #128]	; (8011e68 <forward_cast+0x2388>)
 8011de6:	428c      	cmp	r4, r1
 8011de8:	d018      	beq.n	8011e1c <forward_cast+0x233c>
 8011dea:	dde4      	ble.n	8011db6 <forward_cast+0x22d6>
 8011dec:	4919      	ldr	r1, [pc, #100]	; (8011e54 <forward_cast+0x2374>)
 8011dee:	428c      	cmp	r4, r1
 8011df0:	f001 84ff 	beq.w	80137f2 <forward_cast+0x3d12>
 8011df4:	dd14      	ble.n	8011e20 <forward_cast+0x2340>
 8011df6:	4544      	cmp	r4, r8
 8011df8:	d121      	bne.n	8011e3e <forward_cast+0x235e>
 8011dfa:	edd5 7a00 	vldr	s15, [r5]
 8011dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e02:	edcd 7a01 	vstr	s15, [sp, #4]
 8011e06:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011e0a:	e7e4      	b.n	8011dd6 <forward_cast+0x22f6>
 8011e0c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011e10:	428c      	cmp	r4, r1
 8011e12:	d003      	beq.n	8011e1c <forward_cast+0x233c>
 8011e14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011e18:	428c      	cmp	r4, r1
 8011e1a:	d110      	bne.n	8011e3e <forward_cast+0x235e>
 8011e1c:	7829      	ldrb	r1, [r5, #0]
 8011e1e:	e7da      	b.n	8011dd6 <forward_cast+0x22f6>
 8011e20:	455c      	cmp	r4, fp
 8011e22:	d0fb      	beq.n	8011e1c <forward_cast+0x233c>
 8011e24:	429c      	cmp	r4, r3
 8011e26:	d10a      	bne.n	8011e3e <forward_cast+0x235e>
 8011e28:	edd5 7a00 	vldr	s15, [r5]
 8011e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e34:	edcd 7a01 	vstr	s15, [sp, #4]
 8011e38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011e3c:	e7cb      	b.n	8011dd6 <forward_cast+0x22f6>
 8011e3e:	2100      	movs	r1, #0
 8011e40:	e7c9      	b.n	8011dd6 <forward_cast+0x22f6>
 8011e42:	4555      	cmp	r5, sl
 8011e44:	f4bd aeb4 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011e48:	4b01      	ldr	r3, [pc, #4]	; (8011e50 <forward_cast+0x2370>)
 8011e4a:	4a08      	ldr	r2, [pc, #32]	; (8011e6c <forward_cast+0x238c>)
 8011e4c:	e028      	b.n	8011ea0 <forward_cast+0x23c0>
 8011e4e:	bf00      	nop
 8011e50:	00042040 	.word	0x00042040
 8011e54:	00842040 	.word	0x00842040
 8011e58:	01821040 	.word	0x01821040
 8011e5c:	00040840 	.word	0x00040840
 8011e60:	00841040 	.word	0x00841040
 8011e64:	00041040 	.word	0x00041040
 8011e68:	00840440 	.word	0x00840440
 8011e6c:	00060440 	.word	0x00060440
 8011e70:	00040440 	.word	0x00040440
 8011e74:	00840840 	.word	0x00840840
 8011e78:	455c      	cmp	r4, fp
 8011e7a:	f000 8675 	beq.w	8012b68 <forward_cast+0x3088>
 8011e7e:	dd22      	ble.n	8011ec6 <forward_cast+0x23e6>
 8011e80:	429c      	cmp	r4, r3
 8011e82:	f001 8522 	beq.w	80138ca <forward_cast+0x3dea>
 8011e86:	4294      	cmp	r4, r2
 8011e88:	d137      	bne.n	8011efa <forward_cast+0x241a>
 8011e8a:	7828      	ldrb	r0, [r5, #0]
 8011e8c:	3800      	subs	r0, #0
 8011e8e:	bf18      	it	ne
 8011e90:	2001      	movne	r0, #1
 8011e92:	444d      	add	r5, r9
 8011e94:	9900      	ldr	r1, [sp, #0]
 8011e96:	6030      	str	r0, [r6, #0]
 8011e98:	45aa      	cmp	sl, r5
 8011e9a:	440e      	add	r6, r1
 8011e9c:	f67d ae88 	bls.w	800fbb0 <forward_cast+0xd0>
 8011ea0:	4544      	cmp	r4, r8
 8011ea2:	f000 85be 	beq.w	8012a22 <forward_cast+0x2f42>
 8011ea6:	dde7      	ble.n	8011e78 <forward_cast+0x2398>
 8011ea8:	499a      	ldr	r1, [pc, #616]	; (8012114 <forward_cast+0x2634>)
 8011eaa:	428c      	cmp	r4, r1
 8011eac:	f001 84fc 	beq.w	80138a8 <forward_cast+0x3dc8>
 8011eb0:	dd13      	ble.n	8011eda <forward_cast+0x23fa>
 8011eb2:	4999      	ldr	r1, [pc, #612]	; (8012118 <forward_cast+0x2638>)
 8011eb4:	428c      	cmp	r4, r1
 8011eb6:	d120      	bne.n	8011efa <forward_cast+0x241a>
 8011eb8:	edd5 7a00 	vldr	s15, [r5]
 8011ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ec0:	ee17 0a90 	vmov	r0, s15
 8011ec4:	e7e5      	b.n	8011e92 <forward_cast+0x23b2>
 8011ec6:	4995      	ldr	r1, [pc, #596]	; (801211c <forward_cast+0x263c>)
 8011ec8:	428c      	cmp	r4, r1
 8011eca:	f001 84fb 	beq.w	80138c4 <forward_cast+0x3de4>
 8011ece:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011ed2:	428c      	cmp	r4, r1
 8011ed4:	d111      	bne.n	8011efa <forward_cast+0x241a>
 8011ed6:	8828      	ldrh	r0, [r5, #0]
 8011ed8:	e7db      	b.n	8011e92 <forward_cast+0x23b2>
 8011eda:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8011ede:	428c      	cmp	r4, r1
 8011ee0:	f001 8501 	beq.w	80138e6 <forward_cast+0x3e06>
 8011ee4:	42bc      	cmp	r4, r7
 8011ee6:	d108      	bne.n	8011efa <forward_cast+0x241a>
 8011ee8:	edd5 7a00 	vldr	s15, [r5]
 8011eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ef4:	ee17 0a90 	vmov	r0, s15
 8011ef8:	e7cb      	b.n	8011e92 <forward_cast+0x23b2>
 8011efa:	2000      	movs	r0, #0
 8011efc:	e7c9      	b.n	8011e92 <forward_cast+0x23b2>
 8011efe:	4555      	cmp	r5, sl
 8011f00:	f4bd ae56 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011f04:	4b86      	ldr	r3, [pc, #536]	; (8012120 <forward_cast+0x2640>)
 8011f06:	4a87      	ldr	r2, [pc, #540]	; (8012124 <forward_cast+0x2644>)
 8011f08:	e013      	b.n	8011f32 <forward_cast+0x2452>
 8011f0a:	42bc      	cmp	r4, r7
 8011f0c:	f000 859d 	beq.w	8012a4a <forward_cast+0x2f6a>
 8011f10:	dd22      	ble.n	8011f58 <forward_cast+0x2478>
 8011f12:	429c      	cmp	r4, r3
 8011f14:	f001 84fc 	beq.w	8013910 <forward_cast+0x3e30>
 8011f18:	4294      	cmp	r4, r2
 8011f1a:	d137      	bne.n	8011f8c <forward_cast+0x24ac>
 8011f1c:	7828      	ldrb	r0, [r5, #0]
 8011f1e:	3800      	subs	r0, #0
 8011f20:	bf18      	it	ne
 8011f22:	2001      	movne	r0, #1
 8011f24:	444d      	add	r5, r9
 8011f26:	9900      	ldr	r1, [sp, #0]
 8011f28:	6030      	str	r0, [r6, #0]
 8011f2a:	45aa      	cmp	sl, r5
 8011f2c:	440e      	add	r6, r1
 8011f2e:	f67d ae3f 	bls.w	800fbb0 <forward_cast+0xd0>
 8011f32:	4544      	cmp	r4, r8
 8011f34:	f000 8585 	beq.w	8012a42 <forward_cast+0x2f62>
 8011f38:	dde7      	ble.n	8011f0a <forward_cast+0x242a>
 8011f3a:	4976      	ldr	r1, [pc, #472]	; (8012114 <forward_cast+0x2634>)
 8011f3c:	428c      	cmp	r4, r1
 8011f3e:	f001 84d6 	beq.w	80138ee <forward_cast+0x3e0e>
 8011f42:	dd13      	ble.n	8011f6c <forward_cast+0x248c>
 8011f44:	4974      	ldr	r1, [pc, #464]	; (8012118 <forward_cast+0x2638>)
 8011f46:	428c      	cmp	r4, r1
 8011f48:	d120      	bne.n	8011f8c <forward_cast+0x24ac>
 8011f4a:	edd5 7a00 	vldr	s15, [r5]
 8011f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f52:	ee17 0a90 	vmov	r0, s15
 8011f56:	e7e5      	b.n	8011f24 <forward_cast+0x2444>
 8011f58:	4970      	ldr	r1, [pc, #448]	; (801211c <forward_cast+0x263c>)
 8011f5a:	428c      	cmp	r4, r1
 8011f5c:	f001 84d5 	beq.w	801390a <forward_cast+0x3e2a>
 8011f60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011f64:	428c      	cmp	r4, r1
 8011f66:	d111      	bne.n	8011f8c <forward_cast+0x24ac>
 8011f68:	8828      	ldrh	r0, [r5, #0]
 8011f6a:	e7db      	b.n	8011f24 <forward_cast+0x2444>
 8011f6c:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8011f70:	428c      	cmp	r4, r1
 8011f72:	f001 84db 	beq.w	801392c <forward_cast+0x3e4c>
 8011f76:	455c      	cmp	r4, fp
 8011f78:	d108      	bne.n	8011f8c <forward_cast+0x24ac>
 8011f7a:	edd5 7a00 	vldr	s15, [r5]
 8011f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f86:	ee17 0a90 	vmov	r0, s15
 8011f8a:	e7cb      	b.n	8011f24 <forward_cast+0x2444>
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	e7c9      	b.n	8011f24 <forward_cast+0x2444>
 8011f90:	4555      	cmp	r5, sl
 8011f92:	f4bd ae0d 	bcs.w	800fbb0 <forward_cast+0xd0>
 8011f96:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8012118 <forward_cast+0x2638>
 8011f9a:	4b61      	ldr	r3, [pc, #388]	; (8012120 <forward_cast+0x2640>)
 8011f9c:	4a61      	ldr	r2, [pc, #388]	; (8012124 <forward_cast+0x2644>)
 8011f9e:	e017      	b.n	8011fd0 <forward_cast+0x24f0>
 8011fa0:	4961      	ldr	r1, [pc, #388]	; (8012128 <forward_cast+0x2648>)
 8011fa2:	428c      	cmp	r4, r1
 8011fa4:	f000 850d 	beq.w	80129c2 <forward_cast+0x2ee2>
 8011fa8:	dd24      	ble.n	8011ff4 <forward_cast+0x2514>
 8011faa:	429c      	cmp	r4, r3
 8011fac:	f000 84f7 	beq.w	801299e <forward_cast+0x2ebe>
 8011fb0:	4294      	cmp	r4, r2
 8011fb2:	d13a      	bne.n	801202a <forward_cast+0x254a>
 8011fb4:	7828      	ldrb	r0, [r5, #0]
 8011fb6:	3800      	subs	r0, #0
 8011fb8:	bf18      	it	ne
 8011fba:	2001      	movne	r0, #1
 8011fbc:	f300 0007 	ssat	r0, #8, r0
 8011fc0:	444d      	add	r5, r9
 8011fc2:	b240      	sxtb	r0, r0
 8011fc4:	9900      	ldr	r1, [sp, #0]
 8011fc6:	45aa      	cmp	sl, r5
 8011fc8:	6030      	str	r0, [r6, #0]
 8011fca:	440e      	add	r6, r1
 8011fcc:	f67d adf0 	bls.w	800fbb0 <forward_cast+0xd0>
 8011fd0:	42bc      	cmp	r4, r7
 8011fd2:	f000 84c0 	beq.w	8012956 <forward_cast+0x2e76>
 8011fd6:	dde3      	ble.n	8011fa0 <forward_cast+0x24c0>
 8011fd8:	494e      	ldr	r1, [pc, #312]	; (8012114 <forward_cast+0x2634>)
 8011fda:	428c      	cmp	r4, r1
 8011fdc:	f000 84ce 	beq.w	801297c <forward_cast+0x2e9c>
 8011fe0:	dd13      	ble.n	801200a <forward_cast+0x252a>
 8011fe2:	4544      	cmp	r4, r8
 8011fe4:	d121      	bne.n	801202a <forward_cast+0x254a>
 8011fe6:	edd5 7a00 	vldr	s15, [r5]
 8011fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fee:	ee17 0a90 	vmov	r0, s15
 8011ff2:	e7e3      	b.n	8011fbc <forward_cast+0x24dc>
 8011ff4:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8011ff8:	428c      	cmp	r4, r1
 8011ffa:	f000 84cd 	beq.w	8012998 <forward_cast+0x2eb8>
 8011ffe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012002:	428c      	cmp	r4, r1
 8012004:	d111      	bne.n	801202a <forward_cast+0x254a>
 8012006:	8828      	ldrh	r0, [r5, #0]
 8012008:	e7d8      	b.n	8011fbc <forward_cast+0x24dc>
 801200a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801200e:	428c      	cmp	r4, r1
 8012010:	f000 84d3 	beq.w	80129ba <forward_cast+0x2eda>
 8012014:	455c      	cmp	r4, fp
 8012016:	d108      	bne.n	801202a <forward_cast+0x254a>
 8012018:	edd5 7a00 	vldr	s15, [r5]
 801201c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012024:	ee17 0a90 	vmov	r0, s15
 8012028:	e7c8      	b.n	8011fbc <forward_cast+0x24dc>
 801202a:	2000      	movs	r0, #0
 801202c:	e7c6      	b.n	8011fbc <forward_cast+0x24dc>
 801202e:	4555      	cmp	r5, sl
 8012030:	f4bd adbe 	bcs.w	800fbb0 <forward_cast+0xd0>
 8012034:	9f00      	ldr	r7, [sp, #0]
 8012036:	4628      	mov	r0, r5
 8012038:	4621      	mov	r1, r4
 801203a:	f7fd fcdd 	bl	800f9f8 <_array_handle_get_as_float>
 801203e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012042:	444d      	add	r5, r9
 8012044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012048:	bf14      	ite	ne
 801204a:	2301      	movne	r3, #1
 801204c:	2300      	moveq	r3, #0
 801204e:	45aa      	cmp	sl, r5
 8012050:	7033      	strb	r3, [r6, #0]
 8012052:	443e      	add	r6, r7
 8012054:	d8ef      	bhi.n	8012036 <forward_cast+0x2556>
 8012056:	f7fd bdab 	b.w	800fbb0 <forward_cast+0xd0>
 801205a:	4555      	cmp	r5, sl
 801205c:	f4bd ada8 	bcs.w	800fbb0 <forward_cast+0xd0>
 8012060:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8012118 <forward_cast+0x2638>
 8012064:	4f31      	ldr	r7, [pc, #196]	; (801212c <forward_cast+0x264c>)
 8012066:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8012134 <forward_cast+0x2654>
 801206a:	4b2f      	ldr	r3, [pc, #188]	; (8012128 <forward_cast+0x2648>)
 801206c:	4a2c      	ldr	r2, [pc, #176]	; (8012120 <forward_cast+0x2640>)
 801206e:	e017      	b.n	80120a0 <forward_cast+0x25c0>
 8012070:	429c      	cmp	r4, r3
 8012072:	f000 829d 	beq.w	80125b0 <forward_cast+0x2ad0>
 8012076:	dd26      	ble.n	80120c6 <forward_cast+0x25e6>
 8012078:	4294      	cmp	r4, r2
 801207a:	f000 82b9 	beq.w	80125f0 <forward_cast+0x2b10>
 801207e:	4929      	ldr	r1, [pc, #164]	; (8012124 <forward_cast+0x2644>)
 8012080:	428c      	cmp	r4, r1
 8012082:	d139      	bne.n	80120f8 <forward_cast+0x2618>
 8012084:	7828      	ldrb	r0, [r5, #0]
 8012086:	3800      	subs	r0, #0
 8012088:	bf18      	it	ne
 801208a:	2001      	movne	r0, #1
 801208c:	f380 0008 	usat	r0, #8, r0
 8012090:	444d      	add	r5, r9
 8012092:	b2c0      	uxtb	r0, r0
 8012094:	9900      	ldr	r1, [sp, #0]
 8012096:	45aa      	cmp	sl, r5
 8012098:	6030      	str	r0, [r6, #0]
 801209a:	440e      	add	r6, r1
 801209c:	f67d ad88 	bls.w	800fbb0 <forward_cast+0xd0>
 80120a0:	4923      	ldr	r1, [pc, #140]	; (8012130 <forward_cast+0x2650>)
 80120a2:	428c      	cmp	r4, r1
 80120a4:	f000 82b4 	beq.w	8012610 <forward_cast+0x2b30>
 80120a8:	dde2      	ble.n	8012070 <forward_cast+0x2590>
 80120aa:	491a      	ldr	r1, [pc, #104]	; (8012114 <forward_cast+0x2634>)
 80120ac:	428c      	cmp	r4, r1
 80120ae:	f000 8290 	beq.w	80125d2 <forward_cast+0x2af2>
 80120b2:	dd13      	ble.n	80120dc <forward_cast+0x25fc>
 80120b4:	4544      	cmp	r4, r8
 80120b6:	d11f      	bne.n	80120f8 <forward_cast+0x2618>
 80120b8:	edd5 7a00 	vldr	s15, [r5]
 80120bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120c0:	ee17 0a90 	vmov	r0, s15
 80120c4:	e7e2      	b.n	801208c <forward_cast+0x25ac>
 80120c6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80120ca:	428c      	cmp	r4, r1
 80120cc:	f000 828e 	beq.w	80125ec <forward_cast+0x2b0c>
 80120d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80120d4:	428c      	cmp	r4, r1
 80120d6:	d10f      	bne.n	80120f8 <forward_cast+0x2618>
 80120d8:	8828      	ldrh	r0, [r5, #0]
 80120da:	e7d7      	b.n	801208c <forward_cast+0x25ac>
 80120dc:	42bc      	cmp	r4, r7
 80120de:	f000 8294 	beq.w	801260a <forward_cast+0x2b2a>
 80120e2:	455c      	cmp	r4, fp
 80120e4:	d108      	bne.n	80120f8 <forward_cast+0x2618>
 80120e6:	edd5 7a00 	vldr	s15, [r5]
 80120ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120f2:	ee17 0a90 	vmov	r0, s15
 80120f6:	e7c9      	b.n	801208c <forward_cast+0x25ac>
 80120f8:	2000      	movs	r0, #0
 80120fa:	e7c7      	b.n	801208c <forward_cast+0x25ac>
 80120fc:	4555      	cmp	r5, sl
 80120fe:	f4bd ad57 	bcs.w	800fbb0 <forward_cast+0xd0>
 8012102:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8012118 <forward_cast+0x2638>
 8012106:	4f09      	ldr	r7, [pc, #36]	; (801212c <forward_cast+0x264c>)
 8012108:	f8df b028 	ldr.w	fp, [pc, #40]	; 8012134 <forward_cast+0x2654>
 801210c:	4b06      	ldr	r3, [pc, #24]	; (8012128 <forward_cast+0x2648>)
 801210e:	4a04      	ldr	r2, [pc, #16]	; (8012120 <forward_cast+0x2640>)
 8012110:	e027      	b.n	8012162 <forward_cast+0x2682>
 8012112:	bf00      	nop
 8012114:	00842040 	.word	0x00842040
 8012118:	01821040 	.word	0x01821040
 801211c:	00040440 	.word	0x00040440
 8012120:	00042040 	.word	0x00042040
 8012124:	00060440 	.word	0x00060440
 8012128:	00041040 	.word	0x00041040
 801212c:	00840840 	.word	0x00840840
 8012130:	00840440 	.word	0x00840440
 8012134:	00841040 	.word	0x00841040
 8012138:	429c      	cmp	r4, r3
 801213a:	f000 8298 	beq.w	801266e <forward_cast+0x2b8e>
 801213e:	dd26      	ble.n	801218e <forward_cast+0x26ae>
 8012140:	4294      	cmp	r4, r2
 8012142:	f000 82a0 	beq.w	8012686 <forward_cast+0x2ba6>
 8012146:	499c      	ldr	r1, [pc, #624]	; (80123b8 <forward_cast+0x28d8>)
 8012148:	428c      	cmp	r4, r1
 801214a:	d13e      	bne.n	80121ca <forward_cast+0x26ea>
 801214c:	7829      	ldrb	r1, [r5, #0]
 801214e:	3900      	subs	r1, #0
 8012150:	bf18      	it	ne
 8012152:	2101      	movne	r1, #1
 8012154:	444d      	add	r5, r9
 8012156:	6031      	str	r1, [r6, #0]
 8012158:	9900      	ldr	r1, [sp, #0]
 801215a:	45aa      	cmp	sl, r5
 801215c:	440e      	add	r6, r1
 801215e:	f67d ad27 	bls.w	800fbb0 <forward_cast+0xd0>
 8012162:	4996      	ldr	r1, [pc, #600]	; (80123bc <forward_cast+0x28dc>)
 8012164:	428c      	cmp	r4, r1
 8012166:	f000 827c 	beq.w	8012662 <forward_cast+0x2b82>
 801216a:	dde5      	ble.n	8012138 <forward_cast+0x2658>
 801216c:	4994      	ldr	r1, [pc, #592]	; (80123c0 <forward_cast+0x28e0>)
 801216e:	428c      	cmp	r4, r1
 8012170:	f000 8206 	beq.w	8012580 <forward_cast+0x2aa0>
 8012174:	dd18      	ble.n	80121a8 <forward_cast+0x26c8>
 8012176:	4544      	cmp	r4, r8
 8012178:	d127      	bne.n	80121ca <forward_cast+0x26ea>
 801217a:	edd5 7a00 	vldr	s15, [r5]
 801217e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012186:	bf14      	ite	ne
 8012188:	2101      	movne	r1, #1
 801218a:	2100      	moveq	r1, #0
 801218c:	e7e2      	b.n	8012154 <forward_cast+0x2674>
 801218e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012192:	428c      	cmp	r4, r1
 8012194:	d0da      	beq.n	801214c <forward_cast+0x266c>
 8012196:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801219a:	428c      	cmp	r4, r1
 801219c:	d115      	bne.n	80121ca <forward_cast+0x26ea>
 801219e:	8829      	ldrh	r1, [r5, #0]
 80121a0:	3900      	subs	r1, #0
 80121a2:	bf18      	it	ne
 80121a4:	2101      	movne	r1, #1
 80121a6:	e7d5      	b.n	8012154 <forward_cast+0x2674>
 80121a8:	42bc      	cmp	r4, r7
 80121aa:	f000 827c 	beq.w	80126a6 <forward_cast+0x2bc6>
 80121ae:	455c      	cmp	r4, fp
 80121b0:	d10b      	bne.n	80121ca <forward_cast+0x26ea>
 80121b2:	edd5 7a00 	vldr	s15, [r5]
 80121b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80121be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c2:	bf14      	ite	ne
 80121c4:	2101      	movne	r1, #1
 80121c6:	2100      	moveq	r1, #0
 80121c8:	e7c4      	b.n	8012154 <forward_cast+0x2674>
 80121ca:	2100      	movs	r1, #0
 80121cc:	e7c2      	b.n	8012154 <forward_cast+0x2674>
 80121ce:	4555      	cmp	r5, sl
 80121d0:	f4bd acee 	bcs.w	800fbb0 <forward_cast+0xd0>
 80121d4:	4b7b      	ldr	r3, [pc, #492]	; (80123c4 <forward_cast+0x28e4>)
 80121d6:	4a78      	ldr	r2, [pc, #480]	; (80123b8 <forward_cast+0x28d8>)
 80121d8:	e014      	b.n	8012204 <forward_cast+0x2724>
 80121da:	497b      	ldr	r1, [pc, #492]	; (80123c8 <forward_cast+0x28e8>)
 80121dc:	428c      	cmp	r4, r1
 80121de:	f000 832d 	beq.w	801283c <forward_cast+0x2d5c>
 80121e2:	dd21      	ble.n	8012228 <forward_cast+0x2748>
 80121e4:	429c      	cmp	r4, r3
 80121e6:	f000 819c 	beq.w	8012522 <forward_cast+0x2a42>
 80121ea:	4294      	cmp	r4, r2
 80121ec:	d137      	bne.n	801225e <forward_cast+0x277e>
 80121ee:	7828      	ldrb	r0, [r5, #0]
 80121f0:	3800      	subs	r0, #0
 80121f2:	bf18      	it	ne
 80121f4:	2001      	movne	r0, #1
 80121f6:	444d      	add	r5, r9
 80121f8:	9900      	ldr	r1, [sp, #0]
 80121fa:	6030      	str	r0, [r6, #0]
 80121fc:	45aa      	cmp	sl, r5
 80121fe:	440e      	add	r6, r1
 8012200:	f67d acd6 	bls.w	800fbb0 <forward_cast+0xd0>
 8012204:	4544      	cmp	r4, r8
 8012206:	f000 8316 	beq.w	8012836 <forward_cast+0x2d56>
 801220a:	dde6      	ble.n	80121da <forward_cast+0x26fa>
 801220c:	496c      	ldr	r1, [pc, #432]	; (80123c0 <forward_cast+0x28e0>)
 801220e:	428c      	cmp	r4, r1
 8012210:	f000 8178 	beq.w	8012504 <forward_cast+0x2a24>
 8012214:	dd13      	ble.n	801223e <forward_cast+0x275e>
 8012216:	42bc      	cmp	r4, r7
 8012218:	d121      	bne.n	801225e <forward_cast+0x277e>
 801221a:	edd5 7a00 	vldr	s15, [r5]
 801221e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012222:	ee17 0a90 	vmov	r0, s15
 8012226:	e7e6      	b.n	80121f6 <forward_cast+0x2716>
 8012228:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 801222c:	428c      	cmp	r4, r1
 801222e:	f000 8176 	beq.w	801251e <forward_cast+0x2a3e>
 8012232:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012236:	428c      	cmp	r4, r1
 8012238:	d111      	bne.n	801225e <forward_cast+0x277e>
 801223a:	8828      	ldrh	r0, [r5, #0]
 801223c:	e7db      	b.n	80121f6 <forward_cast+0x2716>
 801223e:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8012242:	428c      	cmp	r4, r1
 8012244:	f000 817a 	beq.w	801253c <forward_cast+0x2a5c>
 8012248:	455c      	cmp	r4, fp
 801224a:	d108      	bne.n	801225e <forward_cast+0x277e>
 801224c:	edd5 7a00 	vldr	s15, [r5]
 8012250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012258:	ee17 0a90 	vmov	r0, s15
 801225c:	e7cb      	b.n	80121f6 <forward_cast+0x2716>
 801225e:	2000      	movs	r0, #0
 8012260:	e7c9      	b.n	80121f6 <forward_cast+0x2716>
 8012262:	4555      	cmp	r5, sl
 8012264:	f4bd aca4 	bcs.w	800fbb0 <forward_cast+0xd0>
 8012268:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80123d4 <forward_cast+0x28f4>
 801226c:	4f57      	ldr	r7, [pc, #348]	; (80123cc <forward_cast+0x28ec>)
 801226e:	f8df b160 	ldr.w	fp, [pc, #352]	; 80123d0 <forward_cast+0x28f0>
 8012272:	4b55      	ldr	r3, [pc, #340]	; (80123c8 <forward_cast+0x28e8>)
 8012274:	4a53      	ldr	r2, [pc, #332]	; (80123c4 <forward_cast+0x28e4>)
 8012276:	e017      	b.n	80122a8 <forward_cast+0x27c8>
 8012278:	429c      	cmp	r4, r3
 801227a:	f000 82cf 	beq.w	801281c <forward_cast+0x2d3c>
 801227e:	dd26      	ble.n	80122ce <forward_cast+0x27ee>
 8012280:	4294      	cmp	r4, r2
 8012282:	f000 816d 	beq.w	8012560 <forward_cast+0x2a80>
 8012286:	494c      	ldr	r1, [pc, #304]	; (80123b8 <forward_cast+0x28d8>)
 8012288:	428c      	cmp	r4, r1
 801228a:	d139      	bne.n	8012300 <forward_cast+0x2820>
 801228c:	7828      	ldrb	r0, [r5, #0]
 801228e:	3800      	subs	r0, #0
 8012290:	bf18      	it	ne
 8012292:	2001      	movne	r0, #1
 8012294:	f300 000f 	ssat	r0, #16, r0
 8012298:	444d      	add	r5, r9
 801229a:	b200      	sxth	r0, r0
 801229c:	9900      	ldr	r1, [sp, #0]
 801229e:	45aa      	cmp	sl, r5
 80122a0:	6030      	str	r0, [r6, #0]
 80122a2:	440e      	add	r6, r1
 80122a4:	f67d ac84 	bls.w	800fbb0 <forward_cast+0xd0>
 80122a8:	4944      	ldr	r1, [pc, #272]	; (80123bc <forward_cast+0x28dc>)
 80122aa:	428c      	cmp	r4, r1
 80122ac:	f000 8101 	beq.w	80124b2 <forward_cast+0x29d2>
 80122b0:	dde2      	ble.n	8012278 <forward_cast+0x2798>
 80122b2:	4943      	ldr	r1, [pc, #268]	; (80123c0 <forward_cast+0x28e0>)
 80122b4:	428c      	cmp	r4, r1
 80122b6:	f000 8144 	beq.w	8012542 <forward_cast+0x2a62>
 80122ba:	dd13      	ble.n	80122e4 <forward_cast+0x2804>
 80122bc:	4544      	cmp	r4, r8
 80122be:	d11f      	bne.n	8012300 <forward_cast+0x2820>
 80122c0:	edd5 7a00 	vldr	s15, [r5]
 80122c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122c8:	ee17 0a90 	vmov	r0, s15
 80122cc:	e7e2      	b.n	8012294 <forward_cast+0x27b4>
 80122ce:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80122d2:	428c      	cmp	r4, r1
 80122d4:	f000 8142 	beq.w	801255c <forward_cast+0x2a7c>
 80122d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80122dc:	428c      	cmp	r4, r1
 80122de:	d10f      	bne.n	8012300 <forward_cast+0x2820>
 80122e0:	8828      	ldrh	r0, [r5, #0]
 80122e2:	e7d7      	b.n	8012294 <forward_cast+0x27b4>
 80122e4:	42bc      	cmp	r4, r7
 80122e6:	f000 8148 	beq.w	801257a <forward_cast+0x2a9a>
 80122ea:	455c      	cmp	r4, fp
 80122ec:	d108      	bne.n	8012300 <forward_cast+0x2820>
 80122ee:	edd5 7a00 	vldr	s15, [r5]
 80122f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122fa:	ee17 0a90 	vmov	r0, s15
 80122fe:	e7c9      	b.n	8012294 <forward_cast+0x27b4>
 8012300:	2000      	movs	r0, #0
 8012302:	e7c7      	b.n	8012294 <forward_cast+0x27b4>
 8012304:	4555      	cmp	r5, sl
 8012306:	f4bd ac53 	bcs.w	800fbb0 <forward_cast+0xd0>
 801230a:	2700      	movs	r7, #0
 801230c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80123d4 <forward_cast+0x28f4>
 8012310:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80123cc <forward_cast+0x28ec>
 8012314:	4b2e      	ldr	r3, [pc, #184]	; (80123d0 <forward_cast+0x28f0>)
 8012316:	4a2c      	ldr	r2, [pc, #176]	; (80123c8 <forward_cast+0x28e8>)
 8012318:	e016      	b.n	8012348 <forward_cast+0x2868>
 801231a:	4294      	cmp	r4, r2
 801231c:	f000 80d8 	beq.w	80124d0 <forward_cast+0x29f0>
 8012320:	dd26      	ble.n	8012370 <forward_cast+0x2890>
 8012322:	4928      	ldr	r1, [pc, #160]	; (80123c4 <forward_cast+0x28e4>)
 8012324:	428c      	cmp	r4, r1
 8012326:	f000 81c4 	beq.w	80126b2 <forward_cast+0x2bd2>
 801232a:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 801232e:	428c      	cmp	r4, r1
 8012330:	d137      	bne.n	80123a2 <forward_cast+0x28c2>
 8012332:	7829      	ldrb	r1, [r5, #0]
 8012334:	3900      	subs	r1, #0
 8012336:	bf18      	it	ne
 8012338:	2101      	movne	r1, #1
 801233a:	444d      	add	r5, r9
 801233c:	55f1      	strb	r1, [r6, r7]
 801233e:	9900      	ldr	r1, [sp, #0]
 8012340:	45aa      	cmp	sl, r5
 8012342:	440f      	add	r7, r1
 8012344:	f67d ac34 	bls.w	800fbb0 <forward_cast+0xd0>
 8012348:	491c      	ldr	r1, [pc, #112]	; (80123bc <forward_cast+0x28dc>)
 801234a:	428c      	cmp	r4, r1
 801234c:	d018      	beq.n	8012380 <forward_cast+0x28a0>
 801234e:	dde4      	ble.n	801231a <forward_cast+0x283a>
 8012350:	491b      	ldr	r1, [pc, #108]	; (80123c0 <forward_cast+0x28e0>)
 8012352:	428c      	cmp	r4, r1
 8012354:	f000 80c7 	beq.w	80124e6 <forward_cast+0x2a06>
 8012358:	dd14      	ble.n	8012384 <forward_cast+0x28a4>
 801235a:	4544      	cmp	r4, r8
 801235c:	d121      	bne.n	80123a2 <forward_cast+0x28c2>
 801235e:	edd5 7a00 	vldr	s15, [r5]
 8012362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012366:	edcd 7a01 	vstr	s15, [sp, #4]
 801236a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801236e:	e7e4      	b.n	801233a <forward_cast+0x285a>
 8012370:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012374:	428c      	cmp	r4, r1
 8012376:	d003      	beq.n	8012380 <forward_cast+0x28a0>
 8012378:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801237c:	428c      	cmp	r4, r1
 801237e:	d110      	bne.n	80123a2 <forward_cast+0x28c2>
 8012380:	7829      	ldrb	r1, [r5, #0]
 8012382:	e7da      	b.n	801233a <forward_cast+0x285a>
 8012384:	455c      	cmp	r4, fp
 8012386:	d0fb      	beq.n	8012380 <forward_cast+0x28a0>
 8012388:	429c      	cmp	r4, r3
 801238a:	d10a      	bne.n	80123a2 <forward_cast+0x28c2>
 801238c:	edd5 7a00 	vldr	s15, [r5]
 8012390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012398:	edcd 7a01 	vstr	s15, [sp, #4]
 801239c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80123a0:	e7cb      	b.n	801233a <forward_cast+0x285a>
 80123a2:	2100      	movs	r1, #0
 80123a4:	e7c9      	b.n	801233a <forward_cast+0x285a>
 80123a6:	4555      	cmp	r5, sl
 80123a8:	f4bd ac02 	bcs.w	800fbb0 <forward_cast+0xd0>
 80123ac:	f04f 0800 	mov.w	r8, #0
 80123b0:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <forward_cast+0x28e8>)
 80123b2:	4a04      	ldr	r2, [pc, #16]	; (80123c4 <forward_cast+0x28e4>)
 80123b4:	e024      	b.n	8012400 <forward_cast+0x2920>
 80123b6:	bf00      	nop
 80123b8:	00060440 	.word	0x00060440
 80123bc:	00840440 	.word	0x00840440
 80123c0:	00842040 	.word	0x00842040
 80123c4:	00042040 	.word	0x00042040
 80123c8:	00041040 	.word	0x00041040
 80123cc:	00840840 	.word	0x00840840
 80123d0:	00841040 	.word	0x00841040
 80123d4:	01821040 	.word	0x01821040
 80123d8:	429c      	cmp	r4, r3
 80123da:	d050      	beq.n	801247e <forward_cast+0x299e>
 80123dc:	dd23      	ble.n	8012426 <forward_cast+0x2946>
 80123de:	4294      	cmp	r4, r2
 80123e0:	d03e      	beq.n	8012460 <forward_cast+0x2980>
 80123e2:	49c7      	ldr	r1, [pc, #796]	; (8012700 <forward_cast+0x2c20>)
 80123e4:	428c      	cmp	r4, r1
 80123e6:	d139      	bne.n	801245c <forward_cast+0x297c>
 80123e8:	7829      	ldrb	r1, [r5, #0]
 80123ea:	3900      	subs	r1, #0
 80123ec:	bf18      	it	ne
 80123ee:	2101      	movne	r1, #1
 80123f0:	444d      	add	r5, r9
 80123f2:	f806 1008 	strb.w	r1, [r6, r8]
 80123f6:	9900      	ldr	r1, [sp, #0]
 80123f8:	45aa      	cmp	sl, r5
 80123fa:	4488      	add	r8, r1
 80123fc:	f67d abd8 	bls.w	800fbb0 <forward_cast+0xd0>
 8012400:	455c      	cmp	r4, fp
 8012402:	d017      	beq.n	8012434 <forward_cast+0x2954>
 8012404:	dde8      	ble.n	80123d8 <forward_cast+0x28f8>
 8012406:	49bf      	ldr	r1, [pc, #764]	; (8012704 <forward_cast+0x2c24>)
 8012408:	428c      	cmp	r4, r1
 801240a:	d043      	beq.n	8012494 <forward_cast+0x29b4>
 801240c:	dd15      	ble.n	801243a <forward_cast+0x295a>
 801240e:	49be      	ldr	r1, [pc, #760]	; (8012708 <forward_cast+0x2c28>)
 8012410:	428c      	cmp	r4, r1
 8012412:	d123      	bne.n	801245c <forward_cast+0x297c>
 8012414:	edd5 7a00 	vldr	s15, [r5]
 8012418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801241c:	edcd 7a01 	vstr	s15, [sp, #4]
 8012420:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8012424:	e7e4      	b.n	80123f0 <forward_cast+0x2910>
 8012426:	49b9      	ldr	r1, [pc, #740]	; (801270c <forward_cast+0x2c2c>)
 8012428:	428c      	cmp	r4, r1
 801242a:	d003      	beq.n	8012434 <forward_cast+0x2954>
 801242c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012430:	428c      	cmp	r4, r1
 8012432:	d113      	bne.n	801245c <forward_cast+0x297c>
 8012434:	f995 1000 	ldrsb.w	r1, [r5]
 8012438:	e7da      	b.n	80123f0 <forward_cast+0x2910>
 801243a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801243e:	428c      	cmp	r4, r1
 8012440:	d0f8      	beq.n	8012434 <forward_cast+0x2954>
 8012442:	42bc      	cmp	r4, r7
 8012444:	d10a      	bne.n	801245c <forward_cast+0x297c>
 8012446:	edd5 7a00 	vldr	s15, [r5]
 801244a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801244e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012452:	edcd 7a01 	vstr	s15, [sp, #4]
 8012456:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801245a:	e7c9      	b.n	80123f0 <forward_cast+0x2910>
 801245c:	2100      	movs	r1, #0
 801245e:	e7c7      	b.n	80123f0 <forward_cast+0x2910>
 8012460:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012464:	f7ee f85c 	bl	8000520 <__aeabi_ul2f>
 8012468:	ee07 0a90 	vmov	s15, r0
 801246c:	4aa8      	ldr	r2, [pc, #672]	; (8012710 <forward_cast+0x2c30>)
 801246e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012472:	4ba8      	ldr	r3, [pc, #672]	; (8012714 <forward_cast+0x2c34>)
 8012474:	edcd 7a01 	vstr	s15, [sp, #4]
 8012478:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801247c:	e7b8      	b.n	80123f0 <forward_cast+0x2910>
 801247e:	edd5 7a00 	vldr	s15, [r5]
 8012482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801248a:	edcd 7a01 	vstr	s15, [sp, #4]
 801248e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8012492:	e7ad      	b.n	80123f0 <forward_cast+0x2910>
 8012494:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012498:	f7ee f84a 	bl	8000530 <__aeabi_l2f>
 801249c:	ee07 0a90 	vmov	s15, r0
 80124a0:	4b9c      	ldr	r3, [pc, #624]	; (8012714 <forward_cast+0x2c34>)
 80124a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124a6:	4a9a      	ldr	r2, [pc, #616]	; (8012710 <forward_cast+0x2c30>)
 80124a8:	edcd 7a01 	vstr	s15, [sp, #4]
 80124ac:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80124b0:	e79e      	b.n	80123f0 <forward_cast+0x2910>
 80124b2:	f995 0000 	ldrsb.w	r0, [r5]
 80124b6:	e6ed      	b.n	8012294 <forward_cast+0x27b4>
 80124b8:	edd5 7a00 	vldr	s15, [r5]
 80124bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124c4:	edcd 7a01 	vstr	s15, [sp, #4]
 80124c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80124cc:	f7fd bf3a 	b.w	8010344 <forward_cast+0x864>
 80124d0:	edd5 7a00 	vldr	s15, [r5]
 80124d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80124dc:	edcd 7a01 	vstr	s15, [sp, #4]
 80124e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80124e4:	e729      	b.n	801233a <forward_cast+0x285a>
 80124e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80124ea:	f7ee f821 	bl	8000530 <__aeabi_l2f>
 80124ee:	ee07 0a90 	vmov	s15, r0
 80124f2:	4b89      	ldr	r3, [pc, #548]	; (8012718 <forward_cast+0x2c38>)
 80124f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80124f8:	4a86      	ldr	r2, [pc, #536]	; (8012714 <forward_cast+0x2c34>)
 80124fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80124fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012502:	e71a      	b.n	801233a <forward_cast+0x285a>
 8012504:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012508:	f7ee f812 	bl	8000530 <__aeabi_l2f>
 801250c:	ee07 0a90 	vmov	s15, r0
 8012510:	4b7f      	ldr	r3, [pc, #508]	; (8012710 <forward_cast+0x2c30>)
 8012512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012516:	4a7a      	ldr	r2, [pc, #488]	; (8012700 <forward_cast+0x2c20>)
 8012518:	ee17 0a90 	vmov	r0, s15
 801251c:	e66b      	b.n	80121f6 <forward_cast+0x2716>
 801251e:	7828      	ldrb	r0, [r5, #0]
 8012520:	e669      	b.n	80121f6 <forward_cast+0x2716>
 8012522:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012526:	f7ed fffb 	bl	8000520 <__aeabi_ul2f>
 801252a:	ee07 0a90 	vmov	s15, r0
 801252e:	4a74      	ldr	r2, [pc, #464]	; (8012700 <forward_cast+0x2c20>)
 8012530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012534:	4b76      	ldr	r3, [pc, #472]	; (8012710 <forward_cast+0x2c30>)
 8012536:	ee17 0a90 	vmov	r0, s15
 801253a:	e65c      	b.n	80121f6 <forward_cast+0x2716>
 801253c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012540:	e659      	b.n	80121f6 <forward_cast+0x2716>
 8012542:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012546:	f7ed fff3 	bl	8000530 <__aeabi_l2f>
 801254a:	ee07 0a90 	vmov	s15, r0
 801254e:	4b71      	ldr	r3, [pc, #452]	; (8012714 <forward_cast+0x2c34>)
 8012550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012554:	4a6e      	ldr	r2, [pc, #440]	; (8012710 <forward_cast+0x2c30>)
 8012556:	ee17 0a90 	vmov	r0, s15
 801255a:	e69b      	b.n	8012294 <forward_cast+0x27b4>
 801255c:	7828      	ldrb	r0, [r5, #0]
 801255e:	e699      	b.n	8012294 <forward_cast+0x27b4>
 8012560:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012564:	f7ed ffdc 	bl	8000520 <__aeabi_ul2f>
 8012568:	ee07 0a90 	vmov	s15, r0
 801256c:	4a68      	ldr	r2, [pc, #416]	; (8012710 <forward_cast+0x2c30>)
 801256e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012572:	4b68      	ldr	r3, [pc, #416]	; (8012714 <forward_cast+0x2c34>)
 8012574:	ee17 0a90 	vmov	r0, s15
 8012578:	e68c      	b.n	8012294 <forward_cast+0x27b4>
 801257a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801257e:	e689      	b.n	8012294 <forward_cast+0x27b4>
 8012580:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012584:	f7ed ffd4 	bl	8000530 <__aeabi_l2f>
 8012588:	ee07 0a90 	vmov	s15, r0
 801258c:	4b61      	ldr	r3, [pc, #388]	; (8012714 <forward_cast+0x2c34>)
 801258e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012592:	4a5f      	ldr	r2, [pc, #380]	; (8012710 <forward_cast+0x2c30>)
 8012594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012598:	bf14      	ite	ne
 801259a:	2101      	movne	r1, #1
 801259c:	2100      	moveq	r1, #0
 801259e:	e5d9      	b.n	8012154 <forward_cast+0x2674>
 80125a0:	f995 1000 	ldrsb.w	r1, [r5]
 80125a4:	ee07 1a90 	vmov	s15, r1
 80125a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125ac:	f7fd be53 	b.w	8010256 <forward_cast+0x776>
 80125b0:	edd5 7a00 	vldr	s15, [r5]
 80125b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125bc:	ee17 0a90 	vmov	r0, s15
 80125c0:	e564      	b.n	801208c <forward_cast+0x25ac>
 80125c2:	f995 1000 	ldrsb.w	r1, [r5]
 80125c6:	ee07 1a90 	vmov	s15, r1
 80125ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125ce:	f7fd bf0d 	b.w	80103ec <forward_cast+0x90c>
 80125d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80125d6:	f7ed ffab 	bl	8000530 <__aeabi_l2f>
 80125da:	ee07 0a90 	vmov	s15, r0
 80125de:	4b4d      	ldr	r3, [pc, #308]	; (8012714 <forward_cast+0x2c34>)
 80125e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125e4:	4a4a      	ldr	r2, [pc, #296]	; (8012710 <forward_cast+0x2c30>)
 80125e6:	ee17 0a90 	vmov	r0, s15
 80125ea:	e54f      	b.n	801208c <forward_cast+0x25ac>
 80125ec:	7828      	ldrb	r0, [r5, #0]
 80125ee:	e54d      	b.n	801208c <forward_cast+0x25ac>
 80125f0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80125f4:	f7ed ff94 	bl	8000520 <__aeabi_ul2f>
 80125f8:	ee07 0a90 	vmov	s15, r0
 80125fc:	4a44      	ldr	r2, [pc, #272]	; (8012710 <forward_cast+0x2c30>)
 80125fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012602:	4b44      	ldr	r3, [pc, #272]	; (8012714 <forward_cast+0x2c34>)
 8012604:	ee17 0a90 	vmov	r0, s15
 8012608:	e540      	b.n	801208c <forward_cast+0x25ac>
 801260a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801260e:	e53d      	b.n	801208c <forward_cast+0x25ac>
 8012610:	f995 0000 	ldrsb.w	r0, [r5]
 8012614:	e53a      	b.n	801208c <forward_cast+0x25ac>
 8012616:	edd5 7a00 	vldr	s15, [r5]
 801261a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801261e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012626:	f7fd bee1 	b.w	80103ec <forward_cast+0x90c>
 801262a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801262e:	f7ed ff77 	bl	8000520 <__aeabi_ul2f>
 8012632:	ee07 0a90 	vmov	s15, r0
 8012636:	4a35      	ldr	r2, [pc, #212]	; (801270c <forward_cast+0x2c2c>)
 8012638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801263c:	4b35      	ldr	r3, [pc, #212]	; (8012714 <forward_cast+0x2c34>)
 801263e:	ee17 0a90 	vmov	r0, s15
 8012642:	f7fe ba5b 	b.w	8010afc <forward_cast+0x101c>
 8012646:	e9d5 0100 	ldrd	r0, r1, [r5]
 801264a:	f7ed ff69 	bl	8000520 <__aeabi_ul2f>
 801264e:	ee07 0a90 	vmov	s15, r0
 8012652:	4b32      	ldr	r3, [pc, #200]	; (801271c <forward_cast+0x2c3c>)
 8012654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012658:	4a2f      	ldr	r2, [pc, #188]	; (8012718 <forward_cast+0x2c38>)
 801265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801265e:	f7fd bec5 	b.w	80103ec <forward_cast+0x90c>
 8012662:	f995 1000 	ldrsb.w	r1, [r5]
 8012666:	3900      	subs	r1, #0
 8012668:	bf18      	it	ne
 801266a:	2101      	movne	r1, #1
 801266c:	e572      	b.n	8012154 <forward_cast+0x2674>
 801266e:	edd5 7a00 	vldr	s15, [r5]
 8012672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012676:	eef5 7a40 	vcmp.f32	s15, #0.0
 801267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267e:	bf14      	ite	ne
 8012680:	2101      	movne	r1, #1
 8012682:	2100      	moveq	r1, #0
 8012684:	e566      	b.n	8012154 <forward_cast+0x2674>
 8012686:	e9d5 0100 	ldrd	r0, r1, [r5]
 801268a:	f7ed ff49 	bl	8000520 <__aeabi_ul2f>
 801268e:	ee07 0a90 	vmov	s15, r0
 8012692:	4a1f      	ldr	r2, [pc, #124]	; (8012710 <forward_cast+0x2c30>)
 8012694:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012698:	4b1e      	ldr	r3, [pc, #120]	; (8012714 <forward_cast+0x2c34>)
 801269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269e:	bf14      	ite	ne
 80126a0:	2101      	movne	r1, #1
 80126a2:	2100      	moveq	r1, #0
 80126a4:	e556      	b.n	8012154 <forward_cast+0x2674>
 80126a6:	f9b5 1000 	ldrsh.w	r1, [r5]
 80126aa:	3900      	subs	r1, #0
 80126ac:	bf18      	it	ne
 80126ae:	2101      	movne	r1, #1
 80126b0:	e550      	b.n	8012154 <forward_cast+0x2674>
 80126b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80126b6:	f7ed ff33 	bl	8000520 <__aeabi_ul2f>
 80126ba:	ee07 0a90 	vmov	s15, r0
 80126be:	4a15      	ldr	r2, [pc, #84]	; (8012714 <forward_cast+0x2c34>)
 80126c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126c4:	4b14      	ldr	r3, [pc, #80]	; (8012718 <forward_cast+0x2c38>)
 80126c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80126ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80126ce:	e634      	b.n	801233a <forward_cast+0x285a>
 80126d0:	edd5 7a00 	vldr	s15, [r5]
 80126d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126dc:	edcd 7a01 	vstr	s15, [sp, #4]
 80126e0:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80126e4:	f7fe ba3f 	b.w	8010b66 <forward_cast+0x1086>
 80126e8:	f995 0000 	ldrsb.w	r0, [r5]
 80126ec:	f7fe ba72 	b.w	8010bd4 <forward_cast+0x10f4>
 80126f0:	f995 0000 	ldrsb.w	r0, [r5]
 80126f4:	f7fe ba02 	b.w	8010afc <forward_cast+0x101c>
 80126f8:	7829      	ldrb	r1, [r5, #0]
 80126fa:	f7fd bc85 	b.w	8010008 <forward_cast+0x528>
 80126fe:	bf00      	nop
 8012700:	00060440 	.word	0x00060440
 8012704:	00842040 	.word	0x00842040
 8012708:	01821040 	.word	0x01821040
 801270c:	00040440 	.word	0x00040440
 8012710:	00042040 	.word	0x00042040
 8012714:	00041040 	.word	0x00041040
 8012718:	00841040 	.word	0x00841040
 801271c:	00840840 	.word	0x00840840
 8012720:	edd5 7a00 	vldr	s15, [r5]
 8012724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801272c:	ee17 1a90 	vmov	r1, s15
 8012730:	b289      	uxth	r1, r1
 8012732:	f7fd bac7 	b.w	800fcc4 <forward_cast+0x1e4>
 8012736:	e9d5 0100 	ldrd	r0, r1, [r5]
 801273a:	f7ed fef9 	bl	8000530 <__aeabi_l2f>
 801273e:	ee07 0a90 	vmov	s15, r0
 8012742:	4be4      	ldr	r3, [pc, #912]	; (8012ad4 <forward_cast+0x2ff4>)
 8012744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012748:	4ae3      	ldr	r2, [pc, #908]	; (8012ad8 <forward_cast+0x2ff8>)
 801274a:	edcd 7a01 	vstr	s15, [sp, #4]
 801274e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012752:	f7fd bdf7 	b.w	8010344 <forward_cast+0x864>
 8012756:	e9d5 0100 	ldrd	r0, r1, [r5]
 801275a:	f7ed fee9 	bl	8000530 <__aeabi_l2f>
 801275e:	ee07 0a90 	vmov	s15, r0
 8012762:	4bde      	ldr	r3, [pc, #888]	; (8012adc <forward_cast+0x2ffc>)
 8012764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012768:	4add      	ldr	r2, [pc, #884]	; (8012ae0 <forward_cast+0x3000>)
 801276a:	ee17 0a90 	vmov	r0, s15
 801276e:	f7fe b935 	b.w	80109dc <forward_cast+0xefc>
 8012772:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012776:	f7ed fed3 	bl	8000520 <__aeabi_ul2f>
 801277a:	ee07 0a90 	vmov	s15, r0
 801277e:	4ad7      	ldr	r2, [pc, #860]	; (8012adc <forward_cast+0x2ffc>)
 8012780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012784:	ee17 3a90 	vmov	r3, s15
 8012788:	b299      	uxth	r1, r3
 801278a:	4bd3      	ldr	r3, [pc, #844]	; (8012ad8 <forward_cast+0x2ff8>)
 801278c:	f7fd bc3c 	b.w	8010008 <forward_cast+0x528>
 8012790:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012794:	9301      	str	r3, [sp, #4]
 8012796:	f7ed fec3 	bl	8000520 <__aeabi_ul2f>
 801279a:	ee07 0a90 	vmov	s15, r0
 801279e:	9b01      	ldr	r3, [sp, #4]
 80127a0:	4acc      	ldr	r2, [pc, #816]	; (8012ad4 <forward_cast+0x2ff4>)
 80127a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127a6:	ee17 0a90 	vmov	r0, s15
 80127aa:	f7fd bc69 	b.w	8010080 <forward_cast+0x5a0>
 80127ae:	edd5 7a00 	vldr	s15, [r5]
 80127b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127ba:	ee17 0a90 	vmov	r0, s15
 80127be:	f7fd bc5f 	b.w	8010080 <forward_cast+0x5a0>
 80127c2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80127c6:	f7fe b963 	b.w	8010a90 <forward_cast+0xfb0>
 80127ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80127ce:	f7ed fea7 	bl	8000520 <__aeabi_ul2f>
 80127d2:	ee07 0a90 	vmov	s15, r0
 80127d6:	4ac2      	ldr	r2, [pc, #776]	; (8012ae0 <forward_cast+0x3000>)
 80127d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127dc:	4bbf      	ldr	r3, [pc, #764]	; (8012adc <forward_cast+0x2ffc>)
 80127de:	ee17 0a90 	vmov	r0, s15
 80127e2:	f7fe b955 	b.w	8010a90 <forward_cast+0xfb0>
 80127e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80127ea:	f7ed fe99 	bl	8000520 <__aeabi_ul2f>
 80127ee:	ee07 0a90 	vmov	s15, r0
 80127f2:	4abc      	ldr	r2, [pc, #752]	; (8012ae4 <forward_cast+0x3004>)
 80127f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127f8:	4bb6      	ldr	r3, [pc, #728]	; (8012ad4 <forward_cast+0x2ff4>)
 80127fa:	ee17 0a90 	vmov	r0, s15
 80127fe:	f7fe b9e9 	b.w	8010bd4 <forward_cast+0x10f4>
 8012802:	edd5 7a00 	vldr	s15, [r5]
 8012806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801280a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801280e:	ee17 0a90 	vmov	r0, s15
 8012812:	f7fe b9df 	b.w	8010bd4 <forward_cast+0x10f4>
 8012816:	7828      	ldrb	r0, [r5, #0]
 8012818:	f7fe b8e0 	b.w	80109dc <forward_cast+0xefc>
 801281c:	edd5 7a00 	vldr	s15, [r5]
 8012820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012828:	ee17 0a90 	vmov	r0, s15
 801282c:	e532      	b.n	8012294 <forward_cast+0x27b4>
 801282e:	f995 0000 	ldrsb.w	r0, [r5]
 8012832:	f7fd ba98 	b.w	800fd66 <forward_cast+0x286>
 8012836:	f995 0000 	ldrsb.w	r0, [r5]
 801283a:	e4dc      	b.n	80121f6 <forward_cast+0x2716>
 801283c:	edd5 7a00 	vldr	s15, [r5]
 8012840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012848:	ee17 0a90 	vmov	r0, s15
 801284c:	e4d3      	b.n	80121f6 <forward_cast+0x2716>
 801284e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012852:	f7ed fe65 	bl	8000520 <__aeabi_ul2f>
 8012856:	ee07 0a90 	vmov	s15, r0
 801285a:	4aa0      	ldr	r2, [pc, #640]	; (8012adc <forward_cast+0x2ffc>)
 801285c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012860:	4b9c      	ldr	r3, [pc, #624]	; (8012ad4 <forward_cast+0x2ff4>)
 8012862:	edcd 7a01 	vstr	s15, [sp, #4]
 8012866:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801286a:	f7fe b97c 	b.w	8010b66 <forward_cast+0x1086>
 801286e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012872:	f7ed fe55 	bl	8000520 <__aeabi_ul2f>
 8012876:	ee07 0a90 	vmov	s15, r0
 801287a:	4a97      	ldr	r2, [pc, #604]	; (8012ad8 <forward_cast+0x2ff8>)
 801287c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012880:	4b94      	ldr	r3, [pc, #592]	; (8012ad4 <forward_cast+0x2ff4>)
 8012882:	ee17 0a90 	vmov	r0, s15
 8012886:	f7fd ba6e 	b.w	800fd66 <forward_cast+0x286>
 801288a:	edd5 7a00 	vldr	s15, [r5]
 801288e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012896:	ee17 0a90 	vmov	r0, s15
 801289a:	f7fd ba64 	b.w	800fd66 <forward_cast+0x286>
 801289e:	f9b5 0000 	ldrsh.w	r0, [r5]
 80128a2:	f7fd ba60 	b.w	800fd66 <forward_cast+0x286>
 80128a6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80128aa:	f7ed fe39 	bl	8000520 <__aeabi_ul2f>
 80128ae:	ee07 0a90 	vmov	s15, r0
 80128b2:	4a89      	ldr	r2, [pc, #548]	; (8012ad8 <forward_cast+0x2ff8>)
 80128b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128b8:	4b86      	ldr	r3, [pc, #536]	; (8012ad4 <forward_cast+0x2ff4>)
 80128ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80128be:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80128c2:	f7fd bd3f 	b.w	8010344 <forward_cast+0x864>
 80128c6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80128ca:	f7ed fe29 	bl	8000520 <__aeabi_ul2f>
 80128ce:	ee07 0a90 	vmov	s15, r0
 80128d2:	4a81      	ldr	r2, [pc, #516]	; (8012ad8 <forward_cast+0x2ff8>)
 80128d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128d8:	4b7e      	ldr	r3, [pc, #504]	; (8012ad4 <forward_cast+0x2ff4>)
 80128da:	edcd 7a01 	vstr	s15, [sp, #4]
 80128de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80128e2:	f7fd bcf0 	b.w	80102c6 <forward_cast+0x7e6>
 80128e6:	edd5 7a00 	vldr	s15, [r5]
 80128ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128f2:	edcd 7a01 	vstr	s15, [sp, #4]
 80128f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80128fa:	f7fd bce4 	b.w	80102c6 <forward_cast+0x7e6>
 80128fe:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012902:	f7fd ba93 	b.w	800fe2c <forward_cast+0x34c>
 8012906:	e9d5 0100 	ldrd	r0, r1, [r5]
 801290a:	f7ed fe11 	bl	8000530 <__aeabi_l2f>
 801290e:	ee07 0a90 	vmov	s15, r0
 8012912:	4b70      	ldr	r3, [pc, #448]	; (8012ad4 <forward_cast+0x2ff4>)
 8012914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012918:	4a6f      	ldr	r2, [pc, #444]	; (8012ad8 <forward_cast+0x2ff8>)
 801291a:	ee17 0a90 	vmov	r0, s15
 801291e:	f7fd bc41 	b.w	80101a4 <forward_cast+0x6c4>
 8012922:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012926:	ee07 1a90 	vmov	s15, r1
 801292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801292e:	f7fd bc92 	b.w	8010256 <forward_cast+0x776>
 8012932:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012936:	f7ed fdfb 	bl	8000530 <__aeabi_l2f>
 801293a:	ee07 0a90 	vmov	s15, r0
 801293e:	4b67      	ldr	r3, [pc, #412]	; (8012adc <forward_cast+0x2ffc>)
 8012940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012944:	4a66      	ldr	r2, [pc, #408]	; (8012ae0 <forward_cast+0x3000>)
 8012946:	ee17 0a90 	vmov	r0, s15
 801294a:	f7fd bbeb 	b.w	8010124 <forward_cast+0x644>
 801294e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012952:	f7fd bc27 	b.w	80101a4 <forward_cast+0x6c4>
 8012956:	f995 0000 	ldrsb.w	r0, [r5]
 801295a:	f7ff bb2f 	b.w	8011fbc <forward_cast+0x24dc>
 801295e:	f995 0000 	ldrsb.w	r0, [r5]
 8012962:	f7fd bbdf 	b.w	8010124 <forward_cast+0x644>
 8012966:	f995 0000 	ldrsb.w	r0, [r5]
 801296a:	f7fd bf74 	b.w	8010856 <forward_cast+0xd76>
 801296e:	f995 1000 	ldrsb.w	r1, [r5]
 8012972:	3900      	subs	r1, #0
 8012974:	bf18      	it	ne
 8012976:	2101      	movne	r1, #1
 8012978:	f7fd bfa8 	b.w	80108cc <forward_cast+0xdec>
 801297c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012980:	f7ed fdd6 	bl	8000530 <__aeabi_l2f>
 8012984:	ee07 0a90 	vmov	s15, r0
 8012988:	4b54      	ldr	r3, [pc, #336]	; (8012adc <forward_cast+0x2ffc>)
 801298a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801298e:	4a54      	ldr	r2, [pc, #336]	; (8012ae0 <forward_cast+0x3000>)
 8012990:	ee17 0a90 	vmov	r0, s15
 8012994:	f7ff bb12 	b.w	8011fbc <forward_cast+0x24dc>
 8012998:	7828      	ldrb	r0, [r5, #0]
 801299a:	f7ff bb0f 	b.w	8011fbc <forward_cast+0x24dc>
 801299e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80129a2:	f7ed fdbd 	bl	8000520 <__aeabi_ul2f>
 80129a6:	ee07 0a90 	vmov	s15, r0
 80129aa:	4a4d      	ldr	r2, [pc, #308]	; (8012ae0 <forward_cast+0x3000>)
 80129ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129b0:	4b4a      	ldr	r3, [pc, #296]	; (8012adc <forward_cast+0x2ffc>)
 80129b2:	ee17 0a90 	vmov	r0, s15
 80129b6:	f7ff bb01 	b.w	8011fbc <forward_cast+0x24dc>
 80129ba:	f9b5 0000 	ldrsh.w	r0, [r5]
 80129be:	f7ff bafd 	b.w	8011fbc <forward_cast+0x24dc>
 80129c2:	edd5 7a00 	vldr	s15, [r5]
 80129c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129ce:	ee17 0a90 	vmov	r0, s15
 80129d2:	f7ff baf3 	b.w	8011fbc <forward_cast+0x24dc>
 80129d6:	edd5 7a00 	vldr	s15, [r5]
 80129da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129e2:	ee17 1a90 	vmov	r1, s15
 80129e6:	b289      	uxth	r1, r1
 80129e8:	f7fd bb0e 	b.w	8010008 <forward_cast+0x528>
 80129ec:	edd5 7a00 	vldr	s15, [r5]
 80129f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129f8:	ee17 0a90 	vmov	r0, s15
 80129fc:	f7fe b848 	b.w	8010a90 <forward_cast+0xfb0>
 8012a00:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012a04:	f7fe b87a 	b.w	8010afc <forward_cast+0x101c>
 8012a08:	f995 0000 	ldrsb.w	r0, [r5]
 8012a0c:	f7fe b840 	b.w	8010a90 <forward_cast+0xfb0>
 8012a10:	f995 1000 	ldrsb.w	r1, [r5]
 8012a14:	f7fd bddc 	b.w	80105d0 <forward_cast+0xaf0>
 8012a18:	f995 1000 	ldrsb.w	r1, [r5]
 8012a1c:	b289      	uxth	r1, r1
 8012a1e:	f7fd b951 	b.w	800fcc4 <forward_cast+0x1e4>
 8012a22:	f995 0000 	ldrsb.w	r0, [r5]
 8012a26:	f7ff ba34 	b.w	8011e92 <forward_cast+0x23b2>
 8012a2a:	edd5 7a00 	vldr	s15, [r5]
 8012a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a36:	edcd 7a01 	vstr	s15, [sp, #4]
 8012a3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012a3e:	f7ff b9ca 	b.w	8011dd6 <forward_cast+0x22f6>
 8012a42:	f995 0000 	ldrsb.w	r0, [r5]
 8012a46:	f7ff ba6d 	b.w	8011f24 <forward_cast+0x2444>
 8012a4a:	edd5 7a00 	vldr	s15, [r5]
 8012a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a56:	ee17 0a90 	vmov	r0, s15
 8012a5a:	f7ff ba63 	b.w	8011f24 <forward_cast+0x2444>
 8012a5e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012a62:	f7ed fd5d 	bl	8000520 <__aeabi_ul2f>
 8012a66:	4b20      	ldr	r3, [pc, #128]	; (8012ae8 <forward_cast+0x3008>)
 8012a68:	ee07 0a90 	vmov	s15, r0
 8012a6c:	4a1f      	ldr	r2, [pc, #124]	; (8012aec <forward_cast+0x300c>)
 8012a6e:	f7fd bbf2 	b.w	8010256 <forward_cast+0x776>
 8012a72:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012a76:	f7ed fd53 	bl	8000520 <__aeabi_ul2f>
 8012a7a:	ee07 0a90 	vmov	s15, r0
 8012a7e:	4a18      	ldr	r2, [pc, #96]	; (8012ae0 <forward_cast+0x3000>)
 8012a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a84:	4b15      	ldr	r3, [pc, #84]	; (8012adc <forward_cast+0x2ffc>)
 8012a86:	ee17 0a90 	vmov	r0, s15
 8012a8a:	f7fd bb4b 	b.w	8010124 <forward_cast+0x644>
 8012a8e:	edd5 7a00 	vldr	s15, [r5]
 8012a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a9a:	ee17 0a90 	vmov	r0, s15
 8012a9e:	f7fd bb41 	b.w	8010124 <forward_cast+0x644>
 8012aa2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012aa6:	3900      	subs	r1, #0
 8012aa8:	bf18      	it	ne
 8012aaa:	2101      	movne	r1, #1
 8012aac:	f7fd bf0e 	b.w	80108cc <forward_cast+0xdec>
 8012ab0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012ab4:	f7ed fd34 	bl	8000520 <__aeabi_ul2f>
 8012ab8:	ee07 0a90 	vmov	s15, r0
 8012abc:	4a08      	ldr	r2, [pc, #32]	; (8012ae0 <forward_cast+0x3000>)
 8012abe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012ac2:	4b06      	ldr	r3, [pc, #24]	; (8012adc <forward_cast+0x2ffc>)
 8012ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac8:	bf14      	ite	ne
 8012aca:	2101      	movne	r1, #1
 8012acc:	2100      	moveq	r1, #0
 8012ace:	f7fd befd 	b.w	80108cc <forward_cast+0xdec>
 8012ad2:	bf00      	nop
 8012ad4:	00841040 	.word	0x00841040
 8012ad8:	00041040 	.word	0x00041040
 8012adc:	00042040 	.word	0x00042040
 8012ae0:	00060440 	.word	0x00060440
 8012ae4:	01821040 	.word	0x01821040
 8012ae8:	00842040 	.word	0x00842040
 8012aec:	00840440 	.word	0x00840440
 8012af0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012af4:	f7ed fd14 	bl	8000520 <__aeabi_ul2f>
 8012af8:	ee07 0a90 	vmov	s15, r0
 8012afc:	4bdd      	ldr	r3, [pc, #884]	; (8012e74 <forward_cast+0x3394>)
 8012afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b02:	4add      	ldr	r2, [pc, #884]	; (8012e78 <forward_cast+0x3398>)
 8012b04:	ee17 0a90 	vmov	r0, s15
 8012b08:	f7fd bea5 	b.w	8010856 <forward_cast+0xd76>
 8012b0c:	edd5 7a00 	vldr	s15, [r5]
 8012b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b18:	ee17 0a90 	vmov	r0, s15
 8012b1c:	f7fd be9b 	b.w	8010856 <forward_cast+0xd76>
 8012b20:	7828      	ldrb	r0, [r5, #0]
 8012b22:	f7fd baff 	b.w	8010124 <forward_cast+0x644>
 8012b26:	edd5 7a00 	vldr	s15, [r5]
 8012b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b2e:	f7fd bb92 	b.w	8010256 <forward_cast+0x776>
 8012b32:	7829      	ldrb	r1, [r5, #0]
 8012b34:	ee07 1a90 	vmov	s15, r1
 8012b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b3c:	f7fd bc56 	b.w	80103ec <forward_cast+0x90c>
 8012b40:	edd5 7a00 	vldr	s15, [r5]
 8012b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b50:	bf14      	ite	ne
 8012b52:	2101      	movne	r1, #1
 8012b54:	2100      	moveq	r1, #0
 8012b56:	f7fd beb9 	b.w	80108cc <forward_cast+0xdec>
 8012b5a:	7829      	ldrb	r1, [r5, #0]
 8012b5c:	ee07 1a90 	vmov	s15, r1
 8012b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b64:	f7fd bb77 	b.w	8010256 <forward_cast+0x776>
 8012b68:	edd5 7a00 	vldr	s15, [r5]
 8012b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b74:	ee17 0a90 	vmov	r0, s15
 8012b78:	f7ff b98b 	b.w	8011e92 <forward_cast+0x23b2>
 8012b7c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012b80:	f7fd be69 	b.w	8010856 <forward_cast+0xd76>
 8012b84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012b88:	f7ed fcd2 	bl	8000530 <__aeabi_l2f>
 8012b8c:	4abb      	ldr	r2, [pc, #748]	; (8012e7c <forward_cast+0x339c>)
 8012b8e:	ee07 0a90 	vmov	s15, r0
 8012b92:	4bbb      	ldr	r3, [pc, #748]	; (8012e80 <forward_cast+0x33a0>)
 8012b94:	f7fd bb5f 	b.w	8010256 <forward_cast+0x776>
 8012b98:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012b9c:	f7ed fcc8 	bl	8000530 <__aeabi_l2f>
 8012ba0:	ee07 0a90 	vmov	s15, r0
 8012ba4:	4bb7      	ldr	r3, [pc, #732]	; (8012e84 <forward_cast+0x33a4>)
 8012ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012baa:	4ab7      	ldr	r2, [pc, #732]	; (8012e88 <forward_cast+0x33a8>)
 8012bac:	ee17 0a90 	vmov	r0, s15
 8012bb0:	f7fd b837 	b.w	800fc22 <forward_cast+0x142>
 8012bb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012bb8:	f7ed fcba 	bl	8000530 <__aeabi_l2f>
 8012bbc:	ee07 0a90 	vmov	s15, r0
 8012bc0:	4aac      	ldr	r2, [pc, #688]	; (8012e74 <forward_cast+0x3394>)
 8012bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012bc6:	ee17 3a90 	vmov	r3, s15
 8012bca:	b299      	uxth	r1, r3
 8012bcc:	4baf      	ldr	r3, [pc, #700]	; (8012e8c <forward_cast+0x33ac>)
 8012bce:	f7fd b879 	b.w	800fcc4 <forward_cast+0x1e4>
 8012bd2:	7828      	ldrb	r0, [r5, #0]
 8012bd4:	f7fd b8c7 	b.w	800fd66 <forward_cast+0x286>
 8012bd8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012bdc:	f7ed fca8 	bl	8000530 <__aeabi_l2f>
 8012be0:	ee07 0a90 	vmov	s15, r0
 8012be4:	4ba7      	ldr	r3, [pc, #668]	; (8012e84 <forward_cast+0x33a4>)
 8012be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bea:	4aa7      	ldr	r2, [pc, #668]	; (8012e88 <forward_cast+0x33a8>)
 8012bec:	ee17 0a90 	vmov	r0, s15
 8012bf0:	f7fd bd76 	b.w	80106e0 <forward_cast+0xc00>
 8012bf4:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012bf8:	f7fd b813 	b.w	800fc22 <forward_cast+0x142>
 8012bfc:	7829      	ldrb	r1, [r5, #0]
 8012bfe:	f7fd b861 	b.w	800fcc4 <forward_cast+0x1e4>
 8012c02:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012c06:	9301      	str	r3, [sp, #4]
 8012c08:	f7ed fc92 	bl	8000530 <__aeabi_l2f>
 8012c0c:	ee07 0a90 	vmov	s15, r0
 8012c10:	4a9d      	ldr	r2, [pc, #628]	; (8012e88 <forward_cast+0x33a8>)
 8012c12:	9b01      	ldr	r3, [sp, #4]
 8012c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c18:	ee17 0a90 	vmov	r0, s15
 8012c1c:	f7fd ba30 	b.w	8010080 <forward_cast+0x5a0>
 8012c20:	f995 1000 	ldrsb.w	r1, [r5]
 8012c24:	b289      	uxth	r1, r1
 8012c26:	f7fd b9ef 	b.w	8010008 <forward_cast+0x528>
 8012c2a:	f995 0000 	ldrsb.w	r0, [r5]
 8012c2e:	f7fd ba27 	b.w	8010080 <forward_cast+0x5a0>
 8012c32:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012c36:	f7ed fc7b 	bl	8000530 <__aeabi_l2f>
 8012c3a:	ee07 0a90 	vmov	s15, r0
 8012c3e:	4b92      	ldr	r3, [pc, #584]	; (8012e88 <forward_cast+0x33a8>)
 8012c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c44:	4a91      	ldr	r2, [pc, #580]	; (8012e8c <forward_cast+0x33ac>)
 8012c46:	ee17 0a90 	vmov	r0, s15
 8012c4a:	f7fd b8ef 	b.w	800fe2c <forward_cast+0x34c>
 8012c4e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012c52:	f7fd bec3 	b.w	80109dc <forward_cast+0xefc>
 8012c56:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012c5a:	f7ed fc69 	bl	8000530 <__aeabi_l2f>
 8012c5e:	ee07 0a90 	vmov	s15, r0
 8012c62:	4a85      	ldr	r2, [pc, #532]	; (8012e78 <forward_cast+0x3398>)
 8012c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c68:	4b82      	ldr	r3, [pc, #520]	; (8012e74 <forward_cast+0x3394>)
 8012c6a:	ee17 0a90 	vmov	r0, s15
 8012c6e:	f7fd bdf2 	b.w	8010856 <forward_cast+0xd76>
 8012c72:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012c76:	ee07 1a90 	vmov	s15, r1
 8012c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c7e:	f7fd bbb5 	b.w	80103ec <forward_cast+0x90c>
 8012c82:	edd5 7a00 	vldr	s15, [r5]
 8012c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c8e:	edcd 7a01 	vstr	s15, [sp, #4]
 8012c92:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012c96:	f7ff b802 	b.w	8011c9e <forward_cast+0x21be>
 8012c9a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012c9e:	f7ed fc47 	bl	8000530 <__aeabi_l2f>
 8012ca2:	ee07 0a90 	vmov	s15, r0
 8012ca6:	4b78      	ldr	r3, [pc, #480]	; (8012e88 <forward_cast+0x33a8>)
 8012ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012cac:	4a77      	ldr	r2, [pc, #476]	; (8012e8c <forward_cast+0x33ac>)
 8012cae:	edcd 7a01 	vstr	s15, [sp, #4]
 8012cb2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012cb6:	f7fe bff2 	b.w	8011c9e <forward_cast+0x21be>
 8012cba:	f995 0000 	ldrsb.w	r0, [r5]
 8012cbe:	f7ff b838 	b.w	8011d32 <forward_cast+0x2252>
 8012cc2:	edd5 7a00 	vldr	s15, [r5]
 8012cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012cce:	ee17 0a90 	vmov	r0, s15
 8012cd2:	f7ff b82e 	b.w	8011d32 <forward_cast+0x2252>
 8012cd6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012cda:	f7ed fc29 	bl	8000530 <__aeabi_l2f>
 8012cde:	ee07 0a90 	vmov	s15, r0
 8012ce2:	4b64      	ldr	r3, [pc, #400]	; (8012e74 <forward_cast+0x3394>)
 8012ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ce8:	4a69      	ldr	r2, [pc, #420]	; (8012e90 <forward_cast+0x33b0>)
 8012cea:	ee17 0a90 	vmov	r0, s15
 8012cee:	f7ff b820 	b.w	8011d32 <forward_cast+0x2252>
 8012cf2:	7828      	ldrb	r0, [r5, #0]
 8012cf4:	f7ff b81d 	b.w	8011d32 <forward_cast+0x2252>
 8012cf8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012cfc:	f7ed fc10 	bl	8000520 <__aeabi_ul2f>
 8012d00:	ee07 0a90 	vmov	s15, r0
 8012d04:	4a62      	ldr	r2, [pc, #392]	; (8012e90 <forward_cast+0x33b0>)
 8012d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d0a:	4b5a      	ldr	r3, [pc, #360]	; (8012e74 <forward_cast+0x3394>)
 8012d0c:	ee17 0a90 	vmov	r0, s15
 8012d10:	f7ff b80f 	b.w	8011d32 <forward_cast+0x2252>
 8012d14:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012d18:	f7ff b80b 	b.w	8011d32 <forward_cast+0x2252>
 8012d1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012d20:	f7ed fbfe 	bl	8000520 <__aeabi_ul2f>
 8012d24:	ee07 0a90 	vmov	s15, r0
 8012d28:	4a58      	ldr	r2, [pc, #352]	; (8012e8c <forward_cast+0x33ac>)
 8012d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d2e:	4b56      	ldr	r3, [pc, #344]	; (8012e88 <forward_cast+0x33a8>)
 8012d30:	edcd 7a01 	vstr	s15, [sp, #4]
 8012d34:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012d38:	f7fe bfb1 	b.w	8011c9e <forward_cast+0x21be>
 8012d3c:	edd5 7a00 	vldr	s15, [r5]
 8012d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d48:	ee17 0a90 	vmov	r0, s15
 8012d4c:	f7fe bedb 	b.w	8011b06 <forward_cast+0x2026>
 8012d50:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012d54:	f7ed fbec 	bl	8000530 <__aeabi_l2f>
 8012d58:	ee07 0a90 	vmov	s15, r0
 8012d5c:	4b45      	ldr	r3, [pc, #276]	; (8012e74 <forward_cast+0x3394>)
 8012d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d62:	4a4b      	ldr	r2, [pc, #300]	; (8012e90 <forward_cast+0x33b0>)
 8012d64:	ee17 0a90 	vmov	r0, s15
 8012d68:	f7fd be92 	b.w	8010a90 <forward_cast+0xfb0>
 8012d6c:	7828      	ldrb	r0, [r5, #0]
 8012d6e:	f7fd bec5 	b.w	8010afc <forward_cast+0x101c>
 8012d72:	f995 0000 	ldrsb.w	r0, [r5]
 8012d76:	f7fe bf2b 	b.w	8011bd0 <forward_cast+0x20f0>
 8012d7a:	edd5 7a00 	vldr	s15, [r5]
 8012d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d86:	ee17 0a90 	vmov	r0, s15
 8012d8a:	f7fe bf21 	b.w	8011bd0 <forward_cast+0x20f0>
 8012d8e:	7829      	ldrb	r1, [r5, #0]
 8012d90:	f7fd bc1e 	b.w	80105d0 <forward_cast+0xaf0>
 8012d94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012d98:	f7ed fbca 	bl	8000530 <__aeabi_l2f>
 8012d9c:	ee07 0a90 	vmov	s15, r0
 8012da0:	4b39      	ldr	r3, [pc, #228]	; (8012e88 <forward_cast+0x33a8>)
 8012da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012da6:	4a39      	ldr	r2, [pc, #228]	; (8012e8c <forward_cast+0x33ac>)
 8012da8:	edcd 7a01 	vstr	s15, [sp, #4]
 8012dac:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012db0:	f7fd ba89 	b.w	80102c6 <forward_cast+0x7e6>
 8012db4:	edd5 7a00 	vldr	s15, [r5]
 8012db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dc0:	ee17 0a90 	vmov	r0, s15
 8012dc4:	f7fe bb99 	b.w	80114fa <forward_cast+0x1a1a>
 8012dc8:	f995 1000 	ldrsb.w	r1, [r5]
 8012dcc:	b289      	uxth	r1, r1
 8012dce:	f7fd b885 	b.w	800fedc <forward_cast+0x3fc>
 8012dd2:	f995 0000 	ldrsb.w	r0, [r5]
 8012dd6:	f7fe bb90 	b.w	80114fa <forward_cast+0x1a1a>
 8012dda:	f995 0000 	ldrsb.w	r0, [r5]
 8012dde:	f7fd bcfc 	b.w	80107da <forward_cast+0xcfa>
 8012de2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012de6:	f7ed fba3 	bl	8000530 <__aeabi_l2f>
 8012dea:	ee07 0a90 	vmov	s15, r0
 8012dee:	4b26      	ldr	r3, [pc, #152]	; (8012e88 <forward_cast+0x33a8>)
 8012df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012df4:	4a26      	ldr	r2, [pc, #152]	; (8012e90 <forward_cast+0x33b0>)
 8012df6:	ee17 0a90 	vmov	r0, s15
 8012dfa:	f7fe bbca 	b.w	8011592 <forward_cast+0x1ab2>
 8012dfe:	7828      	ldrb	r0, [r5, #0]
 8012e00:	f7fe bbc7 	b.w	8011592 <forward_cast+0x1ab2>
 8012e04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012e08:	f7ed fb8a 	bl	8000520 <__aeabi_ul2f>
 8012e0c:	ee07 0a90 	vmov	s15, r0
 8012e10:	4a1f      	ldr	r2, [pc, #124]	; (8012e90 <forward_cast+0x33b0>)
 8012e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e16:	4b1c      	ldr	r3, [pc, #112]	; (8012e88 <forward_cast+0x33a8>)
 8012e18:	ee17 0a90 	vmov	r0, s15
 8012e1c:	f7fe bbb9 	b.w	8011592 <forward_cast+0x1ab2>
 8012e20:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012e24:	f7fe bbb5 	b.w	8011592 <forward_cast+0x1ab2>
 8012e28:	f995 1000 	ldrsb.w	r1, [r5]
 8012e2c:	3900      	subs	r1, #0
 8012e2e:	bf18      	it	ne
 8012e30:	2101      	movne	r1, #1
 8012e32:	f7fe bc5d 	b.w	80116f0 <forward_cast+0x1c10>
 8012e36:	f995 0000 	ldrsb.w	r0, [r5]
 8012e3a:	f7fd b899 	b.w	800ff70 <forward_cast+0x490>
 8012e3e:	f995 0000 	ldrsb.w	r0, [r5]
 8012e42:	f7fe bba6 	b.w	8011592 <forward_cast+0x1ab2>
 8012e46:	edd5 7a00 	vldr	s15, [r5]
 8012e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e52:	ee17 0a90 	vmov	r0, s15
 8012e56:	f7fe bb9c 	b.w	8011592 <forward_cast+0x1ab2>
 8012e5a:	edd5 7a00 	vldr	s15, [r5]
 8012e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e6a:	bf14      	ite	ne
 8012e6c:	2101      	movne	r1, #1
 8012e6e:	2100      	moveq	r1, #0
 8012e70:	f7fe bc3e 	b.w	80116f0 <forward_cast+0x1c10>
 8012e74:	00042040 	.word	0x00042040
 8012e78:	01821040 	.word	0x01821040
 8012e7c:	00840440 	.word	0x00840440
 8012e80:	00842040 	.word	0x00842040
 8012e84:	00840840 	.word	0x00840840
 8012e88:	00841040 	.word	0x00841040
 8012e8c:	00041040 	.word	0x00041040
 8012e90:	00060440 	.word	0x00060440
 8012e94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012e98:	f7ed fb4a 	bl	8000530 <__aeabi_l2f>
 8012e9c:	ee07 0a90 	vmov	s15, r0
 8012ea0:	4bdb      	ldr	r3, [pc, #876]	; (8013210 <forward_cast+0x3730>)
 8012ea2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012ea6:	4adb      	ldr	r2, [pc, #876]	; (8013214 <forward_cast+0x3734>)
 8012ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eac:	bf14      	ite	ne
 8012eae:	2101      	movne	r1, #1
 8012eb0:	2100      	moveq	r1, #0
 8012eb2:	f7fe bc1d 	b.w	80116f0 <forward_cast+0x1c10>
 8012eb6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012eba:	f7ed fb31 	bl	8000520 <__aeabi_ul2f>
 8012ebe:	ee07 0a90 	vmov	s15, r0
 8012ec2:	4ad4      	ldr	r2, [pc, #848]	; (8013214 <forward_cast+0x3734>)
 8012ec4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012ec8:	4bd1      	ldr	r3, [pc, #836]	; (8013210 <forward_cast+0x3730>)
 8012eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ece:	bf14      	ite	ne
 8012ed0:	2101      	movne	r1, #1
 8012ed2:	2100      	moveq	r1, #0
 8012ed4:	f7fe bc0c 	b.w	80116f0 <forward_cast+0x1c10>
 8012ed8:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012edc:	3900      	subs	r1, #0
 8012ede:	bf18      	it	ne
 8012ee0:	2101      	movne	r1, #1
 8012ee2:	f7fe bc05 	b.w	80116f0 <forward_cast+0x1c10>
 8012ee6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012eea:	f7ed fb21 	bl	8000530 <__aeabi_l2f>
 8012eee:	ee07 0a90 	vmov	s15, r0
 8012ef2:	4bc9      	ldr	r3, [pc, #804]	; (8013218 <forward_cast+0x3738>)
 8012ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ef8:	4ac6      	ldr	r2, [pc, #792]	; (8013214 <forward_cast+0x3734>)
 8012efa:	edcd 7a01 	vstr	s15, [sp, #4]
 8012efe:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8012f02:	f7fe bba3 	b.w	801164c <forward_cast+0x1b6c>
 8012f06:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012f0a:	f7ed fb09 	bl	8000520 <__aeabi_ul2f>
 8012f0e:	ee07 0a90 	vmov	s15, r0
 8012f12:	4ac0      	ldr	r2, [pc, #768]	; (8013214 <forward_cast+0x3734>)
 8012f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f18:	4bbf      	ldr	r3, [pc, #764]	; (8013218 <forward_cast+0x3738>)
 8012f1a:	edcd 7a01 	vstr	s15, [sp, #4]
 8012f1e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8012f22:	f7fe bb93 	b.w	801164c <forward_cast+0x1b6c>
 8012f26:	edd5 7a00 	vldr	s15, [r5]
 8012f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f32:	edcd 7a01 	vstr	s15, [sp, #4]
 8012f36:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8012f3a:	f7fe bb87 	b.w	801164c <forward_cast+0x1b6c>
 8012f3e:	f995 0000 	ldrsb.w	r0, [r5]
 8012f42:	f7fd bcfe 	b.w	8010942 <forward_cast+0xe62>
 8012f46:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012f4a:	f7ed fae9 	bl	8000520 <__aeabi_ul2f>
 8012f4e:	ee07 0a90 	vmov	s15, r0
 8012f52:	4ab0      	ldr	r2, [pc, #704]	; (8013214 <forward_cast+0x3734>)
 8012f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f58:	ee17 3a90 	vmov	r3, s15
 8012f5c:	b219      	sxth	r1, r3
 8012f5e:	4bac      	ldr	r3, [pc, #688]	; (8013210 <forward_cast+0x3730>)
 8012f60:	f7fd bafa 	b.w	8010558 <forward_cast+0xa78>
 8012f64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012f68:	f7ed fada 	bl	8000520 <__aeabi_ul2f>
 8012f6c:	ee07 0a90 	vmov	s15, r0
 8012f70:	4aa7      	ldr	r2, [pc, #668]	; (8013210 <forward_cast+0x3730>)
 8012f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f76:	4ba8      	ldr	r3, [pc, #672]	; (8013218 <forward_cast+0x3738>)
 8012f78:	ee17 0a90 	vmov	r0, s15
 8012f7c:	f7fc bf56 	b.w	800fe2c <forward_cast+0x34c>
 8012f80:	edd5 7a00 	vldr	s15, [r5]
 8012f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f8c:	ee17 0a90 	vmov	r0, s15
 8012f90:	f7fc bf4c 	b.w	800fe2c <forward_cast+0x34c>
 8012f94:	7828      	ldrb	r0, [r5, #0]
 8012f96:	f7fd bc20 	b.w	80107da <forward_cast+0xcfa>
 8012f9a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012f9e:	f7ed fac7 	bl	8000530 <__aeabi_l2f>
 8012fa2:	ee07 0a90 	vmov	s15, r0
 8012fa6:	4a9b      	ldr	r2, [pc, #620]	; (8013214 <forward_cast+0x3734>)
 8012fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fac:	ee17 3a90 	vmov	r3, s15
 8012fb0:	b219      	sxth	r1, r3
 8012fb2:	4b97      	ldr	r3, [pc, #604]	; (8013210 <forward_cast+0x3730>)
 8012fb4:	f7fd bb0c 	b.w	80105d0 <forward_cast+0xaf0>
 8012fb8:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012fbc:	f7fd b860 	b.w	8010080 <forward_cast+0x5a0>
 8012fc0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012fc4:	f7ed fab4 	bl	8000530 <__aeabi_l2f>
 8012fc8:	ee07 0a90 	vmov	s15, r0
 8012fcc:	4a91      	ldr	r2, [pc, #580]	; (8013214 <forward_cast+0x3734>)
 8012fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fd2:	ee17 3a90 	vmov	r3, s15
 8012fd6:	b219      	sxth	r1, r3
 8012fd8:	4b8d      	ldr	r3, [pc, #564]	; (8013210 <forward_cast+0x3730>)
 8012fda:	f7fd ba81 	b.w	80104e0 <forward_cast+0xa00>
 8012fde:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012fe2:	f7fd bb7d 	b.w	80106e0 <forward_cast+0xc00>
 8012fe6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012fea:	f7ed faa1 	bl	8000530 <__aeabi_l2f>
 8012fee:	ee07 0a90 	vmov	s15, r0
 8012ff2:	4a8a      	ldr	r2, [pc, #552]	; (801321c <forward_cast+0x373c>)
 8012ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ff8:	4b89      	ldr	r3, [pc, #548]	; (8013220 <forward_cast+0x3740>)
 8012ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ffe:	f7fd ba35 	b.w	801046c <forward_cast+0x98c>
 8013002:	f9b5 0000 	ldrsh.w	r0, [r5]
 8013006:	f7fd b88d 	b.w	8010124 <forward_cast+0x644>
 801300a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801300e:	f7ed fa8f 	bl	8000530 <__aeabi_l2f>
 8013012:	ee07 0a90 	vmov	s15, r0
 8013016:	4a80      	ldr	r2, [pc, #512]	; (8013218 <forward_cast+0x3738>)
 8013018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801301c:	4b80      	ldr	r3, [pc, #512]	; (8013220 <forward_cast+0x3740>)
 801301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013022:	f7fd b9e3 	b.w	80103ec <forward_cast+0x90c>
 8013026:	f9b5 0000 	ldrsh.w	r0, [r5]
 801302a:	f7fc bfa1 	b.w	800ff70 <forward_cast+0x490>
 801302e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013032:	f7ed fa7d 	bl	8000530 <__aeabi_l2f>
 8013036:	ee07 0a90 	vmov	s15, r0
 801303a:	4b76      	ldr	r3, [pc, #472]	; (8013214 <forward_cast+0x3734>)
 801303c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013040:	4a78      	ldr	r2, [pc, #480]	; (8013224 <forward_cast+0x3744>)
 8013042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013046:	bf14      	ite	ne
 8013048:	2101      	movne	r1, #1
 801304a:	2100      	moveq	r1, #0
 801304c:	f7fd bc3e 	b.w	80108cc <forward_cast+0xdec>
 8013050:	edd5 7a00 	vldr	s15, [r5]
 8013054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801305c:	ee17 0a90 	vmov	r0, s15
 8013060:	f7fd bcbc 	b.w	80109dc <forward_cast+0xefc>
 8013064:	edd5 7a00 	vldr	s15, [r5]
 8013068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801306c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013070:	ee17 1a90 	vmov	r1, s15
 8013074:	b209      	sxth	r1, r1
 8013076:	f7fd ba6f 	b.w	8010558 <forward_cast+0xa78>
 801307a:	7829      	ldrb	r1, [r5, #0]
 801307c:	ee07 1a90 	vmov	s15, r1
 8013080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013084:	f7fd b9f2 	b.w	801046c <forward_cast+0x98c>
 8013088:	f995 0000 	ldrsb.w	r0, [r5]
 801308c:	f7fd b88a 	b.w	80101a4 <forward_cast+0x6c4>
 8013090:	f995 0000 	ldrsb.w	r0, [r5]
 8013094:	f7fc beca 	b.w	800fe2c <forward_cast+0x34c>
 8013098:	e9d5 0100 	ldrd	r0, r1, [r5]
 801309c:	f7ed fa48 	bl	8000530 <__aeabi_l2f>
 80130a0:	ee07 0a90 	vmov	s15, r0
 80130a4:	4a5b      	ldr	r2, [pc, #364]	; (8013214 <forward_cast+0x3734>)
 80130a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130aa:	ee17 3a90 	vmov	r3, s15
 80130ae:	b219      	sxth	r1, r3
 80130b0:	4b57      	ldr	r3, [pc, #348]	; (8013210 <forward_cast+0x3730>)
 80130b2:	f7fd ba51 	b.w	8010558 <forward_cast+0xa78>
 80130b6:	7828      	ldrb	r0, [r5, #0]
 80130b8:	f7fc bf5a 	b.w	800ff70 <forward_cast+0x490>
 80130bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80130c0:	f7ed fa2e 	bl	8000520 <__aeabi_ul2f>
 80130c4:	ee07 0a90 	vmov	s15, r0
 80130c8:	4a56      	ldr	r2, [pc, #344]	; (8013224 <forward_cast+0x3744>)
 80130ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130ce:	4b51      	ldr	r3, [pc, #324]	; (8013214 <forward_cast+0x3734>)
 80130d0:	ee17 0a90 	vmov	r0, s15
 80130d4:	f7fd bc82 	b.w	80109dc <forward_cast+0xefc>
 80130d8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80130dc:	f7ed fa20 	bl	8000520 <__aeabi_ul2f>
 80130e0:	ee07 0a90 	vmov	s15, r0
 80130e4:	4a4b      	ldr	r2, [pc, #300]	; (8013214 <forward_cast+0x3734>)
 80130e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130ea:	ee17 3a90 	vmov	r3, s15
 80130ee:	b219      	sxth	r1, r3
 80130f0:	4b47      	ldr	r3, [pc, #284]	; (8013210 <forward_cast+0x3730>)
 80130f2:	f7fd b9f5 	b.w	80104e0 <forward_cast+0xa00>
 80130f6:	edd5 7a00 	vldr	s15, [r5]
 80130fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013102:	ee17 1a90 	vmov	r1, s15
 8013106:	b209      	sxth	r1, r1
 8013108:	f7fd b9ea 	b.w	80104e0 <forward_cast+0xa00>
 801310c:	7828      	ldrb	r0, [r5, #0]
 801310e:	f7fd bc18 	b.w	8010942 <forward_cast+0xe62>
 8013112:	f995 0000 	ldrsb.w	r0, [r5]
 8013116:	f7fd bc61 	b.w	80109dc <forward_cast+0xefc>
 801311a:	f995 1000 	ldrsb.w	r1, [r5]
 801311e:	f7fd b9df 	b.w	80104e0 <forward_cast+0xa00>
 8013122:	f995 1000 	ldrsb.w	r1, [r5]
 8013126:	f7fd ba17 	b.w	8010558 <forward_cast+0xa78>
 801312a:	f995 0000 	ldrsb.w	r0, [r5]
 801312e:	f7fd bad7 	b.w	80106e0 <forward_cast+0xc00>
 8013132:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013136:	f7ed f9f3 	bl	8000520 <__aeabi_ul2f>
 801313a:	ee07 0a90 	vmov	s15, r0
 801313e:	4a35      	ldr	r2, [pc, #212]	; (8013214 <forward_cast+0x3734>)
 8013140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013144:	ee17 3a90 	vmov	r3, s15
 8013148:	b219      	sxth	r1, r3
 801314a:	4b31      	ldr	r3, [pc, #196]	; (8013210 <forward_cast+0x3730>)
 801314c:	f7fd ba40 	b.w	80105d0 <forward_cast+0xaf0>
 8013150:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013154:	f7ed f9e4 	bl	8000520 <__aeabi_ul2f>
 8013158:	ee07 0a90 	vmov	s15, r0
 801315c:	4a2d      	ldr	r2, [pc, #180]	; (8013214 <forward_cast+0x3734>)
 801315e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013162:	ee17 3a90 	vmov	r3, s15
 8013166:	b299      	uxth	r1, r3
 8013168:	4b29      	ldr	r3, [pc, #164]	; (8013210 <forward_cast+0x3730>)
 801316a:	f7fc bdab 	b.w	800fcc4 <forward_cast+0x1e4>
 801316e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013172:	f7ed f9dd 	bl	8000530 <__aeabi_l2f>
 8013176:	ee07 0a90 	vmov	s15, r0
 801317a:	4b27      	ldr	r3, [pc, #156]	; (8013218 <forward_cast+0x3738>)
 801317c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013180:	4a29      	ldr	r2, [pc, #164]	; (8013228 <forward_cast+0x3748>)
 8013182:	ee17 0a90 	vmov	r0, s15
 8013186:	f7fd bd25 	b.w	8010bd4 <forward_cast+0x10f4>
 801318a:	edd5 7a00 	vldr	s15, [r5]
 801318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013196:	ee17 0a90 	vmov	r0, s15
 801319a:	f7fd bcaf 	b.w	8010afc <forward_cast+0x101c>
 801319e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80131a2:	f7ed f9c5 	bl	8000530 <__aeabi_l2f>
 80131a6:	ee07 0a90 	vmov	s15, r0
 80131aa:	4b1a      	ldr	r3, [pc, #104]	; (8013214 <forward_cast+0x3734>)
 80131ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131b0:	4a1c      	ldr	r2, [pc, #112]	; (8013224 <forward_cast+0x3744>)
 80131b2:	ee17 0a90 	vmov	r0, s15
 80131b6:	f7fe b902 	b.w	80113be <forward_cast+0x18de>
 80131ba:	7828      	ldrb	r0, [r5, #0]
 80131bc:	f7fe b8ff 	b.w	80113be <forward_cast+0x18de>
 80131c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80131c4:	f7ed f9ac 	bl	8000520 <__aeabi_ul2f>
 80131c8:	ee07 0a90 	vmov	s15, r0
 80131cc:	4a15      	ldr	r2, [pc, #84]	; (8013224 <forward_cast+0x3744>)
 80131ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131d2:	4b10      	ldr	r3, [pc, #64]	; (8013214 <forward_cast+0x3734>)
 80131d4:	ee17 0a90 	vmov	r0, s15
 80131d8:	f7fe b8f1 	b.w	80113be <forward_cast+0x18de>
 80131dc:	f9b5 0000 	ldrsh.w	r0, [r5]
 80131e0:	f7fe b8ed 	b.w	80113be <forward_cast+0x18de>
 80131e4:	f995 0000 	ldrsb.w	r0, [r5]
 80131e8:	f7fe b8e9 	b.w	80113be <forward_cast+0x18de>
 80131ec:	f995 0000 	ldrsb.w	r0, [r5]
 80131f0:	f7fc bd17 	b.w	800fc22 <forward_cast+0x142>
 80131f4:	f995 0000 	ldrsb.w	r0, [r5]
 80131f8:	f7fe b930 	b.w	801145c <forward_cast+0x197c>
 80131fc:	edd5 7a00 	vldr	s15, [r5]
 8013200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013208:	ee17 0a90 	vmov	r0, s15
 801320c:	f7fe b926 	b.w	801145c <forward_cast+0x197c>
 8013210:	00041040 	.word	0x00041040
 8013214:	00042040 	.word	0x00042040
 8013218:	00841040 	.word	0x00841040
 801321c:	00842040 	.word	0x00842040
 8013220:	00840840 	.word	0x00840840
 8013224:	00060440 	.word	0x00060440
 8013228:	01821040 	.word	0x01821040
 801322c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013230:	f7ed f97e 	bl	8000530 <__aeabi_l2f>
 8013234:	ee07 0a90 	vmov	s15, r0
 8013238:	4bdc      	ldr	r3, [pc, #880]	; (80135ac <forward_cast+0x3acc>)
 801323a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801323e:	4adc      	ldr	r2, [pc, #880]	; (80135b0 <forward_cast+0x3ad0>)
 8013240:	ee17 0a90 	vmov	r0, s15
 8013244:	f7fe b90a 	b.w	801145c <forward_cast+0x197c>
 8013248:	7828      	ldrb	r0, [r5, #0]
 801324a:	f7fe b907 	b.w	801145c <forward_cast+0x197c>
 801324e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013252:	f7ed f965 	bl	8000520 <__aeabi_ul2f>
 8013256:	ee07 0a90 	vmov	s15, r0
 801325a:	4ad5      	ldr	r2, [pc, #852]	; (80135b0 <forward_cast+0x3ad0>)
 801325c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013260:	4bd2      	ldr	r3, [pc, #840]	; (80135ac <forward_cast+0x3acc>)
 8013262:	ee17 0a90 	vmov	r0, s15
 8013266:	f7fe b8f9 	b.w	801145c <forward_cast+0x197c>
 801326a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801326e:	f7fe b8f5 	b.w	801145c <forward_cast+0x197c>
 8013272:	edd5 7a00 	vldr	s15, [r5]
 8013276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801327a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801327e:	ee17 0a90 	vmov	r0, s15
 8013282:	f7fe b89c 	b.w	80113be <forward_cast+0x18de>
 8013286:	f995 1000 	ldrsb.w	r1, [r5]
 801328a:	ee07 1a90 	vmov	s15, r1
 801328e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013292:	f7fd b8eb 	b.w	801046c <forward_cast+0x98c>
 8013296:	edd5 7a00 	vldr	s15, [r5]
 801329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801329e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132a2:	ee17 1a90 	vmov	r1, s15
 80132a6:	b209      	sxth	r1, r1
 80132a8:	f7fd b992 	b.w	80105d0 <forward_cast+0xaf0>
 80132ac:	f9b5 0000 	ldrsh.w	r0, [r5]
 80132b0:	f7fd bc90 	b.w	8010bd4 <forward_cast+0x10f4>
 80132b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80132b8:	f7ed f932 	bl	8000520 <__aeabi_ul2f>
 80132bc:	ee07 0a90 	vmov	s15, r0
 80132c0:	4abb      	ldr	r2, [pc, #748]	; (80135b0 <forward_cast+0x3ad0>)
 80132c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132c6:	ee17 3a90 	vmov	r3, s15
 80132ca:	b299      	uxth	r1, r3
 80132cc:	4bb7      	ldr	r3, [pc, #732]	; (80135ac <forward_cast+0x3acc>)
 80132ce:	f7fc be05 	b.w	800fedc <forward_cast+0x3fc>
 80132d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80132d6:	f7ed f923 	bl	8000520 <__aeabi_ul2f>
 80132da:	ee07 0a90 	vmov	s15, r0
 80132de:	4bb5      	ldr	r3, [pc, #724]	; (80135b4 <forward_cast+0x3ad4>)
 80132e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132e4:	4ab4      	ldr	r2, [pc, #720]	; (80135b8 <forward_cast+0x3ad8>)
 80132e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132ea:	f7fd b8bf 	b.w	801046c <forward_cast+0x98c>
 80132ee:	edd5 7a00 	vldr	s15, [r5]
 80132f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132fe:	f7fd b8b5 	b.w	801046c <forward_cast+0x98c>
 8013302:	7828      	ldrb	r0, [r5, #0]
 8013304:	f7fc bd92 	b.w	800fe2c <forward_cast+0x34c>
 8013308:	e9d5 0100 	ldrd	r0, r1, [r5]
 801330c:	f7ed f908 	bl	8000520 <__aeabi_ul2f>
 8013310:	ee07 0a90 	vmov	s15, r0
 8013314:	4aa9      	ldr	r2, [pc, #676]	; (80135bc <forward_cast+0x3adc>)
 8013316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801331a:	4ba5      	ldr	r3, [pc, #660]	; (80135b0 <forward_cast+0x3ad0>)
 801331c:	ee17 0a90 	vmov	r0, s15
 8013320:	f7fd bb0f 	b.w	8010942 <forward_cast+0xe62>
 8013324:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013328:	f7ed f8fa 	bl	8000520 <__aeabi_ul2f>
 801332c:	ee07 0a90 	vmov	s15, r0
 8013330:	4ba0      	ldr	r3, [pc, #640]	; (80135b4 <forward_cast+0x3ad4>)
 8013332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013336:	4aa2      	ldr	r2, [pc, #648]	; (80135c0 <forward_cast+0x3ae0>)
 8013338:	ee17 0a90 	vmov	r0, s15
 801333c:	f7fc be18 	b.w	800ff70 <forward_cast+0x490>
 8013340:	edd5 7a00 	vldr	s15, [r5]
 8013344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801334c:	ee17 0a90 	vmov	r0, s15
 8013350:	f7fc be0e 	b.w	800ff70 <forward_cast+0x490>
 8013354:	7828      	ldrb	r0, [r5, #0]
 8013356:	f7fd b9c3 	b.w	80106e0 <forward_cast+0xc00>
 801335a:	edd5 7a00 	vldr	s15, [r5]
 801335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013366:	ee17 1a90 	vmov	r1, s15
 801336a:	b289      	uxth	r1, r1
 801336c:	f7fc bdb6 	b.w	800fedc <forward_cast+0x3fc>
 8013370:	7829      	ldrb	r1, [r5, #0]
 8013372:	f7fd b8b5 	b.w	80104e0 <forward_cast+0xa00>
 8013376:	edd5 7a00 	vldr	s15, [r5]
 801337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801337e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013382:	ee17 0a90 	vmov	r0, s15
 8013386:	f7fd badc 	b.w	8010942 <forward_cast+0xe62>
 801338a:	7828      	ldrb	r0, [r5, #0]
 801338c:	f7fc bf0a 	b.w	80101a4 <forward_cast+0x6c4>
 8013390:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013394:	f7ed f8c4 	bl	8000520 <__aeabi_ul2f>
 8013398:	ee07 0a90 	vmov	s15, r0
 801339c:	4a83      	ldr	r2, [pc, #524]	; (80135ac <forward_cast+0x3acc>)
 801339e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133a2:	4b88      	ldr	r3, [pc, #544]	; (80135c4 <forward_cast+0x3ae4>)
 80133a4:	ee17 0a90 	vmov	r0, s15
 80133a8:	f7fc befc 	b.w	80101a4 <forward_cast+0x6c4>
 80133ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80133b0:	f7ed f8b6 	bl	8000520 <__aeabi_ul2f>
 80133b4:	ee07 0a90 	vmov	s15, r0
 80133b8:	4a82      	ldr	r2, [pc, #520]	; (80135c4 <forward_cast+0x3ae4>)
 80133ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133be:	4b7d      	ldr	r3, [pc, #500]	; (80135b4 <forward_cast+0x3ad4>)
 80133c0:	ee17 0a90 	vmov	r0, s15
 80133c4:	f7fd b98c 	b.w	80106e0 <forward_cast+0xc00>
 80133c8:	edd5 7a00 	vldr	s15, [r5]
 80133cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133d4:	ee17 0a90 	vmov	r0, s15
 80133d8:	f7fd b982 	b.w	80106e0 <forward_cast+0xc00>
 80133dc:	7829      	ldrb	r1, [r5, #0]
 80133de:	f7fc bd7d 	b.w	800fedc <forward_cast+0x3fc>
 80133e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80133e6:	f7ed f89b 	bl	8000520 <__aeabi_ul2f>
 80133ea:	ee07 0a90 	vmov	s15, r0
 80133ee:	4a75      	ldr	r2, [pc, #468]	; (80135c4 <forward_cast+0x3ae4>)
 80133f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133f4:	4b6f      	ldr	r3, [pc, #444]	; (80135b4 <forward_cast+0x3ad4>)
 80133f6:	ee17 0a90 	vmov	r0, s15
 80133fa:	f7fc bc12 	b.w	800fc22 <forward_cast+0x142>
 80133fe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013402:	f7ed f88d 	bl	8000520 <__aeabi_ul2f>
 8013406:	ee07 0a90 	vmov	s15, r0
 801340a:	4a69      	ldr	r2, [pc, #420]	; (80135b0 <forward_cast+0x3ad0>)
 801340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013410:	4b66      	ldr	r3, [pc, #408]	; (80135ac <forward_cast+0x3acc>)
 8013412:	ee17 0a90 	vmov	r0, s15
 8013416:	f7fd b9e0 	b.w	80107da <forward_cast+0xcfa>
 801341a:	edd5 7a00 	vldr	s15, [r5]
 801341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013426:	ee17 0a90 	vmov	r0, s15
 801342a:	f7fd b9d6 	b.w	80107da <forward_cast+0xcfa>
 801342e:	7828      	ldrb	r0, [r5, #0]
 8013430:	f7fd ba11 	b.w	8010856 <forward_cast+0xd76>
 8013434:	edd5 7a00 	vldr	s15, [r5]
 8013438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801343c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013440:	ee17 0a90 	vmov	r0, s15
 8013444:	f7fc beae 	b.w	80101a4 <forward_cast+0x6c4>
 8013448:	7828      	ldrb	r0, [r5, #0]
 801344a:	f7fc bbea 	b.w	800fc22 <forward_cast+0x142>
 801344e:	edd5 7a00 	vldr	s15, [r5]
 8013452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801345a:	ee17 0a90 	vmov	r0, s15
 801345e:	f7fc bbe0 	b.w	800fc22 <forward_cast+0x142>
 8013462:	7829      	ldrb	r1, [r5, #0]
 8013464:	f7fd b878 	b.w	8010558 <forward_cast+0xa78>
 8013468:	e9d5 0100 	ldrd	r0, r1, [r5]
 801346c:	f7ed f860 	bl	8000530 <__aeabi_l2f>
 8013470:	ee07 0a90 	vmov	s15, r0
 8013474:	4b4d      	ldr	r3, [pc, #308]	; (80135ac <forward_cast+0x3acc>)
 8013476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801347a:	4a4d      	ldr	r2, [pc, #308]	; (80135b0 <forward_cast+0x3ad0>)
 801347c:	ee17 0a90 	vmov	r0, s15
 8013480:	f7fe b83b 	b.w	80114fa <forward_cast+0x1a1a>
 8013484:	7828      	ldrb	r0, [r5, #0]
 8013486:	f7fe b838 	b.w	80114fa <forward_cast+0x1a1a>
 801348a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801348e:	f7ed f847 	bl	8000520 <__aeabi_ul2f>
 8013492:	ee07 0a90 	vmov	s15, r0
 8013496:	4a46      	ldr	r2, [pc, #280]	; (80135b0 <forward_cast+0x3ad0>)
 8013498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801349c:	4b43      	ldr	r3, [pc, #268]	; (80135ac <forward_cast+0x3acc>)
 801349e:	ee17 0a90 	vmov	r0, s15
 80134a2:	f7fe b82a 	b.w	80114fa <forward_cast+0x1a1a>
 80134a6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80134aa:	f7fe b826 	b.w	80114fa <forward_cast+0x1a1a>
 80134ae:	f995 0000 	ldrsb.w	r0, [r5]
 80134b2:	f7fe ba89 	b.w	80119c8 <forward_cast+0x1ee8>
 80134b6:	edd5 7a00 	vldr	s15, [r5]
 80134ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134c2:	ee17 0a90 	vmov	r0, s15
 80134c6:	f7fe b9cd 	b.w	8011864 <forward_cast+0x1d84>
 80134ca:	f995 0000 	ldrsb.w	r0, [r5]
 80134ce:	f7fe bacb 	b.w	8011a68 <forward_cast+0x1f88>
 80134d2:	edd5 7a00 	vldr	s15, [r5]
 80134d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134de:	ee17 0a90 	vmov	r0, s15
 80134e2:	f7fe bac1 	b.w	8011a68 <forward_cast+0x1f88>
 80134e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80134ea:	f7ed f821 	bl	8000530 <__aeabi_l2f>
 80134ee:	ee07 0a90 	vmov	s15, r0
 80134f2:	4b30      	ldr	r3, [pc, #192]	; (80135b4 <forward_cast+0x3ad4>)
 80134f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134f8:	4a32      	ldr	r2, [pc, #200]	; (80135c4 <forward_cast+0x3ae4>)
 80134fa:	ee17 0a90 	vmov	r0, s15
 80134fe:	f7fe bab3 	b.w	8011a68 <forward_cast+0x1f88>
 8013502:	7828      	ldrb	r0, [r5, #0]
 8013504:	f7fe bab0 	b.w	8011a68 <forward_cast+0x1f88>
 8013508:	e9d5 0100 	ldrd	r0, r1, [r5]
 801350c:	f7ed f808 	bl	8000520 <__aeabi_ul2f>
 8013510:	ee07 0a90 	vmov	s15, r0
 8013514:	4a2b      	ldr	r2, [pc, #172]	; (80135c4 <forward_cast+0x3ae4>)
 8013516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801351a:	4b26      	ldr	r3, [pc, #152]	; (80135b4 <forward_cast+0x3ad4>)
 801351c:	ee17 0a90 	vmov	r0, s15
 8013520:	f7fe baa2 	b.w	8011a68 <forward_cast+0x1f88>
 8013524:	f9b5 0000 	ldrsh.w	r0, [r5]
 8013528:	f7fe ba9e 	b.w	8011a68 <forward_cast+0x1f88>
 801352c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013530:	f7ec fffe 	bl	8000530 <__aeabi_l2f>
 8013534:	ee07 0a90 	vmov	s15, r0
 8013538:	4b1d      	ldr	r3, [pc, #116]	; (80135b0 <forward_cast+0x3ad0>)
 801353a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801353e:	4a1f      	ldr	r2, [pc, #124]	; (80135bc <forward_cast+0x3adc>)
 8013540:	ee17 0a90 	vmov	r0, s15
 8013544:	f7fd b9fd 	b.w	8010942 <forward_cast+0xe62>
 8013548:	e9d5 0100 	ldrd	r0, r1, [r5]
 801354c:	f7ec fff0 	bl	8000530 <__aeabi_l2f>
 8013550:	ee07 0a90 	vmov	s15, r0
 8013554:	4a1a      	ldr	r2, [pc, #104]	; (80135c0 <forward_cast+0x3ae0>)
 8013556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801355a:	4b16      	ldr	r3, [pc, #88]	; (80135b4 <forward_cast+0x3ad4>)
 801355c:	ee17 0a90 	vmov	r0, s15
 8013560:	f7fc bd06 	b.w	800ff70 <forward_cast+0x490>
 8013564:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013568:	f7ec ffe2 	bl	8000530 <__aeabi_l2f>
 801356c:	ee07 0a90 	vmov	s15, r0
 8013570:	4a0f      	ldr	r2, [pc, #60]	; (80135b0 <forward_cast+0x3ad0>)
 8013572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013576:	ee17 3a90 	vmov	r3, s15
 801357a:	b299      	uxth	r1, r3
 801357c:	4b0b      	ldr	r3, [pc, #44]	; (80135ac <forward_cast+0x3acc>)
 801357e:	f7fc bd43 	b.w	8010008 <forward_cast+0x528>
 8013582:	7828      	ldrb	r0, [r5, #0]
 8013584:	f7fc bd7c 	b.w	8010080 <forward_cast+0x5a0>
 8013588:	e9d5 0100 	ldrd	r0, r1, [r5]
 801358c:	f7ec ffd0 	bl	8000530 <__aeabi_l2f>
 8013590:	ee07 0a90 	vmov	s15, r0
 8013594:	4b05      	ldr	r3, [pc, #20]	; (80135ac <forward_cast+0x3acc>)
 8013596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801359a:	4a05      	ldr	r2, [pc, #20]	; (80135b0 <forward_cast+0x3ad0>)
 801359c:	ee17 0a90 	vmov	r0, s15
 80135a0:	f7fe b911 	b.w	80117c6 <forward_cast+0x1ce6>
 80135a4:	7828      	ldrb	r0, [r5, #0]
 80135a6:	f7fe b90e 	b.w	80117c6 <forward_cast+0x1ce6>
 80135aa:	bf00      	nop
 80135ac:	00041040 	.word	0x00041040
 80135b0:	00042040 	.word	0x00042040
 80135b4:	00840840 	.word	0x00840840
 80135b8:	00842040 	.word	0x00842040
 80135bc:	00060440 	.word	0x00060440
 80135c0:	00040440 	.word	0x00040440
 80135c4:	00841040 	.word	0x00841040
 80135c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80135cc:	f7ec ffa8 	bl	8000520 <__aeabi_ul2f>
 80135d0:	ee07 0a90 	vmov	s15, r0
 80135d4:	4ada      	ldr	r2, [pc, #872]	; (8013940 <forward_cast+0x3e60>)
 80135d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135da:	4bda      	ldr	r3, [pc, #872]	; (8013944 <forward_cast+0x3e64>)
 80135dc:	ee17 0a90 	vmov	r0, s15
 80135e0:	f7fe b8f1 	b.w	80117c6 <forward_cast+0x1ce6>
 80135e4:	f9b5 0000 	ldrsh.w	r0, [r5]
 80135e8:	f7fe b8ed 	b.w	80117c6 <forward_cast+0x1ce6>
 80135ec:	f995 0000 	ldrsb.w	r0, [r5]
 80135f0:	f7fe b938 	b.w	8011864 <forward_cast+0x1d84>
 80135f4:	f995 0000 	ldrsb.w	r0, [r5]
 80135f8:	f7fe b8e5 	b.w	80117c6 <forward_cast+0x1ce6>
 80135fc:	edd5 7a00 	vldr	s15, [r5]
 8013600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013608:	ee17 0a90 	vmov	r0, s15
 801360c:	f7fe b8db 	b.w	80117c6 <forward_cast+0x1ce6>
 8013610:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013614:	f7ec ff8c 	bl	8000530 <__aeabi_l2f>
 8013618:	ee07 0a90 	vmov	s15, r0
 801361c:	4bc9      	ldr	r3, [pc, #804]	; (8013944 <forward_cast+0x3e64>)
 801361e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013622:	4ac9      	ldr	r2, [pc, #804]	; (8013948 <forward_cast+0x3e68>)
 8013624:	ee17 0a90 	vmov	r0, s15
 8013628:	f7fe b91c 	b.w	8011864 <forward_cast+0x1d84>
 801362c:	7828      	ldrb	r0, [r5, #0]
 801362e:	f7fe b919 	b.w	8011864 <forward_cast+0x1d84>
 8013632:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013636:	f7ec ff73 	bl	8000520 <__aeabi_ul2f>
 801363a:	ee07 0a90 	vmov	s15, r0
 801363e:	4ac2      	ldr	r2, [pc, #776]	; (8013948 <forward_cast+0x3e68>)
 8013640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013644:	4bbf      	ldr	r3, [pc, #764]	; (8013944 <forward_cast+0x3e64>)
 8013646:	ee17 0a90 	vmov	r0, s15
 801364a:	f7fe b90b 	b.w	8011864 <forward_cast+0x1d84>
 801364e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8013652:	f7fe b907 	b.w	8011864 <forward_cast+0x1d84>
 8013656:	e9d5 0100 	ldrd	r0, r1, [r5]
 801365a:	f7ec ff69 	bl	8000530 <__aeabi_l2f>
 801365e:	ee07 0a90 	vmov	s15, r0
 8013662:	4bb9      	ldr	r3, [pc, #740]	; (8013948 <forward_cast+0x3e68>)
 8013664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013668:	4ab6      	ldr	r2, [pc, #728]	; (8013944 <forward_cast+0x3e64>)
 801366a:	ee17 0a90 	vmov	r0, s15
 801366e:	f7fe b95d 	b.w	801192c <forward_cast+0x1e4c>
 8013672:	7828      	ldrb	r0, [r5, #0]
 8013674:	f7fe b95a 	b.w	801192c <forward_cast+0x1e4c>
 8013678:	e9d5 0100 	ldrd	r0, r1, [r5]
 801367c:	f7ec ff50 	bl	8000520 <__aeabi_ul2f>
 8013680:	ee07 0a90 	vmov	s15, r0
 8013684:	4aaf      	ldr	r2, [pc, #700]	; (8013944 <forward_cast+0x3e64>)
 8013686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801368a:	4baf      	ldr	r3, [pc, #700]	; (8013948 <forward_cast+0x3e68>)
 801368c:	ee17 0a90 	vmov	r0, s15
 8013690:	f7fe b94c 	b.w	801192c <forward_cast+0x1e4c>
 8013694:	f9b5 0000 	ldrsh.w	r0, [r5]
 8013698:	f7fe b948 	b.w	801192c <forward_cast+0x1e4c>
 801369c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80136a0:	f7ec ff46 	bl	8000530 <__aeabi_l2f>
 80136a4:	ee07 0a90 	vmov	s15, r0
 80136a8:	4ba6      	ldr	r3, [pc, #664]	; (8013944 <forward_cast+0x3e64>)
 80136aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136ae:	4aa4      	ldr	r2, [pc, #656]	; (8013940 <forward_cast+0x3e60>)
 80136b0:	ee17 0a90 	vmov	r0, s15
 80136b4:	f7fe b988 	b.w	80119c8 <forward_cast+0x1ee8>
 80136b8:	7828      	ldrb	r0, [r5, #0]
 80136ba:	f7fe b985 	b.w	80119c8 <forward_cast+0x1ee8>
 80136be:	e9d5 0100 	ldrd	r0, r1, [r5]
 80136c2:	f7ec ff2d 	bl	8000520 <__aeabi_ul2f>
 80136c6:	ee07 0a90 	vmov	s15, r0
 80136ca:	4a9d      	ldr	r2, [pc, #628]	; (8013940 <forward_cast+0x3e60>)
 80136cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136d0:	4b9c      	ldr	r3, [pc, #624]	; (8013944 <forward_cast+0x3e64>)
 80136d2:	ee17 0a90 	vmov	r0, s15
 80136d6:	f7fe b977 	b.w	80119c8 <forward_cast+0x1ee8>
 80136da:	f9b5 0000 	ldrsh.w	r0, [r5]
 80136de:	f7fe b973 	b.w	80119c8 <forward_cast+0x1ee8>
 80136e2:	f995 0000 	ldrsb.w	r0, [r5]
 80136e6:	f7fe b921 	b.w	801192c <forward_cast+0x1e4c>
 80136ea:	edd5 7a00 	vldr	s15, [r5]
 80136ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136f6:	ee17 0a90 	vmov	r0, s15
 80136fa:	f7fe b917 	b.w	801192c <forward_cast+0x1e4c>
 80136fe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013702:	f7ec ff15 	bl	8000530 <__aeabi_l2f>
 8013706:	ee07 0a90 	vmov	s15, r0
 801370a:	4b8f      	ldr	r3, [pc, #572]	; (8013948 <forward_cast+0x3e68>)
 801370c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013710:	4a8c      	ldr	r2, [pc, #560]	; (8013944 <forward_cast+0x3e64>)
 8013712:	ee17 0a90 	vmov	r0, s15
 8013716:	f7fc bb26 	b.w	800fd66 <forward_cast+0x286>
 801371a:	7828      	ldrb	r0, [r5, #0]
 801371c:	f7fd b9b8 	b.w	8010a90 <forward_cast+0xfb0>
 8013720:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013724:	f7ec ff04 	bl	8000530 <__aeabi_l2f>
 8013728:	ee07 0a90 	vmov	s15, r0
 801372c:	4b85      	ldr	r3, [pc, #532]	; (8013944 <forward_cast+0x3e64>)
 801372e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013732:	4a83      	ldr	r2, [pc, #524]	; (8013940 <forward_cast+0x3e60>)
 8013734:	ee17 0a90 	vmov	r0, s15
 8013738:	f7fe b9e5 	b.w	8011b06 <forward_cast+0x2026>
 801373c:	7828      	ldrb	r0, [r5, #0]
 801373e:	f7fe b9e2 	b.w	8011b06 <forward_cast+0x2026>
 8013742:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013746:	f7ec feeb 	bl	8000520 <__aeabi_ul2f>
 801374a:	ee07 0a90 	vmov	s15, r0
 801374e:	4a7c      	ldr	r2, [pc, #496]	; (8013940 <forward_cast+0x3e60>)
 8013750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013754:	4b7b      	ldr	r3, [pc, #492]	; (8013944 <forward_cast+0x3e64>)
 8013756:	ee17 0a90 	vmov	r0, s15
 801375a:	f7fe b9d4 	b.w	8011b06 <forward_cast+0x2026>
 801375e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8013762:	f7fe b9d0 	b.w	8011b06 <forward_cast+0x2026>
 8013766:	f995 0000 	ldrsb.w	r0, [r5]
 801376a:	f7fe b9cc 	b.w	8011b06 <forward_cast+0x2026>
 801376e:	edd5 7a00 	vldr	s15, [r5]
 8013772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801377a:	ee17 0a90 	vmov	r0, s15
 801377e:	f7fe b923 	b.w	80119c8 <forward_cast+0x1ee8>
 8013782:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013786:	f7ec fed3 	bl	8000530 <__aeabi_l2f>
 801378a:	ee07 0a90 	vmov	s15, r0
 801378e:	4a6c      	ldr	r2, [pc, #432]	; (8013940 <forward_cast+0x3e60>)
 8013790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013794:	ee17 3a90 	vmov	r3, s15
 8013798:	b299      	uxth	r1, r3
 801379a:	4b6a      	ldr	r3, [pc, #424]	; (8013944 <forward_cast+0x3e64>)
 801379c:	f7fc bb9e 	b.w	800fedc <forward_cast+0x3fc>
 80137a0:	f9b5 0000 	ldrsh.w	r0, [r5]
 80137a4:	f7fd b819 	b.w	80107da <forward_cast+0xcfa>
 80137a8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80137ac:	9301      	str	r3, [sp, #4]
 80137ae:	f7ec febf 	bl	8000530 <__aeabi_l2f>
 80137b2:	ee07 0a90 	vmov	s15, r0
 80137b6:	4a64      	ldr	r2, [pc, #400]	; (8013948 <forward_cast+0x3e68>)
 80137b8:	9b01      	ldr	r3, [sp, #4]
 80137ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137be:	ee17 0a90 	vmov	r0, s15
 80137c2:	f7fe ba05 	b.w	8011bd0 <forward_cast+0x20f0>
 80137c6:	7828      	ldrb	r0, [r5, #0]
 80137c8:	f7fe ba02 	b.w	8011bd0 <forward_cast+0x20f0>
 80137cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80137d0:	9301      	str	r3, [sp, #4]
 80137d2:	f7ec fea5 	bl	8000520 <__aeabi_ul2f>
 80137d6:	ee07 0a90 	vmov	s15, r0
 80137da:	9b01      	ldr	r3, [sp, #4]
 80137dc:	4a5a      	ldr	r2, [pc, #360]	; (8013948 <forward_cast+0x3e68>)
 80137de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137e2:	ee17 0a90 	vmov	r0, s15
 80137e6:	f7fe b9f3 	b.w	8011bd0 <forward_cast+0x20f0>
 80137ea:	f9b5 0000 	ldrsh.w	r0, [r5]
 80137ee:	f7fe b9ef 	b.w	8011bd0 <forward_cast+0x20f0>
 80137f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80137f6:	f7ec fe9b 	bl	8000530 <__aeabi_l2f>
 80137fa:	ee07 0a90 	vmov	s15, r0
 80137fe:	4b52      	ldr	r3, [pc, #328]	; (8013948 <forward_cast+0x3e68>)
 8013800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013804:	4a4f      	ldr	r2, [pc, #316]	; (8013944 <forward_cast+0x3e64>)
 8013806:	edcd 7a01 	vstr	s15, [sp, #4]
 801380a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801380e:	f7fe bae2 	b.w	8011dd6 <forward_cast+0x22f6>
 8013812:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013816:	f7ec fe83 	bl	8000520 <__aeabi_ul2f>
 801381a:	ee07 0a90 	vmov	s15, r0
 801381e:	4a49      	ldr	r2, [pc, #292]	; (8013944 <forward_cast+0x3e64>)
 8013820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013824:	4b48      	ldr	r3, [pc, #288]	; (8013948 <forward_cast+0x3e68>)
 8013826:	edcd 7a01 	vstr	s15, [sp, #4]
 801382a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801382e:	f7fe bad2 	b.w	8011dd6 <forward_cast+0x22f6>
 8013832:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013836:	f7ec fe7b 	bl	8000530 <__aeabi_l2f>
 801383a:	ee07 0a90 	vmov	s15, r0
 801383e:	4b41      	ldr	r3, [pc, #260]	; (8013944 <forward_cast+0x3e64>)
 8013840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013844:	4a3e      	ldr	r2, [pc, #248]	; (8013940 <forward_cast+0x3e60>)
 8013846:	ee17 0a90 	vmov	r0, s15
 801384a:	f7fc bfc6 	b.w	80107da <forward_cast+0xcfa>
 801384e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8013852:	ee07 1a90 	vmov	s15, r1
 8013856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801385a:	f7fc be07 	b.w	801046c <forward_cast+0x98c>
 801385e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013862:	f7ec fe65 	bl	8000530 <__aeabi_l2f>
 8013866:	ee07 0a90 	vmov	s15, r0
 801386a:	4b36      	ldr	r3, [pc, #216]	; (8013944 <forward_cast+0x3e64>)
 801386c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013870:	4a36      	ldr	r2, [pc, #216]	; (801394c <forward_cast+0x3e6c>)
 8013872:	ee17 0a90 	vmov	r0, s15
 8013876:	f7fd b941 	b.w	8010afc <forward_cast+0x101c>
 801387a:	7828      	ldrb	r0, [r5, #0]
 801387c:	f7fd b9aa 	b.w	8010bd4 <forward_cast+0x10f4>
 8013880:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013884:	f7ec fe54 	bl	8000530 <__aeabi_l2f>
 8013888:	ee07 0a90 	vmov	s15, r0
 801388c:	4b2e      	ldr	r3, [pc, #184]	; (8013948 <forward_cast+0x3e68>)
 801388e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013892:	4a2b      	ldr	r2, [pc, #172]	; (8013940 <forward_cast+0x3e60>)
 8013894:	edcd 7a01 	vstr	s15, [sp, #4]
 8013898:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801389c:	f7fd b963 	b.w	8010b66 <forward_cast+0x1086>
 80138a0:	f9b5 0000 	ldrsh.w	r0, [r5]
 80138a4:	f7fd b84d 	b.w	8010942 <forward_cast+0xe62>
 80138a8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80138ac:	f7ec fe40 	bl	8000530 <__aeabi_l2f>
 80138b0:	ee07 0a90 	vmov	s15, r0
 80138b4:	4b22      	ldr	r3, [pc, #136]	; (8013940 <forward_cast+0x3e60>)
 80138b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138ba:	4a25      	ldr	r2, [pc, #148]	; (8013950 <forward_cast+0x3e70>)
 80138bc:	ee17 0a90 	vmov	r0, s15
 80138c0:	f7fe bae7 	b.w	8011e92 <forward_cast+0x23b2>
 80138c4:	7828      	ldrb	r0, [r5, #0]
 80138c6:	f7fe bae4 	b.w	8011e92 <forward_cast+0x23b2>
 80138ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80138ce:	f7ec fe27 	bl	8000520 <__aeabi_ul2f>
 80138d2:	ee07 0a90 	vmov	s15, r0
 80138d6:	4a1e      	ldr	r2, [pc, #120]	; (8013950 <forward_cast+0x3e70>)
 80138d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138dc:	4b18      	ldr	r3, [pc, #96]	; (8013940 <forward_cast+0x3e60>)
 80138de:	ee17 0a90 	vmov	r0, s15
 80138e2:	f7fe bad6 	b.w	8011e92 <forward_cast+0x23b2>
 80138e6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80138ea:	f7fe bad2 	b.w	8011e92 <forward_cast+0x23b2>
 80138ee:	e9d5 0100 	ldrd	r0, r1, [r5]
 80138f2:	f7ec fe1d 	bl	8000530 <__aeabi_l2f>
 80138f6:	ee07 0a90 	vmov	s15, r0
 80138fa:	4b11      	ldr	r3, [pc, #68]	; (8013940 <forward_cast+0x3e60>)
 80138fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013900:	4a13      	ldr	r2, [pc, #76]	; (8013950 <forward_cast+0x3e70>)
 8013902:	ee17 0a90 	vmov	r0, s15
 8013906:	f7fe bb0d 	b.w	8011f24 <forward_cast+0x2444>
 801390a:	7828      	ldrb	r0, [r5, #0]
 801390c:	f7fe bb0a 	b.w	8011f24 <forward_cast+0x2444>
 8013910:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013914:	f7ec fe04 	bl	8000520 <__aeabi_ul2f>
 8013918:	ee07 0a90 	vmov	s15, r0
 801391c:	4a0c      	ldr	r2, [pc, #48]	; (8013950 <forward_cast+0x3e70>)
 801391e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013922:	4b07      	ldr	r3, [pc, #28]	; (8013940 <forward_cast+0x3e60>)
 8013924:	ee17 0a90 	vmov	r0, s15
 8013928:	f7fe bafc 	b.w	8011f24 <forward_cast+0x2444>
 801392c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8013930:	f7fe baf8 	b.w	8011f24 <forward_cast+0x2444>
 8013934:	2300      	movs	r3, #0
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	deff      	udf	#255	; 0xff
 801393a:	2300      	movs	r3, #0
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	deff      	udf	#255	; 0xff
 8013940:	00042040 	.word	0x00042040
 8013944:	00041040 	.word	0x00041040
 8013948:	00841040 	.word	0x00841040
 801394c:	00040440 	.word	0x00040440
 8013950:	00060440 	.word	0x00060440

08013954 <forward_zipmap>:
 8013954:	6983      	ldr	r3, [r0, #24]
 8013956:	881a      	ldrh	r2, [r3, #0]
 8013958:	2a00      	cmp	r2, #0
 801395a:	d061      	beq.n	8013a20 <forward_zipmap+0xcc>
 801395c:	b470      	push	{r4, r5, r6}
 801395e:	685d      	ldr	r5, [r3, #4]
 8013960:	686b      	ldr	r3, [r5, #4]
 8013962:	b103      	cbz	r3, 8013966 <forward_zipmap+0x12>
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	2a01      	cmp	r2, #1
 8013968:	f000 8090 	beq.w	8013a8c <forward_zipmap+0x138>
 801396c:	6929      	ldr	r1, [r5, #16]
 801396e:	2900      	cmp	r1, #0
 8013970:	f000 8088 	beq.w	8013a84 <forward_zipmap+0x130>
 8013974:	680c      	ldr	r4, [r1, #0]
 8013976:	2a02      	cmp	r2, #2
 8013978:	68d8      	ldr	r0, [r3, #12]
 801397a:	6999      	ldr	r1, [r3, #24]
 801397c:	69a3      	ldr	r3, [r4, #24]
 801397e:	68c4      	ldr	r4, [r0, #12]
 8013980:	6840      	ldr	r0, [r0, #4]
 8013982:	6889      	ldr	r1, [r1, #8]
 8013984:	689b      	ldr	r3, [r3, #8]
 8013986:	fb00 f404 	mul.w	r4, r0, r4
 801398a:	f000 8082 	beq.w	8013a92 <forward_zipmap+0x13e>
 801398e:	69ea      	ldr	r2, [r5, #28]
 8013990:	2a00      	cmp	r2, #0
 8013992:	d079      	beq.n	8013a88 <forward_zipmap+0x134>
 8013994:	6812      	ldr	r2, [r2, #0]
 8013996:	6990      	ldr	r0, [r2, #24]
 8013998:	68d5      	ldr	r5, [r2, #12]
 801399a:	6802      	ldr	r2, [r0, #0]
 801399c:	686d      	ldr	r5, [r5, #4]
 801399e:	6886      	ldr	r6, [r0, #8]
 80139a0:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80139a4:	b3d4      	cbz	r4, 8013a1c <forward_zipmap+0xc8>
 80139a6:	2a10      	cmp	r2, #16
 80139a8:	d03c      	beq.n	8013a24 <forward_zipmap+0xd0>
 80139aa:	2a08      	cmp	r2, #8
 80139ac:	d01c      	beq.n	80139e8 <forward_zipmap+0x94>
 80139ae:	2000      	movs	r0, #0
 80139b0:	4684      	mov	ip, r0
 80139b2:	e014      	b.n	80139de <forward_zipmap+0x8a>
 80139b4:	4602      	mov	r2, r0
 80139b6:	3001      	adds	r0, #1
 80139b8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80139bc:	3308      	adds	r3, #8
 80139be:	f10c 0c01 	add.w	ip, ip, #1
 80139c2:	ee07 2a90 	vmov	s15, r2
 80139c6:	4564      	cmp	r4, ip
 80139c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139cc:	ee17 2a90 	vmov	r2, s15
 80139d0:	f843 2c08 	str.w	r2, [r3, #-8]
 80139d4:	f851 2b04 	ldr.w	r2, [r1], #4
 80139d8:	f843 2c04 	str.w	r2, [r3, #-4]
 80139dc:	d01e      	beq.n	8013a1c <forward_zipmap+0xc8>
 80139de:	4285      	cmp	r5, r0
 80139e0:	d1e8      	bne.n	80139b4 <forward_zipmap+0x60>
 80139e2:	2001      	movs	r0, #1
 80139e4:	2200      	movs	r2, #0
 80139e6:	e7e7      	b.n	80139b8 <forward_zipmap+0x64>
 80139e8:	2200      	movs	r2, #0
 80139ea:	4610      	mov	r0, r2
 80139ec:	4295      	cmp	r5, r2
 80139ee:	f100 0001 	add.w	r0, r0, #1
 80139f2:	d034      	beq.n	8013a5e <forward_zipmap+0x10a>
 80139f4:	f816 c002 	ldrb.w	ip, [r6, r2]
 80139f8:	4284      	cmp	r4, r0
 80139fa:	f102 0201 	add.w	r2, r2, #1
 80139fe:	f103 0308 	add.w	r3, r3, #8
 8013a02:	ee07 ca90 	vmov	s15, ip
 8013a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a0a:	ee17 ca90 	vmov	ip, s15
 8013a0e:	f843 cc08 	str.w	ip, [r3, #-8]
 8013a12:	f851 cb04 	ldr.w	ip, [r1], #4
 8013a16:	f843 cc04 	str.w	ip, [r3, #-4]
 8013a1a:	d1e7      	bne.n	80139ec <forward_zipmap+0x98>
 8013a1c:	bc70      	pop	{r4, r5, r6}
 8013a1e:	4770      	bx	lr
 8013a20:	6853      	ldr	r3, [r2, #4]
 8013a22:	deff      	udf	#255	; 0xff
 8013a24:	2000      	movs	r0, #0
 8013a26:	4684      	mov	ip, r0
 8013a28:	e014      	b.n	8013a54 <forward_zipmap+0x100>
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	3001      	adds	r0, #1
 8013a2e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8013a32:	3308      	adds	r3, #8
 8013a34:	f10c 0c01 	add.w	ip, ip, #1
 8013a38:	ee07 2a90 	vmov	s15, r2
 8013a3c:	4564      	cmp	r4, ip
 8013a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a42:	ee17 2a90 	vmov	r2, s15
 8013a46:	f843 2c08 	str.w	r2, [r3, #-8]
 8013a4a:	f851 2b04 	ldr.w	r2, [r1], #4
 8013a4e:	f843 2c04 	str.w	r2, [r3, #-4]
 8013a52:	d0e3      	beq.n	8013a1c <forward_zipmap+0xc8>
 8013a54:	4285      	cmp	r5, r0
 8013a56:	d1e8      	bne.n	8013a2a <forward_zipmap+0xd6>
 8013a58:	2001      	movs	r0, #1
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	e7e7      	b.n	8013a2e <forward_zipmap+0xda>
 8013a5e:	7832      	ldrb	r2, [r6, #0]
 8013a60:	4284      	cmp	r4, r0
 8013a62:	f103 0308 	add.w	r3, r3, #8
 8013a66:	ee07 2a90 	vmov	s15, r2
 8013a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a6e:	ee17 2a90 	vmov	r2, s15
 8013a72:	f843 2c08 	str.w	r2, [r3, #-8]
 8013a76:	f851 2b04 	ldr.w	r2, [r1], #4
 8013a7a:	f843 2c04 	str.w	r2, [r3, #-4]
 8013a7e:	d0cd      	beq.n	8013a1c <forward_zipmap+0xc8>
 8013a80:	2201      	movs	r2, #1
 8013a82:	e7b3      	b.n	80139ec <forward_zipmap+0x98>
 8013a84:	698b      	ldr	r3, [r1, #24]
 8013a86:	deff      	udf	#255	; 0xff
 8013a88:	68d3      	ldr	r3, [r2, #12]
 8013a8a:	deff      	udf	#255	; 0xff
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	deff      	udf	#255	; 0xff
 8013a92:	2300      	movs	r3, #0
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	deff      	udf	#255	; 0xff

08013a98 <svc_ovo_output>:
 8013a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9c:	4604      	mov	r4, r0
 8013a9e:	b08d      	sub	sp, #52	; 0x34
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	68a6      	ldr	r6, [r4, #8]
 8013aa4:	9307      	str	r3, [sp, #28]
 8013aa6:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8013aaa:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8013aae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013ab0:	9108      	str	r1, [sp, #32]
 8013ab2:	1e71      	subs	r1, r6, #1
 8013ab4:	fb06 f301 	mul.w	r3, r6, r1
 8013ab8:	9103      	str	r1, [sp, #12]
 8013aba:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8013abe:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
 8013ac2:	2900      	cmp	r1, #0
 8013ac4:	f000 80ae 	beq.w	8013c24 <svc_ovo_output+0x18c>
 8013ac8:	2e00      	cmp	r6, #0
 8013aca:	d050      	beq.n	8013b6e <svc_ovo_output+0xd6>
 8013acc:	00b1      	lsls	r1, r6, #2
 8013ace:	46b1      	mov	r9, r6
 8013ad0:	46a0      	mov	r8, r4
 8013ad2:	9002      	str	r0, [sp, #8]
 8013ad4:	9104      	str	r1, [sp, #16]
 8013ad6:	2100      	movs	r1, #0
 8013ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8013ada:	468a      	mov	sl, r1
 8013adc:	e9cd ec00 	strd	lr, ip, [sp]
 8013ae0:	e9cd ce0a 	strd	ip, lr, [sp, #40]	; 0x28
 8013ae4:	4656      	mov	r6, sl
 8013ae6:	9d05      	ldr	r5, [sp, #20]
 8013ae8:	f10a 0a01 	add.w	sl, sl, #1
 8013aec:	9f02      	ldr	r7, [sp, #8]
 8013aee:	2400      	movs	r4, #0
 8013af0:	e9dd ec00 	ldrd	lr, ip, [sp]
 8013af4:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8013af8:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8013afc:	2b08      	cmp	r3, #8
 8013afe:	f000 809f 	beq.w	8013c40 <svc_ovo_output+0x1a8>
 8013b02:	2b10      	cmp	r3, #16
 8013b04:	bf0c      	ite	eq
 8013b06:	f832 0014 	ldrheq.w	r0, [r2, r4, lsl #1]
 8013b0a:	f852 0024 	ldrne.w	r0, [r2, r4, lsl #2]
 8013b0e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013c44 <svc_ovo_output+0x1ac>
 8013b12:	b178      	cbz	r0, 8013b34 <svc_ovo_output+0x9c>
 8013b14:	4629      	mov	r1, r5
 8013b16:	465a      	mov	r2, fp
 8013b18:	2300      	movs	r3, #0
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	ecf2 6a01 	vldmia	r2!, {s13}
 8013b20:	ecb1 7a01 	vldmia	r1!, {s14}
 8013b24:	4283      	cmp	r3, r0
 8013b26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b2a:	d1f6      	bne.n	8013b1a <svc_ovo_output+0x82>
 8013b2c:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 8013b30:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8013b34:	42a6      	cmp	r6, r4
 8013b36:	ece7 7a01 	vstmia	r7!, {s15}
 8013b3a:	f84c 4b04 	str.w	r4, [ip], #4
 8013b3e:	f104 0401 	add.w	r4, r4, #1
 8013b42:	d272      	bcs.n	8013c2a <svc_ovo_output+0x192>
 8013b44:	45a1      	cmp	r9, r4
 8013b46:	f84e 6b04 	str.w	r6, [lr], #4
 8013b4a:	d1d3      	bne.n	8013af4 <svc_ovo_output+0x5c>
 8013b4c:	9b04      	ldr	r3, [sp, #16]
 8013b4e:	9a02      	ldr	r2, [sp, #8]
 8013b50:	441a      	add	r2, r3
 8013b52:	9202      	str	r2, [sp, #8]
 8013b54:	9a01      	ldr	r2, [sp, #4]
 8013b56:	441a      	add	r2, r3
 8013b58:	9201      	str	r2, [sp, #4]
 8013b5a:	9a00      	ldr	r2, [sp, #0]
 8013b5c:	441a      	add	r2, r3
 8013b5e:	9b03      	ldr	r3, [sp, #12]
 8013b60:	4553      	cmp	r3, sl
 8013b62:	9200      	str	r2, [sp, #0]
 8013b64:	d1be      	bne.n	8013ae4 <svc_ovo_output+0x4c>
 8013b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b68:	464e      	mov	r6, r9
 8013b6a:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	; 0x28
 8013b6e:	2700      	movs	r7, #0
 8013b70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013b74:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013b78:	46b9      	mov	r9, r7
 8013b7a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013b7e:	f109 0901 	add.w	r9, r9, #1
 8013b82:	454e      	cmp	r6, r9
 8013b84:	d918      	bls.n	8013bb8 <svc_ovo_output+0x120>
 8013b86:	464c      	mov	r4, r9
 8013b88:	b19b      	cbz	r3, 8013bb2 <svc_ovo_output+0x11a>
 8013b8a:	f1ae 0104 	sub.w	r1, lr, #4
 8013b8e:	4650      	mov	r0, sl
 8013b90:	2200      	movs	r2, #0
 8013b92:	e003      	b.n	8013b9c <svc_ovo_output+0x104>
 8013b94:	3201      	adds	r2, #1
 8013b96:	3004      	adds	r0, #4
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d00a      	beq.n	8013bb2 <svc_ovo_output+0x11a>
 8013b9c:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8013ba0:	42a5      	cmp	r5, r4
 8013ba2:	d1f7      	bne.n	8013b94 <svc_ovo_output+0xfc>
 8013ba4:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
 8013ba8:	42bd      	cmp	r5, r7
 8013baa:	d1f3      	bne.n	8013b94 <svc_ovo_output+0xfc>
 8013bac:	6802      	ldr	r2, [r0, #0]
 8013bae:	f848 2b04 	str.w	r2, [r8], #4
 8013bb2:	3401      	adds	r4, #1
 8013bb4:	42a6      	cmp	r6, r4
 8013bb6:	d1e7      	bne.n	8013b88 <svc_ovo_output+0xf0>
 8013bb8:	45cb      	cmp	fp, r9
 8013bba:	f107 0701 	add.w	r7, r7, #1
 8013bbe:	d1de      	bne.n	8013b7e <svc_ovo_output+0xe6>
 8013bc0:	f04f 0800 	mov.w	r8, #0
 8013bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013bc8:	e9dd ba06 	ldrd	fp, sl, [sp, #24]
 8013bcc:	4647      	mov	r7, r8
 8013bce:	f108 0801 	add.w	r8, r8, #1
 8013bd2:	45b0      	cmp	r8, r6
 8013bd4:	d223      	bcs.n	8013c1e <svc_ovo_output+0x186>
 8013bd6:	4644      	mov	r4, r8
 8013bd8:	b1f3      	cbz	r3, 8013c18 <svc_ovo_output+0x180>
 8013bda:	f1ac 0104 	sub.w	r1, ip, #4
 8013bde:	4650      	mov	r0, sl
 8013be0:	2200      	movs	r2, #0
 8013be2:	e003      	b.n	8013bec <svc_ovo_output+0x154>
 8013be4:	3201      	adds	r2, #1
 8013be6:	3004      	adds	r0, #4
 8013be8:	4293      	cmp	r3, r2
 8013bea:	d015      	beq.n	8013c18 <svc_ovo_output+0x180>
 8013bec:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8013bf0:	42a5      	cmp	r5, r4
 8013bf2:	d1f7      	bne.n	8013be4 <svc_ovo_output+0x14c>
 8013bf4:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
 8013bf8:	42bd      	cmp	r5, r7
 8013bfa:	d1f3      	bne.n	8013be4 <svc_ovo_output+0x14c>
 8013bfc:	465a      	mov	r2, fp
 8013bfe:	ecf9 7a01 	vldmia	r9!, {s15}
 8013c02:	ed90 7a00 	vldr	s14, [r0]
 8013c06:	ecf2 6a01 	vldmia	r2!, {s13}
 8013c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c12:	edcb 7a00 	vstr	s15, [fp]
 8013c16:	4693      	mov	fp, r2
 8013c18:	3401      	adds	r4, #1
 8013c1a:	42a6      	cmp	r6, r4
 8013c1c:	d1dc      	bne.n	8013bd8 <svc_ovo_output+0x140>
 8013c1e:	9a03      	ldr	r2, [sp, #12]
 8013c20:	4542      	cmp	r2, r8
 8013c22:	d1d3      	bne.n	8013bcc <svc_ovo_output+0x134>
 8013c24:	b00d      	add	sp, #52	; 0x34
 8013c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c2a:	45a1      	cmp	r9, r4
 8013c2c:	f84e ab04 	str.w	sl, [lr], #4
 8013c30:	d08c      	beq.n	8013b4c <svc_ovo_output+0xb4>
 8013c32:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8013c36:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8013c3a:	2b08      	cmp	r3, #8
 8013c3c:	f47f af61 	bne.w	8013b02 <svc_ovo_output+0x6a>
 8013c40:	5d10      	ldrb	r0, [r2, r4]
 8013c42:	e764      	b.n	8013b0e <svc_ovo_output+0x76>
 8013c44:	00000000 	.word	0x00000000

08013c48 <svc_ovo_classification_vote>:
 8013c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c4c:	6884      	ldr	r4, [r0, #8]
 8013c4e:	4606      	mov	r6, r0
 8013c50:	4692      	mov	sl, r2
 8013c52:	b3bc      	cbz	r4, 8013cc4 <svc_ovo_classification_vote+0x7c>
 8013c54:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8013c58:	4618      	mov	r0, r3
 8013c5a:	460d      	mov	r5, r1
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	4642      	mov	r2, r8
 8013c60:	f000 fdc2 	bl	80147e8 <memset>
 8013c64:	2c01      	cmp	r4, #1
 8013c66:	4603      	mov	r3, r0
 8013c68:	d02c      	beq.n	8013cc4 <svc_ovo_classification_vote+0x7c>
 8013c6a:	4480      	add	r8, r0
 8013c6c:	f1a8 0904 	sub.w	r9, r8, #4
 8013c70:	4680      	mov	r8, r0
 8013c72:	2001      	movs	r0, #1
 8013c74:	4641      	mov	r1, r8
 8013c76:	f108 0804 	add.w	r8, r8, #4
 8013c7a:	4684      	mov	ip, r0
 8013c7c:	462a      	mov	r2, r5
 8013c7e:	46c6      	mov	lr, r8
 8013c80:	e008      	b.n	8013c94 <svc_ovo_classification_vote+0x4c>
 8013c82:	680f      	ldr	r7, [r1, #0]
 8013c84:	f10c 0c01 	add.w	ip, ip, #1
 8013c88:	f10e 0e04 	add.w	lr, lr, #4
 8013c8c:	3701      	adds	r7, #1
 8013c8e:	4564      	cmp	r4, ip
 8013c90:	600f      	str	r7, [r1, #0]
 8013c92:	d911      	bls.n	8013cb8 <svc_ovo_classification_vote+0x70>
 8013c94:	ecf2 7a01 	vldmia	r2!, {s15}
 8013c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca0:	dcef      	bgt.n	8013c82 <svc_ovo_classification_vote+0x3a>
 8013ca2:	f8de 7000 	ldr.w	r7, [lr]
 8013ca6:	f10c 0c01 	add.w	ip, ip, #1
 8013caa:	f10e 0e04 	add.w	lr, lr, #4
 8013cae:	3701      	adds	r7, #1
 8013cb0:	4564      	cmp	r4, ip
 8013cb2:	f84e 7c04 	str.w	r7, [lr, #-4]
 8013cb6:	d8ed      	bhi.n	8013c94 <svc_ovo_classification_vote+0x4c>
 8013cb8:	3001      	adds	r0, #1
 8013cba:	eba9 0101 	sub.w	r1, r9, r1
 8013cbe:	4284      	cmp	r4, r0
 8013cc0:	440d      	add	r5, r1
 8013cc2:	d1d7      	bne.n	8013c74 <svc_ovo_classification_vote+0x2c>
 8013cc4:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
 8013cc8:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013cca:	2908      	cmp	r1, #8
 8013ccc:	d041      	beq.n	8013d52 <svc_ovo_classification_vote+0x10a>
 8013cce:	2910      	cmp	r1, #16
 8013cd0:	d01f      	beq.n	8013d12 <svc_ovo_classification_vote+0xca>
 8013cd2:	edd3 7a00 	vldr	s15, [r3]
 8013cd6:	2c01      	cmp	r4, #1
 8013cd8:	6811      	ldr	r1, [r2, #0]
 8013cda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013cde:	d914      	bls.n	8013d0a <svc_ovo_classification_vote+0xc2>
 8013ce0:	1f18      	subs	r0, r3, #4
 8013ce2:	3204      	adds	r2, #4
 8013ce4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8013ce8:	edd3 7a01 	vldr	s15, [r3, #4]
 8013cec:	3304      	adds	r3, #4
 8013cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfa:	d502      	bpl.n	8013d02 <svc_ovo_classification_vote+0xba>
 8013cfc:	eeb0 7a67 	vmov.f32	s14, s15
 8013d00:	6811      	ldr	r1, [r2, #0]
 8013d02:	429c      	cmp	r4, r3
 8013d04:	f102 0204 	add.w	r2, r2, #4
 8013d08:	d1ee      	bne.n	8013ce8 <svc_ovo_classification_vote+0xa0>
 8013d0a:	f8ca 1000 	str.w	r1, [sl]
 8013d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d12:	edd3 7a00 	vldr	s15, [r3]
 8013d16:	2c01      	cmp	r4, #1
 8013d18:	8811      	ldrh	r1, [r2, #0]
 8013d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013d1e:	d9f4      	bls.n	8013d0a <svc_ovo_classification_vote+0xc2>
 8013d20:	1f18      	subs	r0, r3, #4
 8013d22:	3202      	adds	r2, #2
 8013d24:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8013d28:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d2c:	3304      	adds	r3, #4
 8013d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d3a:	dd02      	ble.n	8013d42 <svc_ovo_classification_vote+0xfa>
 8013d3c:	eeb0 7a67 	vmov.f32	s14, s15
 8013d40:	8811      	ldrh	r1, [r2, #0]
 8013d42:	42a3      	cmp	r3, r4
 8013d44:	f102 0202 	add.w	r2, r2, #2
 8013d48:	d1ee      	bne.n	8013d28 <svc_ovo_classification_vote+0xe0>
 8013d4a:	f8ca 1000 	str.w	r1, [sl]
 8013d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d52:	edd3 7a00 	vldr	s15, [r3]
 8013d56:	2c01      	cmp	r4, #1
 8013d58:	7811      	ldrb	r1, [r2, #0]
 8013d5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013d5e:	d9d4      	bls.n	8013d0a <svc_ovo_classification_vote+0xc2>
 8013d60:	1f18      	subs	r0, r3, #4
 8013d62:	3201      	adds	r2, #1
 8013d64:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8013d68:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d6c:	3304      	adds	r3, #4
 8013d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7a:	dd02      	ble.n	8013d82 <svc_ovo_classification_vote+0x13a>
 8013d7c:	eeb0 7a67 	vmov.f32	s14, s15
 8013d80:	7811      	ldrb	r1, [r2, #0]
 8013d82:	42a3      	cmp	r3, r4
 8013d84:	f102 0201 	add.w	r2, r2, #1
 8013d88:	d1ee      	bne.n	8013d68 <svc_ovo_classification_vote+0x120>
 8013d8a:	f8ca 1000 	str.w	r1, [sl]
 8013d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d92:	bf00      	nop

08013d94 <svc_iter_prob_estimate>:
 8013d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d98:	b089      	sub	sp, #36	; 0x24
 8013d9a:	6883      	ldr	r3, [r0, #8]
 8013d9c:	4615      	mov	r5, r2
 8013d9e:	fb03 f903 	mul.w	r9, r3, r3
 8013da2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013da4:	9304      	str	r3, [sp, #16]
 8013da6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8013daa:	9203      	str	r2, [sp, #12]
 8013dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013dae:	eb02 09c9 	add.w	r9, r2, r9, lsl #3
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	f000 8155 	beq.w	8014062 <svc_iter_prob_estimate+0x2ce>
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	f000 8155 	beq.w	8014068 <svc_iter_prob_estimate+0x2d4>
 8013dbe:	f103 0b01 	add.w	fp, r3, #1
 8013dc2:	3204      	adds	r2, #4
 8013dc4:	f103 3eff 	add.w	lr, r3, #4294967295
 8013dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013dcc:	ea4f 088b 	mov.w	r8, fp, lsl #2
 8013dd0:	f8cd 9008 	str.w	r9, [sp, #8]
 8013dd4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8013dd8:	f04f 0c01 	mov.w	ip, #1
 8013ddc:	f1a8 0604 	sub.w	r6, r8, #4
 8013de0:	f1a8 0a08 	sub.w	sl, r8, #8
 8013de4:	4617      	mov	r7, r2
 8013de6:	4699      	mov	r9, r3
 8013de8:	9201      	str	r2, [sp, #4]
 8013dea:	4608      	mov	r0, r1
 8013dec:	eb0a 0207 	add.w	r2, sl, r7
 8013df0:	463c      	mov	r4, r7
 8013df2:	4663      	mov	r3, ip
 8013df4:	edd0 7a00 	vldr	s15, [r0]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	ece4 7a01 	vstmia	r4!, {s15}
 8013dfe:	4599      	cmp	r9, r3
 8013e00:	ecf0 7a01 	vldmia	r0!, {s15}
 8013e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e08:	edc2 7a00 	vstr	s15, [r2]
 8013e0c:	4432      	add	r2, r6
 8013e0e:	d8f1      	bhi.n	8013df4 <svc_iter_prob_estimate+0x60>
 8013e10:	f10c 0c01 	add.w	ip, ip, #1
 8013e14:	4471      	add	r1, lr
 8013e16:	4447      	add	r7, r8
 8013e18:	f1ae 0e04 	sub.w	lr, lr, #4
 8013e1c:	45e1      	cmp	r9, ip
 8013e1e:	d1e4      	bne.n	8013dea <svc_iter_prob_estimate+0x56>
 8013e20:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013e24:	eddd 7a04 	vldr	s15, [sp, #16]
 8013e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013e30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e36:	9b03      	ldr	r3, [sp, #12]
 8013e38:	f1aa 0004 	sub.w	r0, sl, #4
 8013e3c:	f04f 0e00 	mov.w	lr, #0
 8013e40:	f8cd 9018 	str.w	r9, [sp, #24]
 8013e44:	461e      	mov	r6, r3
 8013e46:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8013e4a:	1882      	adds	r2, r0, r2
 8013e4c:	eb03 0b00 	add.w	fp, r3, r0
 8013e50:	eddf 6a88 	vldr	s13, [pc, #544]	; 8014074 <svc_iter_prob_estimate+0x2e0>
 8013e54:	9202      	str	r2, [sp, #8]
 8013e56:	461a      	mov	r2, r3
 8013e58:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8013e5c:	4677      	mov	r7, lr
 8013e5e:	3204      	adds	r2, #4
 8013e60:	46ac      	mov	ip, r5
 8013e62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013e66:	9205      	str	r2, [sp, #20]
 8013e68:	f1aa 0208 	sub.w	r2, sl, #8
 8013e6c:	9507      	str	r5, [sp, #28]
 8013e6e:	9201      	str	r2, [sp, #4]
 8013e70:	ecac 6a01 	vstmia	ip!, {s12}
 8013e74:	edc3 6a00 	vstr	s13, [r3]
 8013e78:	b34f      	cbz	r7, 8013ece <svc_iter_prob_estimate+0x13a>
 8013e7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e7c:	2f01      	cmp	r7, #1
 8013e7e:	9c03      	ldr	r4, [sp, #12]
 8013e80:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8013e84:	edd2 7a00 	vldr	s15, [r2]
 8013e88:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8013e8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013e90:	edc3 7a00 	vstr	s15, [r3]
 8013e94:	6811      	ldr	r1, [r2, #0]
 8013e96:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 8013e9a:	6011      	str	r1, [r2, #0]
 8013e9c:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8013ea0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8013ea4:	d013      	beq.n	8013ece <svc_iter_prob_estimate+0x13a>
 8013ea6:	9c02      	ldr	r4, [sp, #8]
 8013ea8:	4421      	add	r1, r4
 8013eaa:	9c05      	ldr	r4, [sp, #20]
 8013eac:	4422      	add	r2, r4
 8013eae:	465c      	mov	r4, fp
 8013eb0:	ed91 7a00 	vldr	s14, [r1]
 8013eb4:	4401      	add	r1, r0
 8013eb6:	edd3 7a00 	vldr	s15, [r3]
 8013eba:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013ebe:	edc3 7a00 	vstr	s15, [r3]
 8013ec2:	6825      	ldr	r5, [r4, #0]
 8013ec4:	4404      	add	r4, r0
 8013ec6:	f842 5b04 	str.w	r5, [r2], #4
 8013eca:	42b2      	cmp	r2, r6
 8013ecc:	d1f0      	bne.n	8013eb0 <svc_iter_prob_estimate+0x11c>
 8013ece:	3701      	adds	r7, #1
 8013ed0:	45b9      	cmp	r9, r7
 8013ed2:	d020      	beq.n	8013f16 <svc_iter_prob_estimate+0x182>
 8013ed4:	44ce      	add	lr, r9
 8013ed6:	9a01      	ldr	r2, [sp, #4]
 8013ed8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013eda:	1d34      	adds	r4, r6, #4
 8013edc:	4442      	add	r2, r8
 8013ede:	4641      	mov	r1, r8
 8013ee0:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8013ee4:	ed92 7a00 	vldr	s14, [r2]
 8013ee8:	edd3 7a00 	vldr	s15, [r3]
 8013eec:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013ef0:	edc3 7a00 	vstr	s15, [r3]
 8013ef4:	edd2 7a00 	vldr	s15, [r2]
 8013ef8:	4402      	add	r2, r0
 8013efa:	ecb1 7a01 	vldmia	r1!, {s14}
 8013efe:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013f02:	42a9      	cmp	r1, r5
 8013f04:	ece4 7a01 	vstmia	r4!, {s15}
 8013f08:	d1ec      	bne.n	8013ee4 <svc_iter_prob_estimate+0x150>
 8013f0a:	4453      	add	r3, sl
 8013f0c:	44d0      	add	r8, sl
 8013f0e:	4456      	add	r6, sl
 8013f10:	f10b 0b04 	add.w	fp, fp, #4
 8013f14:	e7ac      	b.n	8013e70 <svc_iter_prob_estimate+0xdc>
 8013f16:	e9dd 9506 	ldrd	r9, r5, [sp, #24]
 8013f1a:	eddd 7a04 	vldr	s15, [sp, #16]
 8013f1e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013f22:	9b04      	ldr	r3, [sp, #16]
 8013f24:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 8013f28:	eddf 7a53 	vldr	s15, [pc, #332]	; 8014078 <svc_iter_prob_estimate+0x2e4>
 8013f2c:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
 8013f30:	9a03      	ldr	r2, [sp, #12]
 8013f32:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8013f36:	ed9f 4a51 	vldr	s8, [pc, #324]	; 801407c <svc_iter_prob_estimate+0x2e8>
 8013f3a:	eec7 3a83 	vdiv.f32	s7, s15, s6
 8013f3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f42:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8013f46:	eddf 4a4b 	vldr	s9, [pc, #300]	; 8014074 <svc_iter_prob_estimate+0x2e0>
 8013f4a:	eb09 0783 	add.w	r7, r9, r3, lsl #2
 8013f4e:	2364      	movs	r3, #100	; 0x64
 8013f50:	00b6      	lsls	r6, r6, #2
 8013f52:	9202      	str	r2, [sp, #8]
 8013f54:	9301      	str	r3, [sp, #4]
 8013f56:	9b04      	ldr	r3, [sp, #16]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d077      	beq.n	801404c <svc_iter_prob_estimate+0x2b8>
 8013f5c:	462c      	mov	r4, r5
 8013f5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014074 <svc_iter_prob_estimate+0x2e0>
 8013f62:	4648      	mov	r0, r9
 8013f64:	9902      	ldr	r1, [sp, #8]
 8013f66:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014074 <svc_iter_prob_estimate+0x2e0>
 8013f6a:	1873      	adds	r3, r6, r1
 8013f6c:	462a      	mov	r2, r5
 8013f6e:	ece0 4a01 	vstmia	r0!, {s9}
 8013f72:	ecf3 6a01 	vldmia	r3!, {s13}
 8013f76:	ecb2 7a01 	vldmia	r2!, {s14}
 8013f7a:	428b      	cmp	r3, r1
 8013f7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013f80:	ed40 7a01 	vstr	s15, [r0, #-4]
 8013f84:	d1f5      	bne.n	8013f72 <svc_iter_prob_estimate+0x1de>
 8013f86:	ecb4 7a01 	vldmia	r4!, {s14}
 8013f8a:	eb03 0108 	add.w	r1, r3, r8
 8013f8e:	45a3      	cmp	fp, r4
 8013f90:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013f94:	d1e7      	bne.n	8013f66 <svc_iter_prob_estimate+0x1d2>
 8013f96:	464b      	mov	r3, r9
 8013f98:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014074 <svc_iter_prob_estimate+0x2e0>
 8013f9c:	ecf3 7a01 	vldmia	r3!, {s15}
 8013fa0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013fa4:	42bb      	cmp	r3, r7
 8013fa6:	eef0 7ae7 	vabs.f32	s15, s15
 8013faa:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8013fae:	d1f5      	bne.n	8013f9c <svc_iter_prob_estimate+0x208>
 8013fb0:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8013fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb8:	d445      	bmi.n	8014046 <svc_iter_prob_estimate+0x2b2>
 8013fba:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013fbe:	46ae      	mov	lr, r5
 8013fc0:	464c      	mov	r4, r9
 8013fc2:	9802      	ldr	r0, [sp, #8]
 8013fc4:	edd4 6a00 	vldr	s13, [r4]
 8013fc8:	1831      	adds	r1, r6, r0
 8013fca:	ed9c 7a00 	vldr	s14, [ip]
 8013fce:	462a      	mov	r2, r5
 8013fd0:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8013fd4:	edde 7a00 	vldr	s15, [lr]
 8013fd8:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013fdc:	464b      	mov	r3, r9
 8013fde:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8013fe2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013fe6:	ee76 6a05 	vadd.f32	s13, s12, s10
 8013fea:	ecee 7a01 	vstmia	lr!, {s15}
 8013fee:	ecf4 7a01 	vldmia	r4!, {s15}
 8013ff2:	ee66 2aa6 	vmul.f32	s5, s13, s13
 8013ff6:	ed9c 2a00 	vldr	s4, [ip]
 8013ffa:	ee85 7a26 	vdiv.f32	s14, s10, s13
 8013ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014002:	eef0 6a65 	vmov.f32	s13, s11
 8014006:	eee2 7a06 	vfma.f32	s15, s4, s12
 801400a:	eee7 6a86 	vfma.f32	s13, s15, s12
 801400e:	eec6 5aa2 	vdiv.f32	s11, s13, s5
 8014012:	ecf1 6a01 	vldmia	r1!, {s13}
 8014016:	edd3 7a00 	vldr	s15, [r3]
 801401a:	4281      	cmp	r1, r0
 801401c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014024:	ece3 7a01 	vstmia	r3!, {s15}
 8014028:	edd2 7a00 	vldr	s15, [r2]
 801402c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014030:	ece2 7a01 	vstmia	r2!, {s15}
 8014034:	d1ed      	bne.n	8014012 <svc_iter_prob_estimate+0x27e>
 8014036:	42a7      	cmp	r7, r4
 8014038:	4440      	add	r0, r8
 801403a:	44d4      	add	ip, sl
 801403c:	d1c2      	bne.n	8013fc4 <svc_iter_prob_estimate+0x230>
 801403e:	9b01      	ldr	r3, [sp, #4]
 8014040:	3b01      	subs	r3, #1
 8014042:	9301      	str	r3, [sp, #4]
 8014044:	d187      	bne.n	8013f56 <svc_iter_prob_estimate+0x1c2>
 8014046:	b009      	add	sp, #36	; 0x24
 8014048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801404c:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8014050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014054:	dcf7      	bgt.n	8014046 <svc_iter_prob_estimate+0x2b2>
 8014056:	9b01      	ldr	r3, [sp, #4]
 8014058:	3b01      	subs	r3, #1
 801405a:	9301      	str	r3, [sp, #4]
 801405c:	f47f af7b 	bne.w	8013f56 <svc_iter_prob_estimate+0x1c2>
 8014060:	e7f1      	b.n	8014046 <svc_iter_prob_estimate+0x2b2>
 8014062:	f04f 0a04 	mov.w	sl, #4
 8014066:	e758      	b.n	8013f1a <svc_iter_prob_estimate+0x186>
 8014068:	4613      	mov	r3, r2
 801406a:	f04f 0b02 	mov.w	fp, #2
 801406e:	3304      	adds	r3, #4
 8014070:	9301      	str	r3, [sp, #4]
 8014072:	e6d7      	b.n	8013e24 <svc_iter_prob_estimate+0x90>
 8014074:	00000000 	.word	0x00000000
 8014078:	3ba3d70a 	.word	0x3ba3d70a
 801407c:	34000000 	.word	0x34000000

08014080 <svc_decoder>:
 8014080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014084:	ed2d 8b06 	vpush	{d8-d10}
 8014088:	e9d3 9a01 	ldrd	r9, sl, [r3, #4]
 801408c:	b087      	sub	sp, #28
 801408e:	461d      	mov	r5, r3
 8014090:	f10a 36ff 	add.w	r6, sl, #4294967295
 8014094:	ee0a 2a10 	vmov	s20, r2
 8014098:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801409a:	4607      	mov	r7, r0
 801409c:	fb0a f606 	mul.w	r6, sl, r6
 80140a0:	7d5b      	ldrb	r3, [r3, #21]
 80140a2:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 80140a6:	7d2a      	ldrb	r2, [r5, #20]
 80140a8:	0876      	lsrs	r6, r6, #1
 80140aa:	9102      	str	r1, [sp, #8]
 80140ac:	9203      	str	r2, [sp, #12]
 80140ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80140b2:	2b03      	cmp	r3, #3
 80140b4:	f200 8146 	bhi.w	8014344 <svc_decoder+0x2c4>
 80140b8:	e8df f003 	tbb	[pc, r3]
 80140bc:	0258ab8e 	.word	0x0258ab8e
 80140c0:	edd5 8a06 	vldr	s17, [r5, #24]
 80140c4:	ed95 8a07 	vldr	s16, [r5, #28]
 80140c8:	682b      	ldr	r3, [r5, #0]
 80140ca:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80140cc:	f1b9 0f00 	cmp.w	r9, #0
 80140d0:	d024      	beq.n	801411c <svc_decoder+0x9c>
 80140d2:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80140d6:	ee09 6a10 	vmov	s18, r6
 80140da:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80140de:	461f      	mov	r7, r3
 80140e0:	465e      	mov	r6, fp
 80140e2:	4683      	mov	fp, r0
 80140e4:	2f00      	cmp	r7, #0
 80140e6:	f000 8124 	beq.w	8014332 <svc_decoder+0x2b2>
 80140ea:	eddf 7a99 	vldr	s15, [pc, #612]	; 8014350 <svc_decoder+0x2d0>
 80140ee:	465b      	mov	r3, fp
 80140f0:	eb04 0209 	add.w	r2, r4, r9
 80140f4:	ecb4 7a01 	vldmia	r4!, {s14}
 80140f8:	ecf3 6a01 	vldmia	r3!, {s13}
 80140fc:	4294      	cmp	r4, r2
 80140fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014102:	d1f7      	bne.n	80140f4 <svc_decoder+0x74>
 8014104:	eeb0 0a48 	vmov.f32	s0, s16
 8014108:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801410c:	f001 ff44 	bl	8015f98 <tanhf>
 8014110:	eca6 0a01 	vstmia	r6!, {s0}
 8014114:	45b0      	cmp	r8, r6
 8014116:	d1e5      	bne.n	80140e4 <svc_decoder+0x64>
 8014118:	ee19 6a10 	vmov	r6, s18
 801411c:	2300      	movs	r3, #0
 801411e:	ee08 3a90 	vmov	s17, r3
 8014122:	9b03      	ldr	r3, [sp, #12]
 8014124:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014126:	2b00      	cmp	r3, #0
 8014128:	f040 80b2 	bne.w	8014290 <svc_decoder+0x210>
 801412c:	9c02      	ldr	r4, [sp, #8]
 801412e:	4633      	mov	r3, r6
 8014130:	4628      	mov	r0, r5
 8014132:	4622      	mov	r2, r4
 8014134:	f7ff fcb0 	bl	8013a98 <svc_ovo_output>
 8014138:	4633      	mov	r3, r6
 801413a:	ee1a 2a10 	vmov	r2, s20
 801413e:	4621      	mov	r1, r4
 8014140:	4628      	mov	r0, r5
 8014142:	f7ff fd81 	bl	8013c48 <svc_ovo_classification_vote>
 8014146:	f1ba 0f02 	cmp.w	sl, #2
 801414a:	d108      	bne.n	801415e <svc_decoder+0xde>
 801414c:	9b02      	ldr	r3, [sp, #8]
 801414e:	edd3 7a00 	vldr	s15, [r3]
 8014152:	eeb1 7a67 	vneg.f32	s14, s15
 8014156:	edc3 7a01 	vstr	s15, [r3, #4]
 801415a:	ed83 7a00 	vstr	s14, [r3]
 801415e:	ee18 0a90 	vmov	r0, s17
 8014162:	b007      	add	sp, #28
 8014164:	ecbd 8b06 	vpop	{d8-d10}
 8014168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801416c:	ed95 8a06 	vldr	s16, [r5, #24]
 8014170:	682a      	ldr	r2, [r5, #0]
 8014172:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8014174:	f1b9 0f00 	cmp.w	r9, #0
 8014178:	d0d0      	beq.n	801411c <svc_decoder+0x9c>
 801417a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801417c:	f04f 0b00 	mov.w	fp, #0
 8014180:	0091      	lsls	r1, r2, #2
 8014182:	ee08 6a90 	vmov	s17, r6
 8014186:	9504      	str	r5, [sp, #16]
 8014188:	465e      	mov	r6, fp
 801418a:	f8cd 8014 	str.w	r8, [sp, #20]
 801418e:	468b      	mov	fp, r1
 8014190:	46a0      	mov	r8, r4
 8014192:	4605      	mov	r5, r0
 8014194:	4617      	mov	r7, r2
 8014196:	461c      	mov	r4, r3
 8014198:	2f00      	cmp	r7, #0
 801419a:	f000 80cd 	beq.w	8014338 <svc_decoder+0x2b8>
 801419e:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8014350 <svc_decoder+0x2d0>
 80141a2:	462b      	mov	r3, r5
 80141a4:	eb04 020b 	add.w	r2, r4, fp
 80141a8:	ecb4 7a01 	vldmia	r4!, {s14}
 80141ac:	ecf3 7a01 	vldmia	r3!, {s15}
 80141b0:	4294      	cmp	r4, r2
 80141b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141b6:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80141ba:	d1f5      	bne.n	80141a8 <svc_decoder+0x128>
 80141bc:	ee20 0a48 	vnmul.f32	s0, s0, s16
 80141c0:	f001 fcfe 	bl	8015bc0 <expf>
 80141c4:	3601      	adds	r6, #1
 80141c6:	eca8 0a01 	vstmia	r8!, {s0}
 80141ca:	45b1      	cmp	r9, r6
 80141cc:	d1e4      	bne.n	8014198 <svc_decoder+0x118>
 80141ce:	ee18 6a90 	vmov	r6, s17
 80141d2:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 80141d6:	e7a1      	b.n	801411c <svc_decoder+0x9c>
 80141d8:	682a      	ldr	r2, [r5, #0]
 80141da:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80141dc:	f1b9 0f00 	cmp.w	r9, #0
 80141e0:	d09c      	beq.n	801411c <svc_decoder+0x9c>
 80141e2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80141e6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80141e8:	2100      	movs	r1, #0
 80141ea:	eddf 7a59 	vldr	s15, [pc, #356]	; 8014350 <svc_decoder+0x2d0>
 80141ee:	b152      	cbz	r2, 8014206 <svc_decoder+0x186>
 80141f0:	463b      	mov	r3, r7
 80141f2:	eb04 0c0b 	add.w	ip, r4, fp
 80141f6:	ecb4 7a01 	vldmia	r4!, {s14}
 80141fa:	ecf3 6a01 	vldmia	r3!, {s13}
 80141fe:	4564      	cmp	r4, ip
 8014200:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014204:	d1f7      	bne.n	80141f6 <svc_decoder+0x176>
 8014206:	3101      	adds	r1, #1
 8014208:	ece0 7a01 	vstmia	r0!, {s15}
 801420c:	4589      	cmp	r9, r1
 801420e:	d1ec      	bne.n	80141ea <svc_decoder+0x16a>
 8014210:	e784      	b.n	801411c <svc_decoder+0x9c>
 8014212:	ed95 9a06 	vldr	s18, [r5, #24]
 8014216:	edd5 8a07 	vldr	s17, [r5, #28]
 801421a:	682a      	ldr	r2, [r5, #0]
 801421c:	6a29      	ldr	r1, [r5, #32]
 801421e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8014220:	f1b9 0f00 	cmp.w	r9, #0
 8014224:	f43f af7a 	beq.w	801411c <svc_decoder+0x9c>
 8014228:	ee07 1a90 	vmov	s15, r1
 801422c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801422e:	f04f 0b00 	mov.w	fp, #0
 8014232:	0091      	lsls	r1, r2, #2
 8014234:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8014238:	ee09 6a90 	vmov	s19, r6
 801423c:	9504      	str	r5, [sp, #16]
 801423e:	465e      	mov	r6, fp
 8014240:	f8cd 8014 	str.w	r8, [sp, #20]
 8014244:	468b      	mov	fp, r1
 8014246:	46a0      	mov	r8, r4
 8014248:	4605      	mov	r5, r0
 801424a:	4617      	mov	r7, r2
 801424c:	461c      	mov	r4, r3
 801424e:	2f00      	cmp	r7, #0
 8014250:	d075      	beq.n	801433e <svc_decoder+0x2be>
 8014252:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8014350 <svc_decoder+0x2d0>
 8014256:	462b      	mov	r3, r5
 8014258:	eb04 020b 	add.w	r2, r4, fp
 801425c:	ecb4 7a01 	vldmia	r4!, {s14}
 8014260:	ecf3 6a01 	vldmia	r3!, {s13}
 8014264:	4294      	cmp	r4, r2
 8014266:	eee6 7a87 	vfma.f32	s15, s13, s14
 801426a:	d1f7      	bne.n	801425c <svc_decoder+0x1dc>
 801426c:	eeb0 0a68 	vmov.f32	s0, s17
 8014270:	eea9 0a27 	vfma.f32	s0, s18, s15
 8014274:	3601      	adds	r6, #1
 8014276:	eef0 0a48 	vmov.f32	s1, s16
 801427a:	f001 fd2d 	bl	8015cd8 <powf>
 801427e:	eca8 0a01 	vstmia	r8!, {s0}
 8014282:	45b1      	cmp	r9, r6
 8014284:	d1e3      	bne.n	801424e <svc_decoder+0x1ce>
 8014286:	ee19 6a90 	vmov	r6, s19
 801428a:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 801428e:	e745      	b.n	801411c <svc_decoder+0x9c>
 8014290:	4633      	mov	r3, r6
 8014292:	4642      	mov	r2, r8
 8014294:	4628      	mov	r0, r5
 8014296:	f7ff fbff 	bl	8013a98 <svc_ovo_output>
 801429a:	4633      	mov	r3, r6
 801429c:	ee1a 2a10 	vmov	r2, s20
 80142a0:	4641      	mov	r1, r8
 80142a2:	4628      	mov	r0, r5
 80142a4:	f7ff fcd0 	bl	8013c48 <svc_ovo_classification_vote>
 80142a8:	68ab      	ldr	r3, [r5, #8]
 80142aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80142ae:	fb03 fb0b 	mul.w	fp, r3, fp
 80142b2:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
 80142b6:	e9d5 9a0e 	ldrd	r9, sl, [r5, #56]	; 0x38
 80142ba:	d01d      	beq.n	80142f8 <svc_decoder+0x278>
 80142bc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80142c0:	4647      	mov	r7, r8
 80142c2:	2400      	movs	r4, #0
 80142c4:	ecf7 6a01 	vldmia	r7!, {s13}
 80142c8:	ecb9 7a01 	vldmia	r9!, {s14}
 80142cc:	ecfa 7a01 	vldmia	sl!, {s15}
 80142d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80142d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80142d8:	eeb1 0a67 	vneg.f32	s0, s15
 80142dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e0:	db19      	blt.n	8014316 <svc_decoder+0x296>
 80142e2:	f001 fc6d 	bl	8015bc0 <expf>
 80142e6:	ee30 7a08 	vadd.f32	s14, s0, s16
 80142ea:	3401      	adds	r4, #1
 80142ec:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80142f0:	45a3      	cmp	fp, r4
 80142f2:	ed47 7a01 	vstr	s15, [r7, #-4]
 80142f6:	d1e5      	bne.n	80142c4 <svc_decoder+0x244>
 80142f8:	4628      	mov	r0, r5
 80142fa:	ee1a 3a10 	vmov	r3, s20
 80142fe:	9a02      	ldr	r2, [sp, #8]
 8014300:	4641      	mov	r1, r8
 8014302:	9600      	str	r6, [sp, #0]
 8014304:	f7ff fd46 	bl	8013d94 <svc_iter_prob_estimate>
 8014308:	ee18 0a90 	vmov	r0, s17
 801430c:	b007      	add	sp, #28
 801430e:	ecbd 8b06 	vpop	{d8-d10}
 8014312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014316:	eeb0 0a67 	vmov.f32	s0, s15
 801431a:	3401      	adds	r4, #1
 801431c:	f001 fc50 	bl	8015bc0 <expf>
 8014320:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014324:	45a3      	cmp	fp, r4
 8014326:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801432a:	ed47 7a01 	vstr	s15, [r7, #-4]
 801432e:	d1c9      	bne.n	80142c4 <svc_decoder+0x244>
 8014330:	e7e2      	b.n	80142f8 <svc_decoder+0x278>
 8014332:	eeb0 0a48 	vmov.f32	s0, s16
 8014336:	e6e9      	b.n	801410c <svc_decoder+0x8c>
 8014338:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801433c:	e742      	b.n	80141c4 <svc_decoder+0x144>
 801433e:	eeb0 0a68 	vmov.f32	s0, s17
 8014342:	e797      	b.n	8014274 <svc_decoder+0x1f4>
 8014344:	f06f 0301 	mvn.w	r3, #1
 8014348:	ee08 3a90 	vmov	s17, r3
 801434c:	e6e9      	b.n	8014122 <svc_decoder+0xa2>
 801434e:	bf00      	nop
 8014350:	00000000 	.word	0x00000000

08014354 <forward_svc>:
 8014354:	6981      	ldr	r1, [r0, #24]
 8014356:	880b      	ldrh	r3, [r1, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	f000 80b7 	beq.w	80144cc <forward_svc+0x178>
 801435e:	2b01      	cmp	r3, #1
 8014360:	4602      	mov	r2, r0
 8014362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014366:	684f      	ldr	r7, [r1, #4]
 8014368:	b09b      	sub	sp, #108	; 0x6c
 801436a:	bf08      	it	eq
 801436c:	2100      	moveq	r1, #0
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	bf18      	it	ne
 8014372:	f107 010c 	addne.w	r1, r7, #12
 8014376:	b100      	cbz	r0, 801437a <forward_svc+0x26>
 8014378:	6800      	ldr	r0, [r0, #0]
 801437a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 801437e:	f1ba 0f00 	cmp.w	sl, #0
 8014382:	f000 8095 	beq.w	80144b0 <forward_svc+0x15c>
 8014386:	e9da 8a00 	ldrd	r8, sl, [sl]
 801438a:	2b02      	cmp	r3, #2
 801438c:	f240 809b 	bls.w	80144c6 <forward_svc+0x172>
 8014390:	69f9      	ldr	r1, [r7, #28]
 8014392:	2900      	cmp	r1, #0
 8014394:	f000 808e 	beq.w	80144b4 <forward_svc+0x160>
 8014398:	690d      	ldr	r5, [r1, #16]
 801439a:	e9d1 6900 	ldrd	r6, r9, [r1]
 801439e:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
 80143a2:	2b03      	cmp	r3, #3
 80143a4:	f000 808c 	beq.w	80144c0 <forward_svc+0x16c>
 80143a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	f000 8090 	beq.w	80144d0 <forward_svc+0x17c>
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	699b      	ldr	r3, [r3, #24]
 80143b4:	689b      	ldr	r3, [r3, #8]
 80143b6:	9307      	str	r3, [sp, #28]
 80143b8:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 80143bc:	b119      	cbz	r1, 80143c6 <forward_svc+0x72>
 80143be:	b113      	cbz	r3, 80143c6 <forward_svc+0x72>
 80143c0:	e9d1 c705 	ldrd	ip, r7, [r1, #20]
 80143c4:	e001      	b.n	80143ca <forward_svc+0x76>
 80143c6:	2700      	movs	r7, #0
 80143c8:	46bc      	mov	ip, r7
 80143ca:	69b6      	ldr	r6, [r6, #24]
 80143cc:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80143d0:	68b6      	ldr	r6, [r6, #8]
 80143d2:	f8da 1018 	ldr.w	r1, [sl, #24]
 80143d6:	9604      	str	r6, [sp, #16]
 80143d8:	f8d8 a008 	ldr.w	sl, [r8, #8]
 80143dc:	68c6      	ldr	r6, [r0, #12]
 80143de:	f8d9 800c 	ldr.w	r8, [r9, #12]
 80143e2:	6876      	ldr	r6, [r6, #4]
 80143e4:	f8d9 9018 	ldr.w	r9, [r9, #24]
 80143e8:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80143ec:	edd1 7a02 	vldr	s15, [r1, #8]
 80143f0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80143f4:	69ad      	ldr	r5, [r5, #24]
 80143f6:	9105      	str	r1, [sp, #20]
 80143f8:	6980      	ldr	r0, [r0, #24]
 80143fa:	fbb8 f9f6 	udiv	r9, r8, r6
 80143fe:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8014402:	69a4      	ldr	r4, [r4, #24]
 8014404:	f8d8 b00c 	ldr.w	fp, [r8, #12]
 8014408:	f8de 800c 	ldr.w	r8, [lr, #12]
 801440c:	f8de e018 	ldr.w	lr, [lr, #24]
 8014410:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8014414:	6880      	ldr	r0, [r0, #8]
 8014416:	9103      	str	r1, [sp, #12]
 8014418:	f8de 1008 	ldr.w	r1, [lr, #8]
 801441c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8014420:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8014424:	9106      	str	r1, [sp, #24]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d03f      	beq.n	80144aa <forward_svc+0x156>
 801442a:	f8dc c018 	ldr.w	ip, [ip, #24]
 801442e:	69bf      	ldr	r7, [r7, #24]
 8014430:	f8dc c008 	ldr.w	ip, [ip, #8]
 8014434:	68bf      	ldr	r7, [r7, #8]
 8014436:	6824      	ldr	r4, [r4, #0]
 8014438:	9907      	ldr	r1, [sp, #28]
 801443a:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 801443e:	682d      	ldr	r5, [r5, #0]
 8014440:	9100      	str	r1, [sp, #0]
 8014442:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
 8014446:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 801444a:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 801444e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8014452:	9b04      	ldr	r3, [sp, #16]
 8014454:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
 8014458:	69d4      	ldr	r4, [r2, #28]
 801445a:	9313      	str	r3, [sp, #76]	; 0x4c
 801445c:	9b05      	ldr	r3, [sp, #20]
 801445e:	940f      	str	r4, [sp, #60]	; 0x3c
 8014460:	6a14      	ldr	r4, [r2, #32]
 8014462:	9903      	ldr	r1, [sp, #12]
 8014464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014466:	9314      	str	r3, [sp, #80]	; 0x50
 8014468:	9b06      	ldr	r3, [sp, #24]
 801446a:	9410      	str	r4, [sp, #64]	; 0x40
 801446c:	2400      	movs	r4, #0
 801446e:	910d      	str	r1, [sp, #52]	; 0x34
 8014470:	ee17 1a90 	vmov	r1, s15
 8014474:	9315      	str	r3, [sp, #84]	; 0x54
 8014476:	ab09      	add	r3, sp, #36	; 0x24
 8014478:	9211      	str	r2, [sp, #68]	; 0x44
 801447a:	aa08      	add	r2, sp, #32
 801447c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014480:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8014484:	9718      	str	r7, [sp, #96]	; 0x60
 8014486:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
 801448a:	9408      	str	r4, [sp, #32]
 801448c:	e9cd 6909 	strd	r6, r9, [sp, #36]	; 0x24
 8014490:	e9cd ec16 	strd	lr, ip, [sp, #88]	; 0x58
 8014494:	f7ff fdf4 	bl	8014080 <svc_decoder>
 8014498:	eddd 7a08 	vldr	s15, [sp, #32]
 801449c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144a0:	edca 7a00 	vstr	s15, [sl]
 80144a4:	b01b      	add	sp, #108	; 0x6c
 80144a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144aa:	461f      	mov	r7, r3
 80144ac:	469c      	mov	ip, r3
 80144ae:	e7c2      	b.n	8014436 <forward_svc+0xe2>
 80144b0:	46d0      	mov	r8, sl
 80144b2:	e76a      	b.n	801438a <forward_svc+0x36>
 80144b4:	460c      	mov	r4, r1
 80144b6:	468e      	mov	lr, r1
 80144b8:	4689      	mov	r9, r1
 80144ba:	460e      	mov	r6, r1
 80144bc:	460d      	mov	r5, r1
 80144be:	e770      	b.n	80143a2 <forward_svc+0x4e>
 80144c0:	2300      	movs	r3, #0
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	deff      	udf	#255	; 0xff
 80144c6:	2300      	movs	r3, #0
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	deff      	udf	#255	; 0xff
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	deff      	udf	#255	; 0xff
 80144d0:	699b      	ldr	r3, [r3, #24]
 80144d2:	deff      	udf	#255	; 0xff

080144d4 <ai_check_custom_types>:
 80144d4:	b082      	sub	sp, #8
 80144d6:	4b12      	ldr	r3, [pc, #72]	; (8014520 <ai_check_custom_types+0x4c>)
 80144d8:	9301      	str	r3, [sp, #4]
 80144da:	b118      	cbz	r0, 80144e4 <ai_check_custom_types+0x10>
 80144dc:	7803      	ldrb	r3, [r0, #0]
 80144de:	2b03      	cmp	r3, #3
 80144e0:	d002      	beq.n	80144e8 <ai_check_custom_types+0x14>
 80144e2:	2000      	movs	r0, #0
 80144e4:	b002      	add	sp, #8
 80144e6:	4770      	bx	lr
 80144e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d004      	beq.n	80144fa <ai_check_custom_types+0x26>
 80144f0:	2001      	movs	r0, #1
 80144f2:	f080 0001 	eor.w	r0, r0, #1
 80144f6:	b002      	add	sp, #8
 80144f8:	4770      	bx	lr
 80144fa:	7842      	ldrb	r2, [r0, #1]
 80144fc:	3001      	adds	r0, #1
 80144fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014502:	429a      	cmp	r2, r3
 8014504:	d1f4      	bne.n	80144f0 <ai_check_custom_types+0x1c>
 8014506:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801450a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801450e:	429a      	cmp	r2, r3
 8014510:	d1ee      	bne.n	80144f0 <ai_check_custom_types+0x1c>
 8014512:	7842      	ldrb	r2, [r0, #1]
 8014514:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014518:	429a      	cmp	r2, r3
 801451a:	d1e9      	bne.n	80144f0 <ai_check_custom_types+0x1c>
 801451c:	2000      	movs	r0, #0
 801451e:	e7e8      	b.n	80144f2 <ai_check_custom_types+0x1e>
 8014520:	84048403 	.word	0x84048403

08014524 <ai_layers_init_all>:
 8014524:	2100      	movs	r1, #0
 8014526:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014528:	b13b      	cbz	r3, 801453a <ai_layers_init_all+0x16>
 801452a:	691a      	ldr	r2, [r3, #16]
 801452c:	3101      	adds	r1, #1
 801452e:	60d8      	str	r0, [r3, #12]
 8014530:	429a      	cmp	r2, r3
 8014532:	4613      	mov	r3, r2
 8014534:	d001      	beq.n	801453a <ai_layers_init_all+0x16>
 8014536:	2a00      	cmp	r2, #0
 8014538:	d1f6      	bne.n	8014528 <ai_layers_init_all+0x4>
 801453a:	4608      	mov	r0, r1
 801453c:	4770      	bx	lr
 801453e:	bf00      	nop

08014540 <ai_layers_post_init_all>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	2500      	movs	r5, #0
 8014544:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8014546:	b16c      	cbz	r4, 8014564 <ai_layers_post_init_all+0x24>
 8014548:	6863      	ldr	r3, [r4, #4]
 801454a:	07db      	lsls	r3, r3, #31
 801454c:	d504      	bpl.n	8014558 <ai_layers_post_init_all+0x18>
 801454e:	6a23      	ldr	r3, [r4, #32]
 8014550:	4620      	mov	r0, r4
 8014552:	b10b      	cbz	r3, 8014558 <ai_layers_post_init_all+0x18>
 8014554:	3501      	adds	r5, #1
 8014556:	4798      	blx	r3
 8014558:	6923      	ldr	r3, [r4, #16]
 801455a:	42a3      	cmp	r3, r4
 801455c:	461c      	mov	r4, r3
 801455e:	d001      	beq.n	8014564 <ai_layers_post_init_all+0x24>
 8014560:	2b00      	cmp	r3, #0
 8014562:	d1f0      	bne.n	8014546 <ai_layers_post_init_all+0x6>
 8014564:	4628      	mov	r0, r5
 8014566:	bd38      	pop	{r3, r4, r5, pc}

08014568 <ai_layers_forward_all>:
 8014568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801456c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8014570:	4604      	mov	r4, r0
 8014572:	f1b8 0f00 	cmp.w	r8, #0
 8014576:	d02a      	beq.n	80145ce <ai_layers_forward_all+0x66>
 8014578:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801457a:	6381      	str	r1, [r0, #56]	; 0x38
 801457c:	b319      	cbz	r1, 80145c6 <ai_layers_forward_all+0x5e>
 801457e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014580:	2001      	movs	r0, #1
 8014582:	47c0      	blx	r8
 8014584:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014586:	b1f6      	cbz	r6, 80145c6 <ai_layers_forward_all+0x5e>
 8014588:	2700      	movs	r7, #0
 801458a:	4631      	mov	r1, r6
 801458c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801458e:	2002      	movs	r0, #2
 8014590:	47c0      	blx	r8
 8014592:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8014594:	4628      	mov	r0, r5
 8014596:	696b      	ldr	r3, [r5, #20]
 8014598:	4798      	blx	r3
 801459a:	692e      	ldr	r6, [r5, #16]
 801459c:	2003      	movs	r0, #3
 801459e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80145a0:	42b5      	cmp	r5, r6
 80145a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80145a4:	d007      	beq.n	80145b6 <ai_layers_forward_all+0x4e>
 80145a6:	47c0      	blx	r8
 80145a8:	3701      	adds	r7, #1
 80145aa:	63a6      	str	r6, [r4, #56]	; 0x38
 80145ac:	2e00      	cmp	r6, #0
 80145ae:	d1ec      	bne.n	801458a <ai_layers_forward_all+0x22>
 80145b0:	4638      	mov	r0, r7
 80145b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b6:	2003      	movs	r0, #3
 80145b8:	3701      	adds	r7, #1
 80145ba:	47c0      	blx	r8
 80145bc:	2300      	movs	r3, #0
 80145be:	4638      	mov	r0, r7
 80145c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80145c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145c6:	2700      	movs	r7, #0
 80145c8:	4638      	mov	r0, r7
 80145ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ce:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80145d0:	6385      	str	r5, [r0, #56]	; 0x38
 80145d2:	2d00      	cmp	r5, #0
 80145d4:	d0f7      	beq.n	80145c6 <ai_layers_forward_all+0x5e>
 80145d6:	4647      	mov	r7, r8
 80145d8:	696b      	ldr	r3, [r5, #20]
 80145da:	4628      	mov	r0, r5
 80145dc:	4798      	blx	r3
 80145de:	462b      	mov	r3, r5
 80145e0:	692d      	ldr	r5, [r5, #16]
 80145e2:	429d      	cmp	r5, r3
 80145e4:	d004      	beq.n	80145f0 <ai_layers_forward_all+0x88>
 80145e6:	3701      	adds	r7, #1
 80145e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80145ea:	2d00      	cmp	r5, #0
 80145ec:	d1f4      	bne.n	80145d8 <ai_layers_forward_all+0x70>
 80145ee:	e7df      	b.n	80145b0 <ai_layers_forward_all+0x48>
 80145f0:	2300      	movs	r3, #0
 80145f2:	3701      	adds	r7, #1
 80145f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80145f6:	e7db      	b.n	80145b0 <ai_layers_forward_all+0x48>

080145f8 <ai_version_get>:
 80145f8:	0212      	lsls	r2, r2, #8
 80145fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80145fe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8014602:	4770      	bx	lr

08014604 <get_tensor_byte_size>:
 8014604:	b430      	push	{r4, r5}
 8014606:	6985      	ldr	r5, [r0, #24]
 8014608:	68c4      	ldr	r4, [r0, #12]
 801460a:	6941      	ldr	r1, [r0, #20]
 801460c:	4b06      	ldr	r3, [pc, #24]	; (8014628 <get_tensor_byte_size+0x24>)
 801460e:	6828      	ldr	r0, [r5, #0]
 8014610:	4a06      	ldr	r2, [pc, #24]	; (801462c <get_tensor_byte_size+0x28>)
 8014612:	4003      	ands	r3, r0
 8014614:	68c9      	ldr	r1, [r1, #12]
 8014616:	68e0      	ldr	r0, [r4, #12]
 8014618:	4293      	cmp	r3, r2
 801461a:	fb01 f000 	mul.w	r0, r1, r0
 801461e:	d101      	bne.n	8014624 <get_tensor_byte_size+0x20>
 8014620:	3007      	adds	r0, #7
 8014622:	08c0      	lsrs	r0, r0, #3
 8014624:	bc30      	pop	{r4, r5}
 8014626:	4770      	bx	lr
 8014628:	017fffff 	.word	0x017fffff
 801462c:	000400c0 	.word	0x000400c0

08014630 <ai_array_to_buffer_fmt>:
 8014630:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8014634:	2b02      	cmp	r3, #2
 8014636:	d050      	beq.n	80146da <ai_array_to_buffer_fmt+0xaa>
 8014638:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801463c:	4b29      	ldr	r3, [pc, #164]	; (80146e4 <ai_array_to_buffer_fmt+0xb4>)
 801463e:	429a      	cmp	r2, r3
 8014640:	d00b      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 8014642:	dc1c      	bgt.n	801467e <ai_array_to_buffer_fmt+0x4e>
 8014644:	4b28      	ldr	r3, [pc, #160]	; (80146e8 <ai_array_to_buffer_fmt+0xb8>)
 8014646:	429a      	cmp	r2, r3
 8014648:	d007      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 801464a:	dd0b      	ble.n	8014664 <ai_array_to_buffer_fmt+0x34>
 801464c:	4b27      	ldr	r3, [pc, #156]	; (80146ec <ai_array_to_buffer_fmt+0xbc>)
 801464e:	429a      	cmp	r2, r3
 8014650:	d003      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 8014652:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8014656:	429a      	cmp	r2, r3
 8014658:	d131      	bne.n	80146be <ai_array_to_buffer_fmt+0x8e>
 801465a:	4613      	mov	r3, r2
 801465c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8014660:	4318      	orrs	r0, r3
 8014662:	4770      	bx	lr
 8014664:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014668:	429a      	cmp	r2, r3
 801466a:	d0f6      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 801466c:	dd2c      	ble.n	80146c8 <ai_array_to_buffer_fmt+0x98>
 801466e:	4b20      	ldr	r3, [pc, #128]	; (80146f0 <ai_array_to_buffer_fmt+0xc0>)
 8014670:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8014674:	429a      	cmp	r2, r3
 8014676:	bf18      	it	ne
 8014678:	2340      	movne	r3, #64	; 0x40
 801467a:	4318      	orrs	r0, r3
 801467c:	4770      	bx	lr
 801467e:	4b1d      	ldr	r3, [pc, #116]	; (80146f4 <ai_array_to_buffer_fmt+0xc4>)
 8014680:	429a      	cmp	r2, r3
 8014682:	d0ea      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 8014684:	dd0e      	ble.n	80146a4 <ai_array_to_buffer_fmt+0x74>
 8014686:	4b1c      	ldr	r3, [pc, #112]	; (80146f8 <ai_array_to_buffer_fmt+0xc8>)
 8014688:	429a      	cmp	r2, r3
 801468a:	d0e6      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 801468c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8014690:	429a      	cmp	r2, r3
 8014692:	d0e2      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 8014694:	4b19      	ldr	r3, [pc, #100]	; (80146fc <ai_array_to_buffer_fmt+0xcc>)
 8014696:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801469a:	429a      	cmp	r2, r3
 801469c:	bf18      	it	ne
 801469e:	2340      	movne	r3, #64	; 0x40
 80146a0:	4318      	orrs	r0, r3
 80146a2:	4770      	bx	lr
 80146a4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d0d6      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 80146ac:	3307      	adds	r3, #7
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d0d3      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 80146b2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80146b6:	429a      	cmp	r2, r3
 80146b8:	bf18      	it	ne
 80146ba:	2340      	movne	r3, #64	; 0x40
 80146bc:	e7ce      	b.n	801465c <ai_array_to_buffer_fmt+0x2c>
 80146be:	4b10      	ldr	r3, [pc, #64]	; (8014700 <ai_array_to_buffer_fmt+0xd0>)
 80146c0:	429a      	cmp	r2, r3
 80146c2:	bf18      	it	ne
 80146c4:	2340      	movne	r3, #64	; 0x40
 80146c6:	e7c9      	b.n	801465c <ai_array_to_buffer_fmt+0x2c>
 80146c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d0c4      	beq.n	801465a <ai_array_to_buffer_fmt+0x2a>
 80146d0:	3380      	adds	r3, #128	; 0x80
 80146d2:	429a      	cmp	r2, r3
 80146d4:	bf18      	it	ne
 80146d6:	2340      	movne	r3, #64	; 0x40
 80146d8:	e7c0      	b.n	801465c <ai_array_to_buffer_fmt+0x2c>
 80146da:	4b0a      	ldr	r3, [pc, #40]	; (8014704 <ai_array_to_buffer_fmt+0xd4>)
 80146dc:	4003      	ands	r3, r0
 80146de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80146e2:	e7bb      	b.n	801465c <ai_array_to_buffer_fmt+0x2c>
 80146e4:	00840040 	.word	0x00840040
 80146e8:	00040840 	.word	0x00040840
 80146ec:	00041040 	.word	0x00041040
 80146f0:	00040447 	.word	0x00040447
 80146f4:	00840840 	.word	0x00840840
 80146f8:	00841040 	.word	0x00841040
 80146fc:	0084084f 	.word	0x0084084f
 8014700:	0004084f 	.word	0x0004084f
 8014704:	00803fff 	.word	0x00803fff

08014708 <ai_array_get_byte_size>:
 8014708:	b319      	cbz	r1, 8014752 <ai_array_get_byte_size+0x4a>
 801470a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801470e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8014712:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8014716:	11c0      	asrs	r0, r0, #7
 8014718:	fb03 f101 	mul.w	r1, r3, r1
 801471c:	2a04      	cmp	r2, #4
 801471e:	f101 0107 	add.w	r1, r1, #7
 8014722:	f021 0107 	bic.w	r1, r1, #7
 8014726:	fa21 f10c 	lsr.w	r1, r1, ip
 801472a:	d00b      	beq.n	8014744 <ai_array_get_byte_size+0x3c>
 801472c:	2a08      	cmp	r2, #8
 801472e:	d002      	beq.n	8014736 <ai_array_get_byte_size+0x2e>
 8014730:	3107      	adds	r1, #7
 8014732:	08c8      	lsrs	r0, r1, #3
 8014734:	4770      	bx	lr
 8014736:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801473a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801473e:	3107      	adds	r1, #7
 8014740:	08c8      	lsrs	r0, r1, #3
 8014742:	4770      	bx	lr
 8014744:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014748:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801474c:	3107      	adds	r1, #7
 801474e:	08c8      	lsrs	r0, r1, #3
 8014750:	4770      	bx	lr
 8014752:	4608      	mov	r0, r1
 8014754:	4770      	bx	lr
 8014756:	bf00      	nop

08014758 <ai_array_get_data_byte_size>:
 8014758:	b161      	cbz	r1, 8014774 <ai_array_get_data_byte_size+0x1c>
 801475a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801475e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8014762:	fb03 f101 	mul.w	r1, r3, r1
 8014766:	1dc8      	adds	r0, r1, #7
 8014768:	f020 0007 	bic.w	r0, r0, #7
 801476c:	40d0      	lsrs	r0, r2
 801476e:	3007      	adds	r0, #7
 8014770:	08c0      	lsrs	r0, r0, #3
 8014772:	4770      	bx	lr
 8014774:	4608      	mov	r0, r1
 8014776:	4770      	bx	lr

08014778 <__errno>:
 8014778:	4b01      	ldr	r3, [pc, #4]	; (8014780 <__errno+0x8>)
 801477a:	6818      	ldr	r0, [r3, #0]
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	24000a88 	.word	0x24000a88

08014784 <__libc_init_array>:
 8014784:	b570      	push	{r4, r5, r6, lr}
 8014786:	4d0d      	ldr	r5, [pc, #52]	; (80147bc <__libc_init_array+0x38>)
 8014788:	4c0d      	ldr	r4, [pc, #52]	; (80147c0 <__libc_init_array+0x3c>)
 801478a:	1b64      	subs	r4, r4, r5
 801478c:	10a4      	asrs	r4, r4, #2
 801478e:	2600      	movs	r6, #0
 8014790:	42a6      	cmp	r6, r4
 8014792:	d109      	bne.n	80147a8 <__libc_init_array+0x24>
 8014794:	4d0b      	ldr	r5, [pc, #44]	; (80147c4 <__libc_init_array+0x40>)
 8014796:	4c0c      	ldr	r4, [pc, #48]	; (80147c8 <__libc_init_array+0x44>)
 8014798:	f001 fdea 	bl	8016370 <_init>
 801479c:	1b64      	subs	r4, r4, r5
 801479e:	10a4      	asrs	r4, r4, #2
 80147a0:	2600      	movs	r6, #0
 80147a2:	42a6      	cmp	r6, r4
 80147a4:	d105      	bne.n	80147b2 <__libc_init_array+0x2e>
 80147a6:	bd70      	pop	{r4, r5, r6, pc}
 80147a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80147ac:	4798      	blx	r3
 80147ae:	3601      	adds	r6, #1
 80147b0:	e7ee      	b.n	8014790 <__libc_init_array+0xc>
 80147b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80147b6:	4798      	blx	r3
 80147b8:	3601      	adds	r6, #1
 80147ba:	e7f2      	b.n	80147a2 <__libc_init_array+0x1e>
 80147bc:	08016840 	.word	0x08016840
 80147c0:	08016840 	.word	0x08016840
 80147c4:	08016840 	.word	0x08016840
 80147c8:	08016844 	.word	0x08016844

080147cc <memcpy>:
 80147cc:	440a      	add	r2, r1
 80147ce:	4291      	cmp	r1, r2
 80147d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80147d4:	d100      	bne.n	80147d8 <memcpy+0xc>
 80147d6:	4770      	bx	lr
 80147d8:	b510      	push	{r4, lr}
 80147da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147e2:	4291      	cmp	r1, r2
 80147e4:	d1f9      	bne.n	80147da <memcpy+0xe>
 80147e6:	bd10      	pop	{r4, pc}

080147e8 <memset>:
 80147e8:	4402      	add	r2, r0
 80147ea:	4603      	mov	r3, r0
 80147ec:	4293      	cmp	r3, r2
 80147ee:	d100      	bne.n	80147f2 <memset+0xa>
 80147f0:	4770      	bx	lr
 80147f2:	f803 1b01 	strb.w	r1, [r3], #1
 80147f6:	e7f9      	b.n	80147ec <memset+0x4>

080147f8 <_free_r>:
 80147f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147fa:	2900      	cmp	r1, #0
 80147fc:	d044      	beq.n	8014888 <_free_r+0x90>
 80147fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014802:	9001      	str	r0, [sp, #4]
 8014804:	2b00      	cmp	r3, #0
 8014806:	f1a1 0404 	sub.w	r4, r1, #4
 801480a:	bfb8      	it	lt
 801480c:	18e4      	addlt	r4, r4, r3
 801480e:	f000 fc85 	bl	801511c <__malloc_lock>
 8014812:	4a1e      	ldr	r2, [pc, #120]	; (801488c <_free_r+0x94>)
 8014814:	9801      	ldr	r0, [sp, #4]
 8014816:	6813      	ldr	r3, [r2, #0]
 8014818:	b933      	cbnz	r3, 8014828 <_free_r+0x30>
 801481a:	6063      	str	r3, [r4, #4]
 801481c:	6014      	str	r4, [r2, #0]
 801481e:	b003      	add	sp, #12
 8014820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014824:	f000 bc80 	b.w	8015128 <__malloc_unlock>
 8014828:	42a3      	cmp	r3, r4
 801482a:	d908      	bls.n	801483e <_free_r+0x46>
 801482c:	6825      	ldr	r5, [r4, #0]
 801482e:	1961      	adds	r1, r4, r5
 8014830:	428b      	cmp	r3, r1
 8014832:	bf01      	itttt	eq
 8014834:	6819      	ldreq	r1, [r3, #0]
 8014836:	685b      	ldreq	r3, [r3, #4]
 8014838:	1949      	addeq	r1, r1, r5
 801483a:	6021      	streq	r1, [r4, #0]
 801483c:	e7ed      	b.n	801481a <_free_r+0x22>
 801483e:	461a      	mov	r2, r3
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	b10b      	cbz	r3, 8014848 <_free_r+0x50>
 8014844:	42a3      	cmp	r3, r4
 8014846:	d9fa      	bls.n	801483e <_free_r+0x46>
 8014848:	6811      	ldr	r1, [r2, #0]
 801484a:	1855      	adds	r5, r2, r1
 801484c:	42a5      	cmp	r5, r4
 801484e:	d10b      	bne.n	8014868 <_free_r+0x70>
 8014850:	6824      	ldr	r4, [r4, #0]
 8014852:	4421      	add	r1, r4
 8014854:	1854      	adds	r4, r2, r1
 8014856:	42a3      	cmp	r3, r4
 8014858:	6011      	str	r1, [r2, #0]
 801485a:	d1e0      	bne.n	801481e <_free_r+0x26>
 801485c:	681c      	ldr	r4, [r3, #0]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	6053      	str	r3, [r2, #4]
 8014862:	4421      	add	r1, r4
 8014864:	6011      	str	r1, [r2, #0]
 8014866:	e7da      	b.n	801481e <_free_r+0x26>
 8014868:	d902      	bls.n	8014870 <_free_r+0x78>
 801486a:	230c      	movs	r3, #12
 801486c:	6003      	str	r3, [r0, #0]
 801486e:	e7d6      	b.n	801481e <_free_r+0x26>
 8014870:	6825      	ldr	r5, [r4, #0]
 8014872:	1961      	adds	r1, r4, r5
 8014874:	428b      	cmp	r3, r1
 8014876:	bf04      	itt	eq
 8014878:	6819      	ldreq	r1, [r3, #0]
 801487a:	685b      	ldreq	r3, [r3, #4]
 801487c:	6063      	str	r3, [r4, #4]
 801487e:	bf04      	itt	eq
 8014880:	1949      	addeq	r1, r1, r5
 8014882:	6021      	streq	r1, [r4, #0]
 8014884:	6054      	str	r4, [r2, #4]
 8014886:	e7ca      	b.n	801481e <_free_r+0x26>
 8014888:	b003      	add	sp, #12
 801488a:	bd30      	pop	{r4, r5, pc}
 801488c:	24002cc4 	.word	0x24002cc4

08014890 <sbrk_aligned>:
 8014890:	b570      	push	{r4, r5, r6, lr}
 8014892:	4e0e      	ldr	r6, [pc, #56]	; (80148cc <sbrk_aligned+0x3c>)
 8014894:	460c      	mov	r4, r1
 8014896:	6831      	ldr	r1, [r6, #0]
 8014898:	4605      	mov	r5, r0
 801489a:	b911      	cbnz	r1, 80148a2 <sbrk_aligned+0x12>
 801489c:	f000 f91a 	bl	8014ad4 <_sbrk_r>
 80148a0:	6030      	str	r0, [r6, #0]
 80148a2:	4621      	mov	r1, r4
 80148a4:	4628      	mov	r0, r5
 80148a6:	f000 f915 	bl	8014ad4 <_sbrk_r>
 80148aa:	1c43      	adds	r3, r0, #1
 80148ac:	d00a      	beq.n	80148c4 <sbrk_aligned+0x34>
 80148ae:	1cc4      	adds	r4, r0, #3
 80148b0:	f024 0403 	bic.w	r4, r4, #3
 80148b4:	42a0      	cmp	r0, r4
 80148b6:	d007      	beq.n	80148c8 <sbrk_aligned+0x38>
 80148b8:	1a21      	subs	r1, r4, r0
 80148ba:	4628      	mov	r0, r5
 80148bc:	f000 f90a 	bl	8014ad4 <_sbrk_r>
 80148c0:	3001      	adds	r0, #1
 80148c2:	d101      	bne.n	80148c8 <sbrk_aligned+0x38>
 80148c4:	f04f 34ff 	mov.w	r4, #4294967295
 80148c8:	4620      	mov	r0, r4
 80148ca:	bd70      	pop	{r4, r5, r6, pc}
 80148cc:	24002cc8 	.word	0x24002cc8

080148d0 <_malloc_r>:
 80148d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d4:	1ccd      	adds	r5, r1, #3
 80148d6:	f025 0503 	bic.w	r5, r5, #3
 80148da:	3508      	adds	r5, #8
 80148dc:	2d0c      	cmp	r5, #12
 80148de:	bf38      	it	cc
 80148e0:	250c      	movcc	r5, #12
 80148e2:	2d00      	cmp	r5, #0
 80148e4:	4607      	mov	r7, r0
 80148e6:	db01      	blt.n	80148ec <_malloc_r+0x1c>
 80148e8:	42a9      	cmp	r1, r5
 80148ea:	d905      	bls.n	80148f8 <_malloc_r+0x28>
 80148ec:	230c      	movs	r3, #12
 80148ee:	603b      	str	r3, [r7, #0]
 80148f0:	2600      	movs	r6, #0
 80148f2:	4630      	mov	r0, r6
 80148f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f8:	4e2e      	ldr	r6, [pc, #184]	; (80149b4 <_malloc_r+0xe4>)
 80148fa:	f000 fc0f 	bl	801511c <__malloc_lock>
 80148fe:	6833      	ldr	r3, [r6, #0]
 8014900:	461c      	mov	r4, r3
 8014902:	bb34      	cbnz	r4, 8014952 <_malloc_r+0x82>
 8014904:	4629      	mov	r1, r5
 8014906:	4638      	mov	r0, r7
 8014908:	f7ff ffc2 	bl	8014890 <sbrk_aligned>
 801490c:	1c43      	adds	r3, r0, #1
 801490e:	4604      	mov	r4, r0
 8014910:	d14d      	bne.n	80149ae <_malloc_r+0xde>
 8014912:	6834      	ldr	r4, [r6, #0]
 8014914:	4626      	mov	r6, r4
 8014916:	2e00      	cmp	r6, #0
 8014918:	d140      	bne.n	801499c <_malloc_r+0xcc>
 801491a:	6823      	ldr	r3, [r4, #0]
 801491c:	4631      	mov	r1, r6
 801491e:	4638      	mov	r0, r7
 8014920:	eb04 0803 	add.w	r8, r4, r3
 8014924:	f000 f8d6 	bl	8014ad4 <_sbrk_r>
 8014928:	4580      	cmp	r8, r0
 801492a:	d13a      	bne.n	80149a2 <_malloc_r+0xd2>
 801492c:	6821      	ldr	r1, [r4, #0]
 801492e:	3503      	adds	r5, #3
 8014930:	1a6d      	subs	r5, r5, r1
 8014932:	f025 0503 	bic.w	r5, r5, #3
 8014936:	3508      	adds	r5, #8
 8014938:	2d0c      	cmp	r5, #12
 801493a:	bf38      	it	cc
 801493c:	250c      	movcc	r5, #12
 801493e:	4629      	mov	r1, r5
 8014940:	4638      	mov	r0, r7
 8014942:	f7ff ffa5 	bl	8014890 <sbrk_aligned>
 8014946:	3001      	adds	r0, #1
 8014948:	d02b      	beq.n	80149a2 <_malloc_r+0xd2>
 801494a:	6823      	ldr	r3, [r4, #0]
 801494c:	442b      	add	r3, r5
 801494e:	6023      	str	r3, [r4, #0]
 8014950:	e00e      	b.n	8014970 <_malloc_r+0xa0>
 8014952:	6822      	ldr	r2, [r4, #0]
 8014954:	1b52      	subs	r2, r2, r5
 8014956:	d41e      	bmi.n	8014996 <_malloc_r+0xc6>
 8014958:	2a0b      	cmp	r2, #11
 801495a:	d916      	bls.n	801498a <_malloc_r+0xba>
 801495c:	1961      	adds	r1, r4, r5
 801495e:	42a3      	cmp	r3, r4
 8014960:	6025      	str	r5, [r4, #0]
 8014962:	bf18      	it	ne
 8014964:	6059      	strne	r1, [r3, #4]
 8014966:	6863      	ldr	r3, [r4, #4]
 8014968:	bf08      	it	eq
 801496a:	6031      	streq	r1, [r6, #0]
 801496c:	5162      	str	r2, [r4, r5]
 801496e:	604b      	str	r3, [r1, #4]
 8014970:	4638      	mov	r0, r7
 8014972:	f104 060b 	add.w	r6, r4, #11
 8014976:	f000 fbd7 	bl	8015128 <__malloc_unlock>
 801497a:	f026 0607 	bic.w	r6, r6, #7
 801497e:	1d23      	adds	r3, r4, #4
 8014980:	1af2      	subs	r2, r6, r3
 8014982:	d0b6      	beq.n	80148f2 <_malloc_r+0x22>
 8014984:	1b9b      	subs	r3, r3, r6
 8014986:	50a3      	str	r3, [r4, r2]
 8014988:	e7b3      	b.n	80148f2 <_malloc_r+0x22>
 801498a:	6862      	ldr	r2, [r4, #4]
 801498c:	42a3      	cmp	r3, r4
 801498e:	bf0c      	ite	eq
 8014990:	6032      	streq	r2, [r6, #0]
 8014992:	605a      	strne	r2, [r3, #4]
 8014994:	e7ec      	b.n	8014970 <_malloc_r+0xa0>
 8014996:	4623      	mov	r3, r4
 8014998:	6864      	ldr	r4, [r4, #4]
 801499a:	e7b2      	b.n	8014902 <_malloc_r+0x32>
 801499c:	4634      	mov	r4, r6
 801499e:	6876      	ldr	r6, [r6, #4]
 80149a0:	e7b9      	b.n	8014916 <_malloc_r+0x46>
 80149a2:	230c      	movs	r3, #12
 80149a4:	603b      	str	r3, [r7, #0]
 80149a6:	4638      	mov	r0, r7
 80149a8:	f000 fbbe 	bl	8015128 <__malloc_unlock>
 80149ac:	e7a1      	b.n	80148f2 <_malloc_r+0x22>
 80149ae:	6025      	str	r5, [r4, #0]
 80149b0:	e7de      	b.n	8014970 <_malloc_r+0xa0>
 80149b2:	bf00      	nop
 80149b4:	24002cc4 	.word	0x24002cc4

080149b8 <iprintf>:
 80149b8:	b40f      	push	{r0, r1, r2, r3}
 80149ba:	4b0a      	ldr	r3, [pc, #40]	; (80149e4 <iprintf+0x2c>)
 80149bc:	b513      	push	{r0, r1, r4, lr}
 80149be:	681c      	ldr	r4, [r3, #0]
 80149c0:	b124      	cbz	r4, 80149cc <iprintf+0x14>
 80149c2:	69a3      	ldr	r3, [r4, #24]
 80149c4:	b913      	cbnz	r3, 80149cc <iprintf+0x14>
 80149c6:	4620      	mov	r0, r4
 80149c8:	f000 faa2 	bl	8014f10 <__sinit>
 80149cc:	ab05      	add	r3, sp, #20
 80149ce:	9a04      	ldr	r2, [sp, #16]
 80149d0:	68a1      	ldr	r1, [r4, #8]
 80149d2:	9301      	str	r3, [sp, #4]
 80149d4:	4620      	mov	r0, r4
 80149d6:	f000 fd61 	bl	801549c <_vfiprintf_r>
 80149da:	b002      	add	sp, #8
 80149dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149e0:	b004      	add	sp, #16
 80149e2:	4770      	bx	lr
 80149e4:	24000a88 	.word	0x24000a88

080149e8 <_puts_r>:
 80149e8:	b570      	push	{r4, r5, r6, lr}
 80149ea:	460e      	mov	r6, r1
 80149ec:	4605      	mov	r5, r0
 80149ee:	b118      	cbz	r0, 80149f8 <_puts_r+0x10>
 80149f0:	6983      	ldr	r3, [r0, #24]
 80149f2:	b90b      	cbnz	r3, 80149f8 <_puts_r+0x10>
 80149f4:	f000 fa8c 	bl	8014f10 <__sinit>
 80149f8:	69ab      	ldr	r3, [r5, #24]
 80149fa:	68ac      	ldr	r4, [r5, #8]
 80149fc:	b913      	cbnz	r3, 8014a04 <_puts_r+0x1c>
 80149fe:	4628      	mov	r0, r5
 8014a00:	f000 fa86 	bl	8014f10 <__sinit>
 8014a04:	4b2c      	ldr	r3, [pc, #176]	; (8014ab8 <_puts_r+0xd0>)
 8014a06:	429c      	cmp	r4, r3
 8014a08:	d120      	bne.n	8014a4c <_puts_r+0x64>
 8014a0a:	686c      	ldr	r4, [r5, #4]
 8014a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a0e:	07db      	lsls	r3, r3, #31
 8014a10:	d405      	bmi.n	8014a1e <_puts_r+0x36>
 8014a12:	89a3      	ldrh	r3, [r4, #12]
 8014a14:	0598      	lsls	r0, r3, #22
 8014a16:	d402      	bmi.n	8014a1e <_puts_r+0x36>
 8014a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a1a:	f000 fb17 	bl	801504c <__retarget_lock_acquire_recursive>
 8014a1e:	89a3      	ldrh	r3, [r4, #12]
 8014a20:	0719      	lsls	r1, r3, #28
 8014a22:	d51d      	bpl.n	8014a60 <_puts_r+0x78>
 8014a24:	6923      	ldr	r3, [r4, #16]
 8014a26:	b1db      	cbz	r3, 8014a60 <_puts_r+0x78>
 8014a28:	3e01      	subs	r6, #1
 8014a2a:	68a3      	ldr	r3, [r4, #8]
 8014a2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014a30:	3b01      	subs	r3, #1
 8014a32:	60a3      	str	r3, [r4, #8]
 8014a34:	bb39      	cbnz	r1, 8014a86 <_puts_r+0x9e>
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	da38      	bge.n	8014aac <_puts_r+0xc4>
 8014a3a:	4622      	mov	r2, r4
 8014a3c:	210a      	movs	r1, #10
 8014a3e:	4628      	mov	r0, r5
 8014a40:	f000 f88c 	bl	8014b5c <__swbuf_r>
 8014a44:	3001      	adds	r0, #1
 8014a46:	d011      	beq.n	8014a6c <_puts_r+0x84>
 8014a48:	250a      	movs	r5, #10
 8014a4a:	e011      	b.n	8014a70 <_puts_r+0x88>
 8014a4c:	4b1b      	ldr	r3, [pc, #108]	; (8014abc <_puts_r+0xd4>)
 8014a4e:	429c      	cmp	r4, r3
 8014a50:	d101      	bne.n	8014a56 <_puts_r+0x6e>
 8014a52:	68ac      	ldr	r4, [r5, #8]
 8014a54:	e7da      	b.n	8014a0c <_puts_r+0x24>
 8014a56:	4b1a      	ldr	r3, [pc, #104]	; (8014ac0 <_puts_r+0xd8>)
 8014a58:	429c      	cmp	r4, r3
 8014a5a:	bf08      	it	eq
 8014a5c:	68ec      	ldreq	r4, [r5, #12]
 8014a5e:	e7d5      	b.n	8014a0c <_puts_r+0x24>
 8014a60:	4621      	mov	r1, r4
 8014a62:	4628      	mov	r0, r5
 8014a64:	f000 f8cc 	bl	8014c00 <__swsetup_r>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d0dd      	beq.n	8014a28 <_puts_r+0x40>
 8014a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8014a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a72:	07da      	lsls	r2, r3, #31
 8014a74:	d405      	bmi.n	8014a82 <_puts_r+0x9a>
 8014a76:	89a3      	ldrh	r3, [r4, #12]
 8014a78:	059b      	lsls	r3, r3, #22
 8014a7a:	d402      	bmi.n	8014a82 <_puts_r+0x9a>
 8014a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a7e:	f000 fae6 	bl	801504e <__retarget_lock_release_recursive>
 8014a82:	4628      	mov	r0, r5
 8014a84:	bd70      	pop	{r4, r5, r6, pc}
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	da04      	bge.n	8014a94 <_puts_r+0xac>
 8014a8a:	69a2      	ldr	r2, [r4, #24]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	dc06      	bgt.n	8014a9e <_puts_r+0xb6>
 8014a90:	290a      	cmp	r1, #10
 8014a92:	d004      	beq.n	8014a9e <_puts_r+0xb6>
 8014a94:	6823      	ldr	r3, [r4, #0]
 8014a96:	1c5a      	adds	r2, r3, #1
 8014a98:	6022      	str	r2, [r4, #0]
 8014a9a:	7019      	strb	r1, [r3, #0]
 8014a9c:	e7c5      	b.n	8014a2a <_puts_r+0x42>
 8014a9e:	4622      	mov	r2, r4
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	f000 f85b 	bl	8014b5c <__swbuf_r>
 8014aa6:	3001      	adds	r0, #1
 8014aa8:	d1bf      	bne.n	8014a2a <_puts_r+0x42>
 8014aaa:	e7df      	b.n	8014a6c <_puts_r+0x84>
 8014aac:	6823      	ldr	r3, [r4, #0]
 8014aae:	250a      	movs	r5, #10
 8014ab0:	1c5a      	adds	r2, r3, #1
 8014ab2:	6022      	str	r2, [r4, #0]
 8014ab4:	701d      	strb	r5, [r3, #0]
 8014ab6:	e7db      	b.n	8014a70 <_puts_r+0x88>
 8014ab8:	0801655c 	.word	0x0801655c
 8014abc:	0801657c 	.word	0x0801657c
 8014ac0:	0801653c 	.word	0x0801653c

08014ac4 <puts>:
 8014ac4:	4b02      	ldr	r3, [pc, #8]	; (8014ad0 <puts+0xc>)
 8014ac6:	4601      	mov	r1, r0
 8014ac8:	6818      	ldr	r0, [r3, #0]
 8014aca:	f7ff bf8d 	b.w	80149e8 <_puts_r>
 8014ace:	bf00      	nop
 8014ad0:	24000a88 	.word	0x24000a88

08014ad4 <_sbrk_r>:
 8014ad4:	b538      	push	{r3, r4, r5, lr}
 8014ad6:	4d06      	ldr	r5, [pc, #24]	; (8014af0 <_sbrk_r+0x1c>)
 8014ad8:	2300      	movs	r3, #0
 8014ada:	4604      	mov	r4, r0
 8014adc:	4608      	mov	r0, r1
 8014ade:	602b      	str	r3, [r5, #0]
 8014ae0:	f7ec fc50 	bl	8001384 <_sbrk>
 8014ae4:	1c43      	adds	r3, r0, #1
 8014ae6:	d102      	bne.n	8014aee <_sbrk_r+0x1a>
 8014ae8:	682b      	ldr	r3, [r5, #0]
 8014aea:	b103      	cbz	r3, 8014aee <_sbrk_r+0x1a>
 8014aec:	6023      	str	r3, [r4, #0]
 8014aee:	bd38      	pop	{r3, r4, r5, pc}
 8014af0:	24002cd0 	.word	0x24002cd0

08014af4 <sniprintf>:
 8014af4:	b40c      	push	{r2, r3}
 8014af6:	b530      	push	{r4, r5, lr}
 8014af8:	4b17      	ldr	r3, [pc, #92]	; (8014b58 <sniprintf+0x64>)
 8014afa:	1e0c      	subs	r4, r1, #0
 8014afc:	681d      	ldr	r5, [r3, #0]
 8014afe:	b09d      	sub	sp, #116	; 0x74
 8014b00:	da08      	bge.n	8014b14 <sniprintf+0x20>
 8014b02:	238b      	movs	r3, #139	; 0x8b
 8014b04:	602b      	str	r3, [r5, #0]
 8014b06:	f04f 30ff 	mov.w	r0, #4294967295
 8014b0a:	b01d      	add	sp, #116	; 0x74
 8014b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b10:	b002      	add	sp, #8
 8014b12:	4770      	bx	lr
 8014b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b1c:	bf14      	ite	ne
 8014b1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b22:	4623      	moveq	r3, r4
 8014b24:	9304      	str	r3, [sp, #16]
 8014b26:	9307      	str	r3, [sp, #28]
 8014b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b2c:	9002      	str	r0, [sp, #8]
 8014b2e:	9006      	str	r0, [sp, #24]
 8014b30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014b36:	ab21      	add	r3, sp, #132	; 0x84
 8014b38:	a902      	add	r1, sp, #8
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	9301      	str	r3, [sp, #4]
 8014b3e:	f000 fb83 	bl	8015248 <_svfiprintf_r>
 8014b42:	1c43      	adds	r3, r0, #1
 8014b44:	bfbc      	itt	lt
 8014b46:	238b      	movlt	r3, #139	; 0x8b
 8014b48:	602b      	strlt	r3, [r5, #0]
 8014b4a:	2c00      	cmp	r4, #0
 8014b4c:	d0dd      	beq.n	8014b0a <sniprintf+0x16>
 8014b4e:	9b02      	ldr	r3, [sp, #8]
 8014b50:	2200      	movs	r2, #0
 8014b52:	701a      	strb	r2, [r3, #0]
 8014b54:	e7d9      	b.n	8014b0a <sniprintf+0x16>
 8014b56:	bf00      	nop
 8014b58:	24000a88 	.word	0x24000a88

08014b5c <__swbuf_r>:
 8014b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b5e:	460e      	mov	r6, r1
 8014b60:	4614      	mov	r4, r2
 8014b62:	4605      	mov	r5, r0
 8014b64:	b118      	cbz	r0, 8014b6e <__swbuf_r+0x12>
 8014b66:	6983      	ldr	r3, [r0, #24]
 8014b68:	b90b      	cbnz	r3, 8014b6e <__swbuf_r+0x12>
 8014b6a:	f000 f9d1 	bl	8014f10 <__sinit>
 8014b6e:	4b21      	ldr	r3, [pc, #132]	; (8014bf4 <__swbuf_r+0x98>)
 8014b70:	429c      	cmp	r4, r3
 8014b72:	d12b      	bne.n	8014bcc <__swbuf_r+0x70>
 8014b74:	686c      	ldr	r4, [r5, #4]
 8014b76:	69a3      	ldr	r3, [r4, #24]
 8014b78:	60a3      	str	r3, [r4, #8]
 8014b7a:	89a3      	ldrh	r3, [r4, #12]
 8014b7c:	071a      	lsls	r2, r3, #28
 8014b7e:	d52f      	bpl.n	8014be0 <__swbuf_r+0x84>
 8014b80:	6923      	ldr	r3, [r4, #16]
 8014b82:	b36b      	cbz	r3, 8014be0 <__swbuf_r+0x84>
 8014b84:	6923      	ldr	r3, [r4, #16]
 8014b86:	6820      	ldr	r0, [r4, #0]
 8014b88:	1ac0      	subs	r0, r0, r3
 8014b8a:	6963      	ldr	r3, [r4, #20]
 8014b8c:	b2f6      	uxtb	r6, r6
 8014b8e:	4283      	cmp	r3, r0
 8014b90:	4637      	mov	r7, r6
 8014b92:	dc04      	bgt.n	8014b9e <__swbuf_r+0x42>
 8014b94:	4621      	mov	r1, r4
 8014b96:	4628      	mov	r0, r5
 8014b98:	f000 f926 	bl	8014de8 <_fflush_r>
 8014b9c:	bb30      	cbnz	r0, 8014bec <__swbuf_r+0x90>
 8014b9e:	68a3      	ldr	r3, [r4, #8]
 8014ba0:	3b01      	subs	r3, #1
 8014ba2:	60a3      	str	r3, [r4, #8]
 8014ba4:	6823      	ldr	r3, [r4, #0]
 8014ba6:	1c5a      	adds	r2, r3, #1
 8014ba8:	6022      	str	r2, [r4, #0]
 8014baa:	701e      	strb	r6, [r3, #0]
 8014bac:	6963      	ldr	r3, [r4, #20]
 8014bae:	3001      	adds	r0, #1
 8014bb0:	4283      	cmp	r3, r0
 8014bb2:	d004      	beq.n	8014bbe <__swbuf_r+0x62>
 8014bb4:	89a3      	ldrh	r3, [r4, #12]
 8014bb6:	07db      	lsls	r3, r3, #31
 8014bb8:	d506      	bpl.n	8014bc8 <__swbuf_r+0x6c>
 8014bba:	2e0a      	cmp	r6, #10
 8014bbc:	d104      	bne.n	8014bc8 <__swbuf_r+0x6c>
 8014bbe:	4621      	mov	r1, r4
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	f000 f911 	bl	8014de8 <_fflush_r>
 8014bc6:	b988      	cbnz	r0, 8014bec <__swbuf_r+0x90>
 8014bc8:	4638      	mov	r0, r7
 8014bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bcc:	4b0a      	ldr	r3, [pc, #40]	; (8014bf8 <__swbuf_r+0x9c>)
 8014bce:	429c      	cmp	r4, r3
 8014bd0:	d101      	bne.n	8014bd6 <__swbuf_r+0x7a>
 8014bd2:	68ac      	ldr	r4, [r5, #8]
 8014bd4:	e7cf      	b.n	8014b76 <__swbuf_r+0x1a>
 8014bd6:	4b09      	ldr	r3, [pc, #36]	; (8014bfc <__swbuf_r+0xa0>)
 8014bd8:	429c      	cmp	r4, r3
 8014bda:	bf08      	it	eq
 8014bdc:	68ec      	ldreq	r4, [r5, #12]
 8014bde:	e7ca      	b.n	8014b76 <__swbuf_r+0x1a>
 8014be0:	4621      	mov	r1, r4
 8014be2:	4628      	mov	r0, r5
 8014be4:	f000 f80c 	bl	8014c00 <__swsetup_r>
 8014be8:	2800      	cmp	r0, #0
 8014bea:	d0cb      	beq.n	8014b84 <__swbuf_r+0x28>
 8014bec:	f04f 37ff 	mov.w	r7, #4294967295
 8014bf0:	e7ea      	b.n	8014bc8 <__swbuf_r+0x6c>
 8014bf2:	bf00      	nop
 8014bf4:	0801655c 	.word	0x0801655c
 8014bf8:	0801657c 	.word	0x0801657c
 8014bfc:	0801653c 	.word	0x0801653c

08014c00 <__swsetup_r>:
 8014c00:	4b32      	ldr	r3, [pc, #200]	; (8014ccc <__swsetup_r+0xcc>)
 8014c02:	b570      	push	{r4, r5, r6, lr}
 8014c04:	681d      	ldr	r5, [r3, #0]
 8014c06:	4606      	mov	r6, r0
 8014c08:	460c      	mov	r4, r1
 8014c0a:	b125      	cbz	r5, 8014c16 <__swsetup_r+0x16>
 8014c0c:	69ab      	ldr	r3, [r5, #24]
 8014c0e:	b913      	cbnz	r3, 8014c16 <__swsetup_r+0x16>
 8014c10:	4628      	mov	r0, r5
 8014c12:	f000 f97d 	bl	8014f10 <__sinit>
 8014c16:	4b2e      	ldr	r3, [pc, #184]	; (8014cd0 <__swsetup_r+0xd0>)
 8014c18:	429c      	cmp	r4, r3
 8014c1a:	d10f      	bne.n	8014c3c <__swsetup_r+0x3c>
 8014c1c:	686c      	ldr	r4, [r5, #4]
 8014c1e:	89a3      	ldrh	r3, [r4, #12]
 8014c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c24:	0719      	lsls	r1, r3, #28
 8014c26:	d42c      	bmi.n	8014c82 <__swsetup_r+0x82>
 8014c28:	06dd      	lsls	r5, r3, #27
 8014c2a:	d411      	bmi.n	8014c50 <__swsetup_r+0x50>
 8014c2c:	2309      	movs	r3, #9
 8014c2e:	6033      	str	r3, [r6, #0]
 8014c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014c34:	81a3      	strh	r3, [r4, #12]
 8014c36:	f04f 30ff 	mov.w	r0, #4294967295
 8014c3a:	e03e      	b.n	8014cba <__swsetup_r+0xba>
 8014c3c:	4b25      	ldr	r3, [pc, #148]	; (8014cd4 <__swsetup_r+0xd4>)
 8014c3e:	429c      	cmp	r4, r3
 8014c40:	d101      	bne.n	8014c46 <__swsetup_r+0x46>
 8014c42:	68ac      	ldr	r4, [r5, #8]
 8014c44:	e7eb      	b.n	8014c1e <__swsetup_r+0x1e>
 8014c46:	4b24      	ldr	r3, [pc, #144]	; (8014cd8 <__swsetup_r+0xd8>)
 8014c48:	429c      	cmp	r4, r3
 8014c4a:	bf08      	it	eq
 8014c4c:	68ec      	ldreq	r4, [r5, #12]
 8014c4e:	e7e6      	b.n	8014c1e <__swsetup_r+0x1e>
 8014c50:	0758      	lsls	r0, r3, #29
 8014c52:	d512      	bpl.n	8014c7a <__swsetup_r+0x7a>
 8014c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c56:	b141      	cbz	r1, 8014c6a <__swsetup_r+0x6a>
 8014c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c5c:	4299      	cmp	r1, r3
 8014c5e:	d002      	beq.n	8014c66 <__swsetup_r+0x66>
 8014c60:	4630      	mov	r0, r6
 8014c62:	f7ff fdc9 	bl	80147f8 <_free_r>
 8014c66:	2300      	movs	r3, #0
 8014c68:	6363      	str	r3, [r4, #52]	; 0x34
 8014c6a:	89a3      	ldrh	r3, [r4, #12]
 8014c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c70:	81a3      	strh	r3, [r4, #12]
 8014c72:	2300      	movs	r3, #0
 8014c74:	6063      	str	r3, [r4, #4]
 8014c76:	6923      	ldr	r3, [r4, #16]
 8014c78:	6023      	str	r3, [r4, #0]
 8014c7a:	89a3      	ldrh	r3, [r4, #12]
 8014c7c:	f043 0308 	orr.w	r3, r3, #8
 8014c80:	81a3      	strh	r3, [r4, #12]
 8014c82:	6923      	ldr	r3, [r4, #16]
 8014c84:	b94b      	cbnz	r3, 8014c9a <__swsetup_r+0x9a>
 8014c86:	89a3      	ldrh	r3, [r4, #12]
 8014c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c90:	d003      	beq.n	8014c9a <__swsetup_r+0x9a>
 8014c92:	4621      	mov	r1, r4
 8014c94:	4630      	mov	r0, r6
 8014c96:	f000 fa01 	bl	801509c <__smakebuf_r>
 8014c9a:	89a0      	ldrh	r0, [r4, #12]
 8014c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ca0:	f010 0301 	ands.w	r3, r0, #1
 8014ca4:	d00a      	beq.n	8014cbc <__swsetup_r+0xbc>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	60a3      	str	r3, [r4, #8]
 8014caa:	6963      	ldr	r3, [r4, #20]
 8014cac:	425b      	negs	r3, r3
 8014cae:	61a3      	str	r3, [r4, #24]
 8014cb0:	6923      	ldr	r3, [r4, #16]
 8014cb2:	b943      	cbnz	r3, 8014cc6 <__swsetup_r+0xc6>
 8014cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014cb8:	d1ba      	bne.n	8014c30 <__swsetup_r+0x30>
 8014cba:	bd70      	pop	{r4, r5, r6, pc}
 8014cbc:	0781      	lsls	r1, r0, #30
 8014cbe:	bf58      	it	pl
 8014cc0:	6963      	ldrpl	r3, [r4, #20]
 8014cc2:	60a3      	str	r3, [r4, #8]
 8014cc4:	e7f4      	b.n	8014cb0 <__swsetup_r+0xb0>
 8014cc6:	2000      	movs	r0, #0
 8014cc8:	e7f7      	b.n	8014cba <__swsetup_r+0xba>
 8014cca:	bf00      	nop
 8014ccc:	24000a88 	.word	0x24000a88
 8014cd0:	0801655c 	.word	0x0801655c
 8014cd4:	0801657c 	.word	0x0801657c
 8014cd8:	0801653c 	.word	0x0801653c

08014cdc <__sflush_r>:
 8014cdc:	898a      	ldrh	r2, [r1, #12]
 8014cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce2:	4605      	mov	r5, r0
 8014ce4:	0710      	lsls	r0, r2, #28
 8014ce6:	460c      	mov	r4, r1
 8014ce8:	d458      	bmi.n	8014d9c <__sflush_r+0xc0>
 8014cea:	684b      	ldr	r3, [r1, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	dc05      	bgt.n	8014cfc <__sflush_r+0x20>
 8014cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	dc02      	bgt.n	8014cfc <__sflush_r+0x20>
 8014cf6:	2000      	movs	r0, #0
 8014cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cfe:	2e00      	cmp	r6, #0
 8014d00:	d0f9      	beq.n	8014cf6 <__sflush_r+0x1a>
 8014d02:	2300      	movs	r3, #0
 8014d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014d08:	682f      	ldr	r7, [r5, #0]
 8014d0a:	602b      	str	r3, [r5, #0]
 8014d0c:	d032      	beq.n	8014d74 <__sflush_r+0x98>
 8014d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014d10:	89a3      	ldrh	r3, [r4, #12]
 8014d12:	075a      	lsls	r2, r3, #29
 8014d14:	d505      	bpl.n	8014d22 <__sflush_r+0x46>
 8014d16:	6863      	ldr	r3, [r4, #4]
 8014d18:	1ac0      	subs	r0, r0, r3
 8014d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d1c:	b10b      	cbz	r3, 8014d22 <__sflush_r+0x46>
 8014d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d20:	1ac0      	subs	r0, r0, r3
 8014d22:	2300      	movs	r3, #0
 8014d24:	4602      	mov	r2, r0
 8014d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d28:	6a21      	ldr	r1, [r4, #32]
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	47b0      	blx	r6
 8014d2e:	1c43      	adds	r3, r0, #1
 8014d30:	89a3      	ldrh	r3, [r4, #12]
 8014d32:	d106      	bne.n	8014d42 <__sflush_r+0x66>
 8014d34:	6829      	ldr	r1, [r5, #0]
 8014d36:	291d      	cmp	r1, #29
 8014d38:	d82c      	bhi.n	8014d94 <__sflush_r+0xb8>
 8014d3a:	4a2a      	ldr	r2, [pc, #168]	; (8014de4 <__sflush_r+0x108>)
 8014d3c:	40ca      	lsrs	r2, r1
 8014d3e:	07d6      	lsls	r6, r2, #31
 8014d40:	d528      	bpl.n	8014d94 <__sflush_r+0xb8>
 8014d42:	2200      	movs	r2, #0
 8014d44:	6062      	str	r2, [r4, #4]
 8014d46:	04d9      	lsls	r1, r3, #19
 8014d48:	6922      	ldr	r2, [r4, #16]
 8014d4a:	6022      	str	r2, [r4, #0]
 8014d4c:	d504      	bpl.n	8014d58 <__sflush_r+0x7c>
 8014d4e:	1c42      	adds	r2, r0, #1
 8014d50:	d101      	bne.n	8014d56 <__sflush_r+0x7a>
 8014d52:	682b      	ldr	r3, [r5, #0]
 8014d54:	b903      	cbnz	r3, 8014d58 <__sflush_r+0x7c>
 8014d56:	6560      	str	r0, [r4, #84]	; 0x54
 8014d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d5a:	602f      	str	r7, [r5, #0]
 8014d5c:	2900      	cmp	r1, #0
 8014d5e:	d0ca      	beq.n	8014cf6 <__sflush_r+0x1a>
 8014d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d64:	4299      	cmp	r1, r3
 8014d66:	d002      	beq.n	8014d6e <__sflush_r+0x92>
 8014d68:	4628      	mov	r0, r5
 8014d6a:	f7ff fd45 	bl	80147f8 <_free_r>
 8014d6e:	2000      	movs	r0, #0
 8014d70:	6360      	str	r0, [r4, #52]	; 0x34
 8014d72:	e7c1      	b.n	8014cf8 <__sflush_r+0x1c>
 8014d74:	6a21      	ldr	r1, [r4, #32]
 8014d76:	2301      	movs	r3, #1
 8014d78:	4628      	mov	r0, r5
 8014d7a:	47b0      	blx	r6
 8014d7c:	1c41      	adds	r1, r0, #1
 8014d7e:	d1c7      	bne.n	8014d10 <__sflush_r+0x34>
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d0c4      	beq.n	8014d10 <__sflush_r+0x34>
 8014d86:	2b1d      	cmp	r3, #29
 8014d88:	d001      	beq.n	8014d8e <__sflush_r+0xb2>
 8014d8a:	2b16      	cmp	r3, #22
 8014d8c:	d101      	bne.n	8014d92 <__sflush_r+0xb6>
 8014d8e:	602f      	str	r7, [r5, #0]
 8014d90:	e7b1      	b.n	8014cf6 <__sflush_r+0x1a>
 8014d92:	89a3      	ldrh	r3, [r4, #12]
 8014d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d98:	81a3      	strh	r3, [r4, #12]
 8014d9a:	e7ad      	b.n	8014cf8 <__sflush_r+0x1c>
 8014d9c:	690f      	ldr	r7, [r1, #16]
 8014d9e:	2f00      	cmp	r7, #0
 8014da0:	d0a9      	beq.n	8014cf6 <__sflush_r+0x1a>
 8014da2:	0793      	lsls	r3, r2, #30
 8014da4:	680e      	ldr	r6, [r1, #0]
 8014da6:	bf08      	it	eq
 8014da8:	694b      	ldreq	r3, [r1, #20]
 8014daa:	600f      	str	r7, [r1, #0]
 8014dac:	bf18      	it	ne
 8014dae:	2300      	movne	r3, #0
 8014db0:	eba6 0807 	sub.w	r8, r6, r7
 8014db4:	608b      	str	r3, [r1, #8]
 8014db6:	f1b8 0f00 	cmp.w	r8, #0
 8014dba:	dd9c      	ble.n	8014cf6 <__sflush_r+0x1a>
 8014dbc:	6a21      	ldr	r1, [r4, #32]
 8014dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014dc0:	4643      	mov	r3, r8
 8014dc2:	463a      	mov	r2, r7
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	47b0      	blx	r6
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	dc06      	bgt.n	8014dda <__sflush_r+0xfe>
 8014dcc:	89a3      	ldrh	r3, [r4, #12]
 8014dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dd2:	81a3      	strh	r3, [r4, #12]
 8014dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014dd8:	e78e      	b.n	8014cf8 <__sflush_r+0x1c>
 8014dda:	4407      	add	r7, r0
 8014ddc:	eba8 0800 	sub.w	r8, r8, r0
 8014de0:	e7e9      	b.n	8014db6 <__sflush_r+0xda>
 8014de2:	bf00      	nop
 8014de4:	20400001 	.word	0x20400001

08014de8 <_fflush_r>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	690b      	ldr	r3, [r1, #16]
 8014dec:	4605      	mov	r5, r0
 8014dee:	460c      	mov	r4, r1
 8014df0:	b913      	cbnz	r3, 8014df8 <_fflush_r+0x10>
 8014df2:	2500      	movs	r5, #0
 8014df4:	4628      	mov	r0, r5
 8014df6:	bd38      	pop	{r3, r4, r5, pc}
 8014df8:	b118      	cbz	r0, 8014e02 <_fflush_r+0x1a>
 8014dfa:	6983      	ldr	r3, [r0, #24]
 8014dfc:	b90b      	cbnz	r3, 8014e02 <_fflush_r+0x1a>
 8014dfe:	f000 f887 	bl	8014f10 <__sinit>
 8014e02:	4b14      	ldr	r3, [pc, #80]	; (8014e54 <_fflush_r+0x6c>)
 8014e04:	429c      	cmp	r4, r3
 8014e06:	d11b      	bne.n	8014e40 <_fflush_r+0x58>
 8014e08:	686c      	ldr	r4, [r5, #4]
 8014e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d0ef      	beq.n	8014df2 <_fflush_r+0xa>
 8014e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014e14:	07d0      	lsls	r0, r2, #31
 8014e16:	d404      	bmi.n	8014e22 <_fflush_r+0x3a>
 8014e18:	0599      	lsls	r1, r3, #22
 8014e1a:	d402      	bmi.n	8014e22 <_fflush_r+0x3a>
 8014e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e1e:	f000 f915 	bl	801504c <__retarget_lock_acquire_recursive>
 8014e22:	4628      	mov	r0, r5
 8014e24:	4621      	mov	r1, r4
 8014e26:	f7ff ff59 	bl	8014cdc <__sflush_r>
 8014e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e2c:	07da      	lsls	r2, r3, #31
 8014e2e:	4605      	mov	r5, r0
 8014e30:	d4e0      	bmi.n	8014df4 <_fflush_r+0xc>
 8014e32:	89a3      	ldrh	r3, [r4, #12]
 8014e34:	059b      	lsls	r3, r3, #22
 8014e36:	d4dd      	bmi.n	8014df4 <_fflush_r+0xc>
 8014e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e3a:	f000 f908 	bl	801504e <__retarget_lock_release_recursive>
 8014e3e:	e7d9      	b.n	8014df4 <_fflush_r+0xc>
 8014e40:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <_fflush_r+0x70>)
 8014e42:	429c      	cmp	r4, r3
 8014e44:	d101      	bne.n	8014e4a <_fflush_r+0x62>
 8014e46:	68ac      	ldr	r4, [r5, #8]
 8014e48:	e7df      	b.n	8014e0a <_fflush_r+0x22>
 8014e4a:	4b04      	ldr	r3, [pc, #16]	; (8014e5c <_fflush_r+0x74>)
 8014e4c:	429c      	cmp	r4, r3
 8014e4e:	bf08      	it	eq
 8014e50:	68ec      	ldreq	r4, [r5, #12]
 8014e52:	e7da      	b.n	8014e0a <_fflush_r+0x22>
 8014e54:	0801655c 	.word	0x0801655c
 8014e58:	0801657c 	.word	0x0801657c
 8014e5c:	0801653c 	.word	0x0801653c

08014e60 <std>:
 8014e60:	2300      	movs	r3, #0
 8014e62:	b510      	push	{r4, lr}
 8014e64:	4604      	mov	r4, r0
 8014e66:	e9c0 3300 	strd	r3, r3, [r0]
 8014e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e6e:	6083      	str	r3, [r0, #8]
 8014e70:	8181      	strh	r1, [r0, #12]
 8014e72:	6643      	str	r3, [r0, #100]	; 0x64
 8014e74:	81c2      	strh	r2, [r0, #14]
 8014e76:	6183      	str	r3, [r0, #24]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	2208      	movs	r2, #8
 8014e7c:	305c      	adds	r0, #92	; 0x5c
 8014e7e:	f7ff fcb3 	bl	80147e8 <memset>
 8014e82:	4b05      	ldr	r3, [pc, #20]	; (8014e98 <std+0x38>)
 8014e84:	6263      	str	r3, [r4, #36]	; 0x24
 8014e86:	4b05      	ldr	r3, [pc, #20]	; (8014e9c <std+0x3c>)
 8014e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e8a:	4b05      	ldr	r3, [pc, #20]	; (8014ea0 <std+0x40>)
 8014e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e8e:	4b05      	ldr	r3, [pc, #20]	; (8014ea4 <std+0x44>)
 8014e90:	6224      	str	r4, [r4, #32]
 8014e92:	6323      	str	r3, [r4, #48]	; 0x30
 8014e94:	bd10      	pop	{r4, pc}
 8014e96:	bf00      	nop
 8014e98:	08015a25 	.word	0x08015a25
 8014e9c:	08015a47 	.word	0x08015a47
 8014ea0:	08015a7f 	.word	0x08015a7f
 8014ea4:	08015aa3 	.word	0x08015aa3

08014ea8 <_cleanup_r>:
 8014ea8:	4901      	ldr	r1, [pc, #4]	; (8014eb0 <_cleanup_r+0x8>)
 8014eaa:	f000 b8af 	b.w	801500c <_fwalk_reent>
 8014eae:	bf00      	nop
 8014eb0:	08014de9 	.word	0x08014de9

08014eb4 <__sfmoreglue>:
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	2268      	movs	r2, #104	; 0x68
 8014eb8:	1e4d      	subs	r5, r1, #1
 8014eba:	4355      	muls	r5, r2
 8014ebc:	460e      	mov	r6, r1
 8014ebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014ec2:	f7ff fd05 	bl	80148d0 <_malloc_r>
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	b140      	cbz	r0, 8014edc <__sfmoreglue+0x28>
 8014eca:	2100      	movs	r1, #0
 8014ecc:	e9c0 1600 	strd	r1, r6, [r0]
 8014ed0:	300c      	adds	r0, #12
 8014ed2:	60a0      	str	r0, [r4, #8]
 8014ed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ed8:	f7ff fc86 	bl	80147e8 <memset>
 8014edc:	4620      	mov	r0, r4
 8014ede:	bd70      	pop	{r4, r5, r6, pc}

08014ee0 <__sfp_lock_acquire>:
 8014ee0:	4801      	ldr	r0, [pc, #4]	; (8014ee8 <__sfp_lock_acquire+0x8>)
 8014ee2:	f000 b8b3 	b.w	801504c <__retarget_lock_acquire_recursive>
 8014ee6:	bf00      	nop
 8014ee8:	24002ccd 	.word	0x24002ccd

08014eec <__sfp_lock_release>:
 8014eec:	4801      	ldr	r0, [pc, #4]	; (8014ef4 <__sfp_lock_release+0x8>)
 8014eee:	f000 b8ae 	b.w	801504e <__retarget_lock_release_recursive>
 8014ef2:	bf00      	nop
 8014ef4:	24002ccd 	.word	0x24002ccd

08014ef8 <__sinit_lock_acquire>:
 8014ef8:	4801      	ldr	r0, [pc, #4]	; (8014f00 <__sinit_lock_acquire+0x8>)
 8014efa:	f000 b8a7 	b.w	801504c <__retarget_lock_acquire_recursive>
 8014efe:	bf00      	nop
 8014f00:	24002cce 	.word	0x24002cce

08014f04 <__sinit_lock_release>:
 8014f04:	4801      	ldr	r0, [pc, #4]	; (8014f0c <__sinit_lock_release+0x8>)
 8014f06:	f000 b8a2 	b.w	801504e <__retarget_lock_release_recursive>
 8014f0a:	bf00      	nop
 8014f0c:	24002cce 	.word	0x24002cce

08014f10 <__sinit>:
 8014f10:	b510      	push	{r4, lr}
 8014f12:	4604      	mov	r4, r0
 8014f14:	f7ff fff0 	bl	8014ef8 <__sinit_lock_acquire>
 8014f18:	69a3      	ldr	r3, [r4, #24]
 8014f1a:	b11b      	cbz	r3, 8014f24 <__sinit+0x14>
 8014f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f20:	f7ff bff0 	b.w	8014f04 <__sinit_lock_release>
 8014f24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014f28:	6523      	str	r3, [r4, #80]	; 0x50
 8014f2a:	4b13      	ldr	r3, [pc, #76]	; (8014f78 <__sinit+0x68>)
 8014f2c:	4a13      	ldr	r2, [pc, #76]	; (8014f7c <__sinit+0x6c>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	62a2      	str	r2, [r4, #40]	; 0x28
 8014f32:	42a3      	cmp	r3, r4
 8014f34:	bf04      	itt	eq
 8014f36:	2301      	moveq	r3, #1
 8014f38:	61a3      	streq	r3, [r4, #24]
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f000 f820 	bl	8014f80 <__sfp>
 8014f40:	6060      	str	r0, [r4, #4]
 8014f42:	4620      	mov	r0, r4
 8014f44:	f000 f81c 	bl	8014f80 <__sfp>
 8014f48:	60a0      	str	r0, [r4, #8]
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	f000 f818 	bl	8014f80 <__sfp>
 8014f50:	2200      	movs	r2, #0
 8014f52:	60e0      	str	r0, [r4, #12]
 8014f54:	2104      	movs	r1, #4
 8014f56:	6860      	ldr	r0, [r4, #4]
 8014f58:	f7ff ff82 	bl	8014e60 <std>
 8014f5c:	68a0      	ldr	r0, [r4, #8]
 8014f5e:	2201      	movs	r2, #1
 8014f60:	2109      	movs	r1, #9
 8014f62:	f7ff ff7d 	bl	8014e60 <std>
 8014f66:	68e0      	ldr	r0, [r4, #12]
 8014f68:	2202      	movs	r2, #2
 8014f6a:	2112      	movs	r1, #18
 8014f6c:	f7ff ff78 	bl	8014e60 <std>
 8014f70:	2301      	movs	r3, #1
 8014f72:	61a3      	str	r3, [r4, #24]
 8014f74:	e7d2      	b.n	8014f1c <__sinit+0xc>
 8014f76:	bf00      	nop
 8014f78:	08016538 	.word	0x08016538
 8014f7c:	08014ea9 	.word	0x08014ea9

08014f80 <__sfp>:
 8014f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f82:	4607      	mov	r7, r0
 8014f84:	f7ff ffac 	bl	8014ee0 <__sfp_lock_acquire>
 8014f88:	4b1e      	ldr	r3, [pc, #120]	; (8015004 <__sfp+0x84>)
 8014f8a:	681e      	ldr	r6, [r3, #0]
 8014f8c:	69b3      	ldr	r3, [r6, #24]
 8014f8e:	b913      	cbnz	r3, 8014f96 <__sfp+0x16>
 8014f90:	4630      	mov	r0, r6
 8014f92:	f7ff ffbd 	bl	8014f10 <__sinit>
 8014f96:	3648      	adds	r6, #72	; 0x48
 8014f98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f9c:	3b01      	subs	r3, #1
 8014f9e:	d503      	bpl.n	8014fa8 <__sfp+0x28>
 8014fa0:	6833      	ldr	r3, [r6, #0]
 8014fa2:	b30b      	cbz	r3, 8014fe8 <__sfp+0x68>
 8014fa4:	6836      	ldr	r6, [r6, #0]
 8014fa6:	e7f7      	b.n	8014f98 <__sfp+0x18>
 8014fa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014fac:	b9d5      	cbnz	r5, 8014fe4 <__sfp+0x64>
 8014fae:	4b16      	ldr	r3, [pc, #88]	; (8015008 <__sfp+0x88>)
 8014fb0:	60e3      	str	r3, [r4, #12]
 8014fb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014fb6:	6665      	str	r5, [r4, #100]	; 0x64
 8014fb8:	f000 f847 	bl	801504a <__retarget_lock_init_recursive>
 8014fbc:	f7ff ff96 	bl	8014eec <__sfp_lock_release>
 8014fc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014fc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014fc8:	6025      	str	r5, [r4, #0]
 8014fca:	61a5      	str	r5, [r4, #24]
 8014fcc:	2208      	movs	r2, #8
 8014fce:	4629      	mov	r1, r5
 8014fd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014fd4:	f7ff fc08 	bl	80147e8 <memset>
 8014fd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014fdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fe4:	3468      	adds	r4, #104	; 0x68
 8014fe6:	e7d9      	b.n	8014f9c <__sfp+0x1c>
 8014fe8:	2104      	movs	r1, #4
 8014fea:	4638      	mov	r0, r7
 8014fec:	f7ff ff62 	bl	8014eb4 <__sfmoreglue>
 8014ff0:	4604      	mov	r4, r0
 8014ff2:	6030      	str	r0, [r6, #0]
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d1d5      	bne.n	8014fa4 <__sfp+0x24>
 8014ff8:	f7ff ff78 	bl	8014eec <__sfp_lock_release>
 8014ffc:	230c      	movs	r3, #12
 8014ffe:	603b      	str	r3, [r7, #0]
 8015000:	e7ee      	b.n	8014fe0 <__sfp+0x60>
 8015002:	bf00      	nop
 8015004:	08016538 	.word	0x08016538
 8015008:	ffff0001 	.word	0xffff0001

0801500c <_fwalk_reent>:
 801500c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015010:	4606      	mov	r6, r0
 8015012:	4688      	mov	r8, r1
 8015014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015018:	2700      	movs	r7, #0
 801501a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801501e:	f1b9 0901 	subs.w	r9, r9, #1
 8015022:	d505      	bpl.n	8015030 <_fwalk_reent+0x24>
 8015024:	6824      	ldr	r4, [r4, #0]
 8015026:	2c00      	cmp	r4, #0
 8015028:	d1f7      	bne.n	801501a <_fwalk_reent+0xe>
 801502a:	4638      	mov	r0, r7
 801502c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015030:	89ab      	ldrh	r3, [r5, #12]
 8015032:	2b01      	cmp	r3, #1
 8015034:	d907      	bls.n	8015046 <_fwalk_reent+0x3a>
 8015036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801503a:	3301      	adds	r3, #1
 801503c:	d003      	beq.n	8015046 <_fwalk_reent+0x3a>
 801503e:	4629      	mov	r1, r5
 8015040:	4630      	mov	r0, r6
 8015042:	47c0      	blx	r8
 8015044:	4307      	orrs	r7, r0
 8015046:	3568      	adds	r5, #104	; 0x68
 8015048:	e7e9      	b.n	801501e <_fwalk_reent+0x12>

0801504a <__retarget_lock_init_recursive>:
 801504a:	4770      	bx	lr

0801504c <__retarget_lock_acquire_recursive>:
 801504c:	4770      	bx	lr

0801504e <__retarget_lock_release_recursive>:
 801504e:	4770      	bx	lr

08015050 <__swhatbuf_r>:
 8015050:	b570      	push	{r4, r5, r6, lr}
 8015052:	460e      	mov	r6, r1
 8015054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015058:	2900      	cmp	r1, #0
 801505a:	b096      	sub	sp, #88	; 0x58
 801505c:	4614      	mov	r4, r2
 801505e:	461d      	mov	r5, r3
 8015060:	da08      	bge.n	8015074 <__swhatbuf_r+0x24>
 8015062:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015066:	2200      	movs	r2, #0
 8015068:	602a      	str	r2, [r5, #0]
 801506a:	061a      	lsls	r2, r3, #24
 801506c:	d410      	bmi.n	8015090 <__swhatbuf_r+0x40>
 801506e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015072:	e00e      	b.n	8015092 <__swhatbuf_r+0x42>
 8015074:	466a      	mov	r2, sp
 8015076:	f000 fd3b 	bl	8015af0 <_fstat_r>
 801507a:	2800      	cmp	r0, #0
 801507c:	dbf1      	blt.n	8015062 <__swhatbuf_r+0x12>
 801507e:	9a01      	ldr	r2, [sp, #4]
 8015080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015088:	425a      	negs	r2, r3
 801508a:	415a      	adcs	r2, r3
 801508c:	602a      	str	r2, [r5, #0]
 801508e:	e7ee      	b.n	801506e <__swhatbuf_r+0x1e>
 8015090:	2340      	movs	r3, #64	; 0x40
 8015092:	2000      	movs	r0, #0
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	b016      	add	sp, #88	; 0x58
 8015098:	bd70      	pop	{r4, r5, r6, pc}
	...

0801509c <__smakebuf_r>:
 801509c:	898b      	ldrh	r3, [r1, #12]
 801509e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80150a0:	079d      	lsls	r5, r3, #30
 80150a2:	4606      	mov	r6, r0
 80150a4:	460c      	mov	r4, r1
 80150a6:	d507      	bpl.n	80150b8 <__smakebuf_r+0x1c>
 80150a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80150ac:	6023      	str	r3, [r4, #0]
 80150ae:	6123      	str	r3, [r4, #16]
 80150b0:	2301      	movs	r3, #1
 80150b2:	6163      	str	r3, [r4, #20]
 80150b4:	b002      	add	sp, #8
 80150b6:	bd70      	pop	{r4, r5, r6, pc}
 80150b8:	ab01      	add	r3, sp, #4
 80150ba:	466a      	mov	r2, sp
 80150bc:	f7ff ffc8 	bl	8015050 <__swhatbuf_r>
 80150c0:	9900      	ldr	r1, [sp, #0]
 80150c2:	4605      	mov	r5, r0
 80150c4:	4630      	mov	r0, r6
 80150c6:	f7ff fc03 	bl	80148d0 <_malloc_r>
 80150ca:	b948      	cbnz	r0, 80150e0 <__smakebuf_r+0x44>
 80150cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150d0:	059a      	lsls	r2, r3, #22
 80150d2:	d4ef      	bmi.n	80150b4 <__smakebuf_r+0x18>
 80150d4:	f023 0303 	bic.w	r3, r3, #3
 80150d8:	f043 0302 	orr.w	r3, r3, #2
 80150dc:	81a3      	strh	r3, [r4, #12]
 80150de:	e7e3      	b.n	80150a8 <__smakebuf_r+0xc>
 80150e0:	4b0d      	ldr	r3, [pc, #52]	; (8015118 <__smakebuf_r+0x7c>)
 80150e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80150e4:	89a3      	ldrh	r3, [r4, #12]
 80150e6:	6020      	str	r0, [r4, #0]
 80150e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150ec:	81a3      	strh	r3, [r4, #12]
 80150ee:	9b00      	ldr	r3, [sp, #0]
 80150f0:	6163      	str	r3, [r4, #20]
 80150f2:	9b01      	ldr	r3, [sp, #4]
 80150f4:	6120      	str	r0, [r4, #16]
 80150f6:	b15b      	cbz	r3, 8015110 <__smakebuf_r+0x74>
 80150f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150fc:	4630      	mov	r0, r6
 80150fe:	f000 fd09 	bl	8015b14 <_isatty_r>
 8015102:	b128      	cbz	r0, 8015110 <__smakebuf_r+0x74>
 8015104:	89a3      	ldrh	r3, [r4, #12]
 8015106:	f023 0303 	bic.w	r3, r3, #3
 801510a:	f043 0301 	orr.w	r3, r3, #1
 801510e:	81a3      	strh	r3, [r4, #12]
 8015110:	89a0      	ldrh	r0, [r4, #12]
 8015112:	4305      	orrs	r5, r0
 8015114:	81a5      	strh	r5, [r4, #12]
 8015116:	e7cd      	b.n	80150b4 <__smakebuf_r+0x18>
 8015118:	08014ea9 	.word	0x08014ea9

0801511c <__malloc_lock>:
 801511c:	4801      	ldr	r0, [pc, #4]	; (8015124 <__malloc_lock+0x8>)
 801511e:	f7ff bf95 	b.w	801504c <__retarget_lock_acquire_recursive>
 8015122:	bf00      	nop
 8015124:	24002ccc 	.word	0x24002ccc

08015128 <__malloc_unlock>:
 8015128:	4801      	ldr	r0, [pc, #4]	; (8015130 <__malloc_unlock+0x8>)
 801512a:	f7ff bf90 	b.w	801504e <__retarget_lock_release_recursive>
 801512e:	bf00      	nop
 8015130:	24002ccc 	.word	0x24002ccc

08015134 <_realloc_r>:
 8015134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015138:	4680      	mov	r8, r0
 801513a:	4614      	mov	r4, r2
 801513c:	460e      	mov	r6, r1
 801513e:	b921      	cbnz	r1, 801514a <_realloc_r+0x16>
 8015140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015144:	4611      	mov	r1, r2
 8015146:	f7ff bbc3 	b.w	80148d0 <_malloc_r>
 801514a:	b92a      	cbnz	r2, 8015158 <_realloc_r+0x24>
 801514c:	f7ff fb54 	bl	80147f8 <_free_r>
 8015150:	4625      	mov	r5, r4
 8015152:	4628      	mov	r0, r5
 8015154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015158:	f000 fd18 	bl	8015b8c <_malloc_usable_size_r>
 801515c:	4284      	cmp	r4, r0
 801515e:	4607      	mov	r7, r0
 8015160:	d802      	bhi.n	8015168 <_realloc_r+0x34>
 8015162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015166:	d812      	bhi.n	801518e <_realloc_r+0x5a>
 8015168:	4621      	mov	r1, r4
 801516a:	4640      	mov	r0, r8
 801516c:	f7ff fbb0 	bl	80148d0 <_malloc_r>
 8015170:	4605      	mov	r5, r0
 8015172:	2800      	cmp	r0, #0
 8015174:	d0ed      	beq.n	8015152 <_realloc_r+0x1e>
 8015176:	42bc      	cmp	r4, r7
 8015178:	4622      	mov	r2, r4
 801517a:	4631      	mov	r1, r6
 801517c:	bf28      	it	cs
 801517e:	463a      	movcs	r2, r7
 8015180:	f7ff fb24 	bl	80147cc <memcpy>
 8015184:	4631      	mov	r1, r6
 8015186:	4640      	mov	r0, r8
 8015188:	f7ff fb36 	bl	80147f8 <_free_r>
 801518c:	e7e1      	b.n	8015152 <_realloc_r+0x1e>
 801518e:	4635      	mov	r5, r6
 8015190:	e7df      	b.n	8015152 <_realloc_r+0x1e>

08015192 <__ssputs_r>:
 8015192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015196:	688e      	ldr	r6, [r1, #8]
 8015198:	429e      	cmp	r6, r3
 801519a:	4682      	mov	sl, r0
 801519c:	460c      	mov	r4, r1
 801519e:	4690      	mov	r8, r2
 80151a0:	461f      	mov	r7, r3
 80151a2:	d838      	bhi.n	8015216 <__ssputs_r+0x84>
 80151a4:	898a      	ldrh	r2, [r1, #12]
 80151a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80151aa:	d032      	beq.n	8015212 <__ssputs_r+0x80>
 80151ac:	6825      	ldr	r5, [r4, #0]
 80151ae:	6909      	ldr	r1, [r1, #16]
 80151b0:	eba5 0901 	sub.w	r9, r5, r1
 80151b4:	6965      	ldr	r5, [r4, #20]
 80151b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80151be:	3301      	adds	r3, #1
 80151c0:	444b      	add	r3, r9
 80151c2:	106d      	asrs	r5, r5, #1
 80151c4:	429d      	cmp	r5, r3
 80151c6:	bf38      	it	cc
 80151c8:	461d      	movcc	r5, r3
 80151ca:	0553      	lsls	r3, r2, #21
 80151cc:	d531      	bpl.n	8015232 <__ssputs_r+0xa0>
 80151ce:	4629      	mov	r1, r5
 80151d0:	f7ff fb7e 	bl	80148d0 <_malloc_r>
 80151d4:	4606      	mov	r6, r0
 80151d6:	b950      	cbnz	r0, 80151ee <__ssputs_r+0x5c>
 80151d8:	230c      	movs	r3, #12
 80151da:	f8ca 3000 	str.w	r3, [sl]
 80151de:	89a3      	ldrh	r3, [r4, #12]
 80151e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151e4:	81a3      	strh	r3, [r4, #12]
 80151e6:	f04f 30ff 	mov.w	r0, #4294967295
 80151ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ee:	6921      	ldr	r1, [r4, #16]
 80151f0:	464a      	mov	r2, r9
 80151f2:	f7ff faeb 	bl	80147cc <memcpy>
 80151f6:	89a3      	ldrh	r3, [r4, #12]
 80151f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80151fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015200:	81a3      	strh	r3, [r4, #12]
 8015202:	6126      	str	r6, [r4, #16]
 8015204:	6165      	str	r5, [r4, #20]
 8015206:	444e      	add	r6, r9
 8015208:	eba5 0509 	sub.w	r5, r5, r9
 801520c:	6026      	str	r6, [r4, #0]
 801520e:	60a5      	str	r5, [r4, #8]
 8015210:	463e      	mov	r6, r7
 8015212:	42be      	cmp	r6, r7
 8015214:	d900      	bls.n	8015218 <__ssputs_r+0x86>
 8015216:	463e      	mov	r6, r7
 8015218:	6820      	ldr	r0, [r4, #0]
 801521a:	4632      	mov	r2, r6
 801521c:	4641      	mov	r1, r8
 801521e:	f000 fc9b 	bl	8015b58 <memmove>
 8015222:	68a3      	ldr	r3, [r4, #8]
 8015224:	1b9b      	subs	r3, r3, r6
 8015226:	60a3      	str	r3, [r4, #8]
 8015228:	6823      	ldr	r3, [r4, #0]
 801522a:	4433      	add	r3, r6
 801522c:	6023      	str	r3, [r4, #0]
 801522e:	2000      	movs	r0, #0
 8015230:	e7db      	b.n	80151ea <__ssputs_r+0x58>
 8015232:	462a      	mov	r2, r5
 8015234:	f7ff ff7e 	bl	8015134 <_realloc_r>
 8015238:	4606      	mov	r6, r0
 801523a:	2800      	cmp	r0, #0
 801523c:	d1e1      	bne.n	8015202 <__ssputs_r+0x70>
 801523e:	6921      	ldr	r1, [r4, #16]
 8015240:	4650      	mov	r0, sl
 8015242:	f7ff fad9 	bl	80147f8 <_free_r>
 8015246:	e7c7      	b.n	80151d8 <__ssputs_r+0x46>

08015248 <_svfiprintf_r>:
 8015248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801524c:	4698      	mov	r8, r3
 801524e:	898b      	ldrh	r3, [r1, #12]
 8015250:	061b      	lsls	r3, r3, #24
 8015252:	b09d      	sub	sp, #116	; 0x74
 8015254:	4607      	mov	r7, r0
 8015256:	460d      	mov	r5, r1
 8015258:	4614      	mov	r4, r2
 801525a:	d50e      	bpl.n	801527a <_svfiprintf_r+0x32>
 801525c:	690b      	ldr	r3, [r1, #16]
 801525e:	b963      	cbnz	r3, 801527a <_svfiprintf_r+0x32>
 8015260:	2140      	movs	r1, #64	; 0x40
 8015262:	f7ff fb35 	bl	80148d0 <_malloc_r>
 8015266:	6028      	str	r0, [r5, #0]
 8015268:	6128      	str	r0, [r5, #16]
 801526a:	b920      	cbnz	r0, 8015276 <_svfiprintf_r+0x2e>
 801526c:	230c      	movs	r3, #12
 801526e:	603b      	str	r3, [r7, #0]
 8015270:	f04f 30ff 	mov.w	r0, #4294967295
 8015274:	e0d1      	b.n	801541a <_svfiprintf_r+0x1d2>
 8015276:	2340      	movs	r3, #64	; 0x40
 8015278:	616b      	str	r3, [r5, #20]
 801527a:	2300      	movs	r3, #0
 801527c:	9309      	str	r3, [sp, #36]	; 0x24
 801527e:	2320      	movs	r3, #32
 8015280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015284:	f8cd 800c 	str.w	r8, [sp, #12]
 8015288:	2330      	movs	r3, #48	; 0x30
 801528a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015434 <_svfiprintf_r+0x1ec>
 801528e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015292:	f04f 0901 	mov.w	r9, #1
 8015296:	4623      	mov	r3, r4
 8015298:	469a      	mov	sl, r3
 801529a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801529e:	b10a      	cbz	r2, 80152a4 <_svfiprintf_r+0x5c>
 80152a0:	2a25      	cmp	r2, #37	; 0x25
 80152a2:	d1f9      	bne.n	8015298 <_svfiprintf_r+0x50>
 80152a4:	ebba 0b04 	subs.w	fp, sl, r4
 80152a8:	d00b      	beq.n	80152c2 <_svfiprintf_r+0x7a>
 80152aa:	465b      	mov	r3, fp
 80152ac:	4622      	mov	r2, r4
 80152ae:	4629      	mov	r1, r5
 80152b0:	4638      	mov	r0, r7
 80152b2:	f7ff ff6e 	bl	8015192 <__ssputs_r>
 80152b6:	3001      	adds	r0, #1
 80152b8:	f000 80aa 	beq.w	8015410 <_svfiprintf_r+0x1c8>
 80152bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152be:	445a      	add	r2, fp
 80152c0:	9209      	str	r2, [sp, #36]	; 0x24
 80152c2:	f89a 3000 	ldrb.w	r3, [sl]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	f000 80a2 	beq.w	8015410 <_svfiprintf_r+0x1c8>
 80152cc:	2300      	movs	r3, #0
 80152ce:	f04f 32ff 	mov.w	r2, #4294967295
 80152d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152d6:	f10a 0a01 	add.w	sl, sl, #1
 80152da:	9304      	str	r3, [sp, #16]
 80152dc:	9307      	str	r3, [sp, #28]
 80152de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80152e2:	931a      	str	r3, [sp, #104]	; 0x68
 80152e4:	4654      	mov	r4, sl
 80152e6:	2205      	movs	r2, #5
 80152e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152ec:	4851      	ldr	r0, [pc, #324]	; (8015434 <_svfiprintf_r+0x1ec>)
 80152ee:	f7ea ffff 	bl	80002f0 <memchr>
 80152f2:	9a04      	ldr	r2, [sp, #16]
 80152f4:	b9d8      	cbnz	r0, 801532e <_svfiprintf_r+0xe6>
 80152f6:	06d0      	lsls	r0, r2, #27
 80152f8:	bf44      	itt	mi
 80152fa:	2320      	movmi	r3, #32
 80152fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015300:	0711      	lsls	r1, r2, #28
 8015302:	bf44      	itt	mi
 8015304:	232b      	movmi	r3, #43	; 0x2b
 8015306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801530a:	f89a 3000 	ldrb.w	r3, [sl]
 801530e:	2b2a      	cmp	r3, #42	; 0x2a
 8015310:	d015      	beq.n	801533e <_svfiprintf_r+0xf6>
 8015312:	9a07      	ldr	r2, [sp, #28]
 8015314:	4654      	mov	r4, sl
 8015316:	2000      	movs	r0, #0
 8015318:	f04f 0c0a 	mov.w	ip, #10
 801531c:	4621      	mov	r1, r4
 801531e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015322:	3b30      	subs	r3, #48	; 0x30
 8015324:	2b09      	cmp	r3, #9
 8015326:	d94e      	bls.n	80153c6 <_svfiprintf_r+0x17e>
 8015328:	b1b0      	cbz	r0, 8015358 <_svfiprintf_r+0x110>
 801532a:	9207      	str	r2, [sp, #28]
 801532c:	e014      	b.n	8015358 <_svfiprintf_r+0x110>
 801532e:	eba0 0308 	sub.w	r3, r0, r8
 8015332:	fa09 f303 	lsl.w	r3, r9, r3
 8015336:	4313      	orrs	r3, r2
 8015338:	9304      	str	r3, [sp, #16]
 801533a:	46a2      	mov	sl, r4
 801533c:	e7d2      	b.n	80152e4 <_svfiprintf_r+0x9c>
 801533e:	9b03      	ldr	r3, [sp, #12]
 8015340:	1d19      	adds	r1, r3, #4
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	9103      	str	r1, [sp, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	bfbb      	ittet	lt
 801534a:	425b      	neglt	r3, r3
 801534c:	f042 0202 	orrlt.w	r2, r2, #2
 8015350:	9307      	strge	r3, [sp, #28]
 8015352:	9307      	strlt	r3, [sp, #28]
 8015354:	bfb8      	it	lt
 8015356:	9204      	strlt	r2, [sp, #16]
 8015358:	7823      	ldrb	r3, [r4, #0]
 801535a:	2b2e      	cmp	r3, #46	; 0x2e
 801535c:	d10c      	bne.n	8015378 <_svfiprintf_r+0x130>
 801535e:	7863      	ldrb	r3, [r4, #1]
 8015360:	2b2a      	cmp	r3, #42	; 0x2a
 8015362:	d135      	bne.n	80153d0 <_svfiprintf_r+0x188>
 8015364:	9b03      	ldr	r3, [sp, #12]
 8015366:	1d1a      	adds	r2, r3, #4
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	9203      	str	r2, [sp, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	bfb8      	it	lt
 8015370:	f04f 33ff 	movlt.w	r3, #4294967295
 8015374:	3402      	adds	r4, #2
 8015376:	9305      	str	r3, [sp, #20]
 8015378:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015444 <_svfiprintf_r+0x1fc>
 801537c:	7821      	ldrb	r1, [r4, #0]
 801537e:	2203      	movs	r2, #3
 8015380:	4650      	mov	r0, sl
 8015382:	f7ea ffb5 	bl	80002f0 <memchr>
 8015386:	b140      	cbz	r0, 801539a <_svfiprintf_r+0x152>
 8015388:	2340      	movs	r3, #64	; 0x40
 801538a:	eba0 000a 	sub.w	r0, r0, sl
 801538e:	fa03 f000 	lsl.w	r0, r3, r0
 8015392:	9b04      	ldr	r3, [sp, #16]
 8015394:	4303      	orrs	r3, r0
 8015396:	3401      	adds	r4, #1
 8015398:	9304      	str	r3, [sp, #16]
 801539a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801539e:	4826      	ldr	r0, [pc, #152]	; (8015438 <_svfiprintf_r+0x1f0>)
 80153a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80153a4:	2206      	movs	r2, #6
 80153a6:	f7ea ffa3 	bl	80002f0 <memchr>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d038      	beq.n	8015420 <_svfiprintf_r+0x1d8>
 80153ae:	4b23      	ldr	r3, [pc, #140]	; (801543c <_svfiprintf_r+0x1f4>)
 80153b0:	bb1b      	cbnz	r3, 80153fa <_svfiprintf_r+0x1b2>
 80153b2:	9b03      	ldr	r3, [sp, #12]
 80153b4:	3307      	adds	r3, #7
 80153b6:	f023 0307 	bic.w	r3, r3, #7
 80153ba:	3308      	adds	r3, #8
 80153bc:	9303      	str	r3, [sp, #12]
 80153be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153c0:	4433      	add	r3, r6
 80153c2:	9309      	str	r3, [sp, #36]	; 0x24
 80153c4:	e767      	b.n	8015296 <_svfiprintf_r+0x4e>
 80153c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80153ca:	460c      	mov	r4, r1
 80153cc:	2001      	movs	r0, #1
 80153ce:	e7a5      	b.n	801531c <_svfiprintf_r+0xd4>
 80153d0:	2300      	movs	r3, #0
 80153d2:	3401      	adds	r4, #1
 80153d4:	9305      	str	r3, [sp, #20]
 80153d6:	4619      	mov	r1, r3
 80153d8:	f04f 0c0a 	mov.w	ip, #10
 80153dc:	4620      	mov	r0, r4
 80153de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153e2:	3a30      	subs	r2, #48	; 0x30
 80153e4:	2a09      	cmp	r2, #9
 80153e6:	d903      	bls.n	80153f0 <_svfiprintf_r+0x1a8>
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d0c5      	beq.n	8015378 <_svfiprintf_r+0x130>
 80153ec:	9105      	str	r1, [sp, #20]
 80153ee:	e7c3      	b.n	8015378 <_svfiprintf_r+0x130>
 80153f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80153f4:	4604      	mov	r4, r0
 80153f6:	2301      	movs	r3, #1
 80153f8:	e7f0      	b.n	80153dc <_svfiprintf_r+0x194>
 80153fa:	ab03      	add	r3, sp, #12
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	462a      	mov	r2, r5
 8015400:	4b0f      	ldr	r3, [pc, #60]	; (8015440 <_svfiprintf_r+0x1f8>)
 8015402:	a904      	add	r1, sp, #16
 8015404:	4638      	mov	r0, r7
 8015406:	f3af 8000 	nop.w
 801540a:	1c42      	adds	r2, r0, #1
 801540c:	4606      	mov	r6, r0
 801540e:	d1d6      	bne.n	80153be <_svfiprintf_r+0x176>
 8015410:	89ab      	ldrh	r3, [r5, #12]
 8015412:	065b      	lsls	r3, r3, #25
 8015414:	f53f af2c 	bmi.w	8015270 <_svfiprintf_r+0x28>
 8015418:	9809      	ldr	r0, [sp, #36]	; 0x24
 801541a:	b01d      	add	sp, #116	; 0x74
 801541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015420:	ab03      	add	r3, sp, #12
 8015422:	9300      	str	r3, [sp, #0]
 8015424:	462a      	mov	r2, r5
 8015426:	4b06      	ldr	r3, [pc, #24]	; (8015440 <_svfiprintf_r+0x1f8>)
 8015428:	a904      	add	r1, sp, #16
 801542a:	4638      	mov	r0, r7
 801542c:	f000 f9d4 	bl	80157d8 <_printf_i>
 8015430:	e7eb      	b.n	801540a <_svfiprintf_r+0x1c2>
 8015432:	bf00      	nop
 8015434:	0801659c 	.word	0x0801659c
 8015438:	080165a6 	.word	0x080165a6
 801543c:	00000000 	.word	0x00000000
 8015440:	08015193 	.word	0x08015193
 8015444:	080165a2 	.word	0x080165a2

08015448 <__sfputc_r>:
 8015448:	6893      	ldr	r3, [r2, #8]
 801544a:	3b01      	subs	r3, #1
 801544c:	2b00      	cmp	r3, #0
 801544e:	b410      	push	{r4}
 8015450:	6093      	str	r3, [r2, #8]
 8015452:	da08      	bge.n	8015466 <__sfputc_r+0x1e>
 8015454:	6994      	ldr	r4, [r2, #24]
 8015456:	42a3      	cmp	r3, r4
 8015458:	db01      	blt.n	801545e <__sfputc_r+0x16>
 801545a:	290a      	cmp	r1, #10
 801545c:	d103      	bne.n	8015466 <__sfputc_r+0x1e>
 801545e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015462:	f7ff bb7b 	b.w	8014b5c <__swbuf_r>
 8015466:	6813      	ldr	r3, [r2, #0]
 8015468:	1c58      	adds	r0, r3, #1
 801546a:	6010      	str	r0, [r2, #0]
 801546c:	7019      	strb	r1, [r3, #0]
 801546e:	4608      	mov	r0, r1
 8015470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015474:	4770      	bx	lr

08015476 <__sfputs_r>:
 8015476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015478:	4606      	mov	r6, r0
 801547a:	460f      	mov	r7, r1
 801547c:	4614      	mov	r4, r2
 801547e:	18d5      	adds	r5, r2, r3
 8015480:	42ac      	cmp	r4, r5
 8015482:	d101      	bne.n	8015488 <__sfputs_r+0x12>
 8015484:	2000      	movs	r0, #0
 8015486:	e007      	b.n	8015498 <__sfputs_r+0x22>
 8015488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801548c:	463a      	mov	r2, r7
 801548e:	4630      	mov	r0, r6
 8015490:	f7ff ffda 	bl	8015448 <__sfputc_r>
 8015494:	1c43      	adds	r3, r0, #1
 8015496:	d1f3      	bne.n	8015480 <__sfputs_r+0xa>
 8015498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801549c <_vfiprintf_r>:
 801549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a0:	460d      	mov	r5, r1
 80154a2:	b09d      	sub	sp, #116	; 0x74
 80154a4:	4614      	mov	r4, r2
 80154a6:	4698      	mov	r8, r3
 80154a8:	4606      	mov	r6, r0
 80154aa:	b118      	cbz	r0, 80154b4 <_vfiprintf_r+0x18>
 80154ac:	6983      	ldr	r3, [r0, #24]
 80154ae:	b90b      	cbnz	r3, 80154b4 <_vfiprintf_r+0x18>
 80154b0:	f7ff fd2e 	bl	8014f10 <__sinit>
 80154b4:	4b89      	ldr	r3, [pc, #548]	; (80156dc <_vfiprintf_r+0x240>)
 80154b6:	429d      	cmp	r5, r3
 80154b8:	d11b      	bne.n	80154f2 <_vfiprintf_r+0x56>
 80154ba:	6875      	ldr	r5, [r6, #4]
 80154bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154be:	07d9      	lsls	r1, r3, #31
 80154c0:	d405      	bmi.n	80154ce <_vfiprintf_r+0x32>
 80154c2:	89ab      	ldrh	r3, [r5, #12]
 80154c4:	059a      	lsls	r2, r3, #22
 80154c6:	d402      	bmi.n	80154ce <_vfiprintf_r+0x32>
 80154c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154ca:	f7ff fdbf 	bl	801504c <__retarget_lock_acquire_recursive>
 80154ce:	89ab      	ldrh	r3, [r5, #12]
 80154d0:	071b      	lsls	r3, r3, #28
 80154d2:	d501      	bpl.n	80154d8 <_vfiprintf_r+0x3c>
 80154d4:	692b      	ldr	r3, [r5, #16]
 80154d6:	b9eb      	cbnz	r3, 8015514 <_vfiprintf_r+0x78>
 80154d8:	4629      	mov	r1, r5
 80154da:	4630      	mov	r0, r6
 80154dc:	f7ff fb90 	bl	8014c00 <__swsetup_r>
 80154e0:	b1c0      	cbz	r0, 8015514 <_vfiprintf_r+0x78>
 80154e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154e4:	07dc      	lsls	r4, r3, #31
 80154e6:	d50e      	bpl.n	8015506 <_vfiprintf_r+0x6a>
 80154e8:	f04f 30ff 	mov.w	r0, #4294967295
 80154ec:	b01d      	add	sp, #116	; 0x74
 80154ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f2:	4b7b      	ldr	r3, [pc, #492]	; (80156e0 <_vfiprintf_r+0x244>)
 80154f4:	429d      	cmp	r5, r3
 80154f6:	d101      	bne.n	80154fc <_vfiprintf_r+0x60>
 80154f8:	68b5      	ldr	r5, [r6, #8]
 80154fa:	e7df      	b.n	80154bc <_vfiprintf_r+0x20>
 80154fc:	4b79      	ldr	r3, [pc, #484]	; (80156e4 <_vfiprintf_r+0x248>)
 80154fe:	429d      	cmp	r5, r3
 8015500:	bf08      	it	eq
 8015502:	68f5      	ldreq	r5, [r6, #12]
 8015504:	e7da      	b.n	80154bc <_vfiprintf_r+0x20>
 8015506:	89ab      	ldrh	r3, [r5, #12]
 8015508:	0598      	lsls	r0, r3, #22
 801550a:	d4ed      	bmi.n	80154e8 <_vfiprintf_r+0x4c>
 801550c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801550e:	f7ff fd9e 	bl	801504e <__retarget_lock_release_recursive>
 8015512:	e7e9      	b.n	80154e8 <_vfiprintf_r+0x4c>
 8015514:	2300      	movs	r3, #0
 8015516:	9309      	str	r3, [sp, #36]	; 0x24
 8015518:	2320      	movs	r3, #32
 801551a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801551e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015522:	2330      	movs	r3, #48	; 0x30
 8015524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80156e8 <_vfiprintf_r+0x24c>
 8015528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801552c:	f04f 0901 	mov.w	r9, #1
 8015530:	4623      	mov	r3, r4
 8015532:	469a      	mov	sl, r3
 8015534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015538:	b10a      	cbz	r2, 801553e <_vfiprintf_r+0xa2>
 801553a:	2a25      	cmp	r2, #37	; 0x25
 801553c:	d1f9      	bne.n	8015532 <_vfiprintf_r+0x96>
 801553e:	ebba 0b04 	subs.w	fp, sl, r4
 8015542:	d00b      	beq.n	801555c <_vfiprintf_r+0xc0>
 8015544:	465b      	mov	r3, fp
 8015546:	4622      	mov	r2, r4
 8015548:	4629      	mov	r1, r5
 801554a:	4630      	mov	r0, r6
 801554c:	f7ff ff93 	bl	8015476 <__sfputs_r>
 8015550:	3001      	adds	r0, #1
 8015552:	f000 80aa 	beq.w	80156aa <_vfiprintf_r+0x20e>
 8015556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015558:	445a      	add	r2, fp
 801555a:	9209      	str	r2, [sp, #36]	; 0x24
 801555c:	f89a 3000 	ldrb.w	r3, [sl]
 8015560:	2b00      	cmp	r3, #0
 8015562:	f000 80a2 	beq.w	80156aa <_vfiprintf_r+0x20e>
 8015566:	2300      	movs	r3, #0
 8015568:	f04f 32ff 	mov.w	r2, #4294967295
 801556c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015570:	f10a 0a01 	add.w	sl, sl, #1
 8015574:	9304      	str	r3, [sp, #16]
 8015576:	9307      	str	r3, [sp, #28]
 8015578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801557c:	931a      	str	r3, [sp, #104]	; 0x68
 801557e:	4654      	mov	r4, sl
 8015580:	2205      	movs	r2, #5
 8015582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015586:	4858      	ldr	r0, [pc, #352]	; (80156e8 <_vfiprintf_r+0x24c>)
 8015588:	f7ea feb2 	bl	80002f0 <memchr>
 801558c:	9a04      	ldr	r2, [sp, #16]
 801558e:	b9d8      	cbnz	r0, 80155c8 <_vfiprintf_r+0x12c>
 8015590:	06d1      	lsls	r1, r2, #27
 8015592:	bf44      	itt	mi
 8015594:	2320      	movmi	r3, #32
 8015596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801559a:	0713      	lsls	r3, r2, #28
 801559c:	bf44      	itt	mi
 801559e:	232b      	movmi	r3, #43	; 0x2b
 80155a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155a4:	f89a 3000 	ldrb.w	r3, [sl]
 80155a8:	2b2a      	cmp	r3, #42	; 0x2a
 80155aa:	d015      	beq.n	80155d8 <_vfiprintf_r+0x13c>
 80155ac:	9a07      	ldr	r2, [sp, #28]
 80155ae:	4654      	mov	r4, sl
 80155b0:	2000      	movs	r0, #0
 80155b2:	f04f 0c0a 	mov.w	ip, #10
 80155b6:	4621      	mov	r1, r4
 80155b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155bc:	3b30      	subs	r3, #48	; 0x30
 80155be:	2b09      	cmp	r3, #9
 80155c0:	d94e      	bls.n	8015660 <_vfiprintf_r+0x1c4>
 80155c2:	b1b0      	cbz	r0, 80155f2 <_vfiprintf_r+0x156>
 80155c4:	9207      	str	r2, [sp, #28]
 80155c6:	e014      	b.n	80155f2 <_vfiprintf_r+0x156>
 80155c8:	eba0 0308 	sub.w	r3, r0, r8
 80155cc:	fa09 f303 	lsl.w	r3, r9, r3
 80155d0:	4313      	orrs	r3, r2
 80155d2:	9304      	str	r3, [sp, #16]
 80155d4:	46a2      	mov	sl, r4
 80155d6:	e7d2      	b.n	801557e <_vfiprintf_r+0xe2>
 80155d8:	9b03      	ldr	r3, [sp, #12]
 80155da:	1d19      	adds	r1, r3, #4
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	9103      	str	r1, [sp, #12]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	bfbb      	ittet	lt
 80155e4:	425b      	neglt	r3, r3
 80155e6:	f042 0202 	orrlt.w	r2, r2, #2
 80155ea:	9307      	strge	r3, [sp, #28]
 80155ec:	9307      	strlt	r3, [sp, #28]
 80155ee:	bfb8      	it	lt
 80155f0:	9204      	strlt	r2, [sp, #16]
 80155f2:	7823      	ldrb	r3, [r4, #0]
 80155f4:	2b2e      	cmp	r3, #46	; 0x2e
 80155f6:	d10c      	bne.n	8015612 <_vfiprintf_r+0x176>
 80155f8:	7863      	ldrb	r3, [r4, #1]
 80155fa:	2b2a      	cmp	r3, #42	; 0x2a
 80155fc:	d135      	bne.n	801566a <_vfiprintf_r+0x1ce>
 80155fe:	9b03      	ldr	r3, [sp, #12]
 8015600:	1d1a      	adds	r2, r3, #4
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	9203      	str	r2, [sp, #12]
 8015606:	2b00      	cmp	r3, #0
 8015608:	bfb8      	it	lt
 801560a:	f04f 33ff 	movlt.w	r3, #4294967295
 801560e:	3402      	adds	r4, #2
 8015610:	9305      	str	r3, [sp, #20]
 8015612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80156f8 <_vfiprintf_r+0x25c>
 8015616:	7821      	ldrb	r1, [r4, #0]
 8015618:	2203      	movs	r2, #3
 801561a:	4650      	mov	r0, sl
 801561c:	f7ea fe68 	bl	80002f0 <memchr>
 8015620:	b140      	cbz	r0, 8015634 <_vfiprintf_r+0x198>
 8015622:	2340      	movs	r3, #64	; 0x40
 8015624:	eba0 000a 	sub.w	r0, r0, sl
 8015628:	fa03 f000 	lsl.w	r0, r3, r0
 801562c:	9b04      	ldr	r3, [sp, #16]
 801562e:	4303      	orrs	r3, r0
 8015630:	3401      	adds	r4, #1
 8015632:	9304      	str	r3, [sp, #16]
 8015634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015638:	482c      	ldr	r0, [pc, #176]	; (80156ec <_vfiprintf_r+0x250>)
 801563a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801563e:	2206      	movs	r2, #6
 8015640:	f7ea fe56 	bl	80002f0 <memchr>
 8015644:	2800      	cmp	r0, #0
 8015646:	d03f      	beq.n	80156c8 <_vfiprintf_r+0x22c>
 8015648:	4b29      	ldr	r3, [pc, #164]	; (80156f0 <_vfiprintf_r+0x254>)
 801564a:	bb1b      	cbnz	r3, 8015694 <_vfiprintf_r+0x1f8>
 801564c:	9b03      	ldr	r3, [sp, #12]
 801564e:	3307      	adds	r3, #7
 8015650:	f023 0307 	bic.w	r3, r3, #7
 8015654:	3308      	adds	r3, #8
 8015656:	9303      	str	r3, [sp, #12]
 8015658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801565a:	443b      	add	r3, r7
 801565c:	9309      	str	r3, [sp, #36]	; 0x24
 801565e:	e767      	b.n	8015530 <_vfiprintf_r+0x94>
 8015660:	fb0c 3202 	mla	r2, ip, r2, r3
 8015664:	460c      	mov	r4, r1
 8015666:	2001      	movs	r0, #1
 8015668:	e7a5      	b.n	80155b6 <_vfiprintf_r+0x11a>
 801566a:	2300      	movs	r3, #0
 801566c:	3401      	adds	r4, #1
 801566e:	9305      	str	r3, [sp, #20]
 8015670:	4619      	mov	r1, r3
 8015672:	f04f 0c0a 	mov.w	ip, #10
 8015676:	4620      	mov	r0, r4
 8015678:	f810 2b01 	ldrb.w	r2, [r0], #1
 801567c:	3a30      	subs	r2, #48	; 0x30
 801567e:	2a09      	cmp	r2, #9
 8015680:	d903      	bls.n	801568a <_vfiprintf_r+0x1ee>
 8015682:	2b00      	cmp	r3, #0
 8015684:	d0c5      	beq.n	8015612 <_vfiprintf_r+0x176>
 8015686:	9105      	str	r1, [sp, #20]
 8015688:	e7c3      	b.n	8015612 <_vfiprintf_r+0x176>
 801568a:	fb0c 2101 	mla	r1, ip, r1, r2
 801568e:	4604      	mov	r4, r0
 8015690:	2301      	movs	r3, #1
 8015692:	e7f0      	b.n	8015676 <_vfiprintf_r+0x1da>
 8015694:	ab03      	add	r3, sp, #12
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	462a      	mov	r2, r5
 801569a:	4b16      	ldr	r3, [pc, #88]	; (80156f4 <_vfiprintf_r+0x258>)
 801569c:	a904      	add	r1, sp, #16
 801569e:	4630      	mov	r0, r6
 80156a0:	f3af 8000 	nop.w
 80156a4:	4607      	mov	r7, r0
 80156a6:	1c78      	adds	r0, r7, #1
 80156a8:	d1d6      	bne.n	8015658 <_vfiprintf_r+0x1bc>
 80156aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156ac:	07d9      	lsls	r1, r3, #31
 80156ae:	d405      	bmi.n	80156bc <_vfiprintf_r+0x220>
 80156b0:	89ab      	ldrh	r3, [r5, #12]
 80156b2:	059a      	lsls	r2, r3, #22
 80156b4:	d402      	bmi.n	80156bc <_vfiprintf_r+0x220>
 80156b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156b8:	f7ff fcc9 	bl	801504e <__retarget_lock_release_recursive>
 80156bc:	89ab      	ldrh	r3, [r5, #12]
 80156be:	065b      	lsls	r3, r3, #25
 80156c0:	f53f af12 	bmi.w	80154e8 <_vfiprintf_r+0x4c>
 80156c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156c6:	e711      	b.n	80154ec <_vfiprintf_r+0x50>
 80156c8:	ab03      	add	r3, sp, #12
 80156ca:	9300      	str	r3, [sp, #0]
 80156cc:	462a      	mov	r2, r5
 80156ce:	4b09      	ldr	r3, [pc, #36]	; (80156f4 <_vfiprintf_r+0x258>)
 80156d0:	a904      	add	r1, sp, #16
 80156d2:	4630      	mov	r0, r6
 80156d4:	f000 f880 	bl	80157d8 <_printf_i>
 80156d8:	e7e4      	b.n	80156a4 <_vfiprintf_r+0x208>
 80156da:	bf00      	nop
 80156dc:	0801655c 	.word	0x0801655c
 80156e0:	0801657c 	.word	0x0801657c
 80156e4:	0801653c 	.word	0x0801653c
 80156e8:	0801659c 	.word	0x0801659c
 80156ec:	080165a6 	.word	0x080165a6
 80156f0:	00000000 	.word	0x00000000
 80156f4:	08015477 	.word	0x08015477
 80156f8:	080165a2 	.word	0x080165a2

080156fc <_printf_common>:
 80156fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015700:	4616      	mov	r6, r2
 8015702:	4699      	mov	r9, r3
 8015704:	688a      	ldr	r2, [r1, #8]
 8015706:	690b      	ldr	r3, [r1, #16]
 8015708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801570c:	4293      	cmp	r3, r2
 801570e:	bfb8      	it	lt
 8015710:	4613      	movlt	r3, r2
 8015712:	6033      	str	r3, [r6, #0]
 8015714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015718:	4607      	mov	r7, r0
 801571a:	460c      	mov	r4, r1
 801571c:	b10a      	cbz	r2, 8015722 <_printf_common+0x26>
 801571e:	3301      	adds	r3, #1
 8015720:	6033      	str	r3, [r6, #0]
 8015722:	6823      	ldr	r3, [r4, #0]
 8015724:	0699      	lsls	r1, r3, #26
 8015726:	bf42      	ittt	mi
 8015728:	6833      	ldrmi	r3, [r6, #0]
 801572a:	3302      	addmi	r3, #2
 801572c:	6033      	strmi	r3, [r6, #0]
 801572e:	6825      	ldr	r5, [r4, #0]
 8015730:	f015 0506 	ands.w	r5, r5, #6
 8015734:	d106      	bne.n	8015744 <_printf_common+0x48>
 8015736:	f104 0a19 	add.w	sl, r4, #25
 801573a:	68e3      	ldr	r3, [r4, #12]
 801573c:	6832      	ldr	r2, [r6, #0]
 801573e:	1a9b      	subs	r3, r3, r2
 8015740:	42ab      	cmp	r3, r5
 8015742:	dc26      	bgt.n	8015792 <_printf_common+0x96>
 8015744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015748:	1e13      	subs	r3, r2, #0
 801574a:	6822      	ldr	r2, [r4, #0]
 801574c:	bf18      	it	ne
 801574e:	2301      	movne	r3, #1
 8015750:	0692      	lsls	r2, r2, #26
 8015752:	d42b      	bmi.n	80157ac <_printf_common+0xb0>
 8015754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015758:	4649      	mov	r1, r9
 801575a:	4638      	mov	r0, r7
 801575c:	47c0      	blx	r8
 801575e:	3001      	adds	r0, #1
 8015760:	d01e      	beq.n	80157a0 <_printf_common+0xa4>
 8015762:	6823      	ldr	r3, [r4, #0]
 8015764:	68e5      	ldr	r5, [r4, #12]
 8015766:	6832      	ldr	r2, [r6, #0]
 8015768:	f003 0306 	and.w	r3, r3, #6
 801576c:	2b04      	cmp	r3, #4
 801576e:	bf08      	it	eq
 8015770:	1aad      	subeq	r5, r5, r2
 8015772:	68a3      	ldr	r3, [r4, #8]
 8015774:	6922      	ldr	r2, [r4, #16]
 8015776:	bf0c      	ite	eq
 8015778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801577c:	2500      	movne	r5, #0
 801577e:	4293      	cmp	r3, r2
 8015780:	bfc4      	itt	gt
 8015782:	1a9b      	subgt	r3, r3, r2
 8015784:	18ed      	addgt	r5, r5, r3
 8015786:	2600      	movs	r6, #0
 8015788:	341a      	adds	r4, #26
 801578a:	42b5      	cmp	r5, r6
 801578c:	d11a      	bne.n	80157c4 <_printf_common+0xc8>
 801578e:	2000      	movs	r0, #0
 8015790:	e008      	b.n	80157a4 <_printf_common+0xa8>
 8015792:	2301      	movs	r3, #1
 8015794:	4652      	mov	r2, sl
 8015796:	4649      	mov	r1, r9
 8015798:	4638      	mov	r0, r7
 801579a:	47c0      	blx	r8
 801579c:	3001      	adds	r0, #1
 801579e:	d103      	bne.n	80157a8 <_printf_common+0xac>
 80157a0:	f04f 30ff 	mov.w	r0, #4294967295
 80157a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157a8:	3501      	adds	r5, #1
 80157aa:	e7c6      	b.n	801573a <_printf_common+0x3e>
 80157ac:	18e1      	adds	r1, r4, r3
 80157ae:	1c5a      	adds	r2, r3, #1
 80157b0:	2030      	movs	r0, #48	; 0x30
 80157b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80157b6:	4422      	add	r2, r4
 80157b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80157bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80157c0:	3302      	adds	r3, #2
 80157c2:	e7c7      	b.n	8015754 <_printf_common+0x58>
 80157c4:	2301      	movs	r3, #1
 80157c6:	4622      	mov	r2, r4
 80157c8:	4649      	mov	r1, r9
 80157ca:	4638      	mov	r0, r7
 80157cc:	47c0      	blx	r8
 80157ce:	3001      	adds	r0, #1
 80157d0:	d0e6      	beq.n	80157a0 <_printf_common+0xa4>
 80157d2:	3601      	adds	r6, #1
 80157d4:	e7d9      	b.n	801578a <_printf_common+0x8e>
	...

080157d8 <_printf_i>:
 80157d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157dc:	7e0f      	ldrb	r7, [r1, #24]
 80157de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80157e0:	2f78      	cmp	r7, #120	; 0x78
 80157e2:	4691      	mov	r9, r2
 80157e4:	4680      	mov	r8, r0
 80157e6:	460c      	mov	r4, r1
 80157e8:	469a      	mov	sl, r3
 80157ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80157ee:	d807      	bhi.n	8015800 <_printf_i+0x28>
 80157f0:	2f62      	cmp	r7, #98	; 0x62
 80157f2:	d80a      	bhi.n	801580a <_printf_i+0x32>
 80157f4:	2f00      	cmp	r7, #0
 80157f6:	f000 80d8 	beq.w	80159aa <_printf_i+0x1d2>
 80157fa:	2f58      	cmp	r7, #88	; 0x58
 80157fc:	f000 80a3 	beq.w	8015946 <_printf_i+0x16e>
 8015800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015808:	e03a      	b.n	8015880 <_printf_i+0xa8>
 801580a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801580e:	2b15      	cmp	r3, #21
 8015810:	d8f6      	bhi.n	8015800 <_printf_i+0x28>
 8015812:	a101      	add	r1, pc, #4	; (adr r1, 8015818 <_printf_i+0x40>)
 8015814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015818:	08015871 	.word	0x08015871
 801581c:	08015885 	.word	0x08015885
 8015820:	08015801 	.word	0x08015801
 8015824:	08015801 	.word	0x08015801
 8015828:	08015801 	.word	0x08015801
 801582c:	08015801 	.word	0x08015801
 8015830:	08015885 	.word	0x08015885
 8015834:	08015801 	.word	0x08015801
 8015838:	08015801 	.word	0x08015801
 801583c:	08015801 	.word	0x08015801
 8015840:	08015801 	.word	0x08015801
 8015844:	08015991 	.word	0x08015991
 8015848:	080158b5 	.word	0x080158b5
 801584c:	08015973 	.word	0x08015973
 8015850:	08015801 	.word	0x08015801
 8015854:	08015801 	.word	0x08015801
 8015858:	080159b3 	.word	0x080159b3
 801585c:	08015801 	.word	0x08015801
 8015860:	080158b5 	.word	0x080158b5
 8015864:	08015801 	.word	0x08015801
 8015868:	08015801 	.word	0x08015801
 801586c:	0801597b 	.word	0x0801597b
 8015870:	682b      	ldr	r3, [r5, #0]
 8015872:	1d1a      	adds	r2, r3, #4
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	602a      	str	r2, [r5, #0]
 8015878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801587c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015880:	2301      	movs	r3, #1
 8015882:	e0a3      	b.n	80159cc <_printf_i+0x1f4>
 8015884:	6820      	ldr	r0, [r4, #0]
 8015886:	6829      	ldr	r1, [r5, #0]
 8015888:	0606      	lsls	r6, r0, #24
 801588a:	f101 0304 	add.w	r3, r1, #4
 801588e:	d50a      	bpl.n	80158a6 <_printf_i+0xce>
 8015890:	680e      	ldr	r6, [r1, #0]
 8015892:	602b      	str	r3, [r5, #0]
 8015894:	2e00      	cmp	r6, #0
 8015896:	da03      	bge.n	80158a0 <_printf_i+0xc8>
 8015898:	232d      	movs	r3, #45	; 0x2d
 801589a:	4276      	negs	r6, r6
 801589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158a0:	485e      	ldr	r0, [pc, #376]	; (8015a1c <_printf_i+0x244>)
 80158a2:	230a      	movs	r3, #10
 80158a4:	e019      	b.n	80158da <_printf_i+0x102>
 80158a6:	680e      	ldr	r6, [r1, #0]
 80158a8:	602b      	str	r3, [r5, #0]
 80158aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80158ae:	bf18      	it	ne
 80158b0:	b236      	sxthne	r6, r6
 80158b2:	e7ef      	b.n	8015894 <_printf_i+0xbc>
 80158b4:	682b      	ldr	r3, [r5, #0]
 80158b6:	6820      	ldr	r0, [r4, #0]
 80158b8:	1d19      	adds	r1, r3, #4
 80158ba:	6029      	str	r1, [r5, #0]
 80158bc:	0601      	lsls	r1, r0, #24
 80158be:	d501      	bpl.n	80158c4 <_printf_i+0xec>
 80158c0:	681e      	ldr	r6, [r3, #0]
 80158c2:	e002      	b.n	80158ca <_printf_i+0xf2>
 80158c4:	0646      	lsls	r6, r0, #25
 80158c6:	d5fb      	bpl.n	80158c0 <_printf_i+0xe8>
 80158c8:	881e      	ldrh	r6, [r3, #0]
 80158ca:	4854      	ldr	r0, [pc, #336]	; (8015a1c <_printf_i+0x244>)
 80158cc:	2f6f      	cmp	r7, #111	; 0x6f
 80158ce:	bf0c      	ite	eq
 80158d0:	2308      	moveq	r3, #8
 80158d2:	230a      	movne	r3, #10
 80158d4:	2100      	movs	r1, #0
 80158d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80158da:	6865      	ldr	r5, [r4, #4]
 80158dc:	60a5      	str	r5, [r4, #8]
 80158de:	2d00      	cmp	r5, #0
 80158e0:	bfa2      	ittt	ge
 80158e2:	6821      	ldrge	r1, [r4, #0]
 80158e4:	f021 0104 	bicge.w	r1, r1, #4
 80158e8:	6021      	strge	r1, [r4, #0]
 80158ea:	b90e      	cbnz	r6, 80158f0 <_printf_i+0x118>
 80158ec:	2d00      	cmp	r5, #0
 80158ee:	d04d      	beq.n	801598c <_printf_i+0x1b4>
 80158f0:	4615      	mov	r5, r2
 80158f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80158f6:	fb03 6711 	mls	r7, r3, r1, r6
 80158fa:	5dc7      	ldrb	r7, [r0, r7]
 80158fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015900:	4637      	mov	r7, r6
 8015902:	42bb      	cmp	r3, r7
 8015904:	460e      	mov	r6, r1
 8015906:	d9f4      	bls.n	80158f2 <_printf_i+0x11a>
 8015908:	2b08      	cmp	r3, #8
 801590a:	d10b      	bne.n	8015924 <_printf_i+0x14c>
 801590c:	6823      	ldr	r3, [r4, #0]
 801590e:	07de      	lsls	r6, r3, #31
 8015910:	d508      	bpl.n	8015924 <_printf_i+0x14c>
 8015912:	6923      	ldr	r3, [r4, #16]
 8015914:	6861      	ldr	r1, [r4, #4]
 8015916:	4299      	cmp	r1, r3
 8015918:	bfde      	ittt	le
 801591a:	2330      	movle	r3, #48	; 0x30
 801591c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015924:	1b52      	subs	r2, r2, r5
 8015926:	6122      	str	r2, [r4, #16]
 8015928:	f8cd a000 	str.w	sl, [sp]
 801592c:	464b      	mov	r3, r9
 801592e:	aa03      	add	r2, sp, #12
 8015930:	4621      	mov	r1, r4
 8015932:	4640      	mov	r0, r8
 8015934:	f7ff fee2 	bl	80156fc <_printf_common>
 8015938:	3001      	adds	r0, #1
 801593a:	d14c      	bne.n	80159d6 <_printf_i+0x1fe>
 801593c:	f04f 30ff 	mov.w	r0, #4294967295
 8015940:	b004      	add	sp, #16
 8015942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015946:	4835      	ldr	r0, [pc, #212]	; (8015a1c <_printf_i+0x244>)
 8015948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801594c:	6829      	ldr	r1, [r5, #0]
 801594e:	6823      	ldr	r3, [r4, #0]
 8015950:	f851 6b04 	ldr.w	r6, [r1], #4
 8015954:	6029      	str	r1, [r5, #0]
 8015956:	061d      	lsls	r5, r3, #24
 8015958:	d514      	bpl.n	8015984 <_printf_i+0x1ac>
 801595a:	07df      	lsls	r7, r3, #31
 801595c:	bf44      	itt	mi
 801595e:	f043 0320 	orrmi.w	r3, r3, #32
 8015962:	6023      	strmi	r3, [r4, #0]
 8015964:	b91e      	cbnz	r6, 801596e <_printf_i+0x196>
 8015966:	6823      	ldr	r3, [r4, #0]
 8015968:	f023 0320 	bic.w	r3, r3, #32
 801596c:	6023      	str	r3, [r4, #0]
 801596e:	2310      	movs	r3, #16
 8015970:	e7b0      	b.n	80158d4 <_printf_i+0xfc>
 8015972:	6823      	ldr	r3, [r4, #0]
 8015974:	f043 0320 	orr.w	r3, r3, #32
 8015978:	6023      	str	r3, [r4, #0]
 801597a:	2378      	movs	r3, #120	; 0x78
 801597c:	4828      	ldr	r0, [pc, #160]	; (8015a20 <_printf_i+0x248>)
 801597e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015982:	e7e3      	b.n	801594c <_printf_i+0x174>
 8015984:	0659      	lsls	r1, r3, #25
 8015986:	bf48      	it	mi
 8015988:	b2b6      	uxthmi	r6, r6
 801598a:	e7e6      	b.n	801595a <_printf_i+0x182>
 801598c:	4615      	mov	r5, r2
 801598e:	e7bb      	b.n	8015908 <_printf_i+0x130>
 8015990:	682b      	ldr	r3, [r5, #0]
 8015992:	6826      	ldr	r6, [r4, #0]
 8015994:	6961      	ldr	r1, [r4, #20]
 8015996:	1d18      	adds	r0, r3, #4
 8015998:	6028      	str	r0, [r5, #0]
 801599a:	0635      	lsls	r5, r6, #24
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	d501      	bpl.n	80159a4 <_printf_i+0x1cc>
 80159a0:	6019      	str	r1, [r3, #0]
 80159a2:	e002      	b.n	80159aa <_printf_i+0x1d2>
 80159a4:	0670      	lsls	r0, r6, #25
 80159a6:	d5fb      	bpl.n	80159a0 <_printf_i+0x1c8>
 80159a8:	8019      	strh	r1, [r3, #0]
 80159aa:	2300      	movs	r3, #0
 80159ac:	6123      	str	r3, [r4, #16]
 80159ae:	4615      	mov	r5, r2
 80159b0:	e7ba      	b.n	8015928 <_printf_i+0x150>
 80159b2:	682b      	ldr	r3, [r5, #0]
 80159b4:	1d1a      	adds	r2, r3, #4
 80159b6:	602a      	str	r2, [r5, #0]
 80159b8:	681d      	ldr	r5, [r3, #0]
 80159ba:	6862      	ldr	r2, [r4, #4]
 80159bc:	2100      	movs	r1, #0
 80159be:	4628      	mov	r0, r5
 80159c0:	f7ea fc96 	bl	80002f0 <memchr>
 80159c4:	b108      	cbz	r0, 80159ca <_printf_i+0x1f2>
 80159c6:	1b40      	subs	r0, r0, r5
 80159c8:	6060      	str	r0, [r4, #4]
 80159ca:	6863      	ldr	r3, [r4, #4]
 80159cc:	6123      	str	r3, [r4, #16]
 80159ce:	2300      	movs	r3, #0
 80159d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159d4:	e7a8      	b.n	8015928 <_printf_i+0x150>
 80159d6:	6923      	ldr	r3, [r4, #16]
 80159d8:	462a      	mov	r2, r5
 80159da:	4649      	mov	r1, r9
 80159dc:	4640      	mov	r0, r8
 80159de:	47d0      	blx	sl
 80159e0:	3001      	adds	r0, #1
 80159e2:	d0ab      	beq.n	801593c <_printf_i+0x164>
 80159e4:	6823      	ldr	r3, [r4, #0]
 80159e6:	079b      	lsls	r3, r3, #30
 80159e8:	d413      	bmi.n	8015a12 <_printf_i+0x23a>
 80159ea:	68e0      	ldr	r0, [r4, #12]
 80159ec:	9b03      	ldr	r3, [sp, #12]
 80159ee:	4298      	cmp	r0, r3
 80159f0:	bfb8      	it	lt
 80159f2:	4618      	movlt	r0, r3
 80159f4:	e7a4      	b.n	8015940 <_printf_i+0x168>
 80159f6:	2301      	movs	r3, #1
 80159f8:	4632      	mov	r2, r6
 80159fa:	4649      	mov	r1, r9
 80159fc:	4640      	mov	r0, r8
 80159fe:	47d0      	blx	sl
 8015a00:	3001      	adds	r0, #1
 8015a02:	d09b      	beq.n	801593c <_printf_i+0x164>
 8015a04:	3501      	adds	r5, #1
 8015a06:	68e3      	ldr	r3, [r4, #12]
 8015a08:	9903      	ldr	r1, [sp, #12]
 8015a0a:	1a5b      	subs	r3, r3, r1
 8015a0c:	42ab      	cmp	r3, r5
 8015a0e:	dcf2      	bgt.n	80159f6 <_printf_i+0x21e>
 8015a10:	e7eb      	b.n	80159ea <_printf_i+0x212>
 8015a12:	2500      	movs	r5, #0
 8015a14:	f104 0619 	add.w	r6, r4, #25
 8015a18:	e7f5      	b.n	8015a06 <_printf_i+0x22e>
 8015a1a:	bf00      	nop
 8015a1c:	080165ad 	.word	0x080165ad
 8015a20:	080165be 	.word	0x080165be

08015a24 <__sread>:
 8015a24:	b510      	push	{r4, lr}
 8015a26:	460c      	mov	r4, r1
 8015a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a2c:	f000 f8b6 	bl	8015b9c <_read_r>
 8015a30:	2800      	cmp	r0, #0
 8015a32:	bfab      	itete	ge
 8015a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015a36:	89a3      	ldrhlt	r3, [r4, #12]
 8015a38:	181b      	addge	r3, r3, r0
 8015a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a3e:	bfac      	ite	ge
 8015a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8015a42:	81a3      	strhlt	r3, [r4, #12]
 8015a44:	bd10      	pop	{r4, pc}

08015a46 <__swrite>:
 8015a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a4a:	461f      	mov	r7, r3
 8015a4c:	898b      	ldrh	r3, [r1, #12]
 8015a4e:	05db      	lsls	r3, r3, #23
 8015a50:	4605      	mov	r5, r0
 8015a52:	460c      	mov	r4, r1
 8015a54:	4616      	mov	r6, r2
 8015a56:	d505      	bpl.n	8015a64 <__swrite+0x1e>
 8015a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a5c:	2302      	movs	r3, #2
 8015a5e:	2200      	movs	r2, #0
 8015a60:	f000 f868 	bl	8015b34 <_lseek_r>
 8015a64:	89a3      	ldrh	r3, [r4, #12]
 8015a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015a6e:	81a3      	strh	r3, [r4, #12]
 8015a70:	4632      	mov	r2, r6
 8015a72:	463b      	mov	r3, r7
 8015a74:	4628      	mov	r0, r5
 8015a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a7a:	f000 b817 	b.w	8015aac <_write_r>

08015a7e <__sseek>:
 8015a7e:	b510      	push	{r4, lr}
 8015a80:	460c      	mov	r4, r1
 8015a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a86:	f000 f855 	bl	8015b34 <_lseek_r>
 8015a8a:	1c43      	adds	r3, r0, #1
 8015a8c:	89a3      	ldrh	r3, [r4, #12]
 8015a8e:	bf15      	itete	ne
 8015a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8015a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015a9a:	81a3      	strheq	r3, [r4, #12]
 8015a9c:	bf18      	it	ne
 8015a9e:	81a3      	strhne	r3, [r4, #12]
 8015aa0:	bd10      	pop	{r4, pc}

08015aa2 <__sclose>:
 8015aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aa6:	f000 b813 	b.w	8015ad0 <_close_r>
	...

08015aac <_write_r>:
 8015aac:	b538      	push	{r3, r4, r5, lr}
 8015aae:	4d07      	ldr	r5, [pc, #28]	; (8015acc <_write_r+0x20>)
 8015ab0:	4604      	mov	r4, r0
 8015ab2:	4608      	mov	r0, r1
 8015ab4:	4611      	mov	r1, r2
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	602a      	str	r2, [r5, #0]
 8015aba:	461a      	mov	r2, r3
 8015abc:	f000 fc50 	bl	8016360 <_write>
 8015ac0:	1c43      	adds	r3, r0, #1
 8015ac2:	d102      	bne.n	8015aca <_write_r+0x1e>
 8015ac4:	682b      	ldr	r3, [r5, #0]
 8015ac6:	b103      	cbz	r3, 8015aca <_write_r+0x1e>
 8015ac8:	6023      	str	r3, [r4, #0]
 8015aca:	bd38      	pop	{r3, r4, r5, pc}
 8015acc:	24002cd0 	.word	0x24002cd0

08015ad0 <_close_r>:
 8015ad0:	b538      	push	{r3, r4, r5, lr}
 8015ad2:	4d06      	ldr	r5, [pc, #24]	; (8015aec <_close_r+0x1c>)
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	4604      	mov	r4, r0
 8015ad8:	4608      	mov	r0, r1
 8015ada:	602b      	str	r3, [r5, #0]
 8015adc:	f000 fc18 	bl	8016310 <_close>
 8015ae0:	1c43      	adds	r3, r0, #1
 8015ae2:	d102      	bne.n	8015aea <_close_r+0x1a>
 8015ae4:	682b      	ldr	r3, [r5, #0]
 8015ae6:	b103      	cbz	r3, 8015aea <_close_r+0x1a>
 8015ae8:	6023      	str	r3, [r4, #0]
 8015aea:	bd38      	pop	{r3, r4, r5, pc}
 8015aec:	24002cd0 	.word	0x24002cd0

08015af0 <_fstat_r>:
 8015af0:	b538      	push	{r3, r4, r5, lr}
 8015af2:	4d07      	ldr	r5, [pc, #28]	; (8015b10 <_fstat_r+0x20>)
 8015af4:	2300      	movs	r3, #0
 8015af6:	4604      	mov	r4, r0
 8015af8:	4608      	mov	r0, r1
 8015afa:	4611      	mov	r1, r2
 8015afc:	602b      	str	r3, [r5, #0]
 8015afe:	f000 fc0f 	bl	8016320 <_fstat>
 8015b02:	1c43      	adds	r3, r0, #1
 8015b04:	d102      	bne.n	8015b0c <_fstat_r+0x1c>
 8015b06:	682b      	ldr	r3, [r5, #0]
 8015b08:	b103      	cbz	r3, 8015b0c <_fstat_r+0x1c>
 8015b0a:	6023      	str	r3, [r4, #0]
 8015b0c:	bd38      	pop	{r3, r4, r5, pc}
 8015b0e:	bf00      	nop
 8015b10:	24002cd0 	.word	0x24002cd0

08015b14 <_isatty_r>:
 8015b14:	b538      	push	{r3, r4, r5, lr}
 8015b16:	4d06      	ldr	r5, [pc, #24]	; (8015b30 <_isatty_r+0x1c>)
 8015b18:	2300      	movs	r3, #0
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	4608      	mov	r0, r1
 8015b1e:	602b      	str	r3, [r5, #0]
 8015b20:	f000 fc06 	bl	8016330 <_isatty>
 8015b24:	1c43      	adds	r3, r0, #1
 8015b26:	d102      	bne.n	8015b2e <_isatty_r+0x1a>
 8015b28:	682b      	ldr	r3, [r5, #0]
 8015b2a:	b103      	cbz	r3, 8015b2e <_isatty_r+0x1a>
 8015b2c:	6023      	str	r3, [r4, #0]
 8015b2e:	bd38      	pop	{r3, r4, r5, pc}
 8015b30:	24002cd0 	.word	0x24002cd0

08015b34 <_lseek_r>:
 8015b34:	b538      	push	{r3, r4, r5, lr}
 8015b36:	4d07      	ldr	r5, [pc, #28]	; (8015b54 <_lseek_r+0x20>)
 8015b38:	4604      	mov	r4, r0
 8015b3a:	4608      	mov	r0, r1
 8015b3c:	4611      	mov	r1, r2
 8015b3e:	2200      	movs	r2, #0
 8015b40:	602a      	str	r2, [r5, #0]
 8015b42:	461a      	mov	r2, r3
 8015b44:	f000 fbfc 	bl	8016340 <_lseek>
 8015b48:	1c43      	adds	r3, r0, #1
 8015b4a:	d102      	bne.n	8015b52 <_lseek_r+0x1e>
 8015b4c:	682b      	ldr	r3, [r5, #0]
 8015b4e:	b103      	cbz	r3, 8015b52 <_lseek_r+0x1e>
 8015b50:	6023      	str	r3, [r4, #0]
 8015b52:	bd38      	pop	{r3, r4, r5, pc}
 8015b54:	24002cd0 	.word	0x24002cd0

08015b58 <memmove>:
 8015b58:	4288      	cmp	r0, r1
 8015b5a:	b510      	push	{r4, lr}
 8015b5c:	eb01 0402 	add.w	r4, r1, r2
 8015b60:	d902      	bls.n	8015b68 <memmove+0x10>
 8015b62:	4284      	cmp	r4, r0
 8015b64:	4623      	mov	r3, r4
 8015b66:	d807      	bhi.n	8015b78 <memmove+0x20>
 8015b68:	1e43      	subs	r3, r0, #1
 8015b6a:	42a1      	cmp	r1, r4
 8015b6c:	d008      	beq.n	8015b80 <memmove+0x28>
 8015b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b76:	e7f8      	b.n	8015b6a <memmove+0x12>
 8015b78:	4402      	add	r2, r0
 8015b7a:	4601      	mov	r1, r0
 8015b7c:	428a      	cmp	r2, r1
 8015b7e:	d100      	bne.n	8015b82 <memmove+0x2a>
 8015b80:	bd10      	pop	{r4, pc}
 8015b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b8a:	e7f7      	b.n	8015b7c <memmove+0x24>

08015b8c <_malloc_usable_size_r>:
 8015b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b90:	1f18      	subs	r0, r3, #4
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	bfbc      	itt	lt
 8015b96:	580b      	ldrlt	r3, [r1, r0]
 8015b98:	18c0      	addlt	r0, r0, r3
 8015b9a:	4770      	bx	lr

08015b9c <_read_r>:
 8015b9c:	b538      	push	{r3, r4, r5, lr}
 8015b9e:	4d07      	ldr	r5, [pc, #28]	; (8015bbc <_read_r+0x20>)
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	4608      	mov	r0, r1
 8015ba4:	4611      	mov	r1, r2
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	602a      	str	r2, [r5, #0]
 8015baa:	461a      	mov	r2, r3
 8015bac:	f000 fbd0 	bl	8016350 <_read>
 8015bb0:	1c43      	adds	r3, r0, #1
 8015bb2:	d102      	bne.n	8015bba <_read_r+0x1e>
 8015bb4:	682b      	ldr	r3, [r5, #0]
 8015bb6:	b103      	cbz	r3, 8015bba <_read_r+0x1e>
 8015bb8:	6023      	str	r3, [r4, #0]
 8015bba:	bd38      	pop	{r3, r4, r5, pc}
 8015bbc:	24002cd0 	.word	0x24002cd0

08015bc0 <expf>:
 8015bc0:	ee10 2a10 	vmov	r2, s0
 8015bc4:	f240 412a 	movw	r1, #1066	; 0x42a
 8015bc8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8015bcc:	428b      	cmp	r3, r1
 8015bce:	b430      	push	{r4, r5}
 8015bd0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8015bd4:	d92a      	bls.n	8015c2c <expf+0x6c>
 8015bd6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8015bda:	d058      	beq.n	8015c8e <expf+0xce>
 8015bdc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8015be0:	d303      	bcc.n	8015bea <expf+0x2a>
 8015be2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015be6:	bc30      	pop	{r4, r5}
 8015be8:	4770      	bx	lr
 8015bea:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8015c94 <expf+0xd4>
 8015bee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bf6:	dd03      	ble.n	8015c00 <expf+0x40>
 8015bf8:	bc30      	pop	{r4, r5}
 8015bfa:	2000      	movs	r0, #0
 8015bfc:	f000 ba40 	b.w	8016080 <__math_oflowf>
 8015c00:	eddf 7a25 	vldr	s15, [pc, #148]	; 8015c98 <expf+0xd8>
 8015c04:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c0c:	d503      	bpl.n	8015c16 <expf+0x56>
 8015c0e:	bc30      	pop	{r4, r5}
 8015c10:	2000      	movs	r0, #0
 8015c12:	f000 ba29 	b.w	8016068 <__math_uflowf>
 8015c16:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015c9c <expf+0xdc>
 8015c1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c22:	d503      	bpl.n	8015c2c <expf+0x6c>
 8015c24:	bc30      	pop	{r4, r5}
 8015c26:	2000      	movs	r0, #0
 8015c28:	f000 ba24 	b.w	8016074 <__math_may_uflowf>
 8015c2c:	4b1c      	ldr	r3, [pc, #112]	; (8015ca0 <expf+0xe0>)
 8015c2e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015c32:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8015c36:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8015c3a:	eeb0 7b44 	vmov.f64	d7, d4
 8015c3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015c42:	ee17 0a10 	vmov	r0, s14
 8015c46:	ee37 7b44 	vsub.f64	d7, d7, d4
 8015c4a:	f000 021f 	and.w	r2, r0, #31
 8015c4e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8015c52:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8015c56:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015c5a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8015c5e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8015c62:	eea5 6b07 	vfma.f64	d6, d5, d7
 8015c66:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8015c6a:	684d      	ldr	r5, [r1, #4]
 8015c6c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8015c70:	2100      	movs	r1, #0
 8015c72:	190a      	adds	r2, r1, r4
 8015c74:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8015c78:	eea5 0b07 	vfma.f64	d0, d5, d7
 8015c7c:	ec43 2b17 	vmov	d7, r2, r3
 8015c80:	eea6 0b04 	vfma.f64	d0, d6, d4
 8015c84:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015c88:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015c8c:	e7ab      	b.n	8015be6 <expf+0x26>
 8015c8e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8015ca4 <expf+0xe4>
 8015c92:	e7a8      	b.n	8015be6 <expf+0x26>
 8015c94:	42b17217 	.word	0x42b17217
 8015c98:	c2cff1b4 	.word	0xc2cff1b4
 8015c9c:	c2ce8ecf 	.word	0xc2ce8ecf
 8015ca0:	080165d0 	.word	0x080165d0
 8015ca4:	00000000 	.word	0x00000000

08015ca8 <checkint>:
 8015ca8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015cac:	2b7e      	cmp	r3, #126	; 0x7e
 8015cae:	dd10      	ble.n	8015cd2 <checkint+0x2a>
 8015cb0:	2b96      	cmp	r3, #150	; 0x96
 8015cb2:	dc0c      	bgt.n	8015cce <checkint+0x26>
 8015cb4:	2201      	movs	r2, #1
 8015cb6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015cba:	fa02 f303 	lsl.w	r3, r2, r3
 8015cbe:	1e5a      	subs	r2, r3, #1
 8015cc0:	4202      	tst	r2, r0
 8015cc2:	d106      	bne.n	8015cd2 <checkint+0x2a>
 8015cc4:	4203      	tst	r3, r0
 8015cc6:	bf0c      	ite	eq
 8015cc8:	2002      	moveq	r0, #2
 8015cca:	2001      	movne	r0, #1
 8015ccc:	4770      	bx	lr
 8015cce:	2002      	movs	r0, #2
 8015cd0:	4770      	bx	lr
 8015cd2:	2000      	movs	r0, #0
 8015cd4:	4770      	bx	lr
	...

08015cd8 <powf>:
 8015cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015cda:	ee10 1a10 	vmov	r1, s0
 8015cde:	ee10 4a90 	vmov	r4, s1
 8015ce2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8015ce6:	0062      	lsls	r2, r4, #1
 8015ce8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015cec:	eef0 7a40 	vmov.f32	s15, s0
 8015cf0:	f102 30ff 	add.w	r0, r2, #4294967295
 8015cf4:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8015cf8:	d252      	bcs.n	8015da0 <powf+0xc8>
 8015cfa:	4298      	cmp	r0, r3
 8015cfc:	d252      	bcs.n	8015da4 <powf+0xcc>
 8015cfe:	2000      	movs	r0, #0
 8015d00:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8015d04:	4ca0      	ldr	r4, [pc, #640]	; (8015f88 <powf+0x2b0>)
 8015d06:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8015d0a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8015d0e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8015d12:	0dd2      	lsrs	r2, r2, #23
 8015d14:	05d2      	lsls	r2, r2, #23
 8015d16:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8015d1a:	1a8b      	subs	r3, r1, r2
 8015d1c:	ed95 6b00 	vldr	d6, [r5]
 8015d20:	ee07 3a90 	vmov	s15, r3
 8015d24:	15d2      	asrs	r2, r2, #23
 8015d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015d2a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8015d2e:	ed95 6b02 	vldr	d6, [r5, #8]
 8015d32:	ee25 2b05 	vmul.f64	d2, d5, d5
 8015d36:	ee22 1b02 	vmul.f64	d1, d2, d2
 8015d3a:	ee07 2a90 	vmov	s15, r2
 8015d3e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8015d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015d46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015d4a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8015d4e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8015d52:	eea5 3b06 	vfma.f64	d3, d5, d6
 8015d56:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8015d5a:	eea5 6b04 	vfma.f64	d6, d5, d4
 8015d5e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8015d62:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8015d66:	eea5 7b04 	vfma.f64	d7, d5, d4
 8015d6a:	eea2 7b06 	vfma.f64	d7, d2, d6
 8015d6e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8015d72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015d76:	ee10 3a90 	vmov	r3, s1
 8015d7a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8015d7e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8015d82:	429a      	cmp	r2, r3
 8015d84:	f0c0 80b1 	bcc.w	8015eea <powf+0x212>
 8015d88:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8015f68 <powf+0x290>
 8015d8c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d94:	dd79      	ble.n	8015e8a <powf+0x1b2>
 8015d96:	b003      	add	sp, #12
 8015d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d9c:	f000 b970 	b.w	8016080 <__math_oflowf>
 8015da0:	4298      	cmp	r0, r3
 8015da2:	d32d      	bcc.n	8015e00 <powf+0x128>
 8015da4:	b952      	cbnz	r2, 8015dbc <powf+0xe4>
 8015da6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8015daa:	005b      	lsls	r3, r3, #1
 8015dac:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8015db0:	f240 80c9 	bls.w	8015f46 <powf+0x26e>
 8015db4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8015db8:	b003      	add	sp, #12
 8015dba:	bd30      	pop	{r4, r5, pc}
 8015dbc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8015dc0:	d105      	bne.n	8015dce <powf+0xf6>
 8015dc2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8015dc6:	0064      	lsls	r4, r4, #1
 8015dc8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8015dcc:	e7f0      	b.n	8015db0 <powf+0xd8>
 8015dce:	004b      	lsls	r3, r1, #1
 8015dd0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8015dd4:	d8ee      	bhi.n	8015db4 <powf+0xdc>
 8015dd6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8015dda:	d1eb      	bne.n	8015db4 <powf+0xdc>
 8015ddc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015de0:	f000 80b1 	beq.w	8015f46 <powf+0x26e>
 8015de4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015de8:	ea6f 0404 	mvn.w	r4, r4
 8015dec:	bf34      	ite	cc
 8015dee:	2300      	movcc	r3, #0
 8015df0:	2301      	movcs	r3, #1
 8015df2:	0fe4      	lsrs	r4, r4, #31
 8015df4:	42a3      	cmp	r3, r4
 8015df6:	f040 80a9 	bne.w	8015f4c <powf+0x274>
 8015dfa:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8015dfe:	e7db      	b.n	8015db8 <powf+0xe0>
 8015e00:	004d      	lsls	r5, r1, #1
 8015e02:	1e6a      	subs	r2, r5, #1
 8015e04:	429a      	cmp	r2, r3
 8015e06:	d31c      	bcc.n	8015e42 <powf+0x16a>
 8015e08:	2900      	cmp	r1, #0
 8015e0a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015e0e:	da0f      	bge.n	8015e30 <powf+0x158>
 8015e10:	ee10 0a90 	vmov	r0, s1
 8015e14:	f7ff ff48 	bl	8015ca8 <checkint>
 8015e18:	2801      	cmp	r0, #1
 8015e1a:	d109      	bne.n	8015e30 <powf+0x158>
 8015e1c:	eeb1 0a40 	vneg.f32	s0, s0
 8015e20:	b945      	cbnz	r5, 8015e34 <powf+0x15c>
 8015e22:	2c00      	cmp	r4, #0
 8015e24:	dac8      	bge.n	8015db8 <powf+0xe0>
 8015e26:	b003      	add	sp, #12
 8015e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e2c:	f000 b92e 	b.w	801608c <__math_divzerof>
 8015e30:	2000      	movs	r0, #0
 8015e32:	e7f5      	b.n	8015e20 <powf+0x148>
 8015e34:	2c00      	cmp	r4, #0
 8015e36:	dabf      	bge.n	8015db8 <powf+0xe0>
 8015e38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e3c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015e40:	e7ba      	b.n	8015db8 <powf+0xe0>
 8015e42:	2900      	cmp	r1, #0
 8015e44:	da1f      	bge.n	8015e86 <powf+0x1ae>
 8015e46:	ee10 0a90 	vmov	r0, s1
 8015e4a:	f7ff ff2d 	bl	8015ca8 <checkint>
 8015e4e:	b920      	cbnz	r0, 8015e5a <powf+0x182>
 8015e50:	b003      	add	sp, #12
 8015e52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e56:	f000 b929 	b.w	80160ac <__math_invalidf>
 8015e5a:	2801      	cmp	r0, #1
 8015e5c:	bf14      	ite	ne
 8015e5e:	2000      	movne	r0, #0
 8015e60:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8015e64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015e68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8015e6c:	f4bf af48 	bcs.w	8015d00 <powf+0x28>
 8015e70:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8015f8c <powf+0x2b4>
 8015e74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015e78:	ee10 3a10 	vmov	r3, s0
 8015e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015e80:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8015e84:	e73c      	b.n	8015d00 <powf+0x28>
 8015e86:	2000      	movs	r0, #0
 8015e88:	e7ee      	b.n	8015e68 <powf+0x190>
 8015e8a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8015f70 <powf+0x298>
 8015e8e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e96:	dd10      	ble.n	8015eba <powf+0x1e2>
 8015e98:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	d158      	bne.n	8015f52 <powf+0x27a>
 8015ea0:	9300      	str	r3, [sp, #0]
 8015ea2:	eddd 7a00 	vldr	s15, [sp]
 8015ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015eae:	eef4 7a47 	vcmp.f32	s15, s14
 8015eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb6:	f47f af6e 	bne.w	8015d96 <powf+0xbe>
 8015eba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015f78 <powf+0x2a0>
 8015ebe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec6:	d804      	bhi.n	8015ed2 <powf+0x1fa>
 8015ec8:	b003      	add	sp, #12
 8015eca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ece:	f000 b8cb 	b.w	8016068 <__math_uflowf>
 8015ed2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8015f80 <powf+0x2a8>
 8015ed6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ede:	d504      	bpl.n	8015eea <powf+0x212>
 8015ee0:	b003      	add	sp, #12
 8015ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ee6:	f000 b8c5 	b.w	8016074 <__math_may_uflowf>
 8015eea:	4b29      	ldr	r3, [pc, #164]	; (8015f90 <powf+0x2b8>)
 8015eec:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8015ef0:	ee30 6b07 	vadd.f64	d6, d0, d7
 8015ef4:	ee16 2a10 	vmov	r2, s12
 8015ef8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015efc:	f002 011f 	and.w	r1, r2, #31
 8015f00:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8015f04:	ee30 7b47 	vsub.f64	d7, d0, d7
 8015f08:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015f0c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8015f10:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015f14:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8015f18:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8015f1c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015f20:	686d      	ldr	r5, [r5, #4]
 8015f22:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8015f26:	1882      	adds	r2, r0, r2
 8015f28:	2300      	movs	r3, #0
 8015f2a:	1918      	adds	r0, r3, r4
 8015f2c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8015f30:	eea7 0b05 	vfma.f64	d0, d7, d5
 8015f34:	ec41 0b17 	vmov	d7, r0, r1
 8015f38:	eea6 0b04 	vfma.f64	d0, d6, d4
 8015f3c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015f40:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015f44:	e738      	b.n	8015db8 <powf+0xe0>
 8015f46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015f4a:	e735      	b.n	8015db8 <powf+0xe0>
 8015f4c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8015f94 <powf+0x2bc>
 8015f50:	e732      	b.n	8015db8 <powf+0xe0>
 8015f52:	9301      	str	r3, [sp, #4]
 8015f54:	eddd 7a01 	vldr	s15, [sp, #4]
 8015f58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f60:	e7a5      	b.n	8015eae <powf+0x1d6>
 8015f62:	bf00      	nop
 8015f64:	f3af 8000 	nop.w
 8015f68:	ffd1d571 	.word	0xffd1d571
 8015f6c:	405fffff 	.word	0x405fffff
 8015f70:	ffa3aae2 	.word	0xffa3aae2
 8015f74:	405fffff 	.word	0x405fffff
 8015f78:	00000000 	.word	0x00000000
 8015f7c:	c062c000 	.word	0xc062c000
 8015f80:	00000000 	.word	0x00000000
 8015f84:	c062a000 	.word	0xc062a000
 8015f88:	08016718 	.word	0x08016718
 8015f8c:	4b000000 	.word	0x4b000000
 8015f90:	080165d0 	.word	0x080165d0
 8015f94:	00000000 	.word	0x00000000

08015f98 <tanhf>:
 8015f98:	b510      	push	{r4, lr}
 8015f9a:	ee10 4a10 	vmov	r4, s0
 8015f9e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015fa2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015fa6:	ed2d 8b02 	vpush	{d8}
 8015faa:	eeb0 7a40 	vmov.f32	s14, s0
 8015fae:	db0c      	blt.n	8015fca <tanhf+0x32>
 8015fb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015fb4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015fb8:	2c00      	cmp	r4, #0
 8015fba:	bfac      	ite	ge
 8015fbc:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8015fc0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8015fc4:	ecbd 8b02 	vpop	{d8}
 8015fc8:	bd10      	pop	{r4, pc}
 8015fca:	4a1b      	ldr	r2, [pc, #108]	; (8016038 <tanhf+0xa0>)
 8015fcc:	4293      	cmp	r3, r2
 8015fce:	dc30      	bgt.n	8016032 <tanhf+0x9a>
 8015fd0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8015fd4:	da06      	bge.n	8015fe4 <tanhf+0x4c>
 8015fd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015fda:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015fde:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015fe2:	e7ef      	b.n	8015fc4 <tanhf+0x2c>
 8015fe4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015fe8:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015fec:	db12      	blt.n	8016014 <tanhf+0x7c>
 8015fee:	f000 f987 	bl	8016300 <fabsf>
 8015ff2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015ff6:	f000 f869 	bl	80160cc <expm1f>
 8015ffa:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015ffe:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8016002:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016006:	ee30 0a67 	vsub.f32	s0, s0, s15
 801600a:	2c00      	cmp	r4, #0
 801600c:	bfb8      	it	lt
 801600e:	eeb1 0a40 	vneglt.f32	s0, s0
 8016012:	e7d7      	b.n	8015fc4 <tanhf+0x2c>
 8016014:	f000 f974 	bl	8016300 <fabsf>
 8016018:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801601c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016020:	f000 f854 	bl	80160cc <expm1f>
 8016024:	ee70 7a08 	vadd.f32	s15, s0, s16
 8016028:	eeb1 7a40 	vneg.f32	s14, s0
 801602c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016030:	e7eb      	b.n	801600a <tanhf+0x72>
 8016032:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016036:	e7e8      	b.n	801600a <tanhf+0x72>
 8016038:	41afffff 	.word	0x41afffff

0801603c <with_errnof>:
 801603c:	b513      	push	{r0, r1, r4, lr}
 801603e:	4604      	mov	r4, r0
 8016040:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016044:	f7fe fb98 	bl	8014778 <__errno>
 8016048:	ed9d 0a01 	vldr	s0, [sp, #4]
 801604c:	6004      	str	r4, [r0, #0]
 801604e:	b002      	add	sp, #8
 8016050:	bd10      	pop	{r4, pc}

08016052 <xflowf>:
 8016052:	b130      	cbz	r0, 8016062 <xflowf+0x10>
 8016054:	eef1 7a40 	vneg.f32	s15, s0
 8016058:	ee27 0a80 	vmul.f32	s0, s15, s0
 801605c:	2022      	movs	r0, #34	; 0x22
 801605e:	f7ff bfed 	b.w	801603c <with_errnof>
 8016062:	eef0 7a40 	vmov.f32	s15, s0
 8016066:	e7f7      	b.n	8016058 <xflowf+0x6>

08016068 <__math_uflowf>:
 8016068:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016070 <__math_uflowf+0x8>
 801606c:	f7ff bff1 	b.w	8016052 <xflowf>
 8016070:	10000000 	.word	0x10000000

08016074 <__math_may_uflowf>:
 8016074:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801607c <__math_may_uflowf+0x8>
 8016078:	f7ff bfeb 	b.w	8016052 <xflowf>
 801607c:	1a200000 	.word	0x1a200000

08016080 <__math_oflowf>:
 8016080:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016088 <__math_oflowf+0x8>
 8016084:	f7ff bfe5 	b.w	8016052 <xflowf>
 8016088:	70000000 	.word	0x70000000

0801608c <__math_divzerof>:
 801608c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016090:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016094:	2800      	cmp	r0, #0
 8016096:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801609a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80160a8 <__math_divzerof+0x1c>
 801609e:	2022      	movs	r0, #34	; 0x22
 80160a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80160a4:	f7ff bfca 	b.w	801603c <with_errnof>
 80160a8:	00000000 	.word	0x00000000

080160ac <__math_invalidf>:
 80160ac:	eef0 7a40 	vmov.f32	s15, s0
 80160b0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80160b4:	eef4 7a67 	vcmp.f32	s15, s15
 80160b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160bc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80160c0:	d602      	bvs.n	80160c8 <__math_invalidf+0x1c>
 80160c2:	2021      	movs	r0, #33	; 0x21
 80160c4:	f7ff bfba 	b.w	801603c <with_errnof>
 80160c8:	4770      	bx	lr
	...

080160cc <expm1f>:
 80160cc:	ee10 2a10 	vmov	r2, s0
 80160d0:	497c      	ldr	r1, [pc, #496]	; (80162c4 <expm1f+0x1f8>)
 80160d2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80160d6:	428b      	cmp	r3, r1
 80160d8:	d920      	bls.n	801611c <expm1f+0x50>
 80160da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80160de:	d902      	bls.n	80160e6 <expm1f+0x1a>
 80160e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80160e4:	4770      	bx	lr
 80160e6:	d105      	bne.n	80160f4 <expm1f+0x28>
 80160e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80160ec:	2a00      	cmp	r2, #0
 80160ee:	fe20 0a27 	vselge.f32	s0, s0, s15
 80160f2:	4770      	bx	lr
 80160f4:	2a00      	cmp	r2, #0
 80160f6:	db05      	blt.n	8016104 <expm1f+0x38>
 80160f8:	4973      	ldr	r1, [pc, #460]	; (80162c8 <expm1f+0x1fc>)
 80160fa:	428b      	cmp	r3, r1
 80160fc:	d95c      	bls.n	80161b8 <expm1f+0xec>
 80160fe:	2000      	movs	r0, #0
 8016100:	f7ff bfbe 	b.w	8016080 <__math_oflowf>
 8016104:	eddf 7a71 	vldr	s15, [pc, #452]	; 80162cc <expm1f+0x200>
 8016108:	ee70 7a27 	vadd.f32	s15, s0, s15
 801610c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016114:	d550      	bpl.n	80161b8 <expm1f+0xec>
 8016116:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801611a:	4770      	bx	lr
 801611c:	496c      	ldr	r1, [pc, #432]	; (80162d0 <expm1f+0x204>)
 801611e:	428b      	cmp	r3, r1
 8016120:	d966      	bls.n	80161f0 <expm1f+0x124>
 8016122:	496c      	ldr	r1, [pc, #432]	; (80162d4 <expm1f+0x208>)
 8016124:	428b      	cmp	r3, r1
 8016126:	d847      	bhi.n	80161b8 <expm1f+0xec>
 8016128:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80162d8 <expm1f+0x20c>
 801612c:	2a00      	cmp	r2, #0
 801612e:	bfa7      	ittee	ge
 8016130:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8016134:	eddf 7a69 	vldrge	s15, [pc, #420]	; 80162dc <expm1f+0x210>
 8016138:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 80162e0 <expm1f+0x214>
 801613c:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8016140:	bfac      	ite	ge
 8016142:	2301      	movge	r3, #1
 8016144:	f04f 33ff 	movlt.w	r3, #4294967295
 8016148:	ee37 0a67 	vsub.f32	s0, s14, s15
 801614c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016154:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016158:	ee20 4a25 	vmul.f32	s8, s0, s11
 801615c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80162e4 <expm1f+0x218>
 8016160:	eddf 6a61 	vldr	s13, [pc, #388]	; 80162e8 <expm1f+0x21c>
 8016164:	ed9f 5a61 	vldr	s10, [pc, #388]	; 80162ec <expm1f+0x220>
 8016168:	ee20 7a04 	vmul.f32	s14, s0, s8
 801616c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8016170:	eee7 6a06 	vfma.f32	s13, s14, s12
 8016174:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80162f0 <expm1f+0x224>
 8016178:	eea6 6a87 	vfma.f32	s12, s13, s14
 801617c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80162f4 <expm1f+0x228>
 8016180:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016184:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016188:	eea6 5a87 	vfma.f32	s10, s13, s14
 801618c:	eef0 6a46 	vmov.f32	s13, s12
 8016190:	eee5 6a07 	vfma.f32	s13, s10, s14
 8016194:	eee4 4a66 	vfms.f32	s9, s8, s13
 8016198:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801619c:	eea0 4a64 	vfms.f32	s8, s0, s9
 80161a0:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80161a4:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80161a8:	ee66 6a87 	vmul.f32	s13, s13, s14
 80161ac:	bb73      	cbnz	r3, 801620c <expm1f+0x140>
 80161ae:	eef0 7a47 	vmov.f32	s15, s14
 80161b2:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80161b6:	e024      	b.n	8016202 <expm1f+0x136>
 80161b8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80161bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80161c0:	2a00      	cmp	r2, #0
 80161c2:	fe67 7a87 	vselge.f32	s15, s15, s14
 80161c6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80162f8 <expm1f+0x22c>
 80161ca:	eddf 6a43 	vldr	s13, [pc, #268]	; 80162d8 <expm1f+0x20c>
 80161ce:	ee40 7a07 	vmla.f32	s15, s0, s14
 80161d2:	eeb0 7a40 	vmov.f32	s14, s0
 80161d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80161da:	ee17 3a90 	vmov	r3, s15
 80161de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161e2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80161e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80162dc <expm1f+0x210>
 80161ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80161ee:	e7ab      	b.n	8016148 <expm1f+0x7c>
 80161f0:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80161f4:	d208      	bcs.n	8016208 <expm1f+0x13c>
 80161f6:	eddf 7a41 	vldr	s15, [pc, #260]	; 80162fc <expm1f+0x230>
 80161fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80161fe:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8016202:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016206:	4770      	bx	lr
 8016208:	2300      	movs	r3, #0
 801620a:	e7a3      	b.n	8016154 <expm1f+0x88>
 801620c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016210:	1c5a      	adds	r2, r3, #1
 8016212:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8016216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801621a:	d106      	bne.n	801622a <expm1f+0x15e>
 801621c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016220:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016224:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8016228:	4770      	bx	lr
 801622a:	2b01      	cmp	r3, #1
 801622c:	d118      	bne.n	8016260 <expm1f+0x194>
 801622e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8016232:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623a:	bf5b      	ittet	pl
 801623c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8016240:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8016244:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8016248:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801624c:	bf43      	ittte	mi
 801624e:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8016252:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8016256:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801625a:	eeb0 0a46 	vmovpl.f32	s0, s12
 801625e:	4770      	bx	lr
 8016260:	1c5a      	adds	r2, r3, #1
 8016262:	2a39      	cmp	r2, #57	; 0x39
 8016264:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016268:	d90b      	bls.n	8016282 <expm1f+0x1b6>
 801626a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801626e:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016272:	ee10 3a10 	vmov	r3, s0
 8016276:	440b      	add	r3, r1
 8016278:	ee00 3a10 	vmov	s0, r3
 801627c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8016280:	4770      	bx	lr
 8016282:	2b16      	cmp	r3, #22
 8016284:	dc11      	bgt.n	80162aa <expm1f+0x1de>
 8016286:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801628a:	fa42 f303 	asr.w	r3, r2, r3
 801628e:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8016292:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016296:	ee07 3a90 	vmov	s15, r3
 801629a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801629e:	ee10 3a10 	vmov	r3, s0
 80162a2:	440b      	add	r3, r1
 80162a4:	ee00 3a10 	vmov	s0, r3
 80162a8:	4770      	bx	lr
 80162aa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80162ae:	05db      	lsls	r3, r3, #23
 80162b0:	ee07 3a10 	vmov	s14, r3
 80162b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80162b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80162bc:	ee37 0a86 	vadd.f32	s0, s15, s12
 80162c0:	e7ed      	b.n	801629e <expm1f+0x1d2>
 80162c2:	bf00      	nop
 80162c4:	4195b843 	.word	0x4195b843
 80162c8:	42b17217 	.word	0x42b17217
 80162cc:	0da24260 	.word	0x0da24260
 80162d0:	3eb17218 	.word	0x3eb17218
 80162d4:	3f851591 	.word	0x3f851591
 80162d8:	3f317180 	.word	0x3f317180
 80162dc:	3717f7d1 	.word	0x3717f7d1
 80162e0:	b717f7d1 	.word	0xb717f7d1
 80162e4:	b457edbb 	.word	0xb457edbb
 80162e8:	36867e54 	.word	0x36867e54
 80162ec:	bd088889 	.word	0xbd088889
 80162f0:	b8a670cd 	.word	0xb8a670cd
 80162f4:	3ad00d01 	.word	0x3ad00d01
 80162f8:	3fb8aa3b 	.word	0x3fb8aa3b
 80162fc:	7149f2ca 	.word	0x7149f2ca

08016300 <fabsf>:
 8016300:	ee10 3a10 	vmov	r3, s0
 8016304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016308:	ee00 3a10 	vmov	s0, r3
 801630c:	4770      	bx	lr
	...

08016310 <_close>:
 8016310:	4b02      	ldr	r3, [pc, #8]	; (801631c <_close+0xc>)
 8016312:	2258      	movs	r2, #88	; 0x58
 8016314:	601a      	str	r2, [r3, #0]
 8016316:	f04f 30ff 	mov.w	r0, #4294967295
 801631a:	4770      	bx	lr
 801631c:	24002cd0 	.word	0x24002cd0

08016320 <_fstat>:
 8016320:	4b02      	ldr	r3, [pc, #8]	; (801632c <_fstat+0xc>)
 8016322:	2258      	movs	r2, #88	; 0x58
 8016324:	601a      	str	r2, [r3, #0]
 8016326:	f04f 30ff 	mov.w	r0, #4294967295
 801632a:	4770      	bx	lr
 801632c:	24002cd0 	.word	0x24002cd0

08016330 <_isatty>:
 8016330:	4b02      	ldr	r3, [pc, #8]	; (801633c <_isatty+0xc>)
 8016332:	2258      	movs	r2, #88	; 0x58
 8016334:	601a      	str	r2, [r3, #0]
 8016336:	2000      	movs	r0, #0
 8016338:	4770      	bx	lr
 801633a:	bf00      	nop
 801633c:	24002cd0 	.word	0x24002cd0

08016340 <_lseek>:
 8016340:	4b02      	ldr	r3, [pc, #8]	; (801634c <_lseek+0xc>)
 8016342:	2258      	movs	r2, #88	; 0x58
 8016344:	601a      	str	r2, [r3, #0]
 8016346:	f04f 30ff 	mov.w	r0, #4294967295
 801634a:	4770      	bx	lr
 801634c:	24002cd0 	.word	0x24002cd0

08016350 <_read>:
 8016350:	4b02      	ldr	r3, [pc, #8]	; (801635c <_read+0xc>)
 8016352:	2258      	movs	r2, #88	; 0x58
 8016354:	601a      	str	r2, [r3, #0]
 8016356:	f04f 30ff 	mov.w	r0, #4294967295
 801635a:	4770      	bx	lr
 801635c:	24002cd0 	.word	0x24002cd0

08016360 <_write>:
 8016360:	4b02      	ldr	r3, [pc, #8]	; (801636c <_write+0xc>)
 8016362:	2258      	movs	r2, #88	; 0x58
 8016364:	601a      	str	r2, [r3, #0]
 8016366:	f04f 30ff 	mov.w	r0, #4294967295
 801636a:	4770      	bx	lr
 801636c:	24002cd0 	.word	0x24002cd0

08016370 <_init>:
 8016370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016372:	bf00      	nop
 8016374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016376:	bc08      	pop	{r3}
 8016378:	469e      	mov	lr, r3
 801637a:	4770      	bx	lr

0801637c <_fini>:
 801637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801637e:	bf00      	nop
 8016380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016382:	bc08      	pop	{r3}
 8016384:	469e      	mov	lr, r3
 8016386:	4770      	bx	lr
