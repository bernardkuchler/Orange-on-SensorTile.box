
STM32H750B-DK-RandomForest_Hoja-Cas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08011660  08011660  00021660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080118b0  080118b0  000218b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080118b4  080118b4  000218b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00003ab0  24000000  080118b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fa0  24003ac0  08015368  00033ac0  2**5
                  ALLOC
  7 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00033ab0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022fe4  00000000  00000000  00033ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000049f0  00000000  00000000  00056ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001928  00000000  00000000  0005b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001720  00000000  00000000  0005cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000400f3  00000000  00000000  0005e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002732f  00000000  00000000  0009e5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00186c7d  00000000  00000000  000c5922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0024c59f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007370  00000000  00000000  0024c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         0000009c  00000000  00000000  00253960  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  002539fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003ac0 	.word	0x24003ac0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011648 	.word	0x08011648

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003ac4 	.word	0x24003ac4
 80002dc:	08011648 	.word	0x08011648

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000396:	f000 fd83 	bl	8000ea0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800039a:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <main+0xf8>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d11b      	bne.n	80003de <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ac:	f3bf 8f6f 	isb	sy
}
 80003b0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <main+0xf8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ba:	f3bf 8f4f 	dsb	sy
}
 80003be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c0:	f3bf 8f6f 	isb	sy
}
 80003c4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003c6:	4b30      	ldr	r3, [pc, #192]	; (8000488 <main+0xf8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a2f      	ldr	r2, [pc, #188]	; (8000488 <main+0xf8>)
 80003cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003d2:	f3bf 8f4f 	dsb	sy
}
 80003d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d8:	f3bf 8f6f 	isb	sy
}
 80003dc:	e000      	b.n	80003e0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003de:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <main+0xf8>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d138      	bne.n	800045e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003ec:	4b26      	ldr	r3, [pc, #152]	; (8000488 <main+0xf8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003f4:	f3bf 8f4f 	dsb	sy
}
 80003f8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <main+0xf8>)
 80003fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000400:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	0b5b      	lsrs	r3, r3, #13
 8000406:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800040a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	08db      	lsrs	r3, r3, #3
 8000410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000414:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	015a      	lsls	r2, r3, #5
 800041a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800041e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000424:	4918      	ldr	r1, [pc, #96]	; (8000488 <main+0xf8>)
 8000426:	4313      	orrs	r3, r2
 8000428:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	1e5a      	subs	r2, r3, #1
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1ef      	bne.n	8000416 <main+0x86>
    } while(sets-- != 0U);
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	1e5a      	subs	r2, r3, #1
 800043a:	60ba      	str	r2, [r7, #8]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1e5      	bne.n	800040c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000440:	f3bf 8f4f 	dsb	sy
}
 8000444:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <main+0xf8>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a0f      	ldr	r2, [pc, #60]	; (8000488 <main+0xf8>)
 800044c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000450:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000452:	f3bf 8f4f 	dsb	sy
}
 8000456:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000458:	f3bf 8f6f 	isb	sy
}
 800045c:	e000      	b.n	8000460 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800045e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f001 fde6 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f812 	bl	800048c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f000 f93e 	bl	80006e8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800046c:	f000 f88e 	bl	800058c <MX_ADC3_Init>
  MX_CRC_Init();
 8000470:	f000 f8f0 	bl	8000654 <MX_CRC_Init>
  MX_TIM16_Init();
 8000474:	f000 f910 	bl	8000698 <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000478:	f00c fb84 	bl	800cb84 <MX_USB_DEVICE_Init>
  MX_X_CUBE_AI_Init();
 800047c:	f00d fa16 	bl	800d8ac <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000480:	f00d fa38 	bl	800d8f4 <MX_X_CUBE_AI_Process>
 8000484:	e7fc      	b.n	8000480 <main+0xf0>
 8000486:	bf00      	nop
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b09c      	sub	sp, #112	; 0x70
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000496:	224c      	movs	r2, #76	; 0x4c
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f00f feb8 	bl	8010210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f00f feb2 	bl	8010210 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ac:	2002      	movs	r0, #2
 80004ae:	f004 fd21 	bl	8004ef4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	4b33      	ldr	r3, [pc, #204]	; (8000584 <SystemClock_Config+0xf8>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ba:	4a32      	ldr	r2, [pc, #200]	; (8000584 <SystemClock_Config+0xf8>)
 80004bc:	f023 0301 	bic.w	r3, r3, #1
 80004c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c2:	4b30      	ldr	r3, [pc, #192]	; (8000584 <SystemClock_Config+0xf8>)
 80004c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <SystemClock_Config+0xfc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004d4:	4a2c      	ldr	r2, [pc, #176]	; (8000588 <SystemClock_Config+0xfc>)
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <SystemClock_Config+0xfc>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e8:	bf00      	nop
 80004ea:	4b27      	ldr	r3, [pc, #156]	; (8000588 <SystemClock_Config+0xfc>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f6:	d1f8      	bne.n	80004ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004f8:	2303      	movs	r3, #3
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000500:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000502:	2301      	movs	r3, #1
 8000504:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2340      	movs	r3, #64	; 0x40
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050a:	2302      	movs	r3, #2
 800050c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050e:	2302      	movs	r3, #2
 8000510:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000512:	2316      	movs	r3, #22
 8000514:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000516:	23a9      	movs	r3, #169	; 0xa9
 8000518:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800051a:	2302      	movs	r3, #2
 800051c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800051e:	2304      	movs	r3, #4
 8000520:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000522:	2302      	movs	r3, #2
 8000524:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000526:	2300      	movs	r3, #0
 8000528:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800052a:	2300      	movs	r3, #0
 800052c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000536:	4618      	mov	r0, r3
 8000538:	f005 f9d6 	bl	80058e8 <HAL_RCC_OscConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000542:	f000 fcda 	bl	8000efa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000546:	233f      	movs	r3, #63	; 0x3f
 8000548:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2101      	movs	r1, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f005 fe16 	bl	800619c <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000576:	f000 fcc0 	bl	8000efa <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3770      	adds	r7, #112	; 0x70
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	58000400 	.word	0x58000400
 8000588:	58024800 	.word	0x58024800

0800058c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <MX_ADC3_Init+0xbc>)
 80005a8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005fc:	f001 ff7c 	bl	80024f8 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000606:	f000 fc78 	bl	8000efa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_ADC3_Init+0xc0>)
 800060c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060e:	2306      	movs	r3, #6
 8000610:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_ADC3_Init+0xc4>)
 8000618:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800061a:	2304      	movs	r3, #4
 800061c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <MX_ADC3_Init+0xb8>)
 800062c:	f002 f906 	bl	800283c <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000636:	f000 fc60 	bl	8000efa <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	24003adc 	.word	0x24003adc
 8000648:	58026000 	.word	0x58026000
 800064c:	04300002 	.word	0x04300002
 8000650:	47ff0000 	.word	0x47ff0000

08000654 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_CRC_Init+0x3c>)
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <MX_CRC_Init+0x40>)
 800065c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_CRC_Init+0x3c>)
 8000660:	2200      	movs	r2, #0
 8000662:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_CRC_Init+0x3c>)
 8000666:	2200      	movs	r2, #0
 8000668:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_CRC_Init+0x3c>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_CRC_Init+0x3c>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_CRC_Init+0x3c>)
 8000678:	2201      	movs	r2, #1
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_CRC_Init+0x3c>)
 800067e:	f002 fec5 	bl	800340c <HAL_CRC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000688:	f000 fc37 	bl	8000efa <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	24003b40 	.word	0x24003b40
 8000694:	58024c00 	.word	0x58024c00

08000698 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_TIM16_Init+0x48>)
 800069e:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <MX_TIM16_Init+0x4c>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000 - 1;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006a4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80006a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006cc:	f008 fdda 	bl	8009284 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006d6:	f000 fc10 	bl	8000efa <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	24003b64 	.word	0x24003b64
 80006e4:	40014400 	.word	0x40014400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b090      	sub	sp, #64	; 0x40
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006fe:	4bbd      	ldr	r3, [pc, #756]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	4abb      	ldr	r2, [pc, #748]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070e:	4bb9      	ldr	r3, [pc, #740]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
 800071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4bb5      	ldr	r3, [pc, #724]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	4ab4      	ldr	r2, [pc, #720]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072c:	4bb1      	ldr	r3, [pc, #708]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800073a:	4bae      	ldr	r3, [pc, #696]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4aac      	ldr	r2, [pc, #688]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4baa      	ldr	r3, [pc, #680]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000754:	623b      	str	r3, [r7, #32]
 8000756:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000758:	4ba6      	ldr	r3, [pc, #664]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	4aa5      	ldr	r2, [pc, #660]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000768:	4ba2      	ldr	r3, [pc, #648]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b9f      	ldr	r3, [pc, #636]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	4a9d      	ldr	r2, [pc, #628]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000786:	4b9b      	ldr	r3, [pc, #620]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000794:	4b97      	ldr	r3, [pc, #604]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	4a96      	ldr	r2, [pc, #600]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a4:	4b93      	ldr	r3, [pc, #588]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007b2:	4b90      	ldr	r3, [pc, #576]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	4a8e      	ldr	r2, [pc, #568]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c2:	4b8c      	ldr	r3, [pc, #560]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d0:	4b88      	ldr	r3, [pc, #544]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d6:	4a87      	ldr	r2, [pc, #540]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e0:	4b84      	ldr	r3, [pc, #528]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b81      	ldr	r3, [pc, #516]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	4a7f      	ldr	r2, [pc, #508]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fe:	4b7d      	ldr	r3, [pc, #500]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b79      	ldr	r3, [pc, #484]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000812:	4a78      	ldr	r2, [pc, #480]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081c:	4b75      	ldr	r3, [pc, #468]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a70      	ldr	r2, [pc, #448]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b6e      	ldr	r3, [pc, #440]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	486a      	ldr	r0, [pc, #424]	; (80009f8 <MX_GPIO_Init+0x310>)
 8000850:	f003 f87e 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2104      	movs	r1, #4
 8000858:	4868      	ldr	r0, [pc, #416]	; (80009fc <MX_GPIO_Init+0x314>)
 800085a:	f003 f879 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	4866      	ldr	r0, [pc, #408]	; (8000a00 <MX_GPIO_Init+0x318>)
 8000866:	f003 f873 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 800086a:	23f0      	movs	r3, #240	; 0xf0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800087a:	230a      	movs	r3, #10
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	4619      	mov	r1, r3
 8000884:	485c      	ldr	r0, [pc, #368]	; (80009f8 <MX_GPIO_Init+0x310>)
 8000886:	f002 feb3 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 800088a:	f242 0320 	movw	r3, #8224	; 0x2020
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800089c:	2309      	movs	r3, #9
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4856      	ldr	r0, [pc, #344]	; (8000a00 <MX_GPIO_Init+0x318>)
 80008a8:	f002 fea2 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80008ac:	23fc      	movs	r3, #252	; 0xfc
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008bc:	230e      	movs	r3, #14
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	484f      	ldr	r0, [pc, #316]	; (8000a04 <MX_GPIO_Init+0x31c>)
 80008c8:	f002 fe92 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008de:	230a      	movs	r3, #10
 80008e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4847      	ldr	r0, [pc, #284]	; (8000a08 <MX_GPIO_Init+0x320>)
 80008ea:	f002 fe81 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 80008ee:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000900:	230c      	movs	r3, #12
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	4840      	ldr	r0, [pc, #256]	; (8000a0c <MX_GPIO_Init+0x324>)
 800090c:	f002 fe70 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000910:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000922:	230e      	movs	r3, #14
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	4832      	ldr	r0, [pc, #200]	; (80009f8 <MX_GPIO_Init+0x310>)
 800092e:	f002 fe5f 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000932:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000944:	230c      	movs	r3, #12
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094c:	4619      	mov	r1, r3
 800094e:	4830      	ldr	r0, [pc, #192]	; (8000a10 <MX_GPIO_Init+0x328>)
 8000950:	f002 fe4e 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000964:	230a      	movs	r3, #10
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <MX_GPIO_Init+0x318>)
 8000970:	f002 fe3e 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000974:	2310      	movs	r3, #16
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000984:	2307      	movs	r3, #7
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098c:	4619      	mov	r1, r3
 800098e:	481c      	ldr	r0, [pc, #112]	; (8000a00 <MX_GPIO_Init+0x318>)
 8000990:	f002 fe2e 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000994:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a6:	230b      	movs	r3, #11
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_GPIO_Init+0x320>)
 80009b2:	f002 fe1d 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80009b6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c8:	230e      	movs	r3, #14
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	480a      	ldr	r0, [pc, #40]	; (80009fc <MX_GPIO_Init+0x314>)
 80009d4:	f002 fe0c 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d8:	2308      	movs	r3, #8
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e8:	2305      	movs	r3, #5
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	e00f      	b.n	8000a14 <MX_GPIO_Init+0x32c>
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58022000 	.word	0x58022000
 80009fc:	58022400 	.word	0x58022400
 8000a00:	58020400 	.word	0x58020400
 8000a04:	58022800 	.word	0x58022800
 8000a08:	58021800 	.word	0x58021800
 8000a0c:	58020800 	.word	0x58020800
 8000a10:	58021000 	.word	0x58021000
 8000a14:	48bc      	ldr	r0, [pc, #752]	; (8000d08 <MX_GPIO_Init+0x620>)
 8000a16:	f002 fdeb 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	48b5      	ldr	r0, [pc, #724]	; (8000d0c <MX_GPIO_Init+0x624>)
 8000a36:	f002 fddb 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	48ae      	ldr	r0, [pc, #696]	; (8000d10 <MX_GPIO_Init+0x628>)
 8000a58:	f002 fdca 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000a5c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a6e:	2309      	movs	r3, #9
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a76:	4619      	mov	r1, r3
 8000a78:	48a5      	ldr	r0, [pc, #660]	; (8000d10 <MX_GPIO_Init+0x628>)
 8000a7a:	f002 fdb9 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a96:	4619      	mov	r1, r3
 8000a98:	489e      	ldr	r0, [pc, #632]	; (8000d14 <MX_GPIO_Init+0x62c>)
 8000a9a:	f002 fda9 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4895      	ldr	r0, [pc, #596]	; (8000d08 <MX_GPIO_Init+0x620>)
 8000ab2:	f002 fd9d 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000ab6:	2330      	movs	r3, #48	; 0x30
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4890      	ldr	r0, [pc, #576]	; (8000d14 <MX_GPIO_Init+0x62c>)
 8000ad2:	f002 fd8d 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000ad6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4889      	ldr	r0, [pc, #548]	; (8000d18 <MX_GPIO_Init+0x630>)
 8000af4:	f002 fd7c 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000af8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b12:	4619      	mov	r1, r3
 8000b14:	4881      	ldr	r0, [pc, #516]	; (8000d1c <MX_GPIO_Init+0x634>)
 8000b16:	f002 fd6b 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	4874      	ldr	r0, [pc, #464]	; (8000d08 <MX_GPIO_Init+0x620>)
 8000b36:	f002 fd5b 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000b3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b54:	4619      	mov	r1, r3
 8000b56:	486c      	ldr	r0, [pc, #432]	; (8000d08 <MX_GPIO_Init+0x620>)
 8000b58:	f002 fd4a 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	486b      	ldr	r0, [pc, #428]	; (8000d20 <MX_GPIO_Init+0x638>)
 8000b72:	f002 fd3d 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4866      	ldr	r0, [pc, #408]	; (8000d24 <MX_GPIO_Init+0x63c>)
 8000b8c:	f002 fd30 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	485c      	ldr	r0, [pc, #368]	; (8000d20 <MX_GPIO_Init+0x638>)
 8000bae:	f002 fd1f 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	484f      	ldr	r0, [pc, #316]	; (8000d0c <MX_GPIO_Init+0x624>)
 8000bd0:	f002 fd0e 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000bd4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000be6:	230c      	movs	r3, #12
 8000be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	484d      	ldr	r0, [pc, #308]	; (8000d28 <MX_GPIO_Init+0x640>)
 8000bf2:	f002 fcfd 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	483f      	ldr	r0, [pc, #252]	; (8000d0c <MX_GPIO_Init+0x624>)
 8000c10:	f002 fcee 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	483c      	ldr	r0, [pc, #240]	; (8000d1c <MX_GPIO_Init+0x634>)
 8000c2a:	f002 fce1 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	483a      	ldr	r0, [pc, #232]	; (8000d2c <MX_GPIO_Init+0x644>)
 8000c42:	f002 fcd5 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000c46:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c58:	2309      	movs	r3, #9
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c60:	4619      	mov	r1, r3
 8000c62:	4831      	ldr	r0, [pc, #196]	; (8000d28 <MX_GPIO_Init+0x640>)
 8000c64:	f002 fcc4 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482a      	ldr	r0, [pc, #168]	; (8000d24 <MX_GPIO_Init+0x63c>)
 8000c7c:	f002 fcb8 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c92:	230a      	movs	r3, #10
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_GPIO_Init+0x640>)
 8000c9e:	f002 fca7 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000ca2:	233e      	movs	r3, #62	; 0x3e
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4819      	ldr	r0, [pc, #100]	; (8000d24 <MX_GPIO_Init+0x63c>)
 8000cbe:	f002 fc97 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_GPIO_Init+0x628>)
 8000cde:	f002 fc87 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000ce2:	2386      	movs	r3, #134	; 0x86
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <MX_GPIO_Init+0x638>)
 8000cfe:	f002 fc77 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d02:	23e0      	movs	r3, #224	; 0xe0
 8000d04:	e014      	b.n	8000d30 <MX_GPIO_Init+0x648>
 8000d06:	bf00      	nop
 8000d08:	58020c00 	.word	0x58020c00
 8000d0c:	58022000 	.word	0x58022000
 8000d10:	58021c00 	.word	0x58021c00
 8000d14:	58021000 	.word	0x58021000
 8000d18:	58020400 	.word	0x58020400
 8000d1c:	58021800 	.word	0x58021800
 8000d20:	58020000 	.word	0x58020000
 8000d24:	58020800 	.word	0x58020800
 8000d28:	58021400 	.word	0x58021400
 8000d2c:	58022800 	.word	0x58022800
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	4850      	ldr	r0, [pc, #320]	; (8000e8c <MX_GPIO_Init+0x7a4>)
 8000d4a:	f002 fc51 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d60:	2307      	movs	r3, #7
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4849      	ldr	r0, [pc, #292]	; (8000e90 <MX_GPIO_Init+0x7a8>)
 8000d6c:	f002 fc40 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8000d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4841      	ldr	r0, [pc, #260]	; (8000e8c <MX_GPIO_Init+0x7a4>)
 8000d88:	f002 fc32 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000d9c:	2309      	movs	r3, #9
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	483b      	ldr	r0, [pc, #236]	; (8000e94 <MX_GPIO_Init+0x7ac>)
 8000da8:	f002 fc22 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dbe:	230e      	movs	r3, #14
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4830      	ldr	r0, [pc, #192]	; (8000e8c <MX_GPIO_Init+0x7a4>)
 8000dca:	f002 fc11 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000de0:	2309      	movs	r3, #9
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	482b      	ldr	r0, [pc, #172]	; (8000e98 <MX_GPIO_Init+0x7b0>)
 8000dec:	f002 fc00 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8000df0:	2303      	movs	r3, #3
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e00:	230b      	movs	r3, #11
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4821      	ldr	r0, [pc, #132]	; (8000e90 <MX_GPIO_Init+0x7a8>)
 8000e0c:	f002 fbf0 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000e10:	2304      	movs	r3, #4
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <MX_GPIO_Init+0x7b4>)
 8000e28:	f002 fbe2 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <MX_GPIO_Init+0x7a8>)
 8000e46:	f002 fbd3 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <MX_GPIO_Init+0x7a8>)
 8000e68:	f002 fbc2 	bl	80035f0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000e6c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000e70:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e74:	f001 f99e 	bl	80021b4 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000e78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000e7c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000e80:	f001 f998 	bl	80021b4 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e84:	bf00      	nop
 8000e86:	3740      	adds	r7, #64	; 0x40
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58021c00 	.word	0x58021c00
 8000e90:	58020400 	.word	0x58020400
 8000e94:	58020000 	.word	0x58020000
 8000e98:	58020c00 	.word	0x58020c00
 8000e9c:	58022400 	.word	0x58022400

08000ea0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eb2:	f002 fa2f 	bl	8003314 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ebe:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000ec2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ec4:	2317      	movs	r3, #23
 8000ec6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fa4c 	bl	8003384 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000eec:	2004      	movs	r0, #4
 8000eee:	f002 fa29 	bl	8003344 <HAL_MPU_Enable>

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000efe:	b672      	cpsid	i
}
 8000f00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <Error_Handler+0x8>

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_MspInit+0x30>)
 8000f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x30>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x30>)
 8000f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	58024400 	.word	0x58024400

08000f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0bc      	sub	sp, #240	; 0xf0
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	22c0      	movs	r2, #192	; 0xc0
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00f f959 	bl	8010210 <memset>
  if(hadc->Instance==ADC3)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a41      	ldr	r2, [pc, #260]	; (8001068 <HAL_ADC_MspInit+0x130>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d17a      	bne.n	800105e <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f88:	23c0      	movs	r3, #192	; 0xc0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f005 fc72 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000faa:	f7ff ffa6 	bl	8000efa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a2d      	ldr	r2, [pc, #180]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_ADC_MspInit+0x134>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001010:	2303      	movs	r3, #3
 8001012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001020:	4619      	mov	r1, r3
 8001022:	4813      	ldr	r0, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0x138>)
 8001024:	f002 fae4 	bl	80035f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001028:	2301      	movs	r3, #1
 800102a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0x13c>)
 8001042:	f002 fad5 	bl	80035f0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001046:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800104a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800104e:	f001 f8b1 	bl	80021b4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001052:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001056:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800105a:	f001 f8ab 	bl	80021b4 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	37f0      	adds	r7, #240	; 0xf0
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58026000 	.word	0x58026000
 800106c:	58024400 	.word	0x58024400
 8001070:	58021400 	.word	0x58021400
 8001074:	58020800 	.word	0x58020800

08001078 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_CRC_MspInit+0x3c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10e      	bne.n	80010a8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_CRC_MspInit+0x40>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_CRC_MspInit+0x40>)
 8001092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_CRC_MspInit+0x40>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	58024c00 	.word	0x58024c00
 80010b8:	58024400 	.word	0x58024400

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_TIM_Base_MspInit+0x3c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10e      	bne.n	80010ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_TIM_Base_MspInit+0x40>)
 80010d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <HAL_TIM_Base_MspInit+0x40>)
 80010d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_TIM_Base_MspInit+0x40>)
 80010e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40014400 	.word	0x40014400
 80010fc:	58024400 	.word	0x58024400

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 ffe2 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <OTG_FS_IRQHandler+0x10>)
 800115a:	f002 fd6b 	bl	8003c34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	240050f0 	.word	0x240050f0

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f00f f802 	bl	80101a0 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24080000 	.word	0x24080000
 80011c8:	00000800 	.word	0x00000800
 80011cc:	24003bb0 	.word	0x24003bb0
 80011d0:	20000000 	.word	0x20000000

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d8:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <SystemInit+0xe4>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <SystemInit+0xe4>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <SystemInit+0xe8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	d807      	bhi.n	8001204 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <SystemInit+0xe8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 030f 	bic.w	r3, r3, #15
 80011fc:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <SystemInit+0xe8>)
 80011fe:	f043 0307 	orr.w	r3, r3, #7
 8001202:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <SystemInit+0xec>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <SystemInit+0xec>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <SystemInit+0xec>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <SystemInit+0xec>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4929      	ldr	r1, [pc, #164]	; (80012c0 <SystemInit+0xec>)
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <SystemInit+0xf0>)
 800121e:	4013      	ands	r3, r2
 8001220:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <SystemInit+0xe8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <SystemInit+0xe8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 030f 	bic.w	r3, r3, #15
 8001236:	4a21      	ldr	r2, [pc, #132]	; (80012bc <SystemInit+0xe8>)
 8001238:	f043 0307 	orr.w	r3, r3, #7
 800123c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <SystemInit+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <SystemInit+0xec>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <SystemInit+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <SystemInit+0xec>)
 8001252:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <SystemInit+0xf4>)
 8001254:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <SystemInit+0xec>)
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <SystemInit+0xf8>)
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <SystemInit+0xec>)
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <SystemInit+0xfc>)
 8001260:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <SystemInit+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <SystemInit+0xec>)
 800126a:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <SystemInit+0xfc>)
 800126c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <SystemInit+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <SystemInit+0xec>)
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <SystemInit+0xfc>)
 8001278:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <SystemInit+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <SystemInit+0xec>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <SystemInit+0xec>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <SystemInit+0xec>)
 800128e:	2200      	movs	r2, #0
 8001290:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <SystemInit+0x100>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <SystemInit+0x104>)
 8001298:	4013      	ands	r3, r2
 800129a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800129e:	d202      	bcs.n	80012a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <SystemInit+0x108>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <SystemInit+0x10c>)
 80012a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	52002000 	.word	0x52002000
 80012c0:	58024400 	.word	0x58024400
 80012c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012c8:	02020200 	.word	0x02020200
 80012cc:	01ff0000 	.word	0x01ff0000
 80012d0:	01010280 	.word	0x01010280
 80012d4:	5c001000 	.word	0x5c001000
 80012d8:	ffff0000 	.word	0xffff0000
 80012dc:	51008108 	.word	0x51008108
 80012e0:	52004000 	.word	0x52004000

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e8:	f7ff ff74 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	; (8001324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	; (8001330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f00e ff4b 	bl	80101ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff f83b 	bl	8000390 <main>
  bx  lr
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001320:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001324:	24003ab0 	.word	0x24003ab0
  ldr r2, =_sidata
 8001328:	080118b8 	.word	0x080118b8
  ldr r2, =_sbss
 800132c:	24003ac0 	.word	0x24003ac0
  ldr r4, =_ebss
 8001330:	24005a60 	.word	0x24005a60

08001334 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC3_IRQHandler>

08001336 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001344:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134c:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001354:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800135e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b090      	sub	sp, #64	; 0x40
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d102      	bne.n	800139c <MT25TL01G_Enter4BytesAddressMode+0x18>
 8001396:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139a:	e001      	b.n	80013a0 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80013a2:	23b7      	movs	r3, #183	; 0xb7
 80013a4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013be:	2300      	movs	r3, #0
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f860 	bl	800148c <MT25TL01G_WriteEnable>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013d2:	f06f 0301 	mvn.w	r3, #1
 80013d6:	e019      	b.n	800140c <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f003 fe4e 	bl	8005084 <HAL_QSPI_Command>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013ee:	f06f 0301 	mvn.w	r3, #1
 80013f2:	e00b      	b.n	800140c <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f80b 	bl	8001414 <MT25TL01G_AutoPollingMemReady>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001404:	f06f 0301 	mvn.w	r3, #1
 8001408:	e000      	b.n	800140c <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3740      	adds	r7, #64	; 0x40
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b096      	sub	sp, #88	; 0x58
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001420:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8001426:	2305      	movs	r3, #5
 8001428:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001432:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8001438:	2302      	movs	r3, #2
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001440:	2300      	movs	r3, #0
 8001442:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001444:	2300      	movs	r3, #0
 8001446:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8001450:	2310      	movs	r3, #16
 8001452:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001454:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001458:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800145a:	f240 1301 	movw	r3, #257	; 0x101
 800145e:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8001460:	2302      	movs	r3, #2
 8001462:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001464:	f107 0208 	add.w	r2, r7, #8
 8001468:	f107 0120 	add.w	r1, r7, #32
 800146c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f003 ff94 	bl	800539e <HAL_QSPI_AutoPolling>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800147c:	f06f 0304 	mvn.w	r3, #4
 8001480:	e000      	b.n	8001484 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8001482:	2300      	movs	r3, #0

}
 8001484:	4618      	mov	r0, r3
 8001486:	3758      	adds	r7, #88	; 0x58
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b096      	sub	sp, #88	; 0x58
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d102      	bne.n	80014a4 <MT25TL01G_WriteEnable+0x18>
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	e001      	b.n	80014a8 <MT25TL01G_WriteEnable+0x1c>
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80014aa:	2306      	movs	r3, #6
 80014ac:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014c2:	2300      	movs	r3, #0
 80014c4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014c6:	2300      	movs	r3, #0
 80014c8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f003 fdd5 	bl	8005084 <HAL_QSPI_Command>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80014e0:	f06f 0301 	mvn.w	r3, #1
 80014e4:	e029      	b.n	800153a <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80014e6:	f240 2302 	movw	r3, #514	; 0x202
 80014ea:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80014ec:	f240 2302 	movw	r3, #514	; 0x202
 80014f0:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80014fa:	2310      	movs	r3, #16
 80014fc:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80014fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001502:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8001504:	2305      	movs	r3, #5
 8001506:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d102      	bne.n	8001514 <MT25TL01G_WriteEnable+0x88>
 800150e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001512:	e001      	b.n	8001518 <MT25TL01G_WriteEnable+0x8c>
 8001514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001518:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800151a:	f107 0208 	add.w	r2, r7, #8
 800151e:	f107 0120 	add.w	r1, r7, #32
 8001522:	f241 3388 	movw	r3, #5000	; 0x1388
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f003 ff39 	bl	800539e <HAL_QSPI_AutoPolling>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8001532:	f06f 0304 	mvn.w	r3, #4
 8001536:	e000      	b.n	800153a <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3758      	adds	r7, #88	; 0x58
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b090      	sub	sp, #64	; 0x40
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800154a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8001550:	2335      	movs	r3, #53	; 0x35
 8001552:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001568:	2300      	movs	r3, #0
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800156c:	2300      	movs	r3, #0
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f003 fd82 	bl	8005084 <HAL_QSPI_Command>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001586:	f06f 0301 	mvn.w	r3, #1
 800158a:	e000      	b.n	800158e <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3740      	adds	r7, #64	; 0x40
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b090      	sub	sp, #64	; 0x40
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80015a4:	23f5      	movs	r3, #245	; 0xf5
 80015a6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f003 fd58 	bl	8005084 <HAL_QSPI_Command>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80015da:	f06f 0301 	mvn.w	r3, #1
 80015de:	e000      	b.n	80015e2 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3740      	adds	r7, #64	; 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b092      	sub	sp, #72	; 0x48
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d83a      	bhi.n	8001674 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 80015fe:	a201      	add	r2, pc, #4	; (adr r2, 8001604 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 8001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001604:	08001615 	.word	0x08001615
 8001608:	0800162d 	.word	0x0800162d
 800160c:	08001645 	.word	0x08001645
 8001610:	0800165d 	.word	0x0800165d
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800161a:	230e      	movs	r3, #14
 800161c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800161e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001628:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800162a:	e023      	b.n	8001674 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8001632:	233d      	movs	r3, #61	; 0x3d
 8001634:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800163c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001640:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001642:	e017      	b.n	8001674 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800164a:	23ee      	movs	r3, #238	; 0xee
 800164c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800164e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001654:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001658:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800165a:	e00b      	b.n	8001674 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800165c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8001662:	23ed      	movs	r3, #237	; 0xed
 8001664:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001666:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800166c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001670:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001672:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001674:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001678:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800167e:	2308      	movs	r3, #8
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8001682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8001688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800168e:	2300      	movs	r3, #0
 8001690:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800169a:	f107 0208 	add.w	r2, r7, #8
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f003 fef1 	bl	800548c <HAL_QSPI_MemoryMapped>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80016b0:	f06f 0305 	mvn.w	r3, #5
 80016b4:	e000      	b.n	80016b8 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3748      	adds	r7, #72	; 0x48
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b092      	sub	sp, #72	; 0x48
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d83a      	bhi.n	8001748 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 80016d2:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	080016e9 	.word	0x080016e9
 80016dc:	08001701 	.word	0x08001701
 80016e0:	08001719 	.word	0x08001719
 80016e4:	08001731 	.word	0x08001731
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80016ee:	230c      	movs	r3, #12
 80016f0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80016f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 80016fe:	e023      	b.n	8001748 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001706:	23bc      	movs	r3, #188	; 0xbc
 8001708:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800170a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001714:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001716:	e017      	b.n	8001748 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800171e:	23ec      	movs	r3, #236	; 0xec
 8001720:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001722:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001728:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800172c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800172e:	e00b      	b.n	8001748 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8001736:	23eb      	movs	r3, #235	; 0xeb
 8001738:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800173a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001740:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001744:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001746:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8001748:	2308      	movs	r3, #8
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800174c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001750:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800175a:	2300      	movs	r3, #0
 800175c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800175e:	2300      	movs	r3, #0
 8001760:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800176a:	f107 0208 	add.w	r2, r7, #8
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4619      	mov	r1, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f003 fe89 	bl	800548c <HAL_QSPI_MemoryMapped>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8001780:	f06f 0305 	mvn.w	r3, #5
 8001784:	e000      	b.n	8001788 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3748      	adds	r7, #72	; 0x48
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	; 0x40
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d102      	bne.n	80017a8 <MT25TL01G_ResetEnable+0x18>
 80017a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a6:	e001      	b.n	80017ac <MT25TL01G_ResetEnable+0x1c>
 80017a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ac:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80017ae:	2366      	movs	r3, #102	; 0x66
 80017b0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f003 fc53 	bl	8005084 <HAL_QSPI_Command>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80017e4:	f06f 0301 	mvn.w	r3, #1
 80017e8:	e000      	b.n	80017ec <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3740      	adds	r7, #64	; 0x40
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b090      	sub	sp, #64	; 0x40
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d102      	bne.n	800180c <MT25TL01G_ResetMemory+0x18>
 8001806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180a:	e001      	b.n	8001810 <MT25TL01G_ResetMemory+0x1c>
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8001812:	2399      	movs	r3, #153	; 0x99
 8001814:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800181a:	2300      	movs	r3, #0
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800182a:	2300      	movs	r3, #0
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800182e:	2300      	movs	r3, #0
 8001830:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f003 fc21 	bl	8005084 <HAL_QSPI_Command>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001848:	f06f 0301 	mvn.w	r3, #1
 800184c:	e000      	b.n	8001850 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3740      	adds	r7, #64	; 0x40
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b090      	sub	sp, #64	; 0x40
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001862:	2300      	movs	r3, #0
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800186c:	f06f 0301 	mvn.w	r3, #1
 8001870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001872:	e090      	b.n	8001996 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8001874:	494a      	ldr	r1, [pc, #296]	; (80019a0 <BSP_QSPI_Init+0x148>)
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 8086 	bne.w	8001996 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800188a:	4846      	ldr	r0, [pc, #280]	; (80019a4 <BSP_QSPI_Init+0x14c>)
 800188c:	f000 f99c 	bl	8001bc8 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 8001890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d17f      	bne.n	8001996 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fd4b 	bl	8001336 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <BSP_QSPI_Init+0x150>)
 80018a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ac:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80018ae:	2340      	movs	r3, #64	; 0x40
 80018b0:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <BSP_QSPI_Init+0x74>
  {
    return 32U;
 80018c8:	2320      	movs	r3, #32
 80018ca:	e003      	b.n	80018d4 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 80018cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <BSP_QSPI_Init+0x8c>
 80018e0:	2310      	movs	r3, #16
 80018e2:	e000      	b.n	80018e6 <BSP_QSPI_Init+0x8e>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4619      	mov	r1, r3
 80018ee:	482d      	ldr	r0, [pc, #180]	; (80019a4 <BSP_QSPI_Init+0x14c>)
 80018f0:	f000 f85c 	bl	80019ac <MX_QSPI_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80018fa:	f06f 0303 	mvn.w	r3, #3
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	e049      	b.n	8001996 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 faa8 	bl	8001e58 <QSPI_ResetMemory>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800190e:	f06f 0304 	mvn.w	r3, #4
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001914:	e03f      	b.n	8001996 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <BSP_QSPI_Init+0x148>)
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3301      	adds	r3, #1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <BSP_QSPI_Init+0x14c>)
 800192c:	f7ff fd72 	bl	8001414 <MT25TL01G_AutoPollingMemReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001936:	f06f 0304 	mvn.w	r3, #4
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193c:	e02b      	b.n	8001996 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800193e:	4918      	ldr	r1, [pc, #96]	; (80019a0 <BSP_QSPI_Init+0x148>)
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3301      	adds	r3, #1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4814      	ldr	r0, [pc, #80]	; (80019a4 <BSP_QSPI_Init+0x14c>)
 8001954:	f7ff fd16 	bl	8001384 <MT25TL01G_Enter4BytesAddressMode>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800195e:	f06f 0304 	mvn.w	r3, #4
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001964:	e017      	b.n	8001996 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fae2 	bl	8001f30 <QSPI_DummyCyclesCfg>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001972:	f06f 0304 	mvn.w	r3, #4
 8001976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001978:	e00d      	b.n	8001996 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	7819      	ldrb	r1, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	785b      	ldrb	r3, [r3, #1]
 8001982:	461a      	mov	r2, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f89d 	bl	8001ac4 <BSP_QSPI_ConfigFlash>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8001990:	f06f 0304 	mvn.w	r3, #4
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001998:	4618      	mov	r0, r3
 800199a:	3740      	adds	r7, #64	; 0x40
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	24003c00 	.word	0x24003c00
 80019a4:	24003bb4 	.word	0x24003bb4
 80019a8:	08011800 	.word	0x08011800

080019ac <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <MX_QSPI_Init+0x5c>)
 80019ba:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019e0:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f003 fac6 	bl	8004f88 <HAL_QSPI_Init>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	52005000 	.word	0x52005000

08001a0c <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a1e:	f06f 0301 	mvn.w	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e045      	b.n	8001ab2 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8001a26:	4925      	ldr	r1, [pc, #148]	; (8001abc <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	3302      	adds	r3, #2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11d      	bne.n	8001a78 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a3c:	491f      	ldr	r1, [pc, #124]	; (8001abc <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8001a52:	f7ff fe35 	bl	80016c0 <MT25TL01G_EnableMemoryMappedModeSTR>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a5c:	f06f 0304 	mvn.w	r3, #4
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e026      	b.n	8001ab2 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001a64:	4915      	ldr	r1, [pc, #84]	; (8001abc <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	2202      	movs	r2, #2
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e01c      	b.n	8001ab2 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a78:	4910      	ldr	r1, [pc, #64]	; (8001abc <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3301      	adds	r3, #1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8001a8e:	f7ff fdad 	bl	80015ec <MT25TL01G_EnableMemoryMappedModeDTR>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a98:	f06f 0304 	mvn.w	r3, #4
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e008      	b.n	8001ab2 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001aa0:	4906      	ldr	r1, [pc, #24]	; (8001abc <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	24003c00 	.word	0x24003c00
 8001ac0:	24003bb4 	.word	0x24003bb4

08001ac4 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ade:	f06f 0301 	mvn.w	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e067      	b.n	8001bb6 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001ae6:	4936      	ldr	r1, [pc, #216]	; (8001bc0 <BSP_QSPI_ConfigFlash+0xfc>)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d103      	bne.n	8001b02 <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8001afa:	f06f 0319 	mvn.w	r3, #25
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e059      	b.n	8001bb6 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001b02:	78bb      	ldrb	r3, [r7, #2]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <BSP_QSPI_ConfigFlash+0x48>
 8001b08:	2310      	movs	r3, #16
 8001b0a:	e000      	b.n	8001b0e <BSP_QSPI_ConfigFlash+0x4a>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <BSP_QSPI_ConfigFlash+0x100>)
 8001b10:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001b12:	482c      	ldr	r0, [pc, #176]	; (8001bc4 <BSP_QSPI_ConfigFlash+0x100>)
 8001b14:	f003 fa38 	bl	8004f88 <HAL_QSPI_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001b1e:	f06f 0303 	mvn.w	r3, #3
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e047      	b.n	8001bb6 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8001b26:	4926      	ldr	r1, [pc, #152]	; (8001bc0 <BSP_QSPI_ConfigFlash+0xfc>)
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	3301      	adds	r3, #1
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d10c      	bne.n	8001b56 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d016      	beq.n	8001b70 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <BSP_QSPI_ConfigFlash+0x100>)
 8001b44:	f7ff fd27 	bl	8001596 <MT25TL01G_ExitQPIMode>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b4e:	f06f 0304 	mvn.w	r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001b54:	e00c      	b.n	8001b70 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d10b      	bne.n	8001b74 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8001b5c:	4819      	ldr	r0, [pc, #100]	; (8001bc4 <BSP_QSPI_ConfigFlash+0x100>)
 8001b5e:	f7ff fcf0 	bl	8001542 <MT25TL01G_EnterQPIMode>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b68:	f06f 0304 	mvn.w	r3, #4
 8001b6c:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001b6e:	e001      	b.n	8001b74 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 8001b70:	bf00      	nop
 8001b72:	e000      	b.n	8001b76 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8001b74:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d11c      	bne.n	8001bb6 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001b7c:	4910      	ldr	r1, [pc, #64]	; (8001bc0 <BSP_QSPI_ConfigFlash+0xfc>)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8001b8e:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <BSP_QSPI_ConfigFlash+0xfc>)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001ba2:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <BSP_QSPI_ConfigFlash+0xfc>)
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	78ba      	ldrb	r2, [r7, #2]
 8001bb4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	24003c00 	.word	0x24003c00
 8001bc4:	24003bb4 	.word	0x24003bb4

08001bc8 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b094      	sub	sp, #80	; 0x50
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001bd0:	4b9c      	ldr	r3, [pc, #624]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001bd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bd6:	4a9b      	ldr	r2, [pc, #620]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001be0:	4b98      	ldr	r3, [pc, #608]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001be2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8001bee:	4b95      	ldr	r3, [pc, #596]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bf2:	4a94      	ldr	r2, [pc, #592]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8001bfa:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bfe:	4a91      	ldr	r2, [pc, #580]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c04:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001c06:	4b8f      	ldr	r3, [pc, #572]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	4a8d      	ldr	r2, [pc, #564]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c0e:	f043 0320 	orr.w	r3, r3, #32
 8001c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8001c24:	4b87      	ldr	r3, [pc, #540]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2a:	4a86      	ldr	r2, [pc, #536]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c34:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8001c42:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	4a7e      	ldr	r2, [pc, #504]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c52:	4b7c      	ldr	r3, [pc, #496]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8001c60:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c68:	f043 0320 	orr.w	r3, r3, #32
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c70:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8001c7e:	4b71      	ldr	r3, [pc, #452]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a6f      	ldr	r2, [pc, #444]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8001c9c:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	4a68      	ldr	r2, [pc, #416]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001ca4:	f043 0320 	orr.w	r3, r3, #32
 8001ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cac:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	4a60      	ldr	r2, [pc, #384]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cca:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a59      	ldr	r2, [pc, #356]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8001cf6:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	4a4a      	ldr	r2, [pc, #296]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d24:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	4a42      	ldr	r2, [pc, #264]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <QSPI_MspInit+0x27c>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001d62:	2309      	movs	r3, #9
 8001d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4836      	ldr	r0, [pc, #216]	; (8001e48 <QSPI_MspInit+0x280>)
 8001d6e:	f001 fc3f 	bl	80035f0 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8001d72:	2340      	movs	r3, #64	; 0x40
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8001d7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d82:	4619      	mov	r1, r3
 8001d84:	4831      	ldr	r0, [pc, #196]	; (8001e4c <QSPI_MspInit+0x284>)
 8001d86:	f001 fc33 	bl	80035f0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8001d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001d94:	2309      	movs	r3, #9
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8001d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482c      	ldr	r0, [pc, #176]	; (8001e50 <QSPI_MspInit+0x288>)
 8001da0:	f001 fc26 	bl	80035f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8001da4:	2304      	movs	r3, #4
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001da8:	2309      	movs	r3, #9
 8001daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8001dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001db0:	4619      	mov	r1, r3
 8001db2:	4828      	ldr	r0, [pc, #160]	; (8001e54 <QSPI_MspInit+0x28c>)
 8001db4:	f001 fc1c 	bl	80035f0 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8001db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8001dc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481f      	ldr	r0, [pc, #124]	; (8001e48 <QSPI_MspInit+0x280>)
 8001dca:	f001 fc11 	bl	80035f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8001dce:	2308      	movs	r3, #8
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001dd2:	2309      	movs	r3, #9
 8001dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8001dd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481d      	ldr	r0, [pc, #116]	; (8001e54 <QSPI_MspInit+0x28c>)
 8001dde:	f001 fc07 	bl	80035f0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001de6:	2309      	movs	r3, #9
 8001de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8001dea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dee:	4619      	mov	r1, r3
 8001df0:	4815      	ldr	r0, [pc, #84]	; (8001e48 <QSPI_MspInit+0x280>)
 8001df2:	f001 fbfd 	bl	80035f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8001df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8001dfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e00:	4619      	mov	r1, r3
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <QSPI_MspInit+0x284>)
 8001e04:	f001 fbf4 	bl	80035f0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8001e08:	2340      	movs	r3, #64	; 0x40
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8001e0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <QSPI_MspInit+0x280>)
 8001e14:	f001 fbec 	bl	80035f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8001e18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8001e1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e22:	4619      	mov	r1, r3
 8001e24:	4809      	ldr	r0, [pc, #36]	; (8001e4c <QSPI_MspInit+0x284>)
 8001e26:	f001 fbe3 	bl	80035f0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	205c      	movs	r0, #92	; 0x5c
 8001e30:	f001 fa3b 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001e34:	205c      	movs	r0, #92	; 0x5c
 8001e36:	f001 fa52 	bl	80032de <HAL_NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3750      	adds	r7, #80	; 0x50
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58021400 	.word	0x58021400
 8001e4c:	58021800 	.word	0x58021800
 8001e50:	58020c00 	.word	0x58020c00
 8001e54:	58021c00 	.word	0x58021c00

08001e58 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001e64:	2103      	movs	r1, #3
 8001e66:	4830      	ldr	r0, [pc, #192]	; (8001f28 <QSPI_ResetMemory+0xd0>)
 8001e68:	f7ff fc92 	bl	8001790 <MT25TL01G_ResetEnable>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 8001e72:	f06f 0304 	mvn.w	r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e051      	b.n	8001f1e <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	482a      	ldr	r0, [pc, #168]	; (8001f28 <QSPI_ResetMemory+0xd0>)
 8001e7e:	f7ff fcb9 	bl	80017f4 <MT25TL01G_ResetMemory>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e88:	f06f 0304 	mvn.w	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e046      	b.n	8001f1e <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001e90:	4926      	ldr	r1, [pc, #152]	; (8001f2c <QSPI_ResetMemory+0xd4>)
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4820      	ldr	r0, [pc, #128]	; (8001f28 <QSPI_ResetMemory+0xd0>)
 8001ea6:	f7ff fab5 	bl	8001414 <MT25TL01G_AutoPollingMemReady>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001eb0:	f06f 0304 	mvn.w	r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	e032      	b.n	8001f1e <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	481b      	ldr	r0, [pc, #108]	; (8001f28 <QSPI_ResetMemory+0xd0>)
 8001ebc:	f7ff fc68 	bl	8001790 <MT25TL01G_ResetEnable>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ec6:	f06f 0304 	mvn.w	r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e027      	b.n	8001f1e <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4815      	ldr	r0, [pc, #84]	; (8001f28 <QSPI_ResetMemory+0xd0>)
 8001ed2:	f7ff fc8f 	bl	80017f4 <MT25TL01G_ResetMemory>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001edc:	f06f 0304 	mvn.w	r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e01c      	b.n	8001f1e <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8001ee4:	4911      	ldr	r1, [pc, #68]	; (8001f2c <QSPI_ResetMemory+0xd4>)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8001ef6:	490d      	ldr	r1, [pc, #52]	; (8001f2c <QSPI_ResetMemory+0xd4>)
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3301      	adds	r3, #1
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <QSPI_ResetMemory+0xd4>)
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3302      	adds	r3, #2
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	24003bb4 	.word	0x24003bb4
 8001f2c:	24003c00 	.word	0x24003c00

08001f30 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b092      	sub	sp, #72	; 0x48
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001f40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8001f46:	2385      	movs	r3, #133	; 0x85
 8001f48:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001f52:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f64:	2300      	movs	r3, #0
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4619      	mov	r1, r3
 8001f76:	482b      	ldr	r0, [pc, #172]	; (8002024 <QSPI_DummyCyclesCfg+0xf4>)
 8001f78:	f003 f884 	bl	8005084 <HAL_QSPI_Command>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001f82:	f06f 0304 	mvn.w	r3, #4
 8001f86:	e048      	b.n	800201a <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f88:	f107 030a 	add.w	r3, r7, #10
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4619      	mov	r1, r3
 8001f92:	4824      	ldr	r0, [pc, #144]	; (8002024 <QSPI_DummyCyclesCfg+0xf4>)
 8001f94:	f003 f966 	bl	8005264 <HAL_QSPI_Receive>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001f9e:	f06f 0304 	mvn.w	r3, #4
 8001fa2:	e03a      	b.n	800201a <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001fa4:	4920      	ldr	r1, [pc, #128]	; (8002028 <QSPI_DummyCyclesCfg+0xf8>)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481a      	ldr	r0, [pc, #104]	; (8002024 <QSPI_DummyCyclesCfg+0xf4>)
 8001fba:	f7ff fa67 	bl	800148c <MT25TL01G_WriteEnable>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001fc4:	f06f 0304 	mvn.w	r3, #4
 8001fc8:	e027      	b.n	800201a <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8001fca:	2381      	movs	r3, #129	; 0x81
 8001fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8001fce:	897a      	ldrh	r2, [r7, #10]
 8001fd0:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <QSPI_DummyCyclesCfg+0xfc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480e      	ldr	r0, [pc, #56]	; (8002024 <QSPI_DummyCyclesCfg+0xf4>)
 8001fec:	f003 f84a 	bl	8005084 <HAL_QSPI_Command>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001ff6:	f06f 0304 	mvn.w	r3, #4
 8001ffa:	e00e      	b.n	800201a <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ffc:	f107 030a 	add.w	r3, r7, #10
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4619      	mov	r1, r3
 8002006:	4807      	ldr	r0, [pc, #28]	; (8002024 <QSPI_DummyCyclesCfg+0xf4>)
 8002008:	f003 f89a 	bl	8005140 <HAL_QSPI_Transmit>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8002012:	f06f 0304 	mvn.w	r3, #4
 8002016:	e000      	b.n	800201a <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800201a:	4618      	mov	r0, r3
 800201c:	3748      	adds	r7, #72	; 0x48
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24003bb4 	.word	0x24003bb4
 8002028:	24003c00 	.word	0x24003c00
 800202c:	ffff8080 	.word	0xffff8080

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002036:	2003      	movs	r0, #3
 8002038:	f001 f92c 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800203c:	f004 fa64 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_Init+0x68>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	4913      	ldr	r1, [pc, #76]	; (800209c <HAL_Init+0x6c>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_Init+0x68>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_Init+0x6c>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_Init+0x70>)
 8002072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_Init+0x74>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f814 	bl	80020a8 <HAL_InitTick>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e002      	b.n	8002090 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800208a:	f7fe ff3b 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	58024400 	.word	0x58024400
 800209c:	080117f0 	.word	0x080117f0
 80020a0:	24000004 	.word	0x24000004
 80020a4:	24000000 	.word	0x24000000

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_InitTick+0x60>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e021      	b.n	8002100 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_InitTick+0x64>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_InitTick+0x60>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 f911 	bl	80032fa <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f001 f8db 	bl	80032aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x68>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2400000c 	.word	0x2400000c
 800210c:	24000000 	.word	0x24000000
 8002110:	24000008 	.word	0x24000008

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2400000c 	.word	0x2400000c
 8002138:	24003c0c 	.word	0x24003c0c

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	24003c0c 	.word	0x24003c0c

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2400000c 	.word	0x2400000c

0800219c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetREVID+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0c1b      	lsrs	r3, r3, #16
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	5c001000 	.word	0x5c001000

080021b4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	58000400 	.word	0x58000400

080021e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	609a      	str	r2, [r3, #8]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3360      	adds	r3, #96	; 0x60
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	431a      	orrs	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	611a      	str	r2, [r3, #16]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b087      	sub	sp, #28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3360      	adds	r3, #96	; 0x60
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	431a      	orrs	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
  }
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3330      	adds	r3, #48	; 0x30
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	211f      	movs	r1, #31
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	f003 011f 	and.w	r1, r3, #31
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	431a      	orrs	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800233c:	bf00      	nop
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3314      	adds	r3, #20
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0e5b      	lsrs	r3, r3, #25
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	4413      	add	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0d1b      	lsrs	r3, r3, #20
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2107      	movs	r1, #7
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	401a      	ands	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	0d1b      	lsrs	r3, r3, #20
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b8:	43db      	mvns	r3, r3
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0318 	and.w	r3, r3, #24
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023c4:	40d9      	lsrs	r1, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	400b      	ands	r3, r1
 80023ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	000fffff 	.word	0x000fffff

080023e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <LL_ADC_DisableDeepPowerDown+0x20>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6093      	str	r3, [r2, #8]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	5fffffc0 	.word	0x5fffffc0

0800240c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800241c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002420:	d101      	bne.n	8002426 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <LL_ADC_EnableInternalRegulator+0x24>)
 8002442:	4013      	ands	r3, r2
 8002444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	6fffffc0 	.word	0x6fffffc0

0800245c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002470:	d101      	bne.n	8002476 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <LL_ADC_IsEnabled+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_IsEnabled+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d101      	bne.n	80024e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e18f      	b.n	8002832 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7fe fd09 	bl	8000f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff67 	bl	800240c <LL_ADC_IsDeepPowerDownEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff4d 	bl	80023e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff82 	bl	800245c <LL_ADC_IsInternalRegulatorEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d114      	bne.n	8002588 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff66 	bl	8002434 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002568:	4b87      	ldr	r3, [pc, #540]	; (8002788 <HAL_ADC_Init+0x290>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	4a87      	ldr	r2, [pc, #540]	; (800278c <HAL_ADC_Init+0x294>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	3301      	adds	r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800257a:	e002      	b.n	8002582 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3b01      	subs	r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f9      	bne.n	800257c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff65 	bl	800245c <LL_ADC_IsInternalRegulatorEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff76 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 80025be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f040 8129 	bne.w	8002820 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 8125 	bne.w	8002820 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025de:	f043 0202 	orr.w	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff4a 	bl	8002484 <LL_ADC_IsEnabled>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d136      	bne.n	8002664 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_ADC_Init+0x298>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_ADC_Init+0x112>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a63      	ldr	r2, [pc, #396]	; (8002794 <HAL_ADC_Init+0x29c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10e      	bne.n	8002628 <HAL_ADC_Init+0x130>
 800260a:	4861      	ldr	r0, [pc, #388]	; (8002790 <HAL_ADC_Init+0x298>)
 800260c:	f7ff ff3a 	bl	8002484 <LL_ADC_IsEnabled>
 8002610:	4604      	mov	r4, r0
 8002612:	4860      	ldr	r0, [pc, #384]	; (8002794 <HAL_ADC_Init+0x29c>)
 8002614:	f7ff ff36 	bl	8002484 <LL_ADC_IsEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	4323      	orrs	r3, r4
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	e008      	b.n	800263a <HAL_ADC_Init+0x142>
 8002628:	485b      	ldr	r0, [pc, #364]	; (8002798 <HAL_ADC_Init+0x2a0>)
 800262a:	f7ff ff2b 	bl	8002484 <LL_ADC_IsEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a53      	ldr	r2, [pc, #332]	; (8002790 <HAL_ADC_Init+0x298>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_ADC_Init+0x15a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_ADC_Init+0x29c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Init+0x15e>
 8002652:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_ADC_Init+0x2a4>)
 8002654:	e000      	b.n	8002658 <HAL_ADC_Init+0x160>
 8002656:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <HAL_ADC_Init+0x2a8>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f7ff fdbe 	bl	80021e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002664:	f7ff fd9a 	bl	800219c <HAL_GetREVID>
 8002668:	4603      	mov	r3, r0
 800266a:	f241 0203 	movw	r2, #4099	; 0x1003
 800266e:	4293      	cmp	r3, r2
 8002670:	d914      	bls.n	800269c <HAL_ADC_Init+0x1a4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d110      	bne.n	800269c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7d5b      	ldrb	r3, [r3, #21]
 800267e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002684:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800268a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7f1b      	ldrb	r3, [r3, #28]
 8002690:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002692:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002694:	f043 030c 	orr.w	r3, r3, #12
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e00d      	b.n	80026b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7d5b      	ldrb	r3, [r3, #21]
 80026a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7f1b      	ldrb	r3, [r3, #28]
 80026b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7f1b      	ldrb	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	045b      	lsls	r3, r3, #17
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_ADC_Init+0x2ac>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	69b9      	ldr	r1, [r7, #24]
 80026fa:	430b      	orrs	r3, r1
 80026fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fed1 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 8002708:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fede 	bl	80024d0 <LL_ADC_INJ_IsConversionOngoing>
 8002714:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d15f      	bne.n	80027dc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d15c      	bne.n	80027dc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7d1b      	ldrb	r3, [r3, #20]
 8002726:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_ADC_Init+0x2b0>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	430b      	orrs	r3, r1
 8002742:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800274a:	2b01      	cmp	r3, #1
 800274c:	d130      	bne.n	80027b0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_ADC_Init+0x2b4>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002762:	3a01      	subs	r2, #1
 8002764:	0411      	lsls	r1, r2, #16
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002776:	430a      	orrs	r2, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	611a      	str	r2, [r3, #16]
 8002784:	e01c      	b.n	80027c0 <HAL_ADC_Init+0x2c8>
 8002786:	bf00      	nop
 8002788:	24000000 	.word	0x24000000
 800278c:	053e2d63 	.word	0x053e2d63
 8002790:	40022000 	.word	0x40022000
 8002794:	40022100 	.word	0x40022100
 8002798:	58026000 	.word	0x58026000
 800279c:	40022300 	.word	0x40022300
 80027a0:	58026300 	.word	0x58026300
 80027a4:	fff0c003 	.word	0xfff0c003
 80027a8:	ffffbffc 	.word	0xffffbffc
 80027ac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fb80 	bl	8002edc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10c      	bne.n	80027fe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f023 010f 	bic.w	r1, r3, #15
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	1e5a      	subs	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
 80027fc:	e007      	b.n	800280e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 020f 	bic.w	r2, r2, #15
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
 800281e:	e007      	b.n	8002830 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f043 0210 	orr.w	r2, r3, #16
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002830:	7ffb      	ldrb	r3, [r7, #31]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop

0800283c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b0a1      	sub	sp, #132	; 0x84
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a9d      	ldr	r2, [pc, #628]	; (8002acc <HAL_ADC_ConfigChannel+0x290>)
 8002856:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x2a>
 8002862:	2302      	movs	r3, #2
 8002864:	e321      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x66e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fe19 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 8306 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <HAL_ADC_ConfigChannel+0x62>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2201      	movs	r2, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	e016      	b.n	80028cc <HAL_ADC_ConfigChannel+0x90>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80028ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ae:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80028b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x7e>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x86>
  return __builtin_clz(value);
 80028ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2201      	movs	r2, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	69d1      	ldr	r1, [r2, #28]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	430b      	orrs	r3, r1
 80028d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f7ff fd02 	bl	80022f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fdda 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 80028f6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fde7 	bl	80024d0 <LL_ADC_INJ_IsConversionOngoing>
 8002902:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 80b3 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 80af 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6819      	ldr	r1, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	461a      	mov	r2, r3
 8002922:	f7ff fd11 	bl	8002348 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002926:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_ADC_ConfigChannel+0x294>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800292e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002932:	d10b      	bne.n	800294c <HAL_ADC_ConfigChannel+0x110>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	e01d      	b.n	8002988 <HAL_ADC_ConfigChannel+0x14c>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10b      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x136>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	e00a      	b.n	8002988 <HAL_ADC_ConfigChannel+0x14c>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d027      	beq.n	80029e2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6919      	ldr	r1, [r3, #16]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a0:	f7ff fc52 	bl	8002248 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6919      	ldr	r1, [r3, #16]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	7e5b      	ldrb	r3, [r3, #25]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x17e>
 80029b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029b8:	e000      	b.n	80029bc <HAL_ADC_ConfigChannel+0x180>
 80029ba:	2300      	movs	r3, #0
 80029bc:	461a      	mov	r2, r3
 80029be:	f7ff fc7c 	bl	80022ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6919      	ldr	r1, [r3, #16]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	7e1b      	ldrb	r3, [r3, #24]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x19c>
 80029d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d6:	e000      	b.n	80029da <HAL_ADC_ConfigChannel+0x19e>
 80029d8:	2300      	movs	r3, #0
 80029da:	461a      	mov	r2, r3
 80029dc:	f7ff fc54 	bl	8002288 <LL_ADC_SetDataRightShift>
 80029e0:	e047      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d107      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a04:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	069b      	lsls	r3, r3, #26
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d107      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a28:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	069b      	lsls	r3, r3, #26
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d107      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a4c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	069b      	lsls	r3, r3, #26
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d107      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a70:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fd04 	bl	8002484 <LL_ADC_IsEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 820d 	bne.w	8002e9e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	461a      	mov	r2, r3
 8002a92:	f7ff fc85 	bl	80023a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <HAL_ADC_ConfigChannel+0x290>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	f040 8133 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d110      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x298>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2b09      	cmp	r3, #9
 8002ac0:	bf94      	ite	ls
 8002ac2:	2301      	movls	r3, #1
 8002ac4:	2300      	movhi	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e01e      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x2cc>
 8002aca:	bf00      	nop
 8002acc:	47ff0000 	.word	0x47ff0000
 8002ad0:	5c001000 	.word	0x5c001000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e003      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	bf94      	ite	ls
 8002b02:	2301      	movls	r3, #1
 8002b04:	2300      	movhi	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d079      	beq.n	8002c00 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x2ec>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	069b      	lsls	r3, r3, #26
 8002b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b26:	e015      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x318>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	069b      	lsls	r3, r3, #26
 8002b50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x338>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	3301      	adds	r3, #1
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	e017      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x368>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	ea42 0103 	orr.w	r1, r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x38e>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	051b      	lsls	r3, r3, #20
 8002bc8:	e018      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x3c0>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e003      	b.n	8002bee <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	e07e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x3e0>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	3301      	adds	r3, #1
 8002c14:	069b      	lsls	r3, r3, #26
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1a:	e015      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x40c>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e003      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	069b      	lsls	r3, r3, #26
 8002c44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x42c>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	e017      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x45c>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	61bb      	str	r3, [r7, #24]
  return result;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e003      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2101      	movs	r1, #1
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	ea42 0103 	orr.w	r1, r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10d      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x488>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b1e      	subs	r3, #30
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	e01b      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x4c0>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
  return result;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b1e      	subs	r3, #30
 8002cf6:	051b      	lsls	r3, r3, #20
 8002cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	6892      	ldr	r2, [r2, #8]
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7ff fb20 	bl	8002348 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f280 80c6 	bge.w	8002e9e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a67      	ldr	r2, [pc, #412]	; (8002eb4 <HAL_ADC_ConfigChannel+0x678>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_ADC_ConfigChannel+0x4ea>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a65      	ldr	r2, [pc, #404]	; (8002eb8 <HAL_ADC_ConfigChannel+0x67c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x4ee>
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <HAL_ADC_ConfigChannel+0x680>)
 8002d28:	e000      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x4f0>
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_ADC_ConfigChannel+0x684>)
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fa7d 	bl	800222c <LL_ADC_GetCommonPathInternalCh>
 8002d32:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5e      	ldr	r2, [pc, #376]	; (8002eb4 <HAL_ADC_ConfigChannel+0x678>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x50c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <HAL_ADC_ConfigChannel+0x67c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10e      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x52a>
 8002d48:	485a      	ldr	r0, [pc, #360]	; (8002eb4 <HAL_ADC_ConfigChannel+0x678>)
 8002d4a:	f7ff fb9b 	bl	8002484 <LL_ADC_IsEnabled>
 8002d4e:	4604      	mov	r4, r0
 8002d50:	4859      	ldr	r0, [pc, #356]	; (8002eb8 <HAL_ADC_ConfigChannel+0x67c>)
 8002d52:	f7ff fb97 	bl	8002484 <LL_ADC_IsEnabled>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4323      	orrs	r3, r4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	e008      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x53c>
 8002d66:	4857      	ldr	r0, [pc, #348]	; (8002ec4 <HAL_ADC_ConfigChannel+0x688>)
 8002d68:	f7ff fb8c 	bl	8002484 <LL_ADC_IsEnabled>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d07d      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a51      	ldr	r2, [pc, #324]	; (8002ec8 <HAL_ADC_ConfigChannel+0x68c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d130      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x5ac>
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d12b      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <HAL_ADC_ConfigChannel+0x688>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	f040 8081 	bne.w	8002e9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a44      	ldr	r2, [pc, #272]	; (8002eb4 <HAL_ADC_ConfigChannel+0x678>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x574>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_ADC_ConfigChannel+0x67c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x578>
 8002db0:	4a42      	ldr	r2, [pc, #264]	; (8002ebc <HAL_ADC_ConfigChannel+0x680>)
 8002db2:	e000      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x57a>
 8002db4:	4a42      	ldr	r2, [pc, #264]	; (8002ec0 <HAL_ADC_ConfigChannel+0x684>)
 8002db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f7ff fa21 	bl	8002206 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc4:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_ADC_ConfigChannel+0x690>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	4a41      	ldr	r2, [pc, #260]	; (8002ed0 <HAL_ADC_ConfigChannel+0x694>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002dd8:	e002      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f9      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de6:	e05a      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a39      	ldr	r2, [pc, #228]	; (8002ed4 <HAL_ADC_ConfigChannel+0x698>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d11e      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x5f4>
 8002df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d119      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <HAL_ADC_ConfigChannel+0x688>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d14b      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_ADC_ConfigChannel+0x678>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x5de>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_ADC_ConfigChannel+0x67c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x5e2>
 8002e1a:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_ADC_ConfigChannel+0x680>)
 8002e1c:	e000      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x5e4>
 8002e1e:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <HAL_ADC_ConfigChannel+0x684>)
 8002e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f7ff f9ec 	bl	8002206 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e2e:	e036      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_ADC_ConfigChannel+0x69c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d131      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d12c      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <HAL_ADC_ConfigChannel+0x688>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d127      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <HAL_ADC_ConfigChannel+0x678>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_ConfigChannel+0x626>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a16      	ldr	r2, [pc, #88]	; (8002eb8 <HAL_ADC_ConfigChannel+0x67c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x62a>
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_ADC_ConfigChannel+0x680>)
 8002e64:	e000      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x62c>
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_ADC_ConfigChannel+0x684>)
 8002e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7ff f9c8 	bl	8002206 <LL_ADC_SetCommonPathInternalCh>
 8002e76:	e012      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e8a:	e008      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ea6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3784      	adds	r7, #132	; 0x84
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40022100 	.word	0x40022100
 8002ebc:	40022300 	.word	0x40022300
 8002ec0:	58026300 	.word	0x58026300
 8002ec4:	58026000 	.word	0x58026000
 8002ec8:	cb840000 	.word	0xcb840000
 8002ecc:	24000000 	.word	0x24000000
 8002ed0:	053e2d63 	.word	0x053e2d63
 8002ed4:	c7520000 	.word	0xc7520000
 8002ed8:	cfb80000 	.word	0xcfb80000

08002edc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7a      	ldr	r2, [pc, #488]	; (80030d4 <ADC_ConfigureBoostMode+0x1f8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <ADC_ConfigureBoostMode+0x1c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a79      	ldr	r2, [pc, #484]	; (80030d8 <ADC_ConfigureBoostMode+0x1fc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d109      	bne.n	8002f0c <ADC_ConfigureBoostMode+0x30>
 8002ef8:	4b78      	ldr	r3, [pc, #480]	; (80030dc <ADC_ConfigureBoostMode+0x200>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e008      	b.n	8002f1e <ADC_ConfigureBoostMode+0x42>
 8002f0c:	4b74      	ldr	r3, [pc, #464]	; (80030e0 <ADC_ConfigureBoostMode+0x204>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01c      	beq.n	8002f5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f22:	f003 fc6b 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8002f26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f30:	d010      	beq.n	8002f54 <ADC_ConfigureBoostMode+0x78>
 8002f32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f36:	d873      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x144>
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d002      	beq.n	8002f44 <ADC_ConfigureBoostMode+0x68>
 8002f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f42:	d16d      	bne.n	8003020 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	60fb      	str	r3, [r7, #12]
        break;
 8002f52:	e068      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	60fb      	str	r3, [r7, #12]
        break;
 8002f5a:	e064      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f004 fe9a 	bl	8007c9c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f72:	d051      	beq.n	8003018 <ADC_ConfigureBoostMode+0x13c>
 8002f74:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f78:	d854      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002f7a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f7e:	d047      	beq.n	8003010 <ADC_ConfigureBoostMode+0x134>
 8002f80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f84:	d84e      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002f86:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f8a:	d03d      	beq.n	8003008 <ADC_ConfigureBoostMode+0x12c>
 8002f8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f90:	d848      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f96:	d033      	beq.n	8003000 <ADC_ConfigureBoostMode+0x124>
 8002f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9c:	d842      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002f9e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fa2:	d029      	beq.n	8002ff8 <ADC_ConfigureBoostMode+0x11c>
 8002fa4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fa8:	d83c      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002faa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fae:	d01a      	beq.n	8002fe6 <ADC_ConfigureBoostMode+0x10a>
 8002fb0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fb4:	d836      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002fb6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fba:	d014      	beq.n	8002fe6 <ADC_ConfigureBoostMode+0x10a>
 8002fbc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fc0:	d830      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc6:	d00e      	beq.n	8002fe6 <ADC_ConfigureBoostMode+0x10a>
 8002fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fcc:	d82a      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002fce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fd2:	d008      	beq.n	8002fe6 <ADC_ConfigureBoostMode+0x10a>
 8002fd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fd8:	d824      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x148>
 8002fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fde:	d002      	beq.n	8002fe6 <ADC_ConfigureBoostMode+0x10a>
 8002fe0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fe4:	d11e      	bne.n	8003024 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0c9b      	lsrs	r3, r3, #18
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
        break;
 8002ff6:	e016      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
        break;
 8002ffe:	e012      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	60fb      	str	r3, [r7, #12]
        break;
 8003006:	e00e      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	60fb      	str	r3, [r7, #12]
        break;
 800300e:	e00a      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	09db      	lsrs	r3, r3, #7
 8003014:	60fb      	str	r3, [r7, #12]
        break;
 8003016:	e006      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	60fb      	str	r3, [r7, #12]
        break;
 800301e:	e002      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003020:	bf00      	nop
 8003022:	e000      	b.n	8003026 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003024:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003026:	f7ff f8b9 	bl	800219c <HAL_GetREVID>
 800302a:	4603      	mov	r3, r0
 800302c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003030:	4293      	cmp	r3, r2
 8003032:	d815      	bhi.n	8003060 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <ADC_ConfigureBoostMode+0x208>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d908      	bls.n	800304e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800304c:	e03e      	b.n	80030cc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	e035      	b.n	80030cc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <ADC_ConfigureBoostMode+0x20c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d808      	bhi.n	8003080 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	e025      	b.n	80030cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a1a      	ldr	r2, [pc, #104]	; (80030ec <ADC_ConfigureBoostMode+0x210>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d80a      	bhi.n	800309e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	e016      	b.n	80030cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <ADC_ConfigureBoostMode+0x214>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d80a      	bhi.n	80030bc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b8:	609a      	str	r2, [r3, #8]
}
 80030ba:	e007      	b.n	80030cc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40022100 	.word	0x40022100
 80030dc:	40022300 	.word	0x40022300
 80030e0:	58026300 	.word	0x58026300
 80030e4:	01312d00 	.word	0x01312d00
 80030e8:	005f5e10 	.word	0x005f5e10
 80030ec:	00bebc20 	.word	0x00bebc20
 80030f0:	017d7840 	.word	0x017d7840

080030f4 <__NVIC_SetPriorityGrouping>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <__NVIC_SetPriorityGrouping+0x40>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003110:	4013      	ands	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	4313      	orrs	r3, r2
 8003120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003122:	4a04      	ldr	r2, [pc, #16]	; (8003134 <__NVIC_SetPriorityGrouping+0x40>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	60d3      	str	r3, [r2, #12]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00
 8003138:	05fa0000 	.word	0x05fa0000

0800313c <__NVIC_GetPriorityGrouping>:
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <__NVIC_GetPriorityGrouping+0x18>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	f003 0307 	and.w	r3, r3, #7
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_EnableIRQ>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0b      	blt.n	8003182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <__NVIC_EnableIRQ+0x38>)
 8003172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_SetPriority>:
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db0a      	blt.n	80031be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	490c      	ldr	r1, [pc, #48]	; (80031e0 <__NVIC_SetPriority+0x4c>)
 80031ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	440b      	add	r3, r1
 80031b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031bc:	e00a      	b.n	80031d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4908      	ldr	r1, [pc, #32]	; (80031e4 <__NVIC_SetPriority+0x50>)
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	3b04      	subs	r3, #4
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	440b      	add	r3, r1
 80031d2:	761a      	strb	r2, [r3, #24]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <NVIC_EncodePriority>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f1c3 0307 	rsb	r3, r3, #7
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf28      	it	cs
 8003206:	2304      	movcs	r3, #4
 8003208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3304      	adds	r3, #4
 800320e:	2b06      	cmp	r3, #6
 8003210:	d902      	bls.n	8003218 <NVIC_EncodePriority+0x30>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3b03      	subs	r3, #3
 8003216:	e000      	b.n	800321a <NVIC_EncodePriority+0x32>
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	401a      	ands	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43d9      	mvns	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	4313      	orrs	r3, r2
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff8e 	bl	8003194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff29 	bl	80030f4 <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032b8:	f7ff ff40 	bl	800313c <__NVIC_GetPriorityGrouping>
 80032bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	6978      	ldr	r0, [r7, #20]
 80032c4:	f7ff ff90 	bl	80031e8 <NVIC_EncodePriority>
 80032c8:	4602      	mov	r2, r0
 80032ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff5f 	bl	8003194 <__NVIC_SetPriority>
}
 80032d6:	bf00      	nop
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff33 	bl	8003158 <__NVIC_EnableIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ffa4 	bl	8003250 <SysTick_Config>
 8003308:	4603      	mov	r3, r0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003318:	f3bf 8f5f 	dmb	sy
}
 800331c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_MPU_Disable+0x28>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_MPU_Disable+0x28>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_MPU_Disable+0x2c>)
 800332c:	2200      	movs	r2, #0
 800332e:	605a      	str	r2, [r3, #4]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	e000ed90 	.word	0xe000ed90

08003344 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_MPU_Enable+0x38>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_MPU_Enable+0x3c>)
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <HAL_MPU_Enable+0x3c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003362:	f3bf 8f4f 	dsb	sy
}
 8003366:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003368:	f3bf 8f6f 	isb	sy
}
 800336c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000ed90 	.word	0xe000ed90
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	785a      	ldrb	r2, [r3, #1]
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_MPU_ConfigRegion+0x84>)
 8003392:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d029      	beq.n	80033f0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800339c:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_MPU_ConfigRegion+0x84>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7b1b      	ldrb	r3, [r3, #12]
 80033a8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7adb      	ldrb	r3, [r3, #11]
 80033ae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7a9b      	ldrb	r3, [r3, #10]
 80033b6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7b5b      	ldrb	r3, [r3, #13]
 80033be:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7b9b      	ldrb	r3, [r3, #14]
 80033c6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7bdb      	ldrb	r3, [r3, #15]
 80033ce:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7a5b      	ldrb	r3, [r3, #9]
 80033d6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7a1b      	ldrb	r3, [r3, #8]
 80033de:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033e0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033ea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033ec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80033ee:	e005      	b.n	80033fc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_MPU_ConfigRegion+0x84>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_MPU_ConfigRegion+0x84>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed90 	.word	0xe000ed90

0800340c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e054      	b.n	80034c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7f5b      	ldrb	r3, [r3, #29]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fe22 	bl	8001078 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10c      	bne.n	800345c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_CRC_Init+0xc4>)
 8003448:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0218 	bic.w	r2, r2, #24
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	e00c      	b.n	8003476 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6899      	ldr	r1, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	461a      	mov	r2, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f834 	bl	80034d4 <HAL_CRCEx_Polynomial_Set>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e028      	b.n	80034c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	795b      	ldrb	r3, [r3, #5]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d105      	bne.n	800348a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f04f 32ff 	mov.w	r2, #4294967295
 8003486:	611a      	str	r2, [r3, #16]
 8003488:	e004      	b.n	8003494 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6912      	ldr	r2, [r2, #16]
 8003492:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	04c11db7 	.word	0x04c11db7

080034d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80034e4:	231f      	movs	r3, #31
 80034e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
 80034f6:	e063      	b.n	80035c0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80034f8:	bf00      	nop
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	613a      	str	r2, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d009      	beq.n	8003518 <HAL_CRCEx_Polynomial_Set+0x44>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b18      	cmp	r3, #24
 800351c:	d846      	bhi.n	80035ac <HAL_CRCEx_Polynomial_Set+0xd8>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	080035b3 	.word	0x080035b3
 8003528:	080035ad 	.word	0x080035ad
 800352c:	080035ad 	.word	0x080035ad
 8003530:	080035ad 	.word	0x080035ad
 8003534:	080035ad 	.word	0x080035ad
 8003538:	080035ad 	.word	0x080035ad
 800353c:	080035ad 	.word	0x080035ad
 8003540:	080035ad 	.word	0x080035ad
 8003544:	080035a1 	.word	0x080035a1
 8003548:	080035ad 	.word	0x080035ad
 800354c:	080035ad 	.word	0x080035ad
 8003550:	080035ad 	.word	0x080035ad
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080035ad 	.word	0x080035ad
 8003560:	080035ad 	.word	0x080035ad
 8003564:	08003595 	.word	0x08003595
 8003568:	080035ad 	.word	0x080035ad
 800356c:	080035ad 	.word	0x080035ad
 8003570:	080035ad 	.word	0x080035ad
 8003574:	080035ad 	.word	0x080035ad
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035ad 	.word	0x080035ad
 8003580:	080035ad 	.word	0x080035ad
 8003584:	08003589 	.word	0x08003589
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d913      	bls.n	80035b6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003592:	e010      	b.n	80035b6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b07      	cmp	r3, #7
 8003598:	d90f      	bls.n	80035ba <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800359e:	e00c      	b.n	80035ba <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	d90b      	bls.n	80035be <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035aa:	e008      	b.n	80035be <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	75fb      	strb	r3, [r7, #23]
        break;
 80035b0:	e006      	b.n	80035c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035b2:	bf00      	nop
 80035b4:	e004      	b.n	80035c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035b6:	bf00      	nop
 80035b8:	e002      	b.n	80035c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035be:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10d      	bne.n	80035e2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 0118 	bic.w	r1, r3, #24
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b089      	sub	sp, #36	; 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035fe:	4b89      	ldr	r3, [pc, #548]	; (8003824 <HAL_GPIO_Init+0x234>)
 8003600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003602:	e194      	b.n	800392e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8186 	beq.w	8003928 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d005      	beq.n	8003634 <HAL_GPIO_Init+0x44>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d130      	bne.n	8003696 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800366a:	2201      	movs	r2, #1
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0201 	and.w	r2, r3, #1
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d017      	beq.n	80036d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d123      	bne.n	8003726 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	220f      	movs	r2, #15
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	08da      	lsrs	r2, r3, #3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3208      	adds	r2, #8
 8003720:	69b9      	ldr	r1, [r7, #24]
 8003722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0203 	and.w	r2, r3, #3
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80e0 	beq.w	8003928 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <HAL_GPIO_Init+0x238>)
 800376a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800376e:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <HAL_GPIO_Init+0x238>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_GPIO_Init+0x238>)
 800377a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003786:	4a29      	ldr	r2, [pc, #164]	; (800382c <HAL_GPIO_Init+0x23c>)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	3302      	adds	r3, #2
 800378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <HAL_GPIO_Init+0x240>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d052      	beq.n	8003858 <HAL_GPIO_Init+0x268>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_GPIO_Init+0x244>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_GPIO_Init+0x22e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_GPIO_Init+0x248>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02b      	beq.n	800381a <HAL_GPIO_Init+0x22a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <HAL_GPIO_Init+0x24c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x226>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_GPIO_Init+0x250>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x222>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <HAL_GPIO_Init+0x254>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x21e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <HAL_GPIO_Init+0x258>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x21a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_GPIO_Init+0x25c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x216>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_GPIO_Init+0x260>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x212>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_GPIO_Init+0x264>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x20e>
 80037fa:	2309      	movs	r3, #9
 80037fc:	e02d      	b.n	800385a <HAL_GPIO_Init+0x26a>
 80037fe:	230a      	movs	r3, #10
 8003800:	e02b      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003802:	2308      	movs	r3, #8
 8003804:	e029      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003806:	2307      	movs	r3, #7
 8003808:	e027      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800380a:	2306      	movs	r3, #6
 800380c:	e025      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800380e:	2305      	movs	r3, #5
 8003810:	e023      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003812:	2304      	movs	r3, #4
 8003814:	e021      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003816:	2303      	movs	r3, #3
 8003818:	e01f      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800381a:	2302      	movs	r3, #2
 800381c:	e01d      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800381e:	2301      	movs	r3, #1
 8003820:	e01b      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003822:	bf00      	nop
 8003824:	58000080 	.word	0x58000080
 8003828:	58024400 	.word	0x58024400
 800382c:	58000400 	.word	0x58000400
 8003830:	58020000 	.word	0x58020000
 8003834:	58020400 	.word	0x58020400
 8003838:	58020800 	.word	0x58020800
 800383c:	58020c00 	.word	0x58020c00
 8003840:	58021000 	.word	0x58021000
 8003844:	58021400 	.word	0x58021400
 8003848:	58021800 	.word	0x58021800
 800384c:	58021c00 	.word	0x58021c00
 8003850:	58022000 	.word	0x58022000
 8003854:	58022400 	.word	0x58022400
 8003858:	2300      	movs	r3, #0
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	f002 0203 	and.w	r2, r2, #3
 8003860:	0092      	lsls	r2, r2, #2
 8003862:	4093      	lsls	r3, r2
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800386a:	4938      	ldr	r1, [pc, #224]	; (800394c <HAL_GPIO_Init+0x35c>)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	3302      	adds	r3, #2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800389e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3301      	adds	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f ae63 	bne.w	8003604 <HAL_GPIO_Init+0x14>
  }
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	3724      	adds	r7, #36	; 0x24
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	58000400 	.word	0x58000400

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003984:	b08f      	sub	sp, #60	; 0x3c
 8003986:	af0a      	add	r7, sp, #40	; 0x28
 8003988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e116      	b.n	8003bc2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f009 faf0 	bl	800cf94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2203      	movs	r2, #3
 80039b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f005 fed9 	bl	800978a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	687e      	ldr	r6, [r7, #4]
 80039e0:	466d      	mov	r5, sp
 80039e2:	f106 0410 	add.w	r4, r6, #16
 80039e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039f6:	1d33      	adds	r3, r6, #4
 80039f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039fa:	6838      	ldr	r0, [r7, #0]
 80039fc:	f005 fda4 	bl	8009548 <USB_CoreInit>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0d7      	b.n	8003bc2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f005 fec7 	bl	80097ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e04a      	b.n	8003aba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	333d      	adds	r3, #61	; 0x3d
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	333c      	adds	r3, #60	; 0x3c
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	b298      	uxth	r0, r3
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3356      	adds	r3, #86	; 0x56
 8003a60:	4602      	mov	r2, r0
 8003a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3340      	adds	r3, #64	; 0x40
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3344      	adds	r3, #68	; 0x44
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3348      	adds	r3, #72	; 0x48
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334c      	adds	r3, #76	; 0x4c
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3af      	bcc.n	8003a24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	e044      	b.n	8003b54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	3301      	adds	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3b5      	bcc.n	8003aca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	687e      	ldr	r6, [r7, #4]
 8003b66:	466d      	mov	r5, sp
 8003b68:	f106 0410 	add.w	r4, r6, #16
 8003b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b7c:	1d33      	adds	r3, r6, #4
 8003b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f005 fe5f 	bl	8009844 <USB_DevInit>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e014      	b.n	8003bc2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d102      	bne.n	8003bb6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f001 f96f 	bl	8004e94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f006 fea1 	bl	800a902 <USB_DevDisconnect>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_PCD_Start+0x1c>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e022      	b.n	8003c2c <HAL_PCD_Start+0x62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f005 fda8 	bl	8009768 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f006 fe4f 	bl	800a8c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b08d      	sub	sp, #52	; 0x34
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f006 ff0d 	bl	800aa6a <USB_GetMode>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 84b7 	bne.w	80045c6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f006 fe71 	bl	800a944 <USB_ReadInterrupts>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 84ad 	beq.w	80045c4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f006 fe5e 	bl	800a944 <USB_ReadInterrupts>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d107      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f002 0202 	and.w	r2, r2, #2
 8003ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f006 fe4c 	bl	800a944 <USB_ReadInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d161      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0210 	bic.w	r2, r2, #16
 8003cc4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 020f 	and.w	r2, r3, #15
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	0c5b      	lsrs	r3, r3, #17
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d124      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d035      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6a38      	ldr	r0, [r7, #32]
 8003d12:	f006 fc83 	bl	800a61c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d22:	441a      	add	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d34:	441a      	add	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	615a      	str	r2, [r3, #20]
 8003d3a:	e016      	b.n	8003d6a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	0c5b      	lsrs	r3, r3, #17
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d110      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d4e:	2208      	movs	r2, #8
 8003d50:	4619      	mov	r1, r3
 8003d52:	6a38      	ldr	r0, [r7, #32]
 8003d54:	f006 fc62 	bl	800a61c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d64:	441a      	add	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0210 	orr.w	r2, r2, #16
 8003d78:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f006 fde0 	bl	800a944 <USB_ReadInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d8e:	f040 80a7 	bne.w	8003ee0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f006 fde5 	bl	800a96a <USB_ReadDevAllOutEpInterrupt>
 8003da0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003da2:	e099      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 808e 	beq.w	8003ecc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f006 fe09 	bl	800a9d2 <USB_ReadDevOutEPInterrupt>
 8003dc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00c      	beq.n	8003de6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2301      	movs	r3, #1
 8003ddc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fed1 	bl	8004b88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2308      	movs	r3, #8
 8003e00:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 ffa7 	bl	8004d58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	461a      	mov	r2, r3
 8003e22:	2310      	movs	r3, #16
 8003e24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d030      	beq.n	8003e92 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b80      	cmp	r3, #128	; 0x80
 8003e3a:	d109      	bne.n	8003e50 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	78db      	ldrb	r3, [r3, #3]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d108      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f009 f9b0 	bl	800d1e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2302      	movs	r3, #2
 8003e90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2320      	movs	r3, #32
 8003eac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	3301      	adds	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f af62 	bne.w	8003da4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f006 fd2d 	bl	800a944 <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef4:	f040 80db 	bne.w	80040ae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f006 fd4e 	bl	800a99e <USB_ReadDevAllInEpInterrupt>
 8003f02:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f08:	e0cd      	b.n	80040a6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80c2 	beq.w	800409a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f006 fd74 	bl	800aa0e <USB_ReadDevInEPInterrupt>
 8003f26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d057      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2201      	movs	r2, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69f9      	ldr	r1, [r7, #28]
 8003f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f52:	4013      	ands	r3, r2
 8003f54:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	461a      	mov	r2, r3
 8003f64:	2301      	movs	r3, #1
 8003f66:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d132      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3348      	adds	r3, #72	; 0x48
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4403      	add	r3, r0
 8003f90:	3344      	adds	r3, #68	; 0x44
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4419      	add	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4403      	add	r3, r0
 8003fa4:	3348      	adds	r3, #72	; 0x48
 8003fa6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d113      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x3a2>
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	334c      	adds	r3, #76	; 0x4c
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d108      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	f006 fd7d 	bl	800aad0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f009 f87a 	bl	800d0d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	461a      	mov	r2, r3
 8004016:	2310      	movs	r3, #16
 8004018:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004030:	461a      	mov	r2, r3
 8004032:	2340      	movs	r3, #64	; 0x40
 8004034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d023      	beq.n	8004088 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004042:	6a38      	ldr	r0, [r7, #32]
 8004044:	f005 fd5c 	bl	8009b00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	3338      	adds	r3, #56	; 0x38
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	3304      	adds	r3, #4
 800405a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	78db      	ldrb	r3, [r3, #3]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d108      	bne.n	8004076 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2200      	movs	r2, #0
 8004068:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	b2db      	uxtb	r3, r3
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f009 f8c7 	bl	800d204 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	461a      	mov	r2, r3
 8004084:	2302      	movs	r3, #2
 8004086:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fcea 	bl	8004a6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	3301      	adds	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f47f af2e 	bne.w	8003f0a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f006 fc46 	bl	800a944 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c2:	d122      	bne.n	800410a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d108      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040ea:	2100      	movs	r1, #0
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fef5 	bl	8004edc <HAL_PCDEx_LPM_Callback>
 80040f2:	e002      	b.n	80040fa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f009 f865 	bl	800d1c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f006 fc18 	bl	800a944 <USB_ReadInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411e:	d112      	bne.n	8004146 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d102      	bne.n	8004136 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f009 f821 	bl	800d178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004144:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f006 fbfa 	bl	800a944 <USB_ReadInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415a:	d121      	bne.n	80041a0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800416a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d111      	bne.n	800419a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004190:	2101      	movs	r1, #1
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fea2 	bl	8004edc <HAL_PCDEx_LPM_Callback>
 8004198:	e002      	b.n	80041a0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f008 ffec 	bl	800d178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f006 fbcd 	bl	800a944 <USB_ReadInterrupts>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	f040 80b7 	bne.w	8004326 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2110      	movs	r1, #16
 80041d2:	4618      	mov	r0, r3
 80041d4:	f005 fc94 	bl	8009b00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041dc:	e046      	b.n	800426c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	461a      	mov	r2, r3
 80041ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	440a      	add	r2, r1
 8004208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004210:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004224:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004244:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004260:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004264:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	3301      	adds	r3, #1
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004272:	429a      	cmp	r2, r3
 8004274:	d3b3      	bcc.n	80041de <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004284:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004288:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a2:	f043 030b 	orr.w	r3, r3, #11
 80042a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b8:	f043 030b 	orr.w	r3, r3, #11
 80042bc:	6453      	str	r3, [r2, #68]	; 0x44
 80042be:	e015      	b.n	80042ec <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	4619      	mov	r1, r3
 80042d0:	f242 032b 	movw	r3, #8235	; 0x202b
 80042d4:	4313      	orrs	r3, r2
 80042d6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e6:	f043 030b 	orr.w	r3, r3, #11
 80042ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004310:	461a      	mov	r2, r3
 8004312:	f006 fbdd 	bl	800aad0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f006 fb0a 	bl	800a944 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433a:	d124      	bne.n	8004386 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f006 fba1 	bl	800aa88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f005 fc55 	bl	8009bfa <USB_GetDevSpeed>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681c      	ldr	r4, [r3, #0]
 800435c:	f002 fa4e 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8004360:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	4620      	mov	r0, r4
 800436c:	f005 f95a 	bl	8009624 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f008 fed8 	bl	800d126 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004384:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f006 fada 	bl	800a944 <USB_ReadInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b08      	cmp	r3, #8
 8004398:	d10a      	bne.n	80043b0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f008 feb5 	bl	800d10a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f002 0208 	and.w	r2, r2, #8
 80043ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f006 fac5 	bl	800a944 <USB_ReadInterrupts>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b80      	cmp	r3, #128	; 0x80
 80043c2:	d122      	bne.n	800440a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d0:	2301      	movs	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e014      	b.n	8004400 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fb09 	bl	8004a0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	3301      	adds	r3, #1
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	429a      	cmp	r2, r3
 8004408:	d3e5      	bcc.n	80043d6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f006 fa98 	bl	800a944 <USB_ReadInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441e:	d13b      	bne.n	8004498 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004420:	2301      	movs	r3, #1
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	e02b      	b.n	800447e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3340      	adds	r3, #64	; 0x40
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d115      	bne.n	8004478 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800444c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800444e:	2b00      	cmp	r3, #0
 8004450:	da12      	bge.n	8004478 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	333f      	adds	r3, #63	; 0x3f
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800446e:	b2db      	uxtb	r3, r3
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 faca 	bl	8004a0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	3301      	adds	r3, #1
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	429a      	cmp	r2, r3
 8004486:	d3ce      	bcc.n	8004426 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f006 fa51 	bl	800a944 <USB_ReadInterrupts>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ac:	d155      	bne.n	800455a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044ae:	2301      	movs	r3, #1
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	e045      	b.n	8004540 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d12e      	bne.n	800453a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da2b      	bge.n	800453a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d121      	bne.n	800453a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004536:	6053      	str	r3, [r2, #4]
            break;
 8004538:	e007      	b.n	800454a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	3301      	adds	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	429a      	cmp	r2, r3
 8004548:	d3b4      	bcc.n	80044b4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f006 f9f0 	bl	800a944 <USB_ReadInterrupts>
 8004564:	4603      	mov	r3, r0
 8004566:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d10a      	bne.n	8004586 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f008 fe59 	bl	800d228 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f006 f9da 	bl	800a944 <USB_ReadInterrupts>
 8004590:	4603      	mov	r3, r0
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d115      	bne.n	80045c6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f008 fe49 	bl	800d244 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e000      	b.n	80045c6 <HAL_PCD_IRQHandler+0x992>
      return;
 80045c4:	bf00      	nop
    }
  }
}
 80045c6:	3734      	adds	r7, #52	; 0x34
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd90      	pop	{r4, r7, pc}

080045cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_PCD_SetAddress+0x1a>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e013      	b.n	800460e <HAL_PCD_SetAddress+0x42>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f006 f938 	bl	800a874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	4608      	mov	r0, r1
 8004620:	4611      	mov	r1, r2
 8004622:	461a      	mov	r2, r3
 8004624:	4603      	mov	r3, r0
 8004626:	70fb      	strb	r3, [r7, #3]
 8004628:	460b      	mov	r3, r1
 800462a:	803b      	strh	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004638:	2b00      	cmp	r3, #0
 800463a:	da0f      	bge.n	800465c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 020f 	and.w	r2, r3, #15
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	3338      	adds	r3, #56	; 0x38
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	3304      	adds	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	705a      	strb	r2, [r3, #1]
 800465a:	e00f      	b.n	800467c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	f003 020f 	and.w	r2, r3, #15
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	3304      	adds	r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004688:	883a      	ldrh	r2, [r7, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	78ba      	ldrb	r2, [r7, #2]
 8004692:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046a6:	78bb      	ldrb	r3, [r7, #2]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d102      	bne.n	80046b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_PCD_EP_Open+0xaa>
 80046bc:	2302      	movs	r3, #2
 80046be:	e00e      	b.n	80046de <HAL_PCD_EP_Open+0xc8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68f9      	ldr	r1, [r7, #12]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f005 fab8 	bl	8009c44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80046dc:	7afb      	ldrb	r3, [r7, #11]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da0f      	bge.n	800471a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	3338      	adds	r3, #56	; 0x38
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	3304      	adds	r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	705a      	strb	r2, [r3, #1]
 8004718:	e00f      	b.n	800473a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	f003 020f 	and.w	r2, r3, #15
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_PCD_EP_Close+0x6e>
 8004750:	2302      	movs	r3, #2
 8004752:	e00e      	b.n	8004772 <HAL_PCD_EP_Close+0x8c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	4618      	mov	r0, r3
 8004764:	f005 faf6 	bl	8009d54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	460b      	mov	r3, r1
 8004788:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478a:	7afb      	ldrb	r3, [r7, #11]
 800478c:	f003 020f 	and.w	r2, r3, #15
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	3304      	adds	r3, #4
 80047a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047bc:	7afb      	ldrb	r3, [r7, #11]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d102      	bne.n	80047d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	6979      	ldr	r1, [r7, #20]
 80047e4:	f005 fb92 	bl	8009f0c <USB_EPStartXfer>

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004814:	681b      	ldr	r3, [r3, #0]
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	460b      	mov	r3, r1
 8004830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	f003 020f 	and.w	r2, r3, #15
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	3338      	adds	r3, #56	; 0x38
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	3304      	adds	r3, #4
 8004848:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2200      	movs	r2, #0
 800485a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2201      	movs	r2, #1
 8004860:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004862:	7afb      	ldrb	r3, [r7, #11]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	b2da      	uxtb	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d102      	bne.n	800487c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	f005 fb3f 	bl	8009f0c <USB_EPStartXfer>

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	f003 020f 	and.w	r2, r3, #15
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d901      	bls.n	80048b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e050      	b.n	8004958 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da0f      	bge.n	80048de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	f003 020f 	and.w	r2, r3, #15
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	3338      	adds	r3, #56	; 0x38
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	3304      	adds	r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	705a      	strb	r2, [r3, #1]
 80048dc:	e00d      	b.n	80048fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4413      	add	r3, r2
 80048f0:	3304      	adds	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	b2da      	uxtb	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_PCD_EP_SetStall+0x82>
 8004916:	2302      	movs	r3, #2
 8004918:	e01e      	b.n	8004958 <HAL_PCD_EP_SetStall+0xc0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	4618      	mov	r0, r3
 800492a:	f005 fecf 	bl	800a6cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	b2d9      	uxtb	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004948:	461a      	mov	r2, r3
 800494a:	f006 f8c1 	bl	800aad0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d901      	bls.n	800497e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e042      	b.n	8004a04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800497e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004982:	2b00      	cmp	r3, #0
 8004984:	da0f      	bge.n	80049a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	3338      	adds	r3, #56	; 0x38
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	3304      	adds	r3, #4
 800499c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	705a      	strb	r2, [r3, #1]
 80049a4:	e00f      	b.n	80049c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	f003 020f 	and.w	r2, r3, #15
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4413      	add	r3, r2
 80049bc:	3304      	adds	r3, #4
 80049be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_PCD_EP_ClrStall+0x86>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e00e      	b.n	8004a04 <HAL_PCD_EP_ClrStall+0xa4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f005 fed7 	bl	800a7a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da0c      	bge.n	8004a3a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	3338      	adds	r3, #56	; 0x38
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e00c      	b.n	8004a54 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 020f 	and.w	r2, r3, #15
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	3304      	adds	r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68f9      	ldr	r1, [r7, #12]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f005 fcf6 	bl	800a44c <USB_EPStopXfer>
 8004a60:	4603      	mov	r3, r0
 8004a62:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a64:	7afb      	ldrb	r3, [r7, #11]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b08a      	sub	sp, #40	; 0x28
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	3338      	adds	r3, #56	; 0x38
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4413      	add	r3, r2
 8004a92:	3304      	adds	r3, #4
 8004a94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d901      	bls.n	8004aa6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e06c      	b.n	8004b80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d902      	bls.n	8004ac2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3303      	adds	r3, #3
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aca:	e02b      	b.n	8004b24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d902      	bls.n	8004ae8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	3303      	adds	r3, #3
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68d9      	ldr	r1, [r3, #12]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	4603      	mov	r3, r0
 8004b06:	6978      	ldr	r0, [r7, #20]
 8004b08:	f005 fd4a 	bl	800a5a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	441a      	add	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	441a      	add	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d809      	bhi.n	8004b4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d203      	bcs.n	8004b4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1be      	bne.n	8004acc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d811      	bhi.n	8004b7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	2201      	movs	r2, #1
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	6939      	ldr	r1, [r7, #16]
 8004b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	333c      	adds	r3, #60	; 0x3c
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d17b      	bne.n	8004cb6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4a61      	ldr	r2, [pc, #388]	; (8004d50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	f240 80b9 	bls.w	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80b3 	beq.w	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf0:	6093      	str	r3, [r2, #8]
 8004bf2:	e0a7      	b.n	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	6093      	str	r3, [r2, #8]
 8004c10:	e098      	b.n	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 8093 	bne.w	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	4a4b      	ldr	r2, [pc, #300]	; (8004d50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d90f      	bls.n	8004c46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	6093      	str	r3, [r2, #8]
 8004c44:	e07e      	b.n	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4413      	add	r3, r2
 8004c58:	3304      	adds	r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	0159      	lsls	r1, r3, #5
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	440b      	add	r3, r1
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d114      	bne.n	8004ca8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c90:	461a      	mov	r2, r3
 8004c92:	2101      	movs	r1, #1
 8004c94:	f005 ff1c 	bl	800aad0 <USB_EP0_OutStart>
 8004c98:	e006      	b.n	8004ca8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f008 f9f6 	bl	800d0a0 <HAL_PCD_DataOutStageCallback>
 8004cb4:	e046      	b.n	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d124      	bne.n	8004d08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cda:	6093      	str	r3, [r2, #8]
 8004cdc:	e032      	b.n	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f008 f9cd 	bl	800d0a0 <HAL_PCD_DataOutStageCallback>
 8004d06:	e01d      	b.n	8004d44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d114      	bne.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d108      	bne.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d30:	461a      	mov	r2, r3
 8004d32:	2100      	movs	r1, #0
 8004d34:	f005 fecc 	bl	800aad0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f008 f9ae 	bl	800d0a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	4f54300a 	.word	0x4f54300a
 8004d54:	4f54310a 	.word	0x4f54310a

08004d58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	333c      	adds	r3, #60	; 0x3c
 8004d70:	3304      	adds	r3, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d90e      	bls.n	8004dac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	461a      	mov	r2, r3
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f008 f965 	bl	800d07c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d90c      	bls.n	8004dd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d108      	bne.n	8004dd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2101      	movs	r1, #1
 8004dd0:	f005 fe7e 	bl	800aad0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	4f54300a 	.word	0x4f54300a

08004de4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
 8004df0:	4613      	mov	r3, r2
 8004df2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d107      	bne.n	8004e12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004e02:	883b      	ldrh	r3, [r7, #0]
 8004e04:	0419      	lsls	r1, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e10:	e028      	b.n	8004e64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]
 8004e24:	e00d      	b.n	8004e42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	3340      	adds	r3, #64	; 0x40
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4413      	add	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3ec      	bcc.n	8004e26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e4c:	883b      	ldrh	r3, [r7, #0]
 8004e4e:	0418      	lsls	r0, r3, #16
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6819      	ldr	r1, [r3, #0]
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4302      	orrs	r2, r0
 8004e5c:	3340      	adds	r3, #64	; 0x40
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	887a      	ldrh	r2, [r7, #2]
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	10000003 	.word	0x10000003

08004edc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <HAL_PWREx_ConfigSupply+0x70>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d00a      	beq.n	8004f1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f08:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <HAL_PWREx_ConfigSupply+0x70>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e01f      	b.n	8004f5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e01d      	b.n	8004f5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <HAL_PWREx_ConfigSupply+0x70>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 0207 	bic.w	r2, r3, #7
 8004f26:	490f      	ldr	r1, [pc, #60]	; (8004f64 <HAL_PWREx_ConfigSupply+0x70>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f2e:	f7fd f905 	bl	800213c <HAL_GetTick>
 8004f32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f34:	e009      	b.n	8004f4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f36:	f7fd f901 	bl	800213c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f44:	d901      	bls.n	8004f4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e007      	b.n	8004f5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_PWREx_ConfigSupply+0x70>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f56:	d1ee      	bne.n	8004f36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58024800 	.word	0x58024800

08004f68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f76:	60d3      	str	r3, [r2, #12]
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	58024800 	.word	0x58024800

08004f88 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f90:	f7fd f8d4 	bl	800213c <HAL_GetTick>
 8004f94:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e05f      	b.n	8005060 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d107      	bne.n	8004fbc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f85f 	bl	8005070 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004fb2:	f241 3188 	movw	r1, #5000	; 0x1388
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 faca 	bl	8005550 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2120      	movs	r1, #32
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fac2 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004fec:	7afb      	ldrb	r3, [r7, #11]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d135      	bne.n	800505e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_QSPI_Init+0xe0>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6852      	ldr	r2, [r2, #4]
 8005000:	0611      	lsls	r1, r2, #24
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68d2      	ldr	r2, [r2, #12]
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	69d2      	ldr	r2, [r2, #28]
 800500c:	4311      	orrs	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6a12      	ldr	r2, [r2, #32]
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	430b      	orrs	r3, r1
 800501a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_QSPI_Init+0xe4>)
 8005024:	4013      	ands	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6912      	ldr	r2, [r2, #16]
 800502a:	0411      	lsls	r1, r2, #16
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6952      	ldr	r2, [r2, #20]
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6992      	ldr	r2, [r2, #24]
 8005036:	4311      	orrs	r1, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	430b      	orrs	r3, r1
 800503e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800505e:	7afb      	ldrb	r3, [r7, #11]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	00ffff2f 	.word	0x00ffff2f
 800506c:	ffe0f8fe 	.word	0xffe0f8fe

08005070 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005090:	f7fd f854 	bl	800213c <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_QSPI_Command+0x22>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e048      	b.n	8005138 <HAL_QSPI_Command+0xb4>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d137      	bne.n	800512a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2120      	movs	r1, #32
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa4a 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d125      	bne.n	800512e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80050e2:	2200      	movs	r2, #0
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fa77 	bl	80055da <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d115      	bne.n	8005120 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2201      	movs	r2, #1
 80050fc:	2102      	movs	r1, #2
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fa34 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2202      	movs	r2, #2
 8005114:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800511e:	e006      	b.n	800512e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005128:	e001      	b.n	800512e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800512a:	2302      	movs	r3, #2
 800512c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005150:	f7fc fff4 	bl	800213c <HAL_GetTick>
 8005154:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3320      	adds	r3, #32
 800515c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_QSPI_Transmit+0x2e>
 800516a:	2302      	movs	r3, #2
 800516c:	e076      	b.n	800525c <HAL_QSPI_Transmit+0x11c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d165      	bne.n	800524e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d056      	beq.n	800523c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2212      	movs	r2, #18
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80051c2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80051c4:	e01b      	b.n	80051fe <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2201      	movs	r2, #1
 80051ce:	2104      	movs	r1, #4
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f9cb 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80051da:	7ffb      	ldrb	r3, [r7, #31]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d113      	bne.n	8005208 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	1e5a      	subs	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1df      	bne.n	80051c6 <HAL_QSPI_Transmit+0x86>
 8005206:	e000      	b.n	800520a <HAL_QSPI_Transmit+0xca>
          break;
 8005208:	bf00      	nop
      }

      if (status == HAL_OK)
 800520a:	7ffb      	ldrb	r3, [r7, #31]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d110      	bne.n	8005232 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2201      	movs	r2, #1
 8005218:	2102      	movs	r1, #2
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f9a6 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005224:	7ffb      	ldrb	r3, [r7, #31]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2202      	movs	r2, #2
 8005230:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800523a:	e00a      	b.n	8005252 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	f043 0208 	orr.w	r2, r3, #8
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e001      	b.n	8005252 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800524e:	2302      	movs	r3, #2
 8005250:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800525a:	7ffb      	ldrb	r3, [r7, #31]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005274:	f7fc ff62 	bl	800213c <HAL_GetTick>
 8005278:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3320      	adds	r3, #32
 8005288:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_QSPI_Receive+0x36>
 8005296:	2302      	movs	r3, #2
 8005298:	e07d      	b.n	8005396 <HAL_QSPI_Receive+0x132>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d16c      	bne.n	8005388 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d05d      	beq.n	8005376 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2222      	movs	r2, #34	; 0x22
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052f2:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80052fc:	e01c      	b.n	8005338 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2201      	movs	r2, #1
 8005306:	2106      	movs	r1, #6
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f92f 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005312:	7ffb      	ldrb	r3, [r7, #31]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d114      	bne.n	8005342 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	1e5a      	subs	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1de      	bne.n	80052fe <HAL_QSPI_Receive+0x9a>
 8005340:	e000      	b.n	8005344 <HAL_QSPI_Receive+0xe0>
          break;
 8005342:	bf00      	nop
      }

      if (status == HAL_OK)
 8005344:	7ffb      	ldrb	r3, [r7, #31]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d110      	bne.n	800536c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2201      	movs	r2, #1
 8005352:	2102      	movs	r1, #2
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f909 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800535e:	7ffb      	ldrb	r3, [r7, #31]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2202      	movs	r2, #2
 800536a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005374:	e00a      	b.n	800538c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	f043 0208 	orr.w	r2, r3, #8
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	77fb      	strb	r3, [r7, #31]
 8005386:	e001      	b.n	800538c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005388:	2302      	movs	r3, #2
 800538a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005394:	7ffb      	ldrb	r3, [r7, #31]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b088      	sub	sp, #32
 80053a2:	af02      	add	r7, sp, #8
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80053ac:	f7fc fec6 	bl	800213c <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_QSPI_AutoPolling+0x24>
 80053be:	2302      	movs	r3, #2
 80053c0:	e060      	b.n	8005484 <HAL_QSPI_AutoPolling+0xe6>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d14f      	bne.n	8005476 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2242      	movs	r2, #66	; 0x42
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2120      	movs	r1, #32
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f8bc 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d13d      	bne.n	800547a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6852      	ldr	r2, [r2, #4]
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6892      	ldr	r2, [r2, #8]
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	431a      	orrs	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005434:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800543e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f8c8 	bl	80055da <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2201      	movs	r2, #1
 8005452:	2108      	movs	r1, #8
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f889 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2208      	movs	r2, #8
 800546a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005474:	e001      	b.n	800547a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005476:	2302      	movs	r3, #2
 8005478:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005482:	7dfb      	ldrb	r3, [r7, #23]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005498:	f7fc fe50 	bl	800213c <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_QSPI_MemoryMapped+0x22>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e04c      	b.n	8005548 <HAL_QSPI_MemoryMapped+0xbc>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d13b      	bne.n	800553a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2282      	movs	r2, #130	; 0x82
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2200      	movs	r2, #0
 80054da:	2120      	movs	r1, #32
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f845 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d128      	bne.n	800553e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 0108 	bic.w	r1, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d110      	bne.n	800552c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2210      	movs	r2, #16
 800551a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800552a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800552c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f851 	bl	80055da <QSPI_Config>
 8005538:	e001      	b.n	800553e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800557c:	e01a      	b.n	80055b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d016      	beq.n	80055b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005586:	f7fc fdd9 	bl	800213c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	429a      	cmp	r2, r3
 8005594:	d302      	bcc.n	800559c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2204      	movs	r2, #4
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e00e      	b.n	80055d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1d6      	bne.n	800557e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <QSPI_Config+0x28>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055f4:	d005      	beq.n	8005602 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3a01      	subs	r2, #1
 8005600:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80b9 	beq.w	800577e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05f      	beq.n	80056d4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	6892      	ldr	r2, [r2, #8]
 800561c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d031      	beq.n	800568a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	431a      	orrs	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	431a      	orrs	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	431a      	orrs	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	049b      	lsls	r3, r3, #18
 8005642:	431a      	orrs	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	431a      	orrs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	431a      	orrs	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	431a      	orrs	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	ea42 0103 	orr.w	r1, r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	430a      	orrs	r2, r1
 8005672:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800567a:	f000 812e 	beq.w	80058da <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	6852      	ldr	r2, [r2, #4]
 8005686:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005688:	e127      	b.n	80058da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	431a      	orrs	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	431a      	orrs	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	431a      	orrs	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	049b      	lsls	r3, r3, #18
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	431a      	orrs	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	ea42 0103 	orr.w	r1, r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	615a      	str	r2, [r3, #20]
}
 80056d2:	e102      	b.n	80058da <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d02e      	beq.n	800573a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	431a      	orrs	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	431a      	orrs	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	049b      	lsls	r3, r3, #18
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	431a      	orrs	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	431a      	orrs	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	431a      	orrs	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	431a      	orrs	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	ea42 0103 	orr.w	r1, r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	430a      	orrs	r2, r1
 8005722:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800572a:	f000 80d6 	beq.w	80058da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	6852      	ldr	r2, [r2, #4]
 8005736:	619a      	str	r2, [r3, #24]
}
 8005738:	e0cf      	b.n	80058da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	431a      	orrs	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	431a      	orrs	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	431a      	orrs	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	049b      	lsls	r3, r3, #18
 8005756:	431a      	orrs	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	431a      	orrs	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	431a      	orrs	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	ea42 0103 	orr.w	r1, r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	430a      	orrs	r2, r1
 800577a:	615a      	str	r2, [r3, #20]
}
 800577c:	e0ad      	b.n	80058da <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d058      	beq.n	8005838 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	6892      	ldr	r2, [r2, #8]
 800578e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02d      	beq.n	80057f4 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	049b      	lsls	r3, r3, #18
 80057b4:	431a      	orrs	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	ea42 0103 	orr.w	r1, r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	430a      	orrs	r2, r1
 80057de:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057e6:	d078      	beq.n	80058da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	619a      	str	r2, [r3, #24]
}
 80057f2:	e072      	b.n	80058da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	431a      	orrs	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	431a      	orrs	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	049b      	lsls	r3, r3, #18
 8005810:	431a      	orrs	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	431a      	orrs	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	431a      	orrs	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	ea42 0103 	orr.w	r1, r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	430a      	orrs	r2, r1
 8005834:	615a      	str	r2, [r3, #20]
}
 8005836:	e050      	b.n	80058da <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02a      	beq.n	8005896 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	431a      	orrs	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	431a      	orrs	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	431a      	orrs	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	049b      	lsls	r3, r3, #18
 800585c:	431a      	orrs	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	431a      	orrs	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	431a      	orrs	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	ea42 0103 	orr.w	r1, r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	430a      	orrs	r2, r1
 8005880:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005888:	d027      	beq.n	80058da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	6852      	ldr	r2, [r2, #4]
 8005892:	619a      	str	r2, [r3, #24]
}
 8005894:	e021      	b.n	80058da <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01d      	beq.n	80058da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	431a      	orrs	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	049b      	lsls	r3, r3, #18
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	ea42 0103 	orr.w	r1, r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	615a      	str	r2, [r3, #20]
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f000 bc48 	b.w	800618c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8088 	beq.w	8005a1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590a:	4b99      	ldr	r3, [pc, #612]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005914:	4b96      	ldr	r3, [pc, #600]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	2b10      	cmp	r3, #16
 800591e:	d007      	beq.n	8005930 <HAL_RCC_OscConfig+0x48>
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	2b18      	cmp	r3, #24
 8005924:	d111      	bne.n	800594a <HAL_RCC_OscConfig+0x62>
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d10c      	bne.n	800594a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005930:	4b8f      	ldr	r3, [pc, #572]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d06d      	beq.n	8005a18 <HAL_RCC_OscConfig+0x130>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d169      	bne.n	8005a18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f000 bc21 	b.w	800618c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005952:	d106      	bne.n	8005962 <HAL_RCC_OscConfig+0x7a>
 8005954:	4b86      	ldr	r3, [pc, #536]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a85      	ldr	r2, [pc, #532]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800595a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e02e      	b.n	80059c0 <HAL_RCC_OscConfig+0xd8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10c      	bne.n	8005984 <HAL_RCC_OscConfig+0x9c>
 800596a:	4b81      	ldr	r3, [pc, #516]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a80      	ldr	r2, [pc, #512]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	4b7e      	ldr	r3, [pc, #504]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a7d      	ldr	r2, [pc, #500]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800597c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e01d      	b.n	80059c0 <HAL_RCC_OscConfig+0xd8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0xc0>
 800598e:	4b78      	ldr	r3, [pc, #480]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a77      	ldr	r2, [pc, #476]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b75      	ldr	r3, [pc, #468]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a74      	ldr	r2, [pc, #464]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e00b      	b.n	80059c0 <HAL_RCC_OscConfig+0xd8>
 80059a8:	4b71      	ldr	r3, [pc, #452]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a70      	ldr	r2, [pc, #448]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b6e      	ldr	r3, [pc, #440]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6d      	ldr	r2, [pc, #436]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fc fbb8 	bl	800213c <HAL_GetTick>
 80059cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fc fbb4 	bl	800213c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	; 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e3d4      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059e2:	4b63      	ldr	r3, [pc, #396]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0xe8>
 80059ee:	e014      	b.n	8005a1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fc fba4 	bl	800213c <HAL_GetTick>
 80059f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f8:	f7fc fba0 	bl	800213c <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e3c0      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a0a:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0x110>
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80ca 	beq.w	8005bbc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a28:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a32:	4b4f      	ldr	r3, [pc, #316]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <HAL_RCC_OscConfig+0x166>
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	2b18      	cmp	r3, #24
 8005a42:	d156      	bne.n	8005af2 <HAL_RCC_OscConfig+0x20a>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d151      	bne.n	8005af2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4e:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_RCC_OscConfig+0x17e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e392      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a66:	4b42      	ldr	r3, [pc, #264]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 0219 	bic.w	r2, r3, #25
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	493f      	ldr	r1, [pc, #252]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fc fb60 	bl	800213c <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a80:	f7fc fb5c 	bl	800213c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e37c      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a92:	4b37      	ldr	r3, [pc, #220]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9e:	f7fc fb7d 	bl	800219c <HAL_GetREVID>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d817      	bhi.n	8005adc <HAL_RCC_OscConfig+0x1f4>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d108      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
 8005ab4:	4b2e      	ldr	r3, [pc, #184]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005abc:	4a2c      	ldr	r2, [pc, #176]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac4:	e07a      	b.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	031b      	lsls	r3, r3, #12
 8005ad4:	4926      	ldr	r1, [pc, #152]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ada:	e06f      	b.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005adc:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	061b      	lsls	r3, r3, #24
 8005aea:	4921      	ldr	r1, [pc, #132]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af0:	e064      	b.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d047      	beq.n	8005b8a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005afa:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 0219 	bic.w	r2, r3, #25
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	491a      	ldr	r1, [pc, #104]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fc fb16 	bl	800213c <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b14:	f7fc fb12 	bl	800213c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e332      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b32:	f7fc fb33 	bl	800219c <HAL_GetREVID>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d819      	bhi.n	8005b74 <HAL_RCC_OscConfig+0x28c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d108      	bne.n	8005b5a <HAL_RCC_OscConfig+0x272>
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b50:	4a07      	ldr	r2, [pc, #28]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b56:	6053      	str	r3, [r2, #4]
 8005b58:	e030      	b.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	031b      	lsls	r3, r3, #12
 8005b68:	4901      	ldr	r1, [pc, #4]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	604b      	str	r3, [r1, #4]
 8005b6e:	e025      	b.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
 8005b70:	58024400 	.word	0x58024400
 8005b74:	4b9a      	ldr	r3, [pc, #616]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	4997      	ldr	r1, [pc, #604]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
 8005b88:	e018      	b.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8a:	4b95      	ldr	r3, [pc, #596]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a94      	ldr	r2, [pc, #592]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b96:	f7fc fad1 	bl	800213c <HAL_GetTick>
 8005b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9e:	f7fc facd 	bl	800213c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e2ed      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bb0:	4b8b      	ldr	r3, [pc, #556]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f0      	bne.n	8005b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80a9 	beq.w	8005d1c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bca:	4b85      	ldr	r3, [pc, #532]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bd4:	4b82      	ldr	r3, [pc, #520]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d007      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x308>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b18      	cmp	r3, #24
 8005be4:	d13a      	bne.n	8005c5c <HAL_RCC_OscConfig+0x374>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d135      	bne.n	8005c5c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bf0:	4b7b      	ldr	r3, [pc, #492]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_OscConfig+0x320>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	2b80      	cmp	r3, #128	; 0x80
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e2c1      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c08:	f7fc fac8 	bl	800219c <HAL_GetREVID>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d817      	bhi.n	8005c46 <HAL_RCC_OscConfig+0x35e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d108      	bne.n	8005c30 <HAL_RCC_OscConfig+0x348>
 8005c1e:	4b70      	ldr	r3, [pc, #448]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c26:	4a6e      	ldr	r2, [pc, #440]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c2c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c2e:	e075      	b.n	8005d1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c30:	4b6b      	ldr	r3, [pc, #428]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	069b      	lsls	r3, r3, #26
 8005c3e:	4968      	ldr	r1, [pc, #416]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c44:	e06a      	b.n	8005d1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c46:	4b66      	ldr	r3, [pc, #408]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	061b      	lsls	r3, r3, #24
 8005c54:	4962      	ldr	r1, [pc, #392]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c5a:	e05f      	b.n	8005d1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d042      	beq.n	8005cea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c64:	4b5e      	ldr	r3, [pc, #376]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5d      	ldr	r2, [pc, #372]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c70:	f7fc fa64 	bl	800213c <HAL_GetTick>
 8005c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c78:	f7fc fa60 	bl	800213c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e280      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c8a:	4b55      	ldr	r3, [pc, #340]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c96:	f7fc fa81 	bl	800219c <HAL_GetREVID>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d817      	bhi.n	8005cd4 <HAL_RCC_OscConfig+0x3ec>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d108      	bne.n	8005cbe <HAL_RCC_OscConfig+0x3d6>
 8005cac:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cba:	6053      	str	r3, [r2, #4]
 8005cbc:	e02e      	b.n	8005d1c <HAL_RCC_OscConfig+0x434>
 8005cbe:	4b48      	ldr	r3, [pc, #288]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	069b      	lsls	r3, r3, #26
 8005ccc:	4944      	ldr	r1, [pc, #272]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	604b      	str	r3, [r1, #4]
 8005cd2:	e023      	b.n	8005d1c <HAL_RCC_OscConfig+0x434>
 8005cd4:	4b42      	ldr	r3, [pc, #264]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	061b      	lsls	r3, r3, #24
 8005ce2:	493f      	ldr	r1, [pc, #252]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60cb      	str	r3, [r1, #12]
 8005ce8:	e018      	b.n	8005d1c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005cea:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3c      	ldr	r2, [pc, #240]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf6:	f7fc fa21 	bl	800213c <HAL_GetTick>
 8005cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cfe:	f7fc fa1d 	bl	800213c <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e23d      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d10:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f0      	bne.n	8005cfe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d036      	beq.n	8005d96 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d019      	beq.n	8005d64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d30:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d34:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fc f9fe 	bl	800213c <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d44:	f7fc f9fa 	bl	800213c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e21a      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d56:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x45c>
 8005d62:	e018      	b.n	8005d96 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d64:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005d6a:	f023 0301 	bic.w	r3, r3, #1
 8005d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fc f9e4 	bl	800213c <HAL_GetTick>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d78:	f7fc f9e0 	bl	800213c <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e200      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d039      	beq.n	8005e16 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01c      	beq.n	8005de4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005db4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005db6:	f7fc f9c1 	bl	800213c <HAL_GetTick>
 8005dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dbe:	f7fc f9bd 	bl	800213c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e1dd      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dd0:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0f0      	beq.n	8005dbe <HAL_RCC_OscConfig+0x4d6>
 8005ddc:	e01b      	b.n	8005e16 <HAL_RCC_OscConfig+0x52e>
 8005dde:	bf00      	nop
 8005de0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005de4:	4b9b      	ldr	r3, [pc, #620]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a9a      	ldr	r2, [pc, #616]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005df0:	f7fc f9a4 	bl	800213c <HAL_GetTick>
 8005df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005df8:	f7fc f9a0 	bl	800213c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e1c0      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e0a:	4b92      	ldr	r3, [pc, #584]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8081 	beq.w	8005f26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e24:	4b8c      	ldr	r3, [pc, #560]	; (8006058 <HAL_RCC_OscConfig+0x770>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a8b      	ldr	r2, [pc, #556]	; (8006058 <HAL_RCC_OscConfig+0x770>)
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e30:	f7fc f984 	bl	800213c <HAL_GetTick>
 8005e34:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7fc f980 	bl	800213c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	; 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e1a0      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e4a:	4b83      	ldr	r3, [pc, #524]	; (8006058 <HAL_RCC_OscConfig+0x770>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d106      	bne.n	8005e6c <HAL_RCC_OscConfig+0x584>
 8005e5e:	4b7d      	ldr	r3, [pc, #500]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	4a7c      	ldr	r2, [pc, #496]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6a:	e02d      	b.n	8005ec8 <HAL_RCC_OscConfig+0x5e0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCC_OscConfig+0x5a6>
 8005e74:	4b77      	ldr	r3, [pc, #476]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e78:	4a76      	ldr	r2, [pc, #472]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e80:	4b74      	ldr	r3, [pc, #464]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	4a73      	ldr	r2, [pc, #460]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e86:	f023 0304 	bic.w	r3, r3, #4
 8005e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8c:	e01c      	b.n	8005ec8 <HAL_RCC_OscConfig+0x5e0>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x5c8>
 8005e96:	4b6f      	ldr	r3, [pc, #444]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	4a6e      	ldr	r2, [pc, #440]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005e9c:	f043 0304 	orr.w	r3, r3, #4
 8005ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea2:	4b6c      	ldr	r3, [pc, #432]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	4a6b      	ldr	r2, [pc, #428]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	6713      	str	r3, [r2, #112]	; 0x70
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCC_OscConfig+0x5e0>
 8005eb0:	4b68      	ldr	r3, [pc, #416]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb4:	4a67      	ldr	r2, [pc, #412]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	6713      	str	r3, [r2, #112]	; 0x70
 8005ebc:	4b65      	ldr	r3, [pc, #404]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec0:	4a64      	ldr	r2, [pc, #400]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005ec2:	f023 0304 	bic.w	r3, r3, #4
 8005ec6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed0:	f7fc f934 	bl	800213c <HAL_GetTick>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ed6:	e00a      	b.n	8005eee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed8:	f7fc f930 	bl	800213c <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e14e      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eee:	4b59      	ldr	r3, [pc, #356]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0ee      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x5f0>
 8005efa:	e014      	b.n	8005f26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7fc f91e 	bl	800213c <HAL_GetTick>
 8005f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f02:	e00a      	b.n	8005f1a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f04:	f7fc f91a 	bl	800213c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e138      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f1a:	4b4e      	ldr	r3, [pc, #312]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1ee      	bne.n	8005f04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 812d 	beq.w	800618a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f30:	4b48      	ldr	r3, [pc, #288]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f38:	2b18      	cmp	r3, #24
 8005f3a:	f000 80bd 	beq.w	80060b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	f040 809e 	bne.w	8006084 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a41      	ldr	r2, [pc, #260]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fc f8f2 	bl	800213c <HAL_GetTick>
 8005f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5c:	f7fc f8ee 	bl	800213c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e10e      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f6e:	4b39      	ldr	r3, [pc, #228]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <HAL_RCC_OscConfig+0x774>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f8a:	0112      	lsls	r2, r2, #4
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	4931      	ldr	r1, [pc, #196]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	628b      	str	r3, [r1, #40]	; 0x28
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	025b      	lsls	r3, r3, #9
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	041b      	lsls	r3, r3, #16
 8005fb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	061b      	lsls	r3, r3, #24
 8005fc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fc4:	4923      	ldr	r1, [pc, #140]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005fca:	4b22      	ldr	r3, [pc, #136]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	4a21      	ldr	r2, [pc, #132]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fd6:	4b1f      	ldr	r3, [pc, #124]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fda:	4b21      	ldr	r3, [pc, #132]	; (8006060 <HAL_RCC_OscConfig+0x778>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fe2:	00d2      	lsls	r2, r2, #3
 8005fe4:	491b      	ldr	r1, [pc, #108]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fea:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	f023 020c 	bic.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	4917      	ldr	r1, [pc, #92]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ffc:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	f023 0202 	bic.w	r2, r3, #2
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	4912      	ldr	r1, [pc, #72]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 800600a:	4313      	orrs	r3, r2
 800600c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4a10      	ldr	r2, [pc, #64]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	4a0d      	ldr	r2, [pc, #52]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 800602c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	4a07      	ldr	r2, [pc, #28]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800603e:	4b05      	ldr	r3, [pc, #20]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a04      	ldr	r2, [pc, #16]	; (8006054 <HAL_RCC_OscConfig+0x76c>)
 8006044:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604a:	f7fc f877 	bl	800213c <HAL_GetTick>
 800604e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006050:	e011      	b.n	8006076 <HAL_RCC_OscConfig+0x78e>
 8006052:	bf00      	nop
 8006054:	58024400 	.word	0x58024400
 8006058:	58024800 	.word	0x58024800
 800605c:	fffffc0c 	.word	0xfffffc0c
 8006060:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006064:	f7fc f86a 	bl	800213c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e08a      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006076:	4b47      	ldr	r3, [pc, #284]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x77c>
 8006082:	e082      	b.n	800618a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006084:	4b43      	ldr	r3, [pc, #268]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a42      	ldr	r2, [pc, #264]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 800608a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800608e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006090:	f7fc f854 	bl	800213c <HAL_GetTick>
 8006094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006098:	f7fc f850 	bl	800213c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e070      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060aa:	4b3a      	ldr	r3, [pc, #232]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <HAL_RCC_OscConfig+0x7b0>
 80060b6:	e068      	b.n	800618a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060b8:	4b36      	ldr	r3, [pc, #216]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060be:	4b35      	ldr	r3, [pc, #212]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d031      	beq.n	8006130 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f003 0203 	and.w	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d12a      	bne.n	8006130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d122      	bne.n	8006130 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d11a      	bne.n	8006130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	0a5b      	lsrs	r3, r3, #9
 80060fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d111      	bne.n	8006130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	0c1b      	lsrs	r3, r3, #16
 8006110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d108      	bne.n	8006130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	0e1b      	lsrs	r3, r3, #24
 8006122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d001      	beq.n	8006134 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e02b      	b.n	800618c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006134:	4b17      	ldr	r3, [pc, #92]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 8006136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800613e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	429a      	cmp	r2, r3
 8006148:	d01f      	beq.n	800618a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	4a11      	ldr	r2, [pc, #68]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 8006150:	f023 0301 	bic.w	r3, r3, #1
 8006154:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006156:	f7fb fff1 	bl	800213c <HAL_GetTick>
 800615a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800615c:	bf00      	nop
 800615e:	f7fb ffed 	bl	800213c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	4293      	cmp	r3, r2
 8006168:	d0f9      	beq.n	800615e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 800616c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <HAL_RCC_OscConfig+0x8b0>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006176:	00d2      	lsls	r2, r2, #3
 8006178:	4906      	ldr	r1, [pc, #24]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 800617a:	4313      	orrs	r3, r2
 800617c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	4a04      	ldr	r2, [pc, #16]	; (8006194 <HAL_RCC_OscConfig+0x8ac>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3730      	adds	r7, #48	; 0x30
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	58024400 	.word	0x58024400
 8006198:	ffff0007 	.word	0xffff0007

0800619c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e19c      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061b0:	4b8a      	ldr	r3, [pc, #552]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d910      	bls.n	80061e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 020f 	bic.w	r2, r3, #15
 80061c6:	4985      	ldr	r1, [pc, #532]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ce:	4b83      	ldr	r3, [pc, #524]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d001      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e184      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d010      	beq.n	800620e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	4b7b      	ldr	r3, [pc, #492]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d908      	bls.n	800620e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061fc:	4b78      	ldr	r3, [pc, #480]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	4975      	ldr	r1, [pc, #468]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800620a:	4313      	orrs	r3, r2
 800620c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d010      	beq.n	800623c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	4b70      	ldr	r3, [pc, #448]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006226:	429a      	cmp	r2, r3
 8006228:	d908      	bls.n	800623c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800622a:	4b6d      	ldr	r3, [pc, #436]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	496a      	ldr	r1, [pc, #424]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006238:	4313      	orrs	r3, r2
 800623a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d010      	beq.n	800626a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006254:	429a      	cmp	r2, r3
 8006256:	d908      	bls.n	800626a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006258:	4b61      	ldr	r3, [pc, #388]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	495e      	ldr	r1, [pc, #376]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006266:	4313      	orrs	r3, r2
 8006268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d010      	beq.n	8006298 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	4b59      	ldr	r3, [pc, #356]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006282:	429a      	cmp	r2, r3
 8006284:	d908      	bls.n	8006298 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006286:	4b56      	ldr	r3, [pc, #344]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4953      	ldr	r1, [pc, #332]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006294:	4313      	orrs	r3, r2
 8006296:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	4b4d      	ldr	r3, [pc, #308]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d908      	bls.n	80062c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b4:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f023 020f 	bic.w	r2, r3, #15
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	4947      	ldr	r1, [pc, #284]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d055      	beq.n	800637e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062d2:	4b43      	ldr	r3, [pc, #268]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4940      	ldr	r1, [pc, #256]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d107      	bne.n	80062fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062ec:	4b3c      	ldr	r3, [pc, #240]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d121      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0f6      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d107      	bne.n	8006314 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006304:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d115      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0ea      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800631c:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0de      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800632c:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0d6      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800633c:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f023 0207 	bic.w	r2, r3, #7
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4925      	ldr	r1, [pc, #148]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800634a:	4313      	orrs	r3, r2
 800634c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634e:	f7fb fef5 	bl	800213c <HAL_GetTick>
 8006352:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006354:	e00a      	b.n	800636c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006356:	f7fb fef1 	bl	800213c <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	f241 3288 	movw	r2, #5000	; 0x1388
 8006364:	4293      	cmp	r3, r2
 8006366:	d901      	bls.n	800636c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e0be      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636c:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	429a      	cmp	r2, r3
 800637c:	d1eb      	bne.n	8006356 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	429a      	cmp	r2, r3
 8006398:	d208      	bcs.n	80063ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f023 020f 	bic.w	r2, r3, #15
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	490e      	ldr	r1, [pc, #56]	; (80063e0 <HAL_RCC_ClockConfig+0x244>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d214      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ba:	4b08      	ldr	r3, [pc, #32]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 020f 	bic.w	r2, r3, #15
 80063c2:	4906      	ldr	r1, [pc, #24]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ca:	4b04      	ldr	r3, [pc, #16]	; (80063dc <HAL_RCC_ClockConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d005      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e086      	b.n	80064ea <HAL_RCC_ClockConfig+0x34e>
 80063dc:	52002000 	.word	0x52002000
 80063e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d010      	beq.n	8006412 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	4b3f      	ldr	r3, [pc, #252]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d208      	bcs.n	8006412 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006400:	4b3c      	ldr	r3, [pc, #240]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	4939      	ldr	r1, [pc, #228]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800640e:	4313      	orrs	r3, r2
 8006410:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d010      	beq.n	8006440 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800642a:	429a      	cmp	r2, r3
 800642c:	d208      	bcs.n	8006440 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800642e:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	492e      	ldr	r1, [pc, #184]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800643c:	4313      	orrs	r3, r2
 800643e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d010      	beq.n	800646e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006458:	429a      	cmp	r2, r3
 800645a:	d208      	bcs.n	800646e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	4922      	ldr	r1, [pc, #136]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800646a:	4313      	orrs	r3, r2
 800646c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d010      	beq.n	800649c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006486:	429a      	cmp	r2, r3
 8006488:	d208      	bcs.n	800649c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	4917      	ldr	r1, [pc, #92]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 8006498:	4313      	orrs	r3, r2
 800649a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800649c:	f000 f834 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	4912      	ldr	r1, [pc, #72]	; (80064f8 <HAL_RCC_ClockConfig+0x35c>)
 80064ae:	5ccb      	ldrb	r3, [r1, r3]
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064ba:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <HAL_RCC_ClockConfig+0x358>)
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	4a0d      	ldr	r2, [pc, #52]	; (80064f8 <HAL_RCC_ClockConfig+0x35c>)
 80064c4:	5cd3      	ldrb	r3, [r2, r3]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <HAL_RCC_ClockConfig+0x360>)
 80064d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064d4:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <HAL_RCC_ClockConfig+0x364>)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_RCC_ClockConfig+0x368>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fb fde2 	bl	80020a8 <HAL_InitTick>
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	58024400 	.word	0x58024400
 80064f8:	080117f0 	.word	0x080117f0
 80064fc:	24000004 	.word	0x24000004
 8006500:	24000000 	.word	0x24000000
 8006504:	24000008 	.word	0x24000008

08006508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800650e:	4bb3      	ldr	r3, [pc, #716]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006516:	2b18      	cmp	r3, #24
 8006518:	f200 8155 	bhi.w	80067c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800651c:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <HAL_RCC_GetSysClockFreq+0x1c>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	08006589 	.word	0x08006589
 8006528:	080067c7 	.word	0x080067c7
 800652c:	080067c7 	.word	0x080067c7
 8006530:	080067c7 	.word	0x080067c7
 8006534:	080067c7 	.word	0x080067c7
 8006538:	080067c7 	.word	0x080067c7
 800653c:	080067c7 	.word	0x080067c7
 8006540:	080067c7 	.word	0x080067c7
 8006544:	080065af 	.word	0x080065af
 8006548:	080067c7 	.word	0x080067c7
 800654c:	080067c7 	.word	0x080067c7
 8006550:	080067c7 	.word	0x080067c7
 8006554:	080067c7 	.word	0x080067c7
 8006558:	080067c7 	.word	0x080067c7
 800655c:	080067c7 	.word	0x080067c7
 8006560:	080067c7 	.word	0x080067c7
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080067c7 	.word	0x080067c7
 800656c:	080067c7 	.word	0x080067c7
 8006570:	080067c7 	.word	0x080067c7
 8006574:	080067c7 	.word	0x080067c7
 8006578:	080067c7 	.word	0x080067c7
 800657c:	080067c7 	.word	0x080067c7
 8006580:	080067c7 	.word	0x080067c7
 8006584:	080065bb 	.word	0x080065bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006588:	4b94      	ldr	r3, [pc, #592]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006594:	4b91      	ldr	r3, [pc, #580]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	08db      	lsrs	r3, r3, #3
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	4a90      	ldr	r2, [pc, #576]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
 80065a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065a6:	e111      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065a8:	4b8d      	ldr	r3, [pc, #564]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065aa:	61bb      	str	r3, [r7, #24]
      break;
 80065ac:	e10e      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80065ae:	4b8d      	ldr	r3, [pc, #564]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065b0:	61bb      	str	r3, [r7, #24]
      break;
 80065b2:	e10b      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80065b4:	4b8c      	ldr	r3, [pc, #560]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065b6:	61bb      	str	r3, [r7, #24]
      break;
 80065b8:	e108      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065ba:	4b88      	ldr	r3, [pc, #544]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80065c4:	4b85      	ldr	r3, [pc, #532]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065d0:	4b82      	ldr	r3, [pc, #520]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80065da:	4b80      	ldr	r3, [pc, #512]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80e1 	beq.w	80067c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b02      	cmp	r3, #2
 8006602:	f000 8083 	beq.w	800670c <HAL_RCC_GetSysClockFreq+0x204>
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b02      	cmp	r3, #2
 800660a:	f200 80a1 	bhi.w	8006750 <HAL_RCC_GetSysClockFreq+0x248>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_RCC_GetSysClockFreq+0x114>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d056      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800661a:	e099      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800661c:	4b6f      	ldr	r3, [pc, #444]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02d      	beq.n	8006684 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006628:	4b6c      	ldr	r3, [pc, #432]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	08db      	lsrs	r3, r3, #3
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	4a6b      	ldr	r2, [pc, #428]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
 8006638:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	ee07 3a90 	vmov	s15, r3
 8006640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	4b62      	ldr	r3, [pc, #392]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006662:	ed97 6a02 	vldr	s12, [r7, #8]
 8006666:	eddf 5a61 	vldr	s11, [pc, #388]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006682:	e087      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80067f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006696:	4b51      	ldr	r3, [pc, #324]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066c6:	e065      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80067f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b40      	ldr	r3, [pc, #256]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800670a:	e043      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a38 	vldr	s13, [pc, #224]	; 80067f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006732:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800674e:	e021      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80067f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a02 	vldr	s12, [r7, #8]
 8006776:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006792:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	0a5b      	lsrs	r3, r3, #9
 800679a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679e:	3301      	adds	r3, #1
 80067a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b8:	ee17 3a90 	vmov	r3, s15
 80067bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80067be:	e005      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
      break;
 80067c4:	e002      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067c8:	61bb      	str	r3, [r7, #24]
      break;
 80067ca:	bf00      	nop
  }

  return sysclockfreq;
 80067cc:	69bb      	ldr	r3, [r7, #24]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3724      	adds	r7, #36	; 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400
 80067e0:	03d09000 	.word	0x03d09000
 80067e4:	003d0900 	.word	0x003d0900
 80067e8:	017d7840 	.word	0x017d7840
 80067ec:	46000000 	.word	0x46000000
 80067f0:	4c742400 	.word	0x4c742400
 80067f4:	4a742400 	.word	0x4a742400
 80067f8:	4bbebc20 	.word	0x4bbebc20

080067fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006802:	f7ff fe81 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8006806:	4602      	mov	r2, r0
 8006808:	4b10      	ldr	r3, [pc, #64]	; (800684c <HAL_RCC_GetHCLKFreq+0x50>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	490f      	ldr	r1, [pc, #60]	; (8006850 <HAL_RCC_GetHCLKFreq+0x54>)
 8006814:	5ccb      	ldrb	r3, [r1, r3]
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	fa22 f303 	lsr.w	r3, r2, r3
 800681e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006820:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_RCC_GetHCLKFreq+0x50>)
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <HAL_RCC_GetHCLKFreq+0x54>)
 800682a:	5cd3      	ldrb	r3, [r2, r3]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <HAL_RCC_GetHCLKFreq+0x58>)
 8006838:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800683a:	4a07      	ldr	r2, [pc, #28]	; (8006858 <HAL_RCC_GetHCLKFreq+0x5c>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <HAL_RCC_GetHCLKFreq+0x58>)
 8006842:	681b      	ldr	r3, [r3, #0]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	58024400 	.word	0x58024400
 8006850:	080117f0 	.word	0x080117f0
 8006854:	24000004 	.word	0x24000004
 8006858:	24000000 	.word	0x24000000

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006860:	f7ff ffcc 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8006864:	4602      	mov	r2, r0
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4904      	ldr	r1, [pc, #16]	; (8006884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006872:	5ccb      	ldrb	r3, [r1, r3]
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800687c:	4618      	mov	r0, r3
 800687e:	bd80      	pop	{r7, pc}
 8006880:	58024400 	.word	0x58024400
 8006884:	080117f0 	.word	0x080117f0

08006888 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800688c:	b0ca      	sub	sp, #296	; 0x128
 800688e:	af00      	add	r7, sp, #0
 8006890:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800689a:	2300      	movs	r3, #0
 800689c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80068ac:	2500      	movs	r5, #0
 80068ae:	ea54 0305 	orrs.w	r3, r4, r5
 80068b2:	d049      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068be:	d02f      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80068c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068c4:	d828      	bhi.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ca:	d01a      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80068cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068d0:	d822      	bhi.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068da:	d007      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068dc:	e01c      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068de:	4bb8      	ldr	r3, [pc, #736]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4ab7      	ldr	r2, [pc, #732]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068ea:	e01a      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f0:	3308      	adds	r3, #8
 80068f2:	2102      	movs	r1, #2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f002 fb61 	bl	8008fbc <RCCEx_PLL2_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006900:	e00f      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006906:	3328      	adds	r3, #40	; 0x28
 8006908:	2102      	movs	r1, #2
 800690a:	4618      	mov	r0, r3
 800690c:	f002 fc08 	bl	8009120 <RCCEx_PLL3_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006916:	e004      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800691e:	e000      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800692a:	4ba5      	ldr	r3, [pc, #660]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800692c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006938:	4aa1      	ldr	r2, [pc, #644]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800693a:	430b      	orrs	r3, r1
 800693c:	6513      	str	r3, [r2, #80]	; 0x50
 800693e:	e003      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006954:	f04f 0900 	mov.w	r9, #0
 8006958:	ea58 0309 	orrs.w	r3, r8, r9
 800695c:	d047      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006964:	2b04      	cmp	r3, #4
 8006966:	d82a      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006985 	.word	0x08006985
 8006974:	08006993 	.word	0x08006993
 8006978:	080069a9 	.word	0x080069a9
 800697c:	080069c7 	.word	0x080069c7
 8006980:	080069c7 	.word	0x080069c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006984:	4b8e      	ldr	r3, [pc, #568]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4a8d      	ldr	r2, [pc, #564]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800698a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006990:	e01a      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006996:	3308      	adds	r3, #8
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f002 fb0e 	bl	8008fbc <RCCEx_PLL2_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069a6:	e00f      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ac:	3328      	adds	r3, #40	; 0x28
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f002 fbb5 	bl	8009120 <RCCEx_PLL3_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069bc:	e004      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069c4:	e000      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80069c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069d0:	4b7b      	ldr	r3, [pc, #492]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	f023 0107 	bic.w	r1, r3, #7
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	4a78      	ldr	r2, [pc, #480]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6513      	str	r3, [r2, #80]	; 0x50
 80069e4:	e003      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80069fa:	f04f 0b00 	mov.w	fp, #0
 80069fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a02:	d04c      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0e:	d030      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a14:	d829      	bhi.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a16:	2bc0      	cmp	r3, #192	; 0xc0
 8006a18:	d02d      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a1c:	d825      	bhi.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d018      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006a22:	2b80      	cmp	r3, #128	; 0x80
 8006a24:	d821      	bhi.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d007      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006a2e:	e01c      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a30:	4b63      	ldr	r3, [pc, #396]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	4a62      	ldr	r2, [pc, #392]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a3c:	e01c      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a42:	3308      	adds	r3, #8
 8006a44:	2100      	movs	r1, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	f002 fab8 	bl	8008fbc <RCCEx_PLL2_Config>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a52:	e011      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a58:	3328      	adds	r3, #40	; 0x28
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f002 fb5f 	bl	8009120 <RCCEx_PLL3_Config>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a68:	e006      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a70:	e002      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a72:	bf00      	nop
 8006a74:	e000      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a80:	4b4f      	ldr	r3, [pc, #316]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a84:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8e:	4a4c      	ldr	r2, [pc, #304]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a90:	430b      	orrs	r3, r1
 8006a92:	6513      	str	r3, [r2, #80]	; 0x50
 8006a94:	e003      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006aaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ab4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d053      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aca:	d035      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ad0:	d82e      	bhi.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ad6:	d031      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006adc:	d828      	bhi.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae2:	d01a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae8:	d822      	bhi.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006af2:	d007      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006af4:	e01c      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af6:	4b32      	ldr	r3, [pc, #200]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	4a31      	ldr	r2, [pc, #196]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b02:	e01c      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b08:	3308      	adds	r3, #8
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f002 fa55 	bl	8008fbc <RCCEx_PLL2_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b18:	e011      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1e:	3328      	adds	r3, #40	; 0x28
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f002 fafc 	bl	8009120 <RCCEx_PLL3_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b2e:	e006      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b36:	e002      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b38:	bf00      	nop
 8006b3a:	e000      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b46:	4b1e      	ldr	r3, [pc, #120]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b56:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b5c:	e003      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b76:	2300      	movs	r3, #0
 8006b78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d056      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b92:	d038      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b98:	d831      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b9e:	d034      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006ba0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ba4:	d82b      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006baa:	d01d      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb0:	d825      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d006      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bba:	d00a      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006bbc:	e01f      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006bbe:	bf00      	nop
 8006bc0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc4:	4ba2      	ldr	r3, [pc, #648]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4aa1      	ldr	r2, [pc, #644]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bd0:	e01c      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 f9ee 	bl	8008fbc <RCCEx_PLL2_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006be6:	e011      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bec:	3328      	adds	r3, #40	; 0x28
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f002 fa95 	bl	8009120 <RCCEx_PLL3_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bfc:	e006      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c04:	e002      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c14:	4b8e      	ldr	r3, [pc, #568]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c24:	4a8a      	ldr	r2, [pc, #552]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6593      	str	r3, [r2, #88]	; 0x58
 8006c2a:	e003      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	d03a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5a:	2b30      	cmp	r3, #48	; 0x30
 8006c5c:	d01f      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006c5e:	2b30      	cmp	r3, #48	; 0x30
 8006c60:	d819      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d00c      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d815      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d019      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	d111      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c72:	4b77      	ldr	r3, [pc, #476]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	4a76      	ldr	r2, [pc, #472]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c7e:	e011      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c84:	3308      	adds	r3, #8
 8006c86:	2102      	movs	r1, #2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f002 f997 	bl	8008fbc <RCCEx_PLL2_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c94:	e006      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c9c:	e002      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c9e:	bf00      	nop
 8006ca0:	e000      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cac:	4b68      	ldr	r3, [pc, #416]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	4a65      	ldr	r2, [pc, #404]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cc0:	e003      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006cd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ce0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d051      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf4:	d035      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cfa:	d82e      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006cfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d00:	d031      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006d02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d06:	d828      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0c:	d01a      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d12:	d822      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1c:	d007      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006d1e:	e01c      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d20:	4b4b      	ldr	r3, [pc, #300]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	4a4a      	ldr	r2, [pc, #296]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d2c:	e01c      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d32:	3308      	adds	r3, #8
 8006d34:	2100      	movs	r1, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f002 f940 	bl	8008fbc <RCCEx_PLL2_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d42:	e011      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d48:	3328      	adds	r3, #40	; 0x28
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f002 f9e7 	bl	8009120 <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d58:	e006      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d60:	e002      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d70:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7e:	4a34      	ldr	r2, [pc, #208]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6513      	str	r3, [r2, #80]	; 0x50
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006da4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006da8:	460b      	mov	r3, r1
 8006daa:	4313      	orrs	r3, r2
 8006dac:	d056      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006db8:	d033      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dbe:	d82c      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc4:	d02f      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dca:	d826      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dd0:	d02b      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006dd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dd6:	d820      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ddc:	d012      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de2:	d81a      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d022      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dec:	d115      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df2:	3308      	adds	r3, #8
 8006df4:	2101      	movs	r1, #1
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 f8e0 	bl	8008fbc <RCCEx_PLL2_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e02:	e015      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e08:	3328      	adds	r3, #40	; 0x28
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f002 f987 	bl	8009120 <RCCEx_PLL3_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e18:	e00a      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e20:	e006      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e22:	bf00      	nop
 8006e24:	e004      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e26:	bf00      	nop
 8006e28:	e002      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10d      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e46:	4a02      	ldr	r2, [pc, #8]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e4c:	e006      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e4e:	bf00      	nop
 8006e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d055      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e88:	d033      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e8e:	d82c      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e94:	d02f      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d826      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ea0:	d02b      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006ea2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ea6:	d820      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eac:	d012      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb2:	d81a      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d022      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ebc:	d115      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f002 f878 	bl	8008fbc <RCCEx_PLL2_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ed2:	e015      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed8:	3328      	adds	r3, #40	; 0x28
 8006eda:	2101      	movs	r1, #1
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 f91f 	bl	8009120 <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ee8:	e00a      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ef0:	e006      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ef2:	bf00      	nop
 8006ef4:	e004      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ef6:	bf00      	nop
 8006ef8:	e002      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006efa:	bf00      	nop
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f08:	4ba3      	ldr	r3, [pc, #652]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f18:	4a9f      	ldr	r2, [pc, #636]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	d037      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f52:	d00e      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f58:	d816      	bhi.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d018      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f62:	d111      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f64:	4b8c      	ldr	r3, [pc, #560]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a8b      	ldr	r2, [pc, #556]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f70:	e00f      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f76:	3308      	adds	r3, #8
 8006f78:	2101      	movs	r1, #1
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f002 f81e 	bl	8008fbc <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f86:	e004      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f8e:	e000      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f9a:	4b7f      	ldr	r3, [pc, #508]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	4a7b      	ldr	r2, [pc, #492]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006faa:	430b      	orrs	r3, r1
 8006fac:	6513      	str	r3, [r2, #80]	; 0x50
 8006fae:	e003      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	d039      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d81c      	bhi.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007025 	.word	0x08007025
 8006fec:	08006ff9 	.word	0x08006ff9
 8006ff0:	08007007 	.word	0x08007007
 8006ff4:	08007025 	.word	0x08007025
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff8:	4b67      	ldr	r3, [pc, #412]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	4a66      	ldr	r2, [pc, #408]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007004:	e00f      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700a:	3308      	adds	r3, #8
 800700c:	2102      	movs	r1, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 ffd4 	bl	8008fbc <RCCEx_PLL2_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800701a:	e004      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007022:	e000      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800702e:	4b5a      	ldr	r3, [pc, #360]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007032:	f023 0103 	bic.w	r1, r3, #3
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800703a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703c:	4a56      	ldr	r2, [pc, #344]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800703e:	430b      	orrs	r3, r1
 8007040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007042:	e003      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007062:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	f000 809f 	beq.w	80071ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800706e:	4b4b      	ldr	r3, [pc, #300]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a4a      	ldr	r2, [pc, #296]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007078:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800707a:	f7fb f85f 	bl	800213c <HAL_GetTick>
 800707e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007082:	e00b      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007084:	f7fb f85a 	bl	800213c <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b64      	cmp	r3, #100	; 0x64
 8007092:	d903      	bls.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800709a:	e005      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800709c:	4b3f      	ldr	r3, [pc, #252]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0ed      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80070a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d179      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070b0:	4b39      	ldr	r3, [pc, #228]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070bc:	4053      	eors	r3, r2
 80070be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d015      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c6:	4b34      	ldr	r3, [pc, #208]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070d2:	4b31      	ldr	r3, [pc, #196]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	4a30      	ldr	r2, [pc, #192]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070de:	4b2e      	ldr	r3, [pc, #184]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070ea:	4a2b      	ldr	r2, [pc, #172]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fe:	d118      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007100:	f7fb f81c 	bl	800213c <HAL_GetTick>
 8007104:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007108:	e00d      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800710a:	f7fb f817 	bl	800213c <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	f241 3388 	movw	r3, #5000	; 0x1388
 800711a:	429a      	cmp	r2, r3
 800711c:	d903      	bls.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007124:	e005      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007126:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0eb      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007136:	2b00      	cmp	r3, #0
 8007138:	d129      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714a:	d10e      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800714c:	4b12      	ldr	r3, [pc, #72]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007158:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800715c:	091a      	lsrs	r2, r3, #4
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007160:	4013      	ands	r3, r2
 8007162:	4a0d      	ldr	r2, [pc, #52]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007164:	430b      	orrs	r3, r1
 8007166:	6113      	str	r3, [r2, #16]
 8007168:	e005      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007170:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007174:	6113      	str	r3, [r2, #16]
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007178:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007186:	4a04      	ldr	r2, [pc, #16]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007188:	430b      	orrs	r3, r1
 800718a:	6713      	str	r3, [r2, #112]	; 0x70
 800718c:	e00e      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800718e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007196:	e009      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007198:	58024400 	.word	0x58024400
 800719c:	58024800 	.word	0x58024800
 80071a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f002 0301 	and.w	r3, r2, #1
 80071b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f000 8089 	beq.w	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d4:	2b28      	cmp	r3, #40	; 0x28
 80071d6:	d86b      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80071d8:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	080072b9 	.word	0x080072b9
 80071e4:	080072b1 	.word	0x080072b1
 80071e8:	080072b1 	.word	0x080072b1
 80071ec:	080072b1 	.word	0x080072b1
 80071f0:	080072b1 	.word	0x080072b1
 80071f4:	080072b1 	.word	0x080072b1
 80071f8:	080072b1 	.word	0x080072b1
 80071fc:	080072b1 	.word	0x080072b1
 8007200:	08007285 	.word	0x08007285
 8007204:	080072b1 	.word	0x080072b1
 8007208:	080072b1 	.word	0x080072b1
 800720c:	080072b1 	.word	0x080072b1
 8007210:	080072b1 	.word	0x080072b1
 8007214:	080072b1 	.word	0x080072b1
 8007218:	080072b1 	.word	0x080072b1
 800721c:	080072b1 	.word	0x080072b1
 8007220:	0800729b 	.word	0x0800729b
 8007224:	080072b1 	.word	0x080072b1
 8007228:	080072b1 	.word	0x080072b1
 800722c:	080072b1 	.word	0x080072b1
 8007230:	080072b1 	.word	0x080072b1
 8007234:	080072b1 	.word	0x080072b1
 8007238:	080072b1 	.word	0x080072b1
 800723c:	080072b1 	.word	0x080072b1
 8007240:	080072b9 	.word	0x080072b9
 8007244:	080072b1 	.word	0x080072b1
 8007248:	080072b1 	.word	0x080072b1
 800724c:	080072b1 	.word	0x080072b1
 8007250:	080072b1 	.word	0x080072b1
 8007254:	080072b1 	.word	0x080072b1
 8007258:	080072b1 	.word	0x080072b1
 800725c:	080072b1 	.word	0x080072b1
 8007260:	080072b9 	.word	0x080072b9
 8007264:	080072b1 	.word	0x080072b1
 8007268:	080072b1 	.word	0x080072b1
 800726c:	080072b1 	.word	0x080072b1
 8007270:	080072b1 	.word	0x080072b1
 8007274:	080072b1 	.word	0x080072b1
 8007278:	080072b1 	.word	0x080072b1
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080072b9 	.word	0x080072b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007288:	3308      	adds	r3, #8
 800728a:	2101      	movs	r1, #1
 800728c:	4618      	mov	r0, r3
 800728e:	f001 fe95 	bl	8008fbc <RCCEx_PLL2_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007298:	e00f      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800729a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729e:	3328      	adds	r3, #40	; 0x28
 80072a0:	2101      	movs	r1, #1
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 ff3c 	bl	8009120 <RCCEx_PLL3_Config>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072ae:	e004      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072b6:	e000      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80072b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072c2:	4bbf      	ldr	r3, [pc, #764]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d0:	4abb      	ldr	r2, [pc, #748]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072d2:	430b      	orrs	r3, r1
 80072d4:	6553      	str	r3, [r2, #84]	; 0x54
 80072d6:	e003      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f002 0302 	and.w	r3, r2, #2
 80072ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072f0:	2300      	movs	r3, #0
 80072f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80072fa:	460b      	mov	r3, r1
 80072fc:	4313      	orrs	r3, r2
 80072fe:	d041      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007306:	2b05      	cmp	r3, #5
 8007308:	d824      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	0800735d 	.word	0x0800735d
 8007314:	08007329 	.word	0x08007329
 8007318:	0800733f 	.word	0x0800733f
 800731c:	0800735d 	.word	0x0800735d
 8007320:	0800735d 	.word	0x0800735d
 8007324:	0800735d 	.word	0x0800735d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732c:	3308      	adds	r3, #8
 800732e:	2101      	movs	r1, #1
 8007330:	4618      	mov	r0, r3
 8007332:	f001 fe43 	bl	8008fbc <RCCEx_PLL2_Config>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800733c:	e00f      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007342:	3328      	adds	r3, #40	; 0x28
 8007344:	2101      	movs	r1, #1
 8007346:	4618      	mov	r0, r3
 8007348:	f001 feea 	bl	8009120 <RCCEx_PLL3_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007352:	e004      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800735a:	e000      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800735c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007366:	4b96      	ldr	r3, [pc, #600]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	f023 0107 	bic.w	r1, r3, #7
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007374:	4a92      	ldr	r2, [pc, #584]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007376:	430b      	orrs	r3, r1
 8007378:	6553      	str	r3, [r2, #84]	; 0x54
 800737a:	e003      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f002 0304 	and.w	r3, r2, #4
 8007390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800739a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800739e:	460b      	mov	r3, r1
 80073a0:	4313      	orrs	r3, r2
 80073a2:	d044      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ac:	2b05      	cmp	r3, #5
 80073ae:	d825      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80073b0:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80073b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b6:	bf00      	nop
 80073b8:	08007405 	.word	0x08007405
 80073bc:	080073d1 	.word	0x080073d1
 80073c0:	080073e7 	.word	0x080073e7
 80073c4:	08007405 	.word	0x08007405
 80073c8:	08007405 	.word	0x08007405
 80073cc:	08007405 	.word	0x08007405
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d4:	3308      	adds	r3, #8
 80073d6:	2101      	movs	r1, #1
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 fdef 	bl	8008fbc <RCCEx_PLL2_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073e4:	e00f      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ea:	3328      	adds	r3, #40	; 0x28
 80073ec:	2101      	movs	r1, #1
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 fe96 	bl	8009120 <RCCEx_PLL3_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073fa:	e004      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007402:	e000      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10b      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800740e:	4b6c      	ldr	r3, [pc, #432]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007412:	f023 0107 	bic.w	r1, r3, #7
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800741e:	4a68      	ldr	r2, [pc, #416]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007420:	430b      	orrs	r3, r1
 8007422:	6593      	str	r3, [r2, #88]	; 0x58
 8007424:	e003      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f002 0320 	and.w	r3, r2, #32
 800743a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800743e:	2300      	movs	r3, #0
 8007440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007444:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007448:	460b      	mov	r3, r1
 800744a:	4313      	orrs	r3, r2
 800744c:	d055      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800745a:	d033      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800745c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007460:	d82c      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007466:	d02f      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746c:	d826      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800746e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007472:	d02b      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007474:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007478:	d820      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800747a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747e:	d012      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007484:	d81a      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d022      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800748a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800748e:	d115      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007494:	3308      	adds	r3, #8
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f001 fd8f 	bl	8008fbc <RCCEx_PLL2_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074a4:	e015      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074aa:	3328      	adds	r3, #40	; 0x28
 80074ac:	2102      	movs	r1, #2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 fe36 	bl	8009120 <RCCEx_PLL3_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074ba:	e00a      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074c2:	e006      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074c4:	bf00      	nop
 80074c6:	e004      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10b      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074da:	4b39      	ldr	r3, [pc, #228]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	4a35      	ldr	r2, [pc, #212]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6553      	str	r3, [r2, #84]	; 0x54
 80074f0:	e003      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800750a:	2300      	movs	r3, #0
 800750c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007510:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007514:	460b      	mov	r3, r1
 8007516:	4313      	orrs	r3, r2
 8007518:	d058      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800751a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800751e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007522:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007526:	d033      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007528:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800752c:	d82c      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	d02f      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007538:	d826      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800753a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800753e:	d02b      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007544:	d820      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754a:	d012      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800754c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007550:	d81a      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d022      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755a:	d115      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007560:	3308      	adds	r3, #8
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f001 fd29 	bl	8008fbc <RCCEx_PLL2_Config>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007570:	e015      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007576:	3328      	adds	r3, #40	; 0x28
 8007578:	2102      	movs	r1, #2
 800757a:	4618      	mov	r0, r3
 800757c:	f001 fdd0 	bl	8009120 <RCCEx_PLL3_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007586:	e00a      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800758e:	e006      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007590:	bf00      	nop
 8007592:	e004      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10e      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075a6:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075b6:	4a02      	ldr	r2, [pc, #8]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b8:	430b      	orrs	r3, r1
 80075ba:	6593      	str	r3, [r2, #88]	; 0x58
 80075bc:	e006      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80075be:	bf00      	nop
 80075c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80075d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80075e6:	460b      	mov	r3, r1
 80075e8:	4313      	orrs	r3, r2
 80075ea:	d055      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075f8:	d033      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80075fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075fe:	d82c      	bhi.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007604:	d02f      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760a:	d826      	bhi.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800760c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007610:	d02b      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007612:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007616:	d820      	bhi.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800761c:	d012      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800761e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007622:	d81a      	bhi.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d022      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762c:	d115      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007632:	3308      	adds	r3, #8
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fcc0 	bl	8008fbc <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007642:	e015      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007648:	3328      	adds	r3, #40	; 0x28
 800764a:	2102      	movs	r1, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f001 fd67 	bl	8009120 <RCCEx_PLL3_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007658:	e00a      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007660:	e006      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007662:	bf00      	nop
 8007664:	e004      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007666:	bf00      	nop
 8007668:	e002      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800766a:	bf00      	nop
 800766c:	e000      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800766e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007678:	4ba1      	ldr	r3, [pc, #644]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007684:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007688:	4a9d      	ldr	r2, [pc, #628]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800768a:	430b      	orrs	r3, r1
 800768c:	6593      	str	r3, [r2, #88]	; 0x58
 800768e:	e003      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007694:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f002 0308 	and.w	r3, r2, #8
 80076a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076a8:	2300      	movs	r3, #0
 80076aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80076b2:	460b      	mov	r3, r1
 80076b4:	4313      	orrs	r3, r2
 80076b6:	d01e      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c4:	d10c      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	3328      	adds	r3, #40	; 0x28
 80076cc:	2102      	movs	r1, #2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fd26 	bl	8009120 <RCCEx_PLL3_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076e0:	4b87      	ldr	r3, [pc, #540]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f0:	4a83      	ldr	r2, [pc, #524]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076f2:	430b      	orrs	r3, r1
 80076f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f002 0310 	and.w	r3, r2, #16
 8007702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007706:	2300      	movs	r3, #0
 8007708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800770c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d01e      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800771e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007722:	d10c      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007728:	3328      	adds	r3, #40	; 0x28
 800772a:	2102      	movs	r1, #2
 800772c:	4618      	mov	r0, r3
 800772e:	f001 fcf7 	bl	8009120 <RCCEx_PLL3_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800773e:	4b70      	ldr	r3, [pc, #448]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007742:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800774e:	4a6c      	ldr	r2, [pc, #432]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007750:	430b      	orrs	r3, r1
 8007752:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007764:	2300      	movs	r3, #0
 8007766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800776a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800776e:	460b      	mov	r3, r1
 8007770:	4313      	orrs	r3, r2
 8007772:	d03e      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800777c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007780:	d022      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007786:	d81b      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007790:	d00b      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007792:	e015      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007798:	3308      	adds	r3, #8
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fc0d 	bl	8008fbc <RCCEx_PLL2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077a8:	e00f      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ae:	3328      	adds	r3, #40	; 0x28
 80077b0:	2102      	movs	r1, #2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f001 fcb4 	bl	8009120 <RCCEx_PLL3_Config>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077be:	e004      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077c6:	e000      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80077c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077d2:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077e2:	4a47      	ldr	r2, [pc, #284]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e4:	430b      	orrs	r3, r1
 80077e6:	6593      	str	r3, [r2, #88]	; 0x58
 80077e8:	e003      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80077fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8007800:	2300      	movs	r3, #0
 8007802:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007804:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d03b      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800781a:	d01f      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800781c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007820:	d818      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007826:	d003      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800782c:	d007      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800782e:	e011      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007830:	4b33      	ldr	r3, [pc, #204]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4a32      	ldr	r2, [pc, #200]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800783a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800783c:	e00f      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007842:	3328      	adds	r3, #40	; 0x28
 8007844:	2101      	movs	r1, #1
 8007846:	4618      	mov	r0, r3
 8007848:	f001 fc6a 	bl	8009120 <RCCEx_PLL3_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007852:	e004      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800785a:	e000      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800785c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800786e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007876:	4a22      	ldr	r2, [pc, #136]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007878:	430b      	orrs	r3, r1
 800787a:	6553      	str	r3, [r2, #84]	; 0x54
 800787c:	e003      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007882:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007892:	673b      	str	r3, [r7, #112]	; 0x70
 8007894:	2300      	movs	r3, #0
 8007896:	677b      	str	r3, [r7, #116]	; 0x74
 8007898:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800789c:	460b      	mov	r3, r1
 800789e:	4313      	orrs	r3, r2
 80078a0:	d034      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d007      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80078b2:	e011      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b4:	4b12      	ldr	r3, [pc, #72]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a11      	ldr	r2, [pc, #68]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078c0:	e00e      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c6:	3308      	adds	r3, #8
 80078c8:	2102      	movs	r1, #2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fb76 	bl	8008fbc <RCCEx_PLL2_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078d6:	e003      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10d      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f6:	4a02      	ldr	r2, [pc, #8]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078f8:	430b      	orrs	r3, r1
 80078fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078fc:	e006      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007918:	66bb      	str	r3, [r7, #104]	; 0x68
 800791a:	2300      	movs	r3, #0
 800791c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800791e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d00c      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792c:	3328      	adds	r3, #40	; 0x28
 800792e:	2102      	movs	r1, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f001 fbf5 	bl	8009120 <RCCEx_PLL3_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800794e:	663b      	str	r3, [r7, #96]	; 0x60
 8007950:	2300      	movs	r3, #0
 8007952:	667b      	str	r3, [r7, #100]	; 0x64
 8007954:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007958:	460b      	mov	r3, r1
 800795a:	4313      	orrs	r3, r2
 800795c:	d038      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796a:	d018      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800796c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007970:	d811      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007976:	d014      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800797c:	d80b      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d011      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007986:	d106      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007988:	4bc3      	ldr	r3, [pc, #780]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	4ac2      	ldr	r2, [pc, #776]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800798e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007994:	e008      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800799c:	e004      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800799e:	bf00      	nop
 80079a0:	e002      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80079a2:	bf00      	nop
 80079a4:	e000      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80079a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10b      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079b0:	4bb9      	ldr	r3, [pc, #740]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c0:	4ab5      	ldr	r2, [pc, #724]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6553      	str	r3, [r2, #84]	; 0x54
 80079c6:	e003      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80079dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80079de:	2300      	movs	r3, #0
 80079e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80079e6:	460b      	mov	r3, r1
 80079e8:	4313      	orrs	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079ec:	4baa      	ldr	r3, [pc, #680]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fa:	4aa7      	ldr	r2, [pc, #668]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8007a0e:	2300      	movs	r3, #0
 8007a10:	657b      	str	r3, [r7, #84]	; 0x54
 8007a12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007a16:	460b      	mov	r3, r1
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	d00a      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a1c:	4b9e      	ldr	r3, [pc, #632]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a2c:	4a9a      	ldr	r2, [pc, #616]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a40:	2300      	movs	r3, #0
 8007a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d009      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a4e:	4b92      	ldr	r3, [pc, #584]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a52:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5c:	4a8e      	ldr	r2, [pc, #568]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a5e:	430b      	orrs	r3, r1
 8007a60:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a70:	2300      	movs	r3, #0
 8007a72:	647b      	str	r3, [r7, #68]	; 0x44
 8007a74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	d00e      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a7e:	4b86      	ldr	r3, [pc, #536]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	4a85      	ldr	r2, [pc, #532]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a88:	6113      	str	r3, [r2, #16]
 8007a8a:	4b83      	ldr	r3, [pc, #524]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8c:	6919      	ldr	r1, [r3, #16]
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007a96:	4a80      	ldr	r2, [pc, #512]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	d009      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ab8:	4b77      	ldr	r3, [pc, #476]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	4a74      	ldr	r2, [pc, #464]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8007ada:	2300      	movs	r3, #0
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ade:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	d00a      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ae8:	4b6b      	ldr	r3, [pc, #428]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af8:	4a67      	ldr	r2, [pc, #412]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007afa:	430b      	orrs	r3, r1
 8007afc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	2100      	movs	r1, #0
 8007b08:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007b14:	460b      	mov	r3, r1
 8007b16:	4313      	orrs	r3, r2
 8007b18:	d011      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1e:	3308      	adds	r3, #8
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 fa4a 	bl	8008fbc <RCCEx_PLL2_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	2100      	movs	r1, #0
 8007b48:	6239      	str	r1, [r7, #32]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b54:	460b      	mov	r3, r1
 8007b56:	4313      	orrs	r3, r2
 8007b58:	d011      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5e:	3308      	adds	r3, #8
 8007b60:	2101      	movs	r1, #1
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 fa2a 	bl	8008fbc <RCCEx_PLL2_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	2100      	movs	r1, #0
 8007b88:	61b9      	str	r1, [r7, #24]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b94:	460b      	mov	r3, r1
 8007b96:	4313      	orrs	r3, r2
 8007b98:	d011      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fa0a 	bl	8008fbc <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6139      	str	r1, [r7, #16]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	617b      	str	r3, [r7, #20]
 8007bd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	d011      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bde:	3328      	adds	r3, #40	; 0x28
 8007be0:	2100      	movs	r1, #0
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 fa9c 	bl	8009120 <RCCEx_PLL3_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	2100      	movs	r1, #0
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c14:	460b      	mov	r3, r1
 8007c16:	4313      	orrs	r3, r2
 8007c18:	d011      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1e:	3328      	adds	r3, #40	; 0x28
 8007c20:	2101      	movs	r1, #1
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 fa7c 	bl	8009120 <RCCEx_PLL3_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	2100      	movs	r1, #0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	607b      	str	r3, [r7, #4]
 8007c50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d011      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5e:	3328      	adds	r3, #40	; 0x28
 8007c60:	2102      	movs	r1, #2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 fa5c 	bl	8009120 <RCCEx_PLL3_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007c7e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e000      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007c92:	46bd      	mov	sp, r7
 8007c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c98:	58024400 	.word	0x58024400

08007c9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b090      	sub	sp, #64	; 0x40
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007caa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	f040 8094 	bne.w	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007cb4:	4b9e      	ldr	r3, [pc, #632]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	f200 8087 	bhi.w	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007ce1 	.word	0x08007ce1
 8007cd0:	08007d09 	.word	0x08007d09
 8007cd4:	08007d31 	.word	0x08007d31
 8007cd8:	08007dcd 	.word	0x08007dcd
 8007cdc:	08007d59 	.word	0x08007d59
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ce0:	4b93      	ldr	r3, [pc, #588]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cec:	d108      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 f810 	bl	8008d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfc:	f000 bd45 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d04:	f000 bd41 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d08:	4b89      	ldr	r3, [pc, #548]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d14:	d108      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fd54 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d24:	f000 bd31 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d2c:	f000 bd2d 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d30:	4b7f      	ldr	r3, [pc, #508]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3c:	d108      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d3e:	f107 030c 	add.w	r3, r7, #12
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fe94 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d4c:	f000 bd1d 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d54:	f000 bd19 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d58:	4b75      	ldr	r3, [pc, #468]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d62:	4b73      	ldr	r3, [pc, #460]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d10c      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d74:	4b6e      	ldr	r3, [pc, #440]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	08db      	lsrs	r3, r3, #3
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	4a6d      	ldr	r2, [pc, #436]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d80:	fa22 f303 	lsr.w	r3, r2, r3
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d86:	e01f      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d88:	4b69      	ldr	r3, [pc, #420]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d94:	d106      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d9c:	d102      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d9e:	4b66      	ldr	r3, [pc, #408]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da2:	e011      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007da4:	4b62      	ldr	r3, [pc, #392]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007db0:	d106      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007db8:	d102      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dba:	4b60      	ldr	r3, [pc, #384]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dbe:	e003      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dc4:	f000 bce1 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dc8:	f000 bcdf 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dcc:	4b5c      	ldr	r3, [pc, #368]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd0:	f000 bcdb 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd8:	f000 bcd7 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007de4:	430b      	orrs	r3, r1
 8007de6:	f040 80ad 	bne.w	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007dea:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007df2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfa:	d056      	beq.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e02:	f200 8090 	bhi.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	2bc0      	cmp	r3, #192	; 0xc0
 8007e0a:	f000 8088 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	2bc0      	cmp	r3, #192	; 0xc0
 8007e12:	f200 8088 	bhi.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	2b80      	cmp	r3, #128	; 0x80
 8007e1a:	d032      	beq.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	2b80      	cmp	r3, #128	; 0x80
 8007e20:	f200 8081 	bhi.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	2b40      	cmp	r3, #64	; 0x40
 8007e2e:	d014      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007e30:	e079      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e32:	4b3f      	ldr	r3, [pc, #252]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e3e:	d108      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 ff67 	bl	8008d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e4e:	f000 bc9c 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e56:	f000 bc98 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e5a:	4b35      	ldr	r3, [pc, #212]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e66:	d108      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e68:	f107 0318 	add.w	r3, r7, #24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fcab 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e76:	f000 bc88 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e7e:	f000 bc84 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e82:	4b2b      	ldr	r3, [pc, #172]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8e:	d108      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e90:	f107 030c 	add.w	r3, r7, #12
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fdeb 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9e:	f000 bc74 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea6:	f000 bc70 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eaa:	4b21      	ldr	r3, [pc, #132]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eb4:	4b1e      	ldr	r3, [pc, #120]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d10c      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ec6:	4b1a      	ldr	r3, [pc, #104]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	08db      	lsrs	r3, r3, #3
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	4a18      	ldr	r2, [pc, #96]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed8:	e01f      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee6:	d106      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eee:	d102      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ef0:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef4:	e011      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ef6:	4b0e      	ldr	r3, [pc, #56]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f02:	d106      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0a:	d102      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f0c:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f10:	e003      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f16:	f000 bc38 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f1a:	f000 bc36 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f22:	f000 bc32 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f2a:	f000 bc2e 	b.w	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f2e:	bf00      	nop
 8007f30:	58024400 	.word	0x58024400
 8007f34:	03d09000 	.word	0x03d09000
 8007f38:	003d0900 	.word	0x003d0900
 8007f3c:	017d7840 	.word	0x017d7840
 8007f40:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f48:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	f040 809c 	bne.w	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007f52:	4b9e      	ldr	r3, [pc, #632]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f56:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f62:	d054      	beq.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f6a:	f200 808b 	bhi.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f74:	f000 8083 	beq.w	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f7e:	f200 8081 	bhi.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f88:	d02f      	beq.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f90:	d878      	bhi.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f9e:	d012      	beq.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007fa0:	e070      	b.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fa2:	4b8a      	ldr	r3, [pc, #552]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 feaf 	bl	8008d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fbe:	e3e4      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc4:	e3e1      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc6:	4b81      	ldr	r3, [pc, #516]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd2:	d107      	bne.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd4:	f107 0318 	add.w	r3, r7, #24
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fbf5 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe2:	e3d2      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fe8:	e3cf      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fea:	4b78      	ldr	r3, [pc, #480]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff6:	d107      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff8:	f107 030c 	add.w	r3, r7, #12
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fd37 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008006:	e3c0      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800800c:	e3bd      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800800e:	4b6f      	ldr	r3, [pc, #444]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008016:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008018:	4b6c      	ldr	r3, [pc, #432]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b04      	cmp	r3, #4
 8008022:	d10c      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800802a:	4b68      	ldr	r3, [pc, #416]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	4a66      	ldr	r2, [pc, #408]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803c:	e01e      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800803e:	4b63      	ldr	r3, [pc, #396]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804a:	d106      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008052:	d102      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008054:	4b5f      	ldr	r3, [pc, #380]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008058:	e010      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800805a:	4b5c      	ldr	r3, [pc, #368]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008066:	d106      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806e:	d102      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008070:	4b59      	ldr	r3, [pc, #356]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008074:	e002      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800807a:	e386      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800807c:	e385      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800807e:	4b57      	ldr	r3, [pc, #348]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008082:	e382      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008088:	e37f      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800808a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008092:	430b      	orrs	r3, r1
 8008094:	f040 80a7 	bne.w	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008098:	4b4c      	ldr	r3, [pc, #304]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800809a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080a8:	d055      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080b0:	f200 8096 	bhi.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080ba:	f000 8084 	beq.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080c4:	f200 808c 	bhi.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ce:	d030      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080d6:	f200 8083 	bhi.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080e6:	d012      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80080e8:	e07a      	b.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ea:	4b38      	ldr	r3, [pc, #224]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f6:	d107      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fe0b 	bl	8008d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008106:	e340      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e33d      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800810e:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800811a:	d107      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811c:	f107 0318 	add.w	r3, r7, #24
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fb51 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812a:	e32e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008130:	e32b      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008132:	4b26      	ldr	r3, [pc, #152]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800813a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800813e:	d107      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008140:	f107 030c 	add.w	r3, r7, #12
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fc93 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814e:	e31c      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008154:	e319      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008156:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800815e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008160:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d10c      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800816c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	4a14      	ldr	r2, [pc, #80]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008184:	e01e      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008192:	d106      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800819a:	d102      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800819c:	4b0d      	ldr	r3, [pc, #52]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a0:	e010      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ae:	d106      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80081b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b6:	d102      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081b8:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081bc:	e002      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081c2:	e2e2      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081c4:	e2e1      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ca:	e2de      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081cc:	58024400 	.word	0x58024400
 80081d0:	03d09000 	.word	0x03d09000
 80081d4:	003d0900 	.word	0x003d0900
 80081d8:	017d7840 	.word	0x017d7840
 80081dc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e4:	e2d1      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ea:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80081ee:	430b      	orrs	r3, r1
 80081f0:	f040 809c 	bne.w	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80081f4:	4b93      	ldr	r3, [pc, #588]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008204:	d054      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800820c:	f200 808b 	bhi.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008216:	f000 8083 	beq.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008220:	f200 8081 	bhi.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822a:	d02f      	beq.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008232:	d878      	bhi.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	2b00      	cmp	r3, #0
 8008238:	d004      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008240:	d012      	beq.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008242:	e070      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008244:	4b7f      	ldr	r3, [pc, #508]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008250:	d107      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fd5e 	bl	8008d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008260:	e293      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008266:	e290      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008268:	4b76      	ldr	r3, [pc, #472]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008274:	d107      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008276:	f107 0318 	add.w	r3, r7, #24
 800827a:	4618      	mov	r0, r3
 800827c:	f000 faa4 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008284:	e281      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828a:	e27e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800828c:	4b6d      	ldr	r3, [pc, #436]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008298:	d107      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fbe6 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a8:	e26f      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ae:	e26c      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082b0:	4b64      	ldr	r3, [pc, #400]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082ba:	4b62      	ldr	r3, [pc, #392]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d10c      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80082c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082cc:	4b5d      	ldr	r3, [pc, #372]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	08db      	lsrs	r3, r3, #3
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	4a5c      	ldr	r2, [pc, #368]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082d8:	fa22 f303 	lsr.w	r3, r2, r3
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082de:	e01e      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082e0:	4b58      	ldr	r3, [pc, #352]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ec:	d106      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80082ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082f4:	d102      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082f6:	4b55      	ldr	r3, [pc, #340]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082fa:	e010      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082fc:	4b51      	ldr	r3, [pc, #324]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008308:	d106      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008310:	d102      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008312:	4b4f      	ldr	r3, [pc, #316]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008316:	e002      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800831c:	e235      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800831e:	e234      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008320:	4b4c      	ldr	r3, [pc, #304]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008324:	e231      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800832a:	e22e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800832c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008330:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008334:	430b      	orrs	r3, r1
 8008336:	f040 808f 	bne.w	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800833a:	4b42      	ldr	r3, [pc, #264]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008342:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800834a:	d06b      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008352:	d874      	bhi.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800835a:	d056      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008362:	d86c      	bhi.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800836a:	d03b      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008372:	d864      	bhi.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800837a:	d021      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008382:	d85c      	bhi.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008390:	d004      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008392:	e054      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008394:	f7fe fa62 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8008398:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800839a:	e1f6      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800839c:	4b29      	ldr	r3, [pc, #164]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083a8:	d107      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083aa:	f107 0318 	add.w	r3, r7, #24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fa0a 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b8:	e1e7      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083be:	e1e4      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083c0:	4b20      	ldr	r3, [pc, #128]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083cc:	d107      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ce:	f107 030c 	add.w	r3, r7, #12
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb4c 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083dc:	e1d5      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e2:	e1d2      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083e4:	4b17      	ldr	r3, [pc, #92]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d109      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083f0:	4b14      	ldr	r3, [pc, #80]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	08db      	lsrs	r3, r3, #3
 80083f6:	f003 0303 	and.w	r3, r3, #3
 80083fa:	4a13      	ldr	r2, [pc, #76]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80083fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008402:	e1c2      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008408:	e1bf      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800840a:	4b0e      	ldr	r3, [pc, #56]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008416:	d102      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008418:	4b0c      	ldr	r3, [pc, #48]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841c:	e1b5      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008422:	e1b2      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008424:	4b07      	ldr	r3, [pc, #28]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008430:	d102      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008432:	4b07      	ldr	r3, [pc, #28]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008436:	e1a8      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843c:	e1a5      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008442:	e1a2      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008444:	58024400 	.word	0x58024400
 8008448:	03d09000 	.word	0x03d09000
 800844c:	003d0900 	.word	0x003d0900
 8008450:	017d7840 	.word	0x017d7840
 8008454:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008460:	430b      	orrs	r3, r1
 8008462:	d173      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008464:	4b9c      	ldr	r3, [pc, #624]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800846c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008474:	d02f      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800847c:	d863      	bhi.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800848a:	d012      	beq.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800848c:	e05b      	b.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800848e:	4b92      	ldr	r3, [pc, #584]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800849a:	d107      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800849c:	f107 0318 	add.w	r3, r7, #24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f991 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084aa:	e16e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b0:	e16b      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084b2:	4b89      	ldr	r3, [pc, #548]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084be:	d107      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fad3 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ce:	e15c      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d4:	e159      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084d6:	4b80      	ldr	r3, [pc, #512]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084e0:	4b7d      	ldr	r3, [pc, #500]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d10c      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084f2:	4b79      	ldr	r3, [pc, #484]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	08db      	lsrs	r3, r3, #3
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	4a77      	ldr	r2, [pc, #476]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80084fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008504:	e01e      	b.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008506:	4b74      	ldr	r3, [pc, #464]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008512:	d106      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800851a:	d102      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800851c:	4b70      	ldr	r3, [pc, #448]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008520:	e010      	b.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008522:	4b6d      	ldr	r3, [pc, #436]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800852e:	d106      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008536:	d102      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008538:	4b6a      	ldr	r3, [pc, #424]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853c:	e002      	b.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008542:	e122      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008544:	e121      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854a:	e11e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800854c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008550:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008554:	430b      	orrs	r3, r1
 8008556:	d133      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008558:	4b5f      	ldr	r3, [pc, #380]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800855a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008560:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856e:	d012      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008570:	e023      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008572:	4b59      	ldr	r3, [pc, #356]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800857e:	d107      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fbc7 	bl	8008d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800858e:	e0fc      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008594:	e0f9      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008596:	4b50      	ldr	r3, [pc, #320]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a2:	d107      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a4:	f107 0318 	add.w	r3, r7, #24
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f90d 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b2:	e0ea      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b8:	e0e7      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085be:	e0e4      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80085c8:	430b      	orrs	r3, r1
 80085ca:	f040 808d 	bne.w	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80085ce:	4b42      	ldr	r3, [pc, #264]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80085d6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085de:	d06b      	beq.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e6:	d874      	bhi.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ee:	d056      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f6:	d86c      	bhi.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085fe:	d03b      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008606:	d864      	bhi.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800860e:	d021      	beq.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008616:	d85c      	bhi.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008624:	d004      	beq.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008626:	e054      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008628:	f000 f8b8 	bl	800879c <HAL_RCCEx_GetD3PCLK1Freq>
 800862c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800862e:	e0ac      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008630:	4b29      	ldr	r3, [pc, #164]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863c:	d107      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863e:	f107 0318 	add.w	r3, r7, #24
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f8c0 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864c:	e09d      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008652:	e09a      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008654:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800865c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008660:	d107      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008662:	f107 030c 	add.w	r3, r7, #12
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fa02 	bl	8008a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008670:	e08b      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008676:	e088      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008678:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b04      	cmp	r3, #4
 8008682:	d109      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008684:	4b14      	ldr	r3, [pc, #80]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	08db      	lsrs	r3, r3, #3
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	4a13      	ldr	r2, [pc, #76]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008696:	e078      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800869c:	e075      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800869e:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086aa:	d102      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b0:	e06b      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b6:	e068      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c4:	d102      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80086c6:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ca:	e05e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d0:	e05b      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d6:	e058      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086d8:	58024400 	.word	0x58024400
 80086dc:	03d09000 	.word	0x03d09000
 80086e0:	003d0900 	.word	0x003d0900
 80086e4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80086e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80086f0:	430b      	orrs	r3, r1
 80086f2:	d148      	bne.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80086f4:	4b27      	ldr	r3, [pc, #156]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008704:	d02a      	beq.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800870c:	d838      	bhi.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800871a:	d00d      	beq.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800871c:	e030      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800872a:	d102      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008730:	e02b      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008736:	e028      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008738:	4b16      	ldr	r3, [pc, #88]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008744:	d107      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fae4 	bl	8008d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008754:	e019      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800875a:	e016      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800875c:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008768:	d107      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800876a:	f107 0318 	add.w	r3, r7, #24
 800876e:	4618      	mov	r0, r3
 8008770:	f000 f82a 	bl	80087c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008778:	e007      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800877e:	e004      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008784:	e001      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800878a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800878c:	4618      	mov	r0, r3
 800878e:	3740      	adds	r7, #64	; 0x40
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	58024400 	.word	0x58024400
 8008798:	017d7840 	.word	0x017d7840

0800879c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087a0:	f7fe f82c 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 80087a4:	4602      	mov	r2, r0
 80087a6:	4b06      	ldr	r3, [pc, #24]	; (80087c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	091b      	lsrs	r3, r3, #4
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	4904      	ldr	r1, [pc, #16]	; (80087c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087b2:	5ccb      	ldrb	r3, [r1, r3]
 80087b4:	f003 031f 	and.w	r3, r3, #31
 80087b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087bc:	4618      	mov	r0, r3
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	58024400 	.word	0x58024400
 80087c4:	080117f0 	.word	0x080117f0

080087c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b089      	sub	sp, #36	; 0x24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087d0:	4ba1      	ldr	r3, [pc, #644]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	f003 0303 	and.w	r3, r3, #3
 80087d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80087da:	4b9f      	ldr	r3, [pc, #636]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087de:	0b1b      	lsrs	r3, r3, #12
 80087e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087e6:	4b9c      	ldr	r3, [pc, #624]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	091b      	lsrs	r3, r3, #4
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087f2:	4b99      	ldr	r3, [pc, #612]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f6:	08db      	lsrs	r3, r3, #3
 80087f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	fb02 f303 	mul.w	r3, r2, r3
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 8111 	beq.w	8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b02      	cmp	r3, #2
 800881a:	f000 8083 	beq.w	8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b02      	cmp	r3, #2
 8008822:	f200 80a1 	bhi.w	8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d056      	beq.n	80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008832:	e099      	b.n	8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008834:	4b88      	ldr	r3, [pc, #544]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0320 	and.w	r3, r3, #32
 800883c:	2b00      	cmp	r3, #0
 800883e:	d02d      	beq.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008840:	4b85      	ldr	r3, [pc, #532]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	08db      	lsrs	r3, r3, #3
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	4a84      	ldr	r2, [pc, #528]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800884c:	fa22 f303 	lsr.w	r3, r2, r3
 8008850:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	4b7b      	ldr	r3, [pc, #492]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a03 	vldr	s12, [r7, #12]
 800887e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800889a:	e087      	b.n	80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ae:	4b6a      	ldr	r3, [pc, #424]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088be:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088de:	e065      	b.n	80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f2:	4b59      	ldr	r3, [pc, #356]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008902:	ed97 6a03 	vldr	s12, [r7, #12]
 8008906:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800890a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008922:	e043      	b.n	80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008936:	4b48      	ldr	r3, [pc, #288]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008946:	ed97 6a03 	vldr	s12, [r7, #12]
 800894a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800894e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008966:	e021      	b.n	80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008972:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897a:	4b37      	ldr	r3, [pc, #220]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898a:	ed97 6a03 	vldr	s12, [r7, #12]
 800898e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089ac:	4b2a      	ldr	r3, [pc, #168]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	0a5b      	lsrs	r3, r3, #9
 80089b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d2:	ee17 2a90 	vmov	r2, s15
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80089da:	4b1f      	ldr	r3, [pc, #124]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e4:	ee07 3a90 	vmov	s15, r3
 80089e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a00:	ee17 2a90 	vmov	r2, s15
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a08:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	0e1b      	lsrs	r3, r3, #24
 8008a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2e:	ee17 2a90 	vmov	r2, s15
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a36:	e008      	b.n	8008a4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	609a      	str	r2, [r3, #8]
}
 8008a4a:	bf00      	nop
 8008a4c:	3724      	adds	r7, #36	; 0x24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	03d09000 	.word	0x03d09000
 8008a60:	46000000 	.word	0x46000000
 8008a64:	4c742400 	.word	0x4c742400
 8008a68:	4a742400 	.word	0x4a742400
 8008a6c:	4bbebc20 	.word	0x4bbebc20

08008a70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b089      	sub	sp, #36	; 0x24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a78:	4ba1      	ldr	r3, [pc, #644]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7c:	f003 0303 	and.w	r3, r3, #3
 8008a80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a82:	4b9f      	ldr	r3, [pc, #636]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a86:	0d1b      	lsrs	r3, r3, #20
 8008a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a8e:	4b9c      	ldr	r3, [pc, #624]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a9a:	4b99      	ldr	r3, [pc, #612]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9e:	08db      	lsrs	r3, r3, #3
 8008aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	fb02 f303 	mul.w	r3, r2, r3
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8111 	beq.w	8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	f000 8083 	beq.w	8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	f200 80a1 	bhi.w	8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d056      	beq.n	8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ada:	e099      	b.n	8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008adc:	4b88      	ldr	r3, [pc, #544]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d02d      	beq.n	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae8:	4b85      	ldr	r3, [pc, #532]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	08db      	lsrs	r3, r3, #3
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	4a84      	ldr	r2, [pc, #528]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
 8008af8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b12:	4b7b      	ldr	r3, [pc, #492]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b42:	e087      	b.n	8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b56:	4b6a      	ldr	r3, [pc, #424]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b86:	e065      	b.n	8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	ee07 3a90 	vmov	s15, r3
 8008b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9a:	4b59      	ldr	r3, [pc, #356]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bca:	e043      	b.n	8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bde:	4b48      	ldr	r3, [pc, #288]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c0e:	e021      	b.n	8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c22:	4b37      	ldr	r3, [pc, #220]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c54:	4b2a      	ldr	r3, [pc, #168]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	0a5b      	lsrs	r3, r3, #9
 8008c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c7a:	ee17 2a90 	vmov	r2, s15
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c82:	4b1f      	ldr	r3, [pc, #124]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca8:	ee17 2a90 	vmov	r2, s15
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008cb0:	4b13      	ldr	r3, [pc, #76]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	0e1b      	lsrs	r3, r3, #24
 8008cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd6:	ee17 2a90 	vmov	r2, s15
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cde:	e008      	b.n	8008cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	609a      	str	r2, [r3, #8]
}
 8008cf2:	bf00      	nop
 8008cf4:	3724      	adds	r7, #36	; 0x24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	58024400 	.word	0x58024400
 8008d04:	03d09000 	.word	0x03d09000
 8008d08:	46000000 	.word	0x46000000
 8008d0c:	4c742400 	.word	0x4c742400
 8008d10:	4a742400 	.word	0x4a742400
 8008d14:	4bbebc20 	.word	0x4bbebc20

08008d18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b089      	sub	sp, #36	; 0x24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d20:	4ba0      	ldr	r3, [pc, #640]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008d2a:	4b9e      	ldr	r3, [pc, #632]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2e:	091b      	lsrs	r3, r3, #4
 8008d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d36:	4b9b      	ldr	r3, [pc, #620]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d40:	4b98      	ldr	r3, [pc, #608]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	ee07 3a90 	vmov	s15, r3
 8008d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 8111 	beq.w	8008f86 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	f000 8083 	beq.w	8008e72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	f200 80a1 	bhi.w	8008eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d056      	beq.n	8008e2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d80:	e099      	b.n	8008eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d82:	4b88      	ldr	r3, [pc, #544]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d02d      	beq.n	8008dea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d8e:	4b85      	ldr	r3, [pc, #532]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	08db      	lsrs	r3, r3, #3
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	4a83      	ldr	r2, [pc, #524]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db8:	4b7a      	ldr	r3, [pc, #488]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dcc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008de8:	e087      	b.n	8008efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfc:	4b69      	ldr	r3, [pc, #420]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e10:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2c:	e065      	b.n	8008efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	ee07 3a90 	vmov	s15, r3
 8008e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e38:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e40:	4b58      	ldr	r3, [pc, #352]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e50:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e54:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e70:	e043      	b.n	8008efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e84:	4b47      	ldr	r3, [pc, #284]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8c:	ee07 3a90 	vmov	s15, r3
 8008e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e94:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e98:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb4:	e021      	b.n	8008efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	ee07 3a90 	vmov	s15, r3
 8008ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec8:	4b36      	ldr	r3, [pc, #216]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed0:	ee07 3a90 	vmov	s15, r3
 8008ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008edc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ef8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008efa:	4b2a      	ldr	r3, [pc, #168]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	0a5b      	lsrs	r3, r3, #9
 8008f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f04:	ee07 3a90 	vmov	s15, r3
 8008f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f20:	ee17 2a90 	vmov	r2, s15
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008f28:	4b1e      	ldr	r3, [pc, #120]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2c:	0c1b      	lsrs	r3, r3, #16
 8008f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4e:	ee17 2a90 	vmov	r2, s15
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f56:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5a:	0e1b      	lsrs	r3, r3, #24
 8008f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f60:	ee07 3a90 	vmov	s15, r3
 8008f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f7c:	ee17 2a90 	vmov	r2, s15
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f84:	e008      	b.n	8008f98 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	609a      	str	r2, [r3, #8]
}
 8008f98:	bf00      	nop
 8008f9a:	3724      	adds	r7, #36	; 0x24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	03d09000 	.word	0x03d09000
 8008fac:	46000000 	.word	0x46000000
 8008fb0:	4c742400 	.word	0x4c742400
 8008fb4:	4a742400 	.word	0x4a742400
 8008fb8:	4bbebc20 	.word	0x4bbebc20

08008fbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fca:	4b53      	ldr	r3, [pc, #332]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d101      	bne.n	8008fda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e099      	b.n	800910e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008fda:	4b4f      	ldr	r3, [pc, #316]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a4e      	ldr	r2, [pc, #312]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fe6:	f7f9 f8a9 	bl	800213c <HAL_GetTick>
 8008fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fec:	e008      	b.n	8009000 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fee:	f7f9 f8a5 	bl	800213c <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d901      	bls.n	8009000 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e086      	b.n	800910e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009000:	4b45      	ldr	r3, [pc, #276]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1f0      	bne.n	8008fee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800900c:	4b42      	ldr	r3, [pc, #264]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	031b      	lsls	r3, r3, #12
 800901a:	493f      	ldr	r1, [pc, #252]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 800901c:	4313      	orrs	r3, r2
 800901e:	628b      	str	r3, [r1, #40]	; 0x28
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	3b01      	subs	r3, #1
 8009026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	3b01      	subs	r3, #1
 8009030:	025b      	lsls	r3, r3, #9
 8009032:	b29b      	uxth	r3, r3
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	3b01      	subs	r3, #1
 800903c:	041b      	lsls	r3, r3, #16
 800903e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	3b01      	subs	r3, #1
 800904a:	061b      	lsls	r3, r3, #24
 800904c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009050:	4931      	ldr	r1, [pc, #196]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009052:	4313      	orrs	r3, r2
 8009054:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009056:	4b30      	ldr	r3, [pc, #192]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	492d      	ldr	r1, [pc, #180]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009064:	4313      	orrs	r3, r2
 8009066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009068:	4b2b      	ldr	r3, [pc, #172]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	f023 0220 	bic.w	r2, r3, #32
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	4928      	ldr	r1, [pc, #160]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009076:	4313      	orrs	r3, r2
 8009078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800907a:	4b27      	ldr	r3, [pc, #156]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	4a26      	ldr	r2, [pc, #152]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009080:	f023 0310 	bic.w	r3, r3, #16
 8009084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009086:	4b24      	ldr	r3, [pc, #144]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <RCCEx_PLL2_Config+0x160>)
 800908c:	4013      	ands	r3, r2
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	69d2      	ldr	r2, [r2, #28]
 8009092:	00d2      	lsls	r2, r2, #3
 8009094:	4920      	ldr	r1, [pc, #128]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009096:	4313      	orrs	r3, r2
 8009098:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800909a:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	4a1e      	ldr	r2, [pc, #120]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090a0:	f043 0310 	orr.w	r3, r3, #16
 80090a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d106      	bne.n	80090ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090ac:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	4a19      	ldr	r2, [pc, #100]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090b8:	e00f      	b.n	80090da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d106      	bne.n	80090ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090c0:	4b15      	ldr	r3, [pc, #84]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	4a14      	ldr	r2, [pc, #80]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090cc:	e005      	b.n	80090da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	4a11      	ldr	r2, [pc, #68]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090da:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a0e      	ldr	r2, [pc, #56]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 80090e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e6:	f7f9 f829 	bl	800213c <HAL_GetTick>
 80090ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090ec:	e008      	b.n	8009100 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090ee:	f7f9 f825 	bl	800213c <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d901      	bls.n	8009100 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e006      	b.n	800910e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <RCCEx_PLL2_Config+0x15c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d0f0      	beq.n	80090ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	58024400 	.word	0x58024400
 800911c:	ffff0007 	.word	0xffff0007

08009120 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800912e:	4b53      	ldr	r3, [pc, #332]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b03      	cmp	r3, #3
 8009138:	d101      	bne.n	800913e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e099      	b.n	8009272 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800913e:	4b4f      	ldr	r3, [pc, #316]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a4e      	ldr	r2, [pc, #312]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800914a:	f7f8 fff7 	bl	800213c <HAL_GetTick>
 800914e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009150:	e008      	b.n	8009164 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009152:	f7f8 fff3 	bl	800213c <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	2b02      	cmp	r3, #2
 800915e:	d901      	bls.n	8009164 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e086      	b.n	8009272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009164:	4b45      	ldr	r3, [pc, #276]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f0      	bne.n	8009152 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009170:	4b42      	ldr	r3, [pc, #264]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	051b      	lsls	r3, r3, #20
 800917e:	493f      	ldr	r1, [pc, #252]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009180:	4313      	orrs	r3, r2
 8009182:	628b      	str	r3, [r1, #40]	; 0x28
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	3b01      	subs	r3, #1
 800918a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	3b01      	subs	r3, #1
 8009194:	025b      	lsls	r3, r3, #9
 8009196:	b29b      	uxth	r3, r3
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	3b01      	subs	r3, #1
 80091a0:	041b      	lsls	r3, r3, #16
 80091a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091a6:	431a      	orrs	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	061b      	lsls	r3, r3, #24
 80091b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091b4:	4931      	ldr	r1, [pc, #196]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091ba:	4b30      	ldr	r3, [pc, #192]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	492d      	ldr	r1, [pc, #180]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091cc:	4b2b      	ldr	r3, [pc, #172]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	4928      	ldr	r1, [pc, #160]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091de:	4b27      	ldr	r3, [pc, #156]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	4a26      	ldr	r2, [pc, #152]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091ea:	4b24      	ldr	r3, [pc, #144]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ee:	4b24      	ldr	r3, [pc, #144]	; (8009280 <RCCEx_PLL3_Config+0x160>)
 80091f0:	4013      	ands	r3, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	69d2      	ldr	r2, [r2, #28]
 80091f6:	00d2      	lsls	r2, r2, #3
 80091f8:	4920      	ldr	r1, [pc, #128]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80091fe:	4b1f      	ldr	r3, [pc, #124]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	4a1e      	ldr	r2, [pc, #120]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009210:	4b1a      	ldr	r3, [pc, #104]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	4a19      	ldr	r2, [pc, #100]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800921a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800921c:	e00f      	b.n	800923e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d106      	bne.n	8009232 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	4a14      	ldr	r2, [pc, #80]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 800922a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800922e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009230:	e005      	b.n	800923e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009232:	4b12      	ldr	r3, [pc, #72]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	4a11      	ldr	r2, [pc, #68]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800923c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800923e:	4b0f      	ldr	r3, [pc, #60]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a0e      	ldr	r2, [pc, #56]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800924a:	f7f8 ff77 	bl	800213c <HAL_GetTick>
 800924e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009250:	e008      	b.n	8009264 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009252:	f7f8 ff73 	bl	800213c <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d901      	bls.n	8009264 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e006      	b.n	8009272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <RCCEx_PLL3_Config+0x15c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0f0      	beq.n	8009252 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	58024400 	.word	0x58024400
 8009280:	ffff0007 	.word	0xffff0007

08009284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e049      	b.n	800932a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7f7 ff06 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f000 f8a6 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	d001      	beq.n	800934c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e04c      	b.n	80093e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a26      	ldr	r2, [pc, #152]	; (80093f4 <HAL_TIM_Base_Start+0xc0>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d022      	beq.n	80093a4 <HAL_TIM_Base_Start+0x70>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009366:	d01d      	beq.n	80093a4 <HAL_TIM_Base_Start+0x70>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a22      	ldr	r2, [pc, #136]	; (80093f8 <HAL_TIM_Base_Start+0xc4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d018      	beq.n	80093a4 <HAL_TIM_Base_Start+0x70>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a21      	ldr	r2, [pc, #132]	; (80093fc <HAL_TIM_Base_Start+0xc8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d013      	beq.n	80093a4 <HAL_TIM_Base_Start+0x70>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a1f      	ldr	r2, [pc, #124]	; (8009400 <HAL_TIM_Base_Start+0xcc>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00e      	beq.n	80093a4 <HAL_TIM_Base_Start+0x70>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a1e      	ldr	r2, [pc, #120]	; (8009404 <HAL_TIM_Base_Start+0xd0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d009      	beq.n	80093a4 <HAL_TIM_Base_Start+0x70>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <HAL_TIM_Base_Start+0xd4>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d004      	beq.n	80093a4 <HAL_TIM_Base_Start+0x70>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a1b      	ldr	r2, [pc, #108]	; (800940c <HAL_TIM_Base_Start+0xd8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d115      	bne.n	80093d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	4b19      	ldr	r3, [pc, #100]	; (8009410 <HAL_TIM_Base_Start+0xdc>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b06      	cmp	r3, #6
 80093b4:	d015      	beq.n	80093e2 <HAL_TIM_Base_Start+0xae>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093bc:	d011      	beq.n	80093e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0201 	orr.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ce:	e008      	b.n	80093e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0201 	orr.w	r2, r2, #1
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e000      	b.n	80093e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	40010000 	.word	0x40010000
 80093f8:	40000400 	.word	0x40000400
 80093fc:	40000800 	.word	0x40000800
 8009400:	40000c00 	.word	0x40000c00
 8009404:	40010400 	.word	0x40010400
 8009408:	40001800 	.word	0x40001800
 800940c:	40014000 	.word	0x40014000
 8009410:	00010007 	.word	0x00010007

08009414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a40      	ldr	r2, [pc, #256]	; (8009528 <TIM_Base_SetConfig+0x114>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d013      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009432:	d00f      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a3d      	ldr	r2, [pc, #244]	; (800952c <TIM_Base_SetConfig+0x118>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00b      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a3c      	ldr	r2, [pc, #240]	; (8009530 <TIM_Base_SetConfig+0x11c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d007      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a3b      	ldr	r2, [pc, #236]	; (8009534 <TIM_Base_SetConfig+0x120>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a3a      	ldr	r2, [pc, #232]	; (8009538 <TIM_Base_SetConfig+0x124>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d108      	bne.n	8009466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a2f      	ldr	r2, [pc, #188]	; (8009528 <TIM_Base_SetConfig+0x114>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01f      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009474:	d01b      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a2c      	ldr	r2, [pc, #176]	; (800952c <TIM_Base_SetConfig+0x118>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d017      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a2b      	ldr	r2, [pc, #172]	; (8009530 <TIM_Base_SetConfig+0x11c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d013      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a2a      	ldr	r2, [pc, #168]	; (8009534 <TIM_Base_SetConfig+0x120>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d00f      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a29      	ldr	r2, [pc, #164]	; (8009538 <TIM_Base_SetConfig+0x124>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d00b      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a28      	ldr	r2, [pc, #160]	; (800953c <TIM_Base_SetConfig+0x128>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d007      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a27      	ldr	r2, [pc, #156]	; (8009540 <TIM_Base_SetConfig+0x12c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d003      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a26      	ldr	r2, [pc, #152]	; (8009544 <TIM_Base_SetConfig+0x130>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d108      	bne.n	80094c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a10      	ldr	r2, [pc, #64]	; (8009528 <TIM_Base_SetConfig+0x114>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00f      	beq.n	800950c <TIM_Base_SetConfig+0xf8>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a12      	ldr	r2, [pc, #72]	; (8009538 <TIM_Base_SetConfig+0x124>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00b      	beq.n	800950c <TIM_Base_SetConfig+0xf8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a11      	ldr	r2, [pc, #68]	; (800953c <TIM_Base_SetConfig+0x128>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d007      	beq.n	800950c <TIM_Base_SetConfig+0xf8>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a10      	ldr	r2, [pc, #64]	; (8009540 <TIM_Base_SetConfig+0x12c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d003      	beq.n	800950c <TIM_Base_SetConfig+0xf8>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a0f      	ldr	r2, [pc, #60]	; (8009544 <TIM_Base_SetConfig+0x130>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d103      	bne.n	8009514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	691a      	ldr	r2, [r3, #16]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	615a      	str	r2, [r3, #20]
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	40010000 	.word	0x40010000
 800952c:	40000400 	.word	0x40000400
 8009530:	40000800 	.word	0x40000800
 8009534:	40000c00 	.word	0x40000c00
 8009538:	40010400 	.word	0x40010400
 800953c:	40014000 	.word	0x40014000
 8009540:	40014400 	.word	0x40014400
 8009544:	40014800 	.word	0x40014800

08009548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009548:	b084      	sub	sp, #16
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	f107 001c 	add.w	r0, r7, #28
 8009556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	2b01      	cmp	r3, #1
 800955e:	d120      	bne.n	80095a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	4b2a      	ldr	r3, [pc, #168]	; (800961c <USB_CoreInit+0xd4>)
 8009572:	4013      	ands	r3, r2
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009586:	2b01      	cmp	r3, #1
 8009588:	d105      	bne.n	8009596 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 faf8 	bl	800ab8c <USB_CoreReset>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e01a      	b.n	80095d8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f001 faec 	bl	800ab8c <USB_CoreReset>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	639a      	str	r2, [r3, #56]	; 0x38
 80095ca:	e005      	b.n	80095d8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d116      	bne.n	800960c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095ec:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <USB_CoreInit+0xd8>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f043 0206 	orr.w	r2, r3, #6
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f043 0220 	orr.w	r2, r3, #32
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009618:	b004      	add	sp, #16
 800961a:	4770      	bx	lr
 800961c:	ffbdffbf 	.word	0xffbdffbf
 8009620:	03ee0000 	.word	0x03ee0000

08009624 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d165      	bne.n	8009704 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4a41      	ldr	r2, [pc, #260]	; (8009740 <USB_SetTurnaroundTime+0x11c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d906      	bls.n	800964e <USB_SetTurnaroundTime+0x2a>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4a40      	ldr	r2, [pc, #256]	; (8009744 <USB_SetTurnaroundTime+0x120>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d202      	bcs.n	800964e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009648:	230f      	movs	r3, #15
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	e062      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	4a3c      	ldr	r2, [pc, #240]	; (8009744 <USB_SetTurnaroundTime+0x120>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d306      	bcc.n	8009664 <USB_SetTurnaroundTime+0x40>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4a3b      	ldr	r2, [pc, #236]	; (8009748 <USB_SetTurnaroundTime+0x124>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d202      	bcs.n	8009664 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800965e:	230e      	movs	r3, #14
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e057      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	4a38      	ldr	r2, [pc, #224]	; (8009748 <USB_SetTurnaroundTime+0x124>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d306      	bcc.n	800967a <USB_SetTurnaroundTime+0x56>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4a37      	ldr	r2, [pc, #220]	; (800974c <USB_SetTurnaroundTime+0x128>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d202      	bcs.n	800967a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009674:	230d      	movs	r3, #13
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e04c      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	4a33      	ldr	r2, [pc, #204]	; (800974c <USB_SetTurnaroundTime+0x128>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d306      	bcc.n	8009690 <USB_SetTurnaroundTime+0x6c>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4a32      	ldr	r2, [pc, #200]	; (8009750 <USB_SetTurnaroundTime+0x12c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d802      	bhi.n	8009690 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800968a:	230c      	movs	r3, #12
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e041      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4a2f      	ldr	r2, [pc, #188]	; (8009750 <USB_SetTurnaroundTime+0x12c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d906      	bls.n	80096a6 <USB_SetTurnaroundTime+0x82>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4a2e      	ldr	r2, [pc, #184]	; (8009754 <USB_SetTurnaroundTime+0x130>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d802      	bhi.n	80096a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80096a0:	230b      	movs	r3, #11
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e036      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	4a2a      	ldr	r2, [pc, #168]	; (8009754 <USB_SetTurnaroundTime+0x130>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d906      	bls.n	80096bc <USB_SetTurnaroundTime+0x98>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4a29      	ldr	r2, [pc, #164]	; (8009758 <USB_SetTurnaroundTime+0x134>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d802      	bhi.n	80096bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096b6:	230a      	movs	r3, #10
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	e02b      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4a26      	ldr	r2, [pc, #152]	; (8009758 <USB_SetTurnaroundTime+0x134>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d906      	bls.n	80096d2 <USB_SetTurnaroundTime+0xae>
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	4a25      	ldr	r2, [pc, #148]	; (800975c <USB_SetTurnaroundTime+0x138>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d202      	bcs.n	80096d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096cc:	2309      	movs	r3, #9
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	e020      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	4a21      	ldr	r2, [pc, #132]	; (800975c <USB_SetTurnaroundTime+0x138>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d306      	bcc.n	80096e8 <USB_SetTurnaroundTime+0xc4>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	4a20      	ldr	r2, [pc, #128]	; (8009760 <USB_SetTurnaroundTime+0x13c>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d802      	bhi.n	80096e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096e2:	2308      	movs	r3, #8
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	e015      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4a1d      	ldr	r2, [pc, #116]	; (8009760 <USB_SetTurnaroundTime+0x13c>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d906      	bls.n	80096fe <USB_SetTurnaroundTime+0xda>
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	4a1c      	ldr	r2, [pc, #112]	; (8009764 <USB_SetTurnaroundTime+0x140>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d202      	bcs.n	80096fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096f8:	2307      	movs	r3, #7
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e00a      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096fe:	2306      	movs	r3, #6
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	e007      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d102      	bne.n	8009710 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800970a:	2309      	movs	r3, #9
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	e001      	b.n	8009714 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009710:	2309      	movs	r3, #9
 8009712:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	68da      	ldr	r2, [r3, #12]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	029b      	lsls	r3, r3, #10
 8009728:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800972c:	431a      	orrs	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	00d8acbf 	.word	0x00d8acbf
 8009744:	00e4e1c0 	.word	0x00e4e1c0
 8009748:	00f42400 	.word	0x00f42400
 800974c:	01067380 	.word	0x01067380
 8009750:	011a499f 	.word	0x011a499f
 8009754:	01312cff 	.word	0x01312cff
 8009758:	014ca43f 	.word	0x014ca43f
 800975c:	016e3600 	.word	0x016e3600
 8009760:	01a6ab1f 	.word	0x01a6ab1f
 8009764:	01e84800 	.word	0x01e84800

08009768 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f043 0201 	orr.w	r2, r3, #1
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f023 0201 	bic.w	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d115      	bne.n	80097fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097da:	2001      	movs	r0, #1
 80097dc:	f7f8 fcba 	bl	8002154 <HAL_Delay>
      ms++;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 f93f 	bl	800aa6a <USB_GetMode>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d01e      	beq.n	8009830 <USB_SetCurrentMode+0x84>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b31      	cmp	r3, #49	; 0x31
 80097f6:	d9f0      	bls.n	80097da <USB_SetCurrentMode+0x2e>
 80097f8:	e01a      	b.n	8009830 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d115      	bne.n	800982c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800980c:	2001      	movs	r0, #1
 800980e:	f7f8 fca1 	bl	8002154 <HAL_Delay>
      ms++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 f926 	bl	800aa6a <USB_GetMode>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <USB_SetCurrentMode+0x84>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b31      	cmp	r3, #49	; 0x31
 8009828:	d9f0      	bls.n	800980c <USB_SetCurrentMode+0x60>
 800982a:	e001      	b.n	8009830 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e005      	b.n	800983c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b32      	cmp	r3, #50	; 0x32
 8009834:	d101      	bne.n	800983a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009844:	b084      	sub	sp, #16
 8009846:	b580      	push	{r7, lr}
 8009848:	b086      	sub	sp, #24
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800985e:	2300      	movs	r3, #0
 8009860:	613b      	str	r3, [r7, #16]
 8009862:	e009      	b.n	8009878 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	3340      	adds	r3, #64	; 0x40
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	2200      	movs	r2, #0
 8009870:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	3301      	adds	r3, #1
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2b0e      	cmp	r3, #14
 800987c:	d9f2      	bls.n	8009864 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800987e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009880:	2b00      	cmp	r3, #0
 8009882:	d11c      	bne.n	80098be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009892:	f043 0302 	orr.w	r3, r3, #2
 8009896:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	e005      	b.n	80098ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098d0:	461a      	mov	r2, r3
 80098d2:	2300      	movs	r3, #0
 80098d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098dc:	4619      	mov	r1, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e4:	461a      	mov	r2, r3
 80098e6:	680b      	ldr	r3, [r1, #0]
 80098e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d10c      	bne.n	800990a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098f6:	2100      	movs	r1, #0
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f965 	bl	8009bc8 <USB_SetDevSpeed>
 80098fe:	e008      	b.n	8009912 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009900:	2101      	movs	r1, #1
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f960 	bl	8009bc8 <USB_SetDevSpeed>
 8009908:	e003      	b.n	8009912 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800990a:	2103      	movs	r1, #3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f95b 	bl	8009bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009912:	2110      	movs	r1, #16
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f8f3 	bl	8009b00 <USB_FlushTxFifo>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f91f 	bl	8009b68 <USB_FlushRxFifo>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	461a      	mov	r2, r3
 800993c:	2300      	movs	r3, #0
 800993e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009946:	461a      	mov	r2, r3
 8009948:	2300      	movs	r3, #0
 800994a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009952:	461a      	mov	r2, r3
 8009954:	2300      	movs	r3, #0
 8009956:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	e043      	b.n	80099e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009974:	d118      	bne.n	80099a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	461a      	mov	r2, r3
 800998a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	e013      	b.n	80099ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999e:	461a      	mov	r2, r3
 80099a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	e008      	b.n	80099ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b4:	461a      	mov	r2, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c6:	461a      	mov	r2, r3
 80099c8:	2300      	movs	r3, #0
 80099ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d8:	461a      	mov	r2, r3
 80099da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	3301      	adds	r3, #1
 80099e4:	613b      	str	r3, [r7, #16]
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d3b7      	bcc.n	800995e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099ee:	2300      	movs	r3, #0
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	e043      	b.n	8009a7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a0a:	d118      	bne.n	8009a3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	e013      	b.n	8009a50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a34:	461a      	mov	r2, r3
 8009a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	e008      	b.n	8009a50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d3b7      	bcc.n	80099f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009aa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d105      	bne.n	8009ab8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	f043 0210 	orr.w	r2, r3, #16
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699a      	ldr	r2, [r3, #24]
 8009abc:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <USB_DevInit+0x2b4>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d005      	beq.n	8009ad6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	f043 0208 	orr.w	r2, r3, #8
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d105      	bne.n	8009ae8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699a      	ldr	r2, [r3, #24]
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <USB_DevInit+0x2b8>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009af4:	b004      	add	sp, #16
 8009af6:	4770      	bx	lr
 8009af8:	803c3800 	.word	0x803c3800
 8009afc:	40000004 	.word	0x40000004

08009b00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4a13      	ldr	r2, [pc, #76]	; (8009b64 <USB_FlushTxFifo+0x64>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d901      	bls.n	8009b20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e01b      	b.n	8009b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	daf2      	bge.n	8009b0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	019b      	lsls	r3, r3, #6
 8009b30:	f043 0220 	orr.w	r2, r3, #32
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4a08      	ldr	r2, [pc, #32]	; (8009b64 <USB_FlushTxFifo+0x64>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d901      	bls.n	8009b4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e006      	b.n	8009b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b20      	cmp	r3, #32
 8009b54:	d0f0      	beq.n	8009b38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	00030d40 	.word	0x00030d40

08009b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3301      	adds	r3, #1
 8009b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4a11      	ldr	r2, [pc, #68]	; (8009bc4 <USB_FlushRxFifo+0x5c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d901      	bls.n	8009b86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e018      	b.n	8009bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	daf2      	bge.n	8009b74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2210      	movs	r2, #16
 8009b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <USB_FlushRxFifo+0x5c>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d901      	bls.n	8009baa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e006      	b.n	8009bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	f003 0310 	and.w	r3, r3, #16
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d0f0      	beq.n	8009b98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	00030d40 	.word	0x00030d40

08009bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	68f9      	ldr	r1, [r7, #12]
 8009be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009be8:	4313      	orrs	r3, r2
 8009bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b087      	sub	sp, #28
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 0306 	and.w	r3, r3, #6
 8009c12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d102      	bne.n	8009c20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]
 8009c1e:	e00a      	b.n	8009c36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d002      	beq.n	8009c2c <USB_GetDevSpeed+0x32>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b06      	cmp	r3, #6
 8009c2a:	d102      	bne.n	8009c32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	75fb      	strb	r3, [r7, #23]
 8009c30:	e001      	b.n	8009c36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c32:	230f      	movs	r3, #15
 8009c34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	785b      	ldrb	r3, [r3, #1]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d139      	bne.n	8009cd4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 030f 	and.w	r3, r3, #15
 8009c70:	2101      	movs	r1, #1
 8009c72:	fa01 f303 	lsl.w	r3, r1, r3
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	68f9      	ldr	r1, [r7, #12]
 8009c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d153      	bne.n	8009d40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	791b      	ldrb	r3, [r3, #4]
 8009cb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	059b      	lsls	r3, r3, #22
 8009cba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	0159      	lsls	r1, r3, #5
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	440b      	add	r3, r1
 8009cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4b20      	ldr	r3, [pc, #128]	; (8009d50 <USB_ActivateEndpoint+0x10c>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	600b      	str	r3, [r1, #0]
 8009cd2:	e035      	b.n	8009d40 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cda:	69da      	ldr	r2, [r3, #28]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	f003 030f 	and.w	r3, r3, #15
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cea:	041b      	lsls	r3, r3, #16
 8009cec:	68f9      	ldr	r1, [r7, #12]
 8009cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d119      	bne.n	8009d40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	791b      	ldrb	r3, [r3, #4]
 8009d26:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	0159      	lsls	r1, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	440b      	add	r3, r1
 8009d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <USB_ActivateEndpoint+0x10c>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	10008000 	.word	0x10008000

08009d54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d161      	bne.n	8009e34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	015a      	lsls	r2, r3, #5
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d86:	d11f      	bne.n	8009dc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009da6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	0151      	lsls	r1, r2, #5
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	440a      	add	r2, r1
 8009dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f003 030f 	and.w	r3, r3, #15
 8009dd8:	2101      	movs	r1, #1
 8009dda:	fa01 f303 	lsl.w	r3, r1, r3
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	43db      	mvns	r3, r3
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009de8:	4013      	ands	r3, r2
 8009dea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df2:	69da      	ldr	r2, [r3, #28]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	43db      	mvns	r3, r3
 8009e06:	68f9      	ldr	r1, [r7, #12]
 8009e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	0159      	lsls	r1, r3, #5
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	440b      	add	r3, r1
 8009e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <USB_DeactivateEndpoint+0x1b0>)
 8009e2e:	4013      	ands	r3, r2
 8009e30:	600b      	str	r3, [r1, #0]
 8009e32:	e060      	b.n	8009ef6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e4a:	d11f      	bne.n	8009e8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	0151      	lsls	r1, r2, #5
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	440a      	add	r2, r1
 8009e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea2:	041b      	lsls	r3, r3, #16
 8009ea4:	43db      	mvns	r3, r3
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eac:	4013      	ands	r3, r2
 8009eae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb6:	69da      	ldr	r2, [r3, #28]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	f003 030f 	and.w	r3, r3, #15
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec6:	041b      	lsls	r3, r3, #16
 8009ec8:	43db      	mvns	r3, r3
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	0159      	lsls	r1, r3, #5
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	440b      	add	r3, r1
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <USB_DeactivateEndpoint+0x1b4>)
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	ec337800 	.word	0xec337800
 8009f08:	eff37800 	.word	0xeff37800

08009f0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08a      	sub	sp, #40	; 0x28
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	4613      	mov	r3, r2
 8009f18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	785b      	ldrb	r3, [r3, #1]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	f040 8181 	bne.w	800a230 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d132      	bne.n	8009f9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f42:	691a      	ldr	r2, [r3, #16]
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	0159      	lsls	r1, r3, #5
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	440b      	add	r3, r1
 8009f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f50:	4619      	mov	r1, r3
 8009f52:	4ba5      	ldr	r3, [pc, #660]	; (800a1e8 <USB_EPStartXfer+0x2dc>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f84:	691a      	ldr	r2, [r3, #16]
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	0159      	lsls	r1, r3, #5
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	440b      	add	r3, r1
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f92:	4619      	mov	r1, r3
 8009f94:	4b95      	ldr	r3, [pc, #596]	; (800a1ec <USB_EPStartXfer+0x2e0>)
 8009f96:	4013      	ands	r3, r2
 8009f98:	610b      	str	r3, [r1, #16]
 8009f9a:	e092      	b.n	800a0c2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	691a      	ldr	r2, [r3, #16]
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	0159      	lsls	r1, r3, #5
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	440b      	add	r3, r1
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4b8c      	ldr	r3, [pc, #560]	; (800a1ec <USB_EPStartXfer+0x2e0>)
 8009fba:	4013      	ands	r3, r2
 8009fbc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	0159      	lsls	r1, r3, #5
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	440b      	add	r3, r1
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4b83      	ldr	r3, [pc, #524]	; (800a1e8 <USB_EPStartXfer+0x2dc>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d11a      	bne.n	800a01c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d903      	bls.n	8009ffa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	69fa      	ldr	r2, [r7, #28]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a018:	6113      	str	r3, [r2, #16]
 800a01a:	e01b      	b.n	800a054 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a028:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	6919      	ldr	r1, [r3, #16]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	440b      	add	r3, r1
 800a034:	1e59      	subs	r1, r3, #1
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a03e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a040:	4b6b      	ldr	r3, [pc, #428]	; (800a1f0 <USB_EPStartXfer+0x2e4>)
 800a042:	400b      	ands	r3, r1
 800a044:	69b9      	ldr	r1, [r7, #24]
 800a046:	0148      	lsls	r0, r1, #5
 800a048:	69f9      	ldr	r1, [r7, #28]
 800a04a:	4401      	add	r1, r0
 800a04c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a050:	4313      	orrs	r3, r2
 800a052:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a060:	691a      	ldr	r2, [r3, #16]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a06a:	69b9      	ldr	r1, [r7, #24]
 800a06c:	0148      	lsls	r0, r1, #5
 800a06e:	69f9      	ldr	r1, [r7, #28]
 800a070:	4401      	add	r1, r0
 800a072:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a076:	4313      	orrs	r3, r2
 800a078:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	791b      	ldrb	r3, [r3, #4]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d11f      	bne.n	800a0c2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a09c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a0a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	69fa      	ldr	r2, [r7, #28]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d14b      	bne.n	800a160 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d009      	beq.n	800a0e4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0dc:	461a      	mov	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	791b      	ldrb	r3, [r3, #4]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d128      	bne.n	800a13e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d110      	bne.n	800a11e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	0151      	lsls	r1, r2, #5
 800a10e:	69fa      	ldr	r2, [r7, #28]
 800a110:	440a      	add	r2, r1
 800a112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a116:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	e00f      	b.n	800a13e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	69fa      	ldr	r2, [r7, #28]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a13c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	69ba      	ldr	r2, [r7, #24]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a158:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	e16a      	b.n	800a436 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	0151      	lsls	r1, r2, #5
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	440a      	add	r2, r1
 800a176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a17a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a17e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	791b      	ldrb	r3, [r3, #4]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d015      	beq.n	800a1b4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 8152 	beq.w	800a436 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 030f 	and.w	r3, r3, #15
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a8:	69f9      	ldr	r1, [r7, #28]
 800a1aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	634b      	str	r3, [r1, #52]	; 0x34
 800a1b2:	e140      	b.n	800a436 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d117      	bne.n	800a1f4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	e016      	b.n	800a214 <USB_EPStartXfer+0x308>
 800a1e6:	bf00      	nop
 800a1e8:	e007ffff 	.word	0xe007ffff
 800a1ec:	fff80000 	.word	0xfff80000
 800a1f0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a20e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a212:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	68d9      	ldr	r1, [r3, #12]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	b298      	uxth	r0, r3
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	4603      	mov	r3, r0
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 f9b9 	bl	800a5a0 <USB_WritePacket>
 800a22e:	e102      	b.n	800a436 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23c:	691a      	ldr	r2, [r3, #16]
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	0159      	lsls	r1, r3, #5
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	440b      	add	r3, r1
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	4619      	mov	r1, r3
 800a24c:	4b7c      	ldr	r3, [pc, #496]	; (800a440 <USB_EPStartXfer+0x534>)
 800a24e:	4013      	ands	r3, r2
 800a250:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	0159      	lsls	r1, r3, #5
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	440b      	add	r3, r1
 800a268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26c:	4619      	mov	r1, r3
 800a26e:	4b75      	ldr	r3, [pc, #468]	; (800a444 <USB_EPStartXfer+0x538>)
 800a270:	4013      	ands	r3, r2
 800a272:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d12f      	bne.n	800a2da <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	689a      	ldr	r2, [r3, #8]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29e:	691a      	ldr	r2, [r3, #16]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2a8:	69b9      	ldr	r1, [r7, #24]
 800a2aa:	0148      	lsls	r0, r1, #5
 800a2ac:	69f9      	ldr	r1, [r7, #28]
 800a2ae:	4401      	add	r1, r0
 800a2b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	0151      	lsls	r1, r2, #5
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	440a      	add	r2, r1
 800a2ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2d6:	6113      	str	r3, [r2, #16]
 800a2d8:	e05f      	b.n	800a39a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d123      	bne.n	800a32a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2f8:	69b9      	ldr	r1, [r7, #24]
 800a2fa:	0148      	lsls	r0, r1, #5
 800a2fc:	69f9      	ldr	r1, [r7, #28]
 800a2fe:	4401      	add	r1, r0
 800a300:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a304:	4313      	orrs	r3, r2
 800a306:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	69fa      	ldr	r2, [r7, #28]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a326:	6113      	str	r3, [r2, #16]
 800a328:	e037      	b.n	800a39a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	691a      	ldr	r2, [r3, #16]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	4413      	add	r3, r2
 800a334:	1e5a      	subs	r2, r3, #1
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a33e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	8afa      	ldrh	r2, [r7, #22]
 800a346:	fb03 f202 	mul.w	r2, r3, r2
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	8afb      	ldrh	r3, [r7, #22]
 800a35e:	04d9      	lsls	r1, r3, #19
 800a360:	4b39      	ldr	r3, [pc, #228]	; (800a448 <USB_EPStartXfer+0x53c>)
 800a362:	400b      	ands	r3, r1
 800a364:	69b9      	ldr	r1, [r7, #24]
 800a366:	0148      	lsls	r0, r1, #5
 800a368:	69f9      	ldr	r1, [r7, #28]
 800a36a:	4401      	add	r1, r0
 800a36c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a370:	4313      	orrs	r3, r2
 800a372:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a380:	691a      	ldr	r2, [r3, #16]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a38a:	69b9      	ldr	r1, [r7, #24]
 800a38c:	0148      	lsls	r0, r1, #5
 800a38e:	69f9      	ldr	r1, [r7, #28]
 800a390:	4401      	add	r1, r0
 800a392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a396:	4313      	orrs	r3, r2
 800a398:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d10d      	bne.n	800a3bc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d009      	beq.n	800a3bc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	68d9      	ldr	r1, [r3, #12]
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b8:	460a      	mov	r2, r1
 800a3ba:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	791b      	ldrb	r3, [r3, #4]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d128      	bne.n	800a416 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d110      	bne.n	800a3f6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	0151      	lsls	r1, r2, #5
 800a3e6:	69fa      	ldr	r2, [r7, #28]
 800a3e8:	440a      	add	r2, r1
 800a3ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	e00f      	b.n	800a416 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	0151      	lsls	r1, r2, #5
 800a408:	69fa      	ldr	r2, [r7, #28]
 800a40a:	440a      	add	r2, r1
 800a40c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a414:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	fff80000 	.word	0xfff80000
 800a444:	e007ffff 	.word	0xe007ffff
 800a448:	1ff80000 	.word	0x1ff80000

0800a44c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	785b      	ldrb	r3, [r3, #1]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d14a      	bne.n	800a500 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	4413      	add	r3, r2
 800a474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a47e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a482:	f040 8086 	bne.w	800a592 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	7812      	ldrb	r2, [r2, #0]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	7812      	ldrb	r2, [r2, #0]
 800a4be:	0151      	lsls	r1, r2, #5
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	440a      	add	r2, r1
 800a4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d902      	bls.n	800a4e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4e2:	e056      	b.n	800a592 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4fc:	d0e7      	beq.n	800a4ce <USB_EPStopXfer+0x82>
 800a4fe:	e048      	b.n	800a592 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a518:	d13b      	bne.n	800a592 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	7812      	ldrb	r2, [r2, #0]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a53c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	7812      	ldrb	r2, [r2, #0]
 800a552:	0151      	lsls	r1, r2, #5
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	440a      	add	r2, r1
 800a558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a55c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	3301      	adds	r3, #1
 800a566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a56e:	4293      	cmp	r3, r2
 800a570:	d902      	bls.n	800a578 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	75fb      	strb	r3, [r7, #23]
          break;
 800a576:	e00c      	b.n	800a592 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a58c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a590:	d0e7      	beq.n	800a562 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a592:	7dfb      	ldrb	r3, [r7, #23]
}
 800a594:	4618      	mov	r0, r3
 800a596:	371c      	adds	r7, #28
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b089      	sub	sp, #36	; 0x24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	71fb      	strb	r3, [r7, #7]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d123      	bne.n	800a60e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5c6:	88bb      	ldrh	r3, [r7, #4]
 800a5c8:	3303      	adds	r3, #3
 800a5ca:	089b      	lsrs	r3, r3, #2
 800a5cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	e018      	b.n	800a606 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	031a      	lsls	r2, r3, #12
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	3301      	adds	r3, #1
 800a604:	61bb      	str	r3, [r7, #24]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d3e2      	bcc.n	800a5d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3724      	adds	r7, #36	; 0x24
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b08b      	sub	sp, #44	; 0x2c
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4613      	mov	r3, r2
 800a628:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a632:	88fb      	ldrh	r3, [r7, #6]
 800a634:	089b      	lsrs	r3, r3, #2
 800a636:	b29b      	uxth	r3, r3
 800a638:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	f003 0303 	and.w	r3, r3, #3
 800a640:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a642:	2300      	movs	r3, #0
 800a644:	623b      	str	r3, [r7, #32]
 800a646:	e014      	b.n	800a672 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	601a      	str	r2, [r3, #0]
    pDest++;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	3301      	adds	r3, #1
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	3301      	adds	r3, #1
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	3301      	adds	r3, #1
 800a664:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	3301      	adds	r3, #1
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	3301      	adds	r3, #1
 800a670:	623b      	str	r3, [r7, #32]
 800a672:	6a3a      	ldr	r2, [r7, #32]
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	429a      	cmp	r2, r3
 800a678:	d3e6      	bcc.n	800a648 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a67a:	8bfb      	ldrh	r3, [r7, #30]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01e      	beq.n	800a6be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68a:	461a      	mov	r2, r3
 800a68c:	f107 0310 	add.w	r3, r7, #16
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	701a      	strb	r2, [r3, #0]
      i++;
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a6b2:	8bfb      	ldrh	r3, [r7, #30]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6b8:	8bfb      	ldrh	r3, [r7, #30]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1ea      	bne.n	800a694 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	372c      	adds	r7, #44	; 0x2c
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	785b      	ldrb	r3, [r3, #1]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d12c      	bne.n	800a742 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	db12      	blt.n	800a720 <USB_EPSetStall+0x54>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00f      	beq.n	800a720 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a71e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a73a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	e02b      	b.n	800a79a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	db12      	blt.n	800a77a <USB_EPSetStall+0xae>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00f      	beq.n	800a77a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a774:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a778:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a798:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d128      	bne.n	800a816 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	791b      	ldrb	r3, [r3, #4]
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d003      	beq.n	800a7f4 <USB_EPClearStall+0x4c>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	791b      	ldrb	r3, [r3, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d138      	bne.n	800a866 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	0151      	lsls	r1, r2, #5
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	440a      	add	r2, r1
 800a80a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a80e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	e027      	b.n	800a866 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	0151      	lsls	r1, r2, #5
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	440a      	add	r2, r1
 800a82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a834:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	791b      	ldrb	r3, [r3, #4]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d003      	beq.n	800a846 <USB_EPClearStall+0x9e>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	791b      	ldrb	r3, [r3, #4]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d10f      	bne.n	800a866 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a864:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a892:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a896:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a8a8:	68f9      	ldr	r1, [r7, #12]
 800a8aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8da:	f023 0303 	bic.w	r3, r3, #3
 800a8de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ee:	f023 0302 	bic.w	r3, r3, #2
 800a8f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a930:	f043 0302 	orr.w	r3, r3, #2
 800a934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	4013      	ands	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a95c:	68fb      	ldr	r3, [r7, #12]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a986:	69db      	ldr	r3, [r3, #28]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4013      	ands	r3, r2
 800a98c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	0c1b      	lsrs	r3, r3, #16
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b085      	sub	sp, #20
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	b29b      	uxth	r3, r3
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa00:	68bb      	ldr	r3, [r7, #8]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b087      	sub	sp, #28
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	460b      	mov	r3, r1
 800aa18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	f003 030f 	and.w	r3, r3, #15
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa3e:	01db      	lsls	r3, r3, #7
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	f003 0301 	and.w	r3, r3, #1
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
	...

0800aa88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4b09      	ldr	r3, [pc, #36]	; (800aacc <USB_ActivateSetup+0x44>)
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aabc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	fffff800 	.word	0xfffff800

0800aad0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	460b      	mov	r3, r1
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	333c      	adds	r3, #60	; 0x3c
 800aae6:	3304      	adds	r3, #4
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	4a26      	ldr	r2, [pc, #152]	; (800ab88 <USB_EP0_OutStart+0xb8>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d90a      	bls.n	800ab0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab04:	d101      	bne.n	800ab0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	e037      	b.n	800ab7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab10:	461a      	mov	r2, r3
 800ab12:	2300      	movs	r3, #0
 800ab14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab38:	f043 0318 	orr.w	r3, r3, #24
 800ab3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d10f      	bne.n	800ab78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5e:	461a      	mov	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ab76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	4f54300a 	.word	0x4f54300a

0800ab8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	4a13      	ldr	r2, [pc, #76]	; (800abf0 <USB_CoreReset+0x64>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d901      	bls.n	800abaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e01b      	b.n	800abe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	daf2      	bge.n	800ab98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f043 0201 	orr.w	r2, r3, #1
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4a09      	ldr	r2, [pc, #36]	; (800abf0 <USB_CoreReset+0x64>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d901      	bls.n	800abd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e006      	b.n	800abe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d0f0      	beq.n	800abc2 <USB_CoreReset+0x36>

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	00030d40 	.word	0x00030d40

0800abf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac04:	f002 fcba 	bl	800d57c <USBD_static_malloc>
 800ac08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d109      	bne.n	800ac24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	32b0      	adds	r2, #176	; 0xb0
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac20:	2302      	movs	r3, #2
 800ac22:	e0d4      	b.n	800adce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac24:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ac28:	2100      	movs	r1, #0
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f005 faf0 	bl	8010210 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	32b0      	adds	r2, #176	; 0xb0
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	32b0      	adds	r2, #176	; 0xb0
 800ac4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	7c1b      	ldrb	r3, [r3, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d138      	bne.n	800acce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac5c:	4b5e      	ldr	r3, [pc, #376]	; (800add8 <USBD_CDC_Init+0x1e4>)
 800ac5e:	7819      	ldrb	r1, [r3, #0]
 800ac60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac64:	2202      	movs	r2, #2
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f002 fb65 	bl	800d336 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac6c:	4b5a      	ldr	r3, [pc, #360]	; (800add8 <USBD_CDC_Init+0x1e4>)
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	f003 020f 	and.w	r2, r3, #15
 800ac74:	6879      	ldr	r1, [r7, #4]
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	440b      	add	r3, r1
 800ac80:	3324      	adds	r3, #36	; 0x24
 800ac82:	2201      	movs	r2, #1
 800ac84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac86:	4b55      	ldr	r3, [pc, #340]	; (800addc <USBD_CDC_Init+0x1e8>)
 800ac88:	7819      	ldrb	r1, [r3, #0]
 800ac8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac8e:	2202      	movs	r2, #2
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f002 fb50 	bl	800d336 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac96:	4b51      	ldr	r3, [pc, #324]	; (800addc <USBD_CDC_Init+0x1e8>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f003 020f 	and.w	r2, r3, #15
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acae:	2201      	movs	r2, #1
 800acb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800acb2:	4b4b      	ldr	r3, [pc, #300]	; (800ade0 <USBD_CDC_Init+0x1ec>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	f003 020f 	and.w	r2, r3, #15
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	440b      	add	r3, r1
 800acc6:	3326      	adds	r3, #38	; 0x26
 800acc8:	2210      	movs	r2, #16
 800acca:	801a      	strh	r2, [r3, #0]
 800accc:	e035      	b.n	800ad3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acce:	4b42      	ldr	r3, [pc, #264]	; (800add8 <USBD_CDC_Init+0x1e4>)
 800acd0:	7819      	ldrb	r1, [r3, #0]
 800acd2:	2340      	movs	r3, #64	; 0x40
 800acd4:	2202      	movs	r2, #2
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f002 fb2d 	bl	800d336 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acdc:	4b3e      	ldr	r3, [pc, #248]	; (800add8 <USBD_CDC_Init+0x1e4>)
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	f003 020f 	and.w	r2, r3, #15
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	4613      	mov	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	440b      	add	r3, r1
 800acf0:	3324      	adds	r3, #36	; 0x24
 800acf2:	2201      	movs	r2, #1
 800acf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acf6:	4b39      	ldr	r3, [pc, #228]	; (800addc <USBD_CDC_Init+0x1e8>)
 800acf8:	7819      	ldrb	r1, [r3, #0]
 800acfa:	2340      	movs	r3, #64	; 0x40
 800acfc:	2202      	movs	r2, #2
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f002 fb19 	bl	800d336 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad04:	4b35      	ldr	r3, [pc, #212]	; (800addc <USBD_CDC_Init+0x1e8>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f003 020f 	and.w	r2, r3, #15
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	440b      	add	r3, r1
 800ad18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad20:	4b2f      	ldr	r3, [pc, #188]	; (800ade0 <USBD_CDC_Init+0x1ec>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	f003 020f 	and.w	r2, r3, #15
 800ad28:	6879      	ldr	r1, [r7, #4]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	440b      	add	r3, r1
 800ad34:	3326      	adds	r3, #38	; 0x26
 800ad36:	2210      	movs	r2, #16
 800ad38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad3a:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <USBD_CDC_Init+0x1ec>)
 800ad3c:	7819      	ldrb	r1, [r3, #0]
 800ad3e:	2308      	movs	r3, #8
 800ad40:	2203      	movs	r2, #3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f002 faf7 	bl	800d336 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad48:	4b25      	ldr	r3, [pc, #148]	; (800ade0 <USBD_CDC_Init+0x1ec>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	f003 020f 	and.w	r2, r3, #15
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	440b      	add	r3, r1
 800ad5c:	3324      	adds	r3, #36	; 0x24
 800ad5e:	2201      	movs	r2, #1
 800ad60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	33b0      	adds	r3, #176	; 0xb0
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e018      	b.n	800adce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	7c1b      	ldrb	r3, [r3, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ada4:	4b0d      	ldr	r3, [pc, #52]	; (800addc <USBD_CDC_Init+0x1e8>)
 800ada6:	7819      	ldrb	r1, [r3, #0]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f002 fbae 	bl	800d514 <USBD_LL_PrepareReceive>
 800adb8:	e008      	b.n	800adcc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800adba:	4b08      	ldr	r3, [pc, #32]	; (800addc <USBD_CDC_Init+0x1e8>)
 800adbc:	7819      	ldrb	r1, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adc4:	2340      	movs	r3, #64	; 0x40
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f002 fba4 	bl	800d514 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	24000097 	.word	0x24000097
 800addc:	24000098 	.word	0x24000098
 800ade0:	24000099 	.word	0x24000099

0800ade4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adf0:	4b3a      	ldr	r3, [pc, #232]	; (800aedc <USBD_CDC_DeInit+0xf8>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f002 fac3 	bl	800d382 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800adfc:	4b37      	ldr	r3, [pc, #220]	; (800aedc <USBD_CDC_DeInit+0xf8>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	f003 020f 	and.w	r2, r3, #15
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
 800ae10:	3324      	adds	r3, #36	; 0x24
 800ae12:	2200      	movs	r2, #0
 800ae14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae16:	4b32      	ldr	r3, [pc, #200]	; (800aee0 <USBD_CDC_DeInit+0xfc>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f002 fab0 	bl	800d382 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae22:	4b2f      	ldr	r3, [pc, #188]	; (800aee0 <USBD_CDC_DeInit+0xfc>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f003 020f 	and.w	r2, r3, #15
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae3e:	4b29      	ldr	r3, [pc, #164]	; (800aee4 <USBD_CDC_DeInit+0x100>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f002 fa9c 	bl	800d382 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae4a:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <USBD_CDC_DeInit+0x100>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	f003 020f 	and.w	r2, r3, #15
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	4613      	mov	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	440b      	add	r3, r1
 800ae5e:	3324      	adds	r3, #36	; 0x24
 800ae60:	2200      	movs	r2, #0
 800ae62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae64:	4b1f      	ldr	r3, [pc, #124]	; (800aee4 <USBD_CDC_DeInit+0x100>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	f003 020f 	and.w	r2, r3, #15
 800ae6c:	6879      	ldr	r1, [r7, #4]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	440b      	add	r3, r1
 800ae78:	3326      	adds	r3, #38	; 0x26
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	32b0      	adds	r2, #176	; 0xb0
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01f      	beq.n	800aed0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	33b0      	adds	r3, #176	; 0xb0
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	32b0      	adds	r2, #176	; 0xb0
 800aeae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f002 fb70 	bl	800d598 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	32b0      	adds	r2, #176	; 0xb0
 800aec2:	2100      	movs	r1, #0
 800aec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	24000097 	.word	0x24000097
 800aee0:	24000098 	.word	0x24000098
 800aee4:	24000099 	.word	0x24000099

0800aee8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	32b0      	adds	r2, #176	; 0xb0
 800aefc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	e0bf      	b.n	800b098 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af20:	2b00      	cmp	r3, #0
 800af22:	d050      	beq.n	800afc6 <USBD_CDC_Setup+0xde>
 800af24:	2b20      	cmp	r3, #32
 800af26:	f040 80af 	bne.w	800b088 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	88db      	ldrh	r3, [r3, #6]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d03a      	beq.n	800afa8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	b25b      	sxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	da1b      	bge.n	800af74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	33b0      	adds	r3, #176	; 0xb0
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	88d2      	ldrh	r2, [r2, #6]
 800af58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	88db      	ldrh	r3, [r3, #6]
 800af5e:	2b07      	cmp	r3, #7
 800af60:	bf28      	it	cs
 800af62:	2307      	movcs	r3, #7
 800af64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	89fa      	ldrh	r2, [r7, #14]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 fd89 	bl	800ca84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af72:	e090      	b.n	800b096 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	785a      	ldrb	r2, [r3, #1]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	88db      	ldrh	r3, [r3, #6]
 800af82:	2b3f      	cmp	r3, #63	; 0x3f
 800af84:	d803      	bhi.n	800af8e <USBD_CDC_Setup+0xa6>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	88db      	ldrh	r3, [r3, #6]
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	e000      	b.n	800af90 <USBD_CDC_Setup+0xa8>
 800af8e:	2240      	movs	r2, #64	; 0x40
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af96:	6939      	ldr	r1, [r7, #16]
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af9e:	461a      	mov	r2, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 fd9b 	bl	800cadc <USBD_CtlPrepareRx>
      break;
 800afa6:	e076      	b.n	800b096 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	33b0      	adds	r3, #176	; 0xb0
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	7850      	ldrb	r0, [r2, #1]
 800afbe:	2200      	movs	r2, #0
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	4798      	blx	r3
      break;
 800afc4:	e067      	b.n	800b096 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	785b      	ldrb	r3, [r3, #1]
 800afca:	2b0b      	cmp	r3, #11
 800afcc:	d851      	bhi.n	800b072 <USBD_CDC_Setup+0x18a>
 800afce:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <USBD_CDC_Setup+0xec>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800b005 	.word	0x0800b005
 800afd8:	0800b081 	.word	0x0800b081
 800afdc:	0800b073 	.word	0x0800b073
 800afe0:	0800b073 	.word	0x0800b073
 800afe4:	0800b073 	.word	0x0800b073
 800afe8:	0800b073 	.word	0x0800b073
 800afec:	0800b073 	.word	0x0800b073
 800aff0:	0800b073 	.word	0x0800b073
 800aff4:	0800b073 	.word	0x0800b073
 800aff8:	0800b073 	.word	0x0800b073
 800affc:	0800b02f 	.word	0x0800b02f
 800b000:	0800b059 	.word	0x0800b059
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d107      	bne.n	800b020 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b010:	f107 030a 	add.w	r3, r7, #10
 800b014:	2202      	movs	r2, #2
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fd33 	bl	800ca84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b01e:	e032      	b.n	800b086 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fcbd 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b028:	2303      	movs	r3, #3
 800b02a:	75fb      	strb	r3, [r7, #23]
          break;
 800b02c:	e02b      	b.n	800b086 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b03      	cmp	r3, #3
 800b038:	d107      	bne.n	800b04a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b03a:	f107 030d 	add.w	r3, r7, #13
 800b03e:	2201      	movs	r2, #1
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f001 fd1e 	bl	800ca84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b048:	e01d      	b.n	800b086 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 fca8 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b052:	2303      	movs	r3, #3
 800b054:	75fb      	strb	r3, [r7, #23]
          break;
 800b056:	e016      	b.n	800b086 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b03      	cmp	r3, #3
 800b062:	d00f      	beq.n	800b084 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f001 fc9b 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b06c:	2303      	movs	r3, #3
 800b06e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b070:	e008      	b.n	800b084 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 fc94 	bl	800c9a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b07a:	2303      	movs	r3, #3
 800b07c:	75fb      	strb	r3, [r7, #23]
          break;
 800b07e:	e002      	b.n	800b086 <USBD_CDC_Setup+0x19e>
          break;
 800b080:	bf00      	nop
 800b082:	e008      	b.n	800b096 <USBD_CDC_Setup+0x1ae>
          break;
 800b084:	bf00      	nop
      }
      break;
 800b086:	e006      	b.n	800b096 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f001 fc89 	bl	800c9a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b090:	2303      	movs	r3, #3
 800b092:	75fb      	strb	r3, [r7, #23]
      break;
 800b094:	bf00      	nop
  }

  return (uint8_t)ret;
 800b096:	7dfb      	ldrb	r3, [r7, #23]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	32b0      	adds	r2, #176	; 0xb0
 800b0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e065      	b.n	800b196 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	32b0      	adds	r2, #176	; 0xb0
 800b0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0da:	78fb      	ldrb	r3, [r7, #3]
 800b0dc:	f003 020f 	and.w	r2, r3, #15
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	440b      	add	r3, r1
 800b0ec:	3318      	adds	r3, #24
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d02f      	beq.n	800b154 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0f4:	78fb      	ldrb	r3, [r7, #3]
 800b0f6:	f003 020f 	and.w	r2, r3, #15
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	440b      	add	r3, r1
 800b106:	3318      	adds	r3, #24
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	78fb      	ldrb	r3, [r7, #3]
 800b10c:	f003 010f 	and.w	r1, r3, #15
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	460b      	mov	r3, r1
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	440b      	add	r3, r1
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4403      	add	r3, r0
 800b11c:	3344      	adds	r3, #68	; 0x44
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	fbb2 f1f3 	udiv	r1, r2, r3
 800b124:	fb01 f303 	mul.w	r3, r1, r3
 800b128:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d112      	bne.n	800b154 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b12e:	78fb      	ldrb	r3, [r7, #3]
 800b130:	f003 020f 	and.w	r2, r3, #15
 800b134:	6879      	ldr	r1, [r7, #4]
 800b136:	4613      	mov	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	440b      	add	r3, r1
 800b140:	3318      	adds	r3, #24
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b146:	78f9      	ldrb	r1, [r7, #3]
 800b148:	2300      	movs	r3, #0
 800b14a:	2200      	movs	r2, #0
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f002 f9c0 	bl	800d4d2 <USBD_LL_Transmit>
 800b152:	e01f      	b.n	800b194 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2200      	movs	r2, #0
 800b158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	33b0      	adds	r3, #176	; 0xb0
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d010      	beq.n	800b194 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	33b0      	adds	r3, #176	; 0xb0
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b190:	78fa      	ldrb	r2, [r7, #3]
 800b192:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	32b0      	adds	r2, #176	; 0xb0
 800b1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	32b0      	adds	r2, #176	; 0xb0
 800b1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e01a      	b.n	800b206 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f002 f9be 	bl	800d556 <USBD_LL_GetRxDataSize>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	33b0      	adds	r3, #176	; 0xb0
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b200:	4611      	mov	r1, r2
 800b202:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	32b0      	adds	r2, #176	; 0xb0
 800b220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b224:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e025      	b.n	800b27c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	33b0      	adds	r3, #176	; 0xb0
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d01a      	beq.n	800b27a <USBD_CDC_EP0_RxReady+0x6c>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b24a:	2bff      	cmp	r3, #255	; 0xff
 800b24c:	d015      	beq.n	800b27a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	33b0      	adds	r3, #176	; 0xb0
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b266:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b26e:	b292      	uxth	r2, r2
 800b270:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	22ff      	movs	r2, #255	; 0xff
 800b276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b28c:	2182      	movs	r1, #130	; 0x82
 800b28e:	4818      	ldr	r0, [pc, #96]	; (800b2f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b290:	f000 fd4f 	bl	800bd32 <USBD_GetEpDesc>
 800b294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b296:	2101      	movs	r1, #1
 800b298:	4815      	ldr	r0, [pc, #84]	; (800b2f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b29a:	f000 fd4a 	bl	800bd32 <USBD_GetEpDesc>
 800b29e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2a0:	2181      	movs	r1, #129	; 0x81
 800b2a2:	4813      	ldr	r0, [pc, #76]	; (800b2f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2a4:	f000 fd45 	bl	800bd32 <USBD_GetEpDesc>
 800b2a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2210      	movs	r2, #16
 800b2b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d006      	beq.n	800b2ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2c4:	711a      	strb	r2, [r3, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d006      	beq.n	800b2de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2d8:	711a      	strb	r2, [r3, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2243      	movs	r2, #67	; 0x43
 800b2e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	24000054 	.word	0x24000054

0800b2f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2fc:	2182      	movs	r1, #130	; 0x82
 800b2fe:	4818      	ldr	r0, [pc, #96]	; (800b360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b300:	f000 fd17 	bl	800bd32 <USBD_GetEpDesc>
 800b304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b306:	2101      	movs	r1, #1
 800b308:	4815      	ldr	r0, [pc, #84]	; (800b360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b30a:	f000 fd12 	bl	800bd32 <USBD_GetEpDesc>
 800b30e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b310:	2181      	movs	r1, #129	; 0x81
 800b312:	4813      	ldr	r0, [pc, #76]	; (800b360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b314:	f000 fd0d 	bl	800bd32 <USBD_GetEpDesc>
 800b318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2210      	movs	r2, #16
 800b324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d006      	beq.n	800b33a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2200      	movs	r2, #0
 800b330:	711a      	strb	r2, [r3, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f042 0202 	orr.w	r2, r2, #2
 800b338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d006      	beq.n	800b34e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	711a      	strb	r2, [r3, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	f042 0202 	orr.w	r2, r2, #2
 800b34c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2243      	movs	r2, #67	; 0x43
 800b352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b354:	4b02      	ldr	r3, [pc, #8]	; (800b360 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	24000054 	.word	0x24000054

0800b364 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b36c:	2182      	movs	r1, #130	; 0x82
 800b36e:	4818      	ldr	r0, [pc, #96]	; (800b3d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b370:	f000 fcdf 	bl	800bd32 <USBD_GetEpDesc>
 800b374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b376:	2101      	movs	r1, #1
 800b378:	4815      	ldr	r0, [pc, #84]	; (800b3d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b37a:	f000 fcda 	bl	800bd32 <USBD_GetEpDesc>
 800b37e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b380:	2181      	movs	r1, #129	; 0x81
 800b382:	4813      	ldr	r0, [pc, #76]	; (800b3d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b384:	f000 fcd5 	bl	800bd32 <USBD_GetEpDesc>
 800b388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	2210      	movs	r2, #16
 800b394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d006      	beq.n	800b3aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3a4:	711a      	strb	r2, [r3, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d006      	beq.n	800b3be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3b8:	711a      	strb	r2, [r3, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2243      	movs	r2, #67	; 0x43
 800b3c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3c4:	4b02      	ldr	r3, [pc, #8]	; (800b3d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	24000054 	.word	0x24000054

0800b3d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	220a      	movs	r2, #10
 800b3e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3e2:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	24000010 	.word	0x24000010

0800b3f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b404:	2303      	movs	r3, #3
 800b406:	e009      	b.n	800b41c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	33b0      	adds	r3, #176	; 0xb0
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	32b0      	adds	r2, #176	; 0xb0
 800b43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b442:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e008      	b.n	800b460 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	371c      	adds	r7, #28
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	32b0      	adds	r2, #176	; 0xb0
 800b480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b484:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e004      	b.n	800b49a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
	...

0800b4a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	32b0      	adds	r2, #176	; 0xb0
 800b4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	e025      	b.n	800b51a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d11f      	bne.n	800b518 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4e0:	4b10      	ldr	r3, [pc, #64]	; (800b524 <USBD_CDC_TransmitPacket+0x7c>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	f003 020f 	and.w	r2, r3, #15
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4403      	add	r3, r0
 800b4fa:	3318      	adds	r3, #24
 800b4fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4fe:	4b09      	ldr	r3, [pc, #36]	; (800b524 <USBD_CDC_TransmitPacket+0x7c>)
 800b500:	7819      	ldrb	r1, [r3, #0]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 ffdf 	bl	800d4d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	24000097 	.word	0x24000097

0800b528 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	32b0      	adds	r2, #176	; 0xb0
 800b53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	32b0      	adds	r2, #176	; 0xb0
 800b54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	e018      	b.n	800b588 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	7c1b      	ldrb	r3, [r3, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b55e:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <USBD_CDC_ReceivePacket+0x68>)
 800b560:	7819      	ldrb	r1, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 ffd1 	bl	800d514 <USBD_LL_PrepareReceive>
 800b572:	e008      	b.n	800b586 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b574:	4b06      	ldr	r3, [pc, #24]	; (800b590 <USBD_CDC_ReceivePacket+0x68>)
 800b576:	7819      	ldrb	r1, [r3, #0]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 ffc7 	bl	800d514 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	24000098 	.word	0x24000098

0800b594 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d101      	bne.n	800b5ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e01f      	b.n	800b5ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	79fa      	ldrb	r2, [r7, #7]
 800b5de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f001 fe3d 	bl	800d260 <USBD_LL_Init>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b608:	2303      	movs	r3, #3
 800b60a:	e025      	b.n	800b658 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	32ae      	adds	r2, #174	; 0xae
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00f      	beq.n	800b648 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	32ae      	adds	r2, #174	; 0xae
 800b632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	f107 020e 	add.w	r2, r7, #14
 800b63c:	4610      	mov	r0, r2
 800b63e:	4798      	blx	r3
 800b640:	4602      	mov	r2, r0
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 fe49 	bl	800d300 <USBD_LL_Start>
 800b66e:	4603      	mov	r3, r0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b680:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b682:	4618      	mov	r0, r3
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	460b      	mov	r3, r1
 800b698:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d009      	beq.n	800b6bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	78fa      	ldrb	r2, [r7, #3]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	4798      	blx	r3
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	78fa      	ldrb	r2, [r7, #3]
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	4798      	blx	r3
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 f90e 	bl	800c92e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b720:	461a      	mov	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b72e:	f003 031f 	and.w	r3, r3, #31
 800b732:	2b02      	cmp	r3, #2
 800b734:	d01a      	beq.n	800b76c <USBD_LL_SetupStage+0x72>
 800b736:	2b02      	cmp	r3, #2
 800b738:	d822      	bhi.n	800b780 <USBD_LL_SetupStage+0x86>
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <USBD_LL_SetupStage+0x4a>
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d00a      	beq.n	800b758 <USBD_LL_SetupStage+0x5e>
 800b742:	e01d      	b.n	800b780 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fb65 	bl	800be1c <USBD_StdDevReq>
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]
      break;
 800b756:	e020      	b.n	800b79a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fbcd 	bl	800bf00 <USBD_StdItfReq>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
      break;
 800b76a:	e016      	b.n	800b79a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fc2f 	bl	800bfd8 <USBD_StdEPReq>
 800b77a:	4603      	mov	r3, r0
 800b77c:	73fb      	strb	r3, [r7, #15]
      break;
 800b77e:	e00c      	b.n	800b79a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b786:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	4619      	mov	r1, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 fe16 	bl	800d3c0 <USBD_LL_StallEP>
 800b794:	4603      	mov	r3, r0
 800b796:	73fb      	strb	r3, [r7, #15]
      break;
 800b798:	bf00      	nop
  }

  return ret;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	607a      	str	r2, [r7, #4]
 800b7b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b7b6:	7afb      	ldrb	r3, [r7, #11]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d16e      	bne.n	800b89a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	f040 8098 	bne.w	800b900 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	689a      	ldr	r2, [r3, #8]
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d913      	bls.n	800b804 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	1ad2      	subs	r2, r2, r3
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	68da      	ldr	r2, [r3, #12]
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	bf28      	it	cs
 800b7f6:	4613      	movcs	r3, r2
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	6879      	ldr	r1, [r7, #4]
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f001 f98a 	bl	800cb16 <USBD_CtlContinueRx>
 800b802:	e07d      	b.n	800b900 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b80a:	f003 031f 	and.w	r3, r3, #31
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d014      	beq.n	800b83c <USBD_LL_DataOutStage+0x98>
 800b812:	2b02      	cmp	r3, #2
 800b814:	d81d      	bhi.n	800b852 <USBD_LL_DataOutStage+0xae>
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <USBD_LL_DataOutStage+0x7c>
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d003      	beq.n	800b826 <USBD_LL_DataOutStage+0x82>
 800b81e:	e018      	b.n	800b852 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	75bb      	strb	r3, [r7, #22]
            break;
 800b824:	e018      	b.n	800b858 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	4619      	mov	r1, r3
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 fa64 	bl	800bcfe <USBD_CoreFindIF>
 800b836:	4603      	mov	r3, r0
 800b838:	75bb      	strb	r3, [r7, #22]
            break;
 800b83a:	e00d      	b.n	800b858 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b842:	b2db      	uxtb	r3, r3
 800b844:	4619      	mov	r1, r3
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f000 fa66 	bl	800bd18 <USBD_CoreFindEP>
 800b84c:	4603      	mov	r3, r0
 800b84e:	75bb      	strb	r3, [r7, #22]
            break;
 800b850:	e002      	b.n	800b858 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b852:	2300      	movs	r3, #0
 800b854:	75bb      	strb	r3, [r7, #22]
            break;
 800b856:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b858:	7dbb      	ldrb	r3, [r7, #22]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d119      	bne.n	800b892 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b03      	cmp	r3, #3
 800b868:	d113      	bne.n	800b892 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b86a:	7dba      	ldrb	r2, [r7, #22]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	32ae      	adds	r2, #174	; 0xae
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00b      	beq.n	800b892 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b87a:	7dba      	ldrb	r2, [r7, #22]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b882:	7dba      	ldrb	r2, [r7, #22]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	32ae      	adds	r2, #174	; 0xae
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f001 f950 	bl	800cb38 <USBD_CtlSendStatus>
 800b898:	e032      	b.n	800b900 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b89a:	7afb      	ldrb	r3, [r7, #11]
 800b89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 fa37 	bl	800bd18 <USBD_CoreFindEP>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8ae:	7dbb      	ldrb	r3, [r7, #22]
 800b8b0:	2bff      	cmp	r3, #255	; 0xff
 800b8b2:	d025      	beq.n	800b900 <USBD_LL_DataOutStage+0x15c>
 800b8b4:	7dbb      	ldrb	r3, [r7, #22]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d122      	bne.n	800b900 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d117      	bne.n	800b8f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8c6:	7dba      	ldrb	r2, [r7, #22]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	32ae      	adds	r2, #174	; 0xae
 800b8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00f      	beq.n	800b8f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8d6:	7dba      	ldrb	r2, [r7, #22]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8de:	7dba      	ldrb	r2, [r7, #22]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	32ae      	adds	r2, #174	; 0xae
 800b8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	7afa      	ldrb	r2, [r7, #11]
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	4798      	blx	r3
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	e000      	b.n	800b902 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b086      	sub	sp, #24
 800b90e:	af00      	add	r7, sp, #0
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	460b      	mov	r3, r1
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d16f      	bne.n	800b9fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3314      	adds	r3, #20
 800b922:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d15a      	bne.n	800b9e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	429a      	cmp	r2, r3
 800b938:	d914      	bls.n	800b964 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	689a      	ldr	r2, [r3, #8]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	1ad2      	subs	r2, r2, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	461a      	mov	r2, r3
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f001 f8b2 	bl	800caba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b956:	2300      	movs	r3, #0
 800b958:	2200      	movs	r2, #0
 800b95a:	2100      	movs	r1, #0
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f001 fdd9 	bl	800d514 <USBD_LL_PrepareReceive>
 800b962:	e03f      	b.n	800b9e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d11c      	bne.n	800b9aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	685a      	ldr	r2, [r3, #4]
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b978:	429a      	cmp	r2, r3
 800b97a:	d316      	bcc.n	800b9aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b986:	429a      	cmp	r2, r3
 800b988:	d20f      	bcs.n	800b9aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b98a:	2200      	movs	r2, #0
 800b98c:	2100      	movs	r1, #0
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f001 f893 	bl	800caba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b99c:	2300      	movs	r3, #0
 800b99e:	2200      	movs	r2, #0
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f001 fdb6 	bl	800d514 <USBD_LL_PrepareReceive>
 800b9a8:	e01c      	b.n	800b9e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d10f      	bne.n	800b9d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d009      	beq.n	800b9d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d6:	2180      	movs	r1, #128	; 0x80
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f001 fcf1 	bl	800d3c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f001 f8bd 	bl	800cb5e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d03a      	beq.n	800ba64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f7ff fe42 	bl	800b678 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b9fc:	e032      	b.n	800ba64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	4619      	mov	r1, r3
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f985 	bl	800bd18 <USBD_CoreFindEP>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	2bff      	cmp	r3, #255	; 0xff
 800ba16:	d025      	beq.n	800ba64 <USBD_LL_DataInStage+0x15a>
 800ba18:	7dfb      	ldrb	r3, [r7, #23]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d122      	bne.n	800ba64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d11c      	bne.n	800ba64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba2a:	7dfa      	ldrb	r2, [r7, #23]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	32ae      	adds	r2, #174	; 0xae
 800ba30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d014      	beq.n	800ba64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba3a:	7dfa      	ldrb	r2, [r7, #23]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba42:	7dfa      	ldrb	r2, [r7, #23]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	32ae      	adds	r2, #174	; 0xae
 800ba48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	7afa      	ldrb	r2, [r7, #11]
 800ba50:	4611      	mov	r1, r2
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	4798      	blx	r3
 800ba56:	4603      	mov	r3, r0
 800ba58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba5a:	7dbb      	ldrb	r3, [r7, #22]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba60:	7dbb      	ldrb	r3, [r7, #22]
 800ba62:	e000      	b.n	800ba66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d014      	beq.n	800bad4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00e      	beq.n	800bad4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	6852      	ldr	r2, [r2, #4]
 800bac2:	b2d2      	uxtb	r2, r2
 800bac4:	4611      	mov	r1, r2
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	4798      	blx	r3
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d001      	beq.n	800bad4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bad0:	2303      	movs	r3, #3
 800bad2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bad4:	2340      	movs	r3, #64	; 0x40
 800bad6:	2200      	movs	r2, #0
 800bad8:	2100      	movs	r1, #0
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f001 fc2b 	bl	800d336 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2240      	movs	r2, #64	; 0x40
 800baec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baf0:	2340      	movs	r3, #64	; 0x40
 800baf2:	2200      	movs	r2, #0
 800baf4:	2180      	movs	r1, #128	; 0x80
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f001 fc1d 	bl	800d336 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2240      	movs	r2, #64	; 0x40
 800bb06:	621a      	str	r2, [r3, #32]

  return ret;
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	78fa      	ldrb	r2, [r7, #3]
 800bb22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b083      	sub	sp, #12
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d006      	beq.n	800bb54 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2204      	movs	r2, #4
 800bb58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b04      	cmp	r3, #4
 800bb7c:	d106      	bne.n	800bb8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d110      	bne.n	800bbd0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d005      	beq.n	800bbd0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbca:	69db      	ldr	r3, [r3, #28]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	32ae      	adds	r2, #174	; 0xae
 800bbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d101      	bne.n	800bbfc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e01c      	b.n	800bc36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d115      	bne.n	800bc34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	32ae      	adds	r2, #174	; 0xae
 800bc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc16:	6a1b      	ldr	r3, [r3, #32]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	32ae      	adds	r2, #174	; 0xae
 800bc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2a:	6a1b      	ldr	r3, [r3, #32]
 800bc2c:	78fa      	ldrb	r2, [r7, #3]
 800bc2e:	4611      	mov	r1, r2
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	460b      	mov	r3, r1
 800bc48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	32ae      	adds	r2, #174	; 0xae
 800bc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e01c      	b.n	800bc9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b03      	cmp	r3, #3
 800bc6a:	d115      	bne.n	800bc98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	32ae      	adds	r2, #174	; 0xae
 800bc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	32ae      	adds	r2, #174	; 0xae
 800bc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	78fa      	ldrb	r2, [r7, #3]
 800bc92:	4611      	mov	r1, r2
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00e      	beq.n	800bcf4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	6852      	ldr	r2, [r2, #4]
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	4611      	mov	r1, r2
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d001      	beq.n	800bcf4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	885b      	ldrh	r3, [r3, #2]
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d920      	bls.n	800bd9c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd62:	e013      	b.n	800bd8c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd64:	f107 030a 	add.w	r3, r7, #10
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6978      	ldr	r0, [r7, #20]
 800bd6c:	f000 f81b 	bl	800bda6 <USBD_GetNextDesc>
 800bd70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	785b      	ldrb	r3, [r3, #1]
 800bd76:	2b05      	cmp	r3, #5
 800bd78:	d108      	bne.n	800bd8c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	789b      	ldrb	r3, [r3, #2]
 800bd82:	78fa      	ldrb	r2, [r7, #3]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d008      	beq.n	800bd9a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	885b      	ldrh	r3, [r3, #2]
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	897b      	ldrh	r3, [r7, #10]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d8e5      	bhi.n	800bd64 <USBD_GetEpDesc+0x32>
 800bd98:	e000      	b.n	800bd9c <USBD_GetEpDesc+0x6a>
          break;
 800bd9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd9c:	693b      	ldr	r3, [r7, #16]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bda6:	b480      	push	{r7}
 800bda8:	b085      	sub	sp, #20
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	881a      	ldrh	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	4413      	add	r3, r2
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4413      	add	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdfe:	8a3b      	ldrh	r3, [r7, #16]
 800be00:	021b      	lsls	r3, r3, #8
 800be02:	b21a      	sxth	r2, r3
 800be04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be08:	4313      	orrs	r3, r2
 800be0a:	b21b      	sxth	r3, r3
 800be0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be0e:	89fb      	ldrh	r3, [r7, #14]
}
 800be10:	4618      	mov	r0, r3
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be32:	2b40      	cmp	r3, #64	; 0x40
 800be34:	d005      	beq.n	800be42 <USBD_StdDevReq+0x26>
 800be36:	2b40      	cmp	r3, #64	; 0x40
 800be38:	d857      	bhi.n	800beea <USBD_StdDevReq+0xce>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00f      	beq.n	800be5e <USBD_StdDevReq+0x42>
 800be3e:	2b20      	cmp	r3, #32
 800be40:	d153      	bne.n	800beea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	32ae      	adds	r2, #174	; 0xae
 800be4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
      break;
 800be5c:	e04a      	b.n	800bef4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	785b      	ldrb	r3, [r3, #1]
 800be62:	2b09      	cmp	r3, #9
 800be64:	d83b      	bhi.n	800bede <USBD_StdDevReq+0xc2>
 800be66:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <USBD_StdDevReq+0x50>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800bec1 	.word	0x0800bec1
 800be70:	0800bed5 	.word	0x0800bed5
 800be74:	0800bedf 	.word	0x0800bedf
 800be78:	0800becb 	.word	0x0800becb
 800be7c:	0800bedf 	.word	0x0800bedf
 800be80:	0800be9f 	.word	0x0800be9f
 800be84:	0800be95 	.word	0x0800be95
 800be88:	0800bedf 	.word	0x0800bedf
 800be8c:	0800beb7 	.word	0x0800beb7
 800be90:	0800bea9 	.word	0x0800bea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa3c 	bl	800c314 <USBD_GetDescriptor>
          break;
 800be9c:	e024      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fba1 	bl	800c5e8 <USBD_SetAddress>
          break;
 800bea6:	e01f      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fbe0 	bl	800c670 <USBD_SetConfig>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
          break;
 800beb4:	e018      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fc83 	bl	800c7c4 <USBD_GetConfig>
          break;
 800bebe:	e013      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcb4 	bl	800c830 <USBD_GetStatus>
          break;
 800bec8:	e00e      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fce3 	bl	800c898 <USBD_SetFeature>
          break;
 800bed2:	e009      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fd07 	bl	800c8ea <USBD_ClrFeature>
          break;
 800bedc:	e004      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fd5e 	bl	800c9a2 <USBD_CtlError>
          break;
 800bee6:	bf00      	nop
      }
      break;
 800bee8:	e004      	b.n	800bef4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fd58 	bl	800c9a2 <USBD_CtlError>
      break;
 800bef2:	bf00      	nop
  }

  return ret;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop

0800bf00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf16:	2b40      	cmp	r3, #64	; 0x40
 800bf18:	d005      	beq.n	800bf26 <USBD_StdItfReq+0x26>
 800bf1a:	2b40      	cmp	r3, #64	; 0x40
 800bf1c:	d852      	bhi.n	800bfc4 <USBD_StdItfReq+0xc4>
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <USBD_StdItfReq+0x26>
 800bf22:	2b20      	cmp	r3, #32
 800bf24:	d14e      	bne.n	800bfc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d840      	bhi.n	800bfb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	889b      	ldrh	r3, [r3, #4]
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d836      	bhi.n	800bfac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	889b      	ldrh	r3, [r3, #4]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fed9 	bl	800bcfe <USBD_CoreFindIF>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	2bff      	cmp	r3, #255	; 0xff
 800bf54:	d01d      	beq.n	800bf92 <USBD_StdItfReq+0x92>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11a      	bne.n	800bf92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf5c:	7bba      	ldrb	r2, [r7, #14]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	32ae      	adds	r2, #174	; 0xae
 800bf62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00f      	beq.n	800bf8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf6c:	7bba      	ldrb	r2, [r7, #14]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf74:	7bba      	ldrb	r2, [r7, #14]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	32ae      	adds	r2, #174	; 0xae
 800bf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	4798      	blx	r3
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf8a:	e004      	b.n	800bf96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf90:	e001      	b.n	800bf96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	88db      	ldrh	r3, [r3, #6]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d110      	bne.n	800bfc0 <USBD_StdItfReq+0xc0>
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10d      	bne.n	800bfc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fdc7 	bl	800cb38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfaa:	e009      	b.n	800bfc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fcf7 	bl	800c9a2 <USBD_CtlError>
          break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fcf2 	bl	800c9a2 <USBD_CtlError>
          break;
 800bfbe:	e000      	b.n	800bfc2 <USBD_StdItfReq+0xc2>
          break;
 800bfc0:	bf00      	nop
      }
      break;
 800bfc2:	e004      	b.n	800bfce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fceb 	bl	800c9a2 <USBD_CtlError>
      break;
 800bfcc:	bf00      	nop
  }

  return ret;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	889b      	ldrh	r3, [r3, #4]
 800bfea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bff4:	2b40      	cmp	r3, #64	; 0x40
 800bff6:	d007      	beq.n	800c008 <USBD_StdEPReq+0x30>
 800bff8:	2b40      	cmp	r3, #64	; 0x40
 800bffa:	f200 817f 	bhi.w	800c2fc <USBD_StdEPReq+0x324>
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d02a      	beq.n	800c058 <USBD_StdEPReq+0x80>
 800c002:	2b20      	cmp	r3, #32
 800c004:	f040 817a 	bne.w	800c2fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff fe83 	bl	800bd18 <USBD_CoreFindEP>
 800c012:	4603      	mov	r3, r0
 800c014:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c016:	7b7b      	ldrb	r3, [r7, #13]
 800c018:	2bff      	cmp	r3, #255	; 0xff
 800c01a:	f000 8174 	beq.w	800c306 <USBD_StdEPReq+0x32e>
 800c01e:	7b7b      	ldrb	r3, [r7, #13]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f040 8170 	bne.w	800c306 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c026:	7b7a      	ldrb	r2, [r7, #13]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c02e:	7b7a      	ldrb	r2, [r7, #13]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	32ae      	adds	r2, #174	; 0xae
 800c034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 8163 	beq.w	800c306 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c040:	7b7a      	ldrb	r2, [r7, #13]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	32ae      	adds	r2, #174	; 0xae
 800c046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	4798      	blx	r3
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c056:	e156      	b.n	800c306 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	785b      	ldrb	r3, [r3, #1]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d008      	beq.n	800c072 <USBD_StdEPReq+0x9a>
 800c060:	2b03      	cmp	r3, #3
 800c062:	f300 8145 	bgt.w	800c2f0 <USBD_StdEPReq+0x318>
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 809b 	beq.w	800c1a2 <USBD_StdEPReq+0x1ca>
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d03c      	beq.n	800c0ea <USBD_StdEPReq+0x112>
 800c070:	e13e      	b.n	800c2f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d002      	beq.n	800c084 <USBD_StdEPReq+0xac>
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d016      	beq.n	800c0b0 <USBD_StdEPReq+0xd8>
 800c082:	e02c      	b.n	800c0de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00d      	beq.n	800c0a6 <USBD_StdEPReq+0xce>
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	2b80      	cmp	r3, #128	; 0x80
 800c08e:	d00a      	beq.n	800c0a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 f993 	bl	800d3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c09a:	2180      	movs	r1, #128	; 0x80
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 f98f 	bl	800d3c0 <USBD_LL_StallEP>
 800c0a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0a4:	e020      	b.n	800c0e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fc7a 	bl	800c9a2 <USBD_CtlError>
              break;
 800c0ae:	e01b      	b.n	800c0e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	885b      	ldrh	r3, [r3, #2]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10e      	bne.n	800c0d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00b      	beq.n	800c0d6 <USBD_StdEPReq+0xfe>
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b80      	cmp	r3, #128	; 0x80
 800c0c2:	d008      	beq.n	800c0d6 <USBD_StdEPReq+0xfe>
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	88db      	ldrh	r3, [r3, #6]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f001 f975 	bl	800d3c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fd2e 	bl	800cb38 <USBD_CtlSendStatus>

              break;
 800c0dc:	e004      	b.n	800c0e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc5e 	bl	800c9a2 <USBD_CtlError>
              break;
 800c0e6:	bf00      	nop
          }
          break;
 800c0e8:	e107      	b.n	800c2fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d002      	beq.n	800c0fc <USBD_StdEPReq+0x124>
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	d016      	beq.n	800c128 <USBD_StdEPReq+0x150>
 800c0fa:	e04b      	b.n	800c194 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00d      	beq.n	800c11e <USBD_StdEPReq+0x146>
 800c102:	7bbb      	ldrb	r3, [r7, #14]
 800c104:	2b80      	cmp	r3, #128	; 0x80
 800c106:	d00a      	beq.n	800c11e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 f957 	bl	800d3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c112:	2180      	movs	r1, #128	; 0x80
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f001 f953 	bl	800d3c0 <USBD_LL_StallEP>
 800c11a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c11c:	e040      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fc3e 	bl	800c9a2 <USBD_CtlError>
              break;
 800c126:	e03b      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	885b      	ldrh	r3, [r3, #2]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d136      	bne.n	800c19e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c136:	2b00      	cmp	r3, #0
 800c138:	d004      	beq.n	800c144 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f001 f95d 	bl	800d3fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fcf7 	bl	800cb38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fde2 	bl	800bd18 <USBD_CoreFindEP>
 800c154:	4603      	mov	r3, r0
 800c156:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c158:	7b7b      	ldrb	r3, [r7, #13]
 800c15a:	2bff      	cmp	r3, #255	; 0xff
 800c15c:	d01f      	beq.n	800c19e <USBD_StdEPReq+0x1c6>
 800c15e:	7b7b      	ldrb	r3, [r7, #13]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11c      	bne.n	800c19e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c164:	7b7a      	ldrb	r2, [r7, #13]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c16c:	7b7a      	ldrb	r2, [r7, #13]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	32ae      	adds	r2, #174	; 0xae
 800c172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d010      	beq.n	800c19e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c17c:	7b7a      	ldrb	r2, [r7, #13]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32ae      	adds	r2, #174	; 0xae
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	4798      	blx	r3
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c192:	e004      	b.n	800c19e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c194:	6839      	ldr	r1, [r7, #0]
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fc03 	bl	800c9a2 <USBD_CtlError>
              break;
 800c19c:	e000      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>
              break;
 800c19e:	bf00      	nop
          }
          break;
 800c1a0:	e0ab      	b.n	800c2fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d002      	beq.n	800c1b4 <USBD_StdEPReq+0x1dc>
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d032      	beq.n	800c218 <USBD_StdEPReq+0x240>
 800c1b2:	e097      	b.n	800c2e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d007      	beq.n	800c1ca <USBD_StdEPReq+0x1f2>
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	2b80      	cmp	r3, #128	; 0x80
 800c1be:	d004      	beq.n	800c1ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fbed 	bl	800c9a2 <USBD_CtlError>
                break;
 800c1c8:	e091      	b.n	800c2ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da0b      	bge.n	800c1ea <USBD_StdEPReq+0x212>
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	3310      	adds	r3, #16
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	e00b      	b.n	800c202 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	4413      	add	r3, r2
 800c200:	3304      	adds	r3, #4
 800c202:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2202      	movs	r2, #2
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fc37 	bl	800ca84 <USBD_CtlSendData>
              break;
 800c216:	e06a      	b.n	800c2ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	da11      	bge.n	800c244 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	f003 020f 	and.w	r2, r3, #15
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	4613      	mov	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	3324      	adds	r3, #36	; 0x24
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d117      	bne.n	800c26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fbb0 	bl	800c9a2 <USBD_CtlError>
                  break;
 800c242:	e054      	b.n	800c2ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	f003 020f 	and.w	r2, r3, #15
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	4613      	mov	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	440b      	add	r3, r1
 800c256:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fb9d 	bl	800c9a2 <USBD_CtlError>
                  break;
 800c268:	e041      	b.n	800c2ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c26a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da0b      	bge.n	800c28a <USBD_StdEPReq+0x2b2>
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	3310      	adds	r3, #16
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	4413      	add	r3, r2
 800c286:	3304      	adds	r3, #4
 800c288:	e00b      	b.n	800c2a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	4413      	add	r3, r2
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <USBD_StdEPReq+0x2d8>
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b80      	cmp	r3, #128	; 0x80
 800c2ae:	d103      	bne.n	800c2b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	e00e      	b.n	800c2d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 f8bd 	bl	800d43c <USBD_LL_IsStallEP>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d003      	beq.n	800c2d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2202      	movs	r2, #2
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fbd1 	bl	800ca84 <USBD_CtlSendData>
              break;
 800c2e2:	e004      	b.n	800c2ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fb5b 	bl	800c9a2 <USBD_CtlError>
              break;
 800c2ec:	bf00      	nop
          }
          break;
 800c2ee:	e004      	b.n	800c2fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fb55 	bl	800c9a2 <USBD_CtlError>
          break;
 800c2f8:	bf00      	nop
      }
      break;
 800c2fa:	e005      	b.n	800c308 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fb4f 	bl	800c9a2 <USBD_CtlError>
      break;
 800c304:	e000      	b.n	800c308 <USBD_StdEPReq+0x330>
      break;
 800c306:	bf00      	nop
  }

  return ret;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c326:	2300      	movs	r3, #0
 800c328:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	0a1b      	lsrs	r3, r3, #8
 800c330:	b29b      	uxth	r3, r3
 800c332:	3b01      	subs	r3, #1
 800c334:	2b06      	cmp	r3, #6
 800c336:	f200 8128 	bhi.w	800c58a <USBD_GetDescriptor+0x276>
 800c33a:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <USBD_GetDescriptor+0x2c>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c35d 	.word	0x0800c35d
 800c344:	0800c375 	.word	0x0800c375
 800c348:	0800c3b5 	.word	0x0800c3b5
 800c34c:	0800c58b 	.word	0x0800c58b
 800c350:	0800c58b 	.word	0x0800c58b
 800c354:	0800c52b 	.word	0x0800c52b
 800c358:	0800c557 	.word	0x0800c557
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
      break;
 800c372:	e112      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	7c1b      	ldrb	r3, [r3, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10d      	bne.n	800c398 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c384:	f107 0208 	add.w	r2, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3301      	adds	r3, #1
 800c392:	2202      	movs	r2, #2
 800c394:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c396:	e100      	b.n	800c59a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	f107 0208 	add.w	r2, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	701a      	strb	r2, [r3, #0]
      break;
 800c3b2:	e0f2      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	885b      	ldrh	r3, [r3, #2]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b05      	cmp	r3, #5
 800c3bc:	f200 80ac 	bhi.w	800c518 <USBD_GetDescriptor+0x204>
 800c3c0:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <USBD_GetDescriptor+0xb4>)
 800c3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c6:	bf00      	nop
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c415 	.word	0x0800c415
 800c3d0:	0800c449 	.word	0x0800c449
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c4b1 	.word	0x0800c4b1
 800c3dc:	0800c4e5 	.word	0x0800c4e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c402:	e091      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 facb 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c40c:	7afb      	ldrb	r3, [r7, #11]
 800c40e:	3301      	adds	r3, #1
 800c410:	72fb      	strb	r3, [r7, #11]
          break;
 800c412:	e089      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00b      	beq.n	800c438 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	7c12      	ldrb	r2, [r2, #16]
 800c42c:	f107 0108 	add.w	r1, r7, #8
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
 800c434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c436:	e077      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fab1 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3301      	adds	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]
          break;
 800c446:	e06f      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00b      	beq.n	800c46c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46a:	e05d      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa97 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c474:	7afb      	ldrb	r3, [r7, #11]
 800c476:	3301      	adds	r3, #1
 800c478:	72fb      	strb	r3, [r7, #11]
          break;
 800c47a:	e055      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49e:	e043      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa7d 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ae:	e03b      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d2:	e029      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa63 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e2:	e021      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	7c12      	ldrb	r2, [r2, #16]
 800c4fc:	f107 0108 	add.w	r1, r7, #8
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
 800c504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c506:	e00f      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa49 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
          break;
 800c516:	e007      	b.n	800c528 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fa41 	bl	800c9a2 <USBD_CtlError>
          err++;
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	3301      	adds	r3, #1
 800c524:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c526:	bf00      	nop
      }
      break;
 800c528:	e037      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	7c1b      	ldrb	r3, [r3, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d109      	bne.n	800c546 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53a:	f107 0208 	add.w	r2, r7, #8
 800c53e:	4610      	mov	r0, r2
 800c540:	4798      	blx	r3
 800c542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c544:	e029      	b.n	800c59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa2a 	bl	800c9a2 <USBD_CtlError>
        err++;
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	3301      	adds	r3, #1
 800c552:	72fb      	strb	r3, [r7, #11]
      break;
 800c554:	e021      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7c1b      	ldrb	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10d      	bne.n	800c57a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c566:	f107 0208 	add.w	r2, r7, #8
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	2207      	movs	r2, #7
 800c576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c578:	e00f      	b.n	800c59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fa10 	bl	800c9a2 <USBD_CtlError>
        err++;
 800c582:	7afb      	ldrb	r3, [r7, #11]
 800c584:	3301      	adds	r3, #1
 800c586:	72fb      	strb	r3, [r7, #11]
      break;
 800c588:	e007      	b.n	800c59a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fa08 	bl	800c9a2 <USBD_CtlError>
      err++;
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	3301      	adds	r3, #1
 800c596:	72fb      	strb	r3, [r7, #11]
      break;
 800c598:	bf00      	nop
  }

  if (err != 0U)
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11e      	bne.n	800c5de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	88db      	ldrh	r3, [r3, #6]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d016      	beq.n	800c5d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5a8:	893b      	ldrh	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00e      	beq.n	800c5cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	88da      	ldrh	r2, [r3, #6]
 800c5b2:	893b      	ldrh	r3, [r7, #8]
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	bf28      	it	cs
 800c5b8:	4613      	movcs	r3, r2
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5be:	893b      	ldrh	r3, [r7, #8]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa5d 	bl	800ca84 <USBD_CtlSendData>
 800c5ca:	e009      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f9e7 	bl	800c9a2 <USBD_CtlError>
 800c5d4:	e004      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 faae 	bl	800cb38 <USBD_CtlSendStatus>
 800c5dc:	e000      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    return;
 800c5de:	bf00      	nop
  }
}
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop

0800c5e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	889b      	ldrh	r3, [r3, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d131      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	88db      	ldrh	r3, [r3, #6]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d12d      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	885b      	ldrh	r3, [r3, #2]
 800c606:	2b7f      	cmp	r3, #127	; 0x7f
 800c608:	d829      	bhi.n	800c65e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d104      	bne.n	800c62c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f9bc 	bl	800c9a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	e01d      	b.n	800c668 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7bfa      	ldrb	r2, [r7, #15]
 800c630:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 ff2b 	bl	800d494 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa7a 	bl	800cb38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2202      	movs	r2, #2
 800c64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c652:	e009      	b.n	800c668 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65c:	e004      	b.n	800c668 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f99e 	bl	800c9a2 <USBD_CtlError>
  }
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	885b      	ldrh	r3, [r3, #2]
 800c682:	b2da      	uxtb	r2, r3
 800c684:	4b4e      	ldr	r3, [pc, #312]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c686:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c688:	4b4d      	ldr	r3, [pc, #308]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d905      	bls.n	800c69c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f985 	bl	800c9a2 <USBD_CtlError>
    return USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e08c      	b.n	800c7b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d002      	beq.n	800c6ae <USBD_SetConfig+0x3e>
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d029      	beq.n	800c700 <USBD_SetConfig+0x90>
 800c6ac:	e075      	b.n	800c79a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6ae:	4b44      	ldr	r3, [pc, #272]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d020      	beq.n	800c6f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6b6:	4b42      	ldr	r3, [pc, #264]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6c0:	4b3f      	ldr	r3, [pc, #252]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7fe ffe1 	bl	800b68e <USBD_SetClassConfig>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d008      	beq.n	800c6e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f962 	bl	800c9a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6e6:	e065      	b.n	800c7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fa25 	bl	800cb38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2203      	movs	r2, #3
 800c6f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6f6:	e05d      	b.n	800c7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fa1d 	bl	800cb38 <USBD_CtlSendStatus>
      break;
 800c6fe:	e059      	b.n	800c7b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c700:	4b2f      	ldr	r3, [pc, #188]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d112      	bne.n	800c72e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c710:	4b2b      	ldr	r3, [pc, #172]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	461a      	mov	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c71a:	4b29      	ldr	r3, [pc, #164]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7fe ffd0 	bl	800b6c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa06 	bl	800cb38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c72c:	e042      	b.n	800c7b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c72e:	4b24      	ldr	r3, [pc, #144]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	461a      	mov	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d02a      	beq.n	800c792 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7fe ffbe 	bl	800b6c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c74a:	4b1d      	ldr	r3, [pc, #116]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c754:	4b1a      	ldr	r3, [pc, #104]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7fe ff97 	bl	800b68e <USBD_SetClassConfig>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00f      	beq.n	800c78a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f918 	bl	800c9a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe ffa3 	bl	800b6c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c788:	e014      	b.n	800c7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f9d4 	bl	800cb38 <USBD_CtlSendStatus>
      break;
 800c790:	e010      	b.n	800c7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f9d0 	bl	800cb38 <USBD_CtlSendStatus>
      break;
 800c798:	e00c      	b.n	800c7b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f900 	bl	800c9a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7a2:	4b07      	ldr	r3, [pc, #28]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7fe ff8c 	bl	800b6c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b2:	bf00      	nop
  }

  return ret;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	24003c10 	.word	0x24003c10

0800c7c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	88db      	ldrh	r3, [r3, #6]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d004      	beq.n	800c7e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f8e2 	bl	800c9a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7de:	e023      	b.n	800c828 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	dc02      	bgt.n	800c7f2 <USBD_GetConfig+0x2e>
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dc03      	bgt.n	800c7f8 <USBD_GetConfig+0x34>
 800c7f0:	e015      	b.n	800c81e <USBD_GetConfig+0x5a>
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	d00b      	beq.n	800c80e <USBD_GetConfig+0x4a>
 800c7f6:	e012      	b.n	800c81e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3308      	adds	r3, #8
 800c802:	2201      	movs	r2, #1
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f93c 	bl	800ca84 <USBD_CtlSendData>
        break;
 800c80c:	e00c      	b.n	800c828 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3304      	adds	r3, #4
 800c812:	2201      	movs	r2, #1
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f934 	bl	800ca84 <USBD_CtlSendData>
        break;
 800c81c:	e004      	b.n	800c828 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f8be 	bl	800c9a2 <USBD_CtlError>
        break;
 800c826:	bf00      	nop
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c840:	b2db      	uxtb	r3, r3
 800c842:	3b01      	subs	r3, #1
 800c844:	2b02      	cmp	r3, #2
 800c846:	d81e      	bhi.n	800c886 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	88db      	ldrh	r3, [r3, #6]
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d004      	beq.n	800c85a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f8a5 	bl	800c9a2 <USBD_CtlError>
        break;
 800c858:	e01a      	b.n	800c890 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	f043 0202 	orr.w	r2, r3, #2
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	330c      	adds	r3, #12
 800c87a:	2202      	movs	r2, #2
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f900 	bl	800ca84 <USBD_CtlSendData>
      break;
 800c884:	e004      	b.n	800c890 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f88a 	bl	800c9a2 <USBD_CtlError>
      break;
 800c88e:	bf00      	nop
  }
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	885b      	ldrh	r3, [r3, #2]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d107      	bne.n	800c8ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f940 	bl	800cb38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8b8:	e013      	b.n	800c8e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	885b      	ldrh	r3, [r3, #2]
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d10b      	bne.n	800c8da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	889b      	ldrh	r3, [r3, #4]
 800c8c6:	0a1b      	lsrs	r3, r3, #8
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f930 	bl	800cb38 <USBD_CtlSendStatus>
}
 800c8d8:	e003      	b.n	800c8e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f860 	bl	800c9a2 <USBD_CtlError>
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d80b      	bhi.n	800c91a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	885b      	ldrh	r3, [r3, #2]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d10c      	bne.n	800c924 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f910 	bl	800cb38 <USBD_CtlSendStatus>
      }
      break;
 800c918:	e004      	b.n	800c924 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f840 	bl	800c9a2 <USBD_CtlError>
      break;
 800c922:	e000      	b.n	800c926 <USBD_ClrFeature+0x3c>
      break;
 800c924:	bf00      	nop
  }
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	781a      	ldrb	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3301      	adds	r3, #1
 800c948:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	781a      	ldrb	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff fa41 	bl	800bde0 <SWAPBYTE>
 800c95e:	4603      	mov	r3, r0
 800c960:	461a      	mov	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3301      	adds	r3, #1
 800c970:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7ff fa34 	bl	800bde0 <SWAPBYTE>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fa27 	bl	800bde0 <SWAPBYTE>
 800c992:	4603      	mov	r3, r0
 800c994:	461a      	mov	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	80da      	strh	r2, [r3, #6]
}
 800c99a:	bf00      	nop
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ac:	2180      	movs	r1, #128	; 0x80
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fd06 	bl	800d3c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fd02 	bl	800d3c0 <USBD_LL_StallEP>
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d036      	beq.n	800ca48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9de:	6938      	ldr	r0, [r7, #16]
 800c9e0:	f000 f836 	bl	800ca50 <USBD_GetLen>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	7812      	ldrb	r2, [r2, #0]
 800c9fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	3301      	adds	r3, #1
 800ca02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	4413      	add	r3, r2
 800ca0a:	2203      	movs	r2, #3
 800ca0c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	3301      	adds	r3, #1
 800ca12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca14:	e013      	b.n	800ca3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	7812      	ldrb	r2, [r2, #0]
 800ca20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	3301      	adds	r3, #1
 800ca26:	613b      	str	r3, [r7, #16]
    idx++;
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	4413      	add	r3, r2
 800ca34:	2200      	movs	r2, #0
 800ca36:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e7      	bne.n	800ca16 <USBD_GetString+0x52>
 800ca46:	e000      	b.n	800ca4a <USBD_GetString+0x86>
    return;
 800ca48:	bf00      	nop
  }
}
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca60:	e005      	b.n	800ca6e <USBD_GetLen+0x1e>
  {
    len++;
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	3301      	adds	r3, #1
 800ca66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1f5      	bne.n	800ca62 <USBD_GetLen+0x12>
  }

  return len;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2202      	movs	r2, #2
 800ca94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	2100      	movs	r1, #0
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f000 fd11 	bl	800d4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	60f8      	str	r0, [r7, #12]
 800cac2:	60b9      	str	r1, [r7, #8]
 800cac4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	2100      	movs	r1, #0
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f000 fd00 	bl	800d4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2203      	movs	r2, #3
 800caec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	2100      	movs	r1, #0
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 fd04 	bl	800d514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b084      	sub	sp, #16
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	2100      	movs	r1, #0
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 fcf3 	bl	800d514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2204      	movs	r2, #4
 800cb44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb48:	2300      	movs	r3, #0
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fcbf 	bl	800d4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b082      	sub	sp, #8
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2205      	movs	r2, #5
 800cb6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb6e:	2300      	movs	r3, #0
 800cb70:	2200      	movs	r2, #0
 800cb72:	2100      	movs	r1, #0
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fccd 	bl	800d514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb88:	2200      	movs	r2, #0
 800cb8a:	4913      	ldr	r1, [pc, #76]	; (800cbd8 <MX_USB_DEVICE_Init+0x54>)
 800cb8c:	4813      	ldr	r0, [pc, #76]	; (800cbdc <MX_USB_DEVICE_Init+0x58>)
 800cb8e:	f7fe fd01 	bl	800b594 <USBD_Init>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb98:	f7f4 f9af 	bl	8000efa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb9c:	4910      	ldr	r1, [pc, #64]	; (800cbe0 <MX_USB_DEVICE_Init+0x5c>)
 800cb9e:	480f      	ldr	r0, [pc, #60]	; (800cbdc <MX_USB_DEVICE_Init+0x58>)
 800cba0:	f7fe fd28 	bl	800b5f4 <USBD_RegisterClass>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbaa:	f7f4 f9a6 	bl	8000efa <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbae:	490d      	ldr	r1, [pc, #52]	; (800cbe4 <MX_USB_DEVICE_Init+0x60>)
 800cbb0:	480a      	ldr	r0, [pc, #40]	; (800cbdc <MX_USB_DEVICE_Init+0x58>)
 800cbb2:	f7fe fc1f 	bl	800b3f4 <USBD_CDC_RegisterInterface>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbbc:	f7f4 f99d 	bl	8000efa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbc0:	4806      	ldr	r0, [pc, #24]	; (800cbdc <MX_USB_DEVICE_Init+0x58>)
 800cbc2:	f7fe fd4d 	bl	800b660 <USBD_Start>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbcc:	f7f4 f995 	bl	8000efa <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cbd0:	f7f8 f9ca 	bl	8004f68 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbd4:	bf00      	nop
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	240000b0 	.word	0x240000b0
 800cbdc:	24003c14 	.word	0x24003c14
 800cbe0:	2400001c 	.word	0x2400001c
 800cbe4:	2400009c 	.word	0x2400009c

0800cbe8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbec:	2200      	movs	r2, #0
 800cbee:	4905      	ldr	r1, [pc, #20]	; (800cc04 <CDC_Init_FS+0x1c>)
 800cbf0:	4805      	ldr	r0, [pc, #20]	; (800cc08 <CDC_Init_FS+0x20>)
 800cbf2:	f7fe fc19 	bl	800b428 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbf6:	4905      	ldr	r1, [pc, #20]	; (800cc0c <CDC_Init_FS+0x24>)
 800cbf8:	4803      	ldr	r0, [pc, #12]	; (800cc08 <CDC_Init_FS+0x20>)
 800cbfa:	f7fe fc37 	bl	800b46c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	240046f0 	.word	0x240046f0
 800cc08:	24003c14 	.word	0x24003c14
 800cc0c:	24003ef0 	.word	0x24003ef0

0800cc10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc10:	b480      	push	{r7}
 800cc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	6039      	str	r1, [r7, #0]
 800cc2a:	71fb      	strb	r3, [r7, #7]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	2b23      	cmp	r3, #35	; 0x23
 800cc34:	d84a      	bhi.n	800cccc <CDC_Control_FS+0xac>
 800cc36:	a201      	add	r2, pc, #4	; (adr r2, 800cc3c <CDC_Control_FS+0x1c>)
 800cc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3c:	0800cccd 	.word	0x0800cccd
 800cc40:	0800cccd 	.word	0x0800cccd
 800cc44:	0800cccd 	.word	0x0800cccd
 800cc48:	0800cccd 	.word	0x0800cccd
 800cc4c:	0800cccd 	.word	0x0800cccd
 800cc50:	0800cccd 	.word	0x0800cccd
 800cc54:	0800cccd 	.word	0x0800cccd
 800cc58:	0800cccd 	.word	0x0800cccd
 800cc5c:	0800cccd 	.word	0x0800cccd
 800cc60:	0800cccd 	.word	0x0800cccd
 800cc64:	0800cccd 	.word	0x0800cccd
 800cc68:	0800cccd 	.word	0x0800cccd
 800cc6c:	0800cccd 	.word	0x0800cccd
 800cc70:	0800cccd 	.word	0x0800cccd
 800cc74:	0800cccd 	.word	0x0800cccd
 800cc78:	0800cccd 	.word	0x0800cccd
 800cc7c:	0800cccd 	.word	0x0800cccd
 800cc80:	0800cccd 	.word	0x0800cccd
 800cc84:	0800cccd 	.word	0x0800cccd
 800cc88:	0800cccd 	.word	0x0800cccd
 800cc8c:	0800cccd 	.word	0x0800cccd
 800cc90:	0800cccd 	.word	0x0800cccd
 800cc94:	0800cccd 	.word	0x0800cccd
 800cc98:	0800cccd 	.word	0x0800cccd
 800cc9c:	0800cccd 	.word	0x0800cccd
 800cca0:	0800cccd 	.word	0x0800cccd
 800cca4:	0800cccd 	.word	0x0800cccd
 800cca8:	0800cccd 	.word	0x0800cccd
 800ccac:	0800cccd 	.word	0x0800cccd
 800ccb0:	0800cccd 	.word	0x0800cccd
 800ccb4:	0800cccd 	.word	0x0800cccd
 800ccb8:	0800cccd 	.word	0x0800cccd
 800ccbc:	0800cccd 	.word	0x0800cccd
 800ccc0:	0800cccd 	.word	0x0800cccd
 800ccc4:	0800cccd 	.word	0x0800cccd
 800ccc8:	0800cccd 	.word	0x0800cccd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cccc:	bf00      	nop
  }

  return (USBD_OK);
 800ccce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	4805      	ldr	r0, [pc, #20]	; (800cd00 <CDC_Receive_FS+0x24>)
 800ccea:	f7fe fbbf 	bl	800b46c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccee:	4804      	ldr	r0, [pc, #16]	; (800cd00 <CDC_Receive_FS+0x24>)
 800ccf0:	f7fe fc1a 	bl	800b528 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	24003c14 	.word	0x24003c14

0800cd04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd14:	4b0d      	ldr	r3, [pc, #52]	; (800cd4c <CDC_Transmit_FS+0x48>)
 800cd16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e00b      	b.n	800cd42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd2a:	887b      	ldrh	r3, [r7, #2]
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	4806      	ldr	r0, [pc, #24]	; (800cd4c <CDC_Transmit_FS+0x48>)
 800cd32:	f7fe fb79 	bl	800b428 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd36:	4805      	ldr	r0, [pc, #20]	; (800cd4c <CDC_Transmit_FS+0x48>)
 800cd38:	f7fe fbb6 	bl	800b4a8 <USBD_CDC_TransmitPacket>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	24003c14 	.word	0x24003c14

0800cd50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b087      	sub	sp, #28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	371c      	adds	r7, #28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
	...

0800cd74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	6039      	str	r1, [r7, #0]
 800cd7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	2212      	movs	r2, #18
 800cd84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd86:	4b03      	ldr	r3, [pc, #12]	; (800cd94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr
 800cd94:	240000cc 	.word	0x240000cc

0800cd98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	6039      	str	r1, [r7, #0]
 800cda2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2204      	movs	r2, #4
 800cda8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdaa:	4b03      	ldr	r3, [pc, #12]	; (800cdb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	240000e0 	.word	0x240000e0

0800cdbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	6039      	str	r1, [r7, #0]
 800cdc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d105      	bne.n	800cdda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	4907      	ldr	r1, [pc, #28]	; (800cdf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdd2:	4808      	ldr	r0, [pc, #32]	; (800cdf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdd4:	f7ff fdf6 	bl	800c9c4 <USBD_GetString>
 800cdd8:	e004      	b.n	800cde4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	4904      	ldr	r1, [pc, #16]	; (800cdf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdde:	4805      	ldr	r0, [pc, #20]	; (800cdf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cde0:	f7ff fdf0 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cde4:	4b02      	ldr	r3, [pc, #8]	; (800cdf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	24004ef0 	.word	0x24004ef0
 800cdf4:	08011660 	.word	0x08011660

0800cdf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	4904      	ldr	r1, [pc, #16]	; (800ce18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce08:	4804      	ldr	r0, [pc, #16]	; (800ce1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce0a:	f7ff fddb 	bl	800c9c4 <USBD_GetString>
  return USBD_StrDesc;
 800ce0e:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	24004ef0 	.word	0x24004ef0
 800ce1c:	08011678 	.word	0x08011678

0800ce20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	6039      	str	r1, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	221a      	movs	r2, #26
 800ce30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce32:	f000 f843 	bl	800cebc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce36:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	240000e4 	.word	0x240000e4

0800ce44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce50:	79fb      	ldrb	r3, [r7, #7]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	4907      	ldr	r1, [pc, #28]	; (800ce78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce5a:	4808      	ldr	r0, [pc, #32]	; (800ce7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce5c:	f7ff fdb2 	bl	800c9c4 <USBD_GetString>
 800ce60:	e004      	b.n	800ce6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4904      	ldr	r1, [pc, #16]	; (800ce78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce66:	4805      	ldr	r0, [pc, #20]	; (800ce7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce68:	f7ff fdac 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce6c:	4b02      	ldr	r3, [pc, #8]	; (800ce78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	24004ef0 	.word	0x24004ef0
 800ce7c:	0801168c 	.word	0x0801168c

0800ce80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d105      	bne.n	800ce9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	4907      	ldr	r1, [pc, #28]	; (800ceb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce96:	4808      	ldr	r0, [pc, #32]	; (800ceb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce98:	f7ff fd94 	bl	800c9c4 <USBD_GetString>
 800ce9c:	e004      	b.n	800cea8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	4904      	ldr	r1, [pc, #16]	; (800ceb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cea2:	4805      	ldr	r0, [pc, #20]	; (800ceb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cea4:	f7ff fd8e 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea8:	4b02      	ldr	r3, [pc, #8]	; (800ceb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	24004ef0 	.word	0x24004ef0
 800ceb8:	08011698 	.word	0x08011698

0800cebc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cec2:	4b0f      	ldr	r3, [pc, #60]	; (800cf00 <Get_SerialNum+0x44>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cec8:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <Get_SerialNum+0x48>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cece:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <Get_SerialNum+0x4c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4413      	add	r3, r2
 800ceda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d009      	beq.n	800cef6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cee2:	2208      	movs	r2, #8
 800cee4:	4909      	ldr	r1, [pc, #36]	; (800cf0c <Get_SerialNum+0x50>)
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f000 f814 	bl	800cf14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ceec:	2204      	movs	r2, #4
 800ceee:	4908      	ldr	r1, [pc, #32]	; (800cf10 <Get_SerialNum+0x54>)
 800cef0:	68b8      	ldr	r0, [r7, #8]
 800cef2:	f000 f80f 	bl	800cf14 <IntToUnicode>
  }
}
 800cef6:	bf00      	nop
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	1ff1e800 	.word	0x1ff1e800
 800cf04:	1ff1e804 	.word	0x1ff1e804
 800cf08:	1ff1e808 	.word	0x1ff1e808
 800cf0c:	240000e6 	.word	0x240000e6
 800cf10:	240000f6 	.word	0x240000f6

0800cf14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b087      	sub	sp, #28
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf26:	2300      	movs	r3, #0
 800cf28:	75fb      	strb	r3, [r7, #23]
 800cf2a:	e027      	b.n	800cf7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	0f1b      	lsrs	r3, r3, #28
 800cf30:	2b09      	cmp	r3, #9
 800cf32:	d80b      	bhi.n	800cf4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	0f1b      	lsrs	r3, r3, #28
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	4619      	mov	r1, r3
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	440b      	add	r3, r1
 800cf44:	3230      	adds	r2, #48	; 0x30
 800cf46:	b2d2      	uxtb	r2, r2
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	e00a      	b.n	800cf62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	0f1b      	lsrs	r3, r3, #28
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	4619      	mov	r1, r3
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3237      	adds	r2, #55	; 0x37
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	011b      	lsls	r3, r3, #4
 800cf66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	005b      	lsls	r3, r3, #1
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	4413      	add	r3, r2
 800cf72:	2200      	movs	r2, #0
 800cf74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	75fb      	strb	r3, [r7, #23]
 800cf7c:	7dfa      	ldrb	r2, [r7, #23]
 800cf7e:	79fb      	ldrb	r3, [r7, #7]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d3d3      	bcc.n	800cf2c <IntToUnicode+0x18>
  }
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop
 800cf88:	371c      	adds	r7, #28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b0ba      	sub	sp, #232	; 0xe8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	605a      	str	r2, [r3, #4]
 800cfa6:	609a      	str	r2, [r3, #8]
 800cfa8:	60da      	str	r2, [r3, #12]
 800cfaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cfac:	f107 0310 	add.w	r3, r7, #16
 800cfb0:	22c0      	movs	r2, #192	; 0xc0
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f003 f92b 	bl	8010210 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a2c      	ldr	r2, [pc, #176]	; (800d070 <HAL_PCD_MspInit+0xdc>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d151      	bne.n	800d068 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfc4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cfc8:	f04f 0300 	mov.w	r3, #0
 800cfcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cfd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cfd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cfd8:	f107 0310 	add.w	r3, r7, #16
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7f9 fc53 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800cfe8:	f7f3 ff87 	bl	8000efa <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800cfec:	f7f7 ffbc 	bl	8004f68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cff0:	4b20      	ldr	r3, [pc, #128]	; (800d074 <HAL_PCD_MspInit+0xe0>)
 800cff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cff6:	4a1f      	ldr	r2, [pc, #124]	; (800d074 <HAL_PCD_MspInit+0xe0>)
 800cff8:	f043 0301 	orr.w	r3, r3, #1
 800cffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d000:	4b1c      	ldr	r3, [pc, #112]	; (800d074 <HAL_PCD_MspInit+0xe0>)
 800d002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	60fb      	str	r3, [r7, #12]
 800d00c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800d00e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d016:	2302      	movs	r3, #2
 800d018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d022:	2300      	movs	r3, #0
 800d024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d028:	230a      	movs	r3, #10
 800d02a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d02e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d032:	4619      	mov	r1, r3
 800d034:	4810      	ldr	r0, [pc, #64]	; (800d078 <HAL_PCD_MspInit+0xe4>)
 800d036:	f7f6 fadb 	bl	80035f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d03a:	4b0e      	ldr	r3, [pc, #56]	; (800d074 <HAL_PCD_MspInit+0xe0>)
 800d03c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d040:	4a0c      	ldr	r2, [pc, #48]	; (800d074 <HAL_PCD_MspInit+0xe0>)
 800d042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d046:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d04a:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <HAL_PCD_MspInit+0xe0>)
 800d04c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d054:	60bb      	str	r3, [r7, #8]
 800d056:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d058:	2200      	movs	r2, #0
 800d05a:	2100      	movs	r1, #0
 800d05c:	2065      	movs	r0, #101	; 0x65
 800d05e:	f7f6 f924 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d062:	2065      	movs	r0, #101	; 0x65
 800d064:	f7f6 f93b 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d068:	bf00      	nop
 800d06a:	37e8      	adds	r7, #232	; 0xe8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	40080000 	.word	0x40080000
 800d074:	58024400 	.word	0x58024400
 800d078:	58020000 	.word	0x58020000

0800d07c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d090:	4619      	mov	r1, r3
 800d092:	4610      	mov	r0, r2
 800d094:	f7fe fb31 	bl	800b6fa <USBD_LL_SetupStage>
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d0b2:	78fa      	ldrb	r2, [r7, #3]
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	4413      	add	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	440b      	add	r3, r1
 800d0c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	78fb      	ldrb	r3, [r7, #3]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	f7fe fb6b 	bl	800b7a4 <USBD_LL_DataOutStage>
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d0e8:	78fa      	ldrb	r2, [r7, #3]
 800d0ea:	6879      	ldr	r1, [r7, #4]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	440b      	add	r3, r1
 800d0f6:	3348      	adds	r3, #72	; 0x48
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	78fb      	ldrb	r3, [r7, #3]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	f7fe fc04 	bl	800b90a <USBD_LL_DataInStage>
}
 800d102:	bf00      	nop
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b082      	sub	sp, #8
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fd3e 	bl	800bb9a <USBD_LL_SOF>
}
 800d11e:	bf00      	nop
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b084      	sub	sp, #16
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d12e:	2301      	movs	r3, #1
 800d130:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d102      	bne.n	800d140 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d13a:	2300      	movs	r3, #0
 800d13c:	73fb      	strb	r3, [r7, #15]
 800d13e:	e008      	b.n	800d152 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d102      	bne.n	800d14e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d148:	2301      	movs	r3, #1
 800d14a:	73fb      	strb	r3, [r7, #15]
 800d14c:	e001      	b.n	800d152 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d14e:	f7f3 fed4 	bl	8000efa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d158:	7bfa      	ldrb	r2, [r7, #15]
 800d15a:	4611      	mov	r1, r2
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe fcd8 	bl	800bb12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fc80 	bl	800ba6e <USBD_LL_Reset>
}
 800d16e:	bf00      	nop
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fcd3 	bl	800bb32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6812      	ldr	r2, [r2, #0]
 800d19a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d19e:	f043 0301 	orr.w	r3, r3, #1
 800d1a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a1b      	ldr	r3, [r3, #32]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d005      	beq.n	800d1b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1ac:	4b04      	ldr	r3, [pc, #16]	; (800d1c0 <HAL_PCD_SuspendCallback+0x48>)
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	4a03      	ldr	r2, [pc, #12]	; (800d1c0 <HAL_PCD_SuspendCallback+0x48>)
 800d1b2:	f043 0306 	orr.w	r3, r3, #6
 800d1b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	e000ed00 	.word	0xe000ed00

0800d1c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fcc9 	bl	800bb6a <USBD_LL_Resume>
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1f2:	78fa      	ldrb	r2, [r7, #3]
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fe fd21 	bl	800bc3e <USBD_LL_IsoOUTIncomplete>
}
 800d1fc:	bf00      	nop
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d216:	78fa      	ldrb	r2, [r7, #3]
 800d218:	4611      	mov	r1, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fcdd 	bl	800bbda <USBD_LL_IsoINIncomplete>
}
 800d220:	bf00      	nop
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe fd33 	bl	800bca2 <USBD_LL_DevConnected>
}
 800d23c:	bf00      	nop
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe fd30 	bl	800bcb8 <USBD_LL_DevDisconnected>
}
 800d258:	bf00      	nop
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d13e      	bne.n	800d2ee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d270:	4a21      	ldr	r2, [pc, #132]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a1f      	ldr	r2, [pc, #124]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d27c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d280:	4b1d      	ldr	r3, [pc, #116]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d282:	4a1e      	ldr	r2, [pc, #120]	; (800d2fc <USBD_LL_Init+0x9c>)
 800d284:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d286:	4b1c      	ldr	r3, [pc, #112]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d288:	2209      	movs	r2, #9
 800d28a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d28c:	4b1a      	ldr	r3, [pc, #104]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d28e:	2202      	movs	r2, #2
 800d290:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d292:	4b19      	ldr	r3, [pc, #100]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d294:	2200      	movs	r2, #0
 800d296:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d298:	4b17      	ldr	r3, [pc, #92]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d29a:	2202      	movs	r2, #2
 800d29c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d29e:	4b16      	ldr	r3, [pc, #88]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2a4:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2aa:	4b13      	ldr	r3, [pc, #76]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d2b0:	4b11      	ldr	r3, [pc, #68]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2b6:	4b10      	ldr	r3, [pc, #64]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2bc:	4b0e      	ldr	r3, [pc, #56]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2c2:	480d      	ldr	r0, [pc, #52]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2c4:	f7f6 fb5d 	bl	8003982 <HAL_PCD_Init>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d2ce:	f7f3 fe14 	bl	8000efa <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2d2:	2180      	movs	r1, #128	; 0x80
 800d2d4:	4808      	ldr	r0, [pc, #32]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2d6:	f7f7 fdcc 	bl	8004e72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d2da:	2240      	movs	r2, #64	; 0x40
 800d2dc:	2100      	movs	r1, #0
 800d2de:	4806      	ldr	r0, [pc, #24]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2e0:	f7f7 fd80 	bl	8004de4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d2e4:	2280      	movs	r2, #128	; 0x80
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	4803      	ldr	r0, [pc, #12]	; (800d2f8 <USBD_LL_Init+0x98>)
 800d2ea:	f7f7 fd7b 	bl	8004de4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	240050f0 	.word	0x240050f0
 800d2fc:	40080000 	.word	0x40080000

0800d300 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d316:	4618      	mov	r0, r3
 800d318:	f7f6 fc57 	bl	8003bca <HAL_PCD_Start>
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d320:	7bfb      	ldrb	r3, [r7, #15]
 800d322:	4618      	mov	r0, r3
 800d324:	f000 f942 	bl	800d5ac <USBD_Get_USB_Status>
 800d328:	4603      	mov	r3, r0
 800d32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	4608      	mov	r0, r1
 800d340:	4611      	mov	r1, r2
 800d342:	461a      	mov	r2, r3
 800d344:	4603      	mov	r3, r0
 800d346:	70fb      	strb	r3, [r7, #3]
 800d348:	460b      	mov	r3, r1
 800d34a:	70bb      	strb	r3, [r7, #2]
 800d34c:	4613      	mov	r3, r2
 800d34e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d35e:	78bb      	ldrb	r3, [r7, #2]
 800d360:	883a      	ldrh	r2, [r7, #0]
 800d362:	78f9      	ldrb	r1, [r7, #3]
 800d364:	f7f7 f957 	bl	8004616 <HAL_PCD_EP_Open>
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f91c 	bl	800d5ac <USBD_Get_USB_Status>
 800d374:	4603      	mov	r3, r0
 800d376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d378:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b084      	sub	sp, #16
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	460b      	mov	r3, r1
 800d38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d39c:	78fa      	ldrb	r2, [r7, #3]
 800d39e:	4611      	mov	r1, r2
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7f7 f9a0 	bl	80046e6 <HAL_PCD_EP_Close>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 f8fd 	bl	800d5ac <USBD_Get_USB_Status>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3da:	78fa      	ldrb	r2, [r7, #3]
 800d3dc:	4611      	mov	r1, r2
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7f7 fa5a 	bl	8004898 <HAL_PCD_EP_SetStall>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3e8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 f8de 	bl	800d5ac <USBD_Get_USB_Status>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b084      	sub	sp, #16
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	460b      	mov	r3, r1
 800d408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d418:	78fa      	ldrb	r2, [r7, #3]
 800d41a:	4611      	mov	r1, r2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7f7 fa9f 	bl	8004960 <HAL_PCD_EP_ClrStall>
 800d422:	4603      	mov	r3, r0
 800d424:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d426:	7bfb      	ldrb	r3, [r7, #15]
 800d428:	4618      	mov	r0, r3
 800d42a:	f000 f8bf 	bl	800d5ac <USBD_Get_USB_Status>
 800d42e:	4603      	mov	r3, r0
 800d430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d432:	7bbb      	ldrb	r3, [r7, #14]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d44e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d454:	2b00      	cmp	r3, #0
 800d456:	da0b      	bge.n	800d470 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d458:	78fb      	ldrb	r3, [r7, #3]
 800d45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d45e:	68f9      	ldr	r1, [r7, #12]
 800d460:	4613      	mov	r3, r2
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	4413      	add	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	440b      	add	r3, r1
 800d46a:	333e      	adds	r3, #62	; 0x3e
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	e00b      	b.n	800d488 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d470:	78fb      	ldrb	r3, [r7, #3]
 800d472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d476:	68f9      	ldr	r1, [r7, #12]
 800d478:	4613      	mov	r3, r2
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	4413      	add	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	440b      	add	r3, r1
 800d482:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d486:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4ae:	78fa      	ldrb	r2, [r7, #3]
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7f7 f88a 	bl	80045cc <HAL_PCD_SetAddress>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f874 	bl	800d5ac <USBD_Get_USB_Status>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b086      	sub	sp, #24
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	603b      	str	r3, [r7, #0]
 800d4de:	460b      	mov	r3, r1
 800d4e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d4f0:	7af9      	ldrb	r1, [r7, #11]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	f7f7 f994 	bl	8004822 <HAL_PCD_EP_Transmit>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	4618      	mov	r0, r3
 800d502:	f000 f853 	bl	800d5ac <USBD_Get_USB_Status>
 800d506:	4603      	mov	r3, r0
 800d508:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d50a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	607a      	str	r2, [r7, #4]
 800d51e:	603b      	str	r3, [r7, #0]
 800d520:	460b      	mov	r3, r1
 800d522:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d524:	2300      	movs	r3, #0
 800d526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d532:	7af9      	ldrb	r1, [r7, #11]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	f7f7 f91f 	bl	800477a <HAL_PCD_EP_Receive>
 800d53c:	4603      	mov	r3, r0
 800d53e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d540:	7dfb      	ldrb	r3, [r7, #23]
 800d542:	4618      	mov	r0, r3
 800d544:	f000 f832 	bl	800d5ac <USBD_Get_USB_Status>
 800d548:	4603      	mov	r3, r0
 800d54a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d54c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b082      	sub	sp, #8
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	460b      	mov	r3, r1
 800d560:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d568:	78fa      	ldrb	r2, [r7, #3]
 800d56a:	4611      	mov	r1, r2
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7f7 f940 	bl	80047f2 <HAL_PCD_EP_GetRxCount>
 800d572:	4603      	mov	r3, r0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d584:	4b03      	ldr	r3, [pc, #12]	; (800d594 <USBD_static_malloc+0x18>)
}
 800d586:	4618      	mov	r0, r3
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	240055fc 	.word	0x240055fc

0800d598 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5ba:	79fb      	ldrb	r3, [r7, #7]
 800d5bc:	2b03      	cmp	r3, #3
 800d5be:	d817      	bhi.n	800d5f0 <USBD_Get_USB_Status+0x44>
 800d5c0:	a201      	add	r2, pc, #4	; (adr r2, 800d5c8 <USBD_Get_USB_Status+0x1c>)
 800d5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c6:	bf00      	nop
 800d5c8:	0800d5d9 	.word	0x0800d5d9
 800d5cc:	0800d5df 	.word	0x0800d5df
 800d5d0:	0800d5e5 	.word	0x0800d5e5
 800d5d4:	0800d5eb 	.word	0x0800d5eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	73fb      	strb	r3, [r7, #15]
    break;
 800d5dc:	e00b      	b.n	800d5f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e2:	e008      	b.n	800d5f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e8:	e005      	b.n	800d5f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ee:	e002      	b.n	800d5f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f4:	bf00      	nop
  }
  return usb_status;
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d009      	beq.n	800d628 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800d614:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800d616:	461a      	mov	r2, r3
        err.type, err.code);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	4806      	ldr	r0, [pc, #24]	; (800d63c <ai_log_err+0x38>)
 800d622:	f002 fedd 	bl	80103e0 <iprintf>
 800d626:	e008      	b.n	800d63a <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800d628:	793b      	ldrb	r3, [r7, #4]
 800d62a:	4619      	mov	r1, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d632:	461a      	mov	r2, r3
 800d634:	4802      	ldr	r0, [pc, #8]	; (800d640 <ai_log_err+0x3c>)
 800d636:	f002 fed3 	bl	80103e0 <iprintf>

  do {} while (1);
 800d63a:	e7fe      	b.n	800d63a <ai_log_err+0x36>
 800d63c:	080116a8 	.word	0x080116a8
 800d640:	080116dc 	.word	0x080116dc

0800d644 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_randomforest_create_and_init(&randomforest, act_addr, NULL);
 800d64c:	2200      	movs	r2, #0
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	4828      	ldr	r0, [pc, #160]	; (800d6f4 <ai_boostrap+0xb0>)
 800d652:	f000 fb2b 	bl	800dcac <ai_randomforest_create_and_init>
 800d656:	4603      	mov	r3, r0
 800d658:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800d65a:	7b3b      	ldrb	r3, [r7, #12]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d006      	beq.n	800d66e <ai_boostrap+0x2a>
    ai_log_err(err, "ai_randomforest_create_and_init");
 800d660:	4925      	ldr	r1, [pc, #148]	; (800d6f8 <ai_boostrap+0xb4>)
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f7ff ffce 	bl	800d604 <ai_log_err>
    return -1;
 800d668:	f04f 33ff 	mov.w	r3, #4294967295
 800d66c:	e03e      	b.n	800d6ec <ai_boostrap+0xa8>
  }

  ai_input = ai_randomforest_inputs_get(randomforest, NULL);
 800d66e:	4b21      	ldr	r3, [pc, #132]	; (800d6f4 <ai_boostrap+0xb0>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2100      	movs	r1, #0
 800d674:	4618      	mov	r0, r3
 800d676:	f000 fb8d 	bl	800dd94 <ai_randomforest_inputs_get>
 800d67a:	4603      	mov	r3, r0
 800d67c:	4a1f      	ldr	r2, [pc, #124]	; (800d6fc <ai_boostrap+0xb8>)
 800d67e:	6013      	str	r3, [r2, #0]
  ai_output = ai_randomforest_outputs_get(randomforest, NULL);
 800d680:	4b1c      	ldr	r3, [pc, #112]	; (800d6f4 <ai_boostrap+0xb0>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2100      	movs	r1, #0
 800d686:	4618      	mov	r0, r3
 800d688:	f000 fb9e 	bl	800ddc8 <ai_randomforest_outputs_get>
 800d68c:	4603      	mov	r3, r0
 800d68e:	4a1c      	ldr	r2, [pc, #112]	; (800d700 <ai_boostrap+0xbc>)
 800d690:	6013      	str	r3, [r2, #0]

#if defined(AI_RANDOMFOREST_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]
 800d696:	e00f      	b.n	800d6b8 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800d698:	4b18      	ldr	r3, [pc, #96]	; (800d6fc <ai_boostrap+0xb8>)
 800d69a:	6819      	ldr	r1, [r3, #0]
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	00db      	lsls	r3, r3, #3
 800d6a2:	1a9b      	subs	r3, r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	440b      	add	r3, r1
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	4916      	ldr	r1, [pc, #88]	; (800d704 <ai_boostrap+0xc0>)
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	617b      	str	r3, [r7, #20]
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	ddec      	ble.n	800d698 <ai_boostrap+0x54>

#if defined(AI_RANDOMFOREST_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 800d6be:	2300      	movs	r3, #0
 800d6c0:	613b      	str	r3, [r7, #16]
 800d6c2:	e00f      	b.n	800d6e4 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800d6c4:	4b0e      	ldr	r3, [pc, #56]	; (800d700 <ai_boostrap+0xbc>)
 800d6c6:	6819      	ldr	r1, [r3, #0]
 800d6c8:	693a      	ldr	r2, [r7, #16]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	1a9b      	subs	r3, r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	440b      	add	r3, r1
 800d6d4:	685a      	ldr	r2, [r3, #4]
 800d6d6:	490c      	ldr	r1, [pc, #48]	; (800d708 <ai_boostrap+0xc4>)
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	613b      	str	r3, [r7, #16]
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	ddec      	ble.n	800d6c4 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3718      	adds	r7, #24
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	24005998 	.word	0x24005998
 800d6f8:	0801170c 	.word	0x0801170c
 800d6fc:	2400599c 	.word	0x2400599c
 800d700:	240059a0 	.word	0x240059a0
 800d704:	2400592c 	.word	0x2400592c
 800d708:	24005930 	.word	0x24005930

0800d70c <ai_run>:

static int ai_run(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_randomforest_run(randomforest, ai_input, ai_output);
 800d712:	4b0f      	ldr	r3, [pc, #60]	; (800d750 <ai_run+0x44>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a0f      	ldr	r2, [pc, #60]	; (800d754 <ai_run+0x48>)
 800d718:	6811      	ldr	r1, [r2, #0]
 800d71a:	4a0f      	ldr	r2, [pc, #60]	; (800d758 <ai_run+0x4c>)
 800d71c:	6812      	ldr	r2, [r2, #0]
 800d71e:	4618      	mov	r0, r3
 800d720:	f000 fba8 	bl	800de74 <ai_randomforest_run>
 800d724:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d00c      	beq.n	800d746 <ai_run+0x3a>
    ai_log_err(ai_randomforest_get_error(randomforest),
 800d72c:	4b08      	ldr	r3, [pc, #32]	; (800d750 <ai_run+0x44>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4618      	mov	r0, r3
 800d732:	f000 fa99 	bl	800dc68 <ai_randomforest_get_error>
 800d736:	4603      	mov	r3, r0
 800d738:	4908      	ldr	r1, [pc, #32]	; (800d75c <ai_run+0x50>)
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff ff62 	bl	800d604 <ai_log_err>
        "ai_randomforest_run");
    return -1;
 800d740:	f04f 33ff 	mov.w	r3, #4294967295
 800d744:	e000      	b.n	800d748 <ai_run+0x3c>
  }

  return 0;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	24005998 	.word	0x24005998
 800d754:	2400599c 	.word	0x2400599c
 800d758:	240059a0 	.word	0x240059a0
 800d75c:	0801172c 	.word	0x0801172c

0800d760 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_float* data[])
{
 800d760:	b480      	push	{r7}
 800d762:	b085      	sub	sp, #20
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
	if(counterOfTestData == 0) {
 800d768:	4b16      	ldr	r3, [pc, #88]	; (800d7c4 <acquire_and_process_data+0x64>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d104      	bne.n	800d77a <acquire_and_process_data+0x1a>
		timestamp = htim16.Instance->CNT;
 800d770:	4b15      	ldr	r3, [pc, #84]	; (800d7c8 <acquire_and_process_data+0x68>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d776:	4a15      	ldr	r2, [pc, #84]	; (800d7cc <acquire_and_process_data+0x6c>)
 800d778:	6013      	str	r3, [r2, #0]
	}

	//RF hoja
	for(int i = 0; i < 16; i++) {
 800d77a:	2300      	movs	r3, #0
 800d77c:	60fb      	str	r3, [r7, #12]
 800d77e:	e011      	b.n	800d7a4 <acquire_and_process_data+0x44>
		data[0][i] = testData[counterOfTestData][i];
 800d780:	4b10      	ldr	r3, [pc, #64]	; (800d7c4 <acquire_and_process_data+0x64>)
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6819      	ldr	r1, [r3, #0]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	440b      	add	r3, r1
 800d78e:	4810      	ldr	r0, [pc, #64]	; (800d7d0 <acquire_and_process_data+0x70>)
 800d790:	0111      	lsls	r1, r2, #4
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	440a      	add	r2, r1
 800d796:	0092      	lsls	r2, r2, #2
 800d798:	4402      	add	r2, r0
 800d79a:	6812      	ldr	r2, [r2, #0]
 800d79c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 16; i++) {
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2b0f      	cmp	r3, #15
 800d7a8:	ddea      	ble.n	800d780 <acquire_and_process_data+0x20>
	}

	counterOfTestData++;
 800d7aa:	4b06      	ldr	r3, [pc, #24]	; (800d7c4 <acquire_and_process_data+0x64>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	4a04      	ldr	r2, [pc, #16]	; (800d7c4 <acquire_and_process_data+0x64>)
 800d7b2:	6013      	str	r3, [r2, #0]

  return 0;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	2400591c 	.word	0x2400591c
 800d7c8:	24003b64 	.word	0x24003b64
 800d7cc:	24005928 	.word	0x24005928
 800d7d0:	24000104 	.word	0x24000104

0800d7d4 <post_process>:

int post_process(ai_i8* data[])
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	6078      	str	r0, [r7, #4]
	if(counterOfTestData == size) {
 800d7dc:	4b29      	ldr	r3, [pc, #164]	; (800d884 <post_process+0xb0>)
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	4b29      	ldr	r3, [pc, #164]	; (800d888 <post_process+0xb4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d147      	bne.n	800d878 <post_process+0xa4>

		counterOfTestData = 0;
 800d7e8:	4b26      	ldr	r3, [pc, #152]	; (800d884 <post_process+0xb0>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]

		countDurations++;
 800d7ee:	4b27      	ldr	r3, [pc, #156]	; (800d88c <post_process+0xb8>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	4a25      	ldr	r2, [pc, #148]	; (800d88c <post_process+0xb8>)
 800d7f6:	6013      	str	r3, [r2, #0]

		uint32_t duration = htim16.Instance->CNT;
 800d7f8:	4b25      	ldr	r3, [pc, #148]	; (800d890 <post_process+0xbc>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fe:	60fb      	str	r3, [r7, #12]

		if(duration >= timestamp)
 800d800:	4b24      	ldr	r3, [pc, #144]	; (800d894 <post_process+0xc0>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	429a      	cmp	r2, r3
 800d808:	d305      	bcc.n	800d816 <post_process+0x42>
			duration -= timestamp;
 800d80a:	4b22      	ldr	r3, [pc, #136]	; (800d894 <post_process+0xc0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	e006      	b.n	800d824 <post_process+0x50>
		else
			duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 800d816:	4b1f      	ldr	r3, [pc, #124]	; (800d894 <post_process+0xc0>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d822:	60fb      	str	r3, [r7, #12]

		//snprintf(SendBuffer,BUFSIZE,"1 Trajanje izvajanja: %lu milisekund. \r\n", duration);
		//CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
		averageDurationValue += duration;
 800d824:	4b1c      	ldr	r3, [pc, #112]	; (800d898 <post_process+0xc4>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4413      	add	r3, r2
 800d82c:	4a1a      	ldr	r2, [pc, #104]	; (800d898 <post_process+0xc4>)
 800d82e:	6013      	str	r3, [r2, #0]

		if(countDurations == numberOfDurations) {
 800d830:	4b16      	ldr	r3, [pc, #88]	; (800d88c <post_process+0xb8>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	4b19      	ldr	r3, [pc, #100]	; (800d89c <post_process+0xc8>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d11d      	bne.n	800d878 <post_process+0xa4>
			snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu milisekund. \r\n", averageDurationValue, averageDurationValue / 100);
 800d83c:	4b16      	ldr	r3, [pc, #88]	; (800d898 <post_process+0xc4>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	4b15      	ldr	r3, [pc, #84]	; (800d898 <post_process+0xc4>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4916      	ldr	r1, [pc, #88]	; (800d8a0 <post_process+0xcc>)
 800d846:	fba1 1303 	umull	r1, r3, r1, r3
 800d84a:	095b      	lsrs	r3, r3, #5
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	4613      	mov	r3, r2
 800d850:	4a14      	ldr	r2, [pc, #80]	; (800d8a4 <post_process+0xd0>)
 800d852:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d856:	4814      	ldr	r0, [pc, #80]	; (800d8a8 <post_process+0xd4>)
 800d858:	f002 fe60 	bl	801051c <sniprintf>
			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800d85c:	4812      	ldr	r0, [pc, #72]	; (800d8a8 <post_process+0xd4>)
 800d85e:	f7f2 fd3f 	bl	80002e0 <strlen>
 800d862:	4603      	mov	r3, r0
 800d864:	4619      	mov	r1, r3
 800d866:	4810      	ldr	r0, [pc, #64]	; (800d8a8 <post_process+0xd4>)
 800d868:	f7ff fa4c 	bl	800cd04 <CDC_Transmit_FS>

			countDurations = 0;
 800d86c:	4b07      	ldr	r3, [pc, #28]	; (800d88c <post_process+0xb8>)
 800d86e:	2200      	movs	r2, #0
 800d870:	601a      	str	r2, [r3, #0]
			averageDurationValue = 0;
 800d872:	4b09      	ldr	r3, [pc, #36]	; (800d898 <post_process+0xc4>)
 800d874:	2200      	movs	r2, #0
 800d876:	601a      	str	r2, [r3, #0]
		}
	}

  return 0;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	2400591c 	.word	0x2400591c
 800d888:	24003304 	.word	0x24003304
 800d88c:	24005924 	.word	0x24005924
 800d890:	24003b64 	.word	0x24003b64
 800d894:	24005928 	.word	0x24005928
 800d898:	24005920 	.word	0x24005920
 800d89c:	24000100 	.word	0x24000100
 800d8a0:	51eb851f 	.word	0x51eb851f
 800d8a4:	08011740 	.word	0x08011740
 800d8a8:	2400581c 	.word	0x2400581c

0800d8ac <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
    BSP_QSPI_Init_t qspiInit;
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	713b      	strb	r3, [r7, #4]
    qspiInit.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	717b      	strb	r3, [r7, #5]
    qspiInit.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800d8ba:	2340      	movs	r3, #64	; 0x40
 800d8bc:	71bb      	strb	r3, [r7, #6]
    BSP_QSPI_Init(0,&qspiInit);
 800d8be:	1d3b      	adds	r3, r7, #4
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	f7f3 ffc8 	bl	8001858 <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode(0);
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	f7f4 f89f 	bl	8001a0c <BSP_QSPI_EnableMemoryMappedMode>
    /* USER CODE BEGIN 5 */

    HAL_TIM_Base_Start(&htim16);
 800d8ce:	4806      	ldr	r0, [pc, #24]	; (800d8e8 <MX_X_CUBE_AI_Init+0x3c>)
 800d8d0:	f7fb fd30 	bl	8009334 <HAL_TIM_Base_Start>

  printf("\r\nTEMPLATE - initialization\r\n");
 800d8d4:	4805      	ldr	r0, [pc, #20]	; (800d8ec <MX_X_CUBE_AI_Init+0x40>)
 800d8d6:	f002 fe09 	bl	80104ec <puts>

  ai_boostrap(data_activations0);
 800d8da:	4805      	ldr	r0, [pc, #20]	; (800d8f0 <MX_X_CUBE_AI_Init+0x44>)
 800d8dc:	f7ff feb2 	bl	800d644 <ai_boostrap>
    /* USER CODE END 5 */
}
 800d8e0:	bf00      	nop
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	24003b64 	.word	0x24003b64
 800d8ec:	08011770 	.word	0x08011770
 800d8f0:	24003308 	.word	0x24003308

0800d8f4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800d8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fe:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800d900:	4816      	ldr	r0, [pc, #88]	; (800d95c <MX_X_CUBE_AI_Process+0x68>)
 800d902:	f002 fdf3 	bl	80104ec <puts>

  if (randomforest) {
 800d906:	4b16      	ldr	r3, [pc, #88]	; (800d960 <MX_X_CUBE_AI_Process+0x6c>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d013      	beq.n	800d936 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800d90e:	4815      	ldr	r0, [pc, #84]	; (800d964 <MX_X_CUBE_AI_Process+0x70>)
 800d910:	f7ff ff26 	bl	800d760 <acquire_and_process_data>
 800d914:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d102      	bne.n	800d922 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 800d91c:	f7ff fef6 	bl	800d70c <ai_run>
 800d920:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d103      	bne.n	800d930 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 800d928:	480f      	ldr	r0, [pc, #60]	; (800d968 <MX_X_CUBE_AI_Process+0x74>)
 800d92a:	f7ff ff53 	bl	800d7d4 <post_process>
 800d92e:	6078      	str	r0, [r7, #4]
    } while (res==0);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d0eb      	beq.n	800d90e <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00a      	beq.n	800d952 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 800d93c:	2311      	movs	r3, #17
 800d93e:	703b      	strb	r3, [r7, #0]
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2210      	movs	r2, #16
 800d944:	f362 231f 	bfi	r3, r2, #8, #24
 800d948:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800d94a:	4908      	ldr	r1, [pc, #32]	; (800d96c <MX_X_CUBE_AI_Process+0x78>)
 800d94c:	6838      	ldr	r0, [r7, #0]
 800d94e:	f7ff fe59 	bl	800d604 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800d952:	bf00      	nop
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	08011790 	.word	0x08011790
 800d960:	24005998 	.word	0x24005998
 800d964:	2400592c 	.word	0x2400592c
 800d968:	24005930 	.word	0x24005930
 800d96c:	080117ac 	.word	0x080117ac

0800d970 <randomforest_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_randomforest_activations_map, 1, params)) {
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	2101      	movs	r1, #1
 800d97e:	481b      	ldr	r0, [pc, #108]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d980:	f000 fb5a 	bl	800e038 <ai_platform_get_activations_map>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d025      	beq.n	800d9d6 <randomforest_configure_activations+0x66>
    /* Updating activations (byte) offsets */
    
    float_input_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 0);
 800d98a:	4b18      	ldr	r3, [pc, #96]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a18      	ldr	r2, [pc, #96]	; (800d9f0 <randomforest_configure_activations+0x80>)
 800d990:	6093      	str	r3, [r2, #8]
    float_input_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 0);
 800d992:	4b16      	ldr	r3, [pc, #88]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a16      	ldr	r2, [pc, #88]	; (800d9f0 <randomforest_configure_activations+0x80>)
 800d998:	60d3      	str	r3, [r2, #12]
    
    label_output0_array.data = AI_PTR(g_randomforest_activations_map[0] + 64);
 800d99a:	4b14      	ldr	r3, [pc, #80]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	3340      	adds	r3, #64	; 0x40
 800d9a0:	4a14      	ldr	r2, [pc, #80]	; (800d9f4 <randomforest_configure_activations+0x84>)
 800d9a2:	6093      	str	r3, [r2, #8]
    label_output0_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 64);
 800d9a4:	4b11      	ldr	r3, [pc, #68]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	3340      	adds	r3, #64	; 0x40
 800d9aa:	4a12      	ldr	r2, [pc, #72]	; (800d9f4 <randomforest_configure_activations+0x84>)
 800d9ac:	60d3      	str	r3, [r2, #12]
    
    label_output1_array.data = AI_PTR(g_randomforest_activations_map[0] + 68);
 800d9ae:	4b0f      	ldr	r3, [pc, #60]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	3344      	adds	r3, #68	; 0x44
 800d9b4:	4a10      	ldr	r2, [pc, #64]	; (800d9f8 <randomforest_configure_activations+0x88>)
 800d9b6:	6093      	str	r3, [r2, #8]
    label_output1_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 68);
 800d9b8:	4b0c      	ldr	r3, [pc, #48]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3344      	adds	r3, #68	; 0x44
 800d9be:	4a0e      	ldr	r2, [pc, #56]	; (800d9f8 <randomforest_configure_activations+0x88>)
 800d9c0:	60d3      	str	r3, [r2, #12]
    
    output_probability_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 0);
 800d9c2:	4b0a      	ldr	r3, [pc, #40]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a0d      	ldr	r2, [pc, #52]	; (800d9fc <randomforest_configure_activations+0x8c>)
 800d9c8:	6093      	str	r3, [r2, #8]
    output_probability_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 0);
 800d9ca:	4b08      	ldr	r3, [pc, #32]	; (800d9ec <randomforest_configure_activations+0x7c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a0b      	ldr	r2, [pc, #44]	; (800d9fc <randomforest_configure_activations+0x8c>)
 800d9d0:	60d3      	str	r3, [r2, #12]
    
    return true;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e005      	b.n	800d9e2 <randomforest_configure_activations+0x72>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800d9d6:	2213      	movs	r2, #19
 800d9d8:	2130      	movs	r1, #48	; 0x30
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 fcaa 	bl	800e334 <ai_platform_network_set_error>
  return false;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	240059a4 	.word	0x240059a4
 800d9f0:	240033fc 	.word	0x240033fc
 800d9f4:	2400330c 	.word	0x2400330c
 800d9f8:	2400331c 	.word	0x2400331c
 800d9fc:	2400333c 	.word	0x2400333c

0800da00 <randomforest_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_randomforest_weights_map, 1, params)) {
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	2101      	movs	r1, #1
 800da0e:	4887      	ldr	r0, [pc, #540]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da10:	f000 faba 	bl	800df88 <ai_platform_get_weights_map>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	f000 80fe 	beq.w	800dc18 <randomforest_configure_weights+0x218>
    /* Updating weights (byte) offsets */
    
    label_class_nodeids_array.format |= AI_FMT_FLAG_CONST;
 800da1c:	4b84      	ldr	r3, [pc, #528]	; (800dc30 <randomforest_configure_weights+0x230>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da24:	4a82      	ldr	r2, [pc, #520]	; (800dc30 <randomforest_configure_weights+0x230>)
 800da26:	6013      	str	r3, [r2, #0]
    label_class_nodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 0);
 800da28:	4b80      	ldr	r3, [pc, #512]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a80      	ldr	r2, [pc, #512]	; (800dc30 <randomforest_configure_weights+0x230>)
 800da2e:	6093      	str	r3, [r2, #8]
    label_class_nodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 0);
 800da30:	4b7e      	ldr	r3, [pc, #504]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a7e      	ldr	r2, [pc, #504]	; (800dc30 <randomforest_configure_weights+0x230>)
 800da36:	60d3      	str	r3, [r2, #12]
    
    label_branch_mode_array.format |= AI_FMT_FLAG_CONST;
 800da38:	4b7e      	ldr	r3, [pc, #504]	; (800dc34 <randomforest_configure_weights+0x234>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da40:	4a7c      	ldr	r2, [pc, #496]	; (800dc34 <randomforest_configure_weights+0x234>)
 800da42:	6013      	str	r3, [r2, #0]
    label_branch_mode_array.data = AI_PTR(g_randomforest_weights_map[0] + 13880);
 800da44:	4b79      	ldr	r3, [pc, #484]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	f243 6338 	movw	r3, #13880	; 0x3638
 800da4c:	4413      	add	r3, r2
 800da4e:	4a79      	ldr	r2, [pc, #484]	; (800dc34 <randomforest_configure_weights+0x234>)
 800da50:	6093      	str	r3, [r2, #8]
    label_branch_mode_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 13880);
 800da52:	4b76      	ldr	r3, [pc, #472]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	f243 6338 	movw	r3, #13880	; 0x3638
 800da5a:	4413      	add	r3, r2
 800da5c:	4a75      	ldr	r2, [pc, #468]	; (800dc34 <randomforest_configure_weights+0x234>)
 800da5e:	60d3      	str	r3, [r2, #12]
    
    label_nb_class_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 800da60:	4b75      	ldr	r3, [pc, #468]	; (800dc38 <randomforest_configure_weights+0x238>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da68:	4a73      	ldr	r2, [pc, #460]	; (800dc38 <randomforest_configure_weights+0x238>)
 800da6a:	6013      	str	r3, [r2, #0]
    label_nb_class_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 13900);
 800da6c:	4b6f      	ldr	r3, [pc, #444]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	f243 634c 	movw	r3, #13900	; 0x364c
 800da74:	4413      	add	r3, r2
 800da76:	4a70      	ldr	r2, [pc, #448]	; (800dc38 <randomforest_configure_weights+0x238>)
 800da78:	6093      	str	r3, [r2, #8]
    label_nb_class_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 13900);
 800da7a:	4b6c      	ldr	r3, [pc, #432]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	f243 634c 	movw	r3, #13900	; 0x364c
 800da82:	4413      	add	r3, r2
 800da84:	4a6c      	ldr	r2, [pc, #432]	; (800dc38 <randomforest_configure_weights+0x238>)
 800da86:	60d3      	str	r3, [r2, #12]
    
    label_nodes_featureids_array.format |= AI_FMT_FLAG_CONST;
 800da88:	4b6c      	ldr	r3, [pc, #432]	; (800dc3c <randomforest_configure_weights+0x23c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da90:	4a6a      	ldr	r2, [pc, #424]	; (800dc3c <randomforest_configure_weights+0x23c>)
 800da92:	6013      	str	r3, [r2, #0]
    label_nodes_featureids_array.data = AI_PTR(g_randomforest_weights_map[0] + 13936);
 800da94:	4b65      	ldr	r3, [pc, #404]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	f243 6370 	movw	r3, #13936	; 0x3670
 800da9c:	4413      	add	r3, r2
 800da9e:	4a67      	ldr	r2, [pc, #412]	; (800dc3c <randomforest_configure_weights+0x23c>)
 800daa0:	6093      	str	r3, [r2, #8]
    label_nodes_featureids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 13936);
 800daa2:	4b62      	ldr	r3, [pc, #392]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	f243 6370 	movw	r3, #13936	; 0x3670
 800daaa:	4413      	add	r3, r2
 800daac:	4a63      	ldr	r2, [pc, #396]	; (800dc3c <randomforest_configure_weights+0x23c>)
 800daae:	60d3      	str	r3, [r2, #12]
    
    label_classlabels_int64s_array.format |= AI_FMT_FLAG_CONST;
 800dab0:	4b63      	ldr	r3, [pc, #396]	; (800dc40 <randomforest_configure_weights+0x240>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dab8:	4a61      	ldr	r2, [pc, #388]	; (800dc40 <randomforest_configure_weights+0x240>)
 800daba:	6013      	str	r3, [r2, #0]
    label_classlabels_int64s_array.data = AI_PTR(g_randomforest_weights_map[0] + 16696);
 800dabc:	4b5b      	ldr	r3, [pc, #364]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	f244 1338 	movw	r3, #16696	; 0x4138
 800dac4:	4413      	add	r3, r2
 800dac6:	4a5e      	ldr	r2, [pc, #376]	; (800dc40 <randomforest_configure_weights+0x240>)
 800dac8:	6093      	str	r3, [r2, #8]
    label_classlabels_int64s_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 16696);
 800daca:	4b58      	ldr	r3, [pc, #352]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	f244 1338 	movw	r3, #16696	; 0x4138
 800dad2:	4413      	add	r3, r2
 800dad4:	4a5a      	ldr	r2, [pc, #360]	; (800dc40 <randomforest_configure_weights+0x240>)
 800dad6:	60d3      	str	r3, [r2, #12]
    
    label_nodes_values_array.format |= AI_FMT_FLAG_CONST;
 800dad8:	4b5a      	ldr	r3, [pc, #360]	; (800dc44 <randomforest_configure_weights+0x244>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dae0:	4a58      	ldr	r2, [pc, #352]	; (800dc44 <randomforest_configure_weights+0x244>)
 800dae2:	6013      	str	r3, [r2, #0]
    label_nodes_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 16716);
 800dae4:	4b51      	ldr	r3, [pc, #324]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	f244 134c 	movw	r3, #16716	; 0x414c
 800daec:	4413      	add	r3, r2
 800daee:	4a55      	ldr	r2, [pc, #340]	; (800dc44 <randomforest_configure_weights+0x244>)
 800daf0:	6093      	str	r3, [r2, #8]
    label_nodes_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 16716);
 800daf2:	4b4e      	ldr	r3, [pc, #312]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	f244 134c 	movw	r3, #16716	; 0x414c
 800dafa:	4413      	add	r3, r2
 800dafc:	4a51      	ldr	r2, [pc, #324]	; (800dc44 <randomforest_configure_weights+0x244>)
 800dafe:	60d3      	str	r3, [r2, #12]
    
    label_base_values_array.format |= AI_FMT_FLAG_CONST;
 800db00:	4b51      	ldr	r3, [pc, #324]	; (800dc48 <randomforest_configure_weights+0x248>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db08:	4a4f      	ldr	r2, [pc, #316]	; (800dc48 <randomforest_configure_weights+0x248>)
 800db0a:	6013      	str	r3, [r2, #0]
    label_base_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 27752);
 800db0c:	4b47      	ldr	r3, [pc, #284]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	f646 4368 	movw	r3, #27752	; 0x6c68
 800db14:	4413      	add	r3, r2
 800db16:	4a4c      	ldr	r2, [pc, #304]	; (800dc48 <randomforest_configure_weights+0x248>)
 800db18:	6093      	str	r3, [r2, #8]
    label_base_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 27752);
 800db1a:	4b44      	ldr	r3, [pc, #272]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	f646 4368 	movw	r3, #27752	; 0x6c68
 800db22:	4413      	add	r3, r2
 800db24:	4a48      	ldr	r2, [pc, #288]	; (800dc48 <randomforest_configure_weights+0x248>)
 800db26:	60d3      	str	r3, [r2, #12]
    
    label_nodes_truenodeids_array.format |= AI_FMT_FLAG_CONST;
 800db28:	4b48      	ldr	r3, [pc, #288]	; (800dc4c <randomforest_configure_weights+0x24c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db30:	4a46      	ldr	r2, [pc, #280]	; (800dc4c <randomforest_configure_weights+0x24c>)
 800db32:	6013      	str	r3, [r2, #0]
    label_nodes_truenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 27772);
 800db34:	4b3d      	ldr	r3, [pc, #244]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	f646 437c 	movw	r3, #27772	; 0x6c7c
 800db3c:	4413      	add	r3, r2
 800db3e:	4a43      	ldr	r2, [pc, #268]	; (800dc4c <randomforest_configure_weights+0x24c>)
 800db40:	6093      	str	r3, [r2, #8]
    label_nodes_truenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 27772);
 800db42:	4b3a      	ldr	r3, [pc, #232]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	f646 437c 	movw	r3, #27772	; 0x6c7c
 800db4a:	4413      	add	r3, r2
 800db4c:	4a3f      	ldr	r2, [pc, #252]	; (800dc4c <randomforest_configure_weights+0x24c>)
 800db4e:	60d3      	str	r3, [r2, #12]
    
    label_class_ids_array.format |= AI_FMT_FLAG_CONST;
 800db50:	4b3f      	ldr	r3, [pc, #252]	; (800dc50 <randomforest_configure_weights+0x250>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db58:	4a3d      	ldr	r2, [pc, #244]	; (800dc50 <randomforest_configure_weights+0x250>)
 800db5a:	6013      	str	r3, [r2, #0]
    label_class_ids_array.data = AI_PTR(g_randomforest_weights_map[0] + 33292);
 800db5c:	4b33      	ldr	r3, [pc, #204]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	f248 230c 	movw	r3, #33292	; 0x820c
 800db64:	4413      	add	r3, r2
 800db66:	4a3a      	ldr	r2, [pc, #232]	; (800dc50 <randomforest_configure_weights+0x250>)
 800db68:	6093      	str	r3, [r2, #8]
    label_class_ids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 33292);
 800db6a:	4b30      	ldr	r3, [pc, #192]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	f248 230c 	movw	r3, #33292	; 0x820c
 800db72:	4413      	add	r3, r2
 800db74:	4a36      	ldr	r2, [pc, #216]	; (800dc50 <randomforest_configure_weights+0x250>)
 800db76:	60d3      	str	r3, [r2, #12]
    
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 800db78:	4b36      	ldr	r3, [pc, #216]	; (800dc54 <randomforest_configure_weights+0x254>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db80:	4a34      	ldr	r2, [pc, #208]	; (800dc54 <randomforest_configure_weights+0x254>)
 800db82:	6013      	str	r3, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_randomforest_weights_map[0] + 47172);
 800db84:	4b29      	ldr	r3, [pc, #164]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	f64b 0344 	movw	r3, #47172	; 0xb844
 800db8c:	4413      	add	r3, r2
 800db8e:	4a31      	ldr	r2, [pc, #196]	; (800dc54 <randomforest_configure_weights+0x254>)
 800db90:	6093      	str	r3, [r2, #8]
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 47172);
 800db92:	4b26      	ldr	r3, [pc, #152]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	f64b 0344 	movw	r3, #47172	; 0xb844
 800db9a:	4413      	add	r3, r2
 800db9c:	4a2d      	ldr	r2, [pc, #180]	; (800dc54 <randomforest_configure_weights+0x254>)
 800db9e:	60d3      	str	r3, [r2, #12]
    
    label_nodes_falsenodeids_array.format |= AI_FMT_FLAG_CONST;
 800dba0:	4b2d      	ldr	r3, [pc, #180]	; (800dc58 <randomforest_configure_weights+0x258>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dba8:	4a2b      	ldr	r2, [pc, #172]	; (800dc58 <randomforest_configure_weights+0x258>)
 800dbaa:	6013      	str	r3, [r2, #0]
    label_nodes_falsenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 47180);
 800dbac:	4b1f      	ldr	r3, [pc, #124]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	f64b 034c 	movw	r3, #47180	; 0xb84c
 800dbb4:	4413      	add	r3, r2
 800dbb6:	4a28      	ldr	r2, [pc, #160]	; (800dc58 <randomforest_configure_weights+0x258>)
 800dbb8:	6093      	str	r3, [r2, #8]
    label_nodes_falsenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 47180);
 800dbba:	4b1c      	ldr	r3, [pc, #112]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	f64b 034c 	movw	r3, #47180	; 0xb84c
 800dbc2:	4413      	add	r3, r2
 800dbc4:	4a24      	ldr	r2, [pc, #144]	; (800dc58 <randomforest_configure_weights+0x258>)
 800dbc6:	60d3      	str	r3, [r2, #12]
    
    label_class_weights_array.format |= AI_FMT_FLAG_CONST;
 800dbc8:	4b24      	ldr	r3, [pc, #144]	; (800dc5c <randomforest_configure_weights+0x25c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbd0:	4a22      	ldr	r2, [pc, #136]	; (800dc5c <randomforest_configure_weights+0x25c>)
 800dbd2:	6013      	str	r3, [r2, #0]
    label_class_weights_array.data = AI_PTR(g_randomforest_weights_map[0] + 52700);
 800dbd4:	4b15      	ldr	r3, [pc, #84]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	f64c 53dc 	movw	r3, #52700	; 0xcddc
 800dbdc:	4413      	add	r3, r2
 800dbde:	4a1f      	ldr	r2, [pc, #124]	; (800dc5c <randomforest_configure_weights+0x25c>)
 800dbe0:	6093      	str	r3, [r2, #8]
    label_class_weights_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 52700);
 800dbe2:	4b12      	ldr	r3, [pc, #72]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	f64c 53dc 	movw	r3, #52700	; 0xcddc
 800dbea:	4413      	add	r3, r2
 800dbec:	4a1b      	ldr	r2, [pc, #108]	; (800dc5c <randomforest_configure_weights+0x25c>)
 800dbee:	60d3      	str	r3, [r2, #12]
    
    label_nb_node_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 800dbf0:	4b1b      	ldr	r3, [pc, #108]	; (800dc60 <randomforest_configure_weights+0x260>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbf8:	4a19      	ldr	r2, [pc, #100]	; (800dc60 <randomforest_configure_weights+0x260>)
 800dbfa:	6013      	str	r3, [r2, #0]
    label_nb_node_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 80460);
 800dbfc:	4b0b      	ldr	r3, [pc, #44]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	4b18      	ldr	r3, [pc, #96]	; (800dc64 <randomforest_configure_weights+0x264>)
 800dc02:	4413      	add	r3, r2
 800dc04:	4a16      	ldr	r2, [pc, #88]	; (800dc60 <randomforest_configure_weights+0x260>)
 800dc06:	6093      	str	r3, [r2, #8]
    label_nb_node_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 80460);
 800dc08:	4b08      	ldr	r3, [pc, #32]	; (800dc2c <randomforest_configure_weights+0x22c>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	4b15      	ldr	r3, [pc, #84]	; (800dc64 <randomforest_configure_weights+0x264>)
 800dc0e:	4413      	add	r3, r2
 800dc10:	4a13      	ldr	r2, [pc, #76]	; (800dc60 <randomforest_configure_weights+0x260>)
 800dc12:	60d3      	str	r3, [r2, #12]
    
    return true;
 800dc14:	2301      	movs	r3, #1
 800dc16:	e005      	b.n	800dc24 <randomforest_configure_weights+0x224>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800dc18:	2212      	movs	r2, #18
 800dc1a:	2130      	movs	r1, #48	; 0x30
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fb89 	bl	800e334 <ai_platform_network_set_error>
  return false;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	240059a8 	.word	0x240059a8
 800dc30:	2400332c 	.word	0x2400332c
 800dc34:	2400334c 	.word	0x2400334c
 800dc38:	2400335c 	.word	0x2400335c
 800dc3c:	2400336c 	.word	0x2400336c
 800dc40:	2400337c 	.word	0x2400337c
 800dc44:	2400338c 	.word	0x2400338c
 800dc48:	2400339c 	.word	0x2400339c
 800dc4c:	240033ac 	.word	0x240033ac
 800dc50:	240033bc 	.word	0x240033bc
 800dc54:	240033cc 	.word	0x240033cc
 800dc58:	240033dc 	.word	0x240033dc
 800dc5c:	240033ec 	.word	0x240033ec
 800dc60:	2400340c 	.word	0x2400340c
 800dc64:	00013a4c 	.word	0x00013a4c

0800dc68 <ai_randomforest_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_randomforest_get_error(ai_handle network)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fa53 	bl	800e11c <ai_platform_network_get_error>
 800dc76:	4603      	mov	r3, r0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <ai_randomforest_create>:

AI_API_ENTRY
ai_error ai_randomforest_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af02      	add	r7, sp, #8
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9301      	str	r3, [sp, #4]
 800dc8e:	2305      	movs	r3, #5
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	2301      	movs	r3, #1
 800dc94:	4a04      	ldr	r2, [pc, #16]	; (800dca8 <ai_randomforest_create+0x28>)
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fe65 	bl	800e968 <ai_platform_network_create>
 800dc9e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	240039a8 	.word	0x240039a8

0800dcac <ai_randomforest_create_and_init>:

AI_API_ENTRY
ai_error ai_randomforest_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b096      	sub	sp, #88	; 0x58
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_randomforest_create(network, AI_RANDOMFOREST_DATA_CONFIG);
 800dcb8:	2100      	movs	r1, #0
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f7ff ffe0 	bl	800dc80 <ai_randomforest_create>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800dcc4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <ai_randomforest_create_and_init+0x24>
        return err;
 800dccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcce:	e05d      	b.n	800dd8c <ai_randomforest_create_and_init+0xe0>
    if (ai_randomforest_data_params_get(&params) != true) {
 800dcd0:	f107 0314 	add.w	r3, r7, #20
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 f8dd 	bl	800de94 <ai_randomforest_data_params_get>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	f083 0301 	eor.w	r3, r3, #1
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d008      	beq.n	800dcf8 <ai_randomforest_create_and_init+0x4c>
        err = ai_randomforest_get_error(*network);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff ffbc 	bl	800dc68 <ai_randomforest_get_error>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800dcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf6:	e049      	b.n	800dd8c <ai_randomforest_create_and_init+0xe0>
    }
#if defined(AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d016      	beq.n	800dd2c <ai_randomforest_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800dcfe:	2300      	movs	r3, #0
 800dd00:	657b      	str	r3, [r7, #84]	; 0x54
 800dd02:	e00e      	b.n	800dd22 <ai_randomforest_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800dd04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	f107 0314 	add.w	r3, r7, #20
 800dd14:	330c      	adds	r3, #12
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 f922 	bl	800df60 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800dd1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd1e:	3301      	adds	r3, #1
 800dd20:	657b      	str	r3, [r7, #84]	; 0x54
 800dd22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd24:	461a      	mov	r2, r3
 800dd26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	dbeb      	blt.n	800dd04 <ai_randomforest_create_and_init+0x58>
    }
#endif
#if defined(AI_RANDOMFOREST_DATA_WEIGHTS_COUNT)
    if (weights) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d016      	beq.n	800dd60 <ai_randomforest_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800dd32:	2300      	movs	r3, #0
 800dd34:	653b      	str	r3, [r7, #80]	; 0x50
 800dd36:	e00e      	b.n	800dd56 <ai_randomforest_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800dd38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	4413      	add	r3, r2
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	f107 0314 	add.w	r3, r7, #20
 800dd48:	3304      	adds	r3, #4
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 f908 	bl	800df60 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800dd50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd52:	3301      	adds	r3, #1
 800dd54:	653b      	str	r3, [r7, #80]	; 0x50
 800dd56:	8b7b      	ldrh	r3, [r7, #26]
 800dd58:	461a      	mov	r2, r3
 800dd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	dbeb      	blt.n	800dd38 <ai_randomforest_create_and_init+0x8c>
    }
#endif
    if (ai_randomforest_init(*network, &params) != true) {
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f107 0214 	add.w	r2, r7, #20
 800dd68:	4611      	mov	r1, r2
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 f846 	bl	800ddfc <ai_randomforest_init>
 800dd70:	4603      	mov	r3, r0
 800dd72:	f083 0301 	eor.w	r3, r3, #1
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d006      	beq.n	800dd8a <ai_randomforest_create_and_init+0xde>
        err = ai_randomforest_get_error(*network);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff ff71 	bl	800dc68 <ai_randomforest_get_error>
 800dd86:	4603      	mov	r3, r0
 800dd88:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800dd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3758      	adds	r7, #88	; 0x58
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <ai_randomforest_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d104      	bne.n	800ddae <ai_randomforest_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800dda4:	4b06      	ldr	r3, [pc, #24]	; (800ddc0 <ai_randomforest_inputs_get+0x2c>)
 800dda6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4a06      	ldr	r2, [pc, #24]	; (800ddc4 <ai_randomforest_inputs_get+0x30>)
 800ddac:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 fac5 	bl	800e340 <ai_platform_inputs_get>
 800ddb6:	4603      	mov	r3, r0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	240039a8 	.word	0x240039a8
 800ddc4:	a1c00100 	.word	0xa1c00100

0800ddc8 <ai_randomforest_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d104      	bne.n	800dde2 <ai_randomforest_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ddd8:	4b06      	ldr	r3, [pc, #24]	; (800ddf4 <ai_randomforest_outputs_get+0x2c>)
 800ddda:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a06      	ldr	r2, [pc, #24]	; (800ddf8 <ai_randomforest_outputs_get+0x30>)
 800dde0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fc37 	bl	800e658 <ai_platform_outputs_get>
 800ddea:	4603      	mov	r3, r0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	240039a8 	.word	0x240039a8
 800ddf8:	a1c00100 	.word	0xa1c00100

0800ddfc <ai_randomforest_init>:
}

AI_API_ENTRY
ai_bool ai_randomforest_init(
  ai_handle network, const ai_network_params* params)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 ff87 	bl	800ed1c <ai_platform_network_init>
 800de0e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <ai_randomforest_init+0x1e>
 800de16:	2300      	movs	r3, #0
 800de18:	e028      	b.n	800de6c <ai_randomforest_init+0x70>

  ai_bool ok = true;
 800de1a:	2301      	movs	r3, #1
 800de1c:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_weights(net_ctx, params);
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff fded 	bl	800da00 <randomforest_configure_weights>
 800de26:	4603      	mov	r3, r0
 800de28:	461a      	mov	r2, r3
 800de2a:	7afb      	ldrb	r3, [r7, #11]
 800de2c:	4013      	ands	r3, r2
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bf14      	ite	ne
 800de32:	2301      	movne	r3, #1
 800de34:	2300      	moveq	r3, #0
 800de36:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_activations(net_ctx, params);
 800de38:	6839      	ldr	r1, [r7, #0]
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f7ff fd98 	bl	800d970 <randomforest_configure_activations>
 800de40:	4603      	mov	r3, r0
 800de42:	461a      	mov	r2, r3
 800de44:	7afb      	ldrb	r3, [r7, #11]
 800de46:	4013      	ands	r3, r2
 800de48:	2b00      	cmp	r3, #0
 800de4a:	bf14      	ite	ne
 800de4c:	2301      	movne	r3, #1
 800de4e:	2300      	moveq	r3, #0
 800de50:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f001 f8fe 	bl	800f054 <ai_platform_network_post_init>
 800de58:	4603      	mov	r3, r0
 800de5a:	461a      	mov	r2, r3
 800de5c:	7afb      	ldrb	r3, [r7, #11]
 800de5e:	4013      	ands	r3, r2
 800de60:	2b00      	cmp	r3, #0
 800de62:	bf14      	ite	ne
 800de64:	2301      	movne	r3, #1
 800de66:	2300      	moveq	r3, #0
 800de68:	72fb      	strb	r3, [r7, #11]

  return ok;
 800de6a:	7afb      	ldrb	r3, [r7, #11]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <ai_randomforest_run>:


AI_API_ENTRY
ai_i32 ai_randomforest_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	68b9      	ldr	r1, [r7, #8]
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f001 fa0f 	bl	800f2a8 <ai_platform_network_process>
 800de8a:	4603      	mov	r3, r0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <ai_randomforest_data_params_get>:
 * @ingroup randomforest_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_randomforest_data_params_get(ai_network_params* params)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <ai_randomforest_data_params_get+0x12>
 800dea2:	2300      	movs	r3, #0
 800dea4:	e016      	b.n	800ded4 <ai_randomforest_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800dea6:	4a0d      	ldr	r2, [pc, #52]	; (800dedc <ai_randomforest_data_params_get+0x48>)
 800dea8:	f107 0310 	add.w	r3, r7, #16
 800deac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800deb0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT, g_randomforest_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800deb4:	4a0a      	ldr	r2, [pc, #40]	; (800dee0 <ai_randomforest_data_params_get+0x4c>)
 800deb6:	f107 0308 	add.w	r3, r7, #8
 800deba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800debe:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_WEIGHTS_COUNT, g_randomforest_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800dec2:	f107 0210 	add.w	r2, r7, #16
 800dec6:	f107 0308 	add.w	r3, r7, #8
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f90b 	bl	800e0e8 <ai_platform_bind_network_params>
 800ded2:	4603      	mov	r3, r0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	080117e0 	.word	0x080117e0
 800dee0:	080117e8 	.word	0x080117e8

0800dee4 <ai_buffer_get_size>:
 800dee4:	b368      	cbz	r0, 800df42 <ai_buffer_get_size+0x5e>
 800dee6:	4b17      	ldr	r3, [pc, #92]	; (800df44 <ai_buffer_get_size+0x60>)
 800dee8:	4a17      	ldr	r2, [pc, #92]	; (800df48 <ai_buffer_get_size+0x64>)
 800deea:	b410      	push	{r4}
 800deec:	6804      	ldr	r4, [r0, #0]
 800deee:	4023      	ands	r3, r4
 800def0:	4293      	cmp	r3, r2
 800def2:	d123      	bne.n	800df3c <ai_buffer_get_size+0x58>
 800def4:	b311      	cbz	r1, 800df3c <ai_buffer_get_size+0x58>
 800def6:	6984      	ldr	r4, [r0, #24]
 800def8:	6862      	ldr	r2, [r4, #4]
 800defa:	321f      	adds	r2, #31
 800defc:	f022 021f 	bic.w	r2, r2, #31
 800df00:	7d03      	ldrb	r3, [r0, #20]
 800df02:	6941      	ldr	r1, [r0, #20]
 800df04:	f1a3 0301 	sub.w	r3, r3, #1
 800df08:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800df0c:	fab3 f383 	clz	r3, r3
 800df10:	095b      	lsrs	r3, r3, #5
 800df12:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800df16:	da0c      	bge.n	800df32 <ai_buffer_get_size+0x4e>
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d103      	bne.n	800df24 <ai_buffer_get_size+0x40>
 800df1c:	2802      	cmp	r0, #2
 800df1e:	f04f 0302 	mov.w	r3, #2
 800df22:	d006      	beq.n	800df32 <ai_buffer_get_size+0x4e>
 800df24:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800df28:	3301      	adds	r3, #1
 800df2a:	4298      	cmp	r0, r3
 800df2c:	fb01 f202 	mul.w	r2, r1, r2
 800df30:	d1f2      	bne.n	800df18 <ai_buffer_get_size+0x34>
 800df32:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800df36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	6984      	ldr	r4, [r0, #24]
 800df3e:	6862      	ldr	r2, [r4, #4]
 800df40:	e7de      	b.n	800df00 <ai_buffer_get_size+0x1c>
 800df42:	4770      	bx	lr
 800df44:	017fffff 	.word	0x017fffff
 800df48:	000400c0 	.word	0x000400c0

0800df4c <ai_buffer_array_sane>:
 800df4c:	b138      	cbz	r0, 800df5e <ai_buffer_array_sane+0x12>
 800df4e:	6843      	ldr	r3, [r0, #4]
 800df50:	b123      	cbz	r3, 800df5c <ai_buffer_array_sane+0x10>
 800df52:	8840      	ldrh	r0, [r0, #2]
 800df54:	3800      	subs	r0, #0
 800df56:	bf18      	it	ne
 800df58:	2001      	movne	r0, #1
 800df5a:	4770      	bx	lr
 800df5c:	4618      	mov	r0, r3
 800df5e:	4770      	bx	lr

0800df60 <ai_buffer_array_item_set_address>:
 800df60:	b150      	cbz	r0, 800df78 <ai_buffer_array_item_set_address+0x18>
 800df62:	6843      	ldr	r3, [r0, #4]
 800df64:	b14b      	cbz	r3, 800df7a <ai_buffer_array_item_set_address+0x1a>
 800df66:	8840      	ldrh	r0, [r0, #2]
 800df68:	b900      	cbnz	r0, 800df6c <ai_buffer_array_item_set_address+0xc>
 800df6a:	4770      	bx	lr
 800df6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800df70:	2001      	movs	r0, #1
 800df72:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df76:	604a      	str	r2, [r1, #4]
 800df78:	4770      	bx	lr
 800df7a:	4618      	mov	r0, r3
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop

0800df80 <_ai_platform_acquire_crc>:
 800df80:	2001      	movs	r0, #1
 800df82:	4770      	bx	lr

0800df84 <_ai_platform_release_crc>:
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop

0800df88 <ai_platform_get_weights_map>:
 800df88:	2900      	cmp	r1, #0
 800df8a:	bf18      	it	ne
 800df8c:	2800      	cmpne	r0, #0
 800df8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df90:	bf0c      	ite	eq
 800df92:	2401      	moveq	r4, #1
 800df94:	2400      	movne	r4, #0
 800df96:	2a00      	cmp	r2, #0
 800df98:	bf08      	it	eq
 800df9a:	f044 0401 	orreq.w	r4, r4, #1
 800df9e:	b114      	cbz	r4, 800dfa6 <ai_platform_get_weights_map+0x1e>
 800dfa0:	2400      	movs	r4, #0
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfa6:	4616      	mov	r6, r2
 800dfa8:	4b22      	ldr	r3, [pc, #136]	; (800e034 <ai_platform_get_weights_map+0xac>)
 800dfaa:	6812      	ldr	r2, [r2, #0]
 800dfac:	4605      	mov	r5, r0
 800dfae:	460f      	mov	r7, r1
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d022      	beq.n	800dffa <ai_platform_get_weights_map+0x72>
 800dfb4:	6870      	ldr	r0, [r6, #4]
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d0f2      	beq.n	800dfa0 <ai_platform_get_weights_map+0x18>
 800dfba:	6806      	ldr	r6, [r0, #0]
 800dfbc:	429e      	cmp	r6, r3
 800dfbe:	d006      	beq.n	800dfce <ai_platform_get_weights_map+0x46>
 800dfc0:	f1a1 0401 	sub.w	r4, r1, #1
 800dfc4:	6028      	str	r0, [r5, #0]
 800dfc6:	fab4 f484 	clz	r4, r4
 800dfca:	0964      	lsrs	r4, r4, #5
 800dfcc:	e7e9      	b.n	800dfa2 <ai_platform_get_weights_map+0x1a>
 800dfce:	3d04      	subs	r5, #4
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	4621      	mov	r1, r4
 800dfd4:	e000      	b.n	800dfd8 <ai_platform_get_weights_map+0x50>
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800dfdc:	42b3      	cmp	r3, r6
 800dfde:	d025      	beq.n	800e02c <ai_platform_get_weights_map+0xa4>
 800dfe0:	f845 3f04 	str.w	r3, [r5, #4]!
 800dfe4:	1c4b      	adds	r3, r1, #1
 800dfe6:	429f      	cmp	r7, r3
 800dfe8:	d8f5      	bhi.n	800dfd6 <ai_platform_get_weights_map+0x4e>
 800dfea:	d1da      	bne.n	800dfa2 <ai_platform_get_weights_map+0x1a>
 800dfec:	3102      	adds	r1, #2
 800dfee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800dff2:	42b3      	cmp	r3, r6
 800dff4:	d1d5      	bne.n	800dfa2 <ai_platform_get_weights_map+0x1a>
 800dff6:	2401      	movs	r4, #1
 800dff8:	e7d3      	b.n	800dfa2 <ai_platform_get_weights_map+0x1a>
 800dffa:	1d30      	adds	r0, r6, #4
 800dffc:	f7ff ffa6 	bl	800df4c <ai_buffer_array_sane>
 800e000:	2800      	cmp	r0, #0
 800e002:	d0cd      	beq.n	800dfa0 <ai_platform_get_weights_map+0x18>
 800e004:	88f3      	ldrh	r3, [r6, #6]
 800e006:	429f      	cmp	r7, r3
 800e008:	d1ca      	bne.n	800dfa0 <ai_platform_get_weights_map+0x18>
 800e00a:	3d04      	subs	r5, #4
 800e00c:	4622      	mov	r2, r4
 800e00e:	68b3      	ldr	r3, [r6, #8]
 800e010:	4423      	add	r3, r4
 800e012:	341c      	adds	r4, #28
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	b123      	cbz	r3, 800e022 <ai_platform_get_weights_map+0x9a>
 800e018:	3201      	adds	r2, #1
 800e01a:	f845 3f04 	str.w	r3, [r5, #4]!
 800e01e:	4297      	cmp	r7, r2
 800e020:	d8f5      	bhi.n	800e00e <ai_platform_get_weights_map+0x86>
 800e022:	1abc      	subs	r4, r7, r2
 800e024:	fab4 f484 	clz	r4, r4
 800e028:	0964      	lsrs	r4, r4, #5
 800e02a:	e7ba      	b.n	800dfa2 <ai_platform_get_weights_map+0x1a>
 800e02c:	428f      	cmp	r7, r1
 800e02e:	d1b8      	bne.n	800dfa2 <ai_platform_get_weights_map+0x1a>
 800e030:	e7e1      	b.n	800dff6 <ai_platform_get_weights_map+0x6e>
 800e032:	bf00      	nop
 800e034:	a1facade 	.word	0xa1facade

0800e038 <ai_platform_get_activations_map>:
 800e038:	2900      	cmp	r1, #0
 800e03a:	bf18      	it	ne
 800e03c:	2800      	cmpne	r0, #0
 800e03e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e040:	bf0c      	ite	eq
 800e042:	2401      	moveq	r4, #1
 800e044:	2400      	movne	r4, #0
 800e046:	2a00      	cmp	r2, #0
 800e048:	bf08      	it	eq
 800e04a:	f044 0401 	orreq.w	r4, r4, #1
 800e04e:	b114      	cbz	r4, 800e056 <ai_platform_get_activations_map+0x1e>
 800e050:	2400      	movs	r4, #0
 800e052:	4620      	mov	r0, r4
 800e054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e056:	4616      	mov	r6, r2
 800e058:	4b22      	ldr	r3, [pc, #136]	; (800e0e4 <ai_platform_get_activations_map+0xac>)
 800e05a:	6812      	ldr	r2, [r2, #0]
 800e05c:	4605      	mov	r5, r0
 800e05e:	460f      	mov	r7, r1
 800e060:	429a      	cmp	r2, r3
 800e062:	d022      	beq.n	800e0aa <ai_platform_get_activations_map+0x72>
 800e064:	6a30      	ldr	r0, [r6, #32]
 800e066:	2800      	cmp	r0, #0
 800e068:	d0f2      	beq.n	800e050 <ai_platform_get_activations_map+0x18>
 800e06a:	6806      	ldr	r6, [r0, #0]
 800e06c:	429e      	cmp	r6, r3
 800e06e:	d006      	beq.n	800e07e <ai_platform_get_activations_map+0x46>
 800e070:	f1a1 0401 	sub.w	r4, r1, #1
 800e074:	6028      	str	r0, [r5, #0]
 800e076:	fab4 f484 	clz	r4, r4
 800e07a:	0964      	lsrs	r4, r4, #5
 800e07c:	e7e9      	b.n	800e052 <ai_platform_get_activations_map+0x1a>
 800e07e:	3d04      	subs	r5, #4
 800e080:	4602      	mov	r2, r0
 800e082:	4621      	mov	r1, r4
 800e084:	e000      	b.n	800e088 <ai_platform_get_activations_map+0x50>
 800e086:	4619      	mov	r1, r3
 800e088:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800e08c:	42b3      	cmp	r3, r6
 800e08e:	d026      	beq.n	800e0de <ai_platform_get_activations_map+0xa6>
 800e090:	f845 3f04 	str.w	r3, [r5, #4]!
 800e094:	1c4b      	adds	r3, r1, #1
 800e096:	429f      	cmp	r7, r3
 800e098:	d8f5      	bhi.n	800e086 <ai_platform_get_activations_map+0x4e>
 800e09a:	d1da      	bne.n	800e052 <ai_platform_get_activations_map+0x1a>
 800e09c:	3102      	adds	r1, #2
 800e09e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800e0a2:	42b3      	cmp	r3, r6
 800e0a4:	d1d5      	bne.n	800e052 <ai_platform_get_activations_map+0x1a>
 800e0a6:	2401      	movs	r4, #1
 800e0a8:	e7d3      	b.n	800e052 <ai_platform_get_activations_map+0x1a>
 800e0aa:	f106 000c 	add.w	r0, r6, #12
 800e0ae:	f7ff ff4d 	bl	800df4c <ai_buffer_array_sane>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d0cc      	beq.n	800e050 <ai_platform_get_activations_map+0x18>
 800e0b6:	89f3      	ldrh	r3, [r6, #14]
 800e0b8:	429f      	cmp	r7, r3
 800e0ba:	d1c9      	bne.n	800e050 <ai_platform_get_activations_map+0x18>
 800e0bc:	3d04      	subs	r5, #4
 800e0be:	4622      	mov	r2, r4
 800e0c0:	6933      	ldr	r3, [r6, #16]
 800e0c2:	4423      	add	r3, r4
 800e0c4:	341c      	adds	r4, #28
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	b123      	cbz	r3, 800e0d4 <ai_platform_get_activations_map+0x9c>
 800e0ca:	3201      	adds	r2, #1
 800e0cc:	f845 3f04 	str.w	r3, [r5, #4]!
 800e0d0:	4297      	cmp	r7, r2
 800e0d2:	d8f5      	bhi.n	800e0c0 <ai_platform_get_activations_map+0x88>
 800e0d4:	1abc      	subs	r4, r7, r2
 800e0d6:	fab4 f484 	clz	r4, r4
 800e0da:	0964      	lsrs	r4, r4, #5
 800e0dc:	e7b9      	b.n	800e052 <ai_platform_get_activations_map+0x1a>
 800e0de:	428f      	cmp	r7, r1
 800e0e0:	d1b7      	bne.n	800e052 <ai_platform_get_activations_map+0x1a>
 800e0e2:	e7e0      	b.n	800e0a6 <ai_platform_get_activations_map+0x6e>
 800e0e4:	a1facade 	.word	0xa1facade

0800e0e8 <ai_platform_bind_network_params>:
 800e0e8:	2a00      	cmp	r2, #0
 800e0ea:	bf18      	it	ne
 800e0ec:	2900      	cmpne	r1, #0
 800e0ee:	d010      	beq.n	800e112 <ai_platform_bind_network_params+0x2a>
 800e0f0:	b178      	cbz	r0, 800e112 <ai_platform_bind_network_params+0x2a>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	4808      	ldr	r0, [pc, #32]	; (800e118 <ai_platform_bind_network_params+0x30>)
 800e0f6:	f103 0c0c 	add.w	ip, r3, #12
 800e0fa:	f843 0b04 	str.w	r0, [r3], #4
 800e0fe:	c903      	ldmia	r1, {r0, r1}
 800e100:	e883 0003 	stmia.w	r3, {r0, r1}
 800e104:	2301      	movs	r3, #1
 800e106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e10a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e10e:	4618      	mov	r0, r3
 800e110:	4770      	bx	lr
 800e112:	2300      	movs	r3, #0
 800e114:	4618      	mov	r0, r3
 800e116:	4770      	bx	lr
 800e118:	a1facade 	.word	0xa1facade

0800e11c <ai_platform_network_get_error>:
 800e11c:	b510      	push	{r4, lr}
 800e11e:	2800      	cmp	r0, #0
 800e120:	d03f      	beq.n	800e1a2 <ai_platform_network_get_error+0x86>
 800e122:	4b7d      	ldr	r3, [pc, #500]	; (800e318 <ai_platform_network_get_error+0x1fc>)
 800e124:	4604      	mov	r4, r0
 800e126:	6802      	ldr	r2, [r0, #0]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d13a      	bne.n	800e1a2 <ai_platform_network_get_error+0x86>
 800e12c:	f7ff ff28 	bl	800df80 <_ai_platform_acquire_crc>
 800e130:	4b7a      	ldr	r3, [pc, #488]	; (800e31c <ai_platform_network_get_error+0x200>)
 800e132:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e13c:	189a      	adds	r2, r3, r2
 800e13e:	2a01      	cmp	r2, #1
 800e140:	f240 8086 	bls.w	800e250 <ai_platform_network_get_error+0x134>
 800e144:	f240 4249 	movw	r2, #1097	; 0x449
 800e148:	4293      	cmp	r3, r2
 800e14a:	f000 8081 	beq.w	800e250 <ai_platform_network_get_error+0x134>
 800e14e:	4a74      	ldr	r2, [pc, #464]	; (800e320 <ai_platform_network_get_error+0x204>)
 800e150:	6813      	ldr	r3, [r2, #0]
 800e152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e156:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e15a:	f000 8087 	beq.w	800e26c <ai_platform_network_get_error+0x150>
 800e15e:	6813      	ldr	r3, [r2, #0]
 800e160:	f240 4183 	movw	r1, #1155	; 0x483
 800e164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e168:	428b      	cmp	r3, r1
 800e16a:	f000 80a9 	beq.w	800e2c0 <ai_platform_network_get_error+0x1a4>
 800e16e:	6813      	ldr	r3, [r2, #0]
 800e170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e174:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e178:	f000 80c0 	beq.w	800e2fc <ai_platform_network_get_error+0x1e0>
 800e17c:	6813      	ldr	r3, [r2, #0]
 800e17e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e182:	2b00      	cmp	r3, #0
 800e184:	f040 8082 	bne.w	800e28c <ai_platform_network_get_error+0x170>
 800e188:	4a66      	ldr	r2, [pc, #408]	; (800e324 <ai_platform_network_get_error+0x208>)
 800e18a:	2301      	movs	r3, #1
 800e18c:	6093      	str	r3, [r2, #8]
 800e18e:	6893      	ldr	r3, [r2, #8]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1fc      	bne.n	800e18e <ai_platform_network_get_error+0x72>
 800e194:	4964      	ldr	r1, [pc, #400]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e196:	4b65      	ldr	r3, [pc, #404]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e198:	6011      	str	r1, [r2, #0]
 800e19a:	6812      	ldr	r2, [r2, #0]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d075      	beq.n	800e28c <ai_platform_network_get_error+0x170>
 800e1a0:	e7fe      	b.n	800e1a0 <ai_platform_network_get_error+0x84>
 800e1a2:	f7ff feed 	bl	800df80 <_ai_platform_acquire_crc>
 800e1a6:	4b5d      	ldr	r3, [pc, #372]	; (800e31c <ai_platform_network_get_error+0x200>)
 800e1a8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1b2:	185a      	adds	r2, r3, r1
 800e1b4:	2a01      	cmp	r2, #1
 800e1b6:	d929      	bls.n	800e20c <ai_platform_network_get_error+0xf0>
 800e1b8:	f240 4249 	movw	r2, #1097	; 0x449
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d025      	beq.n	800e20c <ai_platform_network_get_error+0xf0>
 800e1c0:	4a57      	ldr	r2, [pc, #348]	; (800e320 <ai_platform_network_get_error+0x204>)
 800e1c2:	6813      	ldr	r3, [r2, #0]
 800e1c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1c8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e1cc:	d02b      	beq.n	800e226 <ai_platform_network_get_error+0x10a>
 800e1ce:	6813      	ldr	r3, [r2, #0]
 800e1d0:	f240 4183 	movw	r1, #1155	; 0x483
 800e1d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1d8:	428b      	cmp	r3, r1
 800e1da:	d060      	beq.n	800e29e <ai_platform_network_get_error+0x182>
 800e1dc:	6813      	ldr	r3, [r2, #0]
 800e1de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1e2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e1e6:	d07c      	beq.n	800e2e2 <ai_platform_network_get_error+0x1c6>
 800e1e8:	6813      	ldr	r3, [r2, #0]
 800e1ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d129      	bne.n	800e246 <ai_platform_network_get_error+0x12a>
 800e1f2:	4a4c      	ldr	r2, [pc, #304]	; (800e324 <ai_platform_network_get_error+0x208>)
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	6093      	str	r3, [r2, #8]
 800e1f8:	6893      	ldr	r3, [r2, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1fc      	bne.n	800e1f8 <ai_platform_network_get_error+0xdc>
 800e1fe:	494a      	ldr	r1, [pc, #296]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e200:	4b4a      	ldr	r3, [pc, #296]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e202:	6011      	str	r1, [r2, #0]
 800e204:	6812      	ldr	r2, [r2, #0]
 800e206:	429a      	cmp	r2, r3
 800e208:	d01d      	beq.n	800e246 <ai_platform_network_get_error+0x12a>
 800e20a:	e7fe      	b.n	800e20a <ai_platform_network_get_error+0xee>
 800e20c:	4a45      	ldr	r2, [pc, #276]	; (800e324 <ai_platform_network_get_error+0x208>)
 800e20e:	2301      	movs	r3, #1
 800e210:	6093      	str	r3, [r2, #8]
 800e212:	6893      	ldr	r3, [r2, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1fc      	bne.n	800e212 <ai_platform_network_get_error+0xf6>
 800e218:	4943      	ldr	r1, [pc, #268]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e21a:	4b44      	ldr	r3, [pc, #272]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e21c:	6011      	str	r1, [r2, #0]
 800e21e:	6812      	ldr	r2, [r2, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d010      	beq.n	800e246 <ai_platform_network_get_error+0x12a>
 800e224:	e7fe      	b.n	800e224 <ai_platform_network_get_error+0x108>
 800e226:	4a42      	ldr	r2, [pc, #264]	; (800e330 <ai_platform_network_get_error+0x214>)
 800e228:	2301      	movs	r3, #1
 800e22a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e22e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1fb      	bne.n	800e22e <ai_platform_network_get_error+0x112>
 800e236:	493c      	ldr	r1, [pc, #240]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e238:	4b3c      	ldr	r3, [pc, #240]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e23a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e23e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e242:	429a      	cmp	r2, r3
 800e244:	d111      	bne.n	800e26a <ai_platform_network_get_error+0x14e>
 800e246:	f7ff fe9d 	bl	800df84 <_ai_platform_release_crc>
 800e24a:	f241 0010 	movw	r0, #4112	; 0x1010
 800e24e:	bd10      	pop	{r4, pc}
 800e250:	4a34      	ldr	r2, [pc, #208]	; (800e324 <ai_platform_network_get_error+0x208>)
 800e252:	2301      	movs	r3, #1
 800e254:	6093      	str	r3, [r2, #8]
 800e256:	6893      	ldr	r3, [r2, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1fc      	bne.n	800e256 <ai_platform_network_get_error+0x13a>
 800e25c:	4932      	ldr	r1, [pc, #200]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e25e:	4b33      	ldr	r3, [pc, #204]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e260:	6011      	str	r1, [r2, #0]
 800e262:	6812      	ldr	r2, [r2, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d011      	beq.n	800e28c <ai_platform_network_get_error+0x170>
 800e268:	e7fe      	b.n	800e268 <ai_platform_network_get_error+0x14c>
 800e26a:	e7fe      	b.n	800e26a <ai_platform_network_get_error+0x14e>
 800e26c:	4a30      	ldr	r2, [pc, #192]	; (800e330 <ai_platform_network_get_error+0x214>)
 800e26e:	2301      	movs	r3, #1
 800e270:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e274:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1fb      	bne.n	800e274 <ai_platform_network_get_error+0x158>
 800e27c:	492a      	ldr	r1, [pc, #168]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e27e:	4b2b      	ldr	r3, [pc, #172]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e280:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e284:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e288:	429a      	cmp	r2, r3
 800e28a:	d107      	bne.n	800e29c <ai_platform_network_get_error+0x180>
 800e28c:	f7ff fe7a 	bl	800df84 <_ai_platform_release_crc>
 800e290:	f104 0010 	add.w	r0, r4, #16
 800e294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e298:	f001 bae6 	b.w	800f868 <core_get_error>
 800e29c:	e7fe      	b.n	800e29c <ai_platform_network_get_error+0x180>
 800e29e:	4a24      	ldr	r2, [pc, #144]	; (800e330 <ai_platform_network_get_error+0x214>)
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e2a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1fb      	bne.n	800e2a6 <ai_platform_network_get_error+0x18a>
 800e2ae:	491e      	ldr	r1, [pc, #120]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e2b0:	4b1e      	ldr	r3, [pc, #120]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e2b2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e2b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d0c3      	beq.n	800e246 <ai_platform_network_get_error+0x12a>
 800e2be:	e7fe      	b.n	800e2be <ai_platform_network_get_error+0x1a2>
 800e2c0:	4a1b      	ldr	r2, [pc, #108]	; (800e330 <ai_platform_network_get_error+0x214>)
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e2c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1fb      	bne.n	800e2c8 <ai_platform_network_get_error+0x1ac>
 800e2d0:	4915      	ldr	r1, [pc, #84]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e2d2:	4b16      	ldr	r3, [pc, #88]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e2d4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e2d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d0d5      	beq.n	800e28c <ai_platform_network_get_error+0x170>
 800e2e0:	e7fe      	b.n	800e2e0 <ai_platform_network_get_error+0x1c4>
 800e2e2:	4a10      	ldr	r2, [pc, #64]	; (800e324 <ai_platform_network_get_error+0x208>)
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	6093      	str	r3, [r2, #8]
 800e2e8:	6893      	ldr	r3, [r2, #8]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1fc      	bne.n	800e2e8 <ai_platform_network_get_error+0x1cc>
 800e2ee:	490e      	ldr	r1, [pc, #56]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e2f0:	4b0e      	ldr	r3, [pc, #56]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e2f2:	6011      	str	r1, [r2, #0]
 800e2f4:	6812      	ldr	r2, [r2, #0]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d0a5      	beq.n	800e246 <ai_platform_network_get_error+0x12a>
 800e2fa:	e7fe      	b.n	800e2fa <ai_platform_network_get_error+0x1de>
 800e2fc:	4a09      	ldr	r2, [pc, #36]	; (800e324 <ai_platform_network_get_error+0x208>)
 800e2fe:	2301      	movs	r3, #1
 800e300:	6093      	str	r3, [r2, #8]
 800e302:	6893      	ldr	r3, [r2, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1fc      	bne.n	800e302 <ai_platform_network_get_error+0x1e6>
 800e308:	4907      	ldr	r1, [pc, #28]	; (800e328 <ai_platform_network_get_error+0x20c>)
 800e30a:	4b08      	ldr	r3, [pc, #32]	; (800e32c <ai_platform_network_get_error+0x210>)
 800e30c:	6011      	str	r1, [r2, #0]
 800e30e:	6812      	ldr	r2, [r2, #0]
 800e310:	429a      	cmp	r2, r3
 800e312:	d0bb      	beq.n	800e28c <ai_platform_network_get_error+0x170>
 800e314:	e7fe      	b.n	800e314 <ai_platform_network_get_error+0x1f8>
 800e316:	bf00      	nop
 800e318:	a1c00100 	.word	0xa1c00100
 800e31c:	e0042000 	.word	0xe0042000
 800e320:	5c001000 	.word	0x5c001000
 800e324:	40023000 	.word	0x40023000
 800e328:	f407a5c2 	.word	0xf407a5c2
 800e32c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e330:	58024000 	.word	0x58024000

0800e334 <ai_platform_network_set_error>:
 800e334:	b110      	cbz	r0, 800e33c <ai_platform_network_set_error+0x8>
 800e336:	3010      	adds	r0, #16
 800e338:	f001 ba9c 	b.w	800f874 <core_set_error>
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop

0800e340 <ai_platform_inputs_get>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	b085      	sub	sp, #20
 800e346:	9102      	str	r1, [sp, #8]
 800e348:	2800      	cmp	r0, #0
 800e34a:	f000 8093 	beq.w	800e474 <ai_platform_inputs_get+0x134>
 800e34e:	4baa      	ldr	r3, [pc, #680]	; (800e5f8 <ai_platform_inputs_get+0x2b8>)
 800e350:	4681      	mov	r9, r0
 800e352:	6802      	ldr	r2, [r0, #0]
 800e354:	429a      	cmp	r2, r3
 800e356:	f040 808d 	bne.w	800e474 <ai_platform_inputs_get+0x134>
 800e35a:	f7ff fe11 	bl	800df80 <_ai_platform_acquire_crc>
 800e35e:	4ba7      	ldr	r3, [pc, #668]	; (800e5fc <ai_platform_inputs_get+0x2bc>)
 800e360:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e36a:	189a      	adds	r2, r3, r2
 800e36c:	2a01      	cmp	r2, #1
 800e36e:	f240 80da 	bls.w	800e526 <ai_platform_inputs_get+0x1e6>
 800e372:	f240 4249 	movw	r2, #1097	; 0x449
 800e376:	4293      	cmp	r3, r2
 800e378:	f000 80d5 	beq.w	800e526 <ai_platform_inputs_get+0x1e6>
 800e37c:	4aa0      	ldr	r2, [pc, #640]	; (800e600 <ai_platform_inputs_get+0x2c0>)
 800e37e:	6813      	ldr	r3, [r2, #0]
 800e380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e384:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e388:	f000 80dc 	beq.w	800e544 <ai_platform_inputs_get+0x204>
 800e38c:	6813      	ldr	r3, [r2, #0]
 800e38e:	f240 4183 	movw	r1, #1155	; 0x483
 800e392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e396:	428b      	cmp	r3, r1
 800e398:	f000 810e 	beq.w	800e5b8 <ai_platform_inputs_get+0x278>
 800e39c:	6813      	ldr	r3, [r2, #0]
 800e39e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e3a2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e3a6:	f000 8143 	beq.w	800e630 <ai_platform_inputs_get+0x2f0>
 800e3aa:	6813      	ldr	r3, [r2, #0]
 800e3ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 8113 	beq.w	800e5dc <ai_platform_inputs_get+0x29c>
 800e3b6:	f7ff fde5 	bl	800df84 <_ai_platform_release_crc>
 800e3ba:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f000 80d2 	beq.w	800e568 <ai_platform_inputs_get+0x228>
 800e3c4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800e3c8:	f1ba 0f00 	cmp.w	sl, #0
 800e3cc:	f000 80cc 	beq.w	800e568 <ai_platform_inputs_get+0x228>
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3d6:	460d      	mov	r5, r1
 800e3d8:	4689      	mov	r9, r1
 800e3da:	e016      	b.n	800e40a <ai_platform_inputs_get+0xca>
 800e3dc:	9a01      	ldr	r2, [sp, #4]
 800e3de:	2301      	movs	r3, #1
 800e3e0:	f848 3002 	str.w	r3, [r8, r2]
 800e3e4:	69b2      	ldr	r2, [r6, #24]
 800e3e6:	f04f 0301 	mov.w	r3, #1
 800e3ea:	6856      	ldr	r6, [r2, #4]
 800e3ec:	3501      	adds	r5, #1
 800e3ee:	f109 091c 	add.w	r9, r9, #28
 800e3f2:	7523      	strb	r3, [r4, #20]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	6962      	ldr	r2, [r4, #20]
 800e3f8:	60a7      	str	r7, [r4, #8]
 800e3fa:	f36b 221f 	bfi	r2, fp, #8, #24
 800e3fe:	6126      	str	r6, [r4, #16]
 800e400:	61a1      	str	r1, [r4, #24]
 800e402:	60e3      	str	r3, [r4, #12]
 800e404:	6162      	str	r2, [r4, #20]
 800e406:	e9c4 0c00 	strd	r0, ip, [r4]
 800e40a:	f8ba 3000 	ldrh.w	r3, [sl]
 800e40e:	b2ac      	uxth	r4, r5
 800e410:	42ab      	cmp	r3, r5
 800e412:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e416:	9301      	str	r3, [sp, #4]
 800e418:	f240 80b5 	bls.w	800e586 <ai_platform_inputs_get+0x246>
 800e41c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 80b0 	beq.w	800e586 <ai_platform_inputs_get+0x246>
 800e426:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e42a:	2e00      	cmp	r6, #0
 800e42c:	f000 80ab 	beq.w	800e586 <ai_platform_inputs_get+0x246>
 800e430:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e434:	69b2      	ldr	r2, [r6, #24]
 800e436:	68f1      	ldr	r1, [r6, #12]
 800e438:	6810      	ldr	r0, [r2, #0]
 800e43a:	9100      	str	r1, [sp, #0]
 800e43c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e440:	68b3      	ldr	r3, [r6, #8]
 800e442:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e446:	444c      	add	r4, r9
 800e448:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e44c:	f001 fe2c 	bl	80100a8 <ai_array_to_buffer_fmt>
 800e450:	69b2      	ldr	r2, [r6, #24]
 800e452:	9900      	ldr	r1, [sp, #0]
 800e454:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e458:	2f00      	cmp	r7, #0
 800e45a:	d0c4      	beq.n	800e3e6 <ai_platform_inputs_get+0xa6>
 800e45c:	2200      	movs	r2, #0
 800e45e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e462:	6832      	ldr	r2, [r6, #0]
 800e464:	607a      	str	r2, [r7, #4]
 800e466:	b112      	cbz	r2, 800e46e <ai_platform_inputs_get+0x12e>
 800e468:	8852      	ldrh	r2, [r2, #2]
 800e46a:	2a00      	cmp	r2, #0
 800e46c:	d1b6      	bne.n	800e3dc <ai_platform_inputs_get+0x9c>
 800e46e:	69b2      	ldr	r2, [r6, #24]
 800e470:	2700      	movs	r7, #0
 800e472:	e7b8      	b.n	800e3e6 <ai_platform_inputs_get+0xa6>
 800e474:	f7ff fd84 	bl	800df80 <_ai_platform_acquire_crc>
 800e478:	4b60      	ldr	r3, [pc, #384]	; (800e5fc <ai_platform_inputs_get+0x2bc>)
 800e47a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e484:	185a      	adds	r2, r3, r1
 800e486:	2a01      	cmp	r2, #1
 800e488:	d92a      	bls.n	800e4e0 <ai_platform_inputs_get+0x1a0>
 800e48a:	f240 4249 	movw	r2, #1097	; 0x449
 800e48e:	4293      	cmp	r3, r2
 800e490:	d026      	beq.n	800e4e0 <ai_platform_inputs_get+0x1a0>
 800e492:	4a5b      	ldr	r2, [pc, #364]	; (800e600 <ai_platform_inputs_get+0x2c0>)
 800e494:	6813      	ldr	r3, [r2, #0]
 800e496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e49a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e49e:	d02c      	beq.n	800e4fa <ai_platform_inputs_get+0x1ba>
 800e4a0:	6813      	ldr	r3, [r2, #0]
 800e4a2:	f240 4183 	movw	r1, #1155	; 0x483
 800e4a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4aa:	428b      	cmp	r3, r1
 800e4ac:	d073      	beq.n	800e596 <ai_platform_inputs_get+0x256>
 800e4ae:	6813      	ldr	r3, [r2, #0]
 800e4b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e4b8:	f000 80ac 	beq.w	800e614 <ai_platform_inputs_get+0x2d4>
 800e4bc:	6813      	ldr	r3, [r2, #0]
 800e4be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d129      	bne.n	800e51a <ai_platform_inputs_get+0x1da>
 800e4c6:	4a4f      	ldr	r2, [pc, #316]	; (800e604 <ai_platform_inputs_get+0x2c4>)
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	6093      	str	r3, [r2, #8]
 800e4cc:	6893      	ldr	r3, [r2, #8]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1fc      	bne.n	800e4cc <ai_platform_inputs_get+0x18c>
 800e4d2:	494d      	ldr	r1, [pc, #308]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e4d4:	4b4d      	ldr	r3, [pc, #308]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e4d6:	6011      	str	r1, [r2, #0]
 800e4d8:	6812      	ldr	r2, [r2, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d01d      	beq.n	800e51a <ai_platform_inputs_get+0x1da>
 800e4de:	e7fe      	b.n	800e4de <ai_platform_inputs_get+0x19e>
 800e4e0:	4a48      	ldr	r2, [pc, #288]	; (800e604 <ai_platform_inputs_get+0x2c4>)
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	6093      	str	r3, [r2, #8]
 800e4e6:	6893      	ldr	r3, [r2, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1fc      	bne.n	800e4e6 <ai_platform_inputs_get+0x1a6>
 800e4ec:	4946      	ldr	r1, [pc, #280]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e4ee:	4b47      	ldr	r3, [pc, #284]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e4f0:	6011      	str	r1, [r2, #0]
 800e4f2:	6812      	ldr	r2, [r2, #0]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d010      	beq.n	800e51a <ai_platform_inputs_get+0x1da>
 800e4f8:	e7fe      	b.n	800e4f8 <ai_platform_inputs_get+0x1b8>
 800e4fa:	4a45      	ldr	r2, [pc, #276]	; (800e610 <ai_platform_inputs_get+0x2d0>)
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e502:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1fb      	bne.n	800e502 <ai_platform_inputs_get+0x1c2>
 800e50a:	493f      	ldr	r1, [pc, #252]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e50c:	4b3f      	ldr	r3, [pc, #252]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e50e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e512:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e516:	429a      	cmp	r2, r3
 800e518:	d113      	bne.n	800e542 <ai_platform_inputs_get+0x202>
 800e51a:	f7ff fd33 	bl	800df84 <_ai_platform_release_crc>
 800e51e:	2000      	movs	r0, #0
 800e520:	b005      	add	sp, #20
 800e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e526:	4a37      	ldr	r2, [pc, #220]	; (800e604 <ai_platform_inputs_get+0x2c4>)
 800e528:	2301      	movs	r3, #1
 800e52a:	6093      	str	r3, [r2, #8]
 800e52c:	6893      	ldr	r3, [r2, #8]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1fc      	bne.n	800e52c <ai_platform_inputs_get+0x1ec>
 800e532:	4b35      	ldr	r3, [pc, #212]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e534:	6013      	str	r3, [r2, #0]
 800e536:	4b35      	ldr	r3, [pc, #212]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e538:	6812      	ldr	r2, [r2, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	f43f af3b 	beq.w	800e3b6 <ai_platform_inputs_get+0x76>
 800e540:	e7fe      	b.n	800e540 <ai_platform_inputs_get+0x200>
 800e542:	e7fe      	b.n	800e542 <ai_platform_inputs_get+0x202>
 800e544:	4a32      	ldr	r2, [pc, #200]	; (800e610 <ai_platform_inputs_get+0x2d0>)
 800e546:	2301      	movs	r3, #1
 800e548:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e54c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e550:	2b00      	cmp	r3, #0
 800e552:	d1fb      	bne.n	800e54c <ai_platform_inputs_get+0x20c>
 800e554:	4b2c      	ldr	r3, [pc, #176]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e556:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e55a:	4b2c      	ldr	r3, [pc, #176]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e55c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e560:	429a      	cmp	r2, r3
 800e562:	f43f af28 	beq.w	800e3b6 <ai_platform_inputs_get+0x76>
 800e566:	e7fe      	b.n	800e566 <ai_platform_inputs_get+0x226>
 800e568:	2400      	movs	r4, #0
 800e56a:	2218      	movs	r2, #24
 800e56c:	2111      	movs	r1, #17
 800e56e:	f109 0010 	add.w	r0, r9, #16
 800e572:	f001 f97f 	bl	800f874 <core_set_error>
 800e576:	4620      	mov	r0, r4
 800e578:	9b02      	ldr	r3, [sp, #8]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d0d0      	beq.n	800e520 <ai_platform_inputs_get+0x1e0>
 800e57e:	801c      	strh	r4, [r3, #0]
 800e580:	b005      	add	sp, #20
 800e582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e586:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e58a:	2c00      	cmp	r4, #0
 800e58c:	d0ec      	beq.n	800e568 <ai_platform_inputs_get+0x228>
 800e58e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e592:	6858      	ldr	r0, [r3, #4]
 800e594:	e7f0      	b.n	800e578 <ai_platform_inputs_get+0x238>
 800e596:	4a1e      	ldr	r2, [pc, #120]	; (800e610 <ai_platform_inputs_get+0x2d0>)
 800e598:	2301      	movs	r3, #1
 800e59a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e59e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1fb      	bne.n	800e59e <ai_platform_inputs_get+0x25e>
 800e5a6:	4918      	ldr	r1, [pc, #96]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e5a8:	4b18      	ldr	r3, [pc, #96]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e5aa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e5ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d0b1      	beq.n	800e51a <ai_platform_inputs_get+0x1da>
 800e5b6:	e7fe      	b.n	800e5b6 <ai_platform_inputs_get+0x276>
 800e5b8:	4a15      	ldr	r2, [pc, #84]	; (800e610 <ai_platform_inputs_get+0x2d0>)
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e5c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1fb      	bne.n	800e5c0 <ai_platform_inputs_get+0x280>
 800e5c8:	4b0f      	ldr	r3, [pc, #60]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e5ca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e5ce:	4b0f      	ldr	r3, [pc, #60]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e5d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	f43f aeee 	beq.w	800e3b6 <ai_platform_inputs_get+0x76>
 800e5da:	e7fe      	b.n	800e5da <ai_platform_inputs_get+0x29a>
 800e5dc:	4a09      	ldr	r2, [pc, #36]	; (800e604 <ai_platform_inputs_get+0x2c4>)
 800e5de:	2301      	movs	r3, #1
 800e5e0:	6093      	str	r3, [r2, #8]
 800e5e2:	6893      	ldr	r3, [r2, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1fc      	bne.n	800e5e2 <ai_platform_inputs_get+0x2a2>
 800e5e8:	4b07      	ldr	r3, [pc, #28]	; (800e608 <ai_platform_inputs_get+0x2c8>)
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	4b07      	ldr	r3, [pc, #28]	; (800e60c <ai_platform_inputs_get+0x2cc>)
 800e5ee:	6812      	ldr	r2, [r2, #0]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	f43f aee0 	beq.w	800e3b6 <ai_platform_inputs_get+0x76>
 800e5f6:	e7fe      	b.n	800e5f6 <ai_platform_inputs_get+0x2b6>
 800e5f8:	a1c00100 	.word	0xa1c00100
 800e5fc:	e0042000 	.word	0xe0042000
 800e600:	5c001000 	.word	0x5c001000
 800e604:	40023000 	.word	0x40023000
 800e608:	f407a5c2 	.word	0xf407a5c2
 800e60c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e610:	58024000 	.word	0x58024000
 800e614:	4a0d      	ldr	r2, [pc, #52]	; (800e64c <ai_platform_inputs_get+0x30c>)
 800e616:	2301      	movs	r3, #1
 800e618:	6093      	str	r3, [r2, #8]
 800e61a:	6893      	ldr	r3, [r2, #8]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1fc      	bne.n	800e61a <ai_platform_inputs_get+0x2da>
 800e620:	490b      	ldr	r1, [pc, #44]	; (800e650 <ai_platform_inputs_get+0x310>)
 800e622:	4b0c      	ldr	r3, [pc, #48]	; (800e654 <ai_platform_inputs_get+0x314>)
 800e624:	6011      	str	r1, [r2, #0]
 800e626:	6812      	ldr	r2, [r2, #0]
 800e628:	429a      	cmp	r2, r3
 800e62a:	f43f af76 	beq.w	800e51a <ai_platform_inputs_get+0x1da>
 800e62e:	e7fe      	b.n	800e62e <ai_platform_inputs_get+0x2ee>
 800e630:	4a06      	ldr	r2, [pc, #24]	; (800e64c <ai_platform_inputs_get+0x30c>)
 800e632:	2301      	movs	r3, #1
 800e634:	6093      	str	r3, [r2, #8]
 800e636:	6893      	ldr	r3, [r2, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1fc      	bne.n	800e636 <ai_platform_inputs_get+0x2f6>
 800e63c:	4b04      	ldr	r3, [pc, #16]	; (800e650 <ai_platform_inputs_get+0x310>)
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	4b04      	ldr	r3, [pc, #16]	; (800e654 <ai_platform_inputs_get+0x314>)
 800e642:	6812      	ldr	r2, [r2, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	f43f aeb6 	beq.w	800e3b6 <ai_platform_inputs_get+0x76>
 800e64a:	e7fe      	b.n	800e64a <ai_platform_inputs_get+0x30a>
 800e64c:	40023000 	.word	0x40023000
 800e650:	f407a5c2 	.word	0xf407a5c2
 800e654:	b5e8b5cd 	.word	0xb5e8b5cd

0800e658 <ai_platform_outputs_get>:
 800e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65c:	b085      	sub	sp, #20
 800e65e:	9102      	str	r1, [sp, #8]
 800e660:	2800      	cmp	r0, #0
 800e662:	f000 808f 	beq.w	800e784 <ai_platform_outputs_get+0x12c>
 800e666:	4ba8      	ldr	r3, [pc, #672]	; (800e908 <ai_platform_outputs_get+0x2b0>)
 800e668:	4681      	mov	r9, r0
 800e66a:	6802      	ldr	r2, [r0, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	f040 8089 	bne.w	800e784 <ai_platform_outputs_get+0x12c>
 800e672:	f7ff fc85 	bl	800df80 <_ai_platform_acquire_crc>
 800e676:	4ba5      	ldr	r3, [pc, #660]	; (800e90c <ai_platform_outputs_get+0x2b4>)
 800e678:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e682:	189a      	adds	r2, r3, r2
 800e684:	2a01      	cmp	r2, #1
 800e686:	f240 80d6 	bls.w	800e836 <ai_platform_outputs_get+0x1de>
 800e68a:	f240 4249 	movw	r2, #1097	; 0x449
 800e68e:	4293      	cmp	r3, r2
 800e690:	f000 80d1 	beq.w	800e836 <ai_platform_outputs_get+0x1de>
 800e694:	4a9e      	ldr	r2, [pc, #632]	; (800e910 <ai_platform_outputs_get+0x2b8>)
 800e696:	6813      	ldr	r3, [r2, #0]
 800e698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e69c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e6a0:	f000 80d8 	beq.w	800e854 <ai_platform_outputs_get+0x1fc>
 800e6a4:	6813      	ldr	r3, [r2, #0]
 800e6a6:	f240 4183 	movw	r1, #1155	; 0x483
 800e6aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6ae:	428b      	cmp	r3, r1
 800e6b0:	f000 8109 	beq.w	800e8c6 <ai_platform_outputs_get+0x26e>
 800e6b4:	6813      	ldr	r3, [r2, #0]
 800e6b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6ba:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e6be:	f000 813f 	beq.w	800e940 <ai_platform_outputs_get+0x2e8>
 800e6c2:	6813      	ldr	r3, [r2, #0]
 800e6c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 810e 	beq.w	800e8ea <ai_platform_outputs_get+0x292>
 800e6ce:	f7ff fc59 	bl	800df84 <_ai_platform_release_crc>
 800e6d2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	f240 80db 	bls.w	800e892 <ai_platform_outputs_get+0x23a>
 800e6dc:	2100      	movs	r1, #0
 800e6de:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800e6e2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6e6:	460d      	mov	r5, r1
 800e6e8:	4689      	mov	r9, r1
 800e6ea:	e016      	b.n	800e71a <ai_platform_outputs_get+0xc2>
 800e6ec:	9a01      	ldr	r2, [sp, #4]
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	f848 3002 	str.w	r3, [r8, r2]
 800e6f4:	69b2      	ldr	r2, [r6, #24]
 800e6f6:	f04f 0301 	mov.w	r3, #1
 800e6fa:	6856      	ldr	r6, [r2, #4]
 800e6fc:	3501      	adds	r5, #1
 800e6fe:	f109 091c 	add.w	r9, r9, #28
 800e702:	7523      	strb	r3, [r4, #20]
 800e704:	2300      	movs	r3, #0
 800e706:	6962      	ldr	r2, [r4, #20]
 800e708:	60a7      	str	r7, [r4, #8]
 800e70a:	f36b 221f 	bfi	r2, fp, #8, #24
 800e70e:	6126      	str	r6, [r4, #16]
 800e710:	61a1      	str	r1, [r4, #24]
 800e712:	60e3      	str	r3, [r4, #12]
 800e714:	6162      	str	r2, [r4, #20]
 800e716:	e9c4 0c00 	strd	r0, ip, [r4]
 800e71a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e71e:	b2ac      	uxth	r4, r5
 800e720:	42ab      	cmp	r3, r5
 800e722:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	f240 80a6 	bls.w	800e878 <ai_platform_outputs_get+0x220>
 800e72c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 80a1 	beq.w	800e878 <ai_platform_outputs_get+0x220>
 800e736:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e73a:	2e00      	cmp	r6, #0
 800e73c:	f000 809c 	beq.w	800e878 <ai_platform_outputs_get+0x220>
 800e740:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e744:	69b2      	ldr	r2, [r6, #24]
 800e746:	68f1      	ldr	r1, [r6, #12]
 800e748:	6810      	ldr	r0, [r2, #0]
 800e74a:	9100      	str	r1, [sp, #0]
 800e74c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e750:	68b3      	ldr	r3, [r6, #8]
 800e752:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e756:	444c      	add	r4, r9
 800e758:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e75c:	f001 fca4 	bl	80100a8 <ai_array_to_buffer_fmt>
 800e760:	69b2      	ldr	r2, [r6, #24]
 800e762:	9900      	ldr	r1, [sp, #0]
 800e764:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e768:	2f00      	cmp	r7, #0
 800e76a:	d0c4      	beq.n	800e6f6 <ai_platform_outputs_get+0x9e>
 800e76c:	2200      	movs	r2, #0
 800e76e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e772:	6832      	ldr	r2, [r6, #0]
 800e774:	607a      	str	r2, [r7, #4]
 800e776:	b112      	cbz	r2, 800e77e <ai_platform_outputs_get+0x126>
 800e778:	8852      	ldrh	r2, [r2, #2]
 800e77a:	2a00      	cmp	r2, #0
 800e77c:	d1b6      	bne.n	800e6ec <ai_platform_outputs_get+0x94>
 800e77e:	69b2      	ldr	r2, [r6, #24]
 800e780:	2700      	movs	r7, #0
 800e782:	e7b8      	b.n	800e6f6 <ai_platform_outputs_get+0x9e>
 800e784:	f7ff fbfc 	bl	800df80 <_ai_platform_acquire_crc>
 800e788:	4b60      	ldr	r3, [pc, #384]	; (800e90c <ai_platform_outputs_get+0x2b4>)
 800e78a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e794:	185a      	adds	r2, r3, r1
 800e796:	2a01      	cmp	r2, #1
 800e798:	d92a      	bls.n	800e7f0 <ai_platform_outputs_get+0x198>
 800e79a:	f240 4249 	movw	r2, #1097	; 0x449
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d026      	beq.n	800e7f0 <ai_platform_outputs_get+0x198>
 800e7a2:	4a5b      	ldr	r2, [pc, #364]	; (800e910 <ai_platform_outputs_get+0x2b8>)
 800e7a4:	6813      	ldr	r3, [r2, #0]
 800e7a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e7aa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e7ae:	d02c      	beq.n	800e80a <ai_platform_outputs_get+0x1b2>
 800e7b0:	6813      	ldr	r3, [r2, #0]
 800e7b2:	f240 4183 	movw	r1, #1155	; 0x483
 800e7b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e7ba:	428b      	cmp	r3, r1
 800e7bc:	d072      	beq.n	800e8a4 <ai_platform_outputs_get+0x24c>
 800e7be:	6813      	ldr	r3, [r2, #0]
 800e7c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e7c4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e7c8:	f000 80ac 	beq.w	800e924 <ai_platform_outputs_get+0x2cc>
 800e7cc:	6813      	ldr	r3, [r2, #0]
 800e7ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d129      	bne.n	800e82a <ai_platform_outputs_get+0x1d2>
 800e7d6:	4a4f      	ldr	r2, [pc, #316]	; (800e914 <ai_platform_outputs_get+0x2bc>)
 800e7d8:	2301      	movs	r3, #1
 800e7da:	6093      	str	r3, [r2, #8]
 800e7dc:	6893      	ldr	r3, [r2, #8]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1fc      	bne.n	800e7dc <ai_platform_outputs_get+0x184>
 800e7e2:	494d      	ldr	r1, [pc, #308]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e7e4:	4b4d      	ldr	r3, [pc, #308]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e7e6:	6011      	str	r1, [r2, #0]
 800e7e8:	6812      	ldr	r2, [r2, #0]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d01d      	beq.n	800e82a <ai_platform_outputs_get+0x1d2>
 800e7ee:	e7fe      	b.n	800e7ee <ai_platform_outputs_get+0x196>
 800e7f0:	4a48      	ldr	r2, [pc, #288]	; (800e914 <ai_platform_outputs_get+0x2bc>)
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	6093      	str	r3, [r2, #8]
 800e7f6:	6893      	ldr	r3, [r2, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1fc      	bne.n	800e7f6 <ai_platform_outputs_get+0x19e>
 800e7fc:	4946      	ldr	r1, [pc, #280]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e7fe:	4b47      	ldr	r3, [pc, #284]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e800:	6011      	str	r1, [r2, #0]
 800e802:	6812      	ldr	r2, [r2, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d010      	beq.n	800e82a <ai_platform_outputs_get+0x1d2>
 800e808:	e7fe      	b.n	800e808 <ai_platform_outputs_get+0x1b0>
 800e80a:	4a45      	ldr	r2, [pc, #276]	; (800e920 <ai_platform_outputs_get+0x2c8>)
 800e80c:	2301      	movs	r3, #1
 800e80e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e812:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1fb      	bne.n	800e812 <ai_platform_outputs_get+0x1ba>
 800e81a:	493f      	ldr	r1, [pc, #252]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e81c:	4b3f      	ldr	r3, [pc, #252]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e81e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e822:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e826:	429a      	cmp	r2, r3
 800e828:	d113      	bne.n	800e852 <ai_platform_outputs_get+0x1fa>
 800e82a:	f7ff fbab 	bl	800df84 <_ai_platform_release_crc>
 800e82e:	2000      	movs	r0, #0
 800e830:	b005      	add	sp, #20
 800e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e836:	4a37      	ldr	r2, [pc, #220]	; (800e914 <ai_platform_outputs_get+0x2bc>)
 800e838:	2301      	movs	r3, #1
 800e83a:	6093      	str	r3, [r2, #8]
 800e83c:	6893      	ldr	r3, [r2, #8]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1fc      	bne.n	800e83c <ai_platform_outputs_get+0x1e4>
 800e842:	4b35      	ldr	r3, [pc, #212]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e844:	6013      	str	r3, [r2, #0]
 800e846:	4b35      	ldr	r3, [pc, #212]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e848:	6812      	ldr	r2, [r2, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	f43f af3f 	beq.w	800e6ce <ai_platform_outputs_get+0x76>
 800e850:	e7fe      	b.n	800e850 <ai_platform_outputs_get+0x1f8>
 800e852:	e7fe      	b.n	800e852 <ai_platform_outputs_get+0x1fa>
 800e854:	4a32      	ldr	r2, [pc, #200]	; (800e920 <ai_platform_outputs_get+0x2c8>)
 800e856:	2301      	movs	r3, #1
 800e858:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e85c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1fb      	bne.n	800e85c <ai_platform_outputs_get+0x204>
 800e864:	4b2c      	ldr	r3, [pc, #176]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e866:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e86a:	4b2c      	ldr	r3, [pc, #176]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e86c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e870:	429a      	cmp	r2, r3
 800e872:	f43f af2c 	beq.w	800e6ce <ai_platform_outputs_get+0x76>
 800e876:	e7fe      	b.n	800e876 <ai_platform_outputs_get+0x21e>
 800e878:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e87c:	b14c      	cbz	r4, 800e892 <ai_platform_outputs_get+0x23a>
 800e87e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e882:	6858      	ldr	r0, [r3, #4]
 800e884:	9b02      	ldr	r3, [sp, #8]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0d2      	beq.n	800e830 <ai_platform_outputs_get+0x1d8>
 800e88a:	801c      	strh	r4, [r3, #0]
 800e88c:	b005      	add	sp, #20
 800e88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e892:	2400      	movs	r4, #0
 800e894:	2218      	movs	r2, #24
 800e896:	2111      	movs	r1, #17
 800e898:	f109 0010 	add.w	r0, r9, #16
 800e89c:	f000 ffea 	bl	800f874 <core_set_error>
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	e7ef      	b.n	800e884 <ai_platform_outputs_get+0x22c>
 800e8a4:	4a1e      	ldr	r2, [pc, #120]	; (800e920 <ai_platform_outputs_get+0x2c8>)
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e8ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1fb      	bne.n	800e8ac <ai_platform_outputs_get+0x254>
 800e8b4:	4918      	ldr	r1, [pc, #96]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e8b6:	4b19      	ldr	r3, [pc, #100]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e8b8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e8bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d0b2      	beq.n	800e82a <ai_platform_outputs_get+0x1d2>
 800e8c4:	e7fe      	b.n	800e8c4 <ai_platform_outputs_get+0x26c>
 800e8c6:	4a16      	ldr	r2, [pc, #88]	; (800e920 <ai_platform_outputs_get+0x2c8>)
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e8ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1fb      	bne.n	800e8ce <ai_platform_outputs_get+0x276>
 800e8d6:	4b10      	ldr	r3, [pc, #64]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e8d8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e8de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	f43f aef3 	beq.w	800e6ce <ai_platform_outputs_get+0x76>
 800e8e8:	e7fe      	b.n	800e8e8 <ai_platform_outputs_get+0x290>
 800e8ea:	4a0a      	ldr	r2, [pc, #40]	; (800e914 <ai_platform_outputs_get+0x2bc>)
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	6093      	str	r3, [r2, #8]
 800e8f0:	6893      	ldr	r3, [r2, #8]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1fc      	bne.n	800e8f0 <ai_platform_outputs_get+0x298>
 800e8f6:	4b08      	ldr	r3, [pc, #32]	; (800e918 <ai_platform_outputs_get+0x2c0>)
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	4b08      	ldr	r3, [pc, #32]	; (800e91c <ai_platform_outputs_get+0x2c4>)
 800e8fc:	6812      	ldr	r2, [r2, #0]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	f43f aee5 	beq.w	800e6ce <ai_platform_outputs_get+0x76>
 800e904:	e7fe      	b.n	800e904 <ai_platform_outputs_get+0x2ac>
 800e906:	bf00      	nop
 800e908:	a1c00100 	.word	0xa1c00100
 800e90c:	e0042000 	.word	0xe0042000
 800e910:	5c001000 	.word	0x5c001000
 800e914:	40023000 	.word	0x40023000
 800e918:	f407a5c2 	.word	0xf407a5c2
 800e91c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e920:	58024000 	.word	0x58024000
 800e924:	4a0d      	ldr	r2, [pc, #52]	; (800e95c <ai_platform_outputs_get+0x304>)
 800e926:	2301      	movs	r3, #1
 800e928:	6093      	str	r3, [r2, #8]
 800e92a:	6893      	ldr	r3, [r2, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d1fc      	bne.n	800e92a <ai_platform_outputs_get+0x2d2>
 800e930:	490b      	ldr	r1, [pc, #44]	; (800e960 <ai_platform_outputs_get+0x308>)
 800e932:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <ai_platform_outputs_get+0x30c>)
 800e934:	6011      	str	r1, [r2, #0]
 800e936:	6812      	ldr	r2, [r2, #0]
 800e938:	429a      	cmp	r2, r3
 800e93a:	f43f af76 	beq.w	800e82a <ai_platform_outputs_get+0x1d2>
 800e93e:	e7fe      	b.n	800e93e <ai_platform_outputs_get+0x2e6>
 800e940:	4a06      	ldr	r2, [pc, #24]	; (800e95c <ai_platform_outputs_get+0x304>)
 800e942:	2301      	movs	r3, #1
 800e944:	6093      	str	r3, [r2, #8]
 800e946:	6893      	ldr	r3, [r2, #8]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1fc      	bne.n	800e946 <ai_platform_outputs_get+0x2ee>
 800e94c:	4b04      	ldr	r3, [pc, #16]	; (800e960 <ai_platform_outputs_get+0x308>)
 800e94e:	6013      	str	r3, [r2, #0]
 800e950:	4b04      	ldr	r3, [pc, #16]	; (800e964 <ai_platform_outputs_get+0x30c>)
 800e952:	6812      	ldr	r2, [r2, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	f43f aeba 	beq.w	800e6ce <ai_platform_outputs_get+0x76>
 800e95a:	e7fe      	b.n	800e95a <ai_platform_outputs_get+0x302>
 800e95c:	40023000 	.word	0x40023000
 800e960:	f407a5c2 	.word	0xf407a5c2
 800e964:	b5e8b5cd 	.word	0xb5e8b5cd

0800e968 <ai_platform_network_create>:
 800e968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e96c:	b083      	sub	sp, #12
 800e96e:	4604      	mov	r4, r0
 800e970:	4615      	mov	r5, r2
 800e972:	461e      	mov	r6, r3
 800e974:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800e978:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800e97c:	f7ff fb00 	bl	800df80 <_ai_platform_acquire_crc>
 800e980:	2800      	cmp	r0, #0
 800e982:	f000 80bd 	beq.w	800eb00 <ai_platform_network_create+0x198>
 800e986:	4ba5      	ldr	r3, [pc, #660]	; (800ec1c <ai_platform_network_create+0x2b4>)
 800e988:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800e98c:	4601      	mov	r1, r0
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e994:	eb03 020c 	add.w	r2, r3, ip
 800e998:	2a01      	cmp	r2, #1
 800e99a:	f240 80a8 	bls.w	800eaee <ai_platform_network_create+0x186>
 800e99e:	f240 4249 	movw	r2, #1097	; 0x449
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	f000 80a3 	beq.w	800eaee <ai_platform_network_create+0x186>
 800e9a8:	4a9d      	ldr	r2, [pc, #628]	; (800ec20 <ai_platform_network_create+0x2b8>)
 800e9aa:	6813      	ldr	r3, [r2, #0]
 800e9ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9b0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e9b4:	f000 80b9 	beq.w	800eb2a <ai_platform_network_create+0x1c2>
 800e9b8:	6813      	ldr	r3, [r2, #0]
 800e9ba:	f240 4c83 	movw	ip, #1155	; 0x483
 800e9be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9c2:	4563      	cmp	r3, ip
 800e9c4:	f000 80a1 	beq.w	800eb0a <ai_platform_network_create+0x1a2>
 800e9c8:	6813      	ldr	r3, [r2, #0]
 800e9ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9ce:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e9d2:	f000 8153 	beq.w	800ec7c <ai_platform_network_create+0x314>
 800e9d6:	6813      	ldr	r3, [r2, #0]
 800e9d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f040 808d 	bne.w	800eafc <ai_platform_network_create+0x194>
 800e9e2:	4a90      	ldr	r2, [pc, #576]	; (800ec24 <ai_platform_network_create+0x2bc>)
 800e9e4:	2318      	movs	r3, #24
 800e9e6:	6093      	str	r3, [r2, #8]
 800e9e8:	6893      	ldr	r3, [r2, #8]
 800e9ea:	2b18      	cmp	r3, #24
 800e9ec:	f040 8086 	bne.w	800eafc <ai_platform_network_create+0x194>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	6093      	str	r3, [r2, #8]
 800e9f4:	6893      	ldr	r3, [r2, #8]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d1fc      	bne.n	800e9f4 <ai_platform_network_create+0x8c>
 800e9fa:	4608      	mov	r0, r1
 800e9fc:	f7ff fac2 	bl	800df84 <_ai_platform_release_crc>
 800ea00:	f7ff fabe 	bl	800df80 <_ai_platform_acquire_crc>
 800ea04:	4b85      	ldr	r3, [pc, #532]	; (800ec1c <ai_platform_network_create+0x2b4>)
 800ea06:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea10:	189a      	adds	r2, r3, r2
 800ea12:	2a01      	cmp	r2, #1
 800ea14:	f240 809f 	bls.w	800eb56 <ai_platform_network_create+0x1ee>
 800ea18:	f240 4249 	movw	r2, #1097	; 0x449
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	f000 809a 	beq.w	800eb56 <ai_platform_network_create+0x1ee>
 800ea22:	4a7f      	ldr	r2, [pc, #508]	; (800ec20 <ai_platform_network_create+0x2b8>)
 800ea24:	6813      	ldr	r3, [r2, #0]
 800ea26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea2a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ea2e:	f000 80a0 	beq.w	800eb72 <ai_platform_network_create+0x20a>
 800ea32:	6813      	ldr	r3, [r2, #0]
 800ea34:	f240 4183 	movw	r1, #1155	; 0x483
 800ea38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea3c:	428b      	cmp	r3, r1
 800ea3e:	f000 80bf 	beq.w	800ebc0 <ai_platform_network_create+0x258>
 800ea42:	6813      	ldr	r3, [r2, #0]
 800ea44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea48:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ea4c:	f000 8123 	beq.w	800ec96 <ai_platform_network_create+0x32e>
 800ea50:	6813      	ldr	r3, [r2, #0]
 800ea52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f000 80c4 	beq.w	800ebe4 <ai_platform_network_create+0x27c>
 800ea5c:	f7ff fa92 	bl	800df84 <_ai_platform_release_crc>
 800ea60:	2c00      	cmp	r4, #0
 800ea62:	f000 80aa 	beq.w	800ebba <ai_platform_network_create+0x252>
 800ea66:	4b70      	ldr	r3, [pc, #448]	; (800ec28 <ai_platform_network_create+0x2c0>)
 800ea68:	602b      	str	r3, [r5, #0]
 800ea6a:	6025      	str	r5, [r4, #0]
 800ea6c:	f000 fefa 	bl	800f864 <core_init>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	f000 8090 	beq.w	800eb96 <ai_platform_network_create+0x22e>
 800ea76:	f7ff fa83 	bl	800df80 <_ai_platform_acquire_crc>
 800ea7a:	4b68      	ldr	r3, [pc, #416]	; (800ec1c <ai_platform_network_create+0x2b4>)
 800ea7c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea86:	185a      	adds	r2, r3, r1
 800ea88:	2a01      	cmp	r2, #1
 800ea8a:	f240 80b9 	bls.w	800ec00 <ai_platform_network_create+0x298>
 800ea8e:	f240 4249 	movw	r2, #1097	; 0x449
 800ea92:	4293      	cmp	r3, r2
 800ea94:	f000 80b4 	beq.w	800ec00 <ai_platform_network_create+0x298>
 800ea98:	4a61      	ldr	r2, [pc, #388]	; (800ec20 <ai_platform_network_create+0x2b8>)
 800ea9a:	6813      	ldr	r3, [r2, #0]
 800ea9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eaa0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eaa4:	f000 80c8 	beq.w	800ec38 <ai_platform_network_create+0x2d0>
 800eaa8:	6813      	ldr	r3, [r2, #0]
 800eaaa:	f240 4183 	movw	r1, #1155	; 0x483
 800eaae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eab2:	428b      	cmp	r3, r1
 800eab4:	f000 8107 	beq.w	800ecc6 <ai_platform_network_create+0x35e>
 800eab8:	6813      	ldr	r3, [r2, #0]
 800eaba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eabe:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800eac2:	f000 8111 	beq.w	800ece8 <ai_platform_network_create+0x380>
 800eac6:	6813      	ldr	r3, [r2, #0]
 800eac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f040 80c3 	bne.w	800ec58 <ai_platform_network_create+0x2f0>
 800ead2:	4b54      	ldr	r3, [pc, #336]	; (800ec24 <ai_platform_network_create+0x2bc>)
 800ead4:	2201      	movs	r2, #1
 800ead6:	609a      	str	r2, [r3, #8]
 800ead8:	689a      	ldr	r2, [r3, #8]
 800eada:	2a00      	cmp	r2, #0
 800eadc:	d1fc      	bne.n	800ead8 <ai_platform_network_create+0x170>
 800eade:	4a53      	ldr	r2, [pc, #332]	; (800ec2c <ai_platform_network_create+0x2c4>)
 800eae0:	601a      	str	r2, [r3, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	4b52      	ldr	r3, [pc, #328]	; (800ec30 <ai_platform_network_create+0x2c8>)
 800eae6:	429a      	cmp	r2, r3
 800eae8:	f000 80b6 	beq.w	800ec58 <ai_platform_network_create+0x2f0>
 800eaec:	e7fe      	b.n	800eaec <ai_platform_network_create+0x184>
 800eaee:	4b4d      	ldr	r3, [pc, #308]	; (800ec24 <ai_platform_network_create+0x2bc>)
 800eaf0:	2218      	movs	r2, #24
 800eaf2:	609a      	str	r2, [r3, #8]
 800eaf4:	689a      	ldr	r2, [r3, #8]
 800eaf6:	2a18      	cmp	r2, #24
 800eaf8:	d027      	beq.n	800eb4a <ai_platform_network_create+0x1e2>
 800eafa:	4608      	mov	r0, r1
 800eafc:	f7ff fa42 	bl	800df84 <_ai_platform_release_crc>
 800eb00:	f244 1033 	movw	r0, #16691	; 0x4133
 800eb04:	b003      	add	sp, #12
 800eb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb0a:	4a4a      	ldr	r2, [pc, #296]	; (800ec34 <ai_platform_network_create+0x2cc>)
 800eb0c:	2318      	movs	r3, #24
 800eb0e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eb12:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb16:	2b18      	cmp	r3, #24
 800eb18:	d1f0      	bne.n	800eafc <ai_platform_network_create+0x194>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eb20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1fb      	bne.n	800eb20 <ai_platform_network_create+0x1b8>
 800eb28:	e767      	b.n	800e9fa <ai_platform_network_create+0x92>
 800eb2a:	4a42      	ldr	r2, [pc, #264]	; (800ec34 <ai_platform_network_create+0x2cc>)
 800eb2c:	2318      	movs	r3, #24
 800eb2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eb32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb36:	2b18      	cmp	r3, #24
 800eb38:	d1e0      	bne.n	800eafc <ai_platform_network_create+0x194>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eb40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1fb      	bne.n	800eb40 <ai_platform_network_create+0x1d8>
 800eb48:	e757      	b.n	800e9fa <ai_platform_network_create+0x92>
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	609a      	str	r2, [r3, #8]
 800eb4e:	689a      	ldr	r2, [r3, #8]
 800eb50:	2a00      	cmp	r2, #0
 800eb52:	d1fc      	bne.n	800eb4e <ai_platform_network_create+0x1e6>
 800eb54:	e751      	b.n	800e9fa <ai_platform_network_create+0x92>
 800eb56:	4a33      	ldr	r2, [pc, #204]	; (800ec24 <ai_platform_network_create+0x2bc>)
 800eb58:	2301      	movs	r3, #1
 800eb5a:	6093      	str	r3, [r2, #8]
 800eb5c:	6891      	ldr	r1, [r2, #8]
 800eb5e:	2900      	cmp	r1, #0
 800eb60:	d1fc      	bne.n	800eb5c <ai_platform_network_create+0x1f4>
 800eb62:	4b32      	ldr	r3, [pc, #200]	; (800ec2c <ai_platform_network_create+0x2c4>)
 800eb64:	6013      	str	r3, [r2, #0]
 800eb66:	4b32      	ldr	r3, [pc, #200]	; (800ec30 <ai_platform_network_create+0x2c8>)
 800eb68:	6812      	ldr	r2, [r2, #0]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	f43f af76 	beq.w	800ea5c <ai_platform_network_create+0xf4>
 800eb70:	e7fe      	b.n	800eb70 <ai_platform_network_create+0x208>
 800eb72:	4a30      	ldr	r2, [pc, #192]	; (800ec34 <ai_platform_network_create+0x2cc>)
 800eb74:	2301      	movs	r3, #1
 800eb76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eb7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1fb      	bne.n	800eb7a <ai_platform_network_create+0x212>
 800eb82:	4b2a      	ldr	r3, [pc, #168]	; (800ec2c <ai_platform_network_create+0x2c4>)
 800eb84:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800eb88:	4b29      	ldr	r3, [pc, #164]	; (800ec30 <ai_platform_network_create+0x2c8>)
 800eb8a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	f43f af64 	beq.w	800ea5c <ai_platform_network_create+0xf4>
 800eb94:	e7fe      	b.n	800eb94 <ai_platform_network_create+0x22c>
 800eb96:	f04f 0930 	mov.w	r9, #48	; 0x30
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	2410      	movs	r4, #16
 800eba0:	4642      	mov	r2, r8
 800eba2:	4639      	mov	r1, r7
 800eba4:	4630      	mov	r0, r6
 800eba6:	f001 fa63 	bl	8010070 <ai_version_get>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2000      	movs	r0, #0
 800ebae:	64ab      	str	r3, [r5, #72]	; 0x48
 800ebb0:	f369 0007 	bfi	r0, r9, #0, #8
 800ebb4:	f364 201f 	bfi	r0, r4, #8, #24
 800ebb8:	e7a4      	b.n	800eb04 <ai_platform_network_create+0x19c>
 800ebba:	f241 0010 	movw	r0, #4112	; 0x1010
 800ebbe:	e7a1      	b.n	800eb04 <ai_platform_network_create+0x19c>
 800ebc0:	4a1c      	ldr	r2, [pc, #112]	; (800ec34 <ai_platform_network_create+0x2cc>)
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ebc8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1fb      	bne.n	800ebc8 <ai_platform_network_create+0x260>
 800ebd0:	4b16      	ldr	r3, [pc, #88]	; (800ec2c <ai_platform_network_create+0x2c4>)
 800ebd2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ebd6:	4b16      	ldr	r3, [pc, #88]	; (800ec30 <ai_platform_network_create+0x2c8>)
 800ebd8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	f43f af3d 	beq.w	800ea5c <ai_platform_network_create+0xf4>
 800ebe2:	e7fe      	b.n	800ebe2 <ai_platform_network_create+0x27a>
 800ebe4:	4a0f      	ldr	r2, [pc, #60]	; (800ec24 <ai_platform_network_create+0x2bc>)
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	6093      	str	r3, [r2, #8]
 800ebea:	6893      	ldr	r3, [r2, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1fc      	bne.n	800ebea <ai_platform_network_create+0x282>
 800ebf0:	4b0e      	ldr	r3, [pc, #56]	; (800ec2c <ai_platform_network_create+0x2c4>)
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	4b0e      	ldr	r3, [pc, #56]	; (800ec30 <ai_platform_network_create+0x2c8>)
 800ebf6:	6812      	ldr	r2, [r2, #0]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	f43f af2f 	beq.w	800ea5c <ai_platform_network_create+0xf4>
 800ebfe:	e7fe      	b.n	800ebfe <ai_platform_network_create+0x296>
 800ec00:	4a08      	ldr	r2, [pc, #32]	; (800ec24 <ai_platform_network_create+0x2bc>)
 800ec02:	2301      	movs	r3, #1
 800ec04:	6093      	str	r3, [r2, #8]
 800ec06:	6893      	ldr	r3, [r2, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1fc      	bne.n	800ec06 <ai_platform_network_create+0x29e>
 800ec0c:	4b07      	ldr	r3, [pc, #28]	; (800ec2c <ai_platform_network_create+0x2c4>)
 800ec0e:	6013      	str	r3, [r2, #0]
 800ec10:	4b07      	ldr	r3, [pc, #28]	; (800ec30 <ai_platform_network_create+0x2c8>)
 800ec12:	6812      	ldr	r2, [r2, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d01f      	beq.n	800ec58 <ai_platform_network_create+0x2f0>
 800ec18:	e7fe      	b.n	800ec18 <ai_platform_network_create+0x2b0>
 800ec1a:	bf00      	nop
 800ec1c:	e0042000 	.word	0xe0042000
 800ec20:	5c001000 	.word	0x5c001000
 800ec24:	40023000 	.word	0x40023000
 800ec28:	a1c00100 	.word	0xa1c00100
 800ec2c:	f407a5c2 	.word	0xf407a5c2
 800ec30:	b5e8b5cd 	.word	0xb5e8b5cd
 800ec34:	58024000 	.word	0x58024000
 800ec38:	4a33      	ldr	r2, [pc, #204]	; (800ed08 <ai_platform_network_create+0x3a0>)
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ec40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1fb      	bne.n	800ec40 <ai_platform_network_create+0x2d8>
 800ec48:	4b30      	ldr	r3, [pc, #192]	; (800ed0c <ai_platform_network_create+0x3a4>)
 800ec4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ec4e:	4b30      	ldr	r3, [pc, #192]	; (800ed10 <ai_platform_network_create+0x3a8>)
 800ec50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d12c      	bne.n	800ecb2 <ai_platform_network_create+0x34a>
 800ec58:	f7ff f994 	bl	800df84 <_ai_platform_release_crc>
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	4639      	mov	r1, r7
 800ec60:	4630      	mov	r0, r6
 800ec62:	f001 fa05 	bl	8010070 <ai_version_get>
 800ec66:	4681      	mov	r9, r0
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2105      	movs	r1, #5
 800ec6c:	2001      	movs	r0, #1
 800ec6e:	f001 f9ff 	bl	8010070 <ai_version_get>
 800ec72:	4581      	cmp	r9, r0
 800ec74:	d01e      	beq.n	800ecb4 <ai_platform_network_create+0x34c>
 800ec76:	f04f 0901 	mov.w	r9, #1
 800ec7a:	e78e      	b.n	800eb9a <ai_platform_network_create+0x232>
 800ec7c:	4b25      	ldr	r3, [pc, #148]	; (800ed14 <ai_platform_network_create+0x3ac>)
 800ec7e:	2218      	movs	r2, #24
 800ec80:	609a      	str	r2, [r3, #8]
 800ec82:	689a      	ldr	r2, [r3, #8]
 800ec84:	2a18      	cmp	r2, #24
 800ec86:	f47f af39 	bne.w	800eafc <ai_platform_network_create+0x194>
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	609a      	str	r2, [r3, #8]
 800ec8e:	689a      	ldr	r2, [r3, #8]
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	d1fc      	bne.n	800ec8e <ai_platform_network_create+0x326>
 800ec94:	e6b1      	b.n	800e9fa <ai_platform_network_create+0x92>
 800ec96:	4a1f      	ldr	r2, [pc, #124]	; (800ed14 <ai_platform_network_create+0x3ac>)
 800ec98:	2301      	movs	r3, #1
 800ec9a:	6093      	str	r3, [r2, #8]
 800ec9c:	6893      	ldr	r3, [r2, #8]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1fc      	bne.n	800ec9c <ai_platform_network_create+0x334>
 800eca2:	4b1a      	ldr	r3, [pc, #104]	; (800ed0c <ai_platform_network_create+0x3a4>)
 800eca4:	6013      	str	r3, [r2, #0]
 800eca6:	4b1a      	ldr	r3, [pc, #104]	; (800ed10 <ai_platform_network_create+0x3a8>)
 800eca8:	6812      	ldr	r2, [r2, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	f43f aed6 	beq.w	800ea5c <ai_platform_network_create+0xf4>
 800ecb0:	e7fe      	b.n	800ecb0 <ai_platform_network_create+0x348>
 800ecb2:	e7fe      	b.n	800ecb2 <ai_platform_network_create+0x34a>
 800ecb4:	4b18      	ldr	r3, [pc, #96]	; (800ed18 <ai_platform_network_create+0x3b0>)
 800ecb6:	a801      	add	r0, sp, #4
 800ecb8:	9301      	str	r3, [sp, #4]
 800ecba:	f001 f947 	bl	800ff4c <ai_check_custom_types>
 800ecbe:	b300      	cbz	r0, 800ed02 <ai_platform_network_create+0x39a>
 800ecc0:	2400      	movs	r4, #0
 800ecc2:	46a1      	mov	r9, r4
 800ecc4:	e76c      	b.n	800eba0 <ai_platform_network_create+0x238>
 800ecc6:	4b10      	ldr	r3, [pc, #64]	; (800ed08 <ai_platform_network_create+0x3a0>)
 800ecc8:	2201      	movs	r2, #1
 800ecca:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800ecce:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800ecd2:	2a00      	cmp	r2, #0
 800ecd4:	d1fb      	bne.n	800ecce <ai_platform_network_create+0x366>
 800ecd6:	4a0d      	ldr	r2, [pc, #52]	; (800ed0c <ai_platform_network_create+0x3a4>)
 800ecd8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800ecdc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800ece0:	4b0b      	ldr	r3, [pc, #44]	; (800ed10 <ai_platform_network_create+0x3a8>)
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d0b8      	beq.n	800ec58 <ai_platform_network_create+0x2f0>
 800ece6:	e7fe      	b.n	800ece6 <ai_platform_network_create+0x37e>
 800ece8:	4b0a      	ldr	r3, [pc, #40]	; (800ed14 <ai_platform_network_create+0x3ac>)
 800ecea:	2201      	movs	r2, #1
 800ecec:	609a      	str	r2, [r3, #8]
 800ecee:	689a      	ldr	r2, [r3, #8]
 800ecf0:	2a00      	cmp	r2, #0
 800ecf2:	d1fc      	bne.n	800ecee <ai_platform_network_create+0x386>
 800ecf4:	4a05      	ldr	r2, [pc, #20]	; (800ed0c <ai_platform_network_create+0x3a4>)
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4b05      	ldr	r3, [pc, #20]	; (800ed10 <ai_platform_network_create+0x3a8>)
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d0ab      	beq.n	800ec58 <ai_platform_network_create+0x2f0>
 800ed00:	e7fe      	b.n	800ed00 <ai_platform_network_create+0x398>
 800ed02:	f04f 0902 	mov.w	r9, #2
 800ed06:	e748      	b.n	800eb9a <ai_platform_network_create+0x232>
 800ed08:	58024000 	.word	0x58024000
 800ed0c:	f407a5c2 	.word	0xf407a5c2
 800ed10:	b5e8b5cd 	.word	0xb5e8b5cd
 800ed14:	40023000 	.word	0x40023000
 800ed18:	84048403 	.word	0x84048403

0800ed1c <ai_platform_network_init>:
 800ed1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d052      	beq.n	800edca <ai_platform_network_init+0xae>
 800ed24:	4bab      	ldr	r3, [pc, #684]	; (800efd4 <ai_platform_network_init+0x2b8>)
 800ed26:	4604      	mov	r4, r0
 800ed28:	6802      	ldr	r2, [r0, #0]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d14d      	bne.n	800edca <ai_platform_network_init+0xae>
 800ed2e:	460d      	mov	r5, r1
 800ed30:	f7ff f926 	bl	800df80 <_ai_platform_acquire_crc>
 800ed34:	4ba8      	ldr	r3, [pc, #672]	; (800efd8 <ai_platform_network_init+0x2bc>)
 800ed36:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed40:	189a      	adds	r2, r3, r2
 800ed42:	2a01      	cmp	r2, #1
 800ed44:	f240 809b 	bls.w	800ee7e <ai_platform_network_init+0x162>
 800ed48:	f240 4249 	movw	r2, #1097	; 0x449
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	f000 8096 	beq.w	800ee7e <ai_platform_network_init+0x162>
 800ed52:	4aa2      	ldr	r2, [pc, #648]	; (800efdc <ai_platform_network_init+0x2c0>)
 800ed54:	6813      	ldr	r3, [r2, #0]
 800ed56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed5a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ed5e:	f000 809d 	beq.w	800ee9c <ai_platform_network_init+0x180>
 800ed62:	6813      	ldr	r3, [r2, #0]
 800ed64:	f240 4183 	movw	r1, #1155	; 0x483
 800ed68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed6c:	428b      	cmp	r3, r1
 800ed6e:	f000 80e4 	beq.w	800ef3a <ai_platform_network_init+0x21e>
 800ed72:	6813      	ldr	r3, [r2, #0]
 800ed74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed78:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ed7c:	f000 811b 	beq.w	800efb6 <ai_platform_network_init+0x29a>
 800ed80:	6813      	ldr	r3, [r2, #0]
 800ed82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 80f9 	beq.w	800ef7e <ai_platform_network_init+0x262>
 800ed8c:	f7ff f8fa 	bl	800df84 <_ai_platform_release_crc>
 800ed90:	2d00      	cmp	r5, #0
 800ed92:	f000 8147 	beq.w	800f024 <ai_platform_network_init+0x308>
 800ed96:	4b92      	ldr	r3, [pc, #584]	; (800efe0 <ai_platform_network_init+0x2c4>)
 800ed98:	682a      	ldr	r2, [r5, #0]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	f040 8090 	bne.w	800eec0 <ai_platform_network_init+0x1a4>
 800eda0:	692b      	ldr	r3, [r5, #16]
 800eda2:	89ae      	ldrh	r6, [r5, #12]
 800eda4:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800eda8:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800edac:	62a3      	str	r3, [r4, #40]	; 0x28
 800edae:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800edb2:	2303      	movs	r3, #3
 800edb4:	84a6      	strh	r6, [r4, #36]	; 0x24
 800edb6:	4626      	mov	r6, r4
 800edb8:	4620      	mov	r0, r4
 800edba:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800edbe:	60e3      	str	r3, [r4, #12]
 800edc0:	f001 f8ec 	bl	800ff9c <ai_layers_init_all>
 800edc4:	4630      	mov	r0, r6
 800edc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edca:	f7ff f8d9 	bl	800df80 <_ai_platform_acquire_crc>
 800edce:	4b82      	ldr	r3, [pc, #520]	; (800efd8 <ai_platform_network_init+0x2bc>)
 800edd0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edda:	185a      	adds	r2, r3, r1
 800eddc:	2a01      	cmp	r2, #1
 800edde:	d92b      	bls.n	800ee38 <ai_platform_network_init+0x11c>
 800ede0:	f240 4249 	movw	r2, #1097	; 0x449
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d027      	beq.n	800ee38 <ai_platform_network_init+0x11c>
 800ede8:	4a7c      	ldr	r2, [pc, #496]	; (800efdc <ai_platform_network_init+0x2c0>)
 800edea:	6813      	ldr	r3, [r2, #0]
 800edec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edf0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800edf4:	d02d      	beq.n	800ee52 <ai_platform_network_init+0x136>
 800edf6:	6813      	ldr	r3, [r2, #0]
 800edf8:	f240 4183 	movw	r1, #1155	; 0x483
 800edfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ee00:	428b      	cmp	r3, r1
 800ee02:	f000 8089 	beq.w	800ef18 <ai_platform_network_init+0x1fc>
 800ee06:	6813      	ldr	r3, [r2, #0]
 800ee08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ee0c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ee10:	f000 80c3 	beq.w	800ef9a <ai_platform_network_init+0x27e>
 800ee14:	6813      	ldr	r3, [r2, #0]
 800ee16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d129      	bne.n	800ee72 <ai_platform_network_init+0x156>
 800ee1e:	4a71      	ldr	r2, [pc, #452]	; (800efe4 <ai_platform_network_init+0x2c8>)
 800ee20:	2301      	movs	r3, #1
 800ee22:	6093      	str	r3, [r2, #8]
 800ee24:	6893      	ldr	r3, [r2, #8]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1fc      	bne.n	800ee24 <ai_platform_network_init+0x108>
 800ee2a:	496f      	ldr	r1, [pc, #444]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800ee2c:	4b6f      	ldr	r3, [pc, #444]	; (800efec <ai_platform_network_init+0x2d0>)
 800ee2e:	6011      	str	r1, [r2, #0]
 800ee30:	6812      	ldr	r2, [r2, #0]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d01d      	beq.n	800ee72 <ai_platform_network_init+0x156>
 800ee36:	e7fe      	b.n	800ee36 <ai_platform_network_init+0x11a>
 800ee38:	4a6a      	ldr	r2, [pc, #424]	; (800efe4 <ai_platform_network_init+0x2c8>)
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	6093      	str	r3, [r2, #8]
 800ee3e:	6893      	ldr	r3, [r2, #8]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1fc      	bne.n	800ee3e <ai_platform_network_init+0x122>
 800ee44:	4968      	ldr	r1, [pc, #416]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800ee46:	4b69      	ldr	r3, [pc, #420]	; (800efec <ai_platform_network_init+0x2d0>)
 800ee48:	6011      	str	r1, [r2, #0]
 800ee4a:	6812      	ldr	r2, [r2, #0]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d010      	beq.n	800ee72 <ai_platform_network_init+0x156>
 800ee50:	e7fe      	b.n	800ee50 <ai_platform_network_init+0x134>
 800ee52:	4a67      	ldr	r2, [pc, #412]	; (800eff0 <ai_platform_network_init+0x2d4>)
 800ee54:	2301      	movs	r3, #1
 800ee56:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ee5a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1fb      	bne.n	800ee5a <ai_platform_network_init+0x13e>
 800ee62:	4961      	ldr	r1, [pc, #388]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800ee64:	4b61      	ldr	r3, [pc, #388]	; (800efec <ai_platform_network_init+0x2d0>)
 800ee66:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ee6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d113      	bne.n	800ee9a <ai_platform_network_init+0x17e>
 800ee72:	2600      	movs	r6, #0
 800ee74:	f7ff f886 	bl	800df84 <_ai_platform_release_crc>
 800ee78:	4630      	mov	r0, r6
 800ee7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee7e:	4a59      	ldr	r2, [pc, #356]	; (800efe4 <ai_platform_network_init+0x2c8>)
 800ee80:	2301      	movs	r3, #1
 800ee82:	6093      	str	r3, [r2, #8]
 800ee84:	6893      	ldr	r3, [r2, #8]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1fc      	bne.n	800ee84 <ai_platform_network_init+0x168>
 800ee8a:	4b57      	ldr	r3, [pc, #348]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800ee8c:	6013      	str	r3, [r2, #0]
 800ee8e:	4b57      	ldr	r3, [pc, #348]	; (800efec <ai_platform_network_init+0x2d0>)
 800ee90:	6812      	ldr	r2, [r2, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	f43f af7a 	beq.w	800ed8c <ai_platform_network_init+0x70>
 800ee98:	e7fe      	b.n	800ee98 <ai_platform_network_init+0x17c>
 800ee9a:	e7fe      	b.n	800ee9a <ai_platform_network_init+0x17e>
 800ee9c:	4a54      	ldr	r2, [pc, #336]	; (800eff0 <ai_platform_network_init+0x2d4>)
 800ee9e:	2301      	movs	r3, #1
 800eea0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eea4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1fb      	bne.n	800eea4 <ai_platform_network_init+0x188>
 800eeac:	4b4e      	ldr	r3, [pc, #312]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800eeae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800eeb2:	4b4e      	ldr	r3, [pc, #312]	; (800efec <ai_platform_network_init+0x2d0>)
 800eeb4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	f43f af67 	beq.w	800ed8c <ai_platform_network_init+0x70>
 800eebe:	e7fe      	b.n	800eebe <ai_platform_network_init+0x1a2>
 800eec0:	2101      	movs	r1, #1
 800eec2:	4628      	mov	r0, r5
 800eec4:	f105 081c 	add.w	r8, r5, #28
 800eec8:	686e      	ldr	r6, [r5, #4]
 800eeca:	f7ff f80b 	bl	800dee4 <ai_buffer_get_size>
 800eece:	4607      	mov	r7, r0
 800eed0:	2101      	movs	r1, #1
 800eed2:	4640      	mov	r0, r8
 800eed4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800eed8:	f7ff f804 	bl	800dee4 <ai_buffer_get_size>
 800eedc:	2f00      	cmp	r7, #0
 800eede:	d13e      	bne.n	800ef5e <ai_platform_network_init+0x242>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	f000 808e 	beq.w	800f002 <ai_platform_network_init+0x2e6>
 800eee6:	f1b9 0f00 	cmp.w	r9, #0
 800eeea:	f000 8094 	beq.w	800f016 <ai_platform_network_init+0x2fa>
 800eeee:	f04f 0c01 	mov.w	ip, #1
 800eef2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800eef4:	2600      	movs	r6, #0
 800eef6:	83e7      	strh	r7, [r4, #30]
 800eef8:	4563      	cmp	r3, ip
 800eefa:	83a6      	strh	r6, [r4, #28]
 800eefc:	d37a      	bcc.n	800eff4 <ai_platform_network_init+0x2d8>
 800eefe:	f1bc 0f00 	cmp.w	ip, #0
 800ef02:	f000 809c 	beq.w	800f03e <ai_platform_network_init+0x322>
 800ef06:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800ef08:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800ef0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ef0e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800ef12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ef16:	e74c      	b.n	800edb2 <ai_platform_network_init+0x96>
 800ef18:	4a35      	ldr	r2, [pc, #212]	; (800eff0 <ai_platform_network_init+0x2d4>)
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ef20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1fb      	bne.n	800ef20 <ai_platform_network_init+0x204>
 800ef28:	492f      	ldr	r1, [pc, #188]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800ef2a:	4b30      	ldr	r3, [pc, #192]	; (800efec <ai_platform_network_init+0x2d0>)
 800ef2c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ef30:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d09c      	beq.n	800ee72 <ai_platform_network_init+0x156>
 800ef38:	e7fe      	b.n	800ef38 <ai_platform_network_init+0x21c>
 800ef3a:	4a2d      	ldr	r2, [pc, #180]	; (800eff0 <ai_platform_network_init+0x2d4>)
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ef42:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1fb      	bne.n	800ef42 <ai_platform_network_init+0x226>
 800ef4a:	4b27      	ldr	r3, [pc, #156]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800ef4c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ef50:	4b26      	ldr	r3, [pc, #152]	; (800efec <ai_platform_network_init+0x2d0>)
 800ef52:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ef56:	429a      	cmp	r2, r3
 800ef58:	f43f af18 	beq.w	800ed8c <ai_platform_network_init+0x70>
 800ef5c:	e7fe      	b.n	800ef5c <ai_platform_network_init+0x240>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d153      	bne.n	800f00a <ai_platform_network_init+0x2ee>
 800ef62:	4680      	mov	r8, r0
 800ef64:	4684      	mov	ip, r0
 800ef66:	2e00      	cmp	r6, #0
 800ef68:	d063      	beq.n	800f032 <ai_platform_network_init+0x316>
 800ef6a:	8be6      	ldrh	r6, [r4, #30]
 800ef6c:	2e00      	cmp	r6, #0
 800ef6e:	d168      	bne.n	800f042 <ai_platform_network_init+0x326>
 800ef70:	2212      	movs	r2, #18
 800ef72:	2116      	movs	r1, #22
 800ef74:	f104 0010 	add.w	r0, r4, #16
 800ef78:	f000 fc7c 	bl	800f874 <core_set_error>
 800ef7c:	e77c      	b.n	800ee78 <ai_platform_network_init+0x15c>
 800ef7e:	4a19      	ldr	r2, [pc, #100]	; (800efe4 <ai_platform_network_init+0x2c8>)
 800ef80:	2301      	movs	r3, #1
 800ef82:	6093      	str	r3, [r2, #8]
 800ef84:	6893      	ldr	r3, [r2, #8]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1fc      	bne.n	800ef84 <ai_platform_network_init+0x268>
 800ef8a:	4b17      	ldr	r3, [pc, #92]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	4b17      	ldr	r3, [pc, #92]	; (800efec <ai_platform_network_init+0x2d0>)
 800ef90:	6812      	ldr	r2, [r2, #0]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	f43f aefa 	beq.w	800ed8c <ai_platform_network_init+0x70>
 800ef98:	e7fe      	b.n	800ef98 <ai_platform_network_init+0x27c>
 800ef9a:	4a12      	ldr	r2, [pc, #72]	; (800efe4 <ai_platform_network_init+0x2c8>)
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	6093      	str	r3, [r2, #8]
 800efa0:	6893      	ldr	r3, [r2, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1fc      	bne.n	800efa0 <ai_platform_network_init+0x284>
 800efa6:	4910      	ldr	r1, [pc, #64]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800efa8:	4b10      	ldr	r3, [pc, #64]	; (800efec <ai_platform_network_init+0x2d0>)
 800efaa:	6011      	str	r1, [r2, #0]
 800efac:	6812      	ldr	r2, [r2, #0]
 800efae:	429a      	cmp	r2, r3
 800efb0:	f43f af5f 	beq.w	800ee72 <ai_platform_network_init+0x156>
 800efb4:	e7fe      	b.n	800efb4 <ai_platform_network_init+0x298>
 800efb6:	4a0b      	ldr	r2, [pc, #44]	; (800efe4 <ai_platform_network_init+0x2c8>)
 800efb8:	2301      	movs	r3, #1
 800efba:	6093      	str	r3, [r2, #8]
 800efbc:	6893      	ldr	r3, [r2, #8]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1fc      	bne.n	800efbc <ai_platform_network_init+0x2a0>
 800efc2:	4b09      	ldr	r3, [pc, #36]	; (800efe8 <ai_platform_network_init+0x2cc>)
 800efc4:	6013      	str	r3, [r2, #0]
 800efc6:	4b09      	ldr	r3, [pc, #36]	; (800efec <ai_platform_network_init+0x2d0>)
 800efc8:	6812      	ldr	r2, [r2, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	f43f aede 	beq.w	800ed8c <ai_platform_network_init+0x70>
 800efd0:	e7fe      	b.n	800efd0 <ai_platform_network_init+0x2b4>
 800efd2:	bf00      	nop
 800efd4:	a1c00100 	.word	0xa1c00100
 800efd8:	e0042000 	.word	0xe0042000
 800efdc:	5c001000 	.word	0x5c001000
 800efe0:	a1facade 	.word	0xa1facade
 800efe4:	40023000 	.word	0x40023000
 800efe8:	f407a5c2 	.word	0xf407a5c2
 800efec:	b5e8b5cd 	.word	0xb5e8b5cd
 800eff0:	58024000 	.word	0x58024000
 800eff4:	2213      	movs	r2, #19
 800eff6:	2116      	movs	r1, #22
 800eff8:	f104 0010 	add.w	r0, r4, #16
 800effc:	f000 fc3a 	bl	800f874 <core_set_error>
 800f000:	e73a      	b.n	800ee78 <ai_platform_network_init+0x15c>
 800f002:	4607      	mov	r7, r0
 800f004:	4680      	mov	r8, r0
 800f006:	4684      	mov	ip, r0
 800f008:	e773      	b.n	800eef2 <ai_platform_network_init+0x1d6>
 800f00a:	f1b9 0f00 	cmp.w	r9, #0
 800f00e:	d002      	beq.n	800f016 <ai_platform_network_init+0x2fa>
 800f010:	f04f 0c01 	mov.w	ip, #1
 800f014:	e7a7      	b.n	800ef66 <ai_platform_network_init+0x24a>
 800f016:	2110      	movs	r1, #16
 800f018:	2213      	movs	r2, #19
 800f01a:	2600      	movs	r6, #0
 800f01c:	1860      	adds	r0, r4, r1
 800f01e:	f000 fc29 	bl	800f874 <core_set_error>
 800f022:	e729      	b.n	800ee78 <ai_platform_network_init+0x15c>
 800f024:	2110      	movs	r1, #16
 800f026:	2211      	movs	r2, #17
 800f028:	462e      	mov	r6, r5
 800f02a:	1860      	adds	r0, r4, r1
 800f02c:	f000 fc22 	bl	800f874 <core_set_error>
 800f030:	e722      	b.n	800ee78 <ai_platform_network_init+0x15c>
 800f032:	2110      	movs	r1, #16
 800f034:	2212      	movs	r2, #18
 800f036:	1860      	adds	r0, r4, r1
 800f038:	f000 fc1c 	bl	800f874 <core_set_error>
 800f03c:	e71c      	b.n	800ee78 <ai_platform_network_init+0x15c>
 800f03e:	4666      	mov	r6, ip
 800f040:	e6b7      	b.n	800edb2 <ai_platform_network_init+0x96>
 800f042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f044:	6a26      	ldr	r6, [r4, #32]
 800f046:	2701      	movs	r7, #1
 800f048:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f04a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f04e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f052:	e74e      	b.n	800eef2 <ai_platform_network_init+0x1d6>

0800f054 <ai_platform_network_post_init>:
 800f054:	b538      	push	{r3, r4, r5, lr}
 800f056:	2800      	cmp	r0, #0
 800f058:	d04e      	beq.n	800f0f8 <ai_platform_network_post_init+0xa4>
 800f05a:	4b8c      	ldr	r3, [pc, #560]	; (800f28c <ai_platform_network_post_init+0x238>)
 800f05c:	4604      	mov	r4, r0
 800f05e:	6802      	ldr	r2, [r0, #0]
 800f060:	429a      	cmp	r2, r3
 800f062:	d149      	bne.n	800f0f8 <ai_platform_network_post_init+0xa4>
 800f064:	f7fe ff8c 	bl	800df80 <_ai_platform_acquire_crc>
 800f068:	4b89      	ldr	r3, [pc, #548]	; (800f290 <ai_platform_network_post_init+0x23c>)
 800f06a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f074:	189a      	adds	r2, r3, r2
 800f076:	2a01      	cmp	r2, #1
 800f078:	f240 8095 	bls.w	800f1a6 <ai_platform_network_post_init+0x152>
 800f07c:	f240 4249 	movw	r2, #1097	; 0x449
 800f080:	4293      	cmp	r3, r2
 800f082:	f000 8090 	beq.w	800f1a6 <ai_platform_network_post_init+0x152>
 800f086:	4a83      	ldr	r2, [pc, #524]	; (800f294 <ai_platform_network_post_init+0x240>)
 800f088:	6813      	ldr	r3, [r2, #0]
 800f08a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f08e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f092:	f000 8096 	beq.w	800f1c2 <ai_platform_network_post_init+0x16e>
 800f096:	6813      	ldr	r3, [r2, #0]
 800f098:	f240 4183 	movw	r1, #1155	; 0x483
 800f09c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f0a0:	428b      	cmp	r3, r1
 800f0a2:	f000 80b8 	beq.w	800f216 <ai_platform_network_post_init+0x1c2>
 800f0a6:	6813      	ldr	r3, [r2, #0]
 800f0a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f0ac:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f0b0:	f000 80de 	beq.w	800f270 <ai_platform_network_post_init+0x21c>
 800f0b4:	6813      	ldr	r3, [r2, #0]
 800f0b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f000 80bd 	beq.w	800f23a <ai_platform_network_post_init+0x1e6>
 800f0c0:	f7fe ff60 	bl	800df84 <_ai_platform_release_crc>
 800f0c4:	68e3      	ldr	r3, [r4, #12]
 800f0c6:	f013 0502 	ands.w	r5, r3, #2
 800f0ca:	f000 808c 	beq.w	800f1e6 <ai_platform_network_post_init+0x192>
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f000 ff72 	bl	800ffb8 <ai_layers_post_init_all>
 800f0d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f0d6:	b16b      	cbz	r3, 800f0f4 <ai_platform_network_post_init+0xa0>
 800f0d8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f0da:	e007      	b.n	800f0ec <ai_platform_network_post_init+0x98>
 800f0dc:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800f0e0:	4798      	blx	r3
 800f0e2:	692b      	ldr	r3, [r5, #16]
 800f0e4:	b133      	cbz	r3, 800f0f4 <ai_platform_network_post_init+0xa0>
 800f0e6:	42ab      	cmp	r3, r5
 800f0e8:	461d      	mov	r5, r3
 800f0ea:	d003      	beq.n	800f0f4 <ai_platform_network_post_init+0xa0>
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	2d00      	cmp	r5, #0
 800f0f2:	d1f3      	bne.n	800f0dc <ai_platform_network_post_init+0x88>
 800f0f4:	2001      	movs	r0, #1
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	f7fe ff42 	bl	800df80 <_ai_platform_acquire_crc>
 800f0fc:	4b64      	ldr	r3, [pc, #400]	; (800f290 <ai_platform_network_post_init+0x23c>)
 800f0fe:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f108:	185a      	adds	r2, r3, r1
 800f10a:	2a01      	cmp	r2, #1
 800f10c:	d92a      	bls.n	800f164 <ai_platform_network_post_init+0x110>
 800f10e:	f240 4249 	movw	r2, #1097	; 0x449
 800f112:	4293      	cmp	r3, r2
 800f114:	d026      	beq.n	800f164 <ai_platform_network_post_init+0x110>
 800f116:	4a5f      	ldr	r2, [pc, #380]	; (800f294 <ai_platform_network_post_init+0x240>)
 800f118:	6813      	ldr	r3, [r2, #0]
 800f11a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f11e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f122:	d02c      	beq.n	800f17e <ai_platform_network_post_init+0x12a>
 800f124:	6813      	ldr	r3, [r2, #0]
 800f126:	f240 4183 	movw	r1, #1155	; 0x483
 800f12a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f12e:	428b      	cmp	r3, r1
 800f130:	d060      	beq.n	800f1f4 <ai_platform_network_post_init+0x1a0>
 800f132:	6813      	ldr	r3, [r2, #0]
 800f134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f138:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f13c:	f000 808b 	beq.w	800f256 <ai_platform_network_post_init+0x202>
 800f140:	6813      	ldr	r3, [r2, #0]
 800f142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f146:	2b00      	cmp	r3, #0
 800f148:	d129      	bne.n	800f19e <ai_platform_network_post_init+0x14a>
 800f14a:	4a53      	ldr	r2, [pc, #332]	; (800f298 <ai_platform_network_post_init+0x244>)
 800f14c:	2301      	movs	r3, #1
 800f14e:	6093      	str	r3, [r2, #8]
 800f150:	6893      	ldr	r3, [r2, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1fc      	bne.n	800f150 <ai_platform_network_post_init+0xfc>
 800f156:	4951      	ldr	r1, [pc, #324]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f158:	4b51      	ldr	r3, [pc, #324]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f15a:	6011      	str	r1, [r2, #0]
 800f15c:	6812      	ldr	r2, [r2, #0]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d01d      	beq.n	800f19e <ai_platform_network_post_init+0x14a>
 800f162:	e7fe      	b.n	800f162 <ai_platform_network_post_init+0x10e>
 800f164:	4a4c      	ldr	r2, [pc, #304]	; (800f298 <ai_platform_network_post_init+0x244>)
 800f166:	2301      	movs	r3, #1
 800f168:	6093      	str	r3, [r2, #8]
 800f16a:	6893      	ldr	r3, [r2, #8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d1fc      	bne.n	800f16a <ai_platform_network_post_init+0x116>
 800f170:	494a      	ldr	r1, [pc, #296]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f172:	4b4b      	ldr	r3, [pc, #300]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f174:	6011      	str	r1, [r2, #0]
 800f176:	6812      	ldr	r2, [r2, #0]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d010      	beq.n	800f19e <ai_platform_network_post_init+0x14a>
 800f17c:	e7fe      	b.n	800f17c <ai_platform_network_post_init+0x128>
 800f17e:	4a49      	ldr	r2, [pc, #292]	; (800f2a4 <ai_platform_network_post_init+0x250>)
 800f180:	2301      	movs	r3, #1
 800f182:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f186:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d1fb      	bne.n	800f186 <ai_platform_network_post_init+0x132>
 800f18e:	4943      	ldr	r1, [pc, #268]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f190:	4b43      	ldr	r3, [pc, #268]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f192:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f196:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d110      	bne.n	800f1c0 <ai_platform_network_post_init+0x16c>
 800f19e:	f7fe fef1 	bl	800df84 <_ai_platform_release_crc>
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	bd38      	pop	{r3, r4, r5, pc}
 800f1a6:	4a3c      	ldr	r2, [pc, #240]	; (800f298 <ai_platform_network_post_init+0x244>)
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	6093      	str	r3, [r2, #8]
 800f1ac:	6893      	ldr	r3, [r2, #8]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1fc      	bne.n	800f1ac <ai_platform_network_post_init+0x158>
 800f1b2:	493a      	ldr	r1, [pc, #232]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f1b4:	4b3a      	ldr	r3, [pc, #232]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f1b6:	6011      	str	r1, [r2, #0]
 800f1b8:	6812      	ldr	r2, [r2, #0]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d080      	beq.n	800f0c0 <ai_platform_network_post_init+0x6c>
 800f1be:	e7fe      	b.n	800f1be <ai_platform_network_post_init+0x16a>
 800f1c0:	e7fe      	b.n	800f1c0 <ai_platform_network_post_init+0x16c>
 800f1c2:	4a38      	ldr	r2, [pc, #224]	; (800f2a4 <ai_platform_network_post_init+0x250>)
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f1ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1fb      	bne.n	800f1ca <ai_platform_network_post_init+0x176>
 800f1d2:	4932      	ldr	r1, [pc, #200]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f1d4:	4b32      	ldr	r3, [pc, #200]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f1d6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f1da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	f43f af6e 	beq.w	800f0c0 <ai_platform_network_post_init+0x6c>
 800f1e4:	e7fe      	b.n	800f1e4 <ai_platform_network_post_init+0x190>
 800f1e6:	2210      	movs	r2, #16
 800f1e8:	2111      	movs	r1, #17
 800f1ea:	18a0      	adds	r0, r4, r2
 800f1ec:	f000 fb42 	bl	800f874 <core_set_error>
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	bd38      	pop	{r3, r4, r5, pc}
 800f1f4:	4a2b      	ldr	r2, [pc, #172]	; (800f2a4 <ai_platform_network_post_init+0x250>)
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f1fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1fb      	bne.n	800f1fc <ai_platform_network_post_init+0x1a8>
 800f204:	4925      	ldr	r1, [pc, #148]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f206:	4b26      	ldr	r3, [pc, #152]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f208:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f20c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f210:	429a      	cmp	r2, r3
 800f212:	d0c4      	beq.n	800f19e <ai_platform_network_post_init+0x14a>
 800f214:	e7fe      	b.n	800f214 <ai_platform_network_post_init+0x1c0>
 800f216:	4a23      	ldr	r2, [pc, #140]	; (800f2a4 <ai_platform_network_post_init+0x250>)
 800f218:	2301      	movs	r3, #1
 800f21a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f21e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1fb      	bne.n	800f21e <ai_platform_network_post_init+0x1ca>
 800f226:	491d      	ldr	r1, [pc, #116]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f228:	4b1d      	ldr	r3, [pc, #116]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f22a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f22e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f232:	429a      	cmp	r2, r3
 800f234:	f43f af44 	beq.w	800f0c0 <ai_platform_network_post_init+0x6c>
 800f238:	e7fe      	b.n	800f238 <ai_platform_network_post_init+0x1e4>
 800f23a:	4a17      	ldr	r2, [pc, #92]	; (800f298 <ai_platform_network_post_init+0x244>)
 800f23c:	2301      	movs	r3, #1
 800f23e:	6093      	str	r3, [r2, #8]
 800f240:	6893      	ldr	r3, [r2, #8]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1fc      	bne.n	800f240 <ai_platform_network_post_init+0x1ec>
 800f246:	4915      	ldr	r1, [pc, #84]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f248:	4b15      	ldr	r3, [pc, #84]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f24a:	6011      	str	r1, [r2, #0]
 800f24c:	6812      	ldr	r2, [r2, #0]
 800f24e:	429a      	cmp	r2, r3
 800f250:	f43f af36 	beq.w	800f0c0 <ai_platform_network_post_init+0x6c>
 800f254:	e7fe      	b.n	800f254 <ai_platform_network_post_init+0x200>
 800f256:	4a10      	ldr	r2, [pc, #64]	; (800f298 <ai_platform_network_post_init+0x244>)
 800f258:	2301      	movs	r3, #1
 800f25a:	6093      	str	r3, [r2, #8]
 800f25c:	6893      	ldr	r3, [r2, #8]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d1fc      	bne.n	800f25c <ai_platform_network_post_init+0x208>
 800f262:	490e      	ldr	r1, [pc, #56]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f264:	4b0e      	ldr	r3, [pc, #56]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f266:	6011      	str	r1, [r2, #0]
 800f268:	6812      	ldr	r2, [r2, #0]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d097      	beq.n	800f19e <ai_platform_network_post_init+0x14a>
 800f26e:	e7fe      	b.n	800f26e <ai_platform_network_post_init+0x21a>
 800f270:	4a09      	ldr	r2, [pc, #36]	; (800f298 <ai_platform_network_post_init+0x244>)
 800f272:	2301      	movs	r3, #1
 800f274:	6093      	str	r3, [r2, #8]
 800f276:	6893      	ldr	r3, [r2, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1fc      	bne.n	800f276 <ai_platform_network_post_init+0x222>
 800f27c:	4907      	ldr	r1, [pc, #28]	; (800f29c <ai_platform_network_post_init+0x248>)
 800f27e:	4b08      	ldr	r3, [pc, #32]	; (800f2a0 <ai_platform_network_post_init+0x24c>)
 800f280:	6011      	str	r1, [r2, #0]
 800f282:	6812      	ldr	r2, [r2, #0]
 800f284:	429a      	cmp	r2, r3
 800f286:	f43f af1b 	beq.w	800f0c0 <ai_platform_network_post_init+0x6c>
 800f28a:	e7fe      	b.n	800f28a <ai_platform_network_post_init+0x236>
 800f28c:	a1c00100 	.word	0xa1c00100
 800f290:	e0042000 	.word	0xe0042000
 800f294:	5c001000 	.word	0x5c001000
 800f298:	40023000 	.word	0x40023000
 800f29c:	f407a5c2 	.word	0xf407a5c2
 800f2a0:	b5e8b5cd 	.word	0xb5e8b5cd
 800f2a4:	58024000 	.word	0x58024000

0800f2a8 <ai_platform_network_process>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	b085      	sub	sp, #20
 800f2ae:	460e      	mov	r6, r1
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	9201      	str	r2, [sp, #4]
 800f2b4:	b120      	cbz	r0, 800f2c0 <ai_platform_network_process+0x18>
 800f2b6:	4b24      	ldr	r3, [pc, #144]	; (800f348 <ai_platform_network_process+0xa0>)
 800f2b8:	6802      	ldr	r2, [r0, #0]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	bf18      	it	ne
 800f2be:	2500      	movne	r5, #0
 800f2c0:	f7fe fe5e 	bl	800df80 <_ai_platform_acquire_crc>
 800f2c4:	4b21      	ldr	r3, [pc, #132]	; (800f34c <ai_platform_network_process+0xa4>)
 800f2c6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2d0:	185a      	adds	r2, r3, r1
 800f2d2:	2a01      	cmp	r2, #1
 800f2d4:	d92b      	bls.n	800f32e <ai_platform_network_process+0x86>
 800f2d6:	f240 4249 	movw	r2, #1097	; 0x449
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d027      	beq.n	800f32e <ai_platform_network_process+0x86>
 800f2de:	4a1c      	ldr	r2, [pc, #112]	; (800f350 <ai_platform_network_process+0xa8>)
 800f2e0:	6813      	ldr	r3, [r2, #0]
 800f2e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f2ea:	d039      	beq.n	800f360 <ai_platform_network_process+0xb8>
 800f2ec:	6813      	ldr	r3, [r2, #0]
 800f2ee:	f240 4183 	movw	r1, #1155	; 0x483
 800f2f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2f6:	428b      	cmp	r3, r1
 800f2f8:	f000 819c 	beq.w	800f634 <ai_platform_network_process+0x38c>
 800f2fc:	6813      	ldr	r3, [r2, #0]
 800f2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f302:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f306:	f000 8179 	beq.w	800f5fc <ai_platform_network_process+0x354>
 800f30a:	6813      	ldr	r3, [r2, #0]
 800f30c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f310:	2b00      	cmp	r3, #0
 800f312:	d136      	bne.n	800f382 <ai_platform_network_process+0xda>
 800f314:	4a0f      	ldr	r2, [pc, #60]	; (800f354 <ai_platform_network_process+0xac>)
 800f316:	2301      	movs	r3, #1
 800f318:	6093      	str	r3, [r2, #8]
 800f31a:	6893      	ldr	r3, [r2, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1fc      	bne.n	800f31a <ai_platform_network_process+0x72>
 800f320:	4b0d      	ldr	r3, [pc, #52]	; (800f358 <ai_platform_network_process+0xb0>)
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	4b0d      	ldr	r3, [pc, #52]	; (800f35c <ai_platform_network_process+0xb4>)
 800f326:	6812      	ldr	r2, [r2, #0]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d02a      	beq.n	800f382 <ai_platform_network_process+0xda>
 800f32c:	e7fe      	b.n	800f32c <ai_platform_network_process+0x84>
 800f32e:	4a09      	ldr	r2, [pc, #36]	; (800f354 <ai_platform_network_process+0xac>)
 800f330:	2301      	movs	r3, #1
 800f332:	6093      	str	r3, [r2, #8]
 800f334:	6893      	ldr	r3, [r2, #8]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1fc      	bne.n	800f334 <ai_platform_network_process+0x8c>
 800f33a:	4b07      	ldr	r3, [pc, #28]	; (800f358 <ai_platform_network_process+0xb0>)
 800f33c:	6013      	str	r3, [r2, #0]
 800f33e:	4b07      	ldr	r3, [pc, #28]	; (800f35c <ai_platform_network_process+0xb4>)
 800f340:	6812      	ldr	r2, [r2, #0]
 800f342:	429a      	cmp	r2, r3
 800f344:	d01d      	beq.n	800f382 <ai_platform_network_process+0xda>
 800f346:	e7fe      	b.n	800f346 <ai_platform_network_process+0x9e>
 800f348:	a1c00100 	.word	0xa1c00100
 800f34c:	e0042000 	.word	0xe0042000
 800f350:	5c001000 	.word	0x5c001000
 800f354:	40023000 	.word	0x40023000
 800f358:	f407a5c2 	.word	0xf407a5c2
 800f35c:	b5e8b5cd 	.word	0xb5e8b5cd
 800f360:	4ab0      	ldr	r2, [pc, #704]	; (800f624 <ai_platform_network_process+0x37c>)
 800f362:	2301      	movs	r3, #1
 800f364:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f368:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1fb      	bne.n	800f368 <ai_platform_network_process+0xc0>
 800f370:	4bad      	ldr	r3, [pc, #692]	; (800f628 <ai_platform_network_process+0x380>)
 800f372:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f376:	4bad      	ldr	r3, [pc, #692]	; (800f62c <ai_platform_network_process+0x384>)
 800f378:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f37c:	429a      	cmp	r2, r3
 800f37e:	f040 812b 	bne.w	800f5d8 <ai_platform_network_process+0x330>
 800f382:	f7fe fdff 	bl	800df84 <_ai_platform_release_crc>
 800f386:	2d00      	cmp	r5, #0
 800f388:	f000 8172 	beq.w	800f670 <ai_platform_network_process+0x3c8>
 800f38c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 8123 	beq.w	800f5da <ai_platform_network_process+0x332>
 800f394:	68eb      	ldr	r3, [r5, #12]
 800f396:	2200      	movs	r2, #0
 800f398:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800f39c:	f003 0303 	and.w	r3, r3, #3
 800f3a0:	616a      	str	r2, [r5, #20]
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	f040 811f 	bne.w	800f5e6 <ai_platform_network_process+0x33e>
 800f3a8:	2e00      	cmp	r6, #0
 800f3aa:	f000 8156 	beq.w	800f65a <ai_platform_network_process+0x3b2>
 800f3ae:	fab8 f788 	clz	r7, r8
 800f3b2:	097f      	lsrs	r7, r7, #5
 800f3b4:	f1b8 0f00 	cmp.w	r8, #0
 800f3b8:	f000 814f 	beq.w	800f65a <ai_platform_network_process+0x3b2>
 800f3bc:	f8b8 3000 	ldrh.w	r3, [r8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f000 814a 	beq.w	800f65a <ai_platform_network_process+0x3b2>
 800f3c6:	69b3      	ldr	r3, [r6, #24]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800f3ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d072      	beq.n	800f4bc <ai_platform_network_process+0x214>
 800f3d6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f3da:	2c00      	cmp	r4, #0
 800f3dc:	d06e      	beq.n	800f4bc <ai_platform_network_process+0x214>
 800f3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3e2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f3e6:	f8d3 a000 	ldr.w	sl, [r3]
 800f3ea:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800f3ee:	f000 8133 	beq.w	800f658 <ai_platform_network_process+0x3b0>
 800f3f2:	69a3      	ldr	r3, [r4, #24]
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	685d      	ldr	r5, [r3, #4]
 800f3fa:	f7fe fd73 	bl	800dee4 <ai_buffer_get_size>
 800f3fe:	4285      	cmp	r5, r0
 800f400:	f0c0 8138 	bcc.w	800f674 <ai_platform_network_process+0x3cc>
 800f404:	68e0      	ldr	r0, [r4, #12]
 800f406:	69b1      	ldr	r1, [r6, #24]
 800f408:	68c2      	ldr	r2, [r0, #12]
 800f40a:	68cb      	ldr	r3, [r1, #12]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	f040 8131 	bne.w	800f674 <ai_platform_network_process+0x3cc>
 800f412:	6882      	ldr	r2, [r0, #8]
 800f414:	688b      	ldr	r3, [r1, #8]
 800f416:	429a      	cmp	r2, r3
 800f418:	f040 812c 	bne.w	800f674 <ai_platform_network_process+0x3cc>
 800f41c:	6842      	ldr	r2, [r0, #4]
 800f41e:	684b      	ldr	r3, [r1, #4]
 800f420:	429a      	cmp	r2, r3
 800f422:	f040 8127 	bne.w	800f674 <ai_platform_network_process+0x3cc>
 800f426:	69a3      	ldr	r3, [r4, #24]
 800f428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f42c:	f000 fea8 	bl	8010180 <ai_array_get_data_byte_size>
 800f430:	4605      	mov	r5, r0
 800f432:	4620      	mov	r0, r4
 800f434:	f000 fe22 	bl	801007c <get_tensor_byte_size>
 800f438:	4285      	cmp	r5, r0
 800f43a:	f0c0 811b 	bcc.w	800f674 <ai_platform_network_process+0x3cc>
 800f43e:	69a3      	ldr	r3, [r4, #24]
 800f440:	6818      	ldr	r0, [r3, #0]
 800f442:	f000 fe31 	bl	80100a8 <ai_array_to_buffer_fmt>
 800f446:	6833      	ldr	r3, [r6, #0]
 800f448:	4058      	eors	r0, r3
 800f44a:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f44e:	f040 81ca 	bne.w	800f7e6 <ai_platform_network_process+0x53e>
 800f452:	6873      	ldr	r3, [r6, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	f000 81bd 	beq.w	800f7d4 <ai_platform_network_process+0x52c>
 800f45a:	69b3      	ldr	r3, [r6, #24]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f000 81ca 	beq.w	800f7f8 <ai_platform_network_process+0x550>
 800f464:	9a02      	ldr	r2, [sp, #8]
 800f466:	4620      	mov	r0, r4
 800f468:	3701      	adds	r7, #1
 800f46a:	361c      	adds	r6, #28
 800f46c:	429a      	cmp	r2, r3
 800f46e:	bf38      	it	cc
 800f470:	461a      	movcc	r2, r3
 800f472:	9202      	str	r2, [sp, #8]
 800f474:	f000 fe02 	bl	801007c <get_tensor_byte_size>
 800f478:	f8c9 0008 	str.w	r0, [r9, #8]
 800f47c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	fb00 f303 	mul.w	r3, r0, r3
 800f486:	f8c9 300c 	str.w	r3, [r9, #12]
 800f48a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f48e:	440b      	add	r3, r1
 800f490:	f8c9 1004 	str.w	r1, [r9, #4]
 800f494:	f84a 300b 	str.w	r3, [sl, fp]
 800f498:	69a0      	ldr	r0, [r4, #24]
 800f49a:	6803      	ldr	r3, [r0, #0]
 800f49c:	009a      	lsls	r2, r3, #2
 800f49e:	f100 80bb 	bmi.w	800f618 <ai_platform_network_process+0x370>
 800f4a2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f4a6:	1a9b      	subs	r3, r3, r2
 800f4a8:	4419      	add	r1, r3
 800f4aa:	6081      	str	r1, [r0, #8]
 800f4ac:	69a3      	ldr	r3, [r4, #24]
 800f4ae:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f4b2:	60da      	str	r2, [r3, #12]
 800f4b4:	f8b8 3000 	ldrh.w	r3, [r8]
 800f4b8:	42bb      	cmp	r3, r7
 800f4ba:	d888      	bhi.n	800f3ce <ai_platform_network_process+0x126>
 800f4bc:	9d03      	ldr	r5, [sp, #12]
 800f4be:	9b01      	ldr	r3, [sp, #4]
 800f4c0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f000 81a1 	beq.w	800f80a <ai_platform_network_process+0x562>
 800f4c8:	2a01      	cmp	r2, #1
 800f4ca:	f240 817b 	bls.w	800f7c4 <ai_platform_network_process+0x51c>
 800f4ce:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800f4d2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f000 8174 	beq.w	800f7c4 <ai_platform_network_process+0x51c>
 800f4dc:	9e01      	ldr	r6, [sp, #4]
 800f4de:	2700      	movs	r7, #0
 800f4e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 80d3 	beq.w	800f690 <ai_platform_network_process+0x3e8>
 800f4ea:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f4ee:	2c00      	cmp	r4, #0
 800f4f0:	f000 80ce 	beq.w	800f690 <ai_platform_network_process+0x3e8>
 800f4f4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f4f8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f4fc:	f8d3 8000 	ldr.w	r8, [r3]
 800f500:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800f504:	f000 819f 	beq.w	800f846 <ai_platform_network_process+0x59e>
 800f508:	69a3      	ldr	r3, [r4, #24]
 800f50a:	2101      	movs	r1, #1
 800f50c:	4630      	mov	r0, r6
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	9301      	str	r3, [sp, #4]
 800f512:	f7fe fce7 	bl	800dee4 <ai_buffer_get_size>
 800f516:	9b01      	ldr	r3, [sp, #4]
 800f518:	4283      	cmp	r3, r0
 800f51a:	f0c0 8153 	bcc.w	800f7c4 <ai_platform_network_process+0x51c>
 800f51e:	68e0      	ldr	r0, [r4, #12]
 800f520:	69b1      	ldr	r1, [r6, #24]
 800f522:	68c2      	ldr	r2, [r0, #12]
 800f524:	68cb      	ldr	r3, [r1, #12]
 800f526:	429a      	cmp	r2, r3
 800f528:	f040 814c 	bne.w	800f7c4 <ai_platform_network_process+0x51c>
 800f52c:	6882      	ldr	r2, [r0, #8]
 800f52e:	688b      	ldr	r3, [r1, #8]
 800f530:	429a      	cmp	r2, r3
 800f532:	f040 8147 	bne.w	800f7c4 <ai_platform_network_process+0x51c>
 800f536:	6842      	ldr	r2, [r0, #4]
 800f538:	684b      	ldr	r3, [r1, #4]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	f040 8142 	bne.w	800f7c4 <ai_platform_network_process+0x51c>
 800f540:	69a3      	ldr	r3, [r4, #24]
 800f542:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f546:	f000 fe1b 	bl	8010180 <ai_array_get_data_byte_size>
 800f54a:	9001      	str	r0, [sp, #4]
 800f54c:	4620      	mov	r0, r4
 800f54e:	f000 fd95 	bl	801007c <get_tensor_byte_size>
 800f552:	9b01      	ldr	r3, [sp, #4]
 800f554:	4283      	cmp	r3, r0
 800f556:	f0c0 8135 	bcc.w	800f7c4 <ai_platform_network_process+0x51c>
 800f55a:	69a3      	ldr	r3, [r4, #24]
 800f55c:	6818      	ldr	r0, [r3, #0]
 800f55e:	f000 fda3 	bl	80100a8 <ai_array_to_buffer_fmt>
 800f562:	6833      	ldr	r3, [r6, #0]
 800f564:	4058      	eors	r0, r3
 800f566:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f56a:	f040 815c 	bne.w	800f826 <ai_platform_network_process+0x57e>
 800f56e:	6873      	ldr	r3, [r6, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 8150 	beq.w	800f816 <ai_platform_network_process+0x56e>
 800f576:	69b3      	ldr	r3, [r6, #24]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f000 815b 	beq.w	800f836 <ai_platform_network_process+0x58e>
 800f580:	9a02      	ldr	r2, [sp, #8]
 800f582:	4620      	mov	r0, r4
 800f584:	3701      	adds	r7, #1
 800f586:	361c      	adds	r6, #28
 800f588:	429a      	cmp	r2, r3
 800f58a:	bf38      	it	cc
 800f58c:	461a      	movcc	r2, r3
 800f58e:	9202      	str	r2, [sp, #8]
 800f590:	f000 fd74 	bl	801007c <get_tensor_byte_size>
 800f594:	f8ca 0008 	str.w	r0, [sl, #8]
 800f598:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	fb00 f303 	mul.w	r3, r0, r3
 800f5a2:	f8ca 300c 	str.w	r3, [sl, #12]
 800f5a6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f5aa:	440b      	add	r3, r1
 800f5ac:	f8ca 1004 	str.w	r1, [sl, #4]
 800f5b0:	f848 300b 	str.w	r3, [r8, fp]
 800f5b4:	69a0      	ldr	r0, [r4, #24]
 800f5b6:	6803      	ldr	r3, [r0, #0]
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	d464      	bmi.n	800f686 <ai_platform_network_process+0x3de>
 800f5bc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f5c0:	1a9b      	subs	r3, r3, r2
 800f5c2:	4419      	add	r1, r3
 800f5c4:	6081      	str	r1, [r0, #8]
 800f5c6:	69a3      	ldr	r3, [r4, #24]
 800f5c8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f5cc:	60da      	str	r2, [r3, #12]
 800f5ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f5d2:	429f      	cmp	r7, r3
 800f5d4:	d384      	bcc.n	800f4e0 <ai_platform_network_process+0x238>
 800f5d6:	e05b      	b.n	800f690 <ai_platform_network_process+0x3e8>
 800f5d8:	e7fe      	b.n	800f5d8 <ai_platform_network_process+0x330>
 800f5da:	68ea      	ldr	r2, [r5, #12]
 800f5dc:	616b      	str	r3, [r5, #20]
 800f5de:	f002 0203 	and.w	r2, r2, #3
 800f5e2:	2a03      	cmp	r2, #3
 800f5e4:	d039      	beq.n	800f65a <ai_platform_network_process+0x3b2>
 800f5e6:	2230      	movs	r2, #48	; 0x30
 800f5e8:	2111      	movs	r1, #17
 800f5ea:	f105 0010 	add.w	r0, r5, #16
 800f5ee:	2400      	movs	r4, #0
 800f5f0:	f000 f940 	bl	800f874 <core_set_error>
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	b005      	add	sp, #20
 800f5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fc:	4a0c      	ldr	r2, [pc, #48]	; (800f630 <ai_platform_network_process+0x388>)
 800f5fe:	2301      	movs	r3, #1
 800f600:	6093      	str	r3, [r2, #8]
 800f602:	6893      	ldr	r3, [r2, #8]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d1fc      	bne.n	800f602 <ai_platform_network_process+0x35a>
 800f608:	4b07      	ldr	r3, [pc, #28]	; (800f628 <ai_platform_network_process+0x380>)
 800f60a:	6013      	str	r3, [r2, #0]
 800f60c:	4b07      	ldr	r3, [pc, #28]	; (800f62c <ai_platform_network_process+0x384>)
 800f60e:	6812      	ldr	r2, [r2, #0]
 800f610:	429a      	cmp	r2, r3
 800f612:	f43f aeb6 	beq.w	800f382 <ai_platform_network_process+0xda>
 800f616:	e7fe      	b.n	800f616 <ai_platform_network_process+0x36e>
 800f618:	f8b8 3000 	ldrh.w	r3, [r8]
 800f61c:	429f      	cmp	r7, r3
 800f61e:	f4ff aed6 	bcc.w	800f3ce <ai_platform_network_process+0x126>
 800f622:	e74b      	b.n	800f4bc <ai_platform_network_process+0x214>
 800f624:	58024000 	.word	0x58024000
 800f628:	f407a5c2 	.word	0xf407a5c2
 800f62c:	b5e8b5cd 	.word	0xb5e8b5cd
 800f630:	40023000 	.word	0x40023000
 800f634:	4a88      	ldr	r2, [pc, #544]	; (800f858 <ai_platform_network_process+0x5b0>)
 800f636:	2301      	movs	r3, #1
 800f638:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f63c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1fb      	bne.n	800f63c <ai_platform_network_process+0x394>
 800f644:	4b85      	ldr	r3, [pc, #532]	; (800f85c <ai_platform_network_process+0x5b4>)
 800f646:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f64a:	4b85      	ldr	r3, [pc, #532]	; (800f860 <ai_platform_network_process+0x5b8>)
 800f64c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f650:	429a      	cmp	r2, r3
 800f652:	f43f ae96 	beq.w	800f382 <ai_platform_network_process+0xda>
 800f656:	e7fe      	b.n	800f656 <ai_platform_network_process+0x3ae>
 800f658:	9d03      	ldr	r5, [sp, #12]
 800f65a:	2400      	movs	r4, #0
 800f65c:	2217      	movs	r2, #23
 800f65e:	2112      	movs	r1, #18
 800f660:	f105 0010 	add.w	r0, r5, #16
 800f664:	f000 f906 	bl	800f874 <core_set_error>
 800f668:	4620      	mov	r0, r4
 800f66a:	b005      	add	sp, #20
 800f66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f670:	462c      	mov	r4, r5
 800f672:	e7bf      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f674:	9d03      	ldr	r5, [sp, #12]
 800f676:	2218      	movs	r2, #24
 800f678:	2112      	movs	r1, #18
 800f67a:	2400      	movs	r4, #0
 800f67c:	f105 0010 	add.w	r0, r5, #16
 800f680:	f000 f8f8 	bl	800f874 <core_set_error>
 800f684:	e7b6      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f686:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f68a:	429f      	cmp	r7, r3
 800f68c:	f4ff af28 	bcc.w	800f4e0 <ai_platform_network_process+0x238>
 800f690:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f694:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800f696:	82ab      	strh	r3, [r5, #20]
 800f698:	2a00      	cmp	r2, #0
 800f69a:	f040 808d 	bne.w	800f7b8 <ai_platform_network_process+0x510>
 800f69e:	4616      	mov	r6, r2
 800f6a0:	4617      	mov	r7, r2
 800f6a2:	8aec      	ldrh	r4, [r5, #22]
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	d2a5      	bcs.n	800f5f4 <ai_platform_network_process+0x34c>
 800f6a8:	46ab      	mov	fp, r5
 800f6aa:	2e00      	cmp	r6, #0
 800f6ac:	d030      	beq.n	800f710 <ai_platform_network_process+0x468>
 800f6ae:	f04f 0800 	mov.w	r8, #0
 800f6b2:	e014      	b.n	800f6de <ai_platform_network_process+0x436>
 800f6b4:	6882      	ldr	r2, [r0, #8]
 800f6b6:	68c5      	ldr	r5, [r0, #12]
 800f6b8:	6863      	ldr	r3, [r4, #4]
 800f6ba:	1b52      	subs	r2, r2, r5
 800f6bc:	4413      	add	r3, r2
 800f6be:	6083      	str	r3, [r0, #8]
 800f6c0:	698b      	ldr	r3, [r1, #24]
 800f6c2:	6862      	ldr	r2, [r4, #4]
 800f6c4:	60da      	str	r2, [r3, #12]
 800f6c6:	f859 200a 	ldr.w	r2, [r9, sl]
 800f6ca:	f108 0801 	add.w	r8, r8, #1
 800f6ce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800f6d2:	440b      	add	r3, r1
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d301      	bcc.n	800f6dc <ai_platform_network_process+0x434>
 800f6d8:	68e3      	ldr	r3, [r4, #12]
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	6063      	str	r3, [r4, #4]
 800f6de:	8833      	ldrh	r3, [r6, #0]
 800f6e0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800f6e4:	4543      	cmp	r3, r8
 800f6e6:	d913      	bls.n	800f710 <ai_platform_network_process+0x468>
 800f6e8:	6873      	ldr	r3, [r6, #4]
 800f6ea:	b18b      	cbz	r3, 800f710 <ai_platform_network_process+0x468>
 800f6ec:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800f6f0:	b171      	cbz	r1, 800f710 <ai_platform_network_process+0x468>
 800f6f2:	6988      	ldr	r0, [r1, #24]
 800f6f4:	68b2      	ldr	r2, [r6, #8]
 800f6f6:	6803      	ldr	r3, [r0, #0]
 800f6f8:	f8d2 9000 	ldr.w	r9, [r2]
 800f6fc:	009d      	lsls	r5, r3, #2
 800f6fe:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800f702:	d5d7      	bpl.n	800f6b4 <ai_platform_network_process+0x40c>
 800f704:	6880      	ldr	r0, [r0, #8]
 800f706:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800f70a:	f000 fd73 	bl	80101f4 <memcpy>
 800f70e:	e7da      	b.n	800f6c6 <ai_platform_network_process+0x41e>
 800f710:	4658      	mov	r0, fp
 800f712:	f000 fc65 	bl	800ffe0 <ai_layers_forward_all>
 800f716:	2f00      	cmp	r7, #0
 800f718:	d03f      	beq.n	800f79a <ai_platform_network_process+0x4f2>
 800f71a:	2400      	movs	r4, #0
 800f71c:	e016      	b.n	800f74c <ai_platform_network_process+0x4a4>
 800f71e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800f722:	f859 100a 	ldr.w	r1, [r9, sl]
 800f726:	4413      	add	r3, r2
 800f728:	428b      	cmp	r3, r1
 800f72a:	d302      	bcc.n	800f732 <ai_platform_network_process+0x48a>
 800f72c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f730:	1acb      	subs	r3, r1, r3
 800f732:	f8c8 3004 	str.w	r3, [r8, #4]
 800f736:	6981      	ldr	r1, [r0, #24]
 800f738:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800f73c:	1b52      	subs	r2, r2, r5
 800f73e:	4413      	add	r3, r2
 800f740:	608b      	str	r3, [r1, #8]
 800f742:	6983      	ldr	r3, [r0, #24]
 800f744:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f748:	60da      	str	r2, [r3, #12]
 800f74a:	3401      	adds	r4, #1
 800f74c:	883b      	ldrh	r3, [r7, #0]
 800f74e:	42a3      	cmp	r3, r4
 800f750:	d923      	bls.n	800f79a <ai_platform_network_process+0x4f2>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	b30b      	cbz	r3, 800f79a <ai_platform_network_process+0x4f2>
 800f756:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f75a:	b1f0      	cbz	r0, 800f79a <ai_platform_network_process+0x4f2>
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800f762:	6983      	ldr	r3, [r0, #24]
 800f764:	f8d2 9000 	ldr.w	r9, [r2]
 800f768:	681a      	ldr	r2, [r3, #0]
 800f76a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800f76e:	0092      	lsls	r2, r2, #2
 800f770:	d5d5      	bpl.n	800f71e <ai_platform_network_process+0x476>
 800f772:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f776:	6899      	ldr	r1, [r3, #8]
 800f778:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f77c:	f000 fd3a 	bl	80101f4 <memcpy>
 800f780:	f859 200a 	ldr.w	r2, [r9, sl]
 800f784:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800f788:	440b      	add	r3, r1
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d302      	bcc.n	800f794 <ai_platform_network_process+0x4ec>
 800f78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	f8c8 3004 	str.w	r3, [r8, #4]
 800f798:	e7d7      	b.n	800f74a <ai_platform_network_process+0x4a2>
 800f79a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800f79e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f7a2:	3401      	adds	r4, #1
 800f7a4:	b2a4      	uxth	r4, r4
 800f7a6:	42a3      	cmp	r3, r4
 800f7a8:	f8ab 4016 	strh.w	r4, [fp, #22]
 800f7ac:	f63f af7d 	bhi.w	800f6aa <ai_platform_network_process+0x402>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	b005      	add	sp, #20
 800f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b8:	2a01      	cmp	r2, #1
 800f7ba:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800f7bc:	d029      	beq.n	800f812 <ai_platform_network_process+0x56a>
 800f7be:	f106 070c 	add.w	r7, r6, #12
 800f7c2:	e76e      	b.n	800f6a2 <ai_platform_network_process+0x3fa>
 800f7c4:	2218      	movs	r2, #24
 800f7c6:	2113      	movs	r1, #19
 800f7c8:	f105 0010 	add.w	r0, r5, #16
 800f7cc:	2400      	movs	r4, #0
 800f7ce:	f000 f851 	bl	800f874 <core_set_error>
 800f7d2:	e70f      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f7d4:	9d03      	ldr	r5, [sp, #12]
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	2217      	movs	r2, #23
 800f7da:	2112      	movs	r1, #18
 800f7dc:	f105 0010 	add.w	r0, r5, #16
 800f7e0:	f000 f848 	bl	800f874 <core_set_error>
 800f7e4:	e706      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f7e6:	9d03      	ldr	r5, [sp, #12]
 800f7e8:	2219      	movs	r2, #25
 800f7ea:	2112      	movs	r1, #18
 800f7ec:	2400      	movs	r4, #0
 800f7ee:	f105 0010 	add.w	r0, r5, #16
 800f7f2:	f000 f83f 	bl	800f874 <core_set_error>
 800f7f6:	e6fd      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f7f8:	9d03      	ldr	r5, [sp, #12]
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	2221      	movs	r2, #33	; 0x21
 800f7fe:	2112      	movs	r1, #18
 800f800:	f105 0010 	add.w	r0, r5, #16
 800f804:	f000 f836 	bl	800f874 <core_set_error>
 800f808:	e6f4      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f80a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f80e:	82ab      	strh	r3, [r5, #20]
 800f810:	e742      	b.n	800f698 <ai_platform_network_process+0x3f0>
 800f812:	2700      	movs	r7, #0
 800f814:	e745      	b.n	800f6a2 <ai_platform_network_process+0x3fa>
 800f816:	4604      	mov	r4, r0
 800f818:	2217      	movs	r2, #23
 800f81a:	2113      	movs	r1, #19
 800f81c:	f105 0010 	add.w	r0, r5, #16
 800f820:	f000 f828 	bl	800f874 <core_set_error>
 800f824:	e6e6      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f826:	2219      	movs	r2, #25
 800f828:	2113      	movs	r1, #19
 800f82a:	f105 0010 	add.w	r0, r5, #16
 800f82e:	2400      	movs	r4, #0
 800f830:	f000 f820 	bl	800f874 <core_set_error>
 800f834:	e6de      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f836:	4604      	mov	r4, r0
 800f838:	2221      	movs	r2, #33	; 0x21
 800f83a:	2113      	movs	r1, #19
 800f83c:	f105 0010 	add.w	r0, r5, #16
 800f840:	f000 f818 	bl	800f874 <core_set_error>
 800f844:	e6d6      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f846:	2217      	movs	r2, #23
 800f848:	2113      	movs	r1, #19
 800f84a:	f105 0010 	add.w	r0, r5, #16
 800f84e:	4654      	mov	r4, sl
 800f850:	f000 f810 	bl	800f874 <core_set_error>
 800f854:	e6ce      	b.n	800f5f4 <ai_platform_network_process+0x34c>
 800f856:	bf00      	nop
 800f858:	58024000 	.word	0x58024000
 800f85c:	f407a5c2 	.word	0xf407a5c2
 800f860:	b5e8b5cd 	.word	0xb5e8b5cd

0800f864 <core_init>:
 800f864:	2001      	movs	r0, #1
 800f866:	4770      	bx	lr

0800f868 <core_get_error>:
 800f868:	4603      	mov	r3, r0
 800f86a:	2200      	movs	r2, #0
 800f86c:	6800      	ldr	r0, [r0, #0]
 800f86e:	601a      	str	r2, [r3, #0]
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop

0800f874 <core_set_error>:
 800f874:	4603      	mov	r3, r0
 800f876:	7800      	ldrb	r0, [r0, #0]
 800f878:	b108      	cbz	r0, 800f87e <core_set_error+0xa>
 800f87a:	2000      	movs	r0, #0
 800f87c:	4770      	bx	lr
 800f87e:	7019      	strb	r1, [r3, #0]
 800f880:	2001      	movs	r0, #1
 800f882:	6819      	ldr	r1, [r3, #0]
 800f884:	f362 211f 	bfi	r1, r2, #8, #24
 800f888:	6019      	str	r1, [r3, #0]
 800f88a:	4770      	bx	lr

0800f88c <func_dummy>:
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop

0800f890 <decodeEstimator_LEQ_8Bits>:
 800f890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f894:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f898:	f242 7511 	movw	r5, #10001	; 0x2711
 800f89c:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 800f8a0:	f04f 0c00 	mov.w	ip, #0
 800f8a4:	e9dd a909 	ldrd	sl, r9, [sp, #36]	; 0x24
 800f8a8:	e00e      	b.n	800f8c8 <decodeEstimator_LEQ_8Bits+0x38>
 800f8aa:	ed94 7a00 	vldr	s14, [r4]
 800f8ae:	fa1f fc86 	uxth.w	ip, r6
 800f8b2:	edde 7a00 	vldr	s15, [lr]
 800f8b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8be:	bf98      	it	ls
 800f8c0:	fa1f fc87 	uxthls.w	ip, r7
 800f8c4:	3d01      	subs	r5, #1
 800f8c6:	d05c      	beq.n	800f982 <decodeEstimator_LEQ_8Bits+0xf2>
 800f8c8:	f81a 700c 	ldrb.w	r7, [sl, ip]
 800f8cc:	eb03 0e8c 	add.w	lr, r3, ip, lsl #2
 800f8d0:	f819 600c 	ldrb.w	r6, [r9, ip]
 800f8d4:	f812 400c 	ldrb.w	r4, [r2, ip]
 800f8d8:	42b7      	cmp	r7, r6
 800f8da:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f8de:	d1e4      	bne.n	800f8aa <decodeEstimator_LEQ_8Bits+0x1a>
 800f8e0:	f1b8 0f00 	cmp.w	r8, #0
 800f8e4:	d021      	beq.n	800f92a <decodeEstimator_LEQ_8Bits+0x9a>
 800f8e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8ec:	2b08      	cmp	r3, #8
 800f8ee:	d029      	beq.n	800f944 <decodeEstimator_LEQ_8Bits+0xb4>
 800f8f0:	2b20      	cmp	r3, #32
 800f8f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f8f6:	fa1b fb88 	uxtah	fp, fp, r8
 800f8fa:	d11b      	bne.n	800f934 <decodeEstimator_LEQ_8Bits+0xa4>
 800f8fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f8fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f900:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800f904:	4564      	cmp	r4, ip
 800f906:	d10a      	bne.n	800f91e <decodeEstimator_LEQ_8Bits+0x8e>
 800f908:	7804      	ldrb	r4, [r0, #0]
 800f90a:	ed92 7a00 	vldr	s14, [r2]
 800f90e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800f912:	edd4 7a00 	vldr	s15, [r4]
 800f916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f91a:	edc4 7a00 	vstr	s15, [r4]
 800f91e:	459b      	cmp	fp, r3
 800f920:	f100 0001 	add.w	r0, r0, #1
 800f924:	f102 0204 	add.w	r2, r2, #4
 800f928:	d1ea      	bne.n	800f900 <decodeEstimator_LEQ_8Bits+0x70>
 800f92a:	2000      	movs	r0, #0
 800f92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f930:	455b      	cmp	r3, fp
 800f932:	d0fa      	beq.n	800f92a <decodeEstimator_LEQ_8Bits+0x9a>
 800f934:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f938:	4562      	cmp	r2, ip
 800f93a:	d1f9      	bne.n	800f930 <decodeEstimator_LEQ_8Bits+0xa0>
 800f93c:	f06f 0003 	mvn.w	r0, #3
 800f940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f944:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f948:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f94a:	fa1b fb88 	uxtah	fp, fp, r8
 800f94e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f950:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800f954:	4564      	cmp	r4, ip
 800f956:	d10d      	bne.n	800f974 <decodeEstimator_LEQ_8Bits+0xe4>
 800f958:	7815      	ldrb	r5, [r2, #0]
 800f95a:	7804      	ldrb	r4, [r0, #0]
 800f95c:	ee07 5a10 	vmov	s14, r5
 800f960:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800f964:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f968:	edd4 7a00 	vldr	s15, [r4]
 800f96c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f970:	edc4 7a00 	vstr	s15, [r4]
 800f974:	459b      	cmp	fp, r3
 800f976:	f100 0001 	add.w	r0, r0, #1
 800f97a:	f102 0201 	add.w	r2, r2, #1
 800f97e:	d1e7      	bne.n	800f950 <decodeEstimator_LEQ_8Bits+0xc0>
 800f980:	e7d3      	b.n	800f92a <decodeEstimator_LEQ_8Bits+0x9a>
 800f982:	f06f 0001 	mvn.w	r0, #1
 800f986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98a:	bf00      	nop

0800f98c <tree_ensemble_classifier_decoder>:
 800f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	4604      	mov	r4, r0
 800f992:	b09b      	sub	sp, #108	; 0x6c
 800f994:	460d      	mov	r5, r1
 800f996:	9218      	str	r2, [sp, #96]	; 0x60
 800f998:	4622      	mov	r2, r4
 800f99a:	900f      	str	r0, [sp, #60]	; 0x3c
 800f99c:	6911      	ldr	r1, [r2, #16]
 800f99e:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 800f9a2:	9110      	str	r1, [sp, #64]	; 0x40
 800f9a4:	6891      	ldr	r1, [r2, #8]
 800f9a6:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800f9aa:	9111      	str	r1, [sp, #68]	; 0x44
 800f9ac:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800f9ae:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800f9b2:	910d      	str	r1, [sp, #52]	; 0x34
 800f9b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f9b6:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 800f9ba:	9114      	str	r1, [sp, #80]	; 0x50
 800f9bc:	6824      	ldr	r4, [r4, #0]
 800f9be:	9016      	str	r0, [sp, #88]	; 0x58
 800f9c0:	9312      	str	r3, [sp, #72]	; 0x48
 800f9c2:	e9d2 910b 	ldrd	r9, r1, [r2, #44]	; 0x2c
 800f9c6:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
 800f9ca:	9117      	str	r1, [sp, #92]	; 0x5c
 800f9cc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800f9ce:	68d2      	ldr	r2, [r2, #12]
 800f9d0:	9119      	str	r1, [sp, #100]	; 0x64
 800f9d2:	9215      	str	r2, [sp, #84]	; 0x54
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	f000 8138 	beq.w	800fc4a <tree_ensemble_classifier_decoder+0x2be>
 800f9da:	0082      	lsls	r2, r0, #2
 800f9dc:	2100      	movs	r1, #0
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f000 fc16 	bl	8010210 <memset>
 800f9e4:	f1bb 0f00 	cmp.w	fp, #0
 800f9e8:	f000 8088 	beq.w	800fafc <tree_ensemble_classifier_decoder+0x170>
 800f9ec:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f9f0:	f1aa 0202 	sub.w	r2, sl, #2
 800f9f4:	18e3      	adds	r3, r4, r3
 800f9f6:	920c      	str	r2, [sp, #48]	; 0x30
 800f9f8:	f1a9 0202 	sub.w	r2, r9, #2
 800f9fc:	f04f 0900 	mov.w	r9, #0
 800fa00:	9313      	str	r3, [sp, #76]	; 0x4c
 800fa02:	1e63      	subs	r3, r4, #1
 800fa04:	46cb      	mov	fp, r9
 800fa06:	464c      	mov	r4, r9
 800fa08:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa0a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa0e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800fa12:	9209      	str	r2, [sp, #36]	; 0x24
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa18:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800fa1c:	920c      	str	r2, [sp, #48]	; 0x30
 800fa1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa20:	910e      	str	r1, [sp, #56]	; 0x38
 800fa22:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800fa26:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800fa2a:	f040 80e4 	bne.w	800fbf6 <tree_ensemble_classifier_decoder+0x26a>
 800fa2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa32:	2a08      	cmp	r2, #8
 800fa34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fa38:	f000 80b0 	beq.w	800fb9c <tree_ensemble_classifier_decoder+0x210>
 800fa3c:	2a20      	cmp	r2, #32
 800fa3e:	f040 80d5 	bne.w	800fbec <tree_ensemble_classifier_decoder+0x260>
 800fa42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fa46:	6a12      	ldr	r2, [r2, #32]
 800fa48:	eb01 0a8b 	add.w	sl, r1, fp, lsl #2
 800fa4c:	2a08      	cmp	r2, #8
 800fa4e:	f000 80ac 	beq.w	800fbaa <tree_ensemble_classifier_decoder+0x21e>
 800fa52:	f242 7e11 	movw	lr, #10001	; 0x2711
 800fa56:	2100      	movs	r1, #0
 800fa58:	e00e      	b.n	800fa78 <tree_ensemble_classifier_decoder+0xec>
 800fa5a:	ed92 7a00 	vldr	s14, [r2]
 800fa5e:	edd9 7a00 	vldr	s15, [r9]
 800fa62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6a:	bf94      	ite	ls
 800fa6c:	4661      	movls	r1, ip
 800fa6e:	4601      	movhi	r1, r0
 800fa70:	f1be 0e01 	subs.w	lr, lr, #1
 800fa74:	f000 80b5 	beq.w	800fbe2 <tree_ensemble_classifier_decoder+0x256>
 800fa78:	1862      	adds	r2, r4, r1
 800fa7a:	eb03 0981 	add.w	r9, r3, r1, lsl #2
 800fa7e:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
 800fa82:	f837 0012 	ldrh.w	r0, [r7, r2, lsl #1]
 800fa86:	f818 2002 	ldrb.w	r2, [r8, r2]
 800fa8a:	4584      	cmp	ip, r0
 800fa8c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800fa90:	d1e3      	bne.n	800fa5a <tree_ensemble_classifier_decoder+0xce>
 800fa92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa94:	b332      	cbz	r2, 800fae4 <tree_ensemble_classifier_decoder+0x158>
 800fa96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fa9a:	f102 3cff 	add.w	ip, r2, #4294967295
 800fa9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800faa0:	445b      	add	r3, fp
 800faa2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800faa4:	fa1b fc8c 	uxtah	ip, fp, ip
 800faa8:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 800faac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800fab0:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 800fab4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fab8:	3202      	adds	r2, #2
 800faba:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 800fabe:	4288      	cmp	r0, r1
 800fac0:	d10a      	bne.n	800fad8 <tree_ensemble_classifier_decoder+0x14c>
 800fac2:	8810      	ldrh	r0, [r2, #0]
 800fac4:	ed9a 7a00 	vldr	s14, [sl]
 800fac8:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 800facc:	edd0 7a00 	vldr	s15, [r0]
 800fad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fad4:	edc0 7a00 	vstr	s15, [r0]
 800fad8:	459c      	cmp	ip, r3
 800fada:	f102 0202 	add.w	r2, r2, #2
 800fade:	f10a 0a04 	add.w	sl, sl, #4
 800fae2:	d1ea      	bne.n	800faba <tree_ensemble_classifier_decoder+0x12e>
 800fae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fae6:	441c      	add	r4, r3
 800fae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faea:	449b      	add	fp, r3
 800faec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800faee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d18b      	bne.n	800fa0c <tree_ensemble_classifier_decoder+0x80>
 800faf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f000 80ab 	beq.w	800fc52 <tree_ensemble_classifier_decoder+0x2c6>
 800fafc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fafe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb00:	3b01      	subs	r3, #1
 800fb02:	1d10      	adds	r0, r2, #4
 800fb04:	4614      	mov	r4, r2
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb10:	edd3 6a00 	vldr	s13, [r3]
 800fb14:	edd2 7a16 	vldr	s15, [r2, #88]	; 0x58
 800fb18:	ed92 7a15 	vldr	s14, [r2, #84]	; 0x54
 800fb1c:	eed6 7a87 	vfnms.f32	s15, s13, s14
 800fb20:	ece3 7a01 	vstmia	r3!, {s15}
 800fb24:	4298      	cmp	r0, r3
 800fb26:	d1f3      	bne.n	800fb10 <tree_ensemble_classifier_decoder+0x184>
 800fb28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d068      	beq.n	800fc00 <tree_ensemble_classifier_decoder+0x274>
 800fb2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb30:	2100      	movs	r1, #0
 800fb32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fb34:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800fb36:	ed93 7a00 	vldr	s14, [r3]
 800fb3a:	440a      	add	r2, r1
 800fb3c:	3104      	adds	r1, #4
 800fb3e:	edd2 7a00 	vldr	s15, [r2]
 800fb42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb46:	ece3 7a01 	vstmia	r3!, {s15}
 800fb4a:	4283      	cmp	r3, r0
 800fb4c:	d1f2      	bne.n	800fb34 <tree_ensemble_classifier_decoder+0x1a8>
 800fb4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb50:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fb52:	ed93 7a00 	vldr	s14, [r3]
 800fb56:	2300      	movs	r3, #0
 800fb58:	4619      	mov	r1, r3
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	ecf4 7a01 	vldmia	r4!, {s15}
 800fb60:	3301      	adds	r3, #1
 800fb62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6a:	d502      	bpl.n	800fb72 <tree_ensemble_classifier_decoder+0x1e6>
 800fb6c:	eeb0 7a67 	vmov.f32	s14, s15
 800fb70:	4611      	mov	r1, r2
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	4282      	cmp	r2, r0
 800fb76:	d3f1      	bcc.n	800fb5c <tree_ensemble_classifier_decoder+0x1d0>
 800fb78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb7a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fb7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb84:	6013      	str	r3, [r2, #0]
 800fb86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fb8a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800fb90:	4608      	mov	r0, r1
 800fb92:	47a0      	blx	r4
 800fb94:	2000      	movs	r0, #0
 800fb96:	b01b      	add	sp, #108	; 0x6c
 800fb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fba0:	6a12      	ldr	r2, [r2, #32]
 800fba2:	eb01 0a0b 	add.w	sl, r1, fp
 800fba6:	2a08      	cmp	r2, #8
 800fba8:	d120      	bne.n	800fbec <tree_ensemble_classifier_decoder+0x260>
 800fbaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbac:	4628      	mov	r0, r5
 800fbae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fbb0:	9203      	str	r2, [sp, #12]
 800fbb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbb4:	9105      	str	r1, [sp, #20]
 800fbb6:	445a      	add	r2, fp
 800fbb8:	f8cd a008 	str.w	sl, [sp, #8]
 800fbbc:	9206      	str	r2, [sp, #24]
 800fbbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fbc0:	445a      	add	r2, fp
 800fbc2:	448b      	add	fp, r1
 800fbc4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fbc6:	9204      	str	r2, [sp, #16]
 800fbc8:	193a      	adds	r2, r7, r4
 800fbca:	9201      	str	r2, [sp, #4]
 800fbcc:	1932      	adds	r2, r6, r4
 800fbce:	9200      	str	r2, [sp, #0]
 800fbd0:	eb08 0204 	add.w	r2, r8, r4
 800fbd4:	440c      	add	r4, r1
 800fbd6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fbd8:	f7ff fe5a 	bl	800f890 <decodeEstimator_LEQ_8Bits>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d085      	beq.n	800faec <tree_ensemble_classifier_decoder+0x160>
 800fbe0:	e001      	b.n	800fbe6 <tree_ensemble_classifier_decoder+0x25a>
 800fbe2:	f06f 0001 	mvn.w	r0, #1
 800fbe6:	b01b      	add	sp, #108	; 0x6c
 800fbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbec:	f06f 0003 	mvn.w	r0, #3
 800fbf0:	b01b      	add	sp, #108	; 0x6c
 800fbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf6:	f06f 0002 	mvn.w	r0, #2
 800fbfa:	b01b      	add	sp, #108	; 0x6c
 800fbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fc02:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800fc06:	b333      	cbz	r3, 800fc56 <tree_ensemble_classifier_decoder+0x2ca>
 800fc08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fc0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fc10:	ed93 7a00 	vldr	s14, [r3]
 800fc14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc22:	bfcc      	ite	gt
 800fc24:	685b      	ldrgt	r3, [r3, #4]
 800fc26:	681b      	ldrle	r3, [r3, #0]
 800fc28:	6013      	str	r3, [r2, #0]
 800fc2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc2c:	ed93 7a00 	vldr	s14, [r3]
 800fc30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc34:	ed83 7a01 	vstr	s14, [r3, #4]
 800fc38:	edc3 7a00 	vstr	s15, [r3]
 800fc3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d19f      	bne.n	800fb86 <tree_ensemble_classifier_decoder+0x1fa>
 800fc46:	2000      	movs	r0, #0
 800fc48:	e7cd      	b.n	800fbe6 <tree_ensemble_classifier_decoder+0x25a>
 800fc4a:	f1bb 0f00 	cmp.w	fp, #0
 800fc4e:	f47f aecd 	bne.w	800f9ec <tree_ensemble_classifier_decoder+0x60>
 800fc52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc54:	e794      	b.n	800fb80 <tree_ensemble_classifier_decoder+0x1f4>
 800fc56:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800fc58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc5a:	edd3 7a00 	vldr	s15, [r3]
 800fc5e:	edd2 6a00 	vldr	s13, [r2]
 800fc62:	ed92 7a01 	vldr	s14, [r2, #4]
 800fc66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc6a:	edc2 7a00 	vstr	s15, [r2]
 800fc6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc72:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800fc74:	edd3 6a01 	vldr	s13, [r3, #4]
 800fc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc7e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fc82:	ed82 7a01 	vstr	s14, [r2, #4]
 800fc86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fc88:	bfcc      	ite	gt
 800fc8a:	685b      	ldrgt	r3, [r3, #4]
 800fc8c:	681b      	ldrle	r3, [r3, #0]
 800fc8e:	6013      	str	r3, [r2, #0]
 800fc90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc92:	edd3 7a00 	vldr	s15, [r3]
 800fc96:	eeb1 7a67 	vneg.f32	s14, s15
 800fc9a:	edc3 7a01 	vstr	s15, [r3, #4]
 800fc9e:	ed83 7a00 	vstr	s14, [r3]
 800fca2:	e7cb      	b.n	800fc3c <tree_ensemble_classifier_decoder+0x2b0>

0800fca4 <forward_tree_ensemble_classifier>:
 800fca4:	6982      	ldr	r2, [r0, #24]
 800fca6:	8813      	ldrh	r3, [r2, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 80a3 	beq.w	800fdf4 <forward_tree_ensemble_classifier+0x150>
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	6851      	ldr	r1, [r2, #4]
 800fcb6:	b0a5      	sub	sp, #148	; 0x94
 800fcb8:	bf08      	it	eq
 800fcba:	2400      	moveq	r4, #0
 800fcbc:	684a      	ldr	r2, [r1, #4]
 800fcbe:	bf18      	it	ne
 800fcc0:	f101 040c 	addne.w	r4, r1, #12
 800fcc4:	b102      	cbz	r2, 800fcc8 <forward_tree_ensemble_classifier+0x24>
 800fcc6:	6812      	ldr	r2, [r2, #0]
 800fcc8:	6864      	ldr	r4, [r4, #4]
 800fcca:	2c00      	cmp	r4, #0
 800fccc:	f000 808e 	beq.w	800fdec <forward_tree_ensemble_classifier+0x148>
 800fcd0:	e9d4 c400 	ldrd	ip, r4, [r4]
 800fcd4:	2b02      	cmp	r3, #2
 800fcd6:	f240 8091 	bls.w	800fdfc <forward_tree_ensemble_classifier+0x158>
 800fcda:	69cf      	ldr	r7, [r1, #28]
 800fcdc:	2f00      	cmp	r7, #0
 800fcde:	f000 808b 	beq.w	800fdf8 <forward_tree_ensemble_classifier+0x154>
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	69fd      	ldr	r5, [r7, #28]
 800fce6:	699b      	ldr	r3, [r3, #24]
 800fce8:	69ad      	ldr	r5, [r5, #24]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	68ad      	ldr	r5, [r5, #8]
 800fcee:	9303      	str	r3, [sp, #12]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	9509      	str	r5, [sp, #36]	; 0x24
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	6a3d      	ldr	r5, [r7, #32]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800fcfe:	9304      	str	r3, [sp, #16]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	69ad      	ldr	r5, [r5, #24]
 800fd04:	699e      	ldr	r6, [r3, #24]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f8de 8018 	ldr.w	r8, [lr, #24]
 800fd0c:	6999      	ldr	r1, [r3, #24]
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	68ad      	ldr	r5, [r5, #8]
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	f8de e00c 	ldr.w	lr, [lr, #12]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	950a      	str	r5, [sp, #40]	; 0x28
 800fd1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fd20:	9306      	str	r3, [sp, #24]
 800fd22:	9507      	str	r5, [sp, #28]
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f8de 5004 	ldr.w	r5, [lr, #4]
 800fd2a:	699b      	ldr	r3, [r3, #24]
 800fd2c:	9508      	str	r5, [sp, #32]
 800fd2e:	6835      	ldr	r5, [r6, #0]
 800fd30:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800fd34:	f3c5 1ec6 	ubfx	lr, r5, #7, #7
 800fd38:	681d      	ldr	r5, [r3, #0]
 800fd3a:	68e3      	ldr	r3, [r4, #12]
 800fd3c:	68b6      	ldr	r6, [r6, #8]
 800fd3e:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 800fd42:	f8b3 a004 	ldrh.w	sl, [r3, #4]
 800fd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd48:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800fd4c:	699b      	ldr	r3, [r3, #24]
 800fd4e:	9605      	str	r6, [sp, #20]
 800fd50:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800fd54:	680e      	ldr	r6, [r1, #0]
 800fd56:	6991      	ldr	r1, [r2, #24]
 800fd58:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800fd5c:	f3c6 16c6 	ubfx	r6, r6, #7, #7
 800fd60:	6889      	ldr	r1, [r1, #8]
 800fd62:	6892      	ldr	r2, [r2, #8]
 800fd64:	e9d7 c30a 	ldrd	ip, r3, [r7, #40]	; 0x28
 800fd68:	f8dc 7018 	ldr.w	r7, [ip, #24]
 800fd6c:	699b      	ldr	r3, [r3, #24]
 800fd6e:	68bf      	ldr	r7, [r7, #8]
 800fd70:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800fd74:	970b      	str	r7, [sp, #44]	; 0x2c
 800fd76:	69a3      	ldr	r3, [r4, #24]
 800fd78:	69c7      	ldr	r7, [r0, #28]
 800fd7a:	edd3 7a02 	vldr	s15, [r3, #8]
 800fd7e:	2f00      	cmp	r7, #0
 800fd80:	d036      	beq.n	800fdf0 <forward_tree_ensemble_classifier+0x14c>
 800fd82:	9b03      	ldr	r3, [sp, #12]
 800fd84:	f8cd a000 	str.w	sl, [sp]
 800fd88:	930d      	str	r3, [sp, #52]	; 0x34
 800fd8a:	9b04      	ldr	r3, [sp, #16]
 800fd8c:	941c      	str	r4, [sp, #112]	; 0x70
 800fd8e:	930e      	str	r3, [sp, #56]	; 0x38
 800fd90:	9b05      	ldr	r3, [sp, #20]
 800fd92:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fd94:	9311      	str	r3, [sp, #68]	; 0x44
 800fd96:	9b06      	ldr	r3, [sp, #24]
 800fd98:	9420      	str	r4, [sp, #128]	; 0x80
 800fd9a:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd9c:	9b07      	ldr	r3, [sp, #28]
 800fd9e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fda0:	9314      	str	r3, [sp, #80]	; 0x50
 800fda2:	9b08      	ldr	r3, [sp, #32]
 800fda4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800fda8:	9316      	str	r3, [sp, #88]	; 0x58
 800fdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdac:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800fdb0:	9317      	str	r3, [sp, #92]	; 0x5c
 800fdb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdb4:	9615      	str	r6, [sp, #84]	; 0x54
 800fdb6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800fdba:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800fdbe:	951f      	str	r5, [sp, #124]	; 0x7c
 800fdc0:	9421      	str	r4, [sp, #132]	; 0x84
 800fdc2:	e9cd 3b18 	strd	r3, fp, [sp, #96]	; 0x60
 800fdc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdc8:	e9cd 371a 	strd	r3, r7, [sp, #104]	; 0x68
 800fdcc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800fdce:	ee17 3a90 	vmov	r3, s15
 800fdd2:	9422      	str	r4, [sp, #136]	; 0x88
 800fdd4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800fdd6:	f890 0020 	ldrb.w	r0, [r0, #32]
 800fdda:	9423      	str	r4, [sp, #140]	; 0x8c
 800fddc:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
 800fde0:	a80d      	add	r0, sp, #52	; 0x34
 800fde2:	f7ff fdd3 	bl	800f98c <tree_ensemble_classifier_decoder>
 800fde6:	b025      	add	sp, #148	; 0x94
 800fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdec:	46a4      	mov	ip, r4
 800fdee:	e771      	b.n	800fcd4 <forward_tree_ensemble_classifier+0x30>
 800fdf0:	4f04      	ldr	r7, [pc, #16]	; (800fe04 <forward_tree_ensemble_classifier+0x160>)
 800fdf2:	e7c6      	b.n	800fd82 <forward_tree_ensemble_classifier+0xde>
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	deff      	udf	#255	; 0xff
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	deff      	udf	#255	; 0xff
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	deff      	udf	#255	; 0xff
 800fe02:	bf00      	nop
 800fe04:	0800f88d 	.word	0x0800f88d

0800fe08 <forward_zipmap>:
 800fe08:	6983      	ldr	r3, [r0, #24]
 800fe0a:	881a      	ldrh	r2, [r3, #0]
 800fe0c:	2a00      	cmp	r2, #0
 800fe0e:	d061      	beq.n	800fed4 <forward_zipmap+0xcc>
 800fe10:	b470      	push	{r4, r5, r6}
 800fe12:	685d      	ldr	r5, [r3, #4]
 800fe14:	686b      	ldr	r3, [r5, #4]
 800fe16:	b103      	cbz	r3, 800fe1a <forward_zipmap+0x12>
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2a01      	cmp	r2, #1
 800fe1c:	f000 8090 	beq.w	800ff40 <forward_zipmap+0x138>
 800fe20:	6929      	ldr	r1, [r5, #16]
 800fe22:	2900      	cmp	r1, #0
 800fe24:	f000 8088 	beq.w	800ff38 <forward_zipmap+0x130>
 800fe28:	680c      	ldr	r4, [r1, #0]
 800fe2a:	2a02      	cmp	r2, #2
 800fe2c:	68d8      	ldr	r0, [r3, #12]
 800fe2e:	6999      	ldr	r1, [r3, #24]
 800fe30:	69a3      	ldr	r3, [r4, #24]
 800fe32:	68c4      	ldr	r4, [r0, #12]
 800fe34:	6840      	ldr	r0, [r0, #4]
 800fe36:	6889      	ldr	r1, [r1, #8]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	fb00 f404 	mul.w	r4, r0, r4
 800fe3e:	f000 8082 	beq.w	800ff46 <forward_zipmap+0x13e>
 800fe42:	69ea      	ldr	r2, [r5, #28]
 800fe44:	2a00      	cmp	r2, #0
 800fe46:	d079      	beq.n	800ff3c <forward_zipmap+0x134>
 800fe48:	6812      	ldr	r2, [r2, #0]
 800fe4a:	6990      	ldr	r0, [r2, #24]
 800fe4c:	68d5      	ldr	r5, [r2, #12]
 800fe4e:	6802      	ldr	r2, [r0, #0]
 800fe50:	686d      	ldr	r5, [r5, #4]
 800fe52:	6886      	ldr	r6, [r0, #8]
 800fe54:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800fe58:	b3d4      	cbz	r4, 800fed0 <forward_zipmap+0xc8>
 800fe5a:	2a10      	cmp	r2, #16
 800fe5c:	d03c      	beq.n	800fed8 <forward_zipmap+0xd0>
 800fe5e:	2a08      	cmp	r2, #8
 800fe60:	d01c      	beq.n	800fe9c <forward_zipmap+0x94>
 800fe62:	2000      	movs	r0, #0
 800fe64:	4684      	mov	ip, r0
 800fe66:	e014      	b.n	800fe92 <forward_zipmap+0x8a>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	3001      	adds	r0, #1
 800fe6c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800fe70:	3308      	adds	r3, #8
 800fe72:	f10c 0c01 	add.w	ip, ip, #1
 800fe76:	ee07 2a90 	vmov	s15, r2
 800fe7a:	4564      	cmp	r4, ip
 800fe7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe80:	ee17 2a90 	vmov	r2, s15
 800fe84:	f843 2c08 	str.w	r2, [r3, #-8]
 800fe88:	f851 2b04 	ldr.w	r2, [r1], #4
 800fe8c:	f843 2c04 	str.w	r2, [r3, #-4]
 800fe90:	d01e      	beq.n	800fed0 <forward_zipmap+0xc8>
 800fe92:	4285      	cmp	r5, r0
 800fe94:	d1e8      	bne.n	800fe68 <forward_zipmap+0x60>
 800fe96:	2001      	movs	r0, #1
 800fe98:	2200      	movs	r2, #0
 800fe9a:	e7e7      	b.n	800fe6c <forward_zipmap+0x64>
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	4610      	mov	r0, r2
 800fea0:	4295      	cmp	r5, r2
 800fea2:	f100 0001 	add.w	r0, r0, #1
 800fea6:	d034      	beq.n	800ff12 <forward_zipmap+0x10a>
 800fea8:	f816 c002 	ldrb.w	ip, [r6, r2]
 800feac:	4284      	cmp	r4, r0
 800feae:	f102 0201 	add.w	r2, r2, #1
 800feb2:	f103 0308 	add.w	r3, r3, #8
 800feb6:	ee07 ca90 	vmov	s15, ip
 800feba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800febe:	ee17 ca90 	vmov	ip, s15
 800fec2:	f843 cc08 	str.w	ip, [r3, #-8]
 800fec6:	f851 cb04 	ldr.w	ip, [r1], #4
 800feca:	f843 cc04 	str.w	ip, [r3, #-4]
 800fece:	d1e7      	bne.n	800fea0 <forward_zipmap+0x98>
 800fed0:	bc70      	pop	{r4, r5, r6}
 800fed2:	4770      	bx	lr
 800fed4:	6853      	ldr	r3, [r2, #4]
 800fed6:	deff      	udf	#255	; 0xff
 800fed8:	2000      	movs	r0, #0
 800feda:	4684      	mov	ip, r0
 800fedc:	e014      	b.n	800ff08 <forward_zipmap+0x100>
 800fede:	4602      	mov	r2, r0
 800fee0:	3001      	adds	r0, #1
 800fee2:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800fee6:	3308      	adds	r3, #8
 800fee8:	f10c 0c01 	add.w	ip, ip, #1
 800feec:	ee07 2a90 	vmov	s15, r2
 800fef0:	4564      	cmp	r4, ip
 800fef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fef6:	ee17 2a90 	vmov	r2, s15
 800fefa:	f843 2c08 	str.w	r2, [r3, #-8]
 800fefe:	f851 2b04 	ldr.w	r2, [r1], #4
 800ff02:	f843 2c04 	str.w	r2, [r3, #-4]
 800ff06:	d0e3      	beq.n	800fed0 <forward_zipmap+0xc8>
 800ff08:	4285      	cmp	r5, r0
 800ff0a:	d1e8      	bne.n	800fede <forward_zipmap+0xd6>
 800ff0c:	2001      	movs	r0, #1
 800ff0e:	2200      	movs	r2, #0
 800ff10:	e7e7      	b.n	800fee2 <forward_zipmap+0xda>
 800ff12:	7832      	ldrb	r2, [r6, #0]
 800ff14:	4284      	cmp	r4, r0
 800ff16:	f103 0308 	add.w	r3, r3, #8
 800ff1a:	ee07 2a90 	vmov	s15, r2
 800ff1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff22:	ee17 2a90 	vmov	r2, s15
 800ff26:	f843 2c08 	str.w	r2, [r3, #-8]
 800ff2a:	f851 2b04 	ldr.w	r2, [r1], #4
 800ff2e:	f843 2c04 	str.w	r2, [r3, #-4]
 800ff32:	d0cd      	beq.n	800fed0 <forward_zipmap+0xc8>
 800ff34:	2201      	movs	r2, #1
 800ff36:	e7b3      	b.n	800fea0 <forward_zipmap+0x98>
 800ff38:	698b      	ldr	r3, [r1, #24]
 800ff3a:	deff      	udf	#255	; 0xff
 800ff3c:	68d3      	ldr	r3, [r2, #12]
 800ff3e:	deff      	udf	#255	; 0xff
 800ff40:	2300      	movs	r3, #0
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	deff      	udf	#255	; 0xff
 800ff46:	2300      	movs	r3, #0
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	deff      	udf	#255	; 0xff

0800ff4c <ai_check_custom_types>:
 800ff4c:	b082      	sub	sp, #8
 800ff4e:	4b12      	ldr	r3, [pc, #72]	; (800ff98 <ai_check_custom_types+0x4c>)
 800ff50:	9301      	str	r3, [sp, #4]
 800ff52:	b118      	cbz	r0, 800ff5c <ai_check_custom_types+0x10>
 800ff54:	7803      	ldrb	r3, [r0, #0]
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d002      	beq.n	800ff60 <ai_check_custom_types+0x14>
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	b002      	add	sp, #8
 800ff5e:	4770      	bx	lr
 800ff60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d004      	beq.n	800ff72 <ai_check_custom_types+0x26>
 800ff68:	2001      	movs	r0, #1
 800ff6a:	f080 0001 	eor.w	r0, r0, #1
 800ff6e:	b002      	add	sp, #8
 800ff70:	4770      	bx	lr
 800ff72:	7842      	ldrb	r2, [r0, #1]
 800ff74:	3001      	adds	r0, #1
 800ff76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d1f4      	bne.n	800ff68 <ai_check_custom_types+0x1c>
 800ff7e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ff82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d1ee      	bne.n	800ff68 <ai_check_custom_types+0x1c>
 800ff8a:	7842      	ldrb	r2, [r0, #1]
 800ff8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d1e9      	bne.n	800ff68 <ai_check_custom_types+0x1c>
 800ff94:	2000      	movs	r0, #0
 800ff96:	e7e8      	b.n	800ff6a <ai_check_custom_types+0x1e>
 800ff98:	84048403 	.word	0x84048403

0800ff9c <ai_layers_init_all>:
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ffa0:	b13b      	cbz	r3, 800ffb2 <ai_layers_init_all+0x16>
 800ffa2:	691a      	ldr	r2, [r3, #16]
 800ffa4:	3101      	adds	r1, #1
 800ffa6:	60d8      	str	r0, [r3, #12]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	4613      	mov	r3, r2
 800ffac:	d001      	beq.n	800ffb2 <ai_layers_init_all+0x16>
 800ffae:	2a00      	cmp	r2, #0
 800ffb0:	d1f6      	bne.n	800ffa0 <ai_layers_init_all+0x4>
 800ffb2:	4608      	mov	r0, r1
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop

0800ffb8 <ai_layers_post_init_all>:
 800ffb8:	b538      	push	{r3, r4, r5, lr}
 800ffba:	2500      	movs	r5, #0
 800ffbc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ffbe:	b16c      	cbz	r4, 800ffdc <ai_layers_post_init_all+0x24>
 800ffc0:	6863      	ldr	r3, [r4, #4]
 800ffc2:	07db      	lsls	r3, r3, #31
 800ffc4:	d504      	bpl.n	800ffd0 <ai_layers_post_init_all+0x18>
 800ffc6:	6a23      	ldr	r3, [r4, #32]
 800ffc8:	4620      	mov	r0, r4
 800ffca:	b10b      	cbz	r3, 800ffd0 <ai_layers_post_init_all+0x18>
 800ffcc:	3501      	adds	r5, #1
 800ffce:	4798      	blx	r3
 800ffd0:	6923      	ldr	r3, [r4, #16]
 800ffd2:	42a3      	cmp	r3, r4
 800ffd4:	461c      	mov	r4, r3
 800ffd6:	d001      	beq.n	800ffdc <ai_layers_post_init_all+0x24>
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1f0      	bne.n	800ffbe <ai_layers_post_init_all+0x6>
 800ffdc:	4628      	mov	r0, r5
 800ffde:	bd38      	pop	{r3, r4, r5, pc}

0800ffe0 <ai_layers_forward_all>:
 800ffe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800ffe8:	4604      	mov	r4, r0
 800ffea:	f1b8 0f00 	cmp.w	r8, #0
 800ffee:	d02a      	beq.n	8010046 <ai_layers_forward_all+0x66>
 800fff0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800fff2:	6381      	str	r1, [r0, #56]	; 0x38
 800fff4:	b319      	cbz	r1, 801003e <ai_layers_forward_all+0x5e>
 800fff6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fff8:	2001      	movs	r0, #1
 800fffa:	47c0      	blx	r8
 800fffc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fffe:	b1f6      	cbz	r6, 801003e <ai_layers_forward_all+0x5e>
 8010000:	2700      	movs	r7, #0
 8010002:	4631      	mov	r1, r6
 8010004:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010006:	2002      	movs	r0, #2
 8010008:	47c0      	blx	r8
 801000a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801000c:	4628      	mov	r0, r5
 801000e:	696b      	ldr	r3, [r5, #20]
 8010010:	4798      	blx	r3
 8010012:	692e      	ldr	r6, [r5, #16]
 8010014:	2003      	movs	r0, #3
 8010016:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010018:	42b5      	cmp	r5, r6
 801001a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801001c:	d007      	beq.n	801002e <ai_layers_forward_all+0x4e>
 801001e:	47c0      	blx	r8
 8010020:	3701      	adds	r7, #1
 8010022:	63a6      	str	r6, [r4, #56]	; 0x38
 8010024:	2e00      	cmp	r6, #0
 8010026:	d1ec      	bne.n	8010002 <ai_layers_forward_all+0x22>
 8010028:	4638      	mov	r0, r7
 801002a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002e:	2003      	movs	r0, #3
 8010030:	3701      	adds	r7, #1
 8010032:	47c0      	blx	r8
 8010034:	2300      	movs	r3, #0
 8010036:	4638      	mov	r0, r7
 8010038:	63a3      	str	r3, [r4, #56]	; 0x38
 801003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801003e:	2700      	movs	r7, #0
 8010040:	4638      	mov	r0, r7
 8010042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010046:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010048:	6385      	str	r5, [r0, #56]	; 0x38
 801004a:	2d00      	cmp	r5, #0
 801004c:	d0f7      	beq.n	801003e <ai_layers_forward_all+0x5e>
 801004e:	4647      	mov	r7, r8
 8010050:	696b      	ldr	r3, [r5, #20]
 8010052:	4628      	mov	r0, r5
 8010054:	4798      	blx	r3
 8010056:	462b      	mov	r3, r5
 8010058:	692d      	ldr	r5, [r5, #16]
 801005a:	429d      	cmp	r5, r3
 801005c:	d004      	beq.n	8010068 <ai_layers_forward_all+0x88>
 801005e:	3701      	adds	r7, #1
 8010060:	63a5      	str	r5, [r4, #56]	; 0x38
 8010062:	2d00      	cmp	r5, #0
 8010064:	d1f4      	bne.n	8010050 <ai_layers_forward_all+0x70>
 8010066:	e7df      	b.n	8010028 <ai_layers_forward_all+0x48>
 8010068:	2300      	movs	r3, #0
 801006a:	3701      	adds	r7, #1
 801006c:	63a3      	str	r3, [r4, #56]	; 0x38
 801006e:	e7db      	b.n	8010028 <ai_layers_forward_all+0x48>

08010070 <ai_version_get>:
 8010070:	0212      	lsls	r2, r2, #8
 8010072:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010076:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801007a:	4770      	bx	lr

0801007c <get_tensor_byte_size>:
 801007c:	b430      	push	{r4, r5}
 801007e:	6985      	ldr	r5, [r0, #24]
 8010080:	68c4      	ldr	r4, [r0, #12]
 8010082:	6941      	ldr	r1, [r0, #20]
 8010084:	4b06      	ldr	r3, [pc, #24]	; (80100a0 <get_tensor_byte_size+0x24>)
 8010086:	6828      	ldr	r0, [r5, #0]
 8010088:	4a06      	ldr	r2, [pc, #24]	; (80100a4 <get_tensor_byte_size+0x28>)
 801008a:	4003      	ands	r3, r0
 801008c:	68c9      	ldr	r1, [r1, #12]
 801008e:	68e0      	ldr	r0, [r4, #12]
 8010090:	4293      	cmp	r3, r2
 8010092:	fb01 f000 	mul.w	r0, r1, r0
 8010096:	d101      	bne.n	801009c <get_tensor_byte_size+0x20>
 8010098:	3007      	adds	r0, #7
 801009a:	08c0      	lsrs	r0, r0, #3
 801009c:	bc30      	pop	{r4, r5}
 801009e:	4770      	bx	lr
 80100a0:	017fffff 	.word	0x017fffff
 80100a4:	000400c0 	.word	0x000400c0

080100a8 <ai_array_to_buffer_fmt>:
 80100a8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d050      	beq.n	8010152 <ai_array_to_buffer_fmt+0xaa>
 80100b0:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80100b4:	4b29      	ldr	r3, [pc, #164]	; (801015c <ai_array_to_buffer_fmt+0xb4>)
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d00b      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 80100ba:	dc1c      	bgt.n	80100f6 <ai_array_to_buffer_fmt+0x4e>
 80100bc:	4b28      	ldr	r3, [pc, #160]	; (8010160 <ai_array_to_buffer_fmt+0xb8>)
 80100be:	429a      	cmp	r2, r3
 80100c0:	d007      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 80100c2:	dd0b      	ble.n	80100dc <ai_array_to_buffer_fmt+0x34>
 80100c4:	4b27      	ldr	r3, [pc, #156]	; (8010164 <ai_array_to_buffer_fmt+0xbc>)
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d003      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 80100ca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d131      	bne.n	8010136 <ai_array_to_buffer_fmt+0x8e>
 80100d2:	4613      	mov	r3, r2
 80100d4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80100d8:	4318      	orrs	r0, r3
 80100da:	4770      	bx	lr
 80100dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d0f6      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 80100e4:	dd2c      	ble.n	8010140 <ai_array_to_buffer_fmt+0x98>
 80100e6:	4b20      	ldr	r3, [pc, #128]	; (8010168 <ai_array_to_buffer_fmt+0xc0>)
 80100e8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80100ec:	429a      	cmp	r2, r3
 80100ee:	bf18      	it	ne
 80100f0:	2340      	movne	r3, #64	; 0x40
 80100f2:	4318      	orrs	r0, r3
 80100f4:	4770      	bx	lr
 80100f6:	4b1d      	ldr	r3, [pc, #116]	; (801016c <ai_array_to_buffer_fmt+0xc4>)
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d0ea      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 80100fc:	dd0e      	ble.n	801011c <ai_array_to_buffer_fmt+0x74>
 80100fe:	4b1c      	ldr	r3, [pc, #112]	; (8010170 <ai_array_to_buffer_fmt+0xc8>)
 8010100:	429a      	cmp	r2, r3
 8010102:	d0e6      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 8010104:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8010108:	429a      	cmp	r2, r3
 801010a:	d0e2      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 801010c:	4b19      	ldr	r3, [pc, #100]	; (8010174 <ai_array_to_buffer_fmt+0xcc>)
 801010e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010112:	429a      	cmp	r2, r3
 8010114:	bf18      	it	ne
 8010116:	2340      	movne	r3, #64	; 0x40
 8010118:	4318      	orrs	r0, r3
 801011a:	4770      	bx	lr
 801011c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8010120:	429a      	cmp	r2, r3
 8010122:	d0d6      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 8010124:	3307      	adds	r3, #7
 8010126:	429a      	cmp	r2, r3
 8010128:	d0d3      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 801012a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801012e:	429a      	cmp	r2, r3
 8010130:	bf18      	it	ne
 8010132:	2340      	movne	r3, #64	; 0x40
 8010134:	e7ce      	b.n	80100d4 <ai_array_to_buffer_fmt+0x2c>
 8010136:	4b10      	ldr	r3, [pc, #64]	; (8010178 <ai_array_to_buffer_fmt+0xd0>)
 8010138:	429a      	cmp	r2, r3
 801013a:	bf18      	it	ne
 801013c:	2340      	movne	r3, #64	; 0x40
 801013e:	e7c9      	b.n	80100d4 <ai_array_to_buffer_fmt+0x2c>
 8010140:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8010144:	429a      	cmp	r2, r3
 8010146:	d0c4      	beq.n	80100d2 <ai_array_to_buffer_fmt+0x2a>
 8010148:	3380      	adds	r3, #128	; 0x80
 801014a:	429a      	cmp	r2, r3
 801014c:	bf18      	it	ne
 801014e:	2340      	movne	r3, #64	; 0x40
 8010150:	e7c0      	b.n	80100d4 <ai_array_to_buffer_fmt+0x2c>
 8010152:	4b0a      	ldr	r3, [pc, #40]	; (801017c <ai_array_to_buffer_fmt+0xd4>)
 8010154:	4003      	ands	r3, r0
 8010156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801015a:	e7bb      	b.n	80100d4 <ai_array_to_buffer_fmt+0x2c>
 801015c:	00840040 	.word	0x00840040
 8010160:	00040840 	.word	0x00040840
 8010164:	00041040 	.word	0x00041040
 8010168:	00040447 	.word	0x00040447
 801016c:	00840840 	.word	0x00840840
 8010170:	00841040 	.word	0x00841040
 8010174:	0084084f 	.word	0x0084084f
 8010178:	0004084f 	.word	0x0004084f
 801017c:	00803fff 	.word	0x00803fff

08010180 <ai_array_get_data_byte_size>:
 8010180:	b161      	cbz	r1, 801019c <ai_array_get_data_byte_size+0x1c>
 8010182:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8010186:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801018a:	fb03 f101 	mul.w	r1, r3, r1
 801018e:	1dc8      	adds	r0, r1, #7
 8010190:	f020 0007 	bic.w	r0, r0, #7
 8010194:	40d0      	lsrs	r0, r2
 8010196:	3007      	adds	r0, #7
 8010198:	08c0      	lsrs	r0, r0, #3
 801019a:	4770      	bx	lr
 801019c:	4608      	mov	r0, r1
 801019e:	4770      	bx	lr

080101a0 <__errno>:
 80101a0:	4b01      	ldr	r3, [pc, #4]	; (80101a8 <__errno+0x8>)
 80101a2:	6818      	ldr	r0, [r3, #0]
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	24003a4c 	.word	0x24003a4c

080101ac <__libc_init_array>:
 80101ac:	b570      	push	{r4, r5, r6, lr}
 80101ae:	4d0d      	ldr	r5, [pc, #52]	; (80101e4 <__libc_init_array+0x38>)
 80101b0:	4c0d      	ldr	r4, [pc, #52]	; (80101e8 <__libc_init_array+0x3c>)
 80101b2:	1b64      	subs	r4, r4, r5
 80101b4:	10a4      	asrs	r4, r4, #2
 80101b6:	2600      	movs	r6, #0
 80101b8:	42a6      	cmp	r6, r4
 80101ba:	d109      	bne.n	80101d0 <__libc_init_array+0x24>
 80101bc:	4d0b      	ldr	r5, [pc, #44]	; (80101ec <__libc_init_array+0x40>)
 80101be:	4c0c      	ldr	r4, [pc, #48]	; (80101f0 <__libc_init_array+0x44>)
 80101c0:	f001 fa42 	bl	8011648 <_init>
 80101c4:	1b64      	subs	r4, r4, r5
 80101c6:	10a4      	asrs	r4, r4, #2
 80101c8:	2600      	movs	r6, #0
 80101ca:	42a6      	cmp	r6, r4
 80101cc:	d105      	bne.n	80101da <__libc_init_array+0x2e>
 80101ce:	bd70      	pop	{r4, r5, r6, pc}
 80101d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80101d4:	4798      	blx	r3
 80101d6:	3601      	adds	r6, #1
 80101d8:	e7ee      	b.n	80101b8 <__libc_init_array+0xc>
 80101da:	f855 3b04 	ldr.w	r3, [r5], #4
 80101de:	4798      	blx	r3
 80101e0:	3601      	adds	r6, #1
 80101e2:	e7f2      	b.n	80101ca <__libc_init_array+0x1e>
 80101e4:	080118b0 	.word	0x080118b0
 80101e8:	080118b0 	.word	0x080118b0
 80101ec:	080118b0 	.word	0x080118b0
 80101f0:	080118b4 	.word	0x080118b4

080101f4 <memcpy>:
 80101f4:	440a      	add	r2, r1
 80101f6:	4291      	cmp	r1, r2
 80101f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80101fc:	d100      	bne.n	8010200 <memcpy+0xc>
 80101fe:	4770      	bx	lr
 8010200:	b510      	push	{r4, lr}
 8010202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010206:	f803 4f01 	strb.w	r4, [r3, #1]!
 801020a:	4291      	cmp	r1, r2
 801020c:	d1f9      	bne.n	8010202 <memcpy+0xe>
 801020e:	bd10      	pop	{r4, pc}

08010210 <memset>:
 8010210:	4402      	add	r2, r0
 8010212:	4603      	mov	r3, r0
 8010214:	4293      	cmp	r3, r2
 8010216:	d100      	bne.n	801021a <memset+0xa>
 8010218:	4770      	bx	lr
 801021a:	f803 1b01 	strb.w	r1, [r3], #1
 801021e:	e7f9      	b.n	8010214 <memset+0x4>

08010220 <_free_r>:
 8010220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010222:	2900      	cmp	r1, #0
 8010224:	d044      	beq.n	80102b0 <_free_r+0x90>
 8010226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801022a:	9001      	str	r0, [sp, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	f1a1 0404 	sub.w	r4, r1, #4
 8010232:	bfb8      	it	lt
 8010234:	18e4      	addlt	r4, r4, r3
 8010236:	f000 fc85 	bl	8010b44 <__malloc_lock>
 801023a:	4a1e      	ldr	r2, [pc, #120]	; (80102b4 <_free_r+0x94>)
 801023c:	9801      	ldr	r0, [sp, #4]
 801023e:	6813      	ldr	r3, [r2, #0]
 8010240:	b933      	cbnz	r3, 8010250 <_free_r+0x30>
 8010242:	6063      	str	r3, [r4, #4]
 8010244:	6014      	str	r4, [r2, #0]
 8010246:	b003      	add	sp, #12
 8010248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801024c:	f000 bc80 	b.w	8010b50 <__malloc_unlock>
 8010250:	42a3      	cmp	r3, r4
 8010252:	d908      	bls.n	8010266 <_free_r+0x46>
 8010254:	6825      	ldr	r5, [r4, #0]
 8010256:	1961      	adds	r1, r4, r5
 8010258:	428b      	cmp	r3, r1
 801025a:	bf01      	itttt	eq
 801025c:	6819      	ldreq	r1, [r3, #0]
 801025e:	685b      	ldreq	r3, [r3, #4]
 8010260:	1949      	addeq	r1, r1, r5
 8010262:	6021      	streq	r1, [r4, #0]
 8010264:	e7ed      	b.n	8010242 <_free_r+0x22>
 8010266:	461a      	mov	r2, r3
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	b10b      	cbz	r3, 8010270 <_free_r+0x50>
 801026c:	42a3      	cmp	r3, r4
 801026e:	d9fa      	bls.n	8010266 <_free_r+0x46>
 8010270:	6811      	ldr	r1, [r2, #0]
 8010272:	1855      	adds	r5, r2, r1
 8010274:	42a5      	cmp	r5, r4
 8010276:	d10b      	bne.n	8010290 <_free_r+0x70>
 8010278:	6824      	ldr	r4, [r4, #0]
 801027a:	4421      	add	r1, r4
 801027c:	1854      	adds	r4, r2, r1
 801027e:	42a3      	cmp	r3, r4
 8010280:	6011      	str	r1, [r2, #0]
 8010282:	d1e0      	bne.n	8010246 <_free_r+0x26>
 8010284:	681c      	ldr	r4, [r3, #0]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	6053      	str	r3, [r2, #4]
 801028a:	4421      	add	r1, r4
 801028c:	6011      	str	r1, [r2, #0]
 801028e:	e7da      	b.n	8010246 <_free_r+0x26>
 8010290:	d902      	bls.n	8010298 <_free_r+0x78>
 8010292:	230c      	movs	r3, #12
 8010294:	6003      	str	r3, [r0, #0]
 8010296:	e7d6      	b.n	8010246 <_free_r+0x26>
 8010298:	6825      	ldr	r5, [r4, #0]
 801029a:	1961      	adds	r1, r4, r5
 801029c:	428b      	cmp	r3, r1
 801029e:	bf04      	itt	eq
 80102a0:	6819      	ldreq	r1, [r3, #0]
 80102a2:	685b      	ldreq	r3, [r3, #4]
 80102a4:	6063      	str	r3, [r4, #4]
 80102a6:	bf04      	itt	eq
 80102a8:	1949      	addeq	r1, r1, r5
 80102aa:	6021      	streq	r1, [r4, #0]
 80102ac:	6054      	str	r4, [r2, #4]
 80102ae:	e7ca      	b.n	8010246 <_free_r+0x26>
 80102b0:	b003      	add	sp, #12
 80102b2:	bd30      	pop	{r4, r5, pc}
 80102b4:	24005a50 	.word	0x24005a50

080102b8 <sbrk_aligned>:
 80102b8:	b570      	push	{r4, r5, r6, lr}
 80102ba:	4e0e      	ldr	r6, [pc, #56]	; (80102f4 <sbrk_aligned+0x3c>)
 80102bc:	460c      	mov	r4, r1
 80102be:	6831      	ldr	r1, [r6, #0]
 80102c0:	4605      	mov	r5, r0
 80102c2:	b911      	cbnz	r1, 80102ca <sbrk_aligned+0x12>
 80102c4:	f000 f91a 	bl	80104fc <_sbrk_r>
 80102c8:	6030      	str	r0, [r6, #0]
 80102ca:	4621      	mov	r1, r4
 80102cc:	4628      	mov	r0, r5
 80102ce:	f000 f915 	bl	80104fc <_sbrk_r>
 80102d2:	1c43      	adds	r3, r0, #1
 80102d4:	d00a      	beq.n	80102ec <sbrk_aligned+0x34>
 80102d6:	1cc4      	adds	r4, r0, #3
 80102d8:	f024 0403 	bic.w	r4, r4, #3
 80102dc:	42a0      	cmp	r0, r4
 80102de:	d007      	beq.n	80102f0 <sbrk_aligned+0x38>
 80102e0:	1a21      	subs	r1, r4, r0
 80102e2:	4628      	mov	r0, r5
 80102e4:	f000 f90a 	bl	80104fc <_sbrk_r>
 80102e8:	3001      	adds	r0, #1
 80102ea:	d101      	bne.n	80102f0 <sbrk_aligned+0x38>
 80102ec:	f04f 34ff 	mov.w	r4, #4294967295
 80102f0:	4620      	mov	r0, r4
 80102f2:	bd70      	pop	{r4, r5, r6, pc}
 80102f4:	24005a54 	.word	0x24005a54

080102f8 <_malloc_r>:
 80102f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102fc:	1ccd      	adds	r5, r1, #3
 80102fe:	f025 0503 	bic.w	r5, r5, #3
 8010302:	3508      	adds	r5, #8
 8010304:	2d0c      	cmp	r5, #12
 8010306:	bf38      	it	cc
 8010308:	250c      	movcc	r5, #12
 801030a:	2d00      	cmp	r5, #0
 801030c:	4607      	mov	r7, r0
 801030e:	db01      	blt.n	8010314 <_malloc_r+0x1c>
 8010310:	42a9      	cmp	r1, r5
 8010312:	d905      	bls.n	8010320 <_malloc_r+0x28>
 8010314:	230c      	movs	r3, #12
 8010316:	603b      	str	r3, [r7, #0]
 8010318:	2600      	movs	r6, #0
 801031a:	4630      	mov	r0, r6
 801031c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010320:	4e2e      	ldr	r6, [pc, #184]	; (80103dc <_malloc_r+0xe4>)
 8010322:	f000 fc0f 	bl	8010b44 <__malloc_lock>
 8010326:	6833      	ldr	r3, [r6, #0]
 8010328:	461c      	mov	r4, r3
 801032a:	bb34      	cbnz	r4, 801037a <_malloc_r+0x82>
 801032c:	4629      	mov	r1, r5
 801032e:	4638      	mov	r0, r7
 8010330:	f7ff ffc2 	bl	80102b8 <sbrk_aligned>
 8010334:	1c43      	adds	r3, r0, #1
 8010336:	4604      	mov	r4, r0
 8010338:	d14d      	bne.n	80103d6 <_malloc_r+0xde>
 801033a:	6834      	ldr	r4, [r6, #0]
 801033c:	4626      	mov	r6, r4
 801033e:	2e00      	cmp	r6, #0
 8010340:	d140      	bne.n	80103c4 <_malloc_r+0xcc>
 8010342:	6823      	ldr	r3, [r4, #0]
 8010344:	4631      	mov	r1, r6
 8010346:	4638      	mov	r0, r7
 8010348:	eb04 0803 	add.w	r8, r4, r3
 801034c:	f000 f8d6 	bl	80104fc <_sbrk_r>
 8010350:	4580      	cmp	r8, r0
 8010352:	d13a      	bne.n	80103ca <_malloc_r+0xd2>
 8010354:	6821      	ldr	r1, [r4, #0]
 8010356:	3503      	adds	r5, #3
 8010358:	1a6d      	subs	r5, r5, r1
 801035a:	f025 0503 	bic.w	r5, r5, #3
 801035e:	3508      	adds	r5, #8
 8010360:	2d0c      	cmp	r5, #12
 8010362:	bf38      	it	cc
 8010364:	250c      	movcc	r5, #12
 8010366:	4629      	mov	r1, r5
 8010368:	4638      	mov	r0, r7
 801036a:	f7ff ffa5 	bl	80102b8 <sbrk_aligned>
 801036e:	3001      	adds	r0, #1
 8010370:	d02b      	beq.n	80103ca <_malloc_r+0xd2>
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	442b      	add	r3, r5
 8010376:	6023      	str	r3, [r4, #0]
 8010378:	e00e      	b.n	8010398 <_malloc_r+0xa0>
 801037a:	6822      	ldr	r2, [r4, #0]
 801037c:	1b52      	subs	r2, r2, r5
 801037e:	d41e      	bmi.n	80103be <_malloc_r+0xc6>
 8010380:	2a0b      	cmp	r2, #11
 8010382:	d916      	bls.n	80103b2 <_malloc_r+0xba>
 8010384:	1961      	adds	r1, r4, r5
 8010386:	42a3      	cmp	r3, r4
 8010388:	6025      	str	r5, [r4, #0]
 801038a:	bf18      	it	ne
 801038c:	6059      	strne	r1, [r3, #4]
 801038e:	6863      	ldr	r3, [r4, #4]
 8010390:	bf08      	it	eq
 8010392:	6031      	streq	r1, [r6, #0]
 8010394:	5162      	str	r2, [r4, r5]
 8010396:	604b      	str	r3, [r1, #4]
 8010398:	4638      	mov	r0, r7
 801039a:	f104 060b 	add.w	r6, r4, #11
 801039e:	f000 fbd7 	bl	8010b50 <__malloc_unlock>
 80103a2:	f026 0607 	bic.w	r6, r6, #7
 80103a6:	1d23      	adds	r3, r4, #4
 80103a8:	1af2      	subs	r2, r6, r3
 80103aa:	d0b6      	beq.n	801031a <_malloc_r+0x22>
 80103ac:	1b9b      	subs	r3, r3, r6
 80103ae:	50a3      	str	r3, [r4, r2]
 80103b0:	e7b3      	b.n	801031a <_malloc_r+0x22>
 80103b2:	6862      	ldr	r2, [r4, #4]
 80103b4:	42a3      	cmp	r3, r4
 80103b6:	bf0c      	ite	eq
 80103b8:	6032      	streq	r2, [r6, #0]
 80103ba:	605a      	strne	r2, [r3, #4]
 80103bc:	e7ec      	b.n	8010398 <_malloc_r+0xa0>
 80103be:	4623      	mov	r3, r4
 80103c0:	6864      	ldr	r4, [r4, #4]
 80103c2:	e7b2      	b.n	801032a <_malloc_r+0x32>
 80103c4:	4634      	mov	r4, r6
 80103c6:	6876      	ldr	r6, [r6, #4]
 80103c8:	e7b9      	b.n	801033e <_malloc_r+0x46>
 80103ca:	230c      	movs	r3, #12
 80103cc:	603b      	str	r3, [r7, #0]
 80103ce:	4638      	mov	r0, r7
 80103d0:	f000 fbbe 	bl	8010b50 <__malloc_unlock>
 80103d4:	e7a1      	b.n	801031a <_malloc_r+0x22>
 80103d6:	6025      	str	r5, [r4, #0]
 80103d8:	e7de      	b.n	8010398 <_malloc_r+0xa0>
 80103da:	bf00      	nop
 80103dc:	24005a50 	.word	0x24005a50

080103e0 <iprintf>:
 80103e0:	b40f      	push	{r0, r1, r2, r3}
 80103e2:	4b0a      	ldr	r3, [pc, #40]	; (801040c <iprintf+0x2c>)
 80103e4:	b513      	push	{r0, r1, r4, lr}
 80103e6:	681c      	ldr	r4, [r3, #0]
 80103e8:	b124      	cbz	r4, 80103f4 <iprintf+0x14>
 80103ea:	69a3      	ldr	r3, [r4, #24]
 80103ec:	b913      	cbnz	r3, 80103f4 <iprintf+0x14>
 80103ee:	4620      	mov	r0, r4
 80103f0:	f000 faa2 	bl	8010938 <__sinit>
 80103f4:	ab05      	add	r3, sp, #20
 80103f6:	9a04      	ldr	r2, [sp, #16]
 80103f8:	68a1      	ldr	r1, [r4, #8]
 80103fa:	9301      	str	r3, [sp, #4]
 80103fc:	4620      	mov	r0, r4
 80103fe:	f000 fd61 	bl	8010ec4 <_vfiprintf_r>
 8010402:	b002      	add	sp, #8
 8010404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010408:	b004      	add	sp, #16
 801040a:	4770      	bx	lr
 801040c:	24003a4c 	.word	0x24003a4c

08010410 <_puts_r>:
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	460e      	mov	r6, r1
 8010414:	4605      	mov	r5, r0
 8010416:	b118      	cbz	r0, 8010420 <_puts_r+0x10>
 8010418:	6983      	ldr	r3, [r0, #24]
 801041a:	b90b      	cbnz	r3, 8010420 <_puts_r+0x10>
 801041c:	f000 fa8c 	bl	8010938 <__sinit>
 8010420:	69ab      	ldr	r3, [r5, #24]
 8010422:	68ac      	ldr	r4, [r5, #8]
 8010424:	b913      	cbnz	r3, 801042c <_puts_r+0x1c>
 8010426:	4628      	mov	r0, r5
 8010428:	f000 fa86 	bl	8010938 <__sinit>
 801042c:	4b2c      	ldr	r3, [pc, #176]	; (80104e0 <_puts_r+0xd0>)
 801042e:	429c      	cmp	r4, r3
 8010430:	d120      	bne.n	8010474 <_puts_r+0x64>
 8010432:	686c      	ldr	r4, [r5, #4]
 8010434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010436:	07db      	lsls	r3, r3, #31
 8010438:	d405      	bmi.n	8010446 <_puts_r+0x36>
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	0598      	lsls	r0, r3, #22
 801043e:	d402      	bmi.n	8010446 <_puts_r+0x36>
 8010440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010442:	f000 fb17 	bl	8010a74 <__retarget_lock_acquire_recursive>
 8010446:	89a3      	ldrh	r3, [r4, #12]
 8010448:	0719      	lsls	r1, r3, #28
 801044a:	d51d      	bpl.n	8010488 <_puts_r+0x78>
 801044c:	6923      	ldr	r3, [r4, #16]
 801044e:	b1db      	cbz	r3, 8010488 <_puts_r+0x78>
 8010450:	3e01      	subs	r6, #1
 8010452:	68a3      	ldr	r3, [r4, #8]
 8010454:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010458:	3b01      	subs	r3, #1
 801045a:	60a3      	str	r3, [r4, #8]
 801045c:	bb39      	cbnz	r1, 80104ae <_puts_r+0x9e>
 801045e:	2b00      	cmp	r3, #0
 8010460:	da38      	bge.n	80104d4 <_puts_r+0xc4>
 8010462:	4622      	mov	r2, r4
 8010464:	210a      	movs	r1, #10
 8010466:	4628      	mov	r0, r5
 8010468:	f000 f88c 	bl	8010584 <__swbuf_r>
 801046c:	3001      	adds	r0, #1
 801046e:	d011      	beq.n	8010494 <_puts_r+0x84>
 8010470:	250a      	movs	r5, #10
 8010472:	e011      	b.n	8010498 <_puts_r+0x88>
 8010474:	4b1b      	ldr	r3, [pc, #108]	; (80104e4 <_puts_r+0xd4>)
 8010476:	429c      	cmp	r4, r3
 8010478:	d101      	bne.n	801047e <_puts_r+0x6e>
 801047a:	68ac      	ldr	r4, [r5, #8]
 801047c:	e7da      	b.n	8010434 <_puts_r+0x24>
 801047e:	4b1a      	ldr	r3, [pc, #104]	; (80104e8 <_puts_r+0xd8>)
 8010480:	429c      	cmp	r4, r3
 8010482:	bf08      	it	eq
 8010484:	68ec      	ldreq	r4, [r5, #12]
 8010486:	e7d5      	b.n	8010434 <_puts_r+0x24>
 8010488:	4621      	mov	r1, r4
 801048a:	4628      	mov	r0, r5
 801048c:	f000 f8cc 	bl	8010628 <__swsetup_r>
 8010490:	2800      	cmp	r0, #0
 8010492:	d0dd      	beq.n	8010450 <_puts_r+0x40>
 8010494:	f04f 35ff 	mov.w	r5, #4294967295
 8010498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801049a:	07da      	lsls	r2, r3, #31
 801049c:	d405      	bmi.n	80104aa <_puts_r+0x9a>
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	059b      	lsls	r3, r3, #22
 80104a2:	d402      	bmi.n	80104aa <_puts_r+0x9a>
 80104a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104a6:	f000 fae6 	bl	8010a76 <__retarget_lock_release_recursive>
 80104aa:	4628      	mov	r0, r5
 80104ac:	bd70      	pop	{r4, r5, r6, pc}
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	da04      	bge.n	80104bc <_puts_r+0xac>
 80104b2:	69a2      	ldr	r2, [r4, #24]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	dc06      	bgt.n	80104c6 <_puts_r+0xb6>
 80104b8:	290a      	cmp	r1, #10
 80104ba:	d004      	beq.n	80104c6 <_puts_r+0xb6>
 80104bc:	6823      	ldr	r3, [r4, #0]
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	6022      	str	r2, [r4, #0]
 80104c2:	7019      	strb	r1, [r3, #0]
 80104c4:	e7c5      	b.n	8010452 <_puts_r+0x42>
 80104c6:	4622      	mov	r2, r4
 80104c8:	4628      	mov	r0, r5
 80104ca:	f000 f85b 	bl	8010584 <__swbuf_r>
 80104ce:	3001      	adds	r0, #1
 80104d0:	d1bf      	bne.n	8010452 <_puts_r+0x42>
 80104d2:	e7df      	b.n	8010494 <_puts_r+0x84>
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	250a      	movs	r5, #10
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	6022      	str	r2, [r4, #0]
 80104dc:	701d      	strb	r5, [r3, #0]
 80104de:	e7db      	b.n	8010498 <_puts_r+0x88>
 80104e0:	0801183c 	.word	0x0801183c
 80104e4:	0801185c 	.word	0x0801185c
 80104e8:	0801181c 	.word	0x0801181c

080104ec <puts>:
 80104ec:	4b02      	ldr	r3, [pc, #8]	; (80104f8 <puts+0xc>)
 80104ee:	4601      	mov	r1, r0
 80104f0:	6818      	ldr	r0, [r3, #0]
 80104f2:	f7ff bf8d 	b.w	8010410 <_puts_r>
 80104f6:	bf00      	nop
 80104f8:	24003a4c 	.word	0x24003a4c

080104fc <_sbrk_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4d06      	ldr	r5, [pc, #24]	; (8010518 <_sbrk_r+0x1c>)
 8010500:	2300      	movs	r3, #0
 8010502:	4604      	mov	r4, r0
 8010504:	4608      	mov	r0, r1
 8010506:	602b      	str	r3, [r5, #0]
 8010508:	f7f0 fe2e 	bl	8001168 <_sbrk>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	d102      	bne.n	8010516 <_sbrk_r+0x1a>
 8010510:	682b      	ldr	r3, [r5, #0]
 8010512:	b103      	cbz	r3, 8010516 <_sbrk_r+0x1a>
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	24005a5c 	.word	0x24005a5c

0801051c <sniprintf>:
 801051c:	b40c      	push	{r2, r3}
 801051e:	b530      	push	{r4, r5, lr}
 8010520:	4b17      	ldr	r3, [pc, #92]	; (8010580 <sniprintf+0x64>)
 8010522:	1e0c      	subs	r4, r1, #0
 8010524:	681d      	ldr	r5, [r3, #0]
 8010526:	b09d      	sub	sp, #116	; 0x74
 8010528:	da08      	bge.n	801053c <sniprintf+0x20>
 801052a:	238b      	movs	r3, #139	; 0x8b
 801052c:	602b      	str	r3, [r5, #0]
 801052e:	f04f 30ff 	mov.w	r0, #4294967295
 8010532:	b01d      	add	sp, #116	; 0x74
 8010534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010538:	b002      	add	sp, #8
 801053a:	4770      	bx	lr
 801053c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010544:	bf14      	ite	ne
 8010546:	f104 33ff 	addne.w	r3, r4, #4294967295
 801054a:	4623      	moveq	r3, r4
 801054c:	9304      	str	r3, [sp, #16]
 801054e:	9307      	str	r3, [sp, #28]
 8010550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010554:	9002      	str	r0, [sp, #8]
 8010556:	9006      	str	r0, [sp, #24]
 8010558:	f8ad 3016 	strh.w	r3, [sp, #22]
 801055c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801055e:	ab21      	add	r3, sp, #132	; 0x84
 8010560:	a902      	add	r1, sp, #8
 8010562:	4628      	mov	r0, r5
 8010564:	9301      	str	r3, [sp, #4]
 8010566:	f000 fb83 	bl	8010c70 <_svfiprintf_r>
 801056a:	1c43      	adds	r3, r0, #1
 801056c:	bfbc      	itt	lt
 801056e:	238b      	movlt	r3, #139	; 0x8b
 8010570:	602b      	strlt	r3, [r5, #0]
 8010572:	2c00      	cmp	r4, #0
 8010574:	d0dd      	beq.n	8010532 <sniprintf+0x16>
 8010576:	9b02      	ldr	r3, [sp, #8]
 8010578:	2200      	movs	r2, #0
 801057a:	701a      	strb	r2, [r3, #0]
 801057c:	e7d9      	b.n	8010532 <sniprintf+0x16>
 801057e:	bf00      	nop
 8010580:	24003a4c 	.word	0x24003a4c

08010584 <__swbuf_r>:
 8010584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010586:	460e      	mov	r6, r1
 8010588:	4614      	mov	r4, r2
 801058a:	4605      	mov	r5, r0
 801058c:	b118      	cbz	r0, 8010596 <__swbuf_r+0x12>
 801058e:	6983      	ldr	r3, [r0, #24]
 8010590:	b90b      	cbnz	r3, 8010596 <__swbuf_r+0x12>
 8010592:	f000 f9d1 	bl	8010938 <__sinit>
 8010596:	4b21      	ldr	r3, [pc, #132]	; (801061c <__swbuf_r+0x98>)
 8010598:	429c      	cmp	r4, r3
 801059a:	d12b      	bne.n	80105f4 <__swbuf_r+0x70>
 801059c:	686c      	ldr	r4, [r5, #4]
 801059e:	69a3      	ldr	r3, [r4, #24]
 80105a0:	60a3      	str	r3, [r4, #8]
 80105a2:	89a3      	ldrh	r3, [r4, #12]
 80105a4:	071a      	lsls	r2, r3, #28
 80105a6:	d52f      	bpl.n	8010608 <__swbuf_r+0x84>
 80105a8:	6923      	ldr	r3, [r4, #16]
 80105aa:	b36b      	cbz	r3, 8010608 <__swbuf_r+0x84>
 80105ac:	6923      	ldr	r3, [r4, #16]
 80105ae:	6820      	ldr	r0, [r4, #0]
 80105b0:	1ac0      	subs	r0, r0, r3
 80105b2:	6963      	ldr	r3, [r4, #20]
 80105b4:	b2f6      	uxtb	r6, r6
 80105b6:	4283      	cmp	r3, r0
 80105b8:	4637      	mov	r7, r6
 80105ba:	dc04      	bgt.n	80105c6 <__swbuf_r+0x42>
 80105bc:	4621      	mov	r1, r4
 80105be:	4628      	mov	r0, r5
 80105c0:	f000 f926 	bl	8010810 <_fflush_r>
 80105c4:	bb30      	cbnz	r0, 8010614 <__swbuf_r+0x90>
 80105c6:	68a3      	ldr	r3, [r4, #8]
 80105c8:	3b01      	subs	r3, #1
 80105ca:	60a3      	str	r3, [r4, #8]
 80105cc:	6823      	ldr	r3, [r4, #0]
 80105ce:	1c5a      	adds	r2, r3, #1
 80105d0:	6022      	str	r2, [r4, #0]
 80105d2:	701e      	strb	r6, [r3, #0]
 80105d4:	6963      	ldr	r3, [r4, #20]
 80105d6:	3001      	adds	r0, #1
 80105d8:	4283      	cmp	r3, r0
 80105da:	d004      	beq.n	80105e6 <__swbuf_r+0x62>
 80105dc:	89a3      	ldrh	r3, [r4, #12]
 80105de:	07db      	lsls	r3, r3, #31
 80105e0:	d506      	bpl.n	80105f0 <__swbuf_r+0x6c>
 80105e2:	2e0a      	cmp	r6, #10
 80105e4:	d104      	bne.n	80105f0 <__swbuf_r+0x6c>
 80105e6:	4621      	mov	r1, r4
 80105e8:	4628      	mov	r0, r5
 80105ea:	f000 f911 	bl	8010810 <_fflush_r>
 80105ee:	b988      	cbnz	r0, 8010614 <__swbuf_r+0x90>
 80105f0:	4638      	mov	r0, r7
 80105f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105f4:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <__swbuf_r+0x9c>)
 80105f6:	429c      	cmp	r4, r3
 80105f8:	d101      	bne.n	80105fe <__swbuf_r+0x7a>
 80105fa:	68ac      	ldr	r4, [r5, #8]
 80105fc:	e7cf      	b.n	801059e <__swbuf_r+0x1a>
 80105fe:	4b09      	ldr	r3, [pc, #36]	; (8010624 <__swbuf_r+0xa0>)
 8010600:	429c      	cmp	r4, r3
 8010602:	bf08      	it	eq
 8010604:	68ec      	ldreq	r4, [r5, #12]
 8010606:	e7ca      	b.n	801059e <__swbuf_r+0x1a>
 8010608:	4621      	mov	r1, r4
 801060a:	4628      	mov	r0, r5
 801060c:	f000 f80c 	bl	8010628 <__swsetup_r>
 8010610:	2800      	cmp	r0, #0
 8010612:	d0cb      	beq.n	80105ac <__swbuf_r+0x28>
 8010614:	f04f 37ff 	mov.w	r7, #4294967295
 8010618:	e7ea      	b.n	80105f0 <__swbuf_r+0x6c>
 801061a:	bf00      	nop
 801061c:	0801183c 	.word	0x0801183c
 8010620:	0801185c 	.word	0x0801185c
 8010624:	0801181c 	.word	0x0801181c

08010628 <__swsetup_r>:
 8010628:	4b32      	ldr	r3, [pc, #200]	; (80106f4 <__swsetup_r+0xcc>)
 801062a:	b570      	push	{r4, r5, r6, lr}
 801062c:	681d      	ldr	r5, [r3, #0]
 801062e:	4606      	mov	r6, r0
 8010630:	460c      	mov	r4, r1
 8010632:	b125      	cbz	r5, 801063e <__swsetup_r+0x16>
 8010634:	69ab      	ldr	r3, [r5, #24]
 8010636:	b913      	cbnz	r3, 801063e <__swsetup_r+0x16>
 8010638:	4628      	mov	r0, r5
 801063a:	f000 f97d 	bl	8010938 <__sinit>
 801063e:	4b2e      	ldr	r3, [pc, #184]	; (80106f8 <__swsetup_r+0xd0>)
 8010640:	429c      	cmp	r4, r3
 8010642:	d10f      	bne.n	8010664 <__swsetup_r+0x3c>
 8010644:	686c      	ldr	r4, [r5, #4]
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801064c:	0719      	lsls	r1, r3, #28
 801064e:	d42c      	bmi.n	80106aa <__swsetup_r+0x82>
 8010650:	06dd      	lsls	r5, r3, #27
 8010652:	d411      	bmi.n	8010678 <__swsetup_r+0x50>
 8010654:	2309      	movs	r3, #9
 8010656:	6033      	str	r3, [r6, #0]
 8010658:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	f04f 30ff 	mov.w	r0, #4294967295
 8010662:	e03e      	b.n	80106e2 <__swsetup_r+0xba>
 8010664:	4b25      	ldr	r3, [pc, #148]	; (80106fc <__swsetup_r+0xd4>)
 8010666:	429c      	cmp	r4, r3
 8010668:	d101      	bne.n	801066e <__swsetup_r+0x46>
 801066a:	68ac      	ldr	r4, [r5, #8]
 801066c:	e7eb      	b.n	8010646 <__swsetup_r+0x1e>
 801066e:	4b24      	ldr	r3, [pc, #144]	; (8010700 <__swsetup_r+0xd8>)
 8010670:	429c      	cmp	r4, r3
 8010672:	bf08      	it	eq
 8010674:	68ec      	ldreq	r4, [r5, #12]
 8010676:	e7e6      	b.n	8010646 <__swsetup_r+0x1e>
 8010678:	0758      	lsls	r0, r3, #29
 801067a:	d512      	bpl.n	80106a2 <__swsetup_r+0x7a>
 801067c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801067e:	b141      	cbz	r1, 8010692 <__swsetup_r+0x6a>
 8010680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010684:	4299      	cmp	r1, r3
 8010686:	d002      	beq.n	801068e <__swsetup_r+0x66>
 8010688:	4630      	mov	r0, r6
 801068a:	f7ff fdc9 	bl	8010220 <_free_r>
 801068e:	2300      	movs	r3, #0
 8010690:	6363      	str	r3, [r4, #52]	; 0x34
 8010692:	89a3      	ldrh	r3, [r4, #12]
 8010694:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010698:	81a3      	strh	r3, [r4, #12]
 801069a:	2300      	movs	r3, #0
 801069c:	6063      	str	r3, [r4, #4]
 801069e:	6923      	ldr	r3, [r4, #16]
 80106a0:	6023      	str	r3, [r4, #0]
 80106a2:	89a3      	ldrh	r3, [r4, #12]
 80106a4:	f043 0308 	orr.w	r3, r3, #8
 80106a8:	81a3      	strh	r3, [r4, #12]
 80106aa:	6923      	ldr	r3, [r4, #16]
 80106ac:	b94b      	cbnz	r3, 80106c2 <__swsetup_r+0x9a>
 80106ae:	89a3      	ldrh	r3, [r4, #12]
 80106b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106b8:	d003      	beq.n	80106c2 <__swsetup_r+0x9a>
 80106ba:	4621      	mov	r1, r4
 80106bc:	4630      	mov	r0, r6
 80106be:	f000 fa01 	bl	8010ac4 <__smakebuf_r>
 80106c2:	89a0      	ldrh	r0, [r4, #12]
 80106c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106c8:	f010 0301 	ands.w	r3, r0, #1
 80106cc:	d00a      	beq.n	80106e4 <__swsetup_r+0xbc>
 80106ce:	2300      	movs	r3, #0
 80106d0:	60a3      	str	r3, [r4, #8]
 80106d2:	6963      	ldr	r3, [r4, #20]
 80106d4:	425b      	negs	r3, r3
 80106d6:	61a3      	str	r3, [r4, #24]
 80106d8:	6923      	ldr	r3, [r4, #16]
 80106da:	b943      	cbnz	r3, 80106ee <__swsetup_r+0xc6>
 80106dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80106e0:	d1ba      	bne.n	8010658 <__swsetup_r+0x30>
 80106e2:	bd70      	pop	{r4, r5, r6, pc}
 80106e4:	0781      	lsls	r1, r0, #30
 80106e6:	bf58      	it	pl
 80106e8:	6963      	ldrpl	r3, [r4, #20]
 80106ea:	60a3      	str	r3, [r4, #8]
 80106ec:	e7f4      	b.n	80106d8 <__swsetup_r+0xb0>
 80106ee:	2000      	movs	r0, #0
 80106f0:	e7f7      	b.n	80106e2 <__swsetup_r+0xba>
 80106f2:	bf00      	nop
 80106f4:	24003a4c 	.word	0x24003a4c
 80106f8:	0801183c 	.word	0x0801183c
 80106fc:	0801185c 	.word	0x0801185c
 8010700:	0801181c 	.word	0x0801181c

08010704 <__sflush_r>:
 8010704:	898a      	ldrh	r2, [r1, #12]
 8010706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070a:	4605      	mov	r5, r0
 801070c:	0710      	lsls	r0, r2, #28
 801070e:	460c      	mov	r4, r1
 8010710:	d458      	bmi.n	80107c4 <__sflush_r+0xc0>
 8010712:	684b      	ldr	r3, [r1, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	dc05      	bgt.n	8010724 <__sflush_r+0x20>
 8010718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801071a:	2b00      	cmp	r3, #0
 801071c:	dc02      	bgt.n	8010724 <__sflush_r+0x20>
 801071e:	2000      	movs	r0, #0
 8010720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010726:	2e00      	cmp	r6, #0
 8010728:	d0f9      	beq.n	801071e <__sflush_r+0x1a>
 801072a:	2300      	movs	r3, #0
 801072c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010730:	682f      	ldr	r7, [r5, #0]
 8010732:	602b      	str	r3, [r5, #0]
 8010734:	d032      	beq.n	801079c <__sflush_r+0x98>
 8010736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010738:	89a3      	ldrh	r3, [r4, #12]
 801073a:	075a      	lsls	r2, r3, #29
 801073c:	d505      	bpl.n	801074a <__sflush_r+0x46>
 801073e:	6863      	ldr	r3, [r4, #4]
 8010740:	1ac0      	subs	r0, r0, r3
 8010742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010744:	b10b      	cbz	r3, 801074a <__sflush_r+0x46>
 8010746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010748:	1ac0      	subs	r0, r0, r3
 801074a:	2300      	movs	r3, #0
 801074c:	4602      	mov	r2, r0
 801074e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010750:	6a21      	ldr	r1, [r4, #32]
 8010752:	4628      	mov	r0, r5
 8010754:	47b0      	blx	r6
 8010756:	1c43      	adds	r3, r0, #1
 8010758:	89a3      	ldrh	r3, [r4, #12]
 801075a:	d106      	bne.n	801076a <__sflush_r+0x66>
 801075c:	6829      	ldr	r1, [r5, #0]
 801075e:	291d      	cmp	r1, #29
 8010760:	d82c      	bhi.n	80107bc <__sflush_r+0xb8>
 8010762:	4a2a      	ldr	r2, [pc, #168]	; (801080c <__sflush_r+0x108>)
 8010764:	40ca      	lsrs	r2, r1
 8010766:	07d6      	lsls	r6, r2, #31
 8010768:	d528      	bpl.n	80107bc <__sflush_r+0xb8>
 801076a:	2200      	movs	r2, #0
 801076c:	6062      	str	r2, [r4, #4]
 801076e:	04d9      	lsls	r1, r3, #19
 8010770:	6922      	ldr	r2, [r4, #16]
 8010772:	6022      	str	r2, [r4, #0]
 8010774:	d504      	bpl.n	8010780 <__sflush_r+0x7c>
 8010776:	1c42      	adds	r2, r0, #1
 8010778:	d101      	bne.n	801077e <__sflush_r+0x7a>
 801077a:	682b      	ldr	r3, [r5, #0]
 801077c:	b903      	cbnz	r3, 8010780 <__sflush_r+0x7c>
 801077e:	6560      	str	r0, [r4, #84]	; 0x54
 8010780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010782:	602f      	str	r7, [r5, #0]
 8010784:	2900      	cmp	r1, #0
 8010786:	d0ca      	beq.n	801071e <__sflush_r+0x1a>
 8010788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801078c:	4299      	cmp	r1, r3
 801078e:	d002      	beq.n	8010796 <__sflush_r+0x92>
 8010790:	4628      	mov	r0, r5
 8010792:	f7ff fd45 	bl	8010220 <_free_r>
 8010796:	2000      	movs	r0, #0
 8010798:	6360      	str	r0, [r4, #52]	; 0x34
 801079a:	e7c1      	b.n	8010720 <__sflush_r+0x1c>
 801079c:	6a21      	ldr	r1, [r4, #32]
 801079e:	2301      	movs	r3, #1
 80107a0:	4628      	mov	r0, r5
 80107a2:	47b0      	blx	r6
 80107a4:	1c41      	adds	r1, r0, #1
 80107a6:	d1c7      	bne.n	8010738 <__sflush_r+0x34>
 80107a8:	682b      	ldr	r3, [r5, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d0c4      	beq.n	8010738 <__sflush_r+0x34>
 80107ae:	2b1d      	cmp	r3, #29
 80107b0:	d001      	beq.n	80107b6 <__sflush_r+0xb2>
 80107b2:	2b16      	cmp	r3, #22
 80107b4:	d101      	bne.n	80107ba <__sflush_r+0xb6>
 80107b6:	602f      	str	r7, [r5, #0]
 80107b8:	e7b1      	b.n	801071e <__sflush_r+0x1a>
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107c0:	81a3      	strh	r3, [r4, #12]
 80107c2:	e7ad      	b.n	8010720 <__sflush_r+0x1c>
 80107c4:	690f      	ldr	r7, [r1, #16]
 80107c6:	2f00      	cmp	r7, #0
 80107c8:	d0a9      	beq.n	801071e <__sflush_r+0x1a>
 80107ca:	0793      	lsls	r3, r2, #30
 80107cc:	680e      	ldr	r6, [r1, #0]
 80107ce:	bf08      	it	eq
 80107d0:	694b      	ldreq	r3, [r1, #20]
 80107d2:	600f      	str	r7, [r1, #0]
 80107d4:	bf18      	it	ne
 80107d6:	2300      	movne	r3, #0
 80107d8:	eba6 0807 	sub.w	r8, r6, r7
 80107dc:	608b      	str	r3, [r1, #8]
 80107de:	f1b8 0f00 	cmp.w	r8, #0
 80107e2:	dd9c      	ble.n	801071e <__sflush_r+0x1a>
 80107e4:	6a21      	ldr	r1, [r4, #32]
 80107e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80107e8:	4643      	mov	r3, r8
 80107ea:	463a      	mov	r2, r7
 80107ec:	4628      	mov	r0, r5
 80107ee:	47b0      	blx	r6
 80107f0:	2800      	cmp	r0, #0
 80107f2:	dc06      	bgt.n	8010802 <__sflush_r+0xfe>
 80107f4:	89a3      	ldrh	r3, [r4, #12]
 80107f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107fa:	81a3      	strh	r3, [r4, #12]
 80107fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010800:	e78e      	b.n	8010720 <__sflush_r+0x1c>
 8010802:	4407      	add	r7, r0
 8010804:	eba8 0800 	sub.w	r8, r8, r0
 8010808:	e7e9      	b.n	80107de <__sflush_r+0xda>
 801080a:	bf00      	nop
 801080c:	20400001 	.word	0x20400001

08010810 <_fflush_r>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	690b      	ldr	r3, [r1, #16]
 8010814:	4605      	mov	r5, r0
 8010816:	460c      	mov	r4, r1
 8010818:	b913      	cbnz	r3, 8010820 <_fflush_r+0x10>
 801081a:	2500      	movs	r5, #0
 801081c:	4628      	mov	r0, r5
 801081e:	bd38      	pop	{r3, r4, r5, pc}
 8010820:	b118      	cbz	r0, 801082a <_fflush_r+0x1a>
 8010822:	6983      	ldr	r3, [r0, #24]
 8010824:	b90b      	cbnz	r3, 801082a <_fflush_r+0x1a>
 8010826:	f000 f887 	bl	8010938 <__sinit>
 801082a:	4b14      	ldr	r3, [pc, #80]	; (801087c <_fflush_r+0x6c>)
 801082c:	429c      	cmp	r4, r3
 801082e:	d11b      	bne.n	8010868 <_fflush_r+0x58>
 8010830:	686c      	ldr	r4, [r5, #4]
 8010832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d0ef      	beq.n	801081a <_fflush_r+0xa>
 801083a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801083c:	07d0      	lsls	r0, r2, #31
 801083e:	d404      	bmi.n	801084a <_fflush_r+0x3a>
 8010840:	0599      	lsls	r1, r3, #22
 8010842:	d402      	bmi.n	801084a <_fflush_r+0x3a>
 8010844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010846:	f000 f915 	bl	8010a74 <__retarget_lock_acquire_recursive>
 801084a:	4628      	mov	r0, r5
 801084c:	4621      	mov	r1, r4
 801084e:	f7ff ff59 	bl	8010704 <__sflush_r>
 8010852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010854:	07da      	lsls	r2, r3, #31
 8010856:	4605      	mov	r5, r0
 8010858:	d4e0      	bmi.n	801081c <_fflush_r+0xc>
 801085a:	89a3      	ldrh	r3, [r4, #12]
 801085c:	059b      	lsls	r3, r3, #22
 801085e:	d4dd      	bmi.n	801081c <_fflush_r+0xc>
 8010860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010862:	f000 f908 	bl	8010a76 <__retarget_lock_release_recursive>
 8010866:	e7d9      	b.n	801081c <_fflush_r+0xc>
 8010868:	4b05      	ldr	r3, [pc, #20]	; (8010880 <_fflush_r+0x70>)
 801086a:	429c      	cmp	r4, r3
 801086c:	d101      	bne.n	8010872 <_fflush_r+0x62>
 801086e:	68ac      	ldr	r4, [r5, #8]
 8010870:	e7df      	b.n	8010832 <_fflush_r+0x22>
 8010872:	4b04      	ldr	r3, [pc, #16]	; (8010884 <_fflush_r+0x74>)
 8010874:	429c      	cmp	r4, r3
 8010876:	bf08      	it	eq
 8010878:	68ec      	ldreq	r4, [r5, #12]
 801087a:	e7da      	b.n	8010832 <_fflush_r+0x22>
 801087c:	0801183c 	.word	0x0801183c
 8010880:	0801185c 	.word	0x0801185c
 8010884:	0801181c 	.word	0x0801181c

08010888 <std>:
 8010888:	2300      	movs	r3, #0
 801088a:	b510      	push	{r4, lr}
 801088c:	4604      	mov	r4, r0
 801088e:	e9c0 3300 	strd	r3, r3, [r0]
 8010892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010896:	6083      	str	r3, [r0, #8]
 8010898:	8181      	strh	r1, [r0, #12]
 801089a:	6643      	str	r3, [r0, #100]	; 0x64
 801089c:	81c2      	strh	r2, [r0, #14]
 801089e:	6183      	str	r3, [r0, #24]
 80108a0:	4619      	mov	r1, r3
 80108a2:	2208      	movs	r2, #8
 80108a4:	305c      	adds	r0, #92	; 0x5c
 80108a6:	f7ff fcb3 	bl	8010210 <memset>
 80108aa:	4b05      	ldr	r3, [pc, #20]	; (80108c0 <std+0x38>)
 80108ac:	6263      	str	r3, [r4, #36]	; 0x24
 80108ae:	4b05      	ldr	r3, [pc, #20]	; (80108c4 <std+0x3c>)
 80108b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80108b2:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <std+0x40>)
 80108b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80108b6:	4b05      	ldr	r3, [pc, #20]	; (80108cc <std+0x44>)
 80108b8:	6224      	str	r4, [r4, #32]
 80108ba:	6323      	str	r3, [r4, #48]	; 0x30
 80108bc:	bd10      	pop	{r4, pc}
 80108be:	bf00      	nop
 80108c0:	0801144d 	.word	0x0801144d
 80108c4:	0801146f 	.word	0x0801146f
 80108c8:	080114a7 	.word	0x080114a7
 80108cc:	080114cb 	.word	0x080114cb

080108d0 <_cleanup_r>:
 80108d0:	4901      	ldr	r1, [pc, #4]	; (80108d8 <_cleanup_r+0x8>)
 80108d2:	f000 b8af 	b.w	8010a34 <_fwalk_reent>
 80108d6:	bf00      	nop
 80108d8:	08010811 	.word	0x08010811

080108dc <__sfmoreglue>:
 80108dc:	b570      	push	{r4, r5, r6, lr}
 80108de:	2268      	movs	r2, #104	; 0x68
 80108e0:	1e4d      	subs	r5, r1, #1
 80108e2:	4355      	muls	r5, r2
 80108e4:	460e      	mov	r6, r1
 80108e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80108ea:	f7ff fd05 	bl	80102f8 <_malloc_r>
 80108ee:	4604      	mov	r4, r0
 80108f0:	b140      	cbz	r0, 8010904 <__sfmoreglue+0x28>
 80108f2:	2100      	movs	r1, #0
 80108f4:	e9c0 1600 	strd	r1, r6, [r0]
 80108f8:	300c      	adds	r0, #12
 80108fa:	60a0      	str	r0, [r4, #8]
 80108fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010900:	f7ff fc86 	bl	8010210 <memset>
 8010904:	4620      	mov	r0, r4
 8010906:	bd70      	pop	{r4, r5, r6, pc}

08010908 <__sfp_lock_acquire>:
 8010908:	4801      	ldr	r0, [pc, #4]	; (8010910 <__sfp_lock_acquire+0x8>)
 801090a:	f000 b8b3 	b.w	8010a74 <__retarget_lock_acquire_recursive>
 801090e:	bf00      	nop
 8010910:	24005a59 	.word	0x24005a59

08010914 <__sfp_lock_release>:
 8010914:	4801      	ldr	r0, [pc, #4]	; (801091c <__sfp_lock_release+0x8>)
 8010916:	f000 b8ae 	b.w	8010a76 <__retarget_lock_release_recursive>
 801091a:	bf00      	nop
 801091c:	24005a59 	.word	0x24005a59

08010920 <__sinit_lock_acquire>:
 8010920:	4801      	ldr	r0, [pc, #4]	; (8010928 <__sinit_lock_acquire+0x8>)
 8010922:	f000 b8a7 	b.w	8010a74 <__retarget_lock_acquire_recursive>
 8010926:	bf00      	nop
 8010928:	24005a5a 	.word	0x24005a5a

0801092c <__sinit_lock_release>:
 801092c:	4801      	ldr	r0, [pc, #4]	; (8010934 <__sinit_lock_release+0x8>)
 801092e:	f000 b8a2 	b.w	8010a76 <__retarget_lock_release_recursive>
 8010932:	bf00      	nop
 8010934:	24005a5a 	.word	0x24005a5a

08010938 <__sinit>:
 8010938:	b510      	push	{r4, lr}
 801093a:	4604      	mov	r4, r0
 801093c:	f7ff fff0 	bl	8010920 <__sinit_lock_acquire>
 8010940:	69a3      	ldr	r3, [r4, #24]
 8010942:	b11b      	cbz	r3, 801094c <__sinit+0x14>
 8010944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010948:	f7ff bff0 	b.w	801092c <__sinit_lock_release>
 801094c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010950:	6523      	str	r3, [r4, #80]	; 0x50
 8010952:	4b13      	ldr	r3, [pc, #76]	; (80109a0 <__sinit+0x68>)
 8010954:	4a13      	ldr	r2, [pc, #76]	; (80109a4 <__sinit+0x6c>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	62a2      	str	r2, [r4, #40]	; 0x28
 801095a:	42a3      	cmp	r3, r4
 801095c:	bf04      	itt	eq
 801095e:	2301      	moveq	r3, #1
 8010960:	61a3      	streq	r3, [r4, #24]
 8010962:	4620      	mov	r0, r4
 8010964:	f000 f820 	bl	80109a8 <__sfp>
 8010968:	6060      	str	r0, [r4, #4]
 801096a:	4620      	mov	r0, r4
 801096c:	f000 f81c 	bl	80109a8 <__sfp>
 8010970:	60a0      	str	r0, [r4, #8]
 8010972:	4620      	mov	r0, r4
 8010974:	f000 f818 	bl	80109a8 <__sfp>
 8010978:	2200      	movs	r2, #0
 801097a:	60e0      	str	r0, [r4, #12]
 801097c:	2104      	movs	r1, #4
 801097e:	6860      	ldr	r0, [r4, #4]
 8010980:	f7ff ff82 	bl	8010888 <std>
 8010984:	68a0      	ldr	r0, [r4, #8]
 8010986:	2201      	movs	r2, #1
 8010988:	2109      	movs	r1, #9
 801098a:	f7ff ff7d 	bl	8010888 <std>
 801098e:	68e0      	ldr	r0, [r4, #12]
 8010990:	2202      	movs	r2, #2
 8010992:	2112      	movs	r1, #18
 8010994:	f7ff ff78 	bl	8010888 <std>
 8010998:	2301      	movs	r3, #1
 801099a:	61a3      	str	r3, [r4, #24]
 801099c:	e7d2      	b.n	8010944 <__sinit+0xc>
 801099e:	bf00      	nop
 80109a0:	08011818 	.word	0x08011818
 80109a4:	080108d1 	.word	0x080108d1

080109a8 <__sfp>:
 80109a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109aa:	4607      	mov	r7, r0
 80109ac:	f7ff ffac 	bl	8010908 <__sfp_lock_acquire>
 80109b0:	4b1e      	ldr	r3, [pc, #120]	; (8010a2c <__sfp+0x84>)
 80109b2:	681e      	ldr	r6, [r3, #0]
 80109b4:	69b3      	ldr	r3, [r6, #24]
 80109b6:	b913      	cbnz	r3, 80109be <__sfp+0x16>
 80109b8:	4630      	mov	r0, r6
 80109ba:	f7ff ffbd 	bl	8010938 <__sinit>
 80109be:	3648      	adds	r6, #72	; 0x48
 80109c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80109c4:	3b01      	subs	r3, #1
 80109c6:	d503      	bpl.n	80109d0 <__sfp+0x28>
 80109c8:	6833      	ldr	r3, [r6, #0]
 80109ca:	b30b      	cbz	r3, 8010a10 <__sfp+0x68>
 80109cc:	6836      	ldr	r6, [r6, #0]
 80109ce:	e7f7      	b.n	80109c0 <__sfp+0x18>
 80109d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80109d4:	b9d5      	cbnz	r5, 8010a0c <__sfp+0x64>
 80109d6:	4b16      	ldr	r3, [pc, #88]	; (8010a30 <__sfp+0x88>)
 80109d8:	60e3      	str	r3, [r4, #12]
 80109da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80109de:	6665      	str	r5, [r4, #100]	; 0x64
 80109e0:	f000 f847 	bl	8010a72 <__retarget_lock_init_recursive>
 80109e4:	f7ff ff96 	bl	8010914 <__sfp_lock_release>
 80109e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80109ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80109f0:	6025      	str	r5, [r4, #0]
 80109f2:	61a5      	str	r5, [r4, #24]
 80109f4:	2208      	movs	r2, #8
 80109f6:	4629      	mov	r1, r5
 80109f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80109fc:	f7ff fc08 	bl	8010210 <memset>
 8010a00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a08:	4620      	mov	r0, r4
 8010a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a0c:	3468      	adds	r4, #104	; 0x68
 8010a0e:	e7d9      	b.n	80109c4 <__sfp+0x1c>
 8010a10:	2104      	movs	r1, #4
 8010a12:	4638      	mov	r0, r7
 8010a14:	f7ff ff62 	bl	80108dc <__sfmoreglue>
 8010a18:	4604      	mov	r4, r0
 8010a1a:	6030      	str	r0, [r6, #0]
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d1d5      	bne.n	80109cc <__sfp+0x24>
 8010a20:	f7ff ff78 	bl	8010914 <__sfp_lock_release>
 8010a24:	230c      	movs	r3, #12
 8010a26:	603b      	str	r3, [r7, #0]
 8010a28:	e7ee      	b.n	8010a08 <__sfp+0x60>
 8010a2a:	bf00      	nop
 8010a2c:	08011818 	.word	0x08011818
 8010a30:	ffff0001 	.word	0xffff0001

08010a34 <_fwalk_reent>:
 8010a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a38:	4606      	mov	r6, r0
 8010a3a:	4688      	mov	r8, r1
 8010a3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a40:	2700      	movs	r7, #0
 8010a42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a46:	f1b9 0901 	subs.w	r9, r9, #1
 8010a4a:	d505      	bpl.n	8010a58 <_fwalk_reent+0x24>
 8010a4c:	6824      	ldr	r4, [r4, #0]
 8010a4e:	2c00      	cmp	r4, #0
 8010a50:	d1f7      	bne.n	8010a42 <_fwalk_reent+0xe>
 8010a52:	4638      	mov	r0, r7
 8010a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a58:	89ab      	ldrh	r3, [r5, #12]
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d907      	bls.n	8010a6e <_fwalk_reent+0x3a>
 8010a5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a62:	3301      	adds	r3, #1
 8010a64:	d003      	beq.n	8010a6e <_fwalk_reent+0x3a>
 8010a66:	4629      	mov	r1, r5
 8010a68:	4630      	mov	r0, r6
 8010a6a:	47c0      	blx	r8
 8010a6c:	4307      	orrs	r7, r0
 8010a6e:	3568      	adds	r5, #104	; 0x68
 8010a70:	e7e9      	b.n	8010a46 <_fwalk_reent+0x12>

08010a72 <__retarget_lock_init_recursive>:
 8010a72:	4770      	bx	lr

08010a74 <__retarget_lock_acquire_recursive>:
 8010a74:	4770      	bx	lr

08010a76 <__retarget_lock_release_recursive>:
 8010a76:	4770      	bx	lr

08010a78 <__swhatbuf_r>:
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	460e      	mov	r6, r1
 8010a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a80:	2900      	cmp	r1, #0
 8010a82:	b096      	sub	sp, #88	; 0x58
 8010a84:	4614      	mov	r4, r2
 8010a86:	461d      	mov	r5, r3
 8010a88:	da08      	bge.n	8010a9c <__swhatbuf_r+0x24>
 8010a8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	602a      	str	r2, [r5, #0]
 8010a92:	061a      	lsls	r2, r3, #24
 8010a94:	d410      	bmi.n	8010ab8 <__swhatbuf_r+0x40>
 8010a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a9a:	e00e      	b.n	8010aba <__swhatbuf_r+0x42>
 8010a9c:	466a      	mov	r2, sp
 8010a9e:	f000 fd3b 	bl	8011518 <_fstat_r>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	dbf1      	blt.n	8010a8a <__swhatbuf_r+0x12>
 8010aa6:	9a01      	ldr	r2, [sp, #4]
 8010aa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010aac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ab0:	425a      	negs	r2, r3
 8010ab2:	415a      	adcs	r2, r3
 8010ab4:	602a      	str	r2, [r5, #0]
 8010ab6:	e7ee      	b.n	8010a96 <__swhatbuf_r+0x1e>
 8010ab8:	2340      	movs	r3, #64	; 0x40
 8010aba:	2000      	movs	r0, #0
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	b016      	add	sp, #88	; 0x58
 8010ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ac4 <__smakebuf_r>:
 8010ac4:	898b      	ldrh	r3, [r1, #12]
 8010ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ac8:	079d      	lsls	r5, r3, #30
 8010aca:	4606      	mov	r6, r0
 8010acc:	460c      	mov	r4, r1
 8010ace:	d507      	bpl.n	8010ae0 <__smakebuf_r+0x1c>
 8010ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	6123      	str	r3, [r4, #16]
 8010ad8:	2301      	movs	r3, #1
 8010ada:	6163      	str	r3, [r4, #20]
 8010adc:	b002      	add	sp, #8
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
 8010ae0:	ab01      	add	r3, sp, #4
 8010ae2:	466a      	mov	r2, sp
 8010ae4:	f7ff ffc8 	bl	8010a78 <__swhatbuf_r>
 8010ae8:	9900      	ldr	r1, [sp, #0]
 8010aea:	4605      	mov	r5, r0
 8010aec:	4630      	mov	r0, r6
 8010aee:	f7ff fc03 	bl	80102f8 <_malloc_r>
 8010af2:	b948      	cbnz	r0, 8010b08 <__smakebuf_r+0x44>
 8010af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010af8:	059a      	lsls	r2, r3, #22
 8010afa:	d4ef      	bmi.n	8010adc <__smakebuf_r+0x18>
 8010afc:	f023 0303 	bic.w	r3, r3, #3
 8010b00:	f043 0302 	orr.w	r3, r3, #2
 8010b04:	81a3      	strh	r3, [r4, #12]
 8010b06:	e7e3      	b.n	8010ad0 <__smakebuf_r+0xc>
 8010b08:	4b0d      	ldr	r3, [pc, #52]	; (8010b40 <__smakebuf_r+0x7c>)
 8010b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	6020      	str	r0, [r4, #0]
 8010b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b14:	81a3      	strh	r3, [r4, #12]
 8010b16:	9b00      	ldr	r3, [sp, #0]
 8010b18:	6163      	str	r3, [r4, #20]
 8010b1a:	9b01      	ldr	r3, [sp, #4]
 8010b1c:	6120      	str	r0, [r4, #16]
 8010b1e:	b15b      	cbz	r3, 8010b38 <__smakebuf_r+0x74>
 8010b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b24:	4630      	mov	r0, r6
 8010b26:	f000 fd09 	bl	801153c <_isatty_r>
 8010b2a:	b128      	cbz	r0, 8010b38 <__smakebuf_r+0x74>
 8010b2c:	89a3      	ldrh	r3, [r4, #12]
 8010b2e:	f023 0303 	bic.w	r3, r3, #3
 8010b32:	f043 0301 	orr.w	r3, r3, #1
 8010b36:	81a3      	strh	r3, [r4, #12]
 8010b38:	89a0      	ldrh	r0, [r4, #12]
 8010b3a:	4305      	orrs	r5, r0
 8010b3c:	81a5      	strh	r5, [r4, #12]
 8010b3e:	e7cd      	b.n	8010adc <__smakebuf_r+0x18>
 8010b40:	080108d1 	.word	0x080108d1

08010b44 <__malloc_lock>:
 8010b44:	4801      	ldr	r0, [pc, #4]	; (8010b4c <__malloc_lock+0x8>)
 8010b46:	f7ff bf95 	b.w	8010a74 <__retarget_lock_acquire_recursive>
 8010b4a:	bf00      	nop
 8010b4c:	24005a58 	.word	0x24005a58

08010b50 <__malloc_unlock>:
 8010b50:	4801      	ldr	r0, [pc, #4]	; (8010b58 <__malloc_unlock+0x8>)
 8010b52:	f7ff bf90 	b.w	8010a76 <__retarget_lock_release_recursive>
 8010b56:	bf00      	nop
 8010b58:	24005a58 	.word	0x24005a58

08010b5c <_realloc_r>:
 8010b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b60:	4680      	mov	r8, r0
 8010b62:	4614      	mov	r4, r2
 8010b64:	460e      	mov	r6, r1
 8010b66:	b921      	cbnz	r1, 8010b72 <_realloc_r+0x16>
 8010b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b6c:	4611      	mov	r1, r2
 8010b6e:	f7ff bbc3 	b.w	80102f8 <_malloc_r>
 8010b72:	b92a      	cbnz	r2, 8010b80 <_realloc_r+0x24>
 8010b74:	f7ff fb54 	bl	8010220 <_free_r>
 8010b78:	4625      	mov	r5, r4
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b80:	f000 fd18 	bl	80115b4 <_malloc_usable_size_r>
 8010b84:	4284      	cmp	r4, r0
 8010b86:	4607      	mov	r7, r0
 8010b88:	d802      	bhi.n	8010b90 <_realloc_r+0x34>
 8010b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b8e:	d812      	bhi.n	8010bb6 <_realloc_r+0x5a>
 8010b90:	4621      	mov	r1, r4
 8010b92:	4640      	mov	r0, r8
 8010b94:	f7ff fbb0 	bl	80102f8 <_malloc_r>
 8010b98:	4605      	mov	r5, r0
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d0ed      	beq.n	8010b7a <_realloc_r+0x1e>
 8010b9e:	42bc      	cmp	r4, r7
 8010ba0:	4622      	mov	r2, r4
 8010ba2:	4631      	mov	r1, r6
 8010ba4:	bf28      	it	cs
 8010ba6:	463a      	movcs	r2, r7
 8010ba8:	f7ff fb24 	bl	80101f4 <memcpy>
 8010bac:	4631      	mov	r1, r6
 8010bae:	4640      	mov	r0, r8
 8010bb0:	f7ff fb36 	bl	8010220 <_free_r>
 8010bb4:	e7e1      	b.n	8010b7a <_realloc_r+0x1e>
 8010bb6:	4635      	mov	r5, r6
 8010bb8:	e7df      	b.n	8010b7a <_realloc_r+0x1e>

08010bba <__ssputs_r>:
 8010bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bbe:	688e      	ldr	r6, [r1, #8]
 8010bc0:	429e      	cmp	r6, r3
 8010bc2:	4682      	mov	sl, r0
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	4690      	mov	r8, r2
 8010bc8:	461f      	mov	r7, r3
 8010bca:	d838      	bhi.n	8010c3e <__ssputs_r+0x84>
 8010bcc:	898a      	ldrh	r2, [r1, #12]
 8010bce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010bd2:	d032      	beq.n	8010c3a <__ssputs_r+0x80>
 8010bd4:	6825      	ldr	r5, [r4, #0]
 8010bd6:	6909      	ldr	r1, [r1, #16]
 8010bd8:	eba5 0901 	sub.w	r9, r5, r1
 8010bdc:	6965      	ldr	r5, [r4, #20]
 8010bde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010be2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010be6:	3301      	adds	r3, #1
 8010be8:	444b      	add	r3, r9
 8010bea:	106d      	asrs	r5, r5, #1
 8010bec:	429d      	cmp	r5, r3
 8010bee:	bf38      	it	cc
 8010bf0:	461d      	movcc	r5, r3
 8010bf2:	0553      	lsls	r3, r2, #21
 8010bf4:	d531      	bpl.n	8010c5a <__ssputs_r+0xa0>
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	f7ff fb7e 	bl	80102f8 <_malloc_r>
 8010bfc:	4606      	mov	r6, r0
 8010bfe:	b950      	cbnz	r0, 8010c16 <__ssputs_r+0x5c>
 8010c00:	230c      	movs	r3, #12
 8010c02:	f8ca 3000 	str.w	r3, [sl]
 8010c06:	89a3      	ldrh	r3, [r4, #12]
 8010c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c0c:	81a3      	strh	r3, [r4, #12]
 8010c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c16:	6921      	ldr	r1, [r4, #16]
 8010c18:	464a      	mov	r2, r9
 8010c1a:	f7ff faeb 	bl	80101f4 <memcpy>
 8010c1e:	89a3      	ldrh	r3, [r4, #12]
 8010c20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c28:	81a3      	strh	r3, [r4, #12]
 8010c2a:	6126      	str	r6, [r4, #16]
 8010c2c:	6165      	str	r5, [r4, #20]
 8010c2e:	444e      	add	r6, r9
 8010c30:	eba5 0509 	sub.w	r5, r5, r9
 8010c34:	6026      	str	r6, [r4, #0]
 8010c36:	60a5      	str	r5, [r4, #8]
 8010c38:	463e      	mov	r6, r7
 8010c3a:	42be      	cmp	r6, r7
 8010c3c:	d900      	bls.n	8010c40 <__ssputs_r+0x86>
 8010c3e:	463e      	mov	r6, r7
 8010c40:	6820      	ldr	r0, [r4, #0]
 8010c42:	4632      	mov	r2, r6
 8010c44:	4641      	mov	r1, r8
 8010c46:	f000 fc9b 	bl	8011580 <memmove>
 8010c4a:	68a3      	ldr	r3, [r4, #8]
 8010c4c:	1b9b      	subs	r3, r3, r6
 8010c4e:	60a3      	str	r3, [r4, #8]
 8010c50:	6823      	ldr	r3, [r4, #0]
 8010c52:	4433      	add	r3, r6
 8010c54:	6023      	str	r3, [r4, #0]
 8010c56:	2000      	movs	r0, #0
 8010c58:	e7db      	b.n	8010c12 <__ssputs_r+0x58>
 8010c5a:	462a      	mov	r2, r5
 8010c5c:	f7ff ff7e 	bl	8010b5c <_realloc_r>
 8010c60:	4606      	mov	r6, r0
 8010c62:	2800      	cmp	r0, #0
 8010c64:	d1e1      	bne.n	8010c2a <__ssputs_r+0x70>
 8010c66:	6921      	ldr	r1, [r4, #16]
 8010c68:	4650      	mov	r0, sl
 8010c6a:	f7ff fad9 	bl	8010220 <_free_r>
 8010c6e:	e7c7      	b.n	8010c00 <__ssputs_r+0x46>

08010c70 <_svfiprintf_r>:
 8010c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	4698      	mov	r8, r3
 8010c76:	898b      	ldrh	r3, [r1, #12]
 8010c78:	061b      	lsls	r3, r3, #24
 8010c7a:	b09d      	sub	sp, #116	; 0x74
 8010c7c:	4607      	mov	r7, r0
 8010c7e:	460d      	mov	r5, r1
 8010c80:	4614      	mov	r4, r2
 8010c82:	d50e      	bpl.n	8010ca2 <_svfiprintf_r+0x32>
 8010c84:	690b      	ldr	r3, [r1, #16]
 8010c86:	b963      	cbnz	r3, 8010ca2 <_svfiprintf_r+0x32>
 8010c88:	2140      	movs	r1, #64	; 0x40
 8010c8a:	f7ff fb35 	bl	80102f8 <_malloc_r>
 8010c8e:	6028      	str	r0, [r5, #0]
 8010c90:	6128      	str	r0, [r5, #16]
 8010c92:	b920      	cbnz	r0, 8010c9e <_svfiprintf_r+0x2e>
 8010c94:	230c      	movs	r3, #12
 8010c96:	603b      	str	r3, [r7, #0]
 8010c98:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9c:	e0d1      	b.n	8010e42 <_svfiprintf_r+0x1d2>
 8010c9e:	2340      	movs	r3, #64	; 0x40
 8010ca0:	616b      	str	r3, [r5, #20]
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ca6:	2320      	movs	r3, #32
 8010ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cb0:	2330      	movs	r3, #48	; 0x30
 8010cb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e5c <_svfiprintf_r+0x1ec>
 8010cb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cba:	f04f 0901 	mov.w	r9, #1
 8010cbe:	4623      	mov	r3, r4
 8010cc0:	469a      	mov	sl, r3
 8010cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cc6:	b10a      	cbz	r2, 8010ccc <_svfiprintf_r+0x5c>
 8010cc8:	2a25      	cmp	r2, #37	; 0x25
 8010cca:	d1f9      	bne.n	8010cc0 <_svfiprintf_r+0x50>
 8010ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8010cd0:	d00b      	beq.n	8010cea <_svfiprintf_r+0x7a>
 8010cd2:	465b      	mov	r3, fp
 8010cd4:	4622      	mov	r2, r4
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	4638      	mov	r0, r7
 8010cda:	f7ff ff6e 	bl	8010bba <__ssputs_r>
 8010cde:	3001      	adds	r0, #1
 8010ce0:	f000 80aa 	beq.w	8010e38 <_svfiprintf_r+0x1c8>
 8010ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ce6:	445a      	add	r2, fp
 8010ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8010cea:	f89a 3000 	ldrb.w	r3, [sl]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f000 80a2 	beq.w	8010e38 <_svfiprintf_r+0x1c8>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cfe:	f10a 0a01 	add.w	sl, sl, #1
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	9307      	str	r3, [sp, #28]
 8010d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8010d0c:	4654      	mov	r4, sl
 8010d0e:	2205      	movs	r2, #5
 8010d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d14:	4851      	ldr	r0, [pc, #324]	; (8010e5c <_svfiprintf_r+0x1ec>)
 8010d16:	f7ef faeb 	bl	80002f0 <memchr>
 8010d1a:	9a04      	ldr	r2, [sp, #16]
 8010d1c:	b9d8      	cbnz	r0, 8010d56 <_svfiprintf_r+0xe6>
 8010d1e:	06d0      	lsls	r0, r2, #27
 8010d20:	bf44      	itt	mi
 8010d22:	2320      	movmi	r3, #32
 8010d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d28:	0711      	lsls	r1, r2, #28
 8010d2a:	bf44      	itt	mi
 8010d2c:	232b      	movmi	r3, #43	; 0x2b
 8010d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d32:	f89a 3000 	ldrb.w	r3, [sl]
 8010d36:	2b2a      	cmp	r3, #42	; 0x2a
 8010d38:	d015      	beq.n	8010d66 <_svfiprintf_r+0xf6>
 8010d3a:	9a07      	ldr	r2, [sp, #28]
 8010d3c:	4654      	mov	r4, sl
 8010d3e:	2000      	movs	r0, #0
 8010d40:	f04f 0c0a 	mov.w	ip, #10
 8010d44:	4621      	mov	r1, r4
 8010d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d4a:	3b30      	subs	r3, #48	; 0x30
 8010d4c:	2b09      	cmp	r3, #9
 8010d4e:	d94e      	bls.n	8010dee <_svfiprintf_r+0x17e>
 8010d50:	b1b0      	cbz	r0, 8010d80 <_svfiprintf_r+0x110>
 8010d52:	9207      	str	r2, [sp, #28]
 8010d54:	e014      	b.n	8010d80 <_svfiprintf_r+0x110>
 8010d56:	eba0 0308 	sub.w	r3, r0, r8
 8010d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	9304      	str	r3, [sp, #16]
 8010d62:	46a2      	mov	sl, r4
 8010d64:	e7d2      	b.n	8010d0c <_svfiprintf_r+0x9c>
 8010d66:	9b03      	ldr	r3, [sp, #12]
 8010d68:	1d19      	adds	r1, r3, #4
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	9103      	str	r1, [sp, #12]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	bfbb      	ittet	lt
 8010d72:	425b      	neglt	r3, r3
 8010d74:	f042 0202 	orrlt.w	r2, r2, #2
 8010d78:	9307      	strge	r3, [sp, #28]
 8010d7a:	9307      	strlt	r3, [sp, #28]
 8010d7c:	bfb8      	it	lt
 8010d7e:	9204      	strlt	r2, [sp, #16]
 8010d80:	7823      	ldrb	r3, [r4, #0]
 8010d82:	2b2e      	cmp	r3, #46	; 0x2e
 8010d84:	d10c      	bne.n	8010da0 <_svfiprintf_r+0x130>
 8010d86:	7863      	ldrb	r3, [r4, #1]
 8010d88:	2b2a      	cmp	r3, #42	; 0x2a
 8010d8a:	d135      	bne.n	8010df8 <_svfiprintf_r+0x188>
 8010d8c:	9b03      	ldr	r3, [sp, #12]
 8010d8e:	1d1a      	adds	r2, r3, #4
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	9203      	str	r2, [sp, #12]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	bfb8      	it	lt
 8010d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d9c:	3402      	adds	r4, #2
 8010d9e:	9305      	str	r3, [sp, #20]
 8010da0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010e6c <_svfiprintf_r+0x1fc>
 8010da4:	7821      	ldrb	r1, [r4, #0]
 8010da6:	2203      	movs	r2, #3
 8010da8:	4650      	mov	r0, sl
 8010daa:	f7ef faa1 	bl	80002f0 <memchr>
 8010dae:	b140      	cbz	r0, 8010dc2 <_svfiprintf_r+0x152>
 8010db0:	2340      	movs	r3, #64	; 0x40
 8010db2:	eba0 000a 	sub.w	r0, r0, sl
 8010db6:	fa03 f000 	lsl.w	r0, r3, r0
 8010dba:	9b04      	ldr	r3, [sp, #16]
 8010dbc:	4303      	orrs	r3, r0
 8010dbe:	3401      	adds	r4, #1
 8010dc0:	9304      	str	r3, [sp, #16]
 8010dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc6:	4826      	ldr	r0, [pc, #152]	; (8010e60 <_svfiprintf_r+0x1f0>)
 8010dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dcc:	2206      	movs	r2, #6
 8010dce:	f7ef fa8f 	bl	80002f0 <memchr>
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d038      	beq.n	8010e48 <_svfiprintf_r+0x1d8>
 8010dd6:	4b23      	ldr	r3, [pc, #140]	; (8010e64 <_svfiprintf_r+0x1f4>)
 8010dd8:	bb1b      	cbnz	r3, 8010e22 <_svfiprintf_r+0x1b2>
 8010dda:	9b03      	ldr	r3, [sp, #12]
 8010ddc:	3307      	adds	r3, #7
 8010dde:	f023 0307 	bic.w	r3, r3, #7
 8010de2:	3308      	adds	r3, #8
 8010de4:	9303      	str	r3, [sp, #12]
 8010de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010de8:	4433      	add	r3, r6
 8010dea:	9309      	str	r3, [sp, #36]	; 0x24
 8010dec:	e767      	b.n	8010cbe <_svfiprintf_r+0x4e>
 8010dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8010df2:	460c      	mov	r4, r1
 8010df4:	2001      	movs	r0, #1
 8010df6:	e7a5      	b.n	8010d44 <_svfiprintf_r+0xd4>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	3401      	adds	r4, #1
 8010dfc:	9305      	str	r3, [sp, #20]
 8010dfe:	4619      	mov	r1, r3
 8010e00:	f04f 0c0a 	mov.w	ip, #10
 8010e04:	4620      	mov	r0, r4
 8010e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e0a:	3a30      	subs	r2, #48	; 0x30
 8010e0c:	2a09      	cmp	r2, #9
 8010e0e:	d903      	bls.n	8010e18 <_svfiprintf_r+0x1a8>
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d0c5      	beq.n	8010da0 <_svfiprintf_r+0x130>
 8010e14:	9105      	str	r1, [sp, #20]
 8010e16:	e7c3      	b.n	8010da0 <_svfiprintf_r+0x130>
 8010e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e7f0      	b.n	8010e04 <_svfiprintf_r+0x194>
 8010e22:	ab03      	add	r3, sp, #12
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	462a      	mov	r2, r5
 8010e28:	4b0f      	ldr	r3, [pc, #60]	; (8010e68 <_svfiprintf_r+0x1f8>)
 8010e2a:	a904      	add	r1, sp, #16
 8010e2c:	4638      	mov	r0, r7
 8010e2e:	f3af 8000 	nop.w
 8010e32:	1c42      	adds	r2, r0, #1
 8010e34:	4606      	mov	r6, r0
 8010e36:	d1d6      	bne.n	8010de6 <_svfiprintf_r+0x176>
 8010e38:	89ab      	ldrh	r3, [r5, #12]
 8010e3a:	065b      	lsls	r3, r3, #25
 8010e3c:	f53f af2c 	bmi.w	8010c98 <_svfiprintf_r+0x28>
 8010e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e42:	b01d      	add	sp, #116	; 0x74
 8010e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e48:	ab03      	add	r3, sp, #12
 8010e4a:	9300      	str	r3, [sp, #0]
 8010e4c:	462a      	mov	r2, r5
 8010e4e:	4b06      	ldr	r3, [pc, #24]	; (8010e68 <_svfiprintf_r+0x1f8>)
 8010e50:	a904      	add	r1, sp, #16
 8010e52:	4638      	mov	r0, r7
 8010e54:	f000 f9d4 	bl	8011200 <_printf_i>
 8010e58:	e7eb      	b.n	8010e32 <_svfiprintf_r+0x1c2>
 8010e5a:	bf00      	nop
 8010e5c:	0801187c 	.word	0x0801187c
 8010e60:	08011886 	.word	0x08011886
 8010e64:	00000000 	.word	0x00000000
 8010e68:	08010bbb 	.word	0x08010bbb
 8010e6c:	08011882 	.word	0x08011882

08010e70 <__sfputc_r>:
 8010e70:	6893      	ldr	r3, [r2, #8]
 8010e72:	3b01      	subs	r3, #1
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	b410      	push	{r4}
 8010e78:	6093      	str	r3, [r2, #8]
 8010e7a:	da08      	bge.n	8010e8e <__sfputc_r+0x1e>
 8010e7c:	6994      	ldr	r4, [r2, #24]
 8010e7e:	42a3      	cmp	r3, r4
 8010e80:	db01      	blt.n	8010e86 <__sfputc_r+0x16>
 8010e82:	290a      	cmp	r1, #10
 8010e84:	d103      	bne.n	8010e8e <__sfputc_r+0x1e>
 8010e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e8a:	f7ff bb7b 	b.w	8010584 <__swbuf_r>
 8010e8e:	6813      	ldr	r3, [r2, #0]
 8010e90:	1c58      	adds	r0, r3, #1
 8010e92:	6010      	str	r0, [r2, #0]
 8010e94:	7019      	strb	r1, [r3, #0]
 8010e96:	4608      	mov	r0, r1
 8010e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e9c:	4770      	bx	lr

08010e9e <__sfputs_r>:
 8010e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	460f      	mov	r7, r1
 8010ea4:	4614      	mov	r4, r2
 8010ea6:	18d5      	adds	r5, r2, r3
 8010ea8:	42ac      	cmp	r4, r5
 8010eaa:	d101      	bne.n	8010eb0 <__sfputs_r+0x12>
 8010eac:	2000      	movs	r0, #0
 8010eae:	e007      	b.n	8010ec0 <__sfputs_r+0x22>
 8010eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eb4:	463a      	mov	r2, r7
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7ff ffda 	bl	8010e70 <__sfputc_r>
 8010ebc:	1c43      	adds	r3, r0, #1
 8010ebe:	d1f3      	bne.n	8010ea8 <__sfputs_r+0xa>
 8010ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ec4 <_vfiprintf_r>:
 8010ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec8:	460d      	mov	r5, r1
 8010eca:	b09d      	sub	sp, #116	; 0x74
 8010ecc:	4614      	mov	r4, r2
 8010ece:	4698      	mov	r8, r3
 8010ed0:	4606      	mov	r6, r0
 8010ed2:	b118      	cbz	r0, 8010edc <_vfiprintf_r+0x18>
 8010ed4:	6983      	ldr	r3, [r0, #24]
 8010ed6:	b90b      	cbnz	r3, 8010edc <_vfiprintf_r+0x18>
 8010ed8:	f7ff fd2e 	bl	8010938 <__sinit>
 8010edc:	4b89      	ldr	r3, [pc, #548]	; (8011104 <_vfiprintf_r+0x240>)
 8010ede:	429d      	cmp	r5, r3
 8010ee0:	d11b      	bne.n	8010f1a <_vfiprintf_r+0x56>
 8010ee2:	6875      	ldr	r5, [r6, #4]
 8010ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ee6:	07d9      	lsls	r1, r3, #31
 8010ee8:	d405      	bmi.n	8010ef6 <_vfiprintf_r+0x32>
 8010eea:	89ab      	ldrh	r3, [r5, #12]
 8010eec:	059a      	lsls	r2, r3, #22
 8010eee:	d402      	bmi.n	8010ef6 <_vfiprintf_r+0x32>
 8010ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ef2:	f7ff fdbf 	bl	8010a74 <__retarget_lock_acquire_recursive>
 8010ef6:	89ab      	ldrh	r3, [r5, #12]
 8010ef8:	071b      	lsls	r3, r3, #28
 8010efa:	d501      	bpl.n	8010f00 <_vfiprintf_r+0x3c>
 8010efc:	692b      	ldr	r3, [r5, #16]
 8010efe:	b9eb      	cbnz	r3, 8010f3c <_vfiprintf_r+0x78>
 8010f00:	4629      	mov	r1, r5
 8010f02:	4630      	mov	r0, r6
 8010f04:	f7ff fb90 	bl	8010628 <__swsetup_r>
 8010f08:	b1c0      	cbz	r0, 8010f3c <_vfiprintf_r+0x78>
 8010f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f0c:	07dc      	lsls	r4, r3, #31
 8010f0e:	d50e      	bpl.n	8010f2e <_vfiprintf_r+0x6a>
 8010f10:	f04f 30ff 	mov.w	r0, #4294967295
 8010f14:	b01d      	add	sp, #116	; 0x74
 8010f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1a:	4b7b      	ldr	r3, [pc, #492]	; (8011108 <_vfiprintf_r+0x244>)
 8010f1c:	429d      	cmp	r5, r3
 8010f1e:	d101      	bne.n	8010f24 <_vfiprintf_r+0x60>
 8010f20:	68b5      	ldr	r5, [r6, #8]
 8010f22:	e7df      	b.n	8010ee4 <_vfiprintf_r+0x20>
 8010f24:	4b79      	ldr	r3, [pc, #484]	; (801110c <_vfiprintf_r+0x248>)
 8010f26:	429d      	cmp	r5, r3
 8010f28:	bf08      	it	eq
 8010f2a:	68f5      	ldreq	r5, [r6, #12]
 8010f2c:	e7da      	b.n	8010ee4 <_vfiprintf_r+0x20>
 8010f2e:	89ab      	ldrh	r3, [r5, #12]
 8010f30:	0598      	lsls	r0, r3, #22
 8010f32:	d4ed      	bmi.n	8010f10 <_vfiprintf_r+0x4c>
 8010f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f36:	f7ff fd9e 	bl	8010a76 <__retarget_lock_release_recursive>
 8010f3a:	e7e9      	b.n	8010f10 <_vfiprintf_r+0x4c>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f40:	2320      	movs	r3, #32
 8010f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f4a:	2330      	movs	r3, #48	; 0x30
 8010f4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011110 <_vfiprintf_r+0x24c>
 8010f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f54:	f04f 0901 	mov.w	r9, #1
 8010f58:	4623      	mov	r3, r4
 8010f5a:	469a      	mov	sl, r3
 8010f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f60:	b10a      	cbz	r2, 8010f66 <_vfiprintf_r+0xa2>
 8010f62:	2a25      	cmp	r2, #37	; 0x25
 8010f64:	d1f9      	bne.n	8010f5a <_vfiprintf_r+0x96>
 8010f66:	ebba 0b04 	subs.w	fp, sl, r4
 8010f6a:	d00b      	beq.n	8010f84 <_vfiprintf_r+0xc0>
 8010f6c:	465b      	mov	r3, fp
 8010f6e:	4622      	mov	r2, r4
 8010f70:	4629      	mov	r1, r5
 8010f72:	4630      	mov	r0, r6
 8010f74:	f7ff ff93 	bl	8010e9e <__sfputs_r>
 8010f78:	3001      	adds	r0, #1
 8010f7a:	f000 80aa 	beq.w	80110d2 <_vfiprintf_r+0x20e>
 8010f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f80:	445a      	add	r2, fp
 8010f82:	9209      	str	r2, [sp, #36]	; 0x24
 8010f84:	f89a 3000 	ldrb.w	r3, [sl]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 80a2 	beq.w	80110d2 <_vfiprintf_r+0x20e>
 8010f8e:	2300      	movs	r3, #0
 8010f90:	f04f 32ff 	mov.w	r2, #4294967295
 8010f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f98:	f10a 0a01 	add.w	sl, sl, #1
 8010f9c:	9304      	str	r3, [sp, #16]
 8010f9e:	9307      	str	r3, [sp, #28]
 8010fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8010fa6:	4654      	mov	r4, sl
 8010fa8:	2205      	movs	r2, #5
 8010faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fae:	4858      	ldr	r0, [pc, #352]	; (8011110 <_vfiprintf_r+0x24c>)
 8010fb0:	f7ef f99e 	bl	80002f0 <memchr>
 8010fb4:	9a04      	ldr	r2, [sp, #16]
 8010fb6:	b9d8      	cbnz	r0, 8010ff0 <_vfiprintf_r+0x12c>
 8010fb8:	06d1      	lsls	r1, r2, #27
 8010fba:	bf44      	itt	mi
 8010fbc:	2320      	movmi	r3, #32
 8010fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fc2:	0713      	lsls	r3, r2, #28
 8010fc4:	bf44      	itt	mi
 8010fc6:	232b      	movmi	r3, #43	; 0x2b
 8010fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8010fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8010fd2:	d015      	beq.n	8011000 <_vfiprintf_r+0x13c>
 8010fd4:	9a07      	ldr	r2, [sp, #28]
 8010fd6:	4654      	mov	r4, sl
 8010fd8:	2000      	movs	r0, #0
 8010fda:	f04f 0c0a 	mov.w	ip, #10
 8010fde:	4621      	mov	r1, r4
 8010fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fe4:	3b30      	subs	r3, #48	; 0x30
 8010fe6:	2b09      	cmp	r3, #9
 8010fe8:	d94e      	bls.n	8011088 <_vfiprintf_r+0x1c4>
 8010fea:	b1b0      	cbz	r0, 801101a <_vfiprintf_r+0x156>
 8010fec:	9207      	str	r2, [sp, #28]
 8010fee:	e014      	b.n	801101a <_vfiprintf_r+0x156>
 8010ff0:	eba0 0308 	sub.w	r3, r0, r8
 8010ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	9304      	str	r3, [sp, #16]
 8010ffc:	46a2      	mov	sl, r4
 8010ffe:	e7d2      	b.n	8010fa6 <_vfiprintf_r+0xe2>
 8011000:	9b03      	ldr	r3, [sp, #12]
 8011002:	1d19      	adds	r1, r3, #4
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	9103      	str	r1, [sp, #12]
 8011008:	2b00      	cmp	r3, #0
 801100a:	bfbb      	ittet	lt
 801100c:	425b      	neglt	r3, r3
 801100e:	f042 0202 	orrlt.w	r2, r2, #2
 8011012:	9307      	strge	r3, [sp, #28]
 8011014:	9307      	strlt	r3, [sp, #28]
 8011016:	bfb8      	it	lt
 8011018:	9204      	strlt	r2, [sp, #16]
 801101a:	7823      	ldrb	r3, [r4, #0]
 801101c:	2b2e      	cmp	r3, #46	; 0x2e
 801101e:	d10c      	bne.n	801103a <_vfiprintf_r+0x176>
 8011020:	7863      	ldrb	r3, [r4, #1]
 8011022:	2b2a      	cmp	r3, #42	; 0x2a
 8011024:	d135      	bne.n	8011092 <_vfiprintf_r+0x1ce>
 8011026:	9b03      	ldr	r3, [sp, #12]
 8011028:	1d1a      	adds	r2, r3, #4
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	9203      	str	r2, [sp, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	bfb8      	it	lt
 8011032:	f04f 33ff 	movlt.w	r3, #4294967295
 8011036:	3402      	adds	r4, #2
 8011038:	9305      	str	r3, [sp, #20]
 801103a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011120 <_vfiprintf_r+0x25c>
 801103e:	7821      	ldrb	r1, [r4, #0]
 8011040:	2203      	movs	r2, #3
 8011042:	4650      	mov	r0, sl
 8011044:	f7ef f954 	bl	80002f0 <memchr>
 8011048:	b140      	cbz	r0, 801105c <_vfiprintf_r+0x198>
 801104a:	2340      	movs	r3, #64	; 0x40
 801104c:	eba0 000a 	sub.w	r0, r0, sl
 8011050:	fa03 f000 	lsl.w	r0, r3, r0
 8011054:	9b04      	ldr	r3, [sp, #16]
 8011056:	4303      	orrs	r3, r0
 8011058:	3401      	adds	r4, #1
 801105a:	9304      	str	r3, [sp, #16]
 801105c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011060:	482c      	ldr	r0, [pc, #176]	; (8011114 <_vfiprintf_r+0x250>)
 8011062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011066:	2206      	movs	r2, #6
 8011068:	f7ef f942 	bl	80002f0 <memchr>
 801106c:	2800      	cmp	r0, #0
 801106e:	d03f      	beq.n	80110f0 <_vfiprintf_r+0x22c>
 8011070:	4b29      	ldr	r3, [pc, #164]	; (8011118 <_vfiprintf_r+0x254>)
 8011072:	bb1b      	cbnz	r3, 80110bc <_vfiprintf_r+0x1f8>
 8011074:	9b03      	ldr	r3, [sp, #12]
 8011076:	3307      	adds	r3, #7
 8011078:	f023 0307 	bic.w	r3, r3, #7
 801107c:	3308      	adds	r3, #8
 801107e:	9303      	str	r3, [sp, #12]
 8011080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011082:	443b      	add	r3, r7
 8011084:	9309      	str	r3, [sp, #36]	; 0x24
 8011086:	e767      	b.n	8010f58 <_vfiprintf_r+0x94>
 8011088:	fb0c 3202 	mla	r2, ip, r2, r3
 801108c:	460c      	mov	r4, r1
 801108e:	2001      	movs	r0, #1
 8011090:	e7a5      	b.n	8010fde <_vfiprintf_r+0x11a>
 8011092:	2300      	movs	r3, #0
 8011094:	3401      	adds	r4, #1
 8011096:	9305      	str	r3, [sp, #20]
 8011098:	4619      	mov	r1, r3
 801109a:	f04f 0c0a 	mov.w	ip, #10
 801109e:	4620      	mov	r0, r4
 80110a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110a4:	3a30      	subs	r2, #48	; 0x30
 80110a6:	2a09      	cmp	r2, #9
 80110a8:	d903      	bls.n	80110b2 <_vfiprintf_r+0x1ee>
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d0c5      	beq.n	801103a <_vfiprintf_r+0x176>
 80110ae:	9105      	str	r1, [sp, #20]
 80110b0:	e7c3      	b.n	801103a <_vfiprintf_r+0x176>
 80110b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80110b6:	4604      	mov	r4, r0
 80110b8:	2301      	movs	r3, #1
 80110ba:	e7f0      	b.n	801109e <_vfiprintf_r+0x1da>
 80110bc:	ab03      	add	r3, sp, #12
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	462a      	mov	r2, r5
 80110c2:	4b16      	ldr	r3, [pc, #88]	; (801111c <_vfiprintf_r+0x258>)
 80110c4:	a904      	add	r1, sp, #16
 80110c6:	4630      	mov	r0, r6
 80110c8:	f3af 8000 	nop.w
 80110cc:	4607      	mov	r7, r0
 80110ce:	1c78      	adds	r0, r7, #1
 80110d0:	d1d6      	bne.n	8011080 <_vfiprintf_r+0x1bc>
 80110d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110d4:	07d9      	lsls	r1, r3, #31
 80110d6:	d405      	bmi.n	80110e4 <_vfiprintf_r+0x220>
 80110d8:	89ab      	ldrh	r3, [r5, #12]
 80110da:	059a      	lsls	r2, r3, #22
 80110dc:	d402      	bmi.n	80110e4 <_vfiprintf_r+0x220>
 80110de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110e0:	f7ff fcc9 	bl	8010a76 <__retarget_lock_release_recursive>
 80110e4:	89ab      	ldrh	r3, [r5, #12]
 80110e6:	065b      	lsls	r3, r3, #25
 80110e8:	f53f af12 	bmi.w	8010f10 <_vfiprintf_r+0x4c>
 80110ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110ee:	e711      	b.n	8010f14 <_vfiprintf_r+0x50>
 80110f0:	ab03      	add	r3, sp, #12
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	462a      	mov	r2, r5
 80110f6:	4b09      	ldr	r3, [pc, #36]	; (801111c <_vfiprintf_r+0x258>)
 80110f8:	a904      	add	r1, sp, #16
 80110fa:	4630      	mov	r0, r6
 80110fc:	f000 f880 	bl	8011200 <_printf_i>
 8011100:	e7e4      	b.n	80110cc <_vfiprintf_r+0x208>
 8011102:	bf00      	nop
 8011104:	0801183c 	.word	0x0801183c
 8011108:	0801185c 	.word	0x0801185c
 801110c:	0801181c 	.word	0x0801181c
 8011110:	0801187c 	.word	0x0801187c
 8011114:	08011886 	.word	0x08011886
 8011118:	00000000 	.word	0x00000000
 801111c:	08010e9f 	.word	0x08010e9f
 8011120:	08011882 	.word	0x08011882

08011124 <_printf_common>:
 8011124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011128:	4616      	mov	r6, r2
 801112a:	4699      	mov	r9, r3
 801112c:	688a      	ldr	r2, [r1, #8]
 801112e:	690b      	ldr	r3, [r1, #16]
 8011130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011134:	4293      	cmp	r3, r2
 8011136:	bfb8      	it	lt
 8011138:	4613      	movlt	r3, r2
 801113a:	6033      	str	r3, [r6, #0]
 801113c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011140:	4607      	mov	r7, r0
 8011142:	460c      	mov	r4, r1
 8011144:	b10a      	cbz	r2, 801114a <_printf_common+0x26>
 8011146:	3301      	adds	r3, #1
 8011148:	6033      	str	r3, [r6, #0]
 801114a:	6823      	ldr	r3, [r4, #0]
 801114c:	0699      	lsls	r1, r3, #26
 801114e:	bf42      	ittt	mi
 8011150:	6833      	ldrmi	r3, [r6, #0]
 8011152:	3302      	addmi	r3, #2
 8011154:	6033      	strmi	r3, [r6, #0]
 8011156:	6825      	ldr	r5, [r4, #0]
 8011158:	f015 0506 	ands.w	r5, r5, #6
 801115c:	d106      	bne.n	801116c <_printf_common+0x48>
 801115e:	f104 0a19 	add.w	sl, r4, #25
 8011162:	68e3      	ldr	r3, [r4, #12]
 8011164:	6832      	ldr	r2, [r6, #0]
 8011166:	1a9b      	subs	r3, r3, r2
 8011168:	42ab      	cmp	r3, r5
 801116a:	dc26      	bgt.n	80111ba <_printf_common+0x96>
 801116c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011170:	1e13      	subs	r3, r2, #0
 8011172:	6822      	ldr	r2, [r4, #0]
 8011174:	bf18      	it	ne
 8011176:	2301      	movne	r3, #1
 8011178:	0692      	lsls	r2, r2, #26
 801117a:	d42b      	bmi.n	80111d4 <_printf_common+0xb0>
 801117c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011180:	4649      	mov	r1, r9
 8011182:	4638      	mov	r0, r7
 8011184:	47c0      	blx	r8
 8011186:	3001      	adds	r0, #1
 8011188:	d01e      	beq.n	80111c8 <_printf_common+0xa4>
 801118a:	6823      	ldr	r3, [r4, #0]
 801118c:	68e5      	ldr	r5, [r4, #12]
 801118e:	6832      	ldr	r2, [r6, #0]
 8011190:	f003 0306 	and.w	r3, r3, #6
 8011194:	2b04      	cmp	r3, #4
 8011196:	bf08      	it	eq
 8011198:	1aad      	subeq	r5, r5, r2
 801119a:	68a3      	ldr	r3, [r4, #8]
 801119c:	6922      	ldr	r2, [r4, #16]
 801119e:	bf0c      	ite	eq
 80111a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111a4:	2500      	movne	r5, #0
 80111a6:	4293      	cmp	r3, r2
 80111a8:	bfc4      	itt	gt
 80111aa:	1a9b      	subgt	r3, r3, r2
 80111ac:	18ed      	addgt	r5, r5, r3
 80111ae:	2600      	movs	r6, #0
 80111b0:	341a      	adds	r4, #26
 80111b2:	42b5      	cmp	r5, r6
 80111b4:	d11a      	bne.n	80111ec <_printf_common+0xc8>
 80111b6:	2000      	movs	r0, #0
 80111b8:	e008      	b.n	80111cc <_printf_common+0xa8>
 80111ba:	2301      	movs	r3, #1
 80111bc:	4652      	mov	r2, sl
 80111be:	4649      	mov	r1, r9
 80111c0:	4638      	mov	r0, r7
 80111c2:	47c0      	blx	r8
 80111c4:	3001      	adds	r0, #1
 80111c6:	d103      	bne.n	80111d0 <_printf_common+0xac>
 80111c8:	f04f 30ff 	mov.w	r0, #4294967295
 80111cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111d0:	3501      	adds	r5, #1
 80111d2:	e7c6      	b.n	8011162 <_printf_common+0x3e>
 80111d4:	18e1      	adds	r1, r4, r3
 80111d6:	1c5a      	adds	r2, r3, #1
 80111d8:	2030      	movs	r0, #48	; 0x30
 80111da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80111de:	4422      	add	r2, r4
 80111e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80111e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80111e8:	3302      	adds	r3, #2
 80111ea:	e7c7      	b.n	801117c <_printf_common+0x58>
 80111ec:	2301      	movs	r3, #1
 80111ee:	4622      	mov	r2, r4
 80111f0:	4649      	mov	r1, r9
 80111f2:	4638      	mov	r0, r7
 80111f4:	47c0      	blx	r8
 80111f6:	3001      	adds	r0, #1
 80111f8:	d0e6      	beq.n	80111c8 <_printf_common+0xa4>
 80111fa:	3601      	adds	r6, #1
 80111fc:	e7d9      	b.n	80111b2 <_printf_common+0x8e>
	...

08011200 <_printf_i>:
 8011200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011204:	7e0f      	ldrb	r7, [r1, #24]
 8011206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011208:	2f78      	cmp	r7, #120	; 0x78
 801120a:	4691      	mov	r9, r2
 801120c:	4680      	mov	r8, r0
 801120e:	460c      	mov	r4, r1
 8011210:	469a      	mov	sl, r3
 8011212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011216:	d807      	bhi.n	8011228 <_printf_i+0x28>
 8011218:	2f62      	cmp	r7, #98	; 0x62
 801121a:	d80a      	bhi.n	8011232 <_printf_i+0x32>
 801121c:	2f00      	cmp	r7, #0
 801121e:	f000 80d8 	beq.w	80113d2 <_printf_i+0x1d2>
 8011222:	2f58      	cmp	r7, #88	; 0x58
 8011224:	f000 80a3 	beq.w	801136e <_printf_i+0x16e>
 8011228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801122c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011230:	e03a      	b.n	80112a8 <_printf_i+0xa8>
 8011232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011236:	2b15      	cmp	r3, #21
 8011238:	d8f6      	bhi.n	8011228 <_printf_i+0x28>
 801123a:	a101      	add	r1, pc, #4	; (adr r1, 8011240 <_printf_i+0x40>)
 801123c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011240:	08011299 	.word	0x08011299
 8011244:	080112ad 	.word	0x080112ad
 8011248:	08011229 	.word	0x08011229
 801124c:	08011229 	.word	0x08011229
 8011250:	08011229 	.word	0x08011229
 8011254:	08011229 	.word	0x08011229
 8011258:	080112ad 	.word	0x080112ad
 801125c:	08011229 	.word	0x08011229
 8011260:	08011229 	.word	0x08011229
 8011264:	08011229 	.word	0x08011229
 8011268:	08011229 	.word	0x08011229
 801126c:	080113b9 	.word	0x080113b9
 8011270:	080112dd 	.word	0x080112dd
 8011274:	0801139b 	.word	0x0801139b
 8011278:	08011229 	.word	0x08011229
 801127c:	08011229 	.word	0x08011229
 8011280:	080113db 	.word	0x080113db
 8011284:	08011229 	.word	0x08011229
 8011288:	080112dd 	.word	0x080112dd
 801128c:	08011229 	.word	0x08011229
 8011290:	08011229 	.word	0x08011229
 8011294:	080113a3 	.word	0x080113a3
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	1d1a      	adds	r2, r3, #4
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	602a      	str	r2, [r5, #0]
 80112a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112a8:	2301      	movs	r3, #1
 80112aa:	e0a3      	b.n	80113f4 <_printf_i+0x1f4>
 80112ac:	6820      	ldr	r0, [r4, #0]
 80112ae:	6829      	ldr	r1, [r5, #0]
 80112b0:	0606      	lsls	r6, r0, #24
 80112b2:	f101 0304 	add.w	r3, r1, #4
 80112b6:	d50a      	bpl.n	80112ce <_printf_i+0xce>
 80112b8:	680e      	ldr	r6, [r1, #0]
 80112ba:	602b      	str	r3, [r5, #0]
 80112bc:	2e00      	cmp	r6, #0
 80112be:	da03      	bge.n	80112c8 <_printf_i+0xc8>
 80112c0:	232d      	movs	r3, #45	; 0x2d
 80112c2:	4276      	negs	r6, r6
 80112c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112c8:	485e      	ldr	r0, [pc, #376]	; (8011444 <_printf_i+0x244>)
 80112ca:	230a      	movs	r3, #10
 80112cc:	e019      	b.n	8011302 <_printf_i+0x102>
 80112ce:	680e      	ldr	r6, [r1, #0]
 80112d0:	602b      	str	r3, [r5, #0]
 80112d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80112d6:	bf18      	it	ne
 80112d8:	b236      	sxthne	r6, r6
 80112da:	e7ef      	b.n	80112bc <_printf_i+0xbc>
 80112dc:	682b      	ldr	r3, [r5, #0]
 80112de:	6820      	ldr	r0, [r4, #0]
 80112e0:	1d19      	adds	r1, r3, #4
 80112e2:	6029      	str	r1, [r5, #0]
 80112e4:	0601      	lsls	r1, r0, #24
 80112e6:	d501      	bpl.n	80112ec <_printf_i+0xec>
 80112e8:	681e      	ldr	r6, [r3, #0]
 80112ea:	e002      	b.n	80112f2 <_printf_i+0xf2>
 80112ec:	0646      	lsls	r6, r0, #25
 80112ee:	d5fb      	bpl.n	80112e8 <_printf_i+0xe8>
 80112f0:	881e      	ldrh	r6, [r3, #0]
 80112f2:	4854      	ldr	r0, [pc, #336]	; (8011444 <_printf_i+0x244>)
 80112f4:	2f6f      	cmp	r7, #111	; 0x6f
 80112f6:	bf0c      	ite	eq
 80112f8:	2308      	moveq	r3, #8
 80112fa:	230a      	movne	r3, #10
 80112fc:	2100      	movs	r1, #0
 80112fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011302:	6865      	ldr	r5, [r4, #4]
 8011304:	60a5      	str	r5, [r4, #8]
 8011306:	2d00      	cmp	r5, #0
 8011308:	bfa2      	ittt	ge
 801130a:	6821      	ldrge	r1, [r4, #0]
 801130c:	f021 0104 	bicge.w	r1, r1, #4
 8011310:	6021      	strge	r1, [r4, #0]
 8011312:	b90e      	cbnz	r6, 8011318 <_printf_i+0x118>
 8011314:	2d00      	cmp	r5, #0
 8011316:	d04d      	beq.n	80113b4 <_printf_i+0x1b4>
 8011318:	4615      	mov	r5, r2
 801131a:	fbb6 f1f3 	udiv	r1, r6, r3
 801131e:	fb03 6711 	mls	r7, r3, r1, r6
 8011322:	5dc7      	ldrb	r7, [r0, r7]
 8011324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011328:	4637      	mov	r7, r6
 801132a:	42bb      	cmp	r3, r7
 801132c:	460e      	mov	r6, r1
 801132e:	d9f4      	bls.n	801131a <_printf_i+0x11a>
 8011330:	2b08      	cmp	r3, #8
 8011332:	d10b      	bne.n	801134c <_printf_i+0x14c>
 8011334:	6823      	ldr	r3, [r4, #0]
 8011336:	07de      	lsls	r6, r3, #31
 8011338:	d508      	bpl.n	801134c <_printf_i+0x14c>
 801133a:	6923      	ldr	r3, [r4, #16]
 801133c:	6861      	ldr	r1, [r4, #4]
 801133e:	4299      	cmp	r1, r3
 8011340:	bfde      	ittt	le
 8011342:	2330      	movle	r3, #48	; 0x30
 8011344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011348:	f105 35ff 	addle.w	r5, r5, #4294967295
 801134c:	1b52      	subs	r2, r2, r5
 801134e:	6122      	str	r2, [r4, #16]
 8011350:	f8cd a000 	str.w	sl, [sp]
 8011354:	464b      	mov	r3, r9
 8011356:	aa03      	add	r2, sp, #12
 8011358:	4621      	mov	r1, r4
 801135a:	4640      	mov	r0, r8
 801135c:	f7ff fee2 	bl	8011124 <_printf_common>
 8011360:	3001      	adds	r0, #1
 8011362:	d14c      	bne.n	80113fe <_printf_i+0x1fe>
 8011364:	f04f 30ff 	mov.w	r0, #4294967295
 8011368:	b004      	add	sp, #16
 801136a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801136e:	4835      	ldr	r0, [pc, #212]	; (8011444 <_printf_i+0x244>)
 8011370:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011374:	6829      	ldr	r1, [r5, #0]
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	f851 6b04 	ldr.w	r6, [r1], #4
 801137c:	6029      	str	r1, [r5, #0]
 801137e:	061d      	lsls	r5, r3, #24
 8011380:	d514      	bpl.n	80113ac <_printf_i+0x1ac>
 8011382:	07df      	lsls	r7, r3, #31
 8011384:	bf44      	itt	mi
 8011386:	f043 0320 	orrmi.w	r3, r3, #32
 801138a:	6023      	strmi	r3, [r4, #0]
 801138c:	b91e      	cbnz	r6, 8011396 <_printf_i+0x196>
 801138e:	6823      	ldr	r3, [r4, #0]
 8011390:	f023 0320 	bic.w	r3, r3, #32
 8011394:	6023      	str	r3, [r4, #0]
 8011396:	2310      	movs	r3, #16
 8011398:	e7b0      	b.n	80112fc <_printf_i+0xfc>
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	f043 0320 	orr.w	r3, r3, #32
 80113a0:	6023      	str	r3, [r4, #0]
 80113a2:	2378      	movs	r3, #120	; 0x78
 80113a4:	4828      	ldr	r0, [pc, #160]	; (8011448 <_printf_i+0x248>)
 80113a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113aa:	e7e3      	b.n	8011374 <_printf_i+0x174>
 80113ac:	0659      	lsls	r1, r3, #25
 80113ae:	bf48      	it	mi
 80113b0:	b2b6      	uxthmi	r6, r6
 80113b2:	e7e6      	b.n	8011382 <_printf_i+0x182>
 80113b4:	4615      	mov	r5, r2
 80113b6:	e7bb      	b.n	8011330 <_printf_i+0x130>
 80113b8:	682b      	ldr	r3, [r5, #0]
 80113ba:	6826      	ldr	r6, [r4, #0]
 80113bc:	6961      	ldr	r1, [r4, #20]
 80113be:	1d18      	adds	r0, r3, #4
 80113c0:	6028      	str	r0, [r5, #0]
 80113c2:	0635      	lsls	r5, r6, #24
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	d501      	bpl.n	80113cc <_printf_i+0x1cc>
 80113c8:	6019      	str	r1, [r3, #0]
 80113ca:	e002      	b.n	80113d2 <_printf_i+0x1d2>
 80113cc:	0670      	lsls	r0, r6, #25
 80113ce:	d5fb      	bpl.n	80113c8 <_printf_i+0x1c8>
 80113d0:	8019      	strh	r1, [r3, #0]
 80113d2:	2300      	movs	r3, #0
 80113d4:	6123      	str	r3, [r4, #16]
 80113d6:	4615      	mov	r5, r2
 80113d8:	e7ba      	b.n	8011350 <_printf_i+0x150>
 80113da:	682b      	ldr	r3, [r5, #0]
 80113dc:	1d1a      	adds	r2, r3, #4
 80113de:	602a      	str	r2, [r5, #0]
 80113e0:	681d      	ldr	r5, [r3, #0]
 80113e2:	6862      	ldr	r2, [r4, #4]
 80113e4:	2100      	movs	r1, #0
 80113e6:	4628      	mov	r0, r5
 80113e8:	f7ee ff82 	bl	80002f0 <memchr>
 80113ec:	b108      	cbz	r0, 80113f2 <_printf_i+0x1f2>
 80113ee:	1b40      	subs	r0, r0, r5
 80113f0:	6060      	str	r0, [r4, #4]
 80113f2:	6863      	ldr	r3, [r4, #4]
 80113f4:	6123      	str	r3, [r4, #16]
 80113f6:	2300      	movs	r3, #0
 80113f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113fc:	e7a8      	b.n	8011350 <_printf_i+0x150>
 80113fe:	6923      	ldr	r3, [r4, #16]
 8011400:	462a      	mov	r2, r5
 8011402:	4649      	mov	r1, r9
 8011404:	4640      	mov	r0, r8
 8011406:	47d0      	blx	sl
 8011408:	3001      	adds	r0, #1
 801140a:	d0ab      	beq.n	8011364 <_printf_i+0x164>
 801140c:	6823      	ldr	r3, [r4, #0]
 801140e:	079b      	lsls	r3, r3, #30
 8011410:	d413      	bmi.n	801143a <_printf_i+0x23a>
 8011412:	68e0      	ldr	r0, [r4, #12]
 8011414:	9b03      	ldr	r3, [sp, #12]
 8011416:	4298      	cmp	r0, r3
 8011418:	bfb8      	it	lt
 801141a:	4618      	movlt	r0, r3
 801141c:	e7a4      	b.n	8011368 <_printf_i+0x168>
 801141e:	2301      	movs	r3, #1
 8011420:	4632      	mov	r2, r6
 8011422:	4649      	mov	r1, r9
 8011424:	4640      	mov	r0, r8
 8011426:	47d0      	blx	sl
 8011428:	3001      	adds	r0, #1
 801142a:	d09b      	beq.n	8011364 <_printf_i+0x164>
 801142c:	3501      	adds	r5, #1
 801142e:	68e3      	ldr	r3, [r4, #12]
 8011430:	9903      	ldr	r1, [sp, #12]
 8011432:	1a5b      	subs	r3, r3, r1
 8011434:	42ab      	cmp	r3, r5
 8011436:	dcf2      	bgt.n	801141e <_printf_i+0x21e>
 8011438:	e7eb      	b.n	8011412 <_printf_i+0x212>
 801143a:	2500      	movs	r5, #0
 801143c:	f104 0619 	add.w	r6, r4, #25
 8011440:	e7f5      	b.n	801142e <_printf_i+0x22e>
 8011442:	bf00      	nop
 8011444:	0801188d 	.word	0x0801188d
 8011448:	0801189e 	.word	0x0801189e

0801144c <__sread>:
 801144c:	b510      	push	{r4, lr}
 801144e:	460c      	mov	r4, r1
 8011450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011454:	f000 f8b6 	bl	80115c4 <_read_r>
 8011458:	2800      	cmp	r0, #0
 801145a:	bfab      	itete	ge
 801145c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801145e:	89a3      	ldrhlt	r3, [r4, #12]
 8011460:	181b      	addge	r3, r3, r0
 8011462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011466:	bfac      	ite	ge
 8011468:	6563      	strge	r3, [r4, #84]	; 0x54
 801146a:	81a3      	strhlt	r3, [r4, #12]
 801146c:	bd10      	pop	{r4, pc}

0801146e <__swrite>:
 801146e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011472:	461f      	mov	r7, r3
 8011474:	898b      	ldrh	r3, [r1, #12]
 8011476:	05db      	lsls	r3, r3, #23
 8011478:	4605      	mov	r5, r0
 801147a:	460c      	mov	r4, r1
 801147c:	4616      	mov	r6, r2
 801147e:	d505      	bpl.n	801148c <__swrite+0x1e>
 8011480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011484:	2302      	movs	r3, #2
 8011486:	2200      	movs	r2, #0
 8011488:	f000 f868 	bl	801155c <_lseek_r>
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011496:	81a3      	strh	r3, [r4, #12]
 8011498:	4632      	mov	r2, r6
 801149a:	463b      	mov	r3, r7
 801149c:	4628      	mov	r0, r5
 801149e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114a2:	f000 b817 	b.w	80114d4 <_write_r>

080114a6 <__sseek>:
 80114a6:	b510      	push	{r4, lr}
 80114a8:	460c      	mov	r4, r1
 80114aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ae:	f000 f855 	bl	801155c <_lseek_r>
 80114b2:	1c43      	adds	r3, r0, #1
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	bf15      	itete	ne
 80114b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80114ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80114be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80114c2:	81a3      	strheq	r3, [r4, #12]
 80114c4:	bf18      	it	ne
 80114c6:	81a3      	strhne	r3, [r4, #12]
 80114c8:	bd10      	pop	{r4, pc}

080114ca <__sclose>:
 80114ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ce:	f000 b813 	b.w	80114f8 <_close_r>
	...

080114d4 <_write_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4d07      	ldr	r5, [pc, #28]	; (80114f4 <_write_r+0x20>)
 80114d8:	4604      	mov	r4, r0
 80114da:	4608      	mov	r0, r1
 80114dc:	4611      	mov	r1, r2
 80114de:	2200      	movs	r2, #0
 80114e0:	602a      	str	r2, [r5, #0]
 80114e2:	461a      	mov	r2, r3
 80114e4:	f000 f8a8 	bl	8011638 <_write>
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	d102      	bne.n	80114f2 <_write_r+0x1e>
 80114ec:	682b      	ldr	r3, [r5, #0]
 80114ee:	b103      	cbz	r3, 80114f2 <_write_r+0x1e>
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	bd38      	pop	{r3, r4, r5, pc}
 80114f4:	24005a5c 	.word	0x24005a5c

080114f8 <_close_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d06      	ldr	r5, [pc, #24]	; (8011514 <_close_r+0x1c>)
 80114fc:	2300      	movs	r3, #0
 80114fe:	4604      	mov	r4, r0
 8011500:	4608      	mov	r0, r1
 8011502:	602b      	str	r3, [r5, #0]
 8011504:	f000 f870 	bl	80115e8 <_close>
 8011508:	1c43      	adds	r3, r0, #1
 801150a:	d102      	bne.n	8011512 <_close_r+0x1a>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	b103      	cbz	r3, 8011512 <_close_r+0x1a>
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	bd38      	pop	{r3, r4, r5, pc}
 8011514:	24005a5c 	.word	0x24005a5c

08011518 <_fstat_r>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	4d07      	ldr	r5, [pc, #28]	; (8011538 <_fstat_r+0x20>)
 801151c:	2300      	movs	r3, #0
 801151e:	4604      	mov	r4, r0
 8011520:	4608      	mov	r0, r1
 8011522:	4611      	mov	r1, r2
 8011524:	602b      	str	r3, [r5, #0]
 8011526:	f000 f867 	bl	80115f8 <_fstat>
 801152a:	1c43      	adds	r3, r0, #1
 801152c:	d102      	bne.n	8011534 <_fstat_r+0x1c>
 801152e:	682b      	ldr	r3, [r5, #0]
 8011530:	b103      	cbz	r3, 8011534 <_fstat_r+0x1c>
 8011532:	6023      	str	r3, [r4, #0]
 8011534:	bd38      	pop	{r3, r4, r5, pc}
 8011536:	bf00      	nop
 8011538:	24005a5c 	.word	0x24005a5c

0801153c <_isatty_r>:
 801153c:	b538      	push	{r3, r4, r5, lr}
 801153e:	4d06      	ldr	r5, [pc, #24]	; (8011558 <_isatty_r+0x1c>)
 8011540:	2300      	movs	r3, #0
 8011542:	4604      	mov	r4, r0
 8011544:	4608      	mov	r0, r1
 8011546:	602b      	str	r3, [r5, #0]
 8011548:	f000 f85e 	bl	8011608 <_isatty>
 801154c:	1c43      	adds	r3, r0, #1
 801154e:	d102      	bne.n	8011556 <_isatty_r+0x1a>
 8011550:	682b      	ldr	r3, [r5, #0]
 8011552:	b103      	cbz	r3, 8011556 <_isatty_r+0x1a>
 8011554:	6023      	str	r3, [r4, #0]
 8011556:	bd38      	pop	{r3, r4, r5, pc}
 8011558:	24005a5c 	.word	0x24005a5c

0801155c <_lseek_r>:
 801155c:	b538      	push	{r3, r4, r5, lr}
 801155e:	4d07      	ldr	r5, [pc, #28]	; (801157c <_lseek_r+0x20>)
 8011560:	4604      	mov	r4, r0
 8011562:	4608      	mov	r0, r1
 8011564:	4611      	mov	r1, r2
 8011566:	2200      	movs	r2, #0
 8011568:	602a      	str	r2, [r5, #0]
 801156a:	461a      	mov	r2, r3
 801156c:	f000 f854 	bl	8011618 <_lseek>
 8011570:	1c43      	adds	r3, r0, #1
 8011572:	d102      	bne.n	801157a <_lseek_r+0x1e>
 8011574:	682b      	ldr	r3, [r5, #0]
 8011576:	b103      	cbz	r3, 801157a <_lseek_r+0x1e>
 8011578:	6023      	str	r3, [r4, #0]
 801157a:	bd38      	pop	{r3, r4, r5, pc}
 801157c:	24005a5c 	.word	0x24005a5c

08011580 <memmove>:
 8011580:	4288      	cmp	r0, r1
 8011582:	b510      	push	{r4, lr}
 8011584:	eb01 0402 	add.w	r4, r1, r2
 8011588:	d902      	bls.n	8011590 <memmove+0x10>
 801158a:	4284      	cmp	r4, r0
 801158c:	4623      	mov	r3, r4
 801158e:	d807      	bhi.n	80115a0 <memmove+0x20>
 8011590:	1e43      	subs	r3, r0, #1
 8011592:	42a1      	cmp	r1, r4
 8011594:	d008      	beq.n	80115a8 <memmove+0x28>
 8011596:	f811 2b01 	ldrb.w	r2, [r1], #1
 801159a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801159e:	e7f8      	b.n	8011592 <memmove+0x12>
 80115a0:	4402      	add	r2, r0
 80115a2:	4601      	mov	r1, r0
 80115a4:	428a      	cmp	r2, r1
 80115a6:	d100      	bne.n	80115aa <memmove+0x2a>
 80115a8:	bd10      	pop	{r4, pc}
 80115aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115b2:	e7f7      	b.n	80115a4 <memmove+0x24>

080115b4 <_malloc_usable_size_r>:
 80115b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115b8:	1f18      	subs	r0, r3, #4
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	bfbc      	itt	lt
 80115be:	580b      	ldrlt	r3, [r1, r0]
 80115c0:	18c0      	addlt	r0, r0, r3
 80115c2:	4770      	bx	lr

080115c4 <_read_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	4d07      	ldr	r5, [pc, #28]	; (80115e4 <_read_r+0x20>)
 80115c8:	4604      	mov	r4, r0
 80115ca:	4608      	mov	r0, r1
 80115cc:	4611      	mov	r1, r2
 80115ce:	2200      	movs	r2, #0
 80115d0:	602a      	str	r2, [r5, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	f000 f828 	bl	8011628 <_read>
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	d102      	bne.n	80115e2 <_read_r+0x1e>
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	b103      	cbz	r3, 80115e2 <_read_r+0x1e>
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	bd38      	pop	{r3, r4, r5, pc}
 80115e4:	24005a5c 	.word	0x24005a5c

080115e8 <_close>:
 80115e8:	4b02      	ldr	r3, [pc, #8]	; (80115f4 <_close+0xc>)
 80115ea:	2258      	movs	r2, #88	; 0x58
 80115ec:	601a      	str	r2, [r3, #0]
 80115ee:	f04f 30ff 	mov.w	r0, #4294967295
 80115f2:	4770      	bx	lr
 80115f4:	24005a5c 	.word	0x24005a5c

080115f8 <_fstat>:
 80115f8:	4b02      	ldr	r3, [pc, #8]	; (8011604 <_fstat+0xc>)
 80115fa:	2258      	movs	r2, #88	; 0x58
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011602:	4770      	bx	lr
 8011604:	24005a5c 	.word	0x24005a5c

08011608 <_isatty>:
 8011608:	4b02      	ldr	r3, [pc, #8]	; (8011614 <_isatty+0xc>)
 801160a:	2258      	movs	r2, #88	; 0x58
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	2000      	movs	r0, #0
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	24005a5c 	.word	0x24005a5c

08011618 <_lseek>:
 8011618:	4b02      	ldr	r3, [pc, #8]	; (8011624 <_lseek+0xc>)
 801161a:	2258      	movs	r2, #88	; 0x58
 801161c:	601a      	str	r2, [r3, #0]
 801161e:	f04f 30ff 	mov.w	r0, #4294967295
 8011622:	4770      	bx	lr
 8011624:	24005a5c 	.word	0x24005a5c

08011628 <_read>:
 8011628:	4b02      	ldr	r3, [pc, #8]	; (8011634 <_read+0xc>)
 801162a:	2258      	movs	r2, #88	; 0x58
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	f04f 30ff 	mov.w	r0, #4294967295
 8011632:	4770      	bx	lr
 8011634:	24005a5c 	.word	0x24005a5c

08011638 <_write>:
 8011638:	4b02      	ldr	r3, [pc, #8]	; (8011644 <_write+0xc>)
 801163a:	2258      	movs	r2, #88	; 0x58
 801163c:	601a      	str	r2, [r3, #0]
 801163e:	f04f 30ff 	mov.w	r0, #4294967295
 8011642:	4770      	bx	lr
 8011644:	24005a5c 	.word	0x24005a5c

08011648 <_init>:
 8011648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164a:	bf00      	nop
 801164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801164e:	bc08      	pop	{r3}
 8011650:	469e      	mov	lr, r3
 8011652:	4770      	bx	lr

08011654 <_fini>:
 8011654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011656:	bf00      	nop
 8011658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801165a:	bc08      	pop	{r3}
 801165c:	469e      	mov	lr, r3
 801165e:	4770      	bx	lr
